[
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create an empty list to store shared elements\n    shared_elements = []\n    \n    # Loop through the first list and check for elements in the second list\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    \n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to lists\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    # Create an empty list to store shared elements\n    shared_elements = []\n    # Loop through each element in test_list1\n    for element in test_list1:\n        # Check if the element is in test_list2\n        if element in test_list2:\n            # If it is, add it to the shared_elements list\n            shared_elements.append(element)\n    # Return the shared_elements list\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert tuples to lists if needed\n    if type(test_tup1) == tuple:\n        test_list1 = list(test_tup1)\n    else:\n        test_list1 = test_tup1\n    if type(test_tup2) == tuple:\n        test_list2 = list(test_tup2)\n    else:\n        test_list2 = test_tup2\n    \n    # find the shared elements\n    shared_elements = [elem for elem in test_list1 if elem in test_list2]\n    \n    # convert the list back to tuple if needed\n    if type(test_tup1) == tuple:\n        shared_elements = tuple(shared_elements)\n    \n    return shared_elements\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if number is divisible by any number from 2 to its square root\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = hq.nlargest(n, nums)\n    return heap[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [num for num in hq.nlargest(n, heap)]"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    # create a min heap of size n\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            # if the current num is larger than the smallest num in the heap\n            if num > heap[0]:\n                # remove the smallest num from the heap and add the current num\n                hq.heappop(heap)\n                hq.heappush(heap, num)\n    # reverse the heap to get the largest n numbers in descending order\n    return sorted(heap, reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        raise ValueError(\"n should be less than or equal to the length of the list\")\n\n    # Create a min heap of size n\n    min_heap = nums[:n]\n    hq.heapify(min_heap)\n\n    # Iterate over the remaining elements and add them to the heap if they are larger than the smallest element in the heap\n    for i in range(n, len(nums)):\n        if nums[i] > min_heap[0]:\n            hq.heappushpop(min_heap, nums[i])\n\n    # Return the min heap, which will be the n largest integers in descending order\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a heap queue with the first n elements of the list\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # iterate through the remaining elements in the list\n    for num in nums[n:]:\n        # if the current number is greater than the smallest element in the heap queue,\n        # pop the smallest element and insert the current number into the heap queue\n        if num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n\n    # return the heap queue in descending order\n    return hq.nlargest(n, heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                hq.heappushpop(heap, num)\n    return sorted(heap, reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = hq.nlargest(n, nums)\n    return heap[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a heap of the first n elements from the list\n    heap = hq.nlargest(n, nums)\n\n    # loop through the remaining elements of the list\n    for num in nums[n:]:\n        # if the current element is larger than the smallest element in the heap,\n        # replace it with the current element and reheapify the heap\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n\n    return sorted(heap, reverse=True)\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    # Check if the given number is positive or not\n    if x < 0:\n        return False\n    \n    # Check if the given number is a power of 2 or not\n    if x == 0:\n        return False\n    \n    # Check if the given number is a power of 2 or not\n    while x > 1:\n        if x % 2 != 0:\n            return False\n        x //= 2\n    \n    # If the given number is a power of 2, return True\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x <= 0:\n        return False\n    \n    binary = bin(x)[2:]\n    \n    if '1' not in binary:\n        return False\n    \n    count = binary.count('1')\n    \n    if count > 1:\n        return False\n    \n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return False\n    while x != 0:\n        if x & 1 == 1 and (x & (x - 1)) == 0:\n            return True\n        x >>= 1\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # if x is zero, it cannot be a power of 2\n    if x == 0:\n        return False\n    # check if x is a power of 2 by testing if x has only one bit set to 1\n    while x > 1:\n        if x % 2 == 0:\n            return False\n        x //= 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    # Check if x is negative\n    if x < 0:\n        return False\n\n    # Check if x is a power of two by calculating the log2 and check if it's an integer\n    log2_x = math.log2(x)\n    if log2_x.is_integer():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    return bin(x).count('1') == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of two\n    if x <= 0 or (x & (x - 1)) != 0:\n        return False\n    \n    # Check if the two numbers differ at one bit position only\n    y = x ^ (x >> 1)\n    if y <= 0 or (y & (y - 1)) != 0:\n        return False\n    \n    # If both conditions are satisfied, return True\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def is_power_of_two(x):\n    if x == 0:\n        return False\n    while x != 0:\n        if x & 1 == 0:\n            return False\n        x >>= 1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of 2\n    if x == 0 or (x & (x - 1)) != 0:\n        return False\n    # Check if x-1 is a power of 2\n    x -= 1\n    if x == 0 or (x & (x - 1)) != 0:\n        return True\n    # If both x and x-1 are powers of 2, then they differ at one bit position only\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def is_power_of_two(x):\n    # Check if the number is a power of 2\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        while x != 0:\n            if x % 2 != 0:\n                return False\n            x //= 2\n    \n    # Check if the number is 1 or more away from a power of 2\n    if abs(x - 1) > 1:\n        return False\n    \n    return True\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # using regular expression to find all the words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    # filtering out words with less than 4 characters\n    result = [word for word in words if len(word) >= 4]\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the text into words\n    words = text.split()\n    # create a list to store the words that are at least 4 characters long\n    long_words = []\n    # iterate over each word in the list\n    for word in words:\n        # check if the word is at least 4 characters long\n        if len(word) >= 4:\n            # if so, add it to the long_words list\n            long_words.append(word)\n    # return the list of long words\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        square = num ** 2\n        squares.append(square)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        square = num ** 2\n        squares.append(square)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def find_Rotations(s):\n    # If the string is empty or has only one character, no rotation is needed\n    if len(s) <= 1:\n        return 0\n    \n    # Check if the string is already sorted, if it is, no rotation is needed\n    if s == sorted(s):\n        return 0\n    \n    # Initialize the minimum number of rotations and the number of iterations\n    min_rotations = 1\n    iterations = 2\n    \n    # Loop until the number of iterations is greater than the length of the string\n    while iterations <= len(s):\n        # Rotate the string by the current number of iterations\n        rotated_s = s[-iterations:] + s[:-iterations]\n        \n        # If the rotated string is sorted, return the minimum number of rotations\n        if rotated_s == sorted(rotated_s):\n            return min_rotations\n        \n        # Increment the minimum number of rotations and the number of iterations\n        min_rotations += 1\n        iterations += 1\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n <= 1:\n        return 0\n    \n    # Calculate the hash of the string and its rotations\n    str_hash = hash(str)\n    rotations = [hash(str[i:] + str[:i]) for i in range(n)]\n    \n    # Find the minimum number of rotations to get the same string\n    for i in range(n):\n        if str_hash == rotations[i]:\n            return i\n    \n    # If no rotation has the same hash, then the minimum number of rotations is n\n    return n\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    min_rotations = n\n\n    for i in range(n):\n        rotated_str = str[i:] + str[:i]\n        if rotated_str == str:\n            return i\n\n    return min_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # If the string is empty or has only one character, there is no rotation\n    if len(str) <= 1:\n        return 0\n    \n    # Check if the string is already in sorted order (i.e. no rotation is needed)\n    if sorted(str) == list(str):\n        return 0\n    \n    # Initialize the minimum number of rotations to the length of the string\n    min_rotations = len(str)\n    \n    # Try all possible rotations of the string and update the minimum number of rotations if necessary\n    for i in range(len(str)):\n        # Rotate the string by i characters\n        rotated_str = str[i:] + str[:i]\n        \n        # If the rotated string is already sorted, we don't need to rotate any more\n        if sorted(rotated_str) == list(rotated_str):\n            return i\n        \n        # Otherwise, update the minimum number of rotations\n        min_rotations = min(min_rotations, i)\n    \n    # If we haven't found the minimum number of rotations yet, there must be an infinite loop\n    return min_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Special cases\n    if n == 0 or n == 1:\n        return n\n    # Use Knuth-Morris-Pratt algorithm to find the first occurrence of each substring of length n-1\n    lcp = [0] * n\n    l = 0\n    for i in range(1, n):\n        while l > 0 and str[i] != str[l]:\n            l = lcp[l-1]\n        if str[i] == str[l]:\n            l += 1\n        lcp[i] = l\n    # Count the number of rotations required to get the same string\n    count = 0\n    for i in range(n):\n        if i+1 < n and str[i] == str[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        if str[0] == str[1]:\n            return 0\n        else:\n            return 1\n    if n == 3:\n        if str[0] == str[2]:\n            return 0\n        elif str[0] == str[1]:\n            return 1\n        else:\n            return 2\n\n    # Check if the first and last characters are the same\n    if str[0] == str[-1]:\n        return 0\n\n    # Find the minimum number of rotations required to make the string palindrome\n    min_rotations = float('inf')\n    for i in range(1, n):\n        rotated_str = str[i:] + str[:i]\n        if rotated_str[0] == rotated_str[-1]:\n            min_rotations = min(min_rotations, find_Rotations(rotated_str))\n            break\n\n    return min_rotations + 1\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def find_rotations(s):\n    if len(s) <= 1:\n        return 0\n\n    # find the smallest rotation that is not equal to the original string\n    for i in range(1, len(s)):\n        if s[i:] + s[:i] != s:\n            break\n\n    # if we didn't find a smaller rotation, then the original string is already minimized\n    if s[i:] + s[:i] == s:\n        return 0\n\n    # count the number of rotations to minimize the string\n    count = 0\n    while s[i:] + s[:i] != s:\n        count += 1\n        s = s[1:] + s[0]\n\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    for i in range(n):\n        if str == str[n-i:] + str[:n-i]:\n            return i\n    return n\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    if len(str) <= 1:\n        return 0\n    \n    # Find the first repeated character in the string\n    for i in range(len(str)):\n        if str[i] == str[i % len(str)]:\n            break\n    \n    # If all characters are distinct, return 0\n    if i == len(str) - 1:\n        return 0\n    \n    # Find the second repeated character in the string\n    for j in range(i+1, len(str)):\n        if str[j] == str[j % len(str)]:\n            break\n    \n    # Calculate the number of rotations\n    k = (len(str) - j) % len(str)\n    if k == 0:\n        k = len(str)\n    \n    # Find the minimum number of rotations required\n    if k % 2 == 0:\n        return k/2\n    else:\n        return (k+1)/2\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def find_rotations(string):\n    # check if the string is already a rotation of itself\n    if string == string[len(string)//2:] + string[:len(string)//2]:\n        return 0\n    \n    # if not, find the minimum number of rotations required\n    for i in range(1, len(string)):\n        if string == string[i:] + string[:i]:\n            return i\n        \n    # if not found, then it requires len(string) rotations\n    return len(string)\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    # check if the character is present in the string\n    if ch in s:\n        # find the index of the first occurrence of the character\n        first_index = s.index(ch)\n        # find the index of the last occurrence of the character\n        last_index = s.rindex(ch)\n        # create a new string by removing the first and last occurrences of the character\n        new_string = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n        return new_string\n    else:\n        return s # if the character is not present in the string, return the original string\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1 or last_occurrence == -1:\n        return s\n    elif first_occurrence == last_occurrence:\n        return s.replace(ch, '')\n    else:\n        return s[:first_occurrence] + s[first_occurrence+1:] + s[last_occurrence+1:]"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find the first occurrence of the character\n    first_occurrence = s.find(ch)\n    \n    # Find the last occurrence of the character\n    last_occurrence = s.rfind(ch)\n    \n    # If both first and last occurrence are not found, return the original string\n    if first_occurrence == -1 or last_occurrence == -1:\n        return s\n    \n    # If first and last occurrence are found, remove them from the string\n    else:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    # find the first and last indices of the character\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    \n    # if the character is not found, return the original string\n    if first_occ == -1:\n        return s\n    \n    # remove the first and last occurrences of the character\n    new_s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    \n    # recursively call the function until no more occurrences of the character are found\n    return remove_Occ(new_s, ch)"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    \n    if first_occurrence == -1 or last_occurrence == -1:\n        # If character not found, return original string\n        return s\n    else:\n        # Remove first and last occurrences of character\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    index_first = s.find(ch)\n    index_last = s.rfind(ch)\n    if index_first == -1 or index_last == -1:\n        return s\n    elif index_first == index_last:\n        return s[:index_first] + s[index_first+1:]\n    else:\n        return s[:index_first] + s[index_first+1:index_last] + s[index_last+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # find the index of the first occurrence of ch\n    ind1 = s.find(ch)\n    # find the index of the last occurrence of ch\n    ind2 = s.rfind(ch)\n    # remove the characters using slicing\n    s = s[:ind1] + s[ind1+1:ind2] + s[ind2+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch in s:\n        start = s.find(ch)\n        end = s.rfind(ch)\n        if start == end:  # if ch occurs only once in the string\n            return s.replace(ch, \"\")\n        else:\n            return s[:start] + s[start+1:end] + s[end+1:]\n    else:\n        return s  # if ch is not in the string\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    index_first = s.find(ch)\n    index_last = s.rfind(ch)\n\n    if index_first != -1 and index_last != -1:\n        s = s[:index_first] + s[index_first+1:index_last] + s[index_last+1:]\n        return s\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1 or last_occurrence == -1:\n        return s\n    elif first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence+1:]\n    else:\n        return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Calculate the sum of each row of the matrix\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n    \n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the rows based on their sum\n    sorted_rows = sorted(range(len(row_sums)), key=lambda k: row_sums[k])\n    # Create a new matrix with the rows sorted\n    sorted_M = [M[i] for i in sorted_rows]\n    return sorted_M\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    # Create a list to store the sums of each row\n    row_sums = []\n    \n    # Iterate through each row and add the sum to the list\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    \n    # Sort the matrix by the sums of its rows\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n    \n    # Return the sorted matrix\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows by their sum in ascending order\n    sorted_rows = sorted(range(len(row_sums)), key=lambda k: row_sums[k])\n    \n    # Reorder the matrix according to the sorted rows\n    sorted_matrix = [M[i] for i in sorted_rows]\n    \n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Compute the sum of each row\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n\n    # Sort the matrix based on the sum of its rows\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows by their sum in ascending order\n    sorted_rows = sorted(range(len(M)), key=lambda i: row_sums[i])\n\n    # Create a new matrix with the sorted rows\n    sorted_matrix = [M[i] for i in sorted_rows]\n\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    # Initialize a list to store the sorted matrix\n    sorted_matrix = []\n\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix based on the sum of its rows\n    sorted_rows = sorted(range(len(row_sums)), key=lambda k: row_sums[k])\n\n    # Add the sorted rows to the sorted matrix\n    for i in sorted_rows:\n        sorted_matrix.append(M[i])\n\n    # Return the sorted matrix\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Compute the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows based on their sum\n    sorted_rows = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n    \n    # Create a sorted matrix based on the sorted rows\n    sorted_matrix = [[M[i][j] for j in sorted_rows] for i in range(len(M))]\n    \n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    sorted_mat = sorted(M, key=lambda x: sum(x))\n    return sorted_mat\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = (l * b * h) / 3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2)*l*b*h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 1/2 * l * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the length, breadth and height of a triangular prism as input and returns its volume.\n    \"\"\"\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    volume = (1/2) * l * b * h\n    \n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+(_[a-z]+)*')\n    return bool(pattern.fullmatch(text))\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'[a-z]+(_[a-z]+)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'([a-z]+(_[a-z]+)*)+')\n    return pattern.search(text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    This function checks if a given text contains sequences of lowercase letters joined with an underscore.\n    \"\"\"\n    pattern = r'[a-z]+(_[a-z]+)*'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('[a-z]+(_[a-z]+)*')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z]+_)*[a-z]+')\n    return pattern.match(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r\"[a-z]+(_[a-z]+)*\", text))\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'\\b[a-z]+(_[a-z]+)*\\b')\n    return bool(pattern.search(text))\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile('^[a-z]+(_[a-z]+)*$')\n    return bool(pattern.match(text))\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_count = [0] * NO_OF_CHARS\n    for char in string2:\n        char_count[ord(char)] = 1\n    result = []\n    for char in string1:\n        if char_count[ord(char)] == 0:\n            result.append(char)\n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    freq = [0] * NO_OF_CHARS\n    for char in string:\n        freq[ord(char)] += 1\n    return freq\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def remove_chars(str1, str2):\n    \"\"\"\n    Remove characters from str1 which are present in str2\n    \"\"\"\n    # Create a set of characters in str2 for faster lookup\n    str2_set = set(str2)\n\n    # Iterate over each character in str1 and check if it is in str2_set\n    result = \"\"\n    for char in str1:\n        if char not in str2_set:\n            result += char\n\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    freq_char = [0] * NO_OF_CHARS\n    for char in string:\n        freq_char[ord(char)] += 1\n    freq_char[ord(string)] = 0\n    \n    res = ''\n    for char in freq_char:\n        if char != 0:\n            res += chr(char)\n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    freq = [0] * NO_OF_CHARS\n    for char in string:\n        freq[ord(char)] += 1\n    \n    result = ''\n    for char in other_string:\n        if freq[ord(char)] > 0:\n            freq[ord(char)] -= 1\n        else:\n            result += char\n    \n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    char_list = [0] * NO_OF_CHARS\n    for char in string:\n        char_list[ord(char)] += 1\n    return char_list\n\ndef remove_chars(string1, string2):\n    char_list1 = str_to_list(string1)\n    char_list2 = str_to_list(string2)\n\n    for i in range(NO_OF_CHARS):\n        if char_list2[i] > 0 and char_list1[i] > 0:\n            char_list1[i] -= char_list2[i]\n\n    result = ''\n    for i in range(NO_OF_CHARS):\n        if char_list1[i] > 0:\n            result += chr(i) * char_list1[i]\n\n    return result\n\n\nstring1 = input(\"Enter the first string: \")\nstring2 = input(\"Enter the second string: \")\n\nresult = remove_chars(string1, string2)\nprint(\"String without common characters:\", result)\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    freq_arr = [0] * NO_OF_CHARS\n    for char in string:\n        freq_arr[ord(char)] += 1\n    \n    return freq_arr\n\n\ndef remove_chars(str1, str2):\n    \"\"\"\n    Remove characters from str1 which are present in str2.\n    \"\"\"\n    freq_arr = str_to_list(str2)\n    result = []\n    for char in str1:\n        if freq_arr[ord(char)] == 0:\n            result.append(char)\n    \n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    char_list = [0] * NO_OF_CHARS\n    for char in string:\n        char_list[ord(char)] += 1\n    return char_list\n\ndef remove_chars(str1, str2):\n    char_list1 = str_to_list(str1)\n    char_list2 = str_to_list(str2)\n    for i in range(NO_OF_CHARS):\n        if char_list2[i] != 0 and char_list1[i] != 0:\n            char_list1[i] = 0\n    result = \"\"\n    for i in range(NO_OF_CHARS):\n        if char_list1[i] != 0:\n            result += chr(i)\n    return result\n\nprint(remove_chars(\"hello world\", \"worl\"))\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    freq = [0]*NO_OF_CHARS\n    for char in string:\n        freq[ord(char)] += 1\n    \n    result = \"\"\n    for char in second_str:\n        if freq[ord(char)] > 0:\n            freq[ord(char)] -= 1\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert string to list of characters\n    string_list = list(string)\n    \n    # Convert second string to a boolean list for faster lookup\n    check_list = [False] * NO_OF_CHARS\n    for char in second_string:\n        check_list[ord(char)] = True\n    \n    # Remove characters from first string based on second string\n    for i in range(len(string_list)-1, -1, -1):\n        if check_list[ord(string_list[i])]:\n            del string_list[i]\n    \n    # Convert list of characters back to string\n    new_string = ''.join(string_list)\n    return new_string\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # create an empty set to store unique elements\n    unique_elements = set()\n    \n    # iterate through each element of the array\n    for num in arraynums:\n        \n        # if the element is already in the set, return True\n        if num in unique_elements:\n            return True\n        \n        # otherwise add the element to the set\n        unique_elements.add(num)\n        \n    # if no duplicate element is found, return False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set(arraynums)\n    if len(num_set) != len(arraynums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty set to store unique elements\n    unique_elements = set()\n    \n    # loop through the array and add each element to the set\n    for num in arraynums:\n        unique_elements.add(num)\n        \n    # if the length of the array is not equal to the length of the set, there is a duplicate\n    if len(arraynums) != len(unique_elements):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty set to store unique elements\n    unique_elements = set()\n    # Loop through the array of numbers\n    for num in arraynums:\n        # Check if the number is already in the set of unique elements\n        if num in unique_elements:\n            # If the number is already in the set, it's a duplicate\n            return True\n        else:\n            # Add the number to the set of unique elements\n            unique_elements.add(num)\n    # If we've made it this far, there are no duplicates\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array to a set to remove duplicates\n    setnums = set(arraynums)\n    \n    # Check if the length of the set is the same as the length of the array\n    if len(arraynums) == len(setnums):\n        return False # There are no duplicates\n    else:\n        return True # There are duplicates\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array of integers into a set to remove duplicates\n    set_nums = set(arraynums)\n    \n    # If the length of the original array is not equal to the length of the set, then there is a duplicate\n    if len(arraynums) != len(set_nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = 0\n    while x > 0:\n        n = x % 10\n        if n != 0:\n            return False\n        x //= 10\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    digits = set()\n    while x > 0:\n        digits.add(x % 10)\n        x //= 10\n    if len(digits) == 5:\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    This function checks whether a given number is a woodall number or not.\n    A woodall number is a number that is divisible by the sum of its digits.\n    '''\n    # calculate the sum of digits of x\n    sum_of_digits = sum(int(digit) for digit in str(x))\n    # check if x is divisible by sum of digits\n    if x % sum_of_digits == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # check if x is even\n    if x % 2 != 0:\n        return False\n    \n    # check if x is a perfect square\n    root = int(x ** 0.5)\n    if root ** 2 != x:\n        return False\n    \n    # check if any of the digits in x are repeated\n    digits = [int(d) for d in str(x)]\n    for d in digits:\n        if digits.count(d) > 1:\n            return True\n    \n    # if none of the above conditions are satisfied, then it is not a woodball\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # Convert the number to string\n    num_str = str(x)\n\n    # Get the length of the number\n    num_len = len(num_str)\n\n    # Check if the number has odd digits\n    if num_len % 2 == 1:\n        return False\n\n    # Check if the number is divisible by 11\n    if x % 11 == 0:\n        return True\n    \n    # Check if the number is divisible by 22\n    if x % 22 == 0:\n        return True\n    \n    # Check if the number is divisible by 33\n    if x % 33 == 0:\n        return True\n\n    # Check if the number is divisible by 44\n    if x % 44 == 0:\n        return True\n\n    # Check if the number is divisible by 55\n    if x % 55 == 0:\n        return True\n\n    # Check if the number is divisible by 66\n    if x % 66 == 0:\n        return True\n\n    # Check if the number is divisible by 77\n    if x % 77 == 0:\n        return True\n\n    # Check if the number is divisible by 88\n    if x % 88 == 0:\n        return True\n\n    # Check if the number is divisible by 99\n    if x % 99 == 0:\n        return True\n\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Find the sum of the digits of the given number\n    sum_of_digits = sum(int(digit) for digit in str(x))\n    \n    # Check if the given number is divisible by the sum of its digits\n    if x % sum_of_digits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # Convert the number to a string and count the number of digits\n    digits = len(str(x))\n    \n    # Initialize the sum of digits to zero\n    sum_digits = 0\n    \n    # Add up the digits of the number\n    for digit in str(x):\n        sum_digits += int(digit)\n    \n    # Check if the sum of digits is equal to the number of digits\n    if sum_digits == digits:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = len(str(x))\n    # Find the sum of digits of the number\n    sum_digits = sum(int(digit) for digit in str(x))\n    # Check if the sum of digits is equal to the number of digits in the number\n    if sum_digits == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = len(str(x))\n    if n < 3 or n > 6:\n        return False\n    \n    digits = list(str(x))\n    for i in range(n):\n        if digits[i] != digits[n-1-i]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    # convert the number to a string so we can iterate over its digits\n    x_str = str(x)\n    \n    # calculate the sum of the digits of the number\n    digit_sum = sum(int(d) for d in x_str)\n    \n    # convert the sum of the digits back to a string so we can compare it with the original number\n    digit_sum_str = str(digit_sum)\n    \n    # compare the digits of the original number with the digits of the sum of the digits\n    if x_str == digit_sum_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to string and reverse it\n    reverse_num = int(str(num)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    if num == reverse_num*2 - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def rev(num):\n    # convert the number to a string and reverse it\n    rev_num = int(str(num)[::-1])\n    # check if the original number is one less than twice the reversed number\n    if num == 2 * rev_num - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the input number to string\n    num_str = str(num)\n    \n    # Calculate the reverse of the input number\n    reverse = int(num_str[::-1])\n    \n    # Check if the input number is one less than twice its reverse\n    if num == reverse * 2 - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert num to a string and reverse it\n    reverse_str = str(num)[::-1]\n    # convert the reversed string back to an integer\n    reverse_num = int(reverse_str)\n    # calculate twice the reversed number\n    twice_reverse = reverse_num * 2\n    # check if the original number is one less than twice the reversed number\n    if num == twice_reverse - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rev_num = rev_num*10 + temp%10\n        temp = temp//10\n    \n    if num-1 == rev_num*2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_reverse = int(str(num)[::-1])\n    if num_reverse * 2 - num == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(str(num)[::-1])\n    if num + 1 == 2 * rev_num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    original = num\n    while num > 0:\n        rem = num % 10\n        reverse = reverse * 10 + rem\n        num = num // 10\n    if reverse == original*2 - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def rev(num):\n    rev_num = int(str(num)[::-1])\n    if num + 1 == 2 * rev_num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def rev(num):\n    # Convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # Convert the reversed number back to an integer\n    rev_num = int(rev_num)\n    # Check if the original number is one less than twice the reversed number\n    if num * 2 - 1 == rev_num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = ''\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] != arr[j]:\n                for k in range(len(arr)):\n                    if arr[i] != arr[k] and arr[j] != arr[k]:\n                        num = int(str(arr[i]) + str(arr[j]) + str(arr[k]))\n                        if num > int(max_num):\n                            max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    result = \"\"\n    for digit in arr:\n        while digit > 0:\n            result += str(digit % 10)\n            digit //= 10\n    return result\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    num = ''\n    for i in arr:\n        if i == '0':\n            break\n        num += i\n    return int(num)\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n\n    def find_Max_Number(arr):\n        \"\"\"\n        Recursive function to find the largest number that can be formed with the given list of digits.\n        \"\"\"\n        if len(arr) == 0:\n            return 0\n        max_num = float('-inf')\n        for i in range(len(arr)):\n            # recursive call with the remaining digits\n            remaining_digits = arr[i+1:]\n            sub_max_num = find_Max_Number(remaining_digits)\n            # add the current digit to the remaining digits\n            current_digit = arr[i]\n            if current_digit == 0:\n                # skip zero to avoid multiple zeros in a row\n                continue\n            num = current_digit + 10**(len(remaining_digits)) * sub_max_num\n            if num > max_num:\n                max_num = num\n        return max_num\n\n    # sort the digits in descending order\n    arr.sort(reverse=True)\n    return find_Max_Number(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    def backtrack(start, path):\n        if len(path) == 3:\n            max_num = int(\"\".join(path))\n            if max_num > max_num_found:\n                nonlocal max_num_found\n                max_num_found = max_num\n            return\n\n        for i in range(start, len(arr)):\n            path.append(arr[i])\n            backtrack(i + 1, path)\n            path.pop()\n\n    max_num_found = float('-inf')\n    backtrack(0, [])\n    return max_num_found"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Initialize a variable to store the maximum number\n    max_num = 0\n\n    # Sort the list in descending order\n    arr.sort(reverse=True)\n\n    # Loop through the list of digits\n    for i in range(len(arr)):\n        # Loop through all the digits to the right of the current digit\n        for j in range(i+1, len(arr)):\n            # Calculate the number formed by the current digit and the next digit to the right\n            num = arr[i] * 10 + arr[j]\n            # Update the maximum number if the calculated number is greater than the current maximum number\n            if num > max_num:\n                max_num = num\n\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    max_num = ''\n    while arr:\n        max_digit = max(arr)\n        max_num += str(max_digit)\n        arr.remove(max_digit)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    def add_Digit(num, arr):\n        if len(arr) == 0:\n            return num\n        else:\n            return add_Digit(num * 10 + arr[0], arr[1:])\n    return add_Digit(0, sorted(arr, reverse=True))\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Initialize the result string\n    result = ''\n    # Iterate over the array\n    for digit in arr:\n        # If the digit is less than 1, break the loop\n        if digit < 1:\n            break\n        # While the digit can be appended to the result\n        while len(result) < 9 and digit > 0:\n            # Append the digit to the result\n            result += str(digit)\n            # Decrement the digit\n            digit -= 1\n    # Return the result as an integer\n    return int(result)\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True) # sort in descending order\n    result = ''\n    for digit in arr:\n        result += str(digit)\n        if len(result) > 1 and int(result) > int(result[:-1])*10+int(result[-1]):\n            break # stop if it's greater than the previous number with a digit added\n    return int(result)\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = (2 * (n ** 2) - 1) ** 0.5\n    if num.is_integer():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    while i*(2*i-1) <= n:\n        if i*(2*i-1) == n:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((2*n)**2 - 1)\n\nn = int(input(\"Enter a number: \"))\nprint(f\"The {n}th octagonal number is: {is_octagonal(n)}\")\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) ** 0.5"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Formula to calculate the nth octagonal number\n    nth_octagonal = (2 * n + 1) ** 2\n    return nth_octagonal\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Calculate the sum of the first n integers\n    sum_of_first_n = n * (n + 1) // 2\n    # Calculate the nth octagonal number\n    octagonal_number = (sum_of_first_n ** 2) + (2 * n * sum_of_first_n)\n    return octagonal_number\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((2*n - 1)*(2*n - 1))\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((2*n-1) * (2*n-1))"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n**2 * 2) + (n * 2) - 1\n"
    }
]