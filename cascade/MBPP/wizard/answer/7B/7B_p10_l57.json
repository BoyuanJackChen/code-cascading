[
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in shared_elements:\n            shared_elements.append(elem)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # find the shared elements between the two lists\n    shared_elements = set(list1) & set(list2)\n    # return the shared elements as a list\n    return list(shared_elements)\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to sets to remove duplicates and then find the intersection of the sets\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n    # Return the list of common elements\n    return list(common_elements)\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    # Converting the tuples to lists\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    \n    # Finding the shared elements\n    shared_elements = []\n    for element in test_list1:\n        if element in test_list2:\n            shared_elements.append(element)\n    \n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2 and i not in shared_elements:\n            shared_elements.append(i)\n    return shared_elements\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        i = 3\n        while i <= math.sqrt(n):\n            if n % i == 0:\n                return True\n            i += 2\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappushpop(heap, num)\n    return sorted(heap, reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappushpop(heap, num)\n\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappushpop(heap, num)\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest = hq.nlargest(n, nums)\n    return largest[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                hq.heappushpop(heap, num)\n    return sorted(heap, reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def heap_queue_largest(nums, n):\n    # Create a heap of the first n elements of the list\n    heap = nums[:n]\n    hq.heapify(heap)\n    \n    # Iterate over the remaining elements of the list\n    for num in nums[n:]:\n        # If the number is larger than the smallest element in the heap,\n        # replace the smallest element with the new number and re-heapify\n        if num > heap[0]:\n            heap[0] = num\n            hq.heapify(heap)\n    \n    # Return the heap, which now contains the n largest elements in descending order\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a heap from the given list of numbers\n    heap = list(nums)\n    hq.heapify(heap)\n    \n    # Get the n largest integers from the heap\n    largest = []\n    for i in range(n):\n        largest.append(hq.heappop(heap))\n    \n    # Sort the largest integers in descending order and return them\n    largest.sort(reverse=True)\n    return largest\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of size n\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # Add the remaining elements to the heap\n    for num in nums[n:]:\n        if num > heap[0]:\n            hq.heappushpop(heap, num)\n\n    # Return the largest n elements in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = hq.nlargest(n, nums)\n    return heap[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # create a min heap of size n\n    heap = []\n    \n    # iterate through the input list of numbers\n    for num in nums:\n        # if the heap size is less than n, add the number to the heap\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        # if the heap size is equal to n and the current number is greater than the smallest number in the heap\n        elif num > heap[0]:\n            # remove the smallest number in the heap and add the current number to the heap\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n    \n    # return the n largest numbers in descending order\n    return sorted(heap, reverse=True)\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x, y):\n    # Get the binary representation of the two numbers\n    binary_x = bin(x)[2:]\n    binary_y = bin(y)[2:]\n    \n    # Check if the lengths of binary representation are different\n    if len(binary_x) != len(binary_y):\n        return False\n    \n    # Check if there is only one bit position difference\n    diff_count = 0\n    for i in range(len(binary_x)):\n        if binary_x[i] != binary_y[i]:\n            diff_count += 1\n            if diff_count > 1:\n                return False\n    \n    # If there is only one bit position difference, return True\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Convert the number to binary and remove the leading '0b'\n    binary_x = bin(x)[2:]\n    \n    # Count the number of '1's in the binary representation of the number\n    count = binary_x.count('1')\n    \n    # Check if the count is exactly 1 less than the length of the binary representation\n    if count == len(binary_x) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a power of 2, else returns False.\n    \"\"\"\n    if x == 0:\n        return False\n    while x != 1:\n        if x % 2 != 0:\n            return False\n        x = x // 2\n    return True\n\n\ndef check_diff_bit(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they differ at one bit position only, else returns False.\n    \"\"\"\n    if x == y:\n        return False\n    if not is_Power_Of_Two(x) or not is_Power_Of_Two(y):\n        return False\n    while x != y:\n        x = x ^ y\n        y = x & y\n        y = y << 1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Converting the number to binary\n    binary_x = bin(x)[2:]\n    \n    # Counting the number of ones in the binary representation\n    count_ones = binary_x.count('1')\n    \n    # If the count of ones is greater than 1, then the numbers differ at more than one bit position\n    if count_ones > 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Check if the number is a power of two or not\n    if x <= 0 or (x & (x - 1)) != 0:\n        return False\n    \n    # Find the position of the rightmost bit set to 1\n    rightmost_set_bit = 1\n    for i in range(32):\n        if x & rightmost_set_bit != 0:\n            break\n        rightmost_set_bit <<= 1\n    \n    # Check if the number is the result of two numbers differing at one bit position only\n    for i in range(32):\n        if x & (1 << i) != 0 and i != rightmost_set_bit:\n            return False\n    \n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    \n    if x == 0 or x == 1:\n        return False\n    \n    binary_x = bin(x)[2:]\n    max_one_index = binary_x.find('1')\n    \n    for i in range(max_one_index + 1, len(binary_x)):\n        if binary_x[i] == '1':\n            return False\n    \n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x, y):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert numbers to binary strings\n    x_bin = bin(x)[2:]\n    y_bin = bin(y)[2:]\n    \n    # Compare lengths of binary strings\n    if len(x_bin) != len(y_bin):\n        return False\n    \n    # Compare binary strings character by character\n    for i in range(len(x_bin)):\n        if x_bin[i] != y_bin[i]:\n            return True\n    \n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def is_power_of_two(x):\n    if x <= 0:\n        return False\n    if x == 1:\n        return True\n    if x % 2 == 1:\n        return False\n    return is_power_of_two(x // 2)\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    while x != 0:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            return False\n    return True\n\ndef check_differ_by_one_bit(a, b):\n    if is_Power_Of_Two(a) and is_Power_Of_Two(b):\n        return abs(bin(a).count('1') - bin(b).count('1')) == 1\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x != 0:\n        if x & 1 == 1:\n            if (x & (x - 1)) != 0:\n                return False\n        x >>= 1\n    return True "
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words using regular expressions\n    words = re.findall(r'\\w+', text)\n    # Filter out words that are less than 4 characters long\n    long_words = filter(lambda w: len(w) >= 4, words)\n    return list(long_words)\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    # Use regex to split the text into words\n    words = re.findall(r'\\w+', text.lower())\n    \n    # Filter the words that have at least 4 characters\n    long_words = [word for word in words if len(word) >= 4]\n    \n    # Return the list of long words\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    # Split the string into a list of words\n    words = text.split()\n    # Initialize an empty list to store words that are at least 4 characters long\n    long_words = []\n    # Iterate through each word in the list\n    for word in words:\n        # Check if the word is at least 4 characters long\n        if len(word) >= 4:\n            # If it is, append it to the long_words list\n            long_words.append(word)\n    # Join the long_words list back into a string and return it\n    return ' '.join(long_words)"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return the list of words that are at least 4 characters long\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to match words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    # Find all matches in the text\n    matches = pattern.findall(text)\n    # Return the matches as a list\n    return matches\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for num in nums:\n        square = num ** 2\n        square_list.append(square)\n    return square_list\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        square = num**2\n        squares.append(square)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        square = num ** 2\n        squares.append(square)\n    return squares\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    if len(str) <= 1:\n        return 0\n    str1 = str\n    str2 = str[-1] + str[:-1]\n    count = 1\n    while str1 != str2:\n        str1 = str1[1:] + str1[0]\n        count += 1\n        str2 = str2[1:] + str2[0]\n        count += 1\n    return count // 2\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def find_rotations(s):\n    if len(s) == 0:\n        return 0\n    elif len(s) == 1:\n        return 0\n    else:\n        if s == s[::-1]:\n            return 0\n        else:\n            return 1 + find_rotations(s[1:] + s[0])\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def find_rotations(str):\n    # if the string is empty, return 0\n    if not str:\n        return 0\n    # if the length of the string is 1, it must be rotated n times\n    if len(str) == 1:\n        return float('inf')\n    # initialize variables\n    n = len(str)\n    min_rotations = n\n    # loop through the characters of the string\n    for i in range(n):\n        # rotate the string by i characters to the right\n        rotated = str[i:] + str[:i]\n        # if the rotated string is the same as the original string,\n        # we found the minimum number of rotations\n        if rotated == str:\n            min_rotations = i\n            break\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # Convert the string to a list of characters\n    chars = list(str)\n\n    # Initialize a variable to keep track of the minimum number of rotations\n    min_rotations = 0\n\n    # Iterate through the list of characters\n    for i in range(len(chars)):\n        # If the current character matches the first character, we don't need any more rotations\n        if chars[i] == chars[0]:\n            break\n        # If the current character doesn't match the first character, we need to rotate the list and increment the counter\n        else:\n            chars = chars[-1:] + chars[:-1]\n            min_rotations += 1\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Convert the string to a list so we can modify it\n    str_list = list(str)\n\n    # Loop through each character in the list and rotate the list once\n    # If we get the same string, return 1\n    # Otherwise, check if the rotated string is a substring of the original string\n    # If it is, return 2\n    # If not, continue rotating until we find a match\n    for i in range(len(str_list)):\n        if str_list == str_list[-i:] + str_list[:-i]:\n            return i % len(str_list) + 1\n        elif str_list[-i:] in str_list[:-i]:\n            return i % len(str_list) + 2\n\n    # If we get through the whole loop without finding a match, return the length of the string\n    return len(str_list)\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Find the length of the string\n    n = len(str)\n    \n    # If the string is empty or has only one character, then it can be considered as rotated only once.\n    if n <= 1:\n        return 1\n    \n    # Calculate the hash value of the string\n    hash_val = 0\n    for i in range(n):\n        hash_val += ord(str[i])\n    \n    # Initialize the minimum number of rotations and the current number of rotations\n    min_rotations = 1\n    curr_rotations = 1\n    \n    # Check for the first character of the string\n    if ord(str[n-1]) == (hash_val - ord(str[0])) % 256:\n        curr_rotations += 1\n    \n    # Check for the remaining characters of the string\n    for i in range(1, n):\n        if ord(str[i-1]) == (hash_val - ord(str[i])) % 256:\n            curr_rotations += 1\n        else:\n            # If the current number of rotations is greater than the minimum number of rotations, then update the minimum number of rotations\n            if curr_rotations > min_rotations:\n                min_rotations = curr_rotations\n            # Reset the current number of rotations\n            curr_rotations = 1\n            \n    # If the current number of rotations is greater than the minimum number of rotations, then update the minimum number of rotations\n    if curr_rotations > min_rotations:\n        min_rotations = curr_rotations\n    \n    # Return the minimum number of rotations\n    return min_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Convert the string to a list to manipulate it more easily\n    str_list = list(str)\n\n    # Check if the string is already in sorted order\n    if sorted(str_list) == str_list:\n        return 0\n\n    # Find the index of the smallest element in the list\n    min_index = str_list.index(min(str_list))\n\n    # Rotate the list until the smallest element is at the beginning\n    str_list = str_list[min_index:] + str_list[:min_index]\n\n    # Check if the rotated list is in sorted order\n    if sorted(str_list) == str_list:\n        return 1\n\n    # If not, calculate the number of rotations required by counting the number of inversions\n    else:\n        n = len(str_list)\n        num_inversions = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if str_list[i] > str_list[j]:\n                    num_inversions += 1\n        return num_inversions // 2 + 1\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def find_Rotations(string):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(string)\n    for i in range(n):\n        if string == string[i:n] + string[:i]:\n            return i\n    return n\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def find_rotations(s):\n    \"\"\"\n    Find the minimum number of rotations required to get the same string.\n    \"\"\"\n    if len(s) == 0 or len(s) == 1:\n        return 0\n\n    for i in range(1, len(s)):\n        if s[i:] == s[:i]:\n            return i\n\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    min_rotations = str_len\n    for i in range(str_len):\n        # Rotate the string by i\n        rotated_str = str[i:] + str[:i]\n        # Check if the rotated string is equal to the original string\n        if rotated_str == str:\n            min_rotations = min(min_rotations, i)\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    # Find the index of the first occurrence of the character\n    first_occurrence = s.find(ch)\n\n    # If the character is not found, return the original string\n    if first_occurrence == -1:\n        return s\n\n    # Find the index of the last occurrence of the character\n    last_occurrence = s.rfind(ch)\n\n    # If the character is not found, return the original string\n    if last_occurrence == -1:\n        return s\n\n    # If the character is found, remove it from the string\n    if first_occurrence < last_occurrence:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n    else:\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n\n    # Return the modified string\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        i = s.index(ch)\n        j = s.rindex(ch)\n        return s[:i] + s[i+1:j] + s[j+1:]\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    # Find first occurrence of the character\n    start = s.find(ch)\n    \n    # Find last occurrence of the character\n    end = s.rfind(ch)\n    \n    # If character is found in both first and last positions, remove it\n    if start != -1 and end != -1 and start == end:\n        s = s[:start] + s[start+1:]\n        s = s[:end] + s[end+1:]\n    \n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    # Find the index of the first occurrence of the character\n    first_occ = s.find(ch)\n    # Find the index of the last occurrence of the character\n    last_occ = s.rfind(ch)\n    # If both the first and last occurrence are found, remove them from the string\n    if first_occ != -1 and last_occ != -1:\n        return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    # If only the first occurrence is found, remove it from the string\n    elif first_occ != -1:\n        return s[:first_occ] + s[first_occ+1:]\n    # If only the last occurrence is found, remove it from the string\n    elif last_occ != -1:\n        return s[:last_occ] + s[last_occ+1:]\n    # If neither the first nor the last occurrence is found, return the original string\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    i = 0\n    j = len(s) - 1\n\n    while i < len(s) and s[i] != ch:\n        i += 1\n\n    while j >= 0 and s[j] != ch:\n        j -= 1\n\n    if i <= j:\n        return s[:i] + s[i+1:j] + s[j+1:]\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 0:\n        return s\n    elif s.count(ch) == 1:\n        if s[0] == ch or s[-1] == ch:\n            return s.replace(ch, '', 1)\n        else:\n            return s\n    else:\n        if s[0] == ch and s[-1] == ch:\n            return s.replace(ch, '', 1).replace(ch, '', 1)\n        elif s[0] == ch:\n            return s.replace(ch, '', 1)\n        else:\n            return s.replace(ch, '', -1)\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        first = s.find(ch)\n        last = s.rfind(ch)\n        if first == -1 or first == last:\n            return s\n        else:\n            return s[:first] + s[first+1:last] + s[last+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    # find the first and last index of the character\n    first = s.find(ch)\n    last = s.rfind(ch)\n    # if both indices are found\n    if first != -1 and last != -1:\n        # remove the first and last occurrences\n        s = s[:first] + s[first+1:last] + s[last+1:]\n    # return the updated string\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of character\n    index = s.find(ch)\n    if index != -1:\n        s = s[:index] + s[index+1:]\n\n    # Remove last occurrence of character\n    index = s.rfind(ch)\n    if index != -1:\n        s = s[:index] + s[index+1:]\n\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '', 1) # remove first occurrence of ch\n    s = s.replace(ch, '', -1) # remove last occurrence of ch\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Calculate the sum of each row and store it in a list\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix and row sums based on the row sums\n    sorted_indices = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n    \n    # Sort the matrix and row sums based on the row sums\n    sorted_matrix = [M[i] for i in sorted_indices]\n    sorted_row_sums = [row_sums[i] for i in sorted_indices]\n    \n    # Return the sorted matrix and row sums\n    return sorted_matrix, sorted_row_sums\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the rows based on their sum\n    sorted_rows = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n    # Create a new matrix with the sorted rows\n    sorted_matrix = [M[i] for i in sorted_rows]\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a list of row sums\n    row_sums = [sum(row) for row in M]\n    \n    # sort the matrix based on the row sums\n    sorted_M = sorted(M, key=lambda row: sum(row))\n    \n    # return the sorted matrix\n    return sorted_M\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the rows by their sum\n    sorted_rows = sorted(range(n), key=lambda k: row_sums[k])\n    # Create a new matrix with the sorted rows\n    sorted_M = [[0 for _ in range(len(M[0]))] for _ in range(n)]\n    for i in range(n):\n        sorted_M[i] = M[sorted_rows[i]]\n    return sorted_M\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # First, calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    # Use the sorted function to sort the matrix by the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Calculate the sum of each row and store it in a list\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    # Compute the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix according to the sum of its rows\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n    \n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # find the sum of each row and store it in a list\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n    \n    # sort the matrix based on the sum of its rows\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M), key=lambda x: x[0])]\n    \n    # return the sorted matrix\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a list of row sums\n    row_sums = [sum(row) for row in M]\n    # sort the matrix according to the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n    return sorted_matrix\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    volume = (l * b * h) / 3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    \"\"\"\n    This function takes three parameters l, b and h and returns the volume of a triangular prism.\n    \"\"\"\n    return 0.5*l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+(_[a-z]+)*')\n    return bool(pattern.fullmatch(text))\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z]+(_[a-z]+)*\\b'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+(_[a-z]+)*')\n    return bool(pattern.match(text))\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return bool(pattern.search(text))\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+(_[a-z]+)*'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+(_[a-z]+)*')\n    if pattern.fullmatch(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # Define a regular expression pattern for lowercase letters joined by underscore\n    pattern = re.compile(r'^[a-z]+(_[a-z]+)*$')\n    # Check if the input text matches the pattern\n    return bool(pattern.match(text))\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+(_[a-z]+)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+(_[a-z]+)*)'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 16,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'^[a-z]+(_[a-z]+)*$')\n    return bool(pattern.match(text))\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    This function returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Returns the perimeter of a square given its side length as input.\n    \"\"\"\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n    \"\"\"\n    freq1 = [0] * NO_OF_CHARS\n    freq2 = [0] * NO_OF_CHARS\n    \n    for char in string1:\n        freq1[ord(char)] += 1\n    \n    for char in string2:\n        freq2[ord(char)] += 1\n        \n    result = \"\"\n    \n    for i in range(NO_OF_CHARS):\n        if freq1[i] > freq2[i]:\n            result += chr(i)\n    \n    return result\n\n\nstring1 = input(\"Enter the first string: \")\nstring2 = input(\"Enter the second string: \")\n\nresult = str_to_list(string1, string2)\nprint(\"The string without the characters of the second string is:\", result) "
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    freq = [0] * NO_OF_CHARS\n    # counting frequency of each character in the string\n    for char in string:\n        freq[ord(char)] += 1\n\n    # checking for presence of each character in the second string\n    for i in range(NO_OF_CHARS):\n        if freq[i] > 0:\n            if chr(i) in second_string:\n                freq[i] = 0\n\n    # creating the list of characters to be removed\n    to_remove = []\n    for i in range(NO_OF_CHARS):\n        if freq[i] > 0:\n            to_remove.append(chr(i))\n\n    # removing the characters from the original string\n    new_string = \"\"\n    for char in string:\n        if char not in to_remove:\n            new_string += char\n\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def str_to_list(string1, string2):\n    # convert strings to lists of characters\n    str1 = list(string1)\n    str2 = list(string2)\n\n    # create a list of characters to be removed\n    remove_chars = []\n    for i in range(NO_OF_CHARS):\n        if chr(i) in str2:\n            remove_chars.append(chr(i))\n\n    # remove characters from first string\n    for char in remove_chars:\n        while char in str1:\n            str1.remove(char)\n\n    # convert list back to string\n    return \"\".join(str1)"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def str_to_list(string1, string2):\n    # Create dictionaries for each string\n    dict1 = {}\n    for char in string1:\n        dict1[char] = True\n    \n    dict2 = {}\n    for char in string2:\n        dict2[char] = True\n    \n    # Create new list without characters from string2\n    new_list = []\n    for char in string1:\n        if char not in dict2:\n            new_list.append(char)\n    \n    # Join characters in new list and return it\n    return ''.join(new_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    freq = [0]*NO_OF_CHARS\n    for i in string:\n        freq[ord(i)] += 1\n    return freq\n\ndef remove_chars(string1, string2):\n    freq1 = str_to_list(string1)\n    freq2 = str_to_list(string2)\n    result = ''\n    for i in range(NO_OF_CHARS):\n        if freq1[i] > 0 and freq1[i] >= freq2[i]:\n            result += chr(i)\n    return result\n\nstring1 = input(\"Enter the first string: \")\nstring2 = input(\"Enter the second string: \")\n\nresult = remove_chars(string1, string2)\nprint(\"The modified string is: \", result)\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def str_to_list(string, excluded):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of the characters in the excluded string\n    excluded_list = [char for char in excluded]\n    \n    # Create an empty list to hold the result\n    result = []\n    \n    # Iterate over each character in the input string\n    for char in string:\n        # Check if the character is not in the excluded list\n        if char not in excluded_list:\n            # If it's not, add it to the result list\n            result.append(char)\n    \n    # Return the result list as a string\n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    char_freq = [0]*NO_OF_CHARS\n    for char in string:\n        char_freq[ord(char)] += 1\n    return char_freq\n\ndef remove_common_chars(string1, string2):\n    char_freq1 = str_to_list(string1)\n    char_freq2 = str_to_list(string2)\n    for i in range(NO_OF_CHARS):\n        if char_freq2[i] > 0 and char_freq1[i] > 0:\n            char_freq1[i] = 0\n    res = \"\"\n    for i in range(NO_OF_CHARS):\n        if char_freq1[i] > 0:\n            res += chr(i)\n    return res"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char not in result:\n            result.append(char)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    char_list = [0] * NO_OF_CHARS\n    for char in string:\n        char_list[ord(char)] = 1\n    return char_list\n\ndef remove_chars(string1, string2):\n    '''\n    Removes characters from string1 which are present in string2.\n    '''\n    char_list1 = str_to_list(string1)\n    char_list2 = str_to_list(string2)\n    for i in range(NO_OF_CHARS):\n        if char_list2[i] == 1:\n            char_list1[i] = 0\n    new_string = \"\"\n    for i in range(NO_OF_CHARS):\n        if char_list1[i] == 1:\n            new_string += chr(i)\n    return new_string\n"
    },
    {
        "number": 18,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    chars = [False] * NO_OF_CHARS\n    for char in string:\n        chars[ord(char)] = True\n    return chars\n\n\ndef remove_chars(string, chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if not chars[ord(char)]:\n            result.append(char)\n    return ''.join(result)\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set from the array to remove duplicates\n    setnums = set(arraynums)\n    \n    # If the length of the array and set are not equal, there is a duplicate\n    if len(arraynums) != len(setnums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Iterate through the array and add each element to the set\n    for num in arraynums:\n        if num in unique_elements:\n            # If the element is already in the set, it's a duplicate\n            return True\n        unique_elements.add(num)\n\n    # If no duplicate is found, return False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Using a set to keep track of unique elements\n    unique_nums = set()\n    # Iterating over the array\n    for num in arraynums:\n        # If the number is already in the set, it means there is a duplicate\n        if num in unique_nums:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_nums.add(num)\n    # If no duplicates are found, return False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) != len(set(arraynums)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary\n    num_dict = {}\n    \n    # Iterate over the array\n    for num in arraynums:\n        # If the number is already in the dictionary, it is a duplicate\n        if num in num_dict:\n            return True\n        else:\n            # Otherwise, add the number to the dictionary\n            num_dict[num] = True\n    \n    # If no duplicates were found, return False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Use a set to keep track of the unique numbers\n    unique_numbers = set()\n    \n    for num in arraynums:\n        # If the number is already in the set, it means we found a duplicate\n        if num in unique_numbers:\n            return True\n        else:\n            # Add the number to the set to keep track of the unique numbers\n            unique_numbers.add(num)\n    \n    # If we reach this point, there are no duplicates\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # Create a set to store unique elements from the array\n    unique_elements = set()\n    \n    # Loop through the array and add each element to the set\n    for num in arraynums:\n        unique_elements.add(num)\n    \n    # If the length of the array is not equal to the length of the set, there must be duplicates\n    if len(arraynums) != len(unique_elements):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n\n    # iterate over the array of integers and add each element to the set\n    for num in arraynums:\n        if num in unique_set:\n            # if the element is already in the set, it is a duplicate\n            return True\n        else:\n            unique_set.add(num)\n\n    # if the loop completes without finding any duplicates, return False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) != len(set(arraynums)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    s = str(x)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    # Check if the number is positive\n    if x <= 0:\n        return False\n    \n    # Check if the number is a power of 2\n    if x & (x - 1) == 0:\n        return False\n    \n    # Check if the number is a sum of two or more consecutive positive integers\n    n = 1\n    while n <= x:\n        if x == n:\n            return True\n        elif x < n:\n            return False\n        else:\n            n += 1"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    x_str = str(x)\n    reversed_x = int(x_str[::-1])\n    if reversed_x == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    This function checks whether the given number is a woodball or not.\n    A woodball is a number where the sum of the factorial of its digits is equal to the number itself.\n    \"\"\"\n\n    # Calculate the sum of the factorial of each digit\n    digit_fact_sum = sum(factorial(int(digit)) for digit in str(x))\n\n    # Check if the sum of factorials is equal to the given number\n    if digit_fact_sum == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    n = len(str(x))\n    for i in range(n):\n        if x % 10 != 0:\n            x //= 10\n        else:\n            return False\n    return True"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define a variable to hold the sum of digits of the input number\n    total = 0\n    \n    # Loop through the digits of the input number\n    for digit in str(x):\n        # Add the digit to the total\n        total += int(digit)\n    \n    # Check if the total is equal to the input number\n    if total == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Convert the given number to a string\n    num_str = str(x)\n    \n    # Check if the sum of digits is equal to the length of the number\n    digit_sum = sum(int(digit) for digit in num_str)\n    if digit_sum == len(num_str):\n        # If sum of digits is equal to the length of the number, the number is woodball\n        return True\n    else:\n        # If sum of digits is not equal to the length of the number, the number is not woodball\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    # Convert the given number to a string\n    x_str = str(x)\n\n    # Check if the number is divisible by each of its digits\n    for digit in x_str:\n        if x % int(digit) != 0:\n            return False\n\n    # If the number is divisible by all of its digits, return True\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    def is_digit(n):\n        return n >= 0 and n <= 9\n    \n    def is_single_digit(n):\n        return n > 9\n    \n    def count_digits(n):\n        count = 0\n        while n > 0:\n            count += 1\n            n //= 10\n        return count\n    \n    if not isinstance(x, int):\n        return False\n    \n    if x < 10:\n        return False\n    \n    if is_single_digit(x):\n        return False\n    \n    digits_count = count_digits(x)\n    \n    if digits_count == 1:\n        return False\n    \n    for i in range(digits_count-1):\n        digit1 = x % 10\n        x //= 10\n        digit2 = x % 10\n        x //= 10\n        x //= 10\n        \n        if not is_digit(digit1) or not is_digit(digit2):\n            return False\n        \n        if digit1 == digit2:\n            continue\n        \n        if digit1 + digit2 == 10:\n            continue\n        \n        return False\n    \n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 10:\n        return False\n    \n    num_str = str(x)\n    for i in range(len(num_str)):\n        if num_str[i] == '0':\n            continue\n        \n        if num_str.count(num_str[i]) > 1:\n            return False\n    \n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = int(str(num)[::-1])\n    if num == reverse * 2 - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num) # Convert number to string\n    rev_str = num_str[::-1] # Reverse the string\n    rev_num = int(rev_str) # Convert the reversed string to integer\n    \n    if num == rev_num*2 - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def rev(num):\n    # Convert the number to a string and reverse it\n    reverse = str(num)[::-1]\n    # Convert the reversed string back to an integer\n    reverse_num = int(reverse)\n    # Check if the number is one less than twice the reverse\n    if num * 2 - 1 == reverse_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # reverse the number\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n\n    # check if the number is one less than twice its reverse\n    if num + 1 == 2 * rev_num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def rev(num):\n    # convert the number to a string and reverse it\n    rev_str = str(num)[::-1]\n    \n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    \n    # check if the number is one less than twice its reverse\n    if num == (rev_num * 2 - 1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert number to string and reverse it\n    str_num = str(num)\n    reverse_num = int(str_num[::-1])\n    \n    # check if num - reverse_num == 1\n    if num - reverse_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the input number to a string to reverse it.\n    num_str = str(num)\n    \n    # Reverse the string using slicing.\n    rev_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer.\n    rev_num = int(rev_str)\n    \n    # Calculate the result of the input number plus one times twice the reversed number.\n    result = (num + 1) * 2 * rev_num\n    \n    # Check if the result is one less than the input number.\n    if result == num - 1:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string and reverse it using slicing\n    reverse_num = int(str(num)[::-1])\n    # Check if the reversed number is one less than twice the original number\n    if reverse_num == 2*num - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num) # convert num to a string\n    reverse_str = num_str[::-1] # reverse the string\n    reverse_num = int(reverse_str) # convert the reversed string back to an integer\n    \n    # check if num is one less than twice its reverse\n    if num + 1 == reverse_num * 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Converting the number to string and reversing it using slicing\n    reverse = str(num)[::-1]\n    \n    # Converting the reverse string back to integer\n    reverse = int(reverse)\n    \n    # Checking if the number is one less than twice its reverse\n    if num*2 - 1 == reverse:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    res = ''\n    for i in arr:\n        res += i\n        if len(str(int(res) + 1)) > len(res):\n            break\n    return int(res)\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    max_num = \"\"\n    while arr:\n        max_digit = max(arr)\n        arr.remove(max_digit)\n        max_num += str(max_digit)\n        if max_digit == 9:\n            continue\n        else:\n            break\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    # convert list of digits to string\n    num_str = ''.join(str(d) for d in arr)\n    \n    # convert string to integer\n    num = int(num_str)\n    \n    # return the maximum number that can be formed\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    def recursive_find_Max(arr, index, current_num):\n        if index == 0:\n            return current_num\n\n        for i in range(index):\n            current_num = current_num * 10 + arr[i]\n            result = max(result, recursive_find_Max(arr, index - 1, current_num))\n            current_num = current_num // 10\n\n        return result\n\n    if not arr:\n        return 0\n\n    return recursive_find_Max(arr, len(arr) - 1, 0)\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    if len(arr) == 0:\n        return \"\"\n    if len(arr) == 1:\n        return str(arr[0])\n    \n    max_num = \"\"\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = int(''.join(map(str, arr[i:j])))\n            if num > int(max_num):\n                max_num = str(num)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    # convert the list of digits to a string\n    arr = [str(x) for x in arr]\n    arr_str = ''.join(arr)\n    \n    # sort the string in descending order\n    arr_str = ''.join(sorted(arr_str, reverse=True))\n    \n    # convert the string back to a list of digits\n    arr = [int(x) for x in arr_str]\n    \n    # find the maximum number\n    max_num = int(''.join(str(x) for x in arr))\n    \n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for i in range(1, 10):\n        for j in range(0, len(arr)):\n            if arr[j] == i:\n                temp = arr[0:j] + arr[j+1:]\n                temp.sort(reverse=True)\n                num = int(''.join(str(x) for x in temp))\n                if num > max_num:\n                    max_num = num\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    \n    # Sort the list in descending order\n    arr.sort(reverse=True)\n    \n    # Initialize the result string\n    result = \"\"\n    \n    # Loop through the sorted list and add each digit to the result string\n    for digit in arr:\n        result += str(digit)\n        \n        # Check if the result can be converted to an integer\n        try:\n            # If it can, add it to the result string\n            int(result)\n        except ValueError:\n            # If it can't, remove the last digit and continue\n            result = result[:-1]\n            \n    return result\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # initialize max number to be 0\n    max_num = 0\n\n    # iterate through each digit in the array\n    for digit in arr:\n        # if the digit is greater than 0 and the sum of max_num and digit is less than or equal to 9\n        # then add the digit to max_num\n        if digit > 0 and (max_num + digit) <= 9:\n            max_num += digit\n        else:\n            # if the digit is greater than 0 and the sum of max_num and digit is greater than 9\n            # then add the initial value of max_num to the result and reset max_num to be the digit itself\n            if digit > 0 and (max_num + digit) > 9:\n                result = str(max_num) + str(digit)\n                max_num = digit\n            # if the digit is 0 then add it to max_num\n            elif digit == 0:\n                max_num += digit\n\n    # convert the result to an integer and return it\n    return int(result)\n"
    },
    {
        "number": 57,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    def dfs(start, current):\n        if start == len(arr):\n            max_num = int(''.join(str(d) for d in current))\n            if max_num > max_so_far:\n                nonlocal max_so_far\n                max_so_far = max_num\n            return\n        dfs(start+1, current)\n        current.append(arr[start])\n        dfs(start+1, current)\n        current.pop()\n    \n    max_so_far = float('-inf')\n    dfs(0, [])\n    return max_so_far\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        print(\"The given numbers have opposite signs\")\n    else:\n        print(\"The given numbers have the same sign\")\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    if x * y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    # check if x and y have opposite signs\n    if x*y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    if x*y < 0:\n        print(\"The given numbers have opposite signs\")\n    else:\n        print(\"The given numbers do not have opposite signs\")\n"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Calculate the value of n in the formula for an octagonal number\n    n_octagonal = (2*n + 1)**2\n    \n    return n_octagonal\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 0\n    i = 1\n    while count < n:\n        i += 1\n        for j in range(3):\n            if i % 2 == 0:\n                i -= 2\n            else:\n                i += 2\n        count += 1\n    return i\n\nprint(is_octagonal(1)) # Output: 1\nprint(is_octagonal(2)) # Output: 7\nprint(is_octagonal(3)) # Output: 19\nprint(is_octagonal(4)) # Output: 37\nprint(is_octagonal(5)) # Output: 59\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return ((2*n)**2 - 3*(n-1)) // 8"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        num = i*(2*i-1)\n        if num == n:\n            return num\n        elif num < n:\n            i += 1\n        else:\n            return None\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (2 * n - 1))"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (2 * n - 1) ** 2\n\nn = int(input(\"Enter a number: \"))\noctagonal_number = is_octagonal(n)\nprint(f\"The {n}th octagonal number is {octagonal_number}.\")\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Formula to find the nth octagonal number\n    num = (2*n*n - 1)\n    return num"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_number = (2*n*(n+1))\n    return octagonal_number\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Octagonal number formula: 1 + 2 + 3 + ... + n = n * (n + 1) / 2\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # calculate the nth octagonal number using the formula 1 + 8*n\n    octagonal_num = 1 + 8 * n\n    return octagonal_num"
    },
    {
        "number": 61,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(d) for d in s[i:j+1]) == j-i+1:\n                count[j-i+1] += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a defaultdict to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n    \n    # iterate over all possible lengths of substrings\n    for length in range(1, len(s)+1):\n        # iterate over all possible starting indices of the substring\n        for start in range(len(s)-length+1):\n            # calculate the sum of digits of the substring and add it to the count_dict\n            count_dict[sum(int(digit) for digit in s[start:start+length])] += 1\n    \n    # return the count_dict\n    return count_dict\n"
    },
    {
        "number": 61,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substr = s[i:j]\n            substr_sum = sum(int(d) for d in substr)\n            if substr_sum == len(substr):\n                count[substr_sum] += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    count = defaultdict(int)  # initialize a dictionary to store the counts of substrings with a given length\n    \n    for i in range(len(s)):  # loop over all possible substring starting positions\n        sub = 0  # initialize the sum of digits of the substring\n        for j in range(i, len(s)):  # loop over all possible substring ending positions\n            sub += int(s[j])  # add the digit at the current ending position to the substring sum\n            if sub == len(s[i:j+1]):  # check if the sum of digits is equal to the length of the substring\n                count[j-i+1] += 1  # increment the count of substrings with the current length\n    \n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substr = s[i:j]\n            sum_digits = sum(int(d) for d in substr)\n            if sum_digits == len(substr):\n                count[sum_digits] += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            count[sum(int(digit) for digit in s[i:j+1])] += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sub_str = s[i:j+1]\n            digit_sum = sum(int(d) for d in sub_str)\n            if digit_sum == len(sub_str):\n                count[digit_sum] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    # Initialize a dictionary to store the count of substrings with sum of digits equal to their length\n    count = defaultdict(int)\n    \n    # Loop through each character in the string s\n    for i in range(len(s)):\n        # Loop through each substring of length i+1 starting from index i\n        for j in range(i+1, len(s)+1):\n            # Compute the sum of digits of the substring s[i:j]\n            digit_sum = sum(int(d) for d in str(s[i:j]))\n            # If the sum of digits is equal to the length of the substring, increment the count for this substring\n            if digit_sum == j-i:\n                count[j-i] += 1\n    \n    # Return the count dictionary\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            sum_digits = sum(int(d) for d in sub)\n            count[sum_digits] += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub = int(s[i:j])\n            if sub == j-i:\n                count[sub] += 1\n    return count\n\ns = \"123456789\"\nprint(count_Substrings(s))\n"
    },
    {
        "number": 62,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    \n    smallest = xs[0]\n    \n    for num in xs:\n        if num < smallest:\n            smallest = num\n    \n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    min_val = min(test_list)\n    max_val = max(test_list)\n    return max_val - min_val\n"
    },
    {
        "number": 63,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+2, n):\n            max_diff = max(max_diff, test_list[j][0] - test_list[i][1])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j] - test_list[i] > max_diff:\n                max_diff = test_list[j] - test_list[i]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i]-test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize the maximum difference variable\n    max_diff = 0\n\n    # Loop through each element in the list\n    for i in range(len(test_list)):\n        # Loop through each element after the current element\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the two elements\n            diff = test_list[j] - test_list[i]\n\n            # Update the maximum difference if the calculated difference is greater\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks\n"
    },
    {
        "number": 65,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    # Base case: an empty list has a sum of zero\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element to the sum of the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element of the list to the sum of the rest of the list\n    first_element = data_list[0]\n    rest_of_list = data_list[1:]\n    return first_element + recursive_list_sum(rest_of_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    flat_list = flatten(data_list)\n    return sum(flat_list)\n\ndef flatten(data_list):\n    \"\"\"\n    A helper function to flatten a list recursively.\n    \"\"\"\n    flat_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 65,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for i in data_list:\n        if type(i) == list:\n            sum += recursive_list_sum(i)\n        else:\n            sum += i\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    # initialize the sum variable to zero\n    total = 0\n    \n    # loop through each element in the list\n    for item in data_list:\n        # if the element is a list, recursively call the function on that list\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        # if the element is not a list, add it to the total\n        else:\n            total += item\n            \n    # return the total sum\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a list to store the Bell numbers\n    bell_numbers = [1]\n    \n    # Compute the Bell numbers up to n using the recurrence relation\n    for i in range(1, n + 1):\n        bell_numbers.append(bell_numbers[-1] * i // (i + 1))\n    \n    # Initialize a list to store the number of ways to partition each Bell number\n    ways = [1]\n    \n    # Compute the number of ways to partition each Bell number\n    for i in range(len(bell_numbers) - 1):\n        ways.append(ways[-1] * (n - i))\n    \n    # Return the number of ways to partition the nth Bell number\n    return ways[-1]"
    },
    {
        "number": 67,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    \n    bell_numbers = [0] * (n+1)\n    bell_numbers[0] = 1\n    \n    for i in range(1, n+1):\n        bell_numbers[i] = sum(bell_numbers[:i])\n    \n    num_ways = bell_numbers[n]\n    \n    for i in range(1, n+1):\n        num_ways += bell_numbers[n-i] * bell_numbers[i]\n    \n    return num_ways\n"
    },
    {
        "number": 67,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers))\n    return bell_numbers[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # Create a list to store the Bell numbers\n    bell = [1]\n    \n    # Calculate the Bell numbers and store them in the list\n    for i in range(1, n+1):\n        bell.append(bell[i-1]*(n-i+1)//i)\n        \n    # Calculate the number of ways to partition the set of Bell numbers\n    num_ways = bell[n]\n    \n    # Return the number of ways to partition the set of Bell numbers\n    return num_ways\n"
    },
    {
        "number": 67,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(0)\n        for j in range(1, i+1):\n            bell_numbers[i] += bell_numbers[i-j]*bell_numbers[j-1]\n    return bell_numbers[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell_num = [0] * (n+1)\n        bell_num[1] = 1\n        for i in range(2, n+1):\n            bell_num[i] = bell_num[i-1] + i * bell_num[i-2]\n        return bell_num[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import math\n\ndef bell_number(n):\n    # Calculate the nth Bell number using the formula:\n    bell_n = math.factorial(n) // (math.factorial(n-1) * (n-1))\n    \n    # Initialize a variable to store the number of ways to partition the set of Bell numbers\n    bell_ways = 0\n    \n    # Iterate over each set of Bell numbers from 1 to n-1\n    for i in range(1, n):\n        # Calculate the number of ways to partition the set of Bell numbers from 1 to i and from i+1 to n\n        ways_1_to_i = bell_number(i)\n        ways_i_to_n = bell_number(n-i)\n        \n        # Add the product of the two numbers to the total number of ways to partition the set of Bell numbers\n        bell_ways += ways_1_to_i * ways_i_to_n\n        \n    # Return the total number of ways to partition the set of Bell numbers\n    return bell_ways"
    },
    {
        "number": 67,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n + 1):\n        bell.append(bell[-1] * (n - i + 1) // i)\n    return bell[n] - 1"
    },
    {
        "number": 67,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # define a recursive function to compute Bell numbers\n    def bell_recursive(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * bell_recursive(n-1)\n    \n    # compute the Bell number B_n\n    Bn = bell_recursive(n)\n    \n    # define a recursive function to compute the number of ways to partition a set of Bell numbers\n    def partition_recursive(n, k):\n        if n == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            return partition_recursive(n-k, k) + partition_recursive(n, k-1)\n    \n    # compute the number of ways to partition a set of Bell numbers\n    num_ways = partition_recursive(Bn, n)\n    \n    return num_ways\n"
    },
    {
        "number": 67,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a list of length n+1 to hold the Bell numbers\n    bell = [0] * (n+1)\n    # Set the first two Bell numbers\n    bell[1] = 1\n    bell[2] = 2\n    # Use dynamic programming to compute the Bell numbers\n    for i in range(3, n+1):\n        bell[i] = bell[i-1] + bell[i-2] + bell[i-3]\n    # Use dynamic programming to compute the number of ways to partition the set of Bell numbers\n    bell_partitions = [0] * (n+1)\n    bell_partitions[1] = 1\n    bell_partitions[2] = 1\n    for i in range(3, n+1):\n        bell_partitions[i] = bell_partitions[i-1] + bell_partitions[i-2] + bell_partitions[i-3]\n    # Compute the number of ways to partition the set of Bell numbers\n    num_partitions = bell_partitions[n]\n    # Return the number of ways to partition the set of Bell numbers\n    return num_partitions\n"
    },
    {
        "number": 68,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def is_monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    \n    # Check if array is monotonically increasing\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    # Check if array is monotonically decreasing\n    for i in range(n-1):\n        if A[i] < A[i+1]:\n            return False\n    \n    # If array is monotonic, return True\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    increasing = decreasing = True\n    \n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            increasing = False\n        elif A[i] < A[i-1]:\n            decreasing = False\n            \n        if not increasing and not decreasing:\n            return False\n            \n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def is_monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] <= A[1]\n    else:\n        if A[0] <= A[1] and A[n-2] <= A[n-1]:\n            return all(A[i] <= A[i+1] for i in range(n-1))\n        elif A[0] >= A[1] and A[n-2] >= A[n-1]:\n            return all(A[i] >= A[i+1] for i in range(n-1))\n        else:\n            return False\n"
    },
    {
        "number": 68,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def is_monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array is monotonic increasing\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            return False\n    \n    # Check if the array is monotonic decreasing\n    for i in range(len(A) - 1):\n        if A[i] < A[i+1]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes an array A as input and returns True if the array is monotonic,\n    else False.\n    An array A is said to be monotonic if either all elements in A are equal to each other,\n    or the array is non-decreasing or non-increasing.\n    \"\"\"\n    n = len(A)\n    if n == 1:\n        return True\n    else:\n        for i in range(1, n):\n            if A[i] != A[i-1]:\n                if A[i] > A[i-1]:\n                    if i == 1 or A[i] > A[i-2]:\n                        continue\n                    else:\n                        return False\n                else:\n                    if i == 1 or A[i] < A[i-2]:\n                        continue\n                    else:\n                        return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    n = len(A)\n    \n    # Check if array is increasing\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            return False\n    \n    # Check if array is decreasing\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n    \n    # If array is neither increasing nor decreasing, it is monotonic\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def is_monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n\n    # Check whether the array is increasing or decreasing\n    if A[1] > A[0]:\n        increasing = True\n    else:\n        increasing = False\n\n    for i in range(2, n):\n        if increasing:\n            if A[i] > A[i-1]:\n                continue\n            else:\n                return False\n        else:\n            if A[i] < A[i-1]:\n                continue\n            else:\n                return False\n\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return A[0] <= A[1]\n    else:\n        if A[0] < A[1]:\n            for i in range(1, n):\n                if A[i-1] > A[i]:\n                    return False\n        elif A[0] > A[1]:\n            for i in range(1, n):\n                if A[i-1] < A[i]:\n                    return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "Since we are iterating through the given array only once, the time complexity of the algorithm is O(n). The space complexity of the algorithm is O(1). "
    },
    {
        "number": 68,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True # An array with 1 or 0 elements is always monotonic\n    \n    sign = (A[1] - A[0]) > 0 # Initialize the sign with the difference between the first two elements\n    \n    for i in range(1, n):\n        diff = A[i] - A[i-1]\n        if diff > 0 and sign < 0:\n            return False # If the array is decreasing and the current difference is positive, it is not monotonic\n        elif diff < 0 and sign > 0:\n            return False # If the array is increasing and the current difference is negative, it is not monotonic\n        sign = diff > 0 # Update the sign with the current difference\n    \n    return True # If all the differences are same sign, then the array is monotonic\n"
    },
    {
        "number": 69,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    n = len(s)\n    for i in range(len(l) - n + 1):\n        if l[i:i+n] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if l[i:i+len(s)] == s:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if s[0] in l:\n        return is_sublist(l[l.index(s[0])+1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    \n    if s[0] in l:\n        return s[0] == l[0] or is_sublist(l[l.index(s[0])+1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l)):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s == []:\n        return True\n    \n    # If s is a sublist of l, return True\n    if s in l:\n        return True\n    \n    # Otherwise, check if s is a sublist of each element in l\n    for element in l:\n        if type(element) == list and is_sublist(element, s):\n            return True\n    \n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i]) != length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:  # check if the list is empty\n        return True\n    length = len(Input[0])  # get the length of the first tuple\n    for tup in Input:\n        if len(tup) != length:  # check if the length is different\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all the tuples have equal length\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    return len(set(map(len, Input))) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to store the length of the first tuple\n    length = len(Input[0])\n\n    # Iterate over the list of tuples\n    for tup in Input:\n        # Check if the length of each tuple is equal to the length of the first tuple\n        if len(tup) != length:\n            # If the length is not equal, return False\n            return False\n\n    # If all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def find_equal_tuple(input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Check if the input is empty\n    if not input:\n        return True\n\n    # Get the length of the first tuple\n    length = len(input[0])\n\n    # Check if all tuples have the same length\n    for t in input:\n        if len(t) != length:\n            return False\n\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Get the length of the first tuple\n    length = len(Input[0])\n    \n    # Check if all the tuples have the same length\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    \n    # If all the tuples have the same length, return True\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i) != len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return False\n    else:\n        return len(Input[0]) == len(Input[1:])"
    },
    {
        "number": 71,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(max(1, gap / shrink_factor))\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    sorted = False\n\n    while gap > 1 or sorted:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    sorted = False\n\n    while not sorted:\n        gap = max(int(gap / shrink_factor), 1)\n\n        if gap == 1:\n            sorted = True\n\n        i = 0\n        while i < n - gap:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        swaps = 0\n        sorted = True\n        for i in range(1, n):\n            if nums[i-1] > nums[i]:\n                nums[i-1], nums[i] = nums[i], nums[i-1]\n                swaps += 1\n                sorted = False\n        n = int(max(1, n - swaps/shrink))\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    shifts_per_pass = n\n    sorted = False\n    while not sorted:\n        shifts_per_pass = max(1, shifts_per_pass // 1.3)\n        new_nums = []\n        sorted = True\n        for i in range(n - shifts_per_pass):\n            if nums[i] > nums[i + shifts_per_pass]:\n                new_nums.append(nums[i + shifts_per_pass])\n                sorted = False\n            else:\n                new_nums.append(nums[i])\n        nums = new_nums + nums[n - shifts_per_pass:]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(n / shrink)\n        if gap > 1:\n            i = 0\n            while i + gap < n:\n                if nums[i] > nums[i + gap]:\n                    nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                i += 1\n        else:\n            sorted = True\n        shrink = 1.3 * (1 - (n - gap) / n)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        # Shrink the gap between elements\n        gap = int(n/shrink)\n        # Check if the list is sorted\n        sorted = all(nums[i] <= nums[i+gap] for i in range(n-gap))\n        # If not, sort the list\n        if not sorted:\n            for i in range(n-gap):\n                if nums[i] > nums[i+gap]:\n                    nums[i], nums[i+gap] = nums[i+gap], nums[i]\n            for i in range(n-gap-1):\n                if nums[i] > nums[i+1]:\n                    nums[i], nums[i+1] = nums[i+1], nums[i]\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    # function to check whether the given number can be represented as the difference of two squares or not\n    # iterate through all possible pairs of squares\n    for i in range(n+1):\n        for j in range(i, n+1):\n            if i*i + j*j == n:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    # loop through all pairs of integers (i, j) such that i^2 + j^2 = n\n    for i in range(int(n**0.5)+1):\n        j = (n - i**2)**0.5\n        if j == int(j):\n            # if j is an integer, return true\n            return True\n    # if no pair is found, return false\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    # Check if the given number is negative or zero\n    if n <= 0:\n        return False\n    \n    # Check if the given number is a perfect square\n    if n**0.5 == int(n**0.5):\n        return True\n    \n    # Check if the given number can be represented as the difference of two squares\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n    \n    # If none of the above conditions are met, the given number cannot be represented as the difference of two squares\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    # check if n is positive integer\n    if not isinstance(n, int) or n < 0:\n        return False\n    \n    # check if n is a perfect square\n    for i in range(int(n**0.5)+1):\n        if i**2 == n:\n            return False\n    \n    # check if n is the difference of two squares\n    for i in range(int(n**0.5)+1):\n        j = n - i**2\n        if j == i**2:\n            return True\n        elif j > i**2 and j <= int(j**0.5)**2:\n            if j == int(j**0.5)**2:\n                return True\n    \n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is positive\n    if n < 0:\n        return False\n    \n    # check if n can be expressed as a sum of two squares\n    for i in range(int(n ** 0.5) + 1):\n        j = n - i ** 2\n        if j >= 0 and j <= int(j ** 0.5):\n            return True\n    \n    # if n cannot be expressed as a sum of two squares, return False\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Check if n is odd\n    if n % 2 == 1:\n        return False\n    \n    # Check if n is even\n    for i in range(1, int(n/2) + 1):\n        j = n - i\n        if i*i + j*j == n:\n            return True\n    \n    # If we reach here, n cannot be expressed as the difference of two squares\n    return False "
    },
    {
        "number": 72,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number is positive or not\n    if n < 0:\n        return False\n    \n    # loop through all possible values of i from 1 to sqrt(n)\n    for i in range(1, int(n**0.5)+1):\n        # check if n-i*i is also a perfect square\n        j = int((n - i**2)**0.5)\n        if j*j == n - i**2:\n            return True\n    \n    # if the number is not represented as the difference of two squares, return False\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is odd\n    if n & 1:\n        return False\n    # Check for every i from 1 to sqrt(n)\n    for i in range(1, int(n**0.5)+1):\n        # Check if there exists j such that i*i + j*j = n\n        j = (n - i*i) ** 0.5\n        if j.is_integer():\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # create a list of square roots of integers up to the given number\n    sqrt_list = [i**2 for i in range(1, int(n**0.5)+1)]\n    # check if the given number is the difference of two squares\n    for i in range(len(sqrt_list)):\n        for j in range(i+1, len(sqrt_list)):\n            if sqrt_list[i] + sqrt_list[j] == n:\n                return True\n    # if no such combination is found, return False\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    # check if the number is positive or negative\n    if n < 0:\n        n = abs(n)\n        \n    # check if the number is a perfect square\n    if n in [i*i for i in range(int(n**0.5)+1)]:\n        return True\n    \n    # check if the number can be represented as the difference of two squares\n    for i in range(int(n**0.5)+1):\n        j = n - i*i\n        if j in [j*j for j in range(int(j**0.5)+1)]:\n            return True\n    \n    # if the number can't be represented as the difference of two squares, return False\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] in patterns[i]:\n            continue\n        else:\n            return False\n\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors) != len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i] == \"GREEN\" and patterns[i] != \"BOTTOM\":\n            return False\n        elif colors[i] == \"RED\" and patterns[i] != \"TOP\":\n            return False\n        elif colors[i] == \"BLUE\" and patterns[i] != \"LEFT\":\n            return False\n        elif colors[i] == \"YELLOW\" and patterns[i] != \"RIGHT\":\n            return False\n        elif colors[i] != \"GREEN\" and colors[i] != \"RED\" and colors[i] != \"BLUE\" and colors[i] != \"YELLOW\":\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    pattern_sequence = []\n    for pattern in patterns:\n        pattern_sequence.extend([color for color in colors if color.startswith(pattern)])\n    return colors == pattern_sequence"
    },
    {
        "number": 74,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if patterns[i] == 'R':\n            if colors[i] != 'Red':\n                return False\n        elif patterns[i] == 'G':\n            if colors[i] != 'Green':\n                return False\n        elif patterns[i] == 'B':\n            if colors[i] != 'Blue':\n                return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    # initialize a variable to store the sequence of the patterns\n    pattern_sequence = ''\n    \n    # iterate over the patterns array\n    for pattern in patterns:\n        # check if the pattern is in the colors dictionary\n        if pattern in colors:\n            # add the color to the pattern_sequence variable\n            pattern_sequence += colors[pattern]\n        else:\n            # if the pattern is not in the colors dictionary, return False\n            return False\n    \n    # iterate over the colors array\n    for color in colors.values():\n        # check if the color is in the pattern_sequence variable\n        if color not in pattern_sequence:\n            # if the color is not in the pattern_sequence variable, return False\n            return False\n    \n    # if the function has not returned False by now, return True\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a counter for the current pattern index\n    pattern_index = 0\n    # Initialize a counter for the current color index\n    color_index = 0\n    # Loop over all colors and check if they match the pattern\n    for color in colors:\n        if color == patterns[pattern_index][color_index]:\n            # If the color matches, move to the next color in the pattern\n            color_index += 1\n            if color_index == len(patterns[pattern_index]):\n                # If we have reached the end of the current pattern, move to the next pattern\n                color_index = 0\n                pattern_index += 1\n        else:\n            # If the color does not match, return False\n            return False\n    # If we have gone through all colors, return True\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(colors)):\n        if i % 2 == 0:\n            if colors[i] != patterns[i//2][0]:\n                return False\n        else:\n            if colors[i] != patterns[i//2][1]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if patterns[i] == 0:\n            if colors[i] != 'red':\n                return False\n        elif patterns[i] == 1:\n            if colors[i] != 'yellow':\n                return False\n        elif patterns[i] == 2:\n            if colors[i] != 'blue':\n                return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for elem in tup:\n            if elem % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        divisible = True\n        for element in t:\n            if element % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(t)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        flag = True\n        for num in tup:\n            if num % K != 0:\n                flag = False\n                break\n        if flag:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 77,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        print(s, \"has odd length\")\n    else:\n        print(s, \"has even length\")\n"
    },
    {
        "number": 79,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'The length of the word is even.'\n    else:\n        return 'The length of the word is odd.'\n"
    },
    {
        "number": 79,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return f\"{s} has an even length.\"\n    else:\n        return f\"{s} has an odd length.\"\n"
    },
    {
        "number": 79,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"\n"
    },
    {
        "number": 79,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 80,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_num = (n * (n + 1) * (n + 2)) // 6\n    return tetrahedral_num\n"
    },
    {
        "number": 80,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # The tetrahedral numbers can be defined recursively as:\n    # T(n) = (n * (n+1)) / 2\n    # So we can use this formula to compute the nth tetrahedral number.\n    return (n * (n+1)) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * (n + 1) * (n + 2) // 6 + tetrahedral_number(n - 1)\n"
    },
    {
        "number": 80,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n+1) * (n+2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return int((n * (n + 1) * (n + 2)) / 6)\n"
    },
    {
        "number": 80,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    tetrahedral_num = (n * (n + 1) * (n + 2)) // 6\n    return tetrahedral_num\n"
    },
    {
        "number": 80,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n * (n + 1) * (n + 2)) / 6)\n"
    },
    {
        "number": 80,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n+1) * (n+2)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 82,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r <= 0:\n        return \"Invalid radius value. Radius must be a positive number.\"\n    else:\n        volume = (4/3) * math.pi * (r ** 3)\n        return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r <= 0:\n        return \"Invalid radius value. Please enter a positive value.\"\n    else:\n        return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)"
    },
    {
        "number": 82,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n\nprint(volume_sphere(5))\n"
    },
    {
        "number": 82,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3) * math.pi * r**3\n    return v"
    },
    {
        "number": 82,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # Initializing the sum variable\n    sum = 0\n    # Iterating over the characters of the string\n    for i in strr:\n        # Adding the ASCII value of each character to the sum\n        sum += ord(i)\n    # Finding the character by taking the sum modulo 26\n    char = chr((sum % 26) + 97)\n    # Returning the result\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    ascii_val = ascii_val % 26\n    return chr(ascii_val)\n"
    },
    {
        "number": 83,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # Initialize the ASCII value of 'a' to 97\n    ascii_val_a = 97\n    \n    # Initialize the sum of ASCII values of all characters in the given string to 0\n    sum_ascii_vals = 0\n    \n    # Iterate through each character in the string\n    for char in strr:\n        \n        # If the character is a letter, add its ASCII value to the sum\n        if char.isalpha():\n            sum_ascii_vals += ord(char)\n        \n        # If the character is not a letter, skip it\n        else:\n            continue\n    \n    # Calculate the sum of ASCII values modulo 26\n    sum_mod_26 = sum_ascii_vals % 26\n    \n    # Convert the sum to a character by adding the ASCII value of 'a'\n    char = chr(sum_mod_26 + ascii_val_a)\n    \n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    result = 0\n    for char in strr:\n        result += ord(char)\n    result = result % 26\n    return chr(result + ord('A'))\n"
    },
    {
        "number": 83,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr(sum % 26 + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr(sum_ascii % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    # Initialize the sum variable\n    sum = 0\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum variable\n        sum += ord(char)\n    # Take the sum modulo 26\n    result = sum % 26\n    # Convert the result to a character\n    result = chr(result + ord('A'))\n    # Return the character\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # Converting the string to a list of characters\n    char_list = list(strr)\n\n    # Initializing the sum to 0\n    sum = 0\n\n    # Calculating the sum of ASCII values of each character\n    for char in char_list:\n        sum += ord(char)\n\n    # Calculating the remainder when sum is divided by 26\n    rem = sum % 26\n\n    # Finding the character made by adding the ASCII value of all the characters of the given string modulo 26\n    result_char = chr(rem)\n\n    return result_char\n"
    },
    {
        "number": 83,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    result %= 26\n    return chr(result + 97)"
    },
    {
        "number": 83,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values to 0\n    sum_ascii = 0\n\n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of the current character to the sum\n        sum_ascii += ord(char)\n\n    # Take the modulo of the sum with 26\n    modulo_sum = sum_ascii % 26\n\n    # Convert the resulting integer to a character and return it\n    return chr(modulo_sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n\n    sequence = [0, 1, 1]\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the value of n: \"))\n    print(f\"The {n}th number in the Newman Conway sequence is: {newman_conway(n)}\")\n"
    },
    {
        "number": 84,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n\n    sequence = [0, 1, 1]\n    for i in range(3, n+1):\n        sequence.append(sequence[sequence[i-1]] + sequence[i-sequence[i-1]])\n\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 0\n        prev = 1\n        curr = 1\n        for i in range(3, n + 1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n        return curr\n"
    },
    {
        "number": 84,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-sequence(n-1))\n"
    },
    {
        "number": 84,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def sequence(n):\n    # If n is less than or equal to 0, return an empty list\n    if n <= 0:\n        return []\n    \n    # Create an empty list to store the Newman Conway sequence\n    newman_conway = []\n    \n    # Handle the base cases\n    if n == 1:\n        newman_conway.append(1)\n    elif n == 2:\n        newman_conway.extend([1, 1])\n    \n    # Handle the recursive cases\n    for i in range(3, n+1):\n        newman_conway.append(newman_conway[newman_conway[i-1]-1] + newman_conway[i-2])\n    \n    return newman_conway\n"
    },
    {
        "number": 84,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        seq = [1, 1, 1]\n        for i in range(3, n + 1):\n            seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n        return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def sequence(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 1, 1\n        for i in range(3, n+1):\n            a, b, c = b, c, a+b\n        return c\n"
    },
    {
        "number": 84,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def sequence(n):\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        current = 1\n        for i in range(3, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current\n"
    },
    {
        "number": 84,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 1, 1, 1\n        for i in range(3, n + 1):\n            c = a + b + c\n            a, b = b, c\n        return c\n"
    },
    {
        "number": 84,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        curr = 1\n        for i in range(3, n + 1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n        return curr\n"
    },
    {
        "number": 85,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using the formula: 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of the sphere using the formula A = 4 * pi * r^2\n    area = 4 * math.pi * r**2\n    \n    # Return the surface area of the sphere\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r**2)\n    return surface_area\n\nprint(surfacearea_sphere(5))  # Output: 314.1592653589793\n"
    },
    {
        "number": 85,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    \n    # Calculate the surface area of the sphere\n    surface_area = 4 * math.pi * r**2\n    \n    # Return the surface area\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r ** 2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4 * pi * r**2\n"
    },
    {
        "number": 86,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    # Loop through first n odd numbers\n    for i in range(1, 2*n, 2):\n        # Add the number to the sum\n        sum += i\n    # Return the sum as the nth centered hexagonal number\n    return sum\n"
    },
    {
        "number": 86,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # Calculate the nth centered hexagonal number using the formula: (4n^2 - 3n) / 2\n    return (4*n**2 - 3*n) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n**2 * 3)//2\n"
    },
    {
        "number": 86,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Calculate the nth row of the hexagonal number triangle\n    row = (2*n) - 1\n\n    # Calculate the index of the nth centered hexagonal number\n    index = n - ((row - 1) // 2)\n\n    # Calculate the nth centered hexagonal number\n    hex_num = (row ** 2) // 2 + index\n\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    # Calculate the nth centered hexagonal number using the formula\n    # (n * (3 * n - 1)) / 2\n    hex_num = (n * (3 * n - 1)) // 2\n    \n    return hex_num\n"
    },
    {
        "number": 86,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find the nth centered hexagonal number.\n    \"\"\"\n    return (3*n**2 - n) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (n * (n * 4 - 6)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n % 2 == 0:\n        return (3*n**2 - n)//2\n    else:\n        return (3*n**2 + n)//2\n"
    },
    {
        "number": 87,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key in merged_dict:\n            merged_dict[key] += dict2[key]\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key in merged_dict:\n            merged_dict[key] += dict3[key]\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    # Initialize the merged dictionary as a copy of the first dictionary\n    merged_dict = dict1.copy()\n\n    # Update the merged dictionary with the second and third dictionaries\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = ct.Counter(dict1) + ct.Counter(dict2) + ct.Counter(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.Counter()\n    for d in (dict1, dict2, dict3):\n        merged_dict += ct.Counter(d)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.Counter(dict1) + ct.Counter(dict2) + ct.Counter(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.defaultdict(int)\n    for d in (dict1, dict2, dict3):\n        for key, value in d.items():\n            merged_dict[key] += value\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    result = ct.Counter(dict1) + ct.Counter(dict2) + ct.Counter(dict3)\n    return dict(result)\n"
    },
    {
        "number": 87,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    # Merging the dictionaries\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    # Returning the merged dictionary\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.Counter(dict1) + ct.Counter(dict2) + ct.Counter(dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create a new dictionary\n    new_dict = {}\n    # Merge the three dictionaries into the new dictionary\n    new_dict = ct.ChainMap(dict1,dict2,dict3)\n    # Return the new dictionary\n    return new_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate through the list\n    for item in list1:\n        # If the item is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # Otherwise, add the item to the dictionary with a count of 1\n        else:\n            freq_dict[item] = 1\n    \n    # Return the dictionary of frequencies\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    # Using Counter() from collections module to count frequency of each element in the list\n    count_dict = collections.Counter(list1)\n    \n    return count_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    # Create an empty dictionary to store frequency counts\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its count\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[element] = 1\n\n    # Return the dictionary of frequency counts\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    # Create an empty dictionary to store the frequency counts.\n    freq_dict = {}\n    \n    # Iterate through the list and update the frequency count for each element.\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the dictionary of frequency counts.\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Using the Counter method from collections module to get the frequency count of each element\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # Find the floor of the square root of N\n    sqrt_N = int(N ** 0.5)\n    \n    # Loop through all numbers from 1 to sqrt_N\n    for i in range(1, sqrt_N + 1):\n        # Check if i * i is less than N\n        if i * i < N:\n            # If so, check if i * i + i is greater than N\n            if i * i + i > N:\n                # If it is, return i * i\n                return i * i\n        else:\n            # If i * i is greater than or equal to N, return i * i - 1\n            return i * i - 1\n"
    },
    {
        "number": 89,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # initialize the closest number as None\n    closest_num = None\n    \n    # iterate through the numbers from 1 to N (inclusive)\n    for num in range(1, N+1):\n        # if the current number is less than N and closer to N than the current closest number,\n        # update the closest number\n        if num < N and abs(num - N) < abs(closest_num - N):\n            closest_num = num\n    \n    # return the closest number\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # Finding the closest smaller number than n\n    for i in range(n-1, 0, -1):\n        if i < n:\n            return i\n"
    },
    {
        "number": 89,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i % 2 == 0:\n            return i"
    },
    {
        "number": 89,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = n\n    while num > 0:\n        if num - 1 < n and num - 1 > 0:\n            return num - 1\n        num -= 1\n"
    },
    {
        "number": 89,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def closest_num(n):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    return sorted([i for i in range(1, n+1) if i < n])[-1]\n"
    },
    {
        "number": 89,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i == 1:\n            return 1\n        if i % 10 != 1:\n            return i\n"
    },
    {
        "number": 89,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def closest_num(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # initialize a variable to store the closest smaller number\n    closest_num = -1\n    \n    # loop through the numbers from 1 to n-1\n    for i in range(1, n):\n        # if the current number is greater than the closest number found so far, update the closest number\n        if i > closest_num:\n            closest_num = i\n    \n    # return the closest smaller number\n    return closest_num "
    },
    {
        "number": 89,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # If the given number is the smallest number, then it does not have any smaller number.\n    if N == 1:\n        return None\n    # Find the largest number that is less than or equal to N\n    largest_num = N - 1\n    # If the largest number is already smaller than N, then it is the closest number\n    if largest_num < N:\n        return largest_num\n    # Otherwise, the largest number that is less than or equal to N is not the closest number\n    # So, find the next smallest number that is less than N\n    closest_num = None\n    for i in range(N - 1, 0, -1):\n        if i < N:\n            closest_num = i\n            break\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    # Find the square root of n and round it down to the nearest integer.\n    root = int(n ** 0.5)\n    # Check if the square of the root is equal to n.\n    if root ** 2 == n:\n        # If it is, the closest smaller number is the square of the root minus 1.\n        return root ** 2 - 1\n    # If the square of the root is not equal to n, the root is the closest smaller number.\n    return root\n"
    },
    {
        "number": 90,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def len_log(lst):\n    max_len = 0\n    for word in lst:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 91,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in sub_str:\n        if s in str1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    num = str(n)\n    for i in range(1, len(num)-1):\n        if int(num[i]) < int(num[i-1]) and int(num[i]) > int(num[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    \n    # convert the number to string\n    num_str = str(n)\n    \n    # check if the number is undulating\n    for i in range(len(num_str)-1):\n        if num_str[i] < num_str[i+1]:\n            return False\n        elif num_str[i] > num_str[i+1]:\n            return True\n        else:\n            continue\n    \n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check if the given number is undulating or not.\n    \"\"\"\n    # Convert the number to a string\n    s = str(n)\n    # Check if all digits are even or all digits are odd\n    if all(c.isdigit() and int(c) % 2 == 0 for c in s):\n        return False\n    elif all(c.isdigit() and int(c) % 2 == 1 for c in s):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 3:\n        return False\n    if n == 3:\n        return True\n    \n    num = str(n)\n    \n    for i in range(len(num)-1):\n        if int(num[i]) >= int(num[i+1]):\n            return False\n        if int(num[i]) <= int(num[i+1]):\n            return True\n"
    },
    {
        "number": 92,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Find the length of the first half and second half of the number\n    half_length = len(num_str) // 2\n    first_half = int(num_str[:half_length])\n    second_half = int(num_str[half_length:])\n    \n    # Check if the length of the first and second half are equal\n    return len(str(first_half)) == len(str(second_half))\n"
    },
    {
        "number": 92,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    # Convert n to a string so we can check adjacent digits\n    s = str(n)\n    \n    # Check if the number has an even number of digits\n    if len(s) % 2 == 0:\n        return False\n    \n    # Check if the last digit is odd (to ensure the number is undulating)\n    if int(s[-1]) % 2 == 0:\n        return False\n    \n    # Check if all adjacent digits are equal\n    for i in range(len(s) - 2):\n        if s[i] != s[i+1]:\n            return True\n    \n    # If we haven't returned yet, then the number is undulating\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    digits = str(n)\n    if len(digits) < 3:\n        return False\n    for i in range(1, len(digits) - 1):\n        if digits[i] < digits[i - 1] and digits[i] < digits[i + 1]:\n            return False\n        if digits[i] > digits[i - 1] and digits[i] > digits[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert the given number to string\n    n_str = str(n)\n\n    # Check if the length of the string is less than 2\n    if len(n_str) < 2:\n        return False\n\n    # Check if the first and last characters are the same\n    if n_str[0] == n_str[-1]:\n        return False\n\n    # Check if the number is undulating or not\n    is_undulating = True\n    for i in range(1, len(n_str)-1):\n        if n_str[i] < n_str[i-1] and n_str[i] < n_str[i+1]:\n            continue\n        elif n_str[i] > n_str[i-1] and n_str[i] > n_str[i+1]:\n            continue\n        else:\n            is_undulating = False\n            break\n\n    return is_undulating\n"
    },
    {
        "number": 92,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        i = 2\n        while i <= n-1:\n            if n == i:\n                return False\n            i += 2\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    # Convert the number to a string to check for consecutive digits\n    n = str(n)\n    \n    # Check if the number is undulating\n    for i in range(len(n)-1):\n        if int(n[i+1]) - int(n[i]) >= 2:\n            return True\n    \n    # If the number is not undulating, return False\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def power(a, b):\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use itemgetter to get the second value of each tuple\n    second_values = itemgetter(1)(test_list)\n    # Find the index of the minimum value\n    min_index = second_values.index(min(second_values))\n    # Return the first value of the tuple with the minimum second value\n    return test_list[min_index][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    # Sort the list of tuples based on the second value in descending order\n    sorted_list = sorted(test_list, key=itemgetter(1), reverse=True)\n    \n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]\n"
    },
    {
        "number": 95,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = None\n    for sublist in lst:\n        if min_len is None or len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for sub_lst in lst:\n        if min_length is None or len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count\n"
    },
    {
        "number": 96,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency = {}\n    for item in flattened_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    freq = {}\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    # create an empty dictionary to hold the frequencies\n    freq = {}\n    # iterate through each element in the flattened list\n    for item in flatten(list1):\n        # if the element is already in the dictionary, increment its count\n        if item in freq:\n            freq[item] += 1\n        # otherwise, add it to the dictionary with a count of 1\n        else:\n            freq[item] = 1\n    # return the dictionary of frequencies\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for elem in flatten_list(list1):\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n\n\ndef flatten_list(lst):\n    '''\n    Flatten a list of lists into a single list.\n    '''\n    flattened_lst = []\n    for elem in lst:\n        if isinstance(elem, list):\n            flattened_lst.extend(flatten_list(elem))\n        else:\n            flattened_lst.append(elem)\n    return flattened_lst\n"
    },
    {
        "number": 97,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    frequency = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency:\n                frequency[item] += 1\n            else:\n                frequency[item] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(n % 2)\n        n //= 2\n    return ''.join(map(str, binary[::-1]))\n"
    },
    {
        "number": 99,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    # Handle edge case of negative numbers\n    if n < 0:\n        return decimal_to_binary(abs(n))\n    # Handle edge case of 0\n    if n == 0:\n        return \"0\"\n    # Find the next lowest power of 2\n    power = 1\n    while power <= n:\n        power <<= 1\n    # Subtract the power of 2 to find the binary digit\n    digit = 0 if power == n else 1\n    # Recursively call the function with the remaining digits\n    return str(digit) + decimal_to_binary(n - power >> 1)\n"
    },
    {
        "number": 99,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal to binary\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    \n    # Remove leading zeros\n    binary = binary.lstrip('0')\n    if binary == '':\n        binary = '0'\n    \n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert a decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary.lstrip(\"0\") or \"0\"\n"
    },
    {
        "number": 99,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    else:\n        return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary or '0'\n"
    },
    {
        "number": 100,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the input number to a string\n    num_str = str(num)\n    # reverse the string and compare it with the original string\n    for i in range(len(num_str)):\n        # if the reversed string is greater than the original string, add one to the current digit\n        if num_str[i:] + num_str[:i] > num_str:\n            # convert the result back to an integer\n            return int(num_str[:i] + str(int(num_str[i])+1) + num_str[i:i-1:-1])\n    # if the input number is already a palindrome, add one to the first digit and make the remaining digits zero\n    return int(str(num+1).zfill(len(num_str))[:len(num_str)//2+1] + str(int(num_str[:len(num_str)//2+1])+1) + num_str[:len(num_str)//2+1][::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    num_len = len(num_str)\n    \n    if num_len % 2 == 0:\n        # even number of digits\n        end_digit = int(num_str[-1])\n        \n        if end_digit == 9:\n            # last digit is 9\n            new_num = num + int('1' + '0'*(num_len-1))\n        else:\n            # last digit is not 9\n            new_num = num + int('1'*(num_len-1))\n    else:\n        # odd number of digits\n        end_digit = int(num_str[-1])\n        \n        if end_digit == 9:\n            # last digit is 9\n            new_num = num + int('1'*(num_len-1))\n        else:\n            # last digit is not 9\n            new_num = num + int('1'*(num_len-1))\n    \n    return new_num"
    },
    {
        "number": 100,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # Increment the number and try again\n        return next_smallest_palindrome(num + 1)\n    else:\n        # Find the length of the non-palindromic suffix\n        non_palindrome_len = len(num_str) - len(num_str[:len(num_str)//2][::-1])\n        # Find the middle digit of the non-palindromic suffix\n        mid_digit = int(num_str[non_palindrome_len//2])\n        # If the middle digit is 9, we need to carry over to the next digit\n        if mid_digit == 9:\n            # Increment the digit to the left of the middle digit\n            num_str = num_str[:non_palindrome_len//2-1] + str(int(num_str[non_palindrome_len//2-1])+1) + '0'*(non_palindrome_len//2-1)\n        else:\n            # Otherwise, increment the middle digit\n            num_str = num_str[:non_palindrome_len//2] + str(mid_digit+1) + '0'*(non_palindrome_len//2)\n        # Convert the resulting string back to an integer and return it\n        return int(num_str)\n"
    },
    {
        "number": 100,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Convert the input number to string\n    num_str = str(num)\n    \n    # Initialize a variable to keep track of whether the next palindrome is found or not\n    found = False\n    \n    # Loop until the next palindrome is found\n    while not found:\n        # Check if the current number is a palindrome\n        if num_str == num_str[::-1]:\n            # If yes, increment the digits and check if they are all digits\n            for i in range(len(num_str)):\n                # Check if the next number is a palindrome\n                if num_str[:i] + str(int(num_str[i]) + 1) + num_str[i+1:] == num_str[::-1]:\n                    return int(num_str[:i] + str(int(num_str[i]) + 1) + num_str[i+1:])\n                # If not, check the next digits\n                elif num_str[i+1:] == num_str[i+1:][::-1] and int(num_str[i]) != 9:\n                    num_str = num_str[:i] + str(int(num_str[i]) + 1) + num_str[i+1:]\n            # If no palindrome is found, increment the digits by one\n            if i == len(num_str)-1:\n                num_str = str(int(num_str[0]) + 1) + num_str[1:]\n        # If the current number is not a palindrome, add a zero to the end of the number and check if it's a palindrome\n        elif num_str[-1] != '9':\n            num_str += '0'\n        else:\n            found = True\n    \n    # If no palindrome is found, return -1\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num) % 2 == 0:\n        mid = len(num) // 2\n        left = num[:mid]\n        right = num[mid:][::-1]\n        if right > left:\n            return int(num)\n        else:\n            next_left = str(int(left) + 1)\n            return int(next_left + next_left[::-1])\n    else:\n        mid = len(num) // 2\n        left = num[:mid]\n        right = num[mid + 1:][::-1]\n        if right > left:\n            return int(num)\n        else:\n            next_left = str(int(left) + 1)\n            return int(next_left + next_left[0] + next_left[::-1][1:])\n"
    },
    {
        "number": 100,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    if num % 10 == 0:\n        # if the last digit is a 0, we need to add 1 to the next digit and make it a palindrome\n        return num + 11\n    elif num < 10:\n        # if the number is less than 10, it's already a palindrome\n        return num\n    else:\n        # otherwise, we need to reverse the number, add 1 to the last digit, and then reverse it again to get the next smallest palindrome\n        n = str(num)\n        n = n[:len(n)//2][::-1] + n[len(n)//2:]\n        n = int(n[:-1] + str(int(n[-1]) + 1))\n        return n\n"
    },
    {
        "number": 100,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    # check if num is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # increment last digit and add any required digits to the left\n        num_str = str(num)\n        last_digit = int(num_str[-1])\n        if last_digit == 9:\n            num_str = num_str[:-1] + str(int(num_str[:-1]) + 1)\n        else:\n            num_str = num_str[:-1] + str(last_digit + 1)\n        return int(num_str)\n    else:\n        # find smallest palindrome greater than num\n        num_str = str(num)\n        while True:\n            num_str = str(int(num_str) + 1)\n            if num_str == num_str[::-1]:\n                return int(num_str)\n"
    },
    {
        "number": 100,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 10:\n        return 11\n    elif num % 10 == 0:\n        return num + 1\n    else:\n        while True:\n            if str(num + 1) == str(num + 1)[::-1]:\n                return num + 1\n            else:\n                num += 1\n\nif __name__ == '__main__':\n    if len(sys.argv) > 1:\n        num = int(sys.argv[1])\n        print(next_smallest_palindrome(num))\n    else:\n        print(\"Usage: python next_smallest_palindrome.py [integer]\")"
    },
    {
        "number": 100,
        "checkpoint": "7B",
        "pass": 8,
        "answer": ""
    },
    {
        "number": 100,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    if num == 1:\n        return 2\n\n    str_num = str(num)\n    if str_num == str_num[::-1]:\n        return int(str_num + \"0\" + str_num[0])\n\n    for i in range(len(str_num) - 1, -1, -1):\n        if str_num[i] < \"9\":\n            str_num = str_num[:i] + str(int(str_num[i]) + 1) + str_num[i+1:]\n            if str_num == str_num[::-1]:\n                return int(str_num)\n\n    return int(str_num + \"0\" + str_num[0])\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Usage: python next_smallest_palindrome.py <num>\")\n        sys.exit(1)\n\n    num = int(sys.argv[1])\n    print(next_smallest_palindrome(num))"
    },
    {
        "number": 101,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    k -= 1 # Since arrays are 0-indexed, we need to decrement k to get the actual index\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Return None if the array is empty\n    if len(arr) == 0:\n        return None\n    \n    # Return the first element if k is 1\n    if k == 1:\n        return arr[0]\n    \n    # Return the last element if k is equal to the length of the array\n    if k == len(arr):\n        return arr[-1]\n    \n    # Calculate the index of the element at kth position\n    index = k - 1\n    \n    # Sort the array in ascending order using Python's built-in sort function\n    arr.sort()\n    \n    # Return the element at the calculated index\n    return arr[index]\n"
    },
    {
        "number": 101,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be between 1 and the length of the array\")\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Separate the words by underscore and iterate through the list to capitalize the first letter of each word except the first one\n    words = word.split('_')\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i].capitalize()\n    # Return the camel case string\n    return camel_case_word\n"
    },
    {
        "number": 102,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    return ''.join(x.capitalize() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel = words[0] + ''.join(word.title() for word in words[1:])\n    return camel\n"
    },
    {
        "number": 102,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Split the word into words using the _ character as the delimiter\n    words = word.split('_')\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    # Convert each subsequent word to title case\n    for i in range(1, len(words)):\n        words[i] = words[i].title()\n    # Join the words back together with capitalization\n    return ''.join(words)\n"
    },
    {
        "number": 102,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words using underscore as a delimiter\n    words = word.split('_')\n    # Capitalize the first letter of the first word and join the rest of the words\n    return words[0].capitalize() + ''.join([w.capitalize() for w in words[1:]])\n"
    },
    {
        "number": 102,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    # check if the input is a snake case string\n    if not word.islower() or '_' not in word:\n        return word\n    \n    # split the snake case string into words\n    words = word.split('_')\n    \n    # capitalize the first letter of each word\n    camel_case_word = words[0] + ''.join(word.capitalize() for word in words[1:])\n    \n    return camel_case_word\n"
    },
    {
        "number": 102,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = ''\n    for i, w in enumerate(words):\n        if i == 0:\n            camel_case_word = w\n        else:\n            camel_case_word += w.capitalize()\n    return camel_case_word\n"
    },
    {
        "number": 102,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(w.capitalize() for w in words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    return ''.join(x.capitalize() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n"
    },
    {
        "number": 103,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    return (m / (m - n)) * (n / m) ** n\n"
    },
    {
        "number": 103,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    import math\n\n    # Calculate the factorial of n\n    fact_n = math.factorial(n)\n\n    # Calculate the factorial of n+m\n    fact_n_plus_m = math.factorial(n + m)\n\n    # Calculate the factorial of m\n    fact_m = math.factorial(m)\n\n    # Calculate the value of a(n, m)\n    a_n_m = fact_n_plus_m // (fact_n * fact_m)\n\n    return a_n_m\n"
    },
    {
        "number": 103,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    if m == 0 or n == 0:\n        return 1\n    elif m == 1:\n        return n\n    else:\n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if m == 0:\n        return 1\n    elif m == 1:\n        return n + 1\n    else:\n        return n * eulerian_num(n, m-1) + eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2 and m == 0:\n        return 1\n    elif n == 2 and m == 1:\n        return 2\n    else:\n        return (m+1) * eulerian_num(n-1, m) + (n-m-1) * eulerian_num(n-2, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    else:\n        return n * eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(n+1):\n        a += (m**i) // (i+1)\n    return a\n"
    },
    {
        "number": 103,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return (eulerian_num(n-1, m) + eulerian_num(n, m-1))\n"
    },
    {
        "number": 103,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    if n == 0 or n == 1:\n        return 1\n    if m == 1:\n        return 1\n    if m == 2:\n        return 1\n    if m > n:\n        return 0\n    if m > 3:\n        return 2 * eulerian_num(n, m-1) * eulerian_num(n, m-2)\n    else:\n        return 1"
    },
    {
        "number": 103,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case: a(0, 0) = 1\n    if n == 0 and m == 0:\n        return 1\n    \n    # base case: a(n, 0) = 0 for n > 0\n    if m == 0:\n        return 0\n    \n    # recursive case: a(n, m) = a(n-1, m-1) + a(n-1, m)\n    return eulerian_num(n-1, m-1) + eulerian_num(n-1, m)\n"
    },
    {
        "number": 104,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for i in range(len(input_list)):\n        # Sort the sublist using the sorted() function\n        input_list[i] = sorted(input_list[i])\n    \n    # Return the sorted input list\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)):\n        result.append(test_tup[i] + test_list)\n    return tuple(result)\n"
    },
    {
        "number": 106,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuple.\n    '''\n    # Convert the tuple to a list\n    test_list_copy = list(test_tup)\n    # Append the list to the list copy\n    test_list_copy.append(test_list)\n    # Convert the list back to a tuple\n    test_tup_new = tuple(test_list_copy)\n    # Return the new tuple\n    return test_tup_new\n"
    },
    {
        "number": 106,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # creating a list of tuples\n    tuples_list = list(test_tup)\n    \n    # appending the test_list to the tuples_list\n    tuples_list.append(test_list)\n    \n    # returning the modified list of tuples\n    return tuples_list\n"
    },
    {
        "number": 106,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + (test_list,)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + list(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = list(test_tup)\n    new_list.append(test_list)\n    return tuple(new_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuple to a list\n    test_tup_list = list(test_tup)\n    # Append the list to the tuple\n    test_tup_list.extend(test_list)\n    # Convert the list back to a tuple\n    new_tup = tuple(test_tup_list)\n    return new_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "7B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 106,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # converting tuple to list\n    test_list_new = list(test_list)\n    # appending the list to tuple\n    test_tup += tuple(test_list_new)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Append the given list to the given tuples\n    \"\"\"\n    new_list = list(test_tup) + test_list\n    return tuple(new_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Create a heap of the three lists and their corresponding indices.\n    # This will allow us to pop the smallest element from any of the three lists.\n    heap = [(lst[0], i, lst) for i, lst in enumerate((num1, num2, num3)) if lst]\n    heapq.heapify(heap)\n    \n    # Initialize the result list and the index of the current list being merged.\n    result = []\n    current_list = 0\n    \n    # Loop until all three lists have been exhausted.\n    while heap:\n        # Pop the smallest element from the heap.\n        smallest, index, lst = heapq.heappop(heap)\n        \n        # Add the smallest element to the result list.\n        result.append(smallest)\n        \n        # If the current list is exhausted, move on to the next list.\n        if index == current_list:\n            current_list += 1\n            \n            # If there are still elements left in the current list, push it back onto the heap.\n            if lst:\n                heapq.heappush(heap, (lst[0], current_list, lst))\n    \n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 or num2 or num3:\n        if not num1:\n            merged_list.append(heapq.heappop(num2))\n            merged_list.append(heapq.heappop(num3))\n        elif not num2:\n            merged_list.append(heapq.heappop(num1))\n            merged_list.append(heapq.heappop(num3))\n        elif not num3:\n            merged_list.append(heapq.heappop(num1))\n            merged_list.append(heapq.heappop(num2))\n        else:\n            if num1[0] <= num2[0] and num1[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num1))\n            elif num2[0] <= num1[0] and num2[0] <= num3[0]:\n                merged_list.append(heapq.heappop(num2))\n            else:\n                merged_list.append(heapq.heappop(num3))\n    \n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    heap = []\n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    for num in num3:\n        heapq.heappush(heap, num)\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # create a heap from the first two lists\n    heap = num1 + num2\n    heapq.heapify(heap)\n    \n    # merge the heap with the third list\n    merged_list = []\n    while heap:\n        smallest_val = heapq.heappop(heap)\n        merged_list.append(smallest_val)\n        if not heap and num3:\n            # if the heap is empty and there are still elements in num3,\n            # add the remaining elements to the merged list\n            merged_list += num3\n    \n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    heapq.heappush(heap, (num1[0], 1, num1))\n    heapq.heappush(heap, (num2[0], 2, num2))\n    heapq.heappush(heap, (num3[0], 3, num3))\n    merged_list = []\n    while heap:\n        min_val, _, lst = heapq.heappop(heap)\n        merged_list.append(min_val)\n        if lst:\n            heapq.heappush(heap, (lst[0], lst[1], lst))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # combine the three lists into one\n    combined_list = num1 + num2 + num3\n    \n    # use the heapq module to sort the combined list in O(n log n) time complexity\n    sorted_list = heapq.nsmallest(len(combined_list), combined_list)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Create a heap of the first two lists\n    heap = []\n    for i in range(min(len(num1), len(num2))):\n        heapq.heappush(heap, num1[i])\n        heapq.heappush(heap, num2[i])\n    \n    # Add the remaining elements from the third list\n    for i in range(len(num1), len(num1) + len(num3)):\n        heapq.heappush(heap, num3[i - len(num1)])\n    \n    # Create a new sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    heap = []\n    heapq.heappush(heap, num1.pop(0))\n    heapq.heappush(heap, num2.pop(0))\n    heapq.heappush(heap, num3.pop(0))\n    result = []\n    while heap:\n        min_num = heapq.heappop(heap)\n        result.append(min_num)\n        if num1:\n            heapq.heappush(heap, num1.pop(0))\n        if num2:\n            heapq.heappush(heap, num2.pop(0))\n        if num3:\n            heapq.heappush(heap, num3.pop(0))\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heap = []\n    \n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    for num in num3:\n        heapq.heappush(heap, num)\n    \n    while heap:\n        merged_list.append(heapq.heappop(heap))\n    \n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # convert the lists into heap queues and merge them into a single list\n    heap1 = list(num1)\n    heapq.heapify(heap1)\n    heap2 = list(num2)\n    heapq.heapify(heap2)\n    heap3 = list(num3)\n    heapq.heapify(heap3)\n    merged_heap = heap1 + heap2 + heap3\n    \n    # merge the heap into a single sorted list\n    sorted_list = []\n    while merged_heap:\n        smallest = heapq.heappop(merged_heap)\n        sorted_list.append(smallest)\n    \n    return sorted_list\n"
    },
    {
        "number": 109,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # convert binary string to integer\n    x = int(s, 2)\n    \n    # calculate the number of bits in the binary string\n    num_bits = len(s)\n    \n    # calculate the odd equivalent for rotating the string n times\n    odd_equivalent = (x * (2 ** num_bits) - x) // 2 ** (num_bits - 1)\n    \n    # calculate the number of rotations of the string that result in an odd value\n    num_odd_rotations = 0\n    for i in range(n):\n        x = (x * 2) % (2 ** num_bits)\n        if x % 2 == 1:\n            num_odd_rotations += 1\n    \n    return num_odd_rotations\n"
    },
    {
        "number": 109,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the given string to a list of binary digits\n    binary_list = [int(digit) for digit in s]\n\n    # Initialize count of numbers with odd value\n    odd_count = 0\n\n    # Iterate over the possible rotations of the binary string\n    for i in range(n):\n        # Rotate the binary list to the right\n        binary_list = binary_list[-1:] + binary_list[:-1]\n\n        # Check if the number represented by the rotated binary string has an odd value\n        if sum(binary_list) % 2 == 1:\n            odd_count += 1\n\n    return odd_count\n"
    },
    {
        "number": 109,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Convert the binary string to a list of integers\n    nums = [int(num) for num in s]\n\n    # Count the number of integers with odd values after rotating\n    count = 0\n    for i in range(len(nums)):\n        # Rotate the list by n positions\n        nums = nums[i:] + nums[:i]\n        count += 1 if sum(nums) % 2 != 0 else 0\n\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize the count of odd numbers\n    count = 0\n    \n    # Iterate through the binary string and rotate it n times\n    for i in range(n):\n        s = s[-1] + s[:-1]\n    \n    # Count the number of odd digits in the binary string\n    for digit in s:\n        if int(digit) % 2 == 1:\n            count += 1\n    \n    # Return the count of odd numbers\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(len(s)):\n        s = s[-1] + s[:-1]\n        if s[0] == '0':\n            count += 1\n        else:\n            count += 0\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # Convert string to list of integers\n    nums = [int(i) for i in s]\n    \n    # Rotate the list\n    for _ in range(n):\n        nums.insert(0, nums.pop())\n    \n    # Count number of odd values\n    count = 0\n    for num in nums:\n        if num % 2 == 1:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to decimal integer\n    decimal = int(s, 2)\n    \n    # Calculate the decimal value when the string is rotated n times\n    rotated_decimal = (decimal << n) % (1 << len(s))\n    \n    # Count the number of bits set to 1 in the rotated decimal\n    count = bin(rotated_decimal).count('1')\n    \n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of integers\n    nums = [int(x) for x in s]\n    # Initialize the result to 0\n    result = 0\n    # Loop n times, rotating the list each time\n    for i in range(n):\n        # Rotate the list to the right by one position\n        nums = nums[-1:] + nums[:-1]\n        # Count the number of odd values in the rotated list\n        result += sum(x % 2 != 0 for x in nums)\n    # Return the final result\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to integer\n    num = int(s, 2)\n    \n    # Initialize counter for odd values\n    odd_count = 0\n    \n    # Rotate number n times\n    for _ in range(n):\n        num = (num << 1) & 0xffffffff\n        \n        # Check if the resulting number has an odd value\n        if num & 1 == 1:\n            odd_count += 1\n    \n    return odd_count\n"
    },
    {
        "number": 109,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to a list of integers\n    nums = [int(x) for x in s]\n    # Rotate the list of integers n times\n    nums = nums[-n:] + nums[:-n]\n    # Count the number of integers with odd values\n    count = sum(1 for num in nums if num % 2 == 1)\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Get the set of all elements in all nested lists\n    all_elements = set()\n    for sublist in nestedlist:\n        all_elements.update(set(sublist))\n\n    # Find the common elements in all nested lists\n    common_elements = set()\n    for elem in all_elements:\n        if all_elements.count(elem) == len(nestedlist):\n            common_elements.add(elem)\n\n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for lst in nestedlist:\n        for item in lst:\n            if item not in common and all(item in sublist for sublist in nestedlist):\n                common.append(item)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common = common.intersection(set(sublist))\n    return list(common)\n"
    },
    {
        "number": 111,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 0:\n        return []\n    elif len(nestedlist) == 1:\n        return nestedlist[0]\n    else:\n        common_elements = nestedlist[0]\n        for i in range(1, len(nestedlist)):\n            common_elements = [element for element in common_elements if element in nestedlist[i]]\n        return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common_set = set()\n    \n    # Get the length of the outer list\n    outer_length = len(nestedlist)\n    \n    # Loop through the outer list\n    for i in range(outer_length):\n        # Get the length of the inner list\n        inner_length = len(nestedlist[i])\n        \n        # Loop through the inner list\n        for j in range(inner_length):\n            # Add the element to the set\n            common_set.add(nestedlist[i][j])\n    \n    # Return the common elements set\n    return common_set\n"
    },
    {
        "number": 111,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common.extend(list(set(nestedlist[i]).intersection(set(nestedlist[j]))))\n    return list(set(common))\n"
    },
    {
        "number": 111,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist)):\n                if k != i:\n                    if nestedlist[i][j] in nestedlist[k]:\n                        if nestedlist[i][j] not in common_elements:\n                            common_elements.append(nestedlist[i][j])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in nestedlist[i] and nestedlist[i][j] not in result:\n                result.append(nestedlist[i][j])\n    return result"
    },
    {
        "number": 111,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_elements:\n                common_elements.append(nestedlist[i][j])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n    \n    # Loop through the nested lists and add their elements to the common set\n    for sublist in nestedlist:\n        for element in sublist:\n            common.add(element)\n    \n    # Loop through the nested lists again and remove their elements from the common set if they are not present in all nested lists\n    for sublist in nestedlist:\n        for element in sublist:\n            if element not in nestedlist:\n                common.remove(element)\n    \n    # Return the common elements as a list\n    return list(common)\n"
    },
    {
        "number": 113,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary != {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def empty_dicts(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # iterate through the list and check if all dictionaries are empty\n    for d in list1:\n        if d != {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d != {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i != {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i != {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i != {}:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i]\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    result = 1\n    for num in nums:\n        result *= num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "from functools import reduce\n\ndef tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return reduce(lambda x, y: x * y, nums)"
    },
    {
        "number": 116,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result *= 10\n        result += num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result *= 10\n        result += num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    # initialize the result variable\n    result = 0\n\n    # iterate through the tuple and add each element to the result variable\n    for num in nums:\n        result += num\n\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    integer = 0\n    for num in nums:\n        integer = integer*10 + num\n    return integer\n"
    },
    {
        "number": 117,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        new_sublist = []\n        for item in sublist:\n            try:\n                new_item = float(item)\n            except ValueError:\n                new_item = item\n            new_sublist.append(new_item)\n        new_list.append(new_sublist)\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for lst in test_list:\n        converted_list = []\n        for item in lst:\n            if isinstance(item, (int, float)):\n                converted_list.append(float(item))\n            else:\n                converted_list.append(item)\n        result.append(converted_list)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        subresult = []\n        for item in sublist:\n            try:\n                subresult.append(float(item))\n            except ValueError:\n                subresult.append(item)\n        result.append(subresult)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                pass\n            else:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            result_list.append(list_to_float(item))\n        elif isinstance(item, (int, float)):\n            result_list.append(float(item))\n        else:\n            result_list.append(item)\n    return result_list\n"
    },
    {
        "number": 117,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                pass\n            else:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character and return a list of strings\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character and return the resulting list\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string using space as a delimiter\n    words = string.split()\n    # return the list of words\n    return words\n"
    },
    {
        "number": 118,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    \n    # Initialize two pointers to the first and second elements of the array\n    i, j = 0, 1\n    \n    # Iterate through the array until the second pointer reaches the end of the array\n    while j < len(arr):\n        # If the current element and the next element are not equal, return the current element\n        if arr[i] != arr[j]:\n            return arr[i]\n        \n        # Otherwise, move both pointers to the next elements\n        i += 1\n        j += 1\n        \n    # If the function has not returned, then the last element in the array must have appeared only once\n    return arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def search(arr):\n    # XOR all bits in the array\n    result = 0\n    for bit in arr:\n        result ^= bit\n\n    # Find the least significant bit position where the result is 1\n    pos = 0\n    while (result & 1) == 0:\n        pos += 1\n        result >>= 1\n\n    # Find the element in the array that has the bit in the least significant position set to 1\n    for num in arr:\n        if (num & (1 << pos)) != 0:\n            return num\n\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return None\n    else:\n        mid = n // 2\n        if mid > 0 and arr[mid-1] == arr[mid]:\n            # even length, mid element is a duplicate\n            left_duplicate = search(arr[:mid])\n            if left_duplicate is not None:\n                return left_duplicate\n            else:\n                return search(arr[mid:])\n        elif mid > 0 and arr[mid-1] != arr[mid]:\n            # odd length, mid element is the only one\n            return arr[mid]\n        elif arr[mid] == arr[mid+1]:\n            # odd length, mid element is a duplicate\n            right_duplicate = search(arr[mid+1:])\n            if right_duplicate is not None:\n                return right_duplicate\n            else:\n                return None\n        else:\n            # even length, mid element is the only one\n            return arr[mid] "
    },
    {
        "number": 119,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    \n    if arr[0] != arr[1]:\n        return arr[0]\n    \n    if arr[-2] != arr[-1]:\n        return arr[-1]\n    \n    for i in range(2, len(arr), 2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    \n    return \"No unique element found\"\n"
    },
    {
        "number": 119,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def search(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return arr[0] if arr[0] != arr[1] else None\n    else:\n        mid = n // 2\n        if arr[mid] == arr[mid - 1]:\n            # If the middle element appears only once, it must be in the left half.\n            return search(arr[:mid])\n        elif arr[mid] == arr[mid + 1]:\n            # If the middle element appears only once, it must be in the right half.\n            return search(arr[mid + 1:])\n        else:\n            # Otherwise, the middle element appears twice.\n            return None\n"
    },
    {
        "number": 119,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        # Find the pivot index\n        pivot = len(arr) // 2\n        if arr[pivot] == arr[pivot-1]:\n            # The pivot has the same value as its neighbor, so we have two subarrays with the same value\n            # We can split the array into two subarrays and recursively search in each subarray\n            left = arr[:pivot]\n            right = arr[pivot+1:]\n            return search(left) or search(right)\n        else:\n            # The pivot has a different value from its neighbor, so we can search in the subarray on the side of the pivot\n            if pivot > 0 and pivot < len(arr)-1:\n                if arr[pivot] < arr[pivot+1]:\n                    # The element appears in the left subarray\n                    return search(arr[:pivot])\n                else:\n                    # The element appears in the right subarray\n                    return search(arr[pivot+1:])\n            elif pivot == 0:\n                # The element appears in the right subarray\n                return search(arr[pivot+1:])\n            else:\n                # The element appears in the left subarray\n                return search(arr[:pivot])\n"
    },
    {
        "number": 119,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def search(arr):\n    # If there are less than 2 elements, return None\n    if len(arr) < 2:\n        return None\n    \n    # Check if the first and last elements are the same\n    if arr[0] == arr[-1]:\n        return None\n    \n    # Initialize the result variable\n    result = None\n    \n    # Loop over the array\n    for i in range(len(arr)):\n        # Check if the current element is the same as the next one\n        if i < len(arr) - 1 and arr[i] == arr[i+1]:\n            continue\n        \n        # If the current element is different from the next one\n        else:\n            # If the result variable is already set, check if the current element is the same as the previous one\n            if result is not None and arr[i] == arr[i-1]:\n                return None\n            \n            # If the result variable is not set, set it to the current element\n            else:\n                result = arr[i]\n    \n    # Return the result variable\n    return result\n"
    },
    {
        "number": 119,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def search(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(2, n):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n\n    # Set the first and last index\n    first = 0\n    last = len(arr) - 1\n\n    # Keep dividing the array in half until there is only one element\n    while first <= last:\n        mid = (first + last) // 2\n\n        if mid > 0 and arr[mid] == arr[mid - 1]:\n            # If the current element is the same as the previous element, ignore the current element\n            mid -= 1\n\n        if mid < len(arr) - 1 and arr[mid] == arr[mid + 1]:\n            # If the current element is the same as the next element, ignore the current element\n            mid += 1\n\n        if (mid == len(arr) - 1 or arr[mid + 1] != arr[mid]) and (mid == 0 or arr[mid - 1] != arr[mid]):\n            # If the current element is the only one with a different value, return it\n            return arr[mid]\n\n        if mid < len(arr) - 1 and arr[mid] > arr[mid + 1]:\n            # If the current element is greater than the next element, the element that appears only once is in the first half\n            last = mid - 1\n        else:\n            # Otherwise, the element that appears only once is in the second half\n            first = mid + 1\n\n    # If there is no element that appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def search(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(1, n-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 120,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0]) * abs(list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = abs(list1[i][0]*list1[j][0]) + abs(list1[i][1]*list1[j][1])\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(list1[i]) * max(list1[j])\n            if abs(product) > abs(max_product):\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0]*lst[j][0]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        # calculate divisor sum\n        div_sum = sum(d for d in range(1, num) if num % d == 0)\n        \n        # calculate the other way around\n        div_sum_2 = sum(d for d in range(1, div_sum) if div_sum % d == 0)\n        \n        # check if the two divisor sums are equal and add to the sum\n        if div_sum_2 == num and num != div_sum:\n            amicable_sum += num\n    \n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Create a dictionary to store the sum of proper divisors for each number\n    divisor_sums = {}\n\n    # Calculate the sum of proper divisors for each number\n    for i in range(2, limit+1):\n        divisors = []\n        for j in range(1, i):\n            if i % j == 0:\n                divisors.append(j)\n        divisor_sum = sum(divisors)\n        if i == divisor_sum:\n            divisor_sums[i] = sum(divisors) + i\n\n    # Sum all the amicable numbers\n    amicable_sum = sum(divisor_sums.values())\n\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    def sum_proper_divisors(n):\n        \"\"\"\n        Compute the sum of proper divisors of a given number.\n        \"\"\"\n        divisors_sum = 1  # always include 1 in the sum\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                if n // i == i:  # if i is a proper divisor\n                    divisors_sum += i\n                else:  # if i is an improper divisor, also add the other factor\n                    divisors_sum += n // i\n        return divisors_sum\n\n    total = 0\n    for n in range(1, limit+1):\n        amicable = sum_proper_divisors(sum_proper_divisors(n))\n        if amicable != n and amicable < limit:\n            total += amicable\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def sum_of_divisors(n):\n    '''\n    Helper function to calculate the sum of divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum += i\n    return sum\n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for i in range(1, limit+1):\n        if i == sum_of_divisors(sum_of_divisors(i)):\n            total_sum += i\n    return total_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        # Compute the divisors of num\n        divisors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisors.append(i)\n        # Compute the sum of the divisors of num\n        divisor_sum = sum(divisors)\n        # Check if num is amicable with its sum of divisors\n        if divisor_sum != num and divisor_sum < num and divisor_sum > 0 and divisor_sum == num/divisor_sum:\n            amicable_sum += num\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def divisors(n):\n    '''\n    Returns the sum of proper divisors of a number n.\n    '''\n    divisor_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for num in range(1, limit+1):\n        if num == divisors(num) and num != divisors(divisors(num)):\n            total_sum += num\n    return total_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for num in range(1, limit+1):\n        divisors_sum = sum(get_divisors(num))\n        if divisors_sum == num and divisors_sum != num:\n            total_sum += num\n            total_sum += divisors_sum\n    return total_sum\n\n\ndef get_divisors(num):\n    '''\n    Returns a list of divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n"
    },
    {
        "number": 123,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def sum_divisors(num):\n    '''\n    Helper function to calculate the sum of all divisors of a given number.\n    '''\n    divisor_sum = 1\n    for i in range(2, int(num/2) + 1):\n        if num % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\ndef amicable_numbers_sum(limit):\n    '''\n    Function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        num_divisor_sum = sum_divisors(num)\n        if num != num_divisor_sum and num == sum_divisors(num_divisor_sum):\n            amicable_sum += num\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def divisor_sum(n):\n    '''\n    Returns the sum of proper divisors of a number n.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum\n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for i in range(1, limit + 1):\n        div_sum = divisor_sum(i)\n        if div_sum != i and divisor_sum(div_sum) == i:\n            total_sum += i\n    return total_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        # Compute the proper divisors of i\n        divisors_sum = sum(d for d in range(1, i//2+1) if i % d == 0)\n        # Compute the proper divisors of the proper divisors sum\n        amicable_divisors_sum = sum(d for d in range(1, divisors_sum//2+1) if divisors_sum % d == 0)\n        # Check if the amicable numbers are equal\n        if i == amicable_divisors_sum:\n            amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 124,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + b * 1j\n    angle = cmath.phase(c)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))\n"
    },
    {
        "number": 124,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.atan(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + b * 1j\n    angle = cmath.phase(c)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    return cmath.phase(z)"
    },
    {
        "number": 124,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def find_length(string):\n    max_diff = 0\n    num_zeros = 0\n    num_ones = 0\n    for char in string:\n        if char == '0':\n            num_zeros += 1\n        else:\n            num_ones += 1\n        diff = abs(num_zeros - num_ones)\n        max_diff = max(max_diff, diff)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to keep track of number of 0s and number of 1s\n    count_0 = 0\n    count_1 = 0\n    # Initialize variable to store maximum difference\n    max_diff = 0\n    # Loop through each character in the string\n    for char in string:\n        # If character is 0, increment count_0\n        if char == '0':\n            count_0 += 1\n        # If character is 1, increment count_1\n        elif char == '1':\n            count_1 += 1\n        # If count_0 is greater than count_1, calculate difference and update max_diff\n        if count_0 > count_1:\n            diff = count_0 - count_1\n            if diff > max_diff:\n                max_diff = diff\n        # If count_1 is greater than or equal to count_0, calculate difference and update max_diff\n        elif count_1 >= count_0:\n            diff = count_1 - count_0\n            if diff > max_diff:\n                max_diff = diff\n    # Return max_diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    \n    # Initialize variables to keep track of the number of 0s and 1s in the current substring\n    num_0s = 0\n    num_1s = 0\n    \n    # Initialize variables to keep track of the maximum difference seen so far\n    max_diff = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        if char == '0':\n            num_0s += 1\n        else:\n            num_1s += 1\n        \n        # Check if the current difference is greater than the max difference seen so far\n        if abs(num_0s - num_1s) > max_diff:\n            max_diff = abs(num_0s - num_1s)\n            \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize the variables for counting 0s and 1s\n    count_0s = 0\n    count_1s = 0\n    \n    # Initialize the variables for storing the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is 0, increment count_0s\n        if char == '0':\n            count_0s += 1\n        # If the character is 1, increment count_1s\n        elif char == '1':\n            count_1s += 1\n            \n        # Calculate the current difference between count_0s and count_1s\n        curr_diff = abs(count_0s - count_1s)\n        \n        # If the current difference is greater than the maximum difference, update the maximum difference\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n    \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def find_length(string):\n    # Initialize variables to keep track of number of 0s and 1s\n    count_0s, count_1s = 0, 0\n    # Initialize variables to keep track of the maximum difference seen so far\n    max_diff = 0\n    # Iterate over the string\n    for bit in string:\n        # If we encounter a 0, increment the count of 0s\n        if bit == '0':\n            count_0s += 1\n        # If we encounter a 1, increment the count of 1s\n        elif bit == '1':\n            count_1s += 1\n        # If we encounter a 0, we need to update the maximum difference\n        if bit == '0':\n            # If the current difference is greater than the maximum seen so far, update max_diff\n            if count_1s > 0 and abs(count_0s - count_1s) > max_diff:\n                max_diff = abs(count_0s - count_1s)\n        # If we encounter a 1, we don't need to update the maximum difference\n    # Return the maximum difference seen\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize count of 0s and 1s and max difference\n    count_0s = count_1s = max_diff = 0\n\n    # Loop through each character of the string\n    for char in string:\n        # If the character is 0, increment count of 0s\n        if char == '0':\n            count_0s += 1\n        # If the character is 1, increment count of 1s\n        else:\n            count_1s += 1\n\n        # Calculate the difference between count of 0s and count of 1s\n        diff = abs(count_0s - count_1s)\n\n        # If the difference is greater than the current max_diff, update max_diff\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def find_length(string):\n    # Initialize count of 0s and 1s to 0\n    count_0 = count_1 = 0\n    # Initialize maximum difference to 0\n    max_diff = 0\n    # Loop through each character in the string\n    for char in string:\n        # Increment count of 0s or 1s based on current character\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        # Calculate difference between counts of 0s and 1s\n        diff = abs(count_0 - count_1)\n        # Update maximum difference if current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    # Return maximum difference\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def find_length(string):\n    # Initialize variables for number of 0s and 1s, and maximum difference\n    num_zeros, num_ones, max_diff = 0, 0, 0\n    \n    # Iterate through characters in the string\n    for char in string:\n        # Update number of 0s and 1s based on current character\n        if char == '0':\n            num_zeros += 1\n        else:\n            num_ones += 1\n            \n        # Calculate the difference between number of 0s and number of 1s\n        diff = abs(num_zeros - num_ones)\n        \n        # Update maximum difference if new difference is greater than current max\n        max_diff = max(max_diff, diff)\n        \n    # Return the maximum difference\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n\n    count_0 = count_1 = max_diff = 0\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        max_diff = max(max_diff, abs(count_0 - count_1))\n\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count0 = 0\n    count1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        if count1 == 0:\n            continue\n        diff = abs(count0 - count1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the divisors of both the numbers\n    divisors_a = [i for i in range(1, a+1) if a % i == 0]\n    divisors_b = [i for i in range(1, b+1) if b % i == 0]\n    # Find the common divisors\n    common_divisors = list(set(divisors_a) & set(divisors_b))\n    # Calculate the sum of common divisors\n    sum_divisors = sum(common_divisors)\n    return sum_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the smaller number and set it as n\n    n = min(a, b)\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # If i is a divisor of both a and b, add it to the sum\n        if a % i == 0 and b % i == 0:\n            sum += i\n    # Return the sum of common divisors\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two positive integers as input and returns their sum of common divisors.\n    \"\"\"\n    # Find the list of common divisors\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    \n    # Sum the divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # Initialize the sum to zero\n    sum = 0\n    \n    # Find the smaller number\n    if a < b:\n        smaller = a\n    else:\n        smaller = b\n    \n    # Iterate over the numbers from 1 to the square root of the smaller number\n    for i in range(1, int(smaller ** 0.5) + 1):\n        \n        # Check if both numbers are divisible by i\n        if a % i == 0 and b % i == 0:\n            \n            # Add i to the sum\n            sum += i\n            \n            # Check if the other number is divisible by i and add it to the sum if necessary\n            if a // i != a and b // i != b:\n                sum += i\n    \n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def sum_of_common_divisors(a, b):\n    # function to find the sum of common divisors of two numbers\n    \n    # initialize sum\n    s = 0\n    \n    # iterate through all numbers between 1 and min(a, b)\n    for i in range(1, min(a, b) + 1):\n        \n        # check if i is a common divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            \n            # add i to the sum\n            s += i\n    \n    # return the sum\n    return s\n"
    },
    {
        "number": 126,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(a, b):\n    # Function to find the sum of common divisors of two numbers\n    def gcd(x, y):\n        # Function to find the greatest common divisor of two numbers using Euclid's algorithm\n        while y != 0:\n            x, y = y, x % y\n        return x\n\n    # Find the greatest common divisor of a and b\n    g = gcd(a, b)\n\n    # Find the sum of common divisors\n    sum = 0\n    for i in range(1, g+1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n\n    return sum"
    },
    {
        "number": 126,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # Get the list of divisors of a and b\n    divisors_a = [i for i in range(1, a+1) if a % i == 0]\n    divisors_b = [i for i in range(1, b+1) if b % i == 0]\n    \n    # Get the intersection of the two lists\n    common_divisors = set(divisors_a) & set(divisors_b)\n    \n    # Compute the sum of the common divisors\n    sum_common = sum(common_divisors)\n    \n    return sum_common\n"
    },
    {
        "number": 126,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 127,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()  # split the string into words\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    words = str.split() # split the string into words\n    long_words = [] # initialize an empty list to store long words\n    for word in words:\n        if len(word) > n: # check if the length of the word is greater than n\n            long_words.append(word) # add the long word to the list\n    return long_words # return the list of long words\n"
    },
    {
        "number": 128,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n"
    },
    {
        "number": 128,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n"
    },
    {
        "number": 128,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into a list of words\n    words = str.split()\n    # Create an empty list to store the long words\n    long_words_list = []\n    # Loop through the words and check if they are longer than n characters\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    # Return the list of long words\n    return long_words_list\n"
    },
    {
        "number": 128,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Split the input string into a list of words\n    words = str.split()\n\n    # Initialize an empty list to store the long words\n    long_words_list = []\n\n    # Loop through the list of words\n    for word in words:\n        # Check if the length of the word is greater than n\n        if len(word) > n:\n            # If it is, add it to the long_words_list\n            long_words_list.append(word)\n\n    # Return the long_words_list\n    return long_words_list"
    },
    {
        "number": 129,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize variables\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    sum_diag = 0\n    sum_rows = [0] * rows\n    sum_cols = [0] * cols\n    magic_sum = rows * (rows + 1) // 2\n\n    # Calculate the sum of each row and column\n    for i in range(rows):\n        for j in range(cols):\n            sum_rows[i] += my_matrix[i][j]\n            sum_cols[j] += my_matrix[i][j]\n\n    # Calculate the sum of the diagonal\n    for i in range(rows):\n        sum_diag += my_matrix[i][i]\n\n    # Check if the matrix is a magic square\n    if sum_rows == sum_cols and sum_diag == magic_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "7B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    if rows != cols:\n        return False\n    \n    # Initialize variables for checking the magic square property\n    sum_of_rows = [0] * rows\n    sum_of_cols = [0] * cols\n    sum_of_diag1 = sum_of_diag2 = 0\n    \n    # Compute the sum of each row, column, and diagonal\n    for i in range(rows):\n        for j in range(cols):\n            sum_of_rows[i] += my_matrix[i][j]\n            sum_of_cols[j] += my_matrix[i][j]\n            if i == j:\n                sum_of_diag1 += my_matrix[i][j]\n            if i == rows - j - 1:\n                sum_of_diag2 += my_matrix[i][j]\n    \n    # Check if the matrix is a magic square\n    if sum(sum_of_rows) == sum(sum_of_cols) == sum_of_diag1 == sum_of_diag2:\n        return True\n    else:\n        return False "
    },
    {
        "number": 129,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    if n < 3:\n        return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in my_matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [0] * n\n    for i in range(n):\n        for j in range(n):\n            col_sums[i] += my_matrix[j][i]\n            \n    # Calculate the sum of the diagonal\n    diag_sum = sum([my_matrix[i][i] for i in range(n)])\n    \n    # Calculate the sum of the anti-diagonal\n    anti_diag_sum = sum([my_matrix[i][n-i-1] for i in range(n)])\n    \n    # Check if the sums are all the same\n    if row_sums.count(row_sums[0]) == n and row_sums[0] == col_sums[0] == diag_sum == anti_diag_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    magic_sum = sum(my_matrix[0])\n    for i in range(1, rows):\n        current_sum = sum(my_matrix[i])\n        if current_sum != magic_sum:\n            return False\n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += my_matrix[i][j]\n        if col_sum != magic_sum:\n            return False\n    diag_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n    if diag_sum != magic_sum:\n        return False\n    diag_sum = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n    if diag_sum != magic_sum:\n        return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]\n\n    # Calculate the sum of the anti-diagonal elements\n    anti_diagonal_sum = my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(my_matrix[0]), sum(my_matrix[1]), sum(my_matrix[2])]\n    col_sums = [sum([my_matrix[0][i], my_matrix[1][i], my_matrix[2][i]]) for i in range(3)]\n\n    # Check if all sums are equal\n    if diagonal_sum == anti_diagonal_sum and row_sums == col_sums:\n        print(\"The matrix is a magic square.\")\n    else:\n        print(\"The matrix is not a magic square.\")\n"
    },
    {
        "number": 129,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    total = sum(my_matrix[0])\n    for i in range(n):\n        if sum(my_matrix[i]) != total:\n            return False\n        if sum(my_matrix[j][i] for j in range(n)) != total:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Get the dimensions of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Calculate the magic sum\n    magic_sum = 0\n    for i in range(rows):\n        magic_sum += sum(my_matrix[i])\n\n    # Calculate the middle value of the diagonal\n    middle_value = my_matrix[rows//2][cols//2]\n\n    # Check if the magic sum is equal to the middle value times the total number of values in the matrix\n    if magic_sum == middle_value * (rows * cols):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "7B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 129,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    \n    # Calculate the sum of all the elements in the matrix\n    total = sum([sum(row) for row in my_matrix])\n    \n    # Check if the sum is divisible by the matrix size\n    if total % n != 0:\n        return False\n    \n    # Calculate the sum of each row, column and diagonal\n    row_sums = [0] * n\n    col_sums = [0] * n\n    diag1_sum = diag2_sum = 0\n    \n    for i in range(n):\n        for j in range(n):\n            row_sums[i] += my_matrix[i][j]\n            col_sums[j] += my_matrix[i][j]\n            \n            if i == j:\n                diag1_sum += my_matrix[i][j]\n            if i == n - 1 - j:\n                diag2_sum += my_matrix[i][j]\n                \n    # Check if the row, column and diagonal sums are equal\n    for row_sum in row_sums:\n        if row_sum != total / n:\n            return False\n            \n    for col_sum in col_sums:\n        if col_sum != total / n:\n            return False\n            \n    if diag1_sum != total / n or diag2_sum != total / n:\n        return False\n        \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    total = sum(my_matrix[0])\n    magic_number = n * (n**2 + 1) / 2\n    if total != magic_number:\n        return False\n    for i in range(n):\n        row_total = sum(my_matrix[i])\n        col_total = sum(my_matrix[j][i] for j in range(n))\n        if row_total != col_total or row_total != total:\n            return False\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "7B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    for key in freq_dict:\n        if freq_dict[key] > max_freq:\n            max_freq = freq_dict[key]\n            max_item = key\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "7B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 130,
        "checkpoint": "7B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "7B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_item = None\n    max_count = 0\n\n    for item in nums:\n        freq_dict[item] += 1\n\n        if freq_dict[item] > max_count:\n            max_item = item\n            max_count = freq_dict[item]\n\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "7B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for num in nums:\n        if freq[num] == max_freq:\n            return num\n"
    },
    {
        "number": 130,
        "checkpoint": "7B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_count = 0\n    for num in nums:\n        if count[num] > max_count:\n            max_count = count[num]\n    return [key for key in count if count[key] == max_count]\n"
    },
    {
        "number": 130,
        "checkpoint": "7B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "7B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_item = None\n    max_count = 0\n    \n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_count:\n            max_count = freq_dict[num]\n            max_item = num\n            \n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "7B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_num = None\n    max_count = 0\n\n    for num in nums:\n        count[num] += 1\n        if count[num] > max_count:\n            max_count = count[num]\n            max_num = num\n\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "7B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create an empty dictionary to store the count of each item\n    counts = defaultdict(int)\n    \n    # Loop through the input list and update the count for each item\n    for num in nums:\n        counts[num] += 1\n    \n    # Find the item with the maximum count\n    max_item = None\n    max_count = 0\n    for item, count in counts.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n    \n    return max_item"
    }
]