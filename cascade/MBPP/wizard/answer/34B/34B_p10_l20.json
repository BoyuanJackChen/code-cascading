[
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find the shared elements from the given two tuples.\n    \"\"\"\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert tuples to lists to make it easier to manipulate\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Use set intersection to find shared elements\n    shared_elements = set(list1) & set(list2)\n\n    # Convert set back to tuple and return\n    return tuple(shared_elements)\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two tuples.\n    '''\n    return set(test_tup1) & set(test_tup2)"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two tuples.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two tuples.\n    '''\n    # Convert the tuples into sets to find the intersection\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets and convert it back to a tuple\n    result = tuple(set1.intersection(set2))\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to sets for easier comparison\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # use the intersection method to find the shared elements\n    shared_elements = set1.intersection(set2)\n    # convert the result back to a tuple and return it\n    return tuple(shared_elements)\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two tuples.\n    '''\n    common_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            common_elements.append(i)\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two tuples.\n    '''\n    # convert the tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # find the intersection of two sets and return as a list\n    return list(set1.intersection(set2))\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Returns True if the given number is not a prime number, and False otherwise.\n    '''\n    if n <= 1:  # 1 is not a prime number\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if it is not a prime number, otherwise it returns False.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Function to identify non-prime numbers\n    \"\"\"\n    if n < 2:\n        return True\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums) for i in range(n)], reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums) for i in range(n)], reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums) for i in range(n)], reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    result = [-hq.heappop(heap) for _ in range(len(heap))]\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of the given list\n    hq.heapify(nums)\n\n    # Initialize a list to store the n largest elements\n    largest_n = []\n\n    # Iterate through the first n elements of the min-heap and append them to the largest_n list\n    for i in range(n):\n        largest_n.append(hq.heappop(nums))\n\n    # Reverse the order of the largest_n list to get the final result in descending order\n    largest_n.reverse()\n\n    return largest_n\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums)[::-1] for i in range(n)], reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # use a min heap to store the n largest integers\n    min_heap = []\n    for num in nums:\n        if len(min_heap) < n:\n            hq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                hq.heappushpop(min_heap, num)\n    \n    # return the n largest integers in descending order\n    return sorted(min_heap, reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums) for i in range(n)], reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of the first n elements of the input list\n    heap = nums[:n]\n    hq.heapify(heap)\n\n    # iterate over the rest of the input list and update the heap as necessary\n    for num in nums[n:]:\n        if num > heap[0]:\n            hq.heapreplace(heap, num)\n\n    # return the n largest elements in descending order\n    return sorted(heap, reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num) # negate the numbers to get a max-heap\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-hq.heappop(heap) for _ in range(len(heap))] # negate the numbers back to get the original values"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x <= 0:\n        return False\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Returns True if x is a power of two, False otherwise.\n    '''\n    if x <= 0:\n        return False\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the given number is a power of 2 or not.\n    '''\n    if x == 0:\n        return False\n    while x != 1:\n        if x % 2 != 0:\n            return False\n        x = x // 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the number is a power of two or not.\n    '''\n    if x == 0:\n        return False\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0:\n        return False\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x != 0 and (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    if x == 0:\n        return False\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0)\n    required to get the same string.\n    '''\n\n    # concatenating the string with itself\n    temp = str + str\n\n    # finding the index of the string in the concatenated string\n    index = temp.find(str)\n\n    # returning the number of rotations required\n    return index\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    str = str + str\n    for i in range(n):\n        if str[i:i+n] == str[n:n+n]:\n            return n - i\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_Rotations(str):  \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    for i in range(str_len):\n        if str[i:] + str[:i] == str:\n            return i\n    return None\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str == str[i:] + str[:i]:\n            return i\n    return n\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return None\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:]+str[:i] == str:\n            return i\n    return n\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n-1):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return None\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return None\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1)  # remove first occurrence\n        s = s[::-1].replace(ch, '', 1)[::-1]  # remove last occurrence\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Find the index of the first occurrence of the character\n    first_index = s.find(ch)\n\n    # Find the index of the last occurrence of the character\n    last_index = s.rfind(ch)\n\n    # If the character is found in the string, remove it from the string\n    if first_index != -1 and last_index != -1:\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character is present in the string or not\n    if ch in s:\n        # find the index of first and last occurrence of the character\n        first_index = s.find(ch)\n        last_index = s.rfind(ch)\n        \n        # remove the first and last occurrence of the character\n        s = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n        \n        return s\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s[:-1]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1 or last_occurrence == -1:\n        return s\n    elif first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[last_occurrence+1:]\n    else:\n        return s[:first_occurrence] + s[last_occurrence+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        if first_occ == last_occ:\n            s = s.replace(ch, '', 1)\n        else:\n            s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) > 1:\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        if first_occ == last_occ:\n            s = s.replace(ch, '', 1)\n        else:\n            s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    elif s.count(ch) == 1:\n        s = s.replace(ch, '', 1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        if first_occ == last_occ:\n            s = s.replace(ch, '', 1)\n        else:\n            s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # convert the string to list\n    s = list(s)\n    # remove first occurrence of the character\n    if ch in s:\n        s.remove(ch)\n    # remove last occurrence of the character\n    if ch in s:\n        s.remove(ch)\n    # convert the list back to string\n    s = ''.join(s)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first = s.find(ch)\n        last = s.rfind(ch)\n        if first == last:\n            return s.replace(ch, '', 1)\n        else:\n            return s[:first] + s[first+1:last] + s[last+1:]\n    else:\n        return s\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row and store it in a list\n    row_sums = [sum(row) for row in M]\n    # sort the row sums in ascending order\n    sorted_row_sums = sorted(row_sums)\n    # create an empty sorted matrix\n    sorted_matrix = [[0 for _ in range(len(M[0]))] for _ in range(len(M))]\n    # iterate over each row in the sorted row sums list\n    for i, sum_ in enumerate(sorted_row_sums):\n        # find the index of the row with the current sum in the original matrix\n        row_index = row_sums.index(sum_)\n        # add the row with the current sum to the sorted matrix\n        sorted_matrix[i] = M[row_index]\n    # return the sorted matrix\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n    sorted_indices = sorted(range(len(row_sums)), key=lambda k: row_sums[k])\n    sorted_matrix = [M[i] for i in sorted_indices]\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row and store in a tuple\n    row_sums = [(sum(row), i) for i, row in enumerate(M)]\n    # sort the row sums in ascending order\n    sorted_sums = sorted(row_sums)\n    # create a new matrix with the rows sorted based on the sorted sums\n    sorted_matrix = [M[i] for _, i in sorted_sums]\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n    sorted_indices = sorted(range(len(row_sums)), key=lambda k: row_sums[k])\n    sorted_matrix = []\n    for i in sorted_indices:\n        sorted_matrix.append(M[i])\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row and store it in a list\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the row sums in ascending order\n    sorted_sums = sorted(row_sums)\n    \n    # Create a dictionary to map each row to its sorted sum\n    row_to_sum = dict(zip(M, sorted_sums))\n    \n    # Sort the rows of the matrix according to the sorted sums\n    sorted_rows = sorted(M, key=lambda row: row_to_sum[row])\n    \n    # Return the sorted matrix\n    return sorted_rows\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    # sort the row sums in ascending order\n    row_sums.sort()\n    # create a new matrix with the rows sorted in ascending order based on their sum\n    sorted_matrix = []\n    for row_sum in row_sums:\n        # find the index of the row with the current sum in the original matrix\n        index = row_sums.index(row_sum)\n        # add the row to the new matrix\n        sorted_matrix.append(M[index])\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row and store in a list\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the row_sums list in ascending order\n    row_sums.sort()\n    \n    # Create a new sorted matrix\n    sorted_matrix = []\n    for row_sum in row_sums:\n        # Find the original row that corresponds to the current row_sum\n        row = [row for row in M if sum(row) == row_sum][0]\n        sorted_matrix.append(row)\n    \n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row and store it in a list\n    row_sums = [sum(row) for row in M]\n    # Sort the row sums and indices in ascending order\n    sorted_sums = sorted(zip(row_sums, range(len(row_sums))))\n    # Sort the matrix according to the sorted row sums\n    sorted_matrix = [[M[j] for (s, j) in sorted_sums] for i in range(len(M[0]))]\n    # Transpose the sorted matrix to get the final result\n    return list(map(list, zip(*sorted_matrix)))\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    if rows < 2:\n        return M\n    sums = [sum(row) for row in M]\n    sorted_sums = sorted(sums)\n    sorted_M = []\n    for s in sorted_sums:\n        i = sums.index(s)\n        sorted_M.append(M[i])\n    return sorted_M\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    sorted_indices = sorted(range(len(row_sums)), key=lambda k: row_sums[k])\n    sorted_matrix = []\n    for i in sorted_indices:\n        sorted_matrix.append(M[i])\n    return sorted_matrix\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    print(f\"The volume of the triangular prism is {volume}\")\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function calculates the volume of a triangular prism using the formula:\n    Volume = (1/2) * base * height * height\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('^[a-z]+(_[a-z]+)*$', text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+(_[a-z]+)+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_')\n    return pattern.search(text) is not None\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def remove_chars(s1, s2):\n    # Create a set of characters to remove from s1\n    remove_set = set(s2)\n\n    # Convert s1 to a list and remove characters from the remove_set\n    s1_list = list(s1)\n    s1_list = [c for c in s1_list if c not in remove_set]\n\n    # Convert the list back to a string and return it\n    return ''.join(s1_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def remove_chars(str1, str2):\n    \n    # Create a hash set for characters of str2\n    char_set = [0] * NO_OF_CHARS\n    for i in range(len(str2)):\n        char_set[ord(str2[i])] = 1\n    \n    # Traverse through str1 and remove characters which are present in char_set\n    result = []\n    for i in range(len(str1)):\n        if char_set[ord(str1[i])] == 0:\n            result.append(str1[i])\n    \n    # Return the resultant string\n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    freq = [0] * NO_OF_CHARS\n    for i in string:\n        freq[ord(i)] += 1\n    return freq\n\ndef remove_chars(str1, str2):\n    freq1 = str_to_list(str1)\n    freq2 = str_to_list(str2)\n    for i in range(NO_OF_CHARS):\n        freq1[i] -= freq2[i]\n    result = \"\"\n    for i in range(len(str1)):\n        if freq1[ord(str1[i])] > 0:\n            result += str1[i]\n            freq1[ord(str1[i])] -= 1\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Convert string to list of characters\n    '''\n    return [ch for ch in string]\n\ndef remove_chars(str1, str2):\n    '''\n    Remove characters from the first string which are present in the second string\n    '''\n    # convert the strings to lists of characters\n    list1 = str_to_list(str1)\n    list2 = str_to_list(str2)\n\n    # create a dictionary to store the count of each character in str2\n    char_count = {}\n    for ch in list2:\n        if ch in char_count:\n            char_count[ch] += 1\n        else:\n            char_count[ch] = 1\n\n    # remove the characters from str1 that are present in str2\n    for i in range(len(list1)):\n        if list1[i] in char_count:\n            list1[i] = ''\n            char_count[list1[i]] -= 1\n            if char_count[list1[i]] == 0:\n                del char_count[list1[i]]\n\n    # convert the list back to a string\n    return ''.join(list1)"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list to store characters to be removed\n    chars_to_remove = []\n    \n    # Loop through the second string to add each character to the list\n    for char in string:\n        if char not in chars_to_remove:\n            chars_to_remove.append(char)\n    \n    # Create a list to store the result\n    result = []\n    \n    # Loop through the first string and add each character to the result list\n    # if it is not in the list of characters to be removed\n    for char in string:\n        if char not in chars_to_remove:\n            result.append(char)\n    \n    # Return the result list as a string\n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def remove_chars(str1, str2):\n    \"\"\"\n    This function removes all the characters from str1 which are present in str2.\n    \"\"\"\n    # Create a boolean list to mark the characters present in str2\n    present = [False] * NO_OF_CHARS\n    \n    # Mark the characters present in str2 as True in the boolean list\n    for char in str2:\n        present[ord(char)] = True\n        \n    # Remove all the characters from str1 which are marked as True in the boolean list\n    new_str = \"\"\n    for char in str1:\n        if not present[ord(char)]:\n            new_str += char\n    \n    return new_str"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def remove_chars_second_from_first(first_string, second_string):\n    \"\"\"\n    This function takes two strings as input and removes all the characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the second string to a set for O(1) access time\n    set_second_string = set(second_string)\n    \n    # Create an empty list to store the filtered characters\n    filtered_chars = []\n    \n    # Iterate through each character in the first string\n    for char in first_string:\n        # If the character is not present in the second string, add it to the filtered_chars list\n        if char not in set_second_string:\n            filtered_chars.append(char)\n    \n    # Join the filtered_chars list to form a string and return it\n    return ''.join(filtered_chars)\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def remove_chars(str1, str2):\n    # Create a set for faster lookups\n    str2_set = set(str2)\n\n    # Create an empty list to store the filtered characters\n    result = []\n\n    # Loop through each character of str1\n    for char in str1:\n        # If the character is not present in str2_set, add it to the result list\n        if char not in str2_set:\n            result.append(char)\n\n    # Return the result list as a string\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def remove_chars_from_first_str(first_str, second_str):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    \n    # Convert the second string into a set for faster search\n    set_second_str = set(second_str)\n\n    # Create an empty list to store the filtered characters\n    filtered_chars = []\n\n    # Iterate through each character in the first string\n    for char in first_str:\n        # If the character is not present in the set of the second string, add it to the filtered list\n        if char not in set_second_str:\n            filtered_chars.append(char)\n\n    # Join the filtered characters to form a string and return it\n    return ''.join(filtered_chars)\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def remove_chars(s1, s2):\n    char_set = set(s2)\n    result = []\n    for c in s1:\n        if c not in char_set:\n            result.append(c)\n    return ''.join(result)"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums)) != len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set(arraynums)\n    return len(num_set) != len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_nums = set()\n    \n    # Iterate through the array\n    for num in arraynums:\n        # If the number is already in the set, return True (i.e. a duplicate was found)\n        if num in unique_nums:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_nums.add(num)\n    \n    # If no duplicate was found, return False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty set to store unique elements\n    unique_set = set()\n    \n    # loop through each element in the array\n    for num in arraynums:\n        # if the number is already in the set, return True since it is a duplicate\n        if num in unique_set:\n            return True\n        # otherwise, add the number to the set\n        else:\n            unique_set.add(num)\n    \n    # if no duplicates are found, return False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set from the input array\n    num_set = set(arraynums)\n    # If the length of the set is less than the length of the input array, there were duplicates\n    if len(num_set) < len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty set to store unique elements\n    unique_nums = set()\n    # Loop through each number in the array\n    for num in arraynums:\n        # If the number is already in the set, return True (indicating a duplicate)\n        if num in unique_nums:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_nums.add(num)\n    # If the loop completes without finding any duplicates, return False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set(arraynums)\n    if len(num_set) == len(arraynums):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set(arraynums)\n    if len(num_set) == len(arraynums):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set(arraynums)\n    if len(num_set) != len(arraynums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return True\n    i = 1\n    while i <= x:\n        if x % i == 0:\n            x //= i\n        else:\n            i += 1\n    return x == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x < 1:\n        return False\n    else:\n        for i in range(2, int(x**0.5)+1):\n            if x % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Compute x^x\n    xx = x ** x\n    # Convert x^x to a string\n    xx_str = str(xx)\n    # Initialize the sum of the digits to 0\n    digit_sum = 0\n    # Iterate over the digits in x^x\n    for digit in xx_str:\n        # Convert the digit to an integer and add it to the digit sum\n        digit_sum += int(digit)\n    # Check if the digit sum is a square number\n    sqrt_digit_sum = int(digit_sum ** 0.5)\n    return sqrt_digit_sum ** 2 == digit_sum\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is Woodall or not.\n    '''\n    if x < 2:\n        return False\n\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    This function checks whether the given number is a woodall number or not.\n    '''\n    if x < 0:\n        return False\n    else:\n        for i in range(2, int(x**0.5)+1):\n            if x % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        for i in range(1, x):\n            if x % i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    A function to check if the given number is Woodall or not.\n    Returns True if the given number is Woodall, else False.\n    \"\"\"\n    if x < 2:\n        return False\n    \n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    \n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    return x == sum(d ** 5 for d in digits)\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # converting the number to string\n    num_str = str(num)\n    # reversing the string\n    rev_num_str = num_str[::-1]\n    # converting the reversed string back to integer\n    rev_num = int(rev_num_str)\n    # checking if the given number is one less than twice its reverse\n    if num == (rev_num * 2) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # converting number to string and then reversing it\n    num_str = str(num)\n    num_rev = int(num_str[::-1])\n\n    # checking if the number is one less than twice its reverse\n    if num == abs(num_rev*2-num-1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string to reverse it\n    rev_num = str(num)[::-1]\n    # Convert the reversed number back to an integer\n    rev_num = int(rev_num)\n    # Check if the number is one less than twice the reversed number\n    if num == rev_num * 2 - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp != 0:\n        rev_num = rev_num*10 + temp%10\n        temp = temp//10\n    if num == rev_num*2 - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to string and reverse it\n    reverse = str(num)[::-1]\n    # Convert the reversed string back to integer\n    reverse_num = int(reverse)\n    # Check if the number is one less than twice its reverse\n    if num == reverse_num * 2 - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reverse_num = int(str(num)[::-1])\n    # Check if the number is one less than twice the reverse\n    return num == 2*reverse_num - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string, reverse it, and convert it back to an integer\n    reverse_num = int(str(num)[::-1])\n\n    # Check if the number is one less than twice the reverse\n    if num == (2 * reverse_num) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def rev(num):\n    # Convert the number to string and reverse it\n    rev_num = str(num)[::-1]\n    # Convert the reversed string back to integer\n    rev_num = int(rev_num)\n    # Check if the number is one less than twice its reverse\n    if num == 2 * rev_num - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Reverse the string\n    rev_str = num_str[::-1]\n\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n\n    # Check if the number is one less than twice its reverse\n    if num == rev_num * 2 - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert num to string and reverse it\n    reverse_num = int(str(num)[::-1])\n    \n    # check if num is one less than twice the reverse_num\n    if num == (reverse_num * 2) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Convert the sorted array to a string\n    max_num = ''.join([str(i) for i in arr])\n\n    return int(max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = ''.join(str(i) for i in arr)\n    return int(max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # convert the array of digits to an integer\n    num = int(''.join([str(digit) for digit in arr]))\n    \n    # check if the number is a palindrome (i.e. it reads the same backwards as forwards)\n    if str(num) == str(num)[::-1]:\n        return num\n    else:\n        # if it is not a palindrome, we can try to make it one by swapping digits\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                # create two copies of the array and swap the digits at positions i and j\n                arr1 = arr.copy()\n                arr1[i], arr1[j] = arr1[j], arr1[i]\n                arr2 = arr.copy()\n                arr2[i], arr2[j] = arr2[j], arr2[i]\n                \n                # convert the two copies of the array to integers\n                num1 = int(''.join([str(digit) for digit in arr1]))\n                num2 = int(''.join([str(digit) for digit in arr2]))\n                \n                # check if either of the two numbers is a palindrome\n                if str(num1) == str(num1)[::-1]:\n                    return num1\n                elif str(num2) == str(num2)[::-1]:\n                    return num2\n        \n        # if no palindromes can be formed, return None\n        return None\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list in descending order\n    arr.sort(reverse=True)\n\n    # Convert the sorted list to a string\n    num_str = \"\".join([str(i) for i in arr])\n\n    # Convert the string to an integer and return it\n    return int(num_str)\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = ''.join(map(str, arr))\n    return int(max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = ''.join(map(str, arr))\n    return int(max_num)"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = ''.join([str(x) for x in arr])\n    return int(max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = ''.join(str(x) for x in arr)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # convert the array to a string\n    num_str = ''.join(map(str, arr))\n    # convert the string to a set to remove duplicates\n    num_set = set(num_str)\n    # convert the set back to a list\n    num_list = list(num_set)\n    # sort the list in descending order\n    num_list.sort(reverse=True)\n    # join the list to form a string\n    max_num = ''.join(num_list)\n    # convert the string back to an integer\n    max_num = int(max_num)\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check if the signs of the two numbers are opposite\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    if x*y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    else:\n        return (n*(2+n))\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 2)"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-2)\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    return n * (3 * n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = n * (3 * n - 1) // 2\n    return octagonal\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n*(2*n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function finds the nth octagonal number.\n    \"\"\"\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    d = defaultdict(int)\n    d[0] = 1\n    ans = 0\n    for i in range(n):\n        if s[i].isdigit():\n            d[i+1] = d[i]*10 + int(s[i])\n            if d[i+1] == i+1:\n                ans += 1\n        else:\n            d[i+1] = d[i]\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    \n    # iterate through all possible substrings\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            sum_digits = sum(int(digit) for digit in substring)\n            \n            # if sum of digits is equal to the length of substring, increment count\n            if sum_digits == len(substring):\n                count += 1\n                \n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            sub_str = s[i:j+1]\n            digit_sum = sum(int(digit) for digit in sub_str)\n            \n            if digit_sum == len(sub_str):\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_Substrings(s):\n    n = len(s)\n    dp = [0] * n\n\n    for i in range(n):\n        if s[i].isdigit():\n            dp[i] = int(s[i])\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i].isdigit() and s[j].isdigit():\n                dp[i] += dp[j]\n\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if dp[i] == j-i+1:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += int(s[j])\n            if current_sum == j - i + 1:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sub_str = s[i:j+1]\n            if sum(int(d) for d in sub_str) == len(sub_str):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_Substrings(s):\n    n = len(s)\n    d = defaultdict(int)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if sum(int(d) for d in sub) == len(sub):\n                d[sub] += 1\n    return len(d)\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if sum(int(d) for d in sub) == len(sub):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = s[i:j+1]\n            sum_of_digits = sum(int(ch) for ch in sub_str if ch.isdigit())\n            if sum_of_digits == len(sub_str):\n                count += 1\n    return count\n\nif __name__ == '__main__':\n    s = input(\"Enter a string: \")\n    result = count_Substrings(s)\n    print(\"Number of substrings with the sum of digits equal to their length:\", result)"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(c) for c in s[i:j+1]) == j - i + 1:\n                count += 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list xs as input and returns the smallest number in the list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize the smallest variable to be the first element of the list\n    smallest = xs[0]\n    \n    # Loop through the list starting from the second element\n    for num in xs[1:]:\n        # If the current element is smaller than the smallest variable, update smallest variable\n        if num < smallest:\n            smallest = num\n            \n    # Return the smallest variable\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for num in xs:\n        if smallest is None or num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    max_diff = test_list[1][1] - test_list[0][0]\n    min_element = test_list[0][0]\n    for i in range(1, len(test_list)):\n        diff = test_list[i][1] - min_element\n        if diff > max_diff:\n            max_diff = diff\n        if test_list[i][0] < min_element:\n            min_element = test_list[i][0]\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    max_diff = test_list[1][1] - test_list[0][0]\n    for i in range(1, len(test_list)):\n        diff = test_list[i][1] - test_list[i-1][0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        return None\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i]-test_list[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    else:\n        max_diff = test_list[1] - test_list[0]\n        for i in range(2, len(test_list)):\n            diff = test_list[i] - test_list[i-1]\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        return None\n    max_diff = test_list[1][0] - test_list[0][1]\n    for i in range(1, len(test_list)):\n        diff = test_list[i][0] - test_list[i-1][1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Initialize the maximum difference variable\n    max_diff = test_list[-1][1] - test_list[0][0]\n    \n    # Loop through the list and calculate the difference between adjacent pairs\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1][1] - test_list[i][0]\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    max_diff = test_list[1][1] - test_list[0][1]\n    for i in range(1, len(test_list)):\n        diff = test_list[i][1] - test_list[i-1][1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Sort a list of tuples by the second value of each tuple.\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if data_list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: check if the first element of data_list is a list or not\n    if isinstance(data_list[0], list):\n        # If it is a list, call recursive_list_sum on the sublist and add the result to the sum of the rest of data_list\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        # If it is not a list, add it to the sum of the rest of data_list\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: check if the first element is a list\n    if isinstance(data_list[0], list):\n        # If it is, recursively call the function on that sublist\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        # If it is not a list, return the first element plus the recursive sum of the rest of the list\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for item in data_list:\n        if isinstance(item, list):\n            result += recursive_list_sum(item)\n        else:\n            result += item\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Flatten a list and sum all of its elements.\n    \"\"\"\n    total = 0\n    for elem in data_list:\n        if isinstance(elem, list):\n            total += recursive_list_sum(elem)\n        else:\n            total += elem\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if type(element) == list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # If the first element of the input list is a list, call the function recursively with that list as the input\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    \n    # If the first element is not a list, add it to the sum and call the function recursively with the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    Counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def bell_number(n):\n    bell = [[0] * (n+1) for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def bell_number(n):\n    bell = [[0]*n for i in range(n)]\n    bell[0][0] = 1\n    for i in range(1, n):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n-1][n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    \n    return bell[n][0]\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def bell_number(n):\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from scipy.special import bell\n\ndef bell_number(n):\n    \"\"\"\n    This function calculates the Bell number of the given integer n.\n    \"\"\"\n    return bell(n)\n\ndef partition_bell_numbers(n):\n    \"\"\"\n    This function partitions the set of Bell numbers up to the nth number.\n    \"\"\"\n    bell_numbers = []\n    for i in range(n+1):\n        bell_numbers.append(bell_number(i))\n    return bell_numbers\n\ndef find_number_of_ways(n):\n    \"\"\"\n    This function finds the number of ways to partition the set of Bell numbers up to the nth number.\n    \"\"\"\n    bell_numbers = partition_bell_numbers(n)\n    num_ways = []\n    for i in range(n+1):\n        num_ways.append(sum(bell_numbers[:i+1]))\n    return num_ways\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The number of ways to partition the set of Bell numbers up to the nth number is:\", find_number_of_ways(n))\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def bell_number(n):\n    bell = [[0]*n for i in range(n)]  # create a 2D array of zeros\n\n    bell[0][0] = 1  # set the first value to 1\n\n    for i in range(1, n):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n        bell[i][i] = bell[i-1][i-1] + bell[i][i-1]\n\n    return bell[n-1][n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def bell_number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def bell_number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def bell_number(n):\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + 1\n    return dp[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def bell_number(n):\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = 1\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_Monotonic(A):  \n    \"\"\"\n    Check whether the given array is monotonic or not.\n    \"\"\"\n    # Check for increasing monotonicity\n    is_increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    \n    # Check for decreasing monotonicity\n    is_decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    \n    # Return True if either increasing or decreasing, else False\n    return is_increasing or is_decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_Monotonic(A):  \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 0 or len(A) == 1:\n        return True\n    \n    # Check if the array is strictly increasing or decreasing\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            is_increasing = False\n        elif A[i] < A[i+1]:\n            is_decreasing = False\n            \n    return is_increasing or is_decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if not A:\n        return True\n    \n    # Check if array is increasing\n    increasing = True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            increasing = False\n            break\n    \n    if increasing:\n        return True\n    \n    # Check if array is decreasing\n    decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            decreasing = False\n            break\n    \n    return decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Initialize variables\n    is_non_increasing = True\n    is_non_decreasing = True\n\n    # Loop through the array and check if it is non-increasing or non-decreasing\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            is_non_increasing = False\n        elif A[i] < A[i-1]:\n            is_non_decreasing = False\n\n    # Check if the array is monotonic or not\n    if is_non_increasing or is_non_decreasing:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Initialize variables to keep track of increasing and decreasing sequences\n    increasing = True\n    decreasing = True\n    \n    # Check for increasing and decreasing sequences\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        if A[i] < A[i+1]:\n            decreasing = False\n            \n    # Return True if either increasing or decreasing sequence is found, else False\n    return increasing or decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_non_increasing = True\n    is_non_decreasing = True\n\n    for i in range(len(A) - 1):\n        if A[i] < A[i + 1]:\n            is_non_decreasing = False\n        if A[i] > A[i + 1]:\n            is_non_increasing = False\n\n    return is_non_increasing or is_non_decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # check if all elements in the array are equal\n    if len(set(A)) == 1:\n        return True\n    \n    # check if array is strictly increasing\n    if all(A[i] < A[i+1] for i in range(len(A)-1)):\n        return True\n    \n    # check if array is strictly decreasing\n    if all(A[i] > A[i+1] for i in range(len(A)-1)):\n        return True\n    \n    # if neither increasing nor decreasing, return False\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if array is increasing or decreasing\n    increasing = decreasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        if A[i] < A[i+1]:\n            decreasing = False\n    \n    # Return True if array is monotonic\n    return increasing or decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    is_increasing = A[0] <= A[1]\n    is_decreasing = A[0] >= A[1]\n    \n    for i in range(2, len(A)):\n        if is_increasing and A[i] < A[i-1]:\n            return False\n        elif is_decreasing and A[i] > A[i-1]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Returns True if list 'l' contains sublist 's'\n    \"\"\"\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(s)\n    for i in range(len(l) - n + 1):\n        if l[i:i+n] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(s)\n    for i in range(len(l)-n+1):\n        if l[i:i+n] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sublist = ''.join([str(i) for i in s])\n    list_str = ''.join([str(j) for j in l])\n    if sublist in list_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(s)\n    for i in range(len(l) - n + 1):\n        if l[i:i+n] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_equal_tuple(input_list):\n    \"\"\"\n    Given a list of tuples, this function returns True if all tuples have equal length, otherwise False.\n    \"\"\"\n    if not input_list:\n        return False\n\n    tuple_length = len(input_list[0])\n\n    for tup in input_list:\n        if len(tup) != tuple_length:\n            return False\n\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the input is a tuple or not\n    if not isinstance(Input, tuple):\n        print(\"Input is not a tuple\")\n        return False\n\n    # Get the length of the first tuple in the input tuple\n    first_length = len(Input[0])\n\n    # Iterate through the tuple and check if all the tuples have the same length as the first tuple\n    for i in range(1, len(Input)):\n        if len(Input[i]) != first_length:\n            return False\n\n    # If all the tuples have the same length, return True\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if input is a tuple or not\n    if isinstance(Input, tuple):\n        # Get the length of the first tuple in the input\n        length = len(Input[0])\n        # Loop through the rest of the tuples in the input\n        for i in range(1, len(Input)):\n            # If the length of the current tuple is not equal to the length of the first tuple, return False\n            if len(Input[i]) != length:\n                return False\n        # If all the tuples have the same length, return True\n        return True\n    else:\n        return \"Input is not a tuple\"\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(len(tup) for tup in Input)) > 1:\n        return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Create an empty list to store the length of each tuple\n    lengths = []\n    # Iterate over the input tuples and append their length to the list\n    for tup in Input:\n        lengths.append(len(tup))\n    # Check if all the lengths in the list are the same\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Returns True if all tuples in the input have equal length, False otherwise.\n    \"\"\"\n    tuple_length = None\n    for t in Input:\n        if tuple_length is None:\n            tuple_length = len(t)\n        elif len(t) != tuple_length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Get the length of the first tuple in the input list\n    length = len(Input[0])\n    \n    # Check if all the tuples have the same length as the first tuple\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    \n    # If all the tuples have the same length, return True\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    first_length = len(Input[0])\n    for tup in Input:\n        if len(tup) != first_length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initialize a variable to store the length of the first tuple\n    first_length = len(Input[0])\n    # Check if all tuples have the same length as the first tuple\n    for i in range(1, len(Input)):\n        if len(Input[i]) != first_length:\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap/shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    :param nums: A list of elements to be sorted.\n    :return: A sorted list of elements.\n    \"\"\"\n    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap <= 1:\n            sorted = True\n            gap = 1\n\n        i = 0\n        j = i + gap\n\n        while j < n:\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                sorted = False\n            i += 1\n            j += 1\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    done = False\n\n    while gap > 1 or not done:\n        gap = max(1, int(gap / 1.25))\n        done = True\n        for i in range(n - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                done = False\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    is_sorted = False\n\n    while not is_sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            is_sorted = True\n            gap = 1\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                is_sorted = False\n            i += 1\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n\n        for i in range(0, n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap/shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n/2)+1):\n        j = n - i**2\n        if int(j**0.5)**2 == j:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        j = n - i\n        if i**2 - j**2 == n:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    j = n\n    while i <= j:\n        diff = i * i - j * j\n        if diff == n:\n            return True\n        elif diff < n:\n            i += 1\n        else:\n            j -= 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        j = n - i\n        if i**2 + j**2 == n:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        j = n - i**2\n        if j < 0:\n            continue\n        if int(j**0.5)**2 == j:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    while i * i <= n:\n        j = (n - i * i) ** 0.5\n        if int(j) ** 2 == n - i * i:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        j = n - i\n        if (i**2 - j**2 == n):\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n+1):\n        a = i*i\n        if a <= n:\n            b = n - a\n            if b > 0 and (int(b**0.5))**2 == b:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    for i in range(int(n**0.5)+1):\n        j = n - i*i\n        if j < 0:\n            return False\n        if (int(j**0.5))**2 == j:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    for i in range(int(n**0.5)+1):\n        j = n - i**2\n        if j >= 0 and int(j**0.5)**2 == j:\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Check if both colors and patterns have the same length\n    if len(colors) != len(patterns):\n        return False\n    # Create a dictionary to store the pattern sequence\n    pattern_dict = {}\n    for i in range(len(patterns)):\n        if patterns[i] in pattern_dict:\n            if pattern_dict[patterns[i]] != colors[i]:\n                return False\n        else:\n            pattern_dict[patterns[i]] = colors[i]\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(colors)):\n        if colors[i] != patterns[i % len(patterns)]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n\n    pattern_dict = {}\n    for i, pattern in enumerate(patterns):\n        if pattern not in pattern_dict:\n            pattern_dict[pattern] = colors[i]\n        else:\n            if pattern_dict[pattern] != colors[i]:\n                return False\n\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Returns True if the given colors follow the sequence given in the patterns array.\n    \"\"\"\n    if len(colors) != len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a dictionary to store the pattern of colors\n    pattern_dict = {}\n    for i, pattern in enumerate(patterns):\n        pattern_dict[pattern] = colors[i]\n    \n    # Check if the colors follow the pattern\n    for i in range(len(patterns)):\n        if pattern_dict[patterns[i]] != colors[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Returns True if the sequence of colors follows the sequence of patterns, and False otherwise.\n    \"\"\"\n    if len(colors) != len(patterns):\n        return False\n    \n    for i in range(len(patterns)):\n        if patterns[i] == \"R\":\n            if colors[i] != \"red\":\n                return False\n        elif patterns[i] == \"G\":\n            if colors[i] != \"green\":\n                return False\n        elif patterns[i] == \"B\":\n            if colors[i] != \"blue\":\n                return False\n        else:\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tpl in test_list:\n        if all(x % K == 0 for x in tpl):\n            result.append(tpl)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tpl in test_list:\n        if all(x % K == 0 for x in tpl):\n            result.append(tpl)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        flag = True\n        for num in tup:\n            if num % K != 0:\n                flag = False\n                break\n        if flag:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_Diff(n):  \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if it is divisible by 11,\n    otherwise it returns False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    \"\"\"\n    This function takes a number as input and returns True if it is divisible by 11, otherwise False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if the length of the string is odd, False otherwise.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"The length of the word '{s}' is even.\")\n    else:\n        print(f\"The length of the word '{s}' is odd.\")\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tn = (n * (n + 1) * (n + 2)) // 6\n    return tn\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function returns the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def get_char(strr):\n    \"\"\"\n    Finds the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Convert the string to a list of ASCII codes\n    ascii_codes = [ord(c) for c in strr]\n    \n    # Compute the sum of the ASCII codes modulo 26\n    sum_mod_26 = sum(ascii_codes) % 26\n    \n    # Convert the sum back to a character and return it\n    return chr(sum_mod_26 % 26 + ord('A'))\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    # Initialize the sum of ASCII values to 0\n    sum_ascii = 0\n\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum_ascii += ord(char)\n\n    # Calculate the resultant character by taking modulo 26\n    result_char = sum_ascii % 26\n\n    # Convert the resultant ASCII value to the corresponding character\n    result_char = chr(result_char)\n\n    return result_char\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # initialize the sum of ASCII values to zero\n    sum_ascii = 0\n    \n    # iterate over each character in the string\n    for char in strr:\n        # add the ASCII value of the character to the sum\n        sum_ascii += ord(char)\n    \n    # find the result of sum_ascii modulo 26\n    result = sum_ascii % 26\n    \n    # convert the result to a character and return it\n    return chr(result)\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    sum %= 26\n    return chr(sum)\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for i in range(len(strr)):\n        sum_ascii += ord(strr[i])\n    char = chr(sum_ascii % 26 + 97)\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    sum = sum % 26\n    return chr(sum)\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def get_Char(strr):   \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    sum %= 26\n    return chr(sum)\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ASCII = 0\n    for i in range(len(strr)):\n        sum_ASCII += ord(strr[i])\n    sum_ASCII %= 26\n    return chr(sum_ASCII)\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for i in strr:\n        ascii_sum += ord(i)\n    ascii_sum = ascii_sum % 26\n    return chr(ascii_sum)\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the sum of ASCII values of characters in the string to zero\n    sum_ascii = 0\n    \n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum_ascii += ord(char)\n        \n    # Take the modulo of sum of ASCII values and 26\n    modulo = sum_ascii % 26\n    \n    # Convert the modulo to a character\n    result = chr(modulo)\n    \n    return result\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[-1]] + seq[i - seq[-1]])\n        return seq[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def newman_conway(n):\n    '''\n    Returns the nth number in the Newman-Conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [0, 1]\n        for i in range(2, n+1):\n            next_num = sequence[sequence[i-1]] + sequence[i - sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    This function returns the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        # Initialize the sequence with the first two numbers\n        newman_conway = [1, 1]\n        # Generate the rest of the sequence\n        for i in range(2, n):\n            newman_conway.append(newman_conway[newman_conway[-1]] + newman_conway[i - newman_conway[-1]])\n        return newman_conway[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sequence(n):\n    \"\"\"\n    Return the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1]\n        for i in range(2, n+1):\n            seq.append(seq[seq[-1]] + seq[i - seq[-1] - 1])\n        return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Returns the nth number in the Newman-Conway sequence.\n\n    Args:\n        n: the index of the number to be returned\n    \n    Returns:\n        The nth number in the Newman-Conway sequence.\n    \"\"\"\n\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [0, 1]\n        for i in range(2, n+1):\n            next_num = sequence[sequence[i-1]] + sequence[i - sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Returns the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        seq = [None, 1]\n        for i in range(2, n+1):\n            next_num = seq[seq[i-1]] + seq[i-seq[i-1]]\n            seq.append(next_num)\n        return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n+1):\n            next_num = sequence[sequence[i-1]] + sequence[i-sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Returns the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        seq = [0] * (n+1)\n        seq[1] = 1\n        for i in range(2, n+1):\n            seq[i] = seq[seq[i-1]] + seq[i-seq[i-1]]\n        return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Returns the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [0, 1]\n        for i in range(2, n+1):\n            next_num = sequence[sequence[i-1]] + sequence[i - sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sequence(n):\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [0, 1]\n        for i in range(2, n+1):\n            next_num = sequence[sequence[i-1]] + sequence[i-sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n]\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef surface_area_sphere(r):\n    '''\n    This function takes a radius value (r) and calculates the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere with radius r.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r ** 2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r**2)\n    return area\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = 1\n    for i in range(1, n+1):\n        num += 2*i\n    return num\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 1 if n == 1 else (n * (2 * n - 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for elem in list1:\n        freq_dict[elem] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Use Counter to count the frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables for the closest number and its distance to N\n    closest_num = None\n    closest_dist = float('inf')\n    # Iterate over numbers from 1 to N-1\n    for num in range(1, N):\n        # Compute the distance between num and N\n        dist = abs(N - num)\n        # Update closest_num and closest_dist if num is closer to N than the current closest_num\n        if dist < closest_dist:\n            closest_num = num\n            closest_dist = dist\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_list = list(range(1, N))\n    closest_num = 0\n    for num in n_list:\n        if N - num < N - closest_num:\n            closest_num = num\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Start with the maximum possible value\n    closest = float('-inf')\n    # Iterate through all numbers from 1 to N-1\n    for i in range(1, N):\n        # If i is closer to N than the current closest number\n        if N - i < N - closest:\n            # Update closest to i\n            closest = i\n    # Return the closest number\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(range(1, N))\n    closest = N\n    for num in nums:\n        if N - num < closest:\n            closest = N - num\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize the difference as infinity\n    diff = float('inf')\n    # Iterate over the range from 1 to n-1\n    for i in range(1, N):\n        # Find the absolute difference between i and n\n        if abs(i - N) < diff:\n            # Update the closest number and the difference\n            closest_num = i\n            diff = abs(i - N)\n    # Return the closest number\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = None\n    for i in range(N-1, -1, -1):\n        if i < N and i != 0:\n            smaller_num = i\n            break\n    return smaller_num\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(1, N):\n        if N % i == 0:\n            closest = i\n    return closest\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, 0, -1):\n        if i < N and N % i == 0:\n            return i\n    return None\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = None\n    for i in range(1, N):\n        if N % i == 0:\n            smaller_num = i\n    return smaller_num\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(range(1, N))\n    closest_num = 0\n    for num in nums:\n        if N - num <= N - closest_num:\n            closest_num = num\n    return closest_num\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = max(list1, key=len)\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word_length = 0\n    for word in list1:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n    return longest_word_length\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    This function returns the length of the longest word in the list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function takes a list of words as input and returns the length of the longest word.\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words and returns the length of the longest word in the list.\n    '''\n    longest_word = max(list1, key=len)\n    return len(longest_word)\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    # Split the string into a list of words\n    words = str1.split()\n    \n    # Iterate through each word in the list\n    for word in words:\n        # Check if the substring is present in the word\n        if sub_str in word:\n            # If the substring is present, return True\n            return True\n    \n    # If the substring is not present in any word, return False\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert the number to a string\n    n_str = str(n)\n    \n    # Loop through the digits of the number\n    for i in range(len(n_str)-1):\n        # Check if the difference between adjacent digits is not equal to 1\n        if abs(int(n_str[i]) - int(n_str[i+1])) != 1:\n            return False\n    \n    # If all adjacent digits have a difference of 1, return True\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 10:\n        return True\n    else:\n        s = str(n)\n        prev_diff = None\n        for i in range(len(s) - 1):\n            diff = abs(int(s[i]) - int(s[i+1]))\n            if diff == 0 or diff == 1:\n                if prev_diff is not None and prev_diff != diff:\n                    return True\n                else:\n                    prev_diff = diff\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Returns True if the given number is undulating, False otherwise.\n    A number is undulating if it has an increasing and decreasing segment of consecutive digits.\n    \"\"\"\n    n = str(n)\n    increasing = decreasing = True\n    for i in range(len(n) - 1):\n        if n[i] > n[i + 1]:\n            increasing = False\n        elif n[i] < n[i + 1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    n = str(n)  # Convert the number to a string\n    for i in range(len(n) - 1):\n        if n[i] == n[i + 1]:\n            return False  # If there are consecutive equal digits, it's not undulating\n        elif n[i] > n[i + 1]:\n            return False  # If the digits are not in ascending or descending order, it's not undulating\n    return True  # If all checks pass, it's undulating\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    # Convert the number to a string to check the adjacent digits\n    str_n = str(n)\n\n    # Check if the adjacent digits have a difference of 1\n    for i in range(len(str_n) - 1):\n        if abs(int(str_n[i]) - int(str_n[i+1])) != 1:\n            return False\n    \n    # If all adjacent digits have a difference of 1, return True\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Convert the number to a string and split it into digits\n    digits = [int(d) for d in str(n)]\n    \n    # Check if the digits are in non-decreasing order\n    if digits == sorted(digits):\n        # Check if the digits alternate in value\n        is_undulating = all(digits[i] != digits[i+1] for i in range(len(digits)-1))\n    else:\n        # The digits are not in non-decreasing order, so the number is not undulating\n        is_undulating = False\n    \n    return is_undulating\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    n_str = str(n)\n    is_increasing = True\n    is_decreasing = True\n    for i in range(len(n_str) - 1):\n        if n_str[i] > n_str[i+1]:\n            is_increasing = False\n        elif n_str[i] < n_str[i+1]:\n            is_decreasing = False\n    return is_increasing or is_decreasing\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "A number is said to be undulating if its adjacent digits differ by 1. For example, 123234 is an undulating number because its adjacent digits differ by 1. The function `is_undulating` takes a number `n` as input and returns `True` if the number is undulating and `False` otherwise. "
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Initialize a flag variable to keep track of the direction of change in digits\n    direction = None\n    \n    # Iterate through the digits of the number\n    for i in range(len(num_str)-1):\n        # Check if the difference between consecutive digits is positive or negative\n        diff = int(num_str[i+1]) - int(num_str[i])\n        \n        # If the direction of change in digits is not yet determined\n        if direction is None:\n            # Set the direction of change based on the current difference\n            if diff > 0:\n                direction = 'increasing'\n            elif diff < 0:\n                direction = 'decreasing'\n        else:\n            # If the direction of change is already determined and it doesn't match with the current difference\n            if (direction == 'increasing' and diff < 0) or (direction == 'decreasing' and diff > 0):\n                # Return False since the number is not undulating\n                return False\n    \n    # If all digits of the number follow the same direction of change, return True\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n_str = str(n)\n    prev_diff = None\n    for i in range(len(n_str) - 1):\n        diff = abs(int(n_str[i]) - int(n_str[i+1]))\n        if prev_diff is not None and diff != prev_diff:\n            return False\n        prev_diff = diff\n    return True"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of a to the power b.\n    \"\"\"\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list based on the second element of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):   \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function finds the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf') # set the minimum length to infinity\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    # Create a variable to store the minimum length\n    min_length = float('inf')\n    \n    # Loop through each list in the input list\n    for l in lst:\n        # If the length of the current list is less than the current minimum length, update the minimum length\n        if len(l) < min_length:\n            min_length = len(l)\n    \n    # Return the minimum length\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):   \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Iterate through each element of the list\n    for elem in list1:\n        # If the element is not already in the dictionary, add it with a value of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # If the element is already in the dictionary, increment its value by 1\n        else:\n            freq_dict[elem] += 1\n\n    # Return the dictionary with the frequency of each element\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the flattened list\n    for element in element in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[element] = 1\n            \n    # Return the frequency dictionary\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    if not numbers:\n        return None\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = ''\n    while n > 0:\n        binary_num += str(n % 2)\n        n = n // 2\n    return binary_num[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert a decimal number to its binary equivalent as a string.\n    \"\"\"\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary += str(n % 2)\n        n //= 2\n    return binary[::-1]\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # convert the number to a string and check if it is already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        # find the next palindrome by incrementing the least significant digit\n        # and carrying over to the next digit if necessary\n        carry = 1\n        i = len(num_str) - 1\n        while i >= 0:\n            next_digit = int(num_str[i]) + carry\n            if next_digit < 10:\n                num_str = num_str[:i] + str(next_digit) + num_str[i+1:]\n                break\n            else:\n                num_str = num_str[:i] + '0' + num_str[i+1:]\n                carry = 1\n                i -= 1\n        else:\n            # all digits are 9, so add a new digit at the end\n            num_str += '1'\n    # return the next palindrome as an integer\n    return int(num_str)\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Given an integer num, returns the next smallest palindrome.\n    \"\"\"\n    num_str = str(num)\n    if len(num_str) <= 1:\n        return num + 1\n    \n    mid = len(num_str) // 2\n    left_half = num_str[:mid]\n    right_half = num_str[mid:]\n    \n    if left_half == right_half:\n        # palindrome found, check if it's the smallest\n        return num\n    \n    # increment the middle digit(s) to make the next palindrome\n    # handle cases where the middle is two digits (num has even length)\n    if left_half[-1] == '9':\n        # carry over to the next digit(s)\n        if left_half == left_half[::-1]:\n            # middle digits are palindromic, increment the left half\n            left_half = str(int(left_half[:-1]) + 1).zfill(len(left_half) - 1) + '0'\n        else:\n            # middle digits are not palindromic, find the next palindrome by symmetry\n            left_half = left_half[::-1]\n            \n        right_half = left_half\n    else:\n        # increment the middle digit(s) by 1\n        left_half = str(int(left_half) + 1)\n        right_half = left_half\n        \n    # combine the left and right halves to form the next palindrome\n    return int(left_half + right_half)\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    str_num = str(num)\n\n    # Check if the integer is already a palindrome\n    if str_num == str_num[::-1]:\n        # Find the next integer\n        next_int = int(str_num) + 1\n    else:\n        # Find the next palindrome by adding zeros to the end\n        next_int = int(str_num + '0')\n\n    # Check if the next palindrome is a valid integer\n    while next_int > sys.maxsize:\n        next_int += 1\n\n    # Return the next palindrome as an integer\n    return next_int\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    for i in range(num+1, sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\n    return None\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num_str = str(num)\n    for i in range(len(num_str)-1, -1, -1):\n        if num_str[i] == '9':\n            num_str = num_str[:i] + '0' + num_str[i+1:]\n        else:\n            next_num = int(num_str[i]) + 1\n            return int(num_str[:i] + str(next_num) + num_str[i+1:][::-1])\n    # If all digits are 9, add another 9 at the beginning\n    return int('1' + '0'*(len(num_str)) + num_str[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, then we need to add 1 to the last digit and continue\n        next_num = int(num_str[:-1] + str(int(num_str[-1]) + 1))\n    else:\n        # If it is not a palindrome, then we need to reverse the second half of the number and add it to the first half\n        first_half = num_str[:len(num_str)//2]\n        second_half = num_str[len(num_str)//2:][::-1]\n        next_num = int(first_half + second_half)\n    # If the next number is not a palindrome, then we need to repeat the process\n    return next_smallest_palindrome(next_num) if str(next_num) != str(next_num)[::-1] else next_num"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    # increment the number until it becomes a palindrome\n    next_num = num + 1\n    while not is_palindrome(next_num):\n        next_num += 1\n    return next_num\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if len(num_str) == 1 or (num_str[0] == '9' and all(x == '0' for x in num_str[1:])):\n        return int(num_str + '11')\n\n    mid = len(num_str) // 2\n    left_half = num_str[:mid]\n    right_half = num_str[mid:]\n\n    if left_half == right_half:\n        return int(left_half + left_half[::-1])\n\n    inc_left_half = int(left_half) + 1\n    new_left_half = str(inc_left_half)\n    new_right_half = new_left_half[::-1]\n\n    return int(new_left_half + new_right_half)\n\nif __name__ == '__main__':\n    num = int(input(\"Enter an integer: \"))\n    next_palindrome = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome is:\", next_palindrome)\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the number to a string and reverse it\n    reverse_num = str(num)[::-1]\n\n    # check if the reversed number is smaller than the original number\n    if num < int(reverse_num):\n        return int(reverse_num)\n    else:\n        # increment the original number by 1 and check if the new number is a palindrome\n        next_num = num + 1\n        while not is_palindrome(str(next_num)):\n            next_num += 1\n        return next_num\n\n\ndef is_palindrome(s):\n    '''\n    Returns True if the given string is a palindrome, False otherwise.\n    '''\n    return s == s[::-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the input array is valid and k is within the range of the array\n    if arr is None or k < 1 or k > len(arr):\n        return None\n    \n    # sort the array in ascending order\n    arr.sort()\n    \n    # return the kth element\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return sorted(arr)[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.capitalize() for word in words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = word.split('_')\n    camel_case_word = ''\n    for i in range(len(word_list)):\n        if i == 0:\n            camel_case_word += word_list[i]\n        else:\n            camel_case_word += word_list[i].capitalize()\n    return camel_case_word\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(w.capitalize() for w in words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the string into words based on underscore separator\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    # and join the words back together\n    return words[0] + ''.join([w.capitalize() for w in words[1:]])\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the string into words based on the underscore separator\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    # and join the words together to form a camel case string\n    camel_case_string = words[0] + ''.join([w.capitalize() for w in words[1:]])\n    return camel_case_string\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    # Split the snake case string by underscore\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them together\n    camel_case = ''.join(word.capitalize() for word in words)\n    # The first letter of the camel case string should be lower case\n    return camel_case[0].lower() + camel_case[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel = ''\n    for w in words:\n        camel += w.capitalize()\n    return camel\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word using the delimiter '_'\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them to get the camel case string\n    return ''.join(w.capitalize() for w in words)\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the snake case string into words using '_' as the separator\n    words = word.split('_')\n    # Initialize an empty string for the camel case output\n    camel_case_word = ''\n    # Iterate through the words and capitalize the first letter of each word (except the first word)\n    for i in range(len(words)):\n        if i == 0:\n            camel_case_word += words[i]\n        else:\n            camel_case_word += words[i].capitalize()\n    return camel_case_word\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel = words[0] + ''.join([w.capitalize() for w in words[1:]])\n    return camel\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from scipy.special import binom\n\ndef eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return binom(n-1, m-1) * (n-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m > n:\n        return 0\n    else:\n        return (m * eulerian_num(n-1, m-1)) + ((n-m) * eulerian_num(n-1, m))\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from scipy.special import binom\n\ndef eulerian_num(n, m):\n    \"\"\"\n    Finds the Eulerian number a(n, m).\n    \"\"\"\n    return int(binom(n-1, m-1)) * (-1) ** (m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m > n:\n        return 0\n    elif m == 1:\n        return n\n    else:\n        return n * eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    if m == 0:\n        return 1\n    elif n == 0 or m < 0:\n        return 0\n    else:\n        return (m * eulerian_num(n-1, m-1)) + (n * eulerian_num(n-1, m))\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n < 0 or m < 0:\n        return 0\n    elif n == 0 or m == 0:\n        return 0\n    else:\n        return m * eulerian_num(n-1, m-1) + (n-1) * eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1 if m == 0 else 0\n    elif m == 0:\n        return 1 if n % 2 == 0 else 0\n    elif m == 1:\n        return n\n    else:\n        return (m-1) * eulerian_num(n-1, m-1) + (n-m+1) * eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    # Initialize a 2D array with all elements set to 0\n    euler = [[0 for x in range(n+1)] for y in range(n+1)]\n    \n    # Base case: a(0,0) = 1\n    euler[0][0] = 1\n    \n    # Base case: a(n,0) = a(n,n) = 1 for n > 0\n    for i in range(1, n+1):\n        euler[i][0] = 1\n        euler[i][i] = 1\n    \n    # Fill the rest of the array using the recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, i):\n            euler[i][j] = euler[i-1][j-1] + (j+1)*euler[i-1][j]\n    \n    # Return the value of a(n,m)\n    return euler[n][m]\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    elif n == 0 or m < 0:\n        return 0\n    else:\n        return m * eulerian_num(n-1, m-1) + (n-1) * eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    # initialize a list of m+1 zeros\n    euler = [0] * (m + 1)\n\n    # base case\n    if n == 0 or m == 0:\n        return 1\n\n    # recursive case\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i == j:\n                euler[j] = euler[j - 1] + 1\n            else:\n                euler[j] = euler[j - 1] + (i - 1) * euler[j]\n\n    # return the m-th Eulerian number\n    return euler[m]\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate over the input list and sort each sublist\n    for sublist in input_list:\n        sublist.sort()\n    # Return the sorted input list\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in input_list:\n        result.append(sorted(sublist))\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sorts each sublist of strings in the input list.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in input_list:\n        result.append(sorted(sublist))\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(sublist) for sublist in input_list]\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for val in lst:\n        if val == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Counts the number of True values in the given list of booleans.\n    '''\n    return sum(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count(lst):    \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result = list(test_tup) + test_list\n    return tuple(result)"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    result = test_tup + tuple(test_list)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuple.\n    '''\n    return test_tup + tuple(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n\n    # Heapify the input lists and add them to the heap\n    heapq.heappush(heap, (num1[0], 0, num1))\n    heapq.heappush(heap, (num2[0], 0, num2))\n    heapq.heappush(heap, (num3[0], 0, num3))\n\n    while heap:\n        # Pop the smallest element from the heap and add it to the merged_list\n        smallest, index, num_list = heapq.heappop(heap)\n        merged_list.append(smallest)\n\n        # If there are more elements in the popped list, add them to the heap\n        if index + 1 < len(num_list):\n            heapq.heappush(heap, (num_list[index + 1], index + 1, num_list))\n\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    heap = []\n    # Add the first elements of each list to the heap\n    for i, num in enumerate([num1, num2, num3]):\n        if num:\n            heapq.heappush(heap, (num[0], i, 0))\n    # Merge the lists into a single sorted list\n    while heap:\n        val, list_id, index = heapq.heappop(heap)\n        merged.append(val)\n        if index + 1 < len(nums[list_id]):\n            heapq.heappush(heap, (nums[list_id][index+1], list_id, index+1))\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n\n    for num in num1:\n        heapq.heappush(heap, (num, 1))\n    for num in num2:\n        heapq.heappush(heap, (num, 2))\n    for num in num3:\n        heapq.heappush(heap, (num, 3))\n\n    while heap:\n        num, list_num = heapq.heappop(heap)\n        merged_list.append(num)\n\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n\n    for i, num in enumerate([num1, num2, num3]):\n        if num:\n            heapq.heappush(heap, (num[0], i, 0))\n\n    while heap:\n        val, list_idx, element_idx = heapq.heappop(heap)\n        merged_list.append(val)\n        if element_idx + 1 < len(nums[list_idx]):\n            heapq.heappush(heap, (nums[list_idx][element_idx + 1], list_idx, element_idx + 1))\n\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for num in heapq.merge(num1, num2, num3):\n        merged_list.append(num)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n    # Add the first element of each list to the heap\n    for i in range(len(num1)):\n        heapq.heappush(heap, (num1[i], 1))\n    for i in range(len(num2)):\n        heapq.heappush(heap, (num2[i], 2))\n    for i in range(len(num3)):\n        heapq.heappush(heap, (num3[i], 3))\n    # Extract the smallest element from the heap and add it to the merged list\n    while heap:\n        num, index = heapq.heappop(heap)\n        merged_list.append(num)\n        # Add the next element from the list the current element came from\n        if index == 1 and i < len(num1) - 1:\n            i += 1\n            heapq.heappush(heap, (num1[i], 1))\n        elif index == 2 and i < len(num2) - 1:\n            i += 1\n            heapq.heappush(heap, (num2[i], 2))\n        elif index == 3 and i < len(num3) - 1:\n            i += 1\n            heapq.heappush(heap, (num3[i], 3))\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n    \n    # add the first element of each list to the heap\n    for i in range(len(num1)):\n        heapq.heappush(heap, (num1[i], 0))\n    for i in range(len(num2)):\n        heapq.heappush(heap, (num2[i], 1))\n    for i in range(len(num3)):\n        heapq.heappush(heap, (num3[i], 2))\n    \n    # merge the lists\n    while heap:\n        val, lst = heapq.heappop(heap)\n        merged_list.append(val)\n        if lst == 0:\n            i += 1\n            if i < len(num1):\n                heapq.heappush(heap, (num1[i], 0))\n        elif lst == 1:\n            i += 1\n            if i < len(num2):\n                heapq.heappush(heap, (num2[i], 1))\n        else:\n            i += 1\n            if i < len(num3):\n                heapq.heappush(heap, (num3[i], 2))\n    \n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for num in heapq.merge(num1, num2, num3):\n        merged_list.append(num)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n\n    # Add the first element of each list to the heap\n    for i in range(len(num1)):\n        heapq.heappush(heap, (num1[i], 1))\n    for i in range(len(num2)):\n        heapq.heappush(heap, (num2[i], 2))\n    for i in range(len(num3)):\n        heapq.heappush(heap, (num3[i], 3))\n\n    # Merge the lists in sorted order\n    while heap:\n        num, list_id = heapq.heappop(heap)\n        merged_list.append(num)\n        if list_id == 1 and len(num1) > 0:\n            heapq.heappush(heap, (num1.pop(0), 1))\n        elif list_id == 2 and len(num2) > 0:\n            heapq.heappush(heap, (num2.pop(0), 2))\n        elif list_id == 3 and len(num3) > 0:\n            heapq.heappush(heap, (num3.pop(0), 3))\n\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heappush(merged_list, (num1.pop(0), 1))\n    heapq.heappush(merged_list, (num2.pop(0), 2))\n    heapq.heappush(merged_list, (num3.pop(0), 3))\n\n    while merged_list:\n        smallest, list_num = heapq.heappop(merged_list)\n\n        if list_num == 1 and num1:\n            heapq.heappush(merged_list, (num1.pop(0), 1))\n        if list_num == 2 and num2:\n            heapq.heappush(merged_list, (num2.pop(0), 2))\n        if list_num == 3 and num3:\n            heapq.heappush(merged_list, (num3.pop(0), 3))\n\n        merged_list.append(smallest)\n\n    return merged_list\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string and a number n as input, and returns the number of numbers with an odd value when rotating the binary string the given number of times.\n    \"\"\"\n\n    # convert the binary string to an integer\n    num = int(s, 2)\n\n    # rotate the binary string n times\n    for i in range(n):\n        # get the last digit of the binary string\n        last_digit = num % 10\n        # remove the last digit from the binary string\n        num //= 10\n        # add the last digit to the beginning of the binary string\n        num = num * 2 + last_digit\n\n    # count the number of odd values in the binary string\n    count = 0\n    while num > 0:\n        if num % 2 == 1:\n            count += 1\n        num //= 2\n\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to an integer\n    num = int(s, 2)\n\n    # Initialize a counter for odd numbers\n    count = 0\n\n    # Iterate n times\n    for i in range(n):\n        # Left shift the number by 1\n        num <<= 1\n\n        # Check if the rightmost bit (least significant bit) is odd\n        if num & 1:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        binary_str = s\n        for j in range(len(s)):\n            if binary_str[0] == '1':\n                binary_str = binary_str[-1] + binary_str[:-1]\n            else:\n                binary_str = binary_str[1:] + binary_str[0]\n        if int(binary_str, 2) % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if int(s, 2) % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    # Convert the binary string to an integer\n    num = int(s, 2)\n    \n    # Rotate the binary string n times and convert back to integer\n    rotated_num = (num << n) + (num >> (len(s) - n))\n    \n    # Count the number of odd values in the binary representation of the rotated number\n    count = bin(rotated_num).count('1')\n    \n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    # Convert binary string to integer\n    num = int(s,2)\n    \n    # Rotate the binary string n times\n    for i in range(n):\n        # If the last bit is set, then add 1 to the integer value\n        if num & 1:\n            num += 1\n        # Rotate the binary string by dividing it by 2 and adding the remainder to the end\n        num = num >> 1\n        if num & 1:\n            num += 1\n    \n    # Count the number of odd values\n    count = 0\n    for i in range(len(s)):\n        # Get the binary value of the ith bit\n        bit_val = (num >> i) & 1\n        # If the binary value is odd, increment the count\n        if bit_val == 1:\n            count += 1\n    \n    # Return the count of odd values\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        s = s[1:]+s[0]\n        if int(s,2)%2 != 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n+1):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Returns the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if int(s, 2) % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    # Convert the binary string to decimal number\n    num = int(s, 2)\n    \n    # Rotate the binary string n times\n    for i in range(n):\n        # Count the number of ones in the binary string\n        count = 0\n        while num:\n            count += num & 1\n            num >>= 1\n        \n        # Check if the count of ones is odd or even\n        if count % 2 == 0:\n            num = int(bin(num)[2:], 2) << 1\n        else:\n            num = int(bin(num)[2:], 2) << 1 | 1\n            \n    # Count the number of odd numbers obtained after rotating the binary string n times\n    odd_count = 0\n    for i in range(1, int(s, 2)+1):\n        if bin(i).count('1') % 2 == 1:\n            odd_count += 1\n    \n    return odd_count\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store the common elements\n    common_elements = set()\n\n    # loop through the lists and find the common elements\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common = set(nestedlist[i]) & set(nestedlist[j])\n            common_elements = common_elements | common\n\n    # return the set of common elements\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    flattened_list = []\n    for sublist in nestedlist:\n        for element in sublist:\n            flattened_list.append(element)\n\n    common_elements = set(flattened_list)\n    for element in common_elements.copy():\n        if flattened_list.count(element) == 1:\n            common_elements.remove(element)\n\n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Get the first nested list from the given nestedlist\n    common_elements = set(nestedlist[0])\n\n    # Iterate over the rest of the nested lists and find the common elements\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(set(sublist))\n\n    # Return the common elements as a list\n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Returns the set of common elements in a nested list.\n    \"\"\"\n    # Get a set of all unique elements in the nested list\n    unique_elements = set([element for sublist in nestedlist for element in sublist])\n    \n    # Create a dictionary to count the occurrences of each element\n    counts = {}\n    for element in unique_elements:\n        counts[element] = sum([sublist.count(element) for sublist in nestedlist])\n    \n    # Find the common elements (those with count = len(nestedlist))\n    common_elements = set([element for element, count in counts.items() if count == len(nestedlist)])\n    \n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Flatten the nested list using nested for loops\n    flattened_list = []\n    for sublist in nestedlist:\n        for element in sublist:\n            flattened_list.append(element)\n    \n    # Find the common elements using a set\n    common_elements = set()\n    for element in flattened_list:\n        if flattened_list.count(element) == len(nestedlist):\n            common_elements.add(element)\n    \n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    flattened = [item for sublist in nestedlist for item in sublist]\n    return list(set(flattened))\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common_elements.extend(set(nestedlist[i]) & set(nestedlist[j]))\n    return list(set(common_elements))\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common = common.intersection(set(lst))\n    return list(common)\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store the common elements\n    common = set()\n    \n    # loop through each list in the nested list\n    for lst in nestedlist:\n        # if this is the first list, add all elements to the common set\n        if not common:\n            common = set(lst)\n        # otherwise, find the intersection with the current common set and the current list\n        else:\n            common = common.intersection(set(lst))\n    \n    return list(common)\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def empty_list(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def empty_dict(list1):\n    \"\"\"\n    This function checks whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if i == {}:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def empty_dict(list1):\n    \"\"\"\n    Check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    return all(not d for d in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Check if all dictionaries in a list are empty or not.\n    \n    Args:\n    list1 (list): A list of dictionaries.\n    \n    Returns:\n    bool: True if all dictionaries in the list are empty, False otherwise.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers to a single integer.\n    '''\n    result = 0\n    for n in nums:\n        result = result * 10 + n\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers to a single integer.\n\n    :param nums: tuple of positive integers\n    :return: single integer\n    \"\"\"\n\n    # convert tuple to list\n    nums_list = list(nums)\n\n    # reverse the list\n    nums_list.reverse()\n\n    # convert list to string\n    nums_str = ''.join([str(x) for x in nums_list])\n\n    # convert string to integer\n    result = int(nums_str)\n\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i] * (10 ** (len(nums)-1-i))\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        new_sublist = []\n        for item in sublist:\n            try:\n                new_sublist.append(float(item))\n            except ValueError:\n                new_sublist.append(item)\n        result.append(new_sublist)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        else:\n            try:\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, sublist in enumerate(test_list):\n        for j, element in enumerate(sublist):\n            try:\n                test_list[i][j] = float(element)\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        sub_list = []\n        for j in i:\n            try:\n                sub_list.append(float(j))\n            except ValueError:\n                sub_list.append(j)\n        result.append(sub_list)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, sublist in enumerate(test_list):\n        for j, item in enumerate(sublist):\n            try:\n                test_list[i][j] = float(item)\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, sublist in enumerate(test_list):\n        for j, item in enumerate(sublist):\n            try:\n                test_list[i][j] = float(item)\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Using split() method to split the string on space character and returning the list\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def string_to_list(string):  \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    for i in range(2, n-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def search(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    elif arr[0] == arr[1]:\n        return search(arr[2:])\n    else:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the element that appears only once in the array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif arr[0] != arr[1]:\n        return arr[0]\n    elif arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    else:\n        for i in range(2, n-2):\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n        return None\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def search(arr):\n    \"\"\"\n    Given a sorted array of integers, find the element that appears only once.\n\n    :param arr: List[int]\n    :return: int\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    else:\n        for i in range(1, len(arr)-1):\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    for i in range(2, n-2):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    for i in range(2, len(arr)-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n    \n    if arr[0] != arr[1]:\n        return arr[0]\n    \n    if arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    \n    left = 2\n    right = n-1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid-1]:\n            if arr[mid] == arr[mid+1]:\n                left = mid + 1\n            else:\n                return arr[mid+1]\n        elif arr[mid] == arr[mid+1]:\n            if arr[mid] == arr[mid-1]:\n                right = mid - 1\n            else:\n                return arr[mid-1]\n    \n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def search(arr):\n    res = 0\n    for i in range(len(arr)):\n        res ^= arr[i]\n    return res\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    for i in range(n-1):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    \n    return arr[n-1]"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    \n    # If the array has only one element, it is the unique element\n    if n == 1:\n        return arr[0]\n    \n    # If the first and second elements are different, the first element is the unique element\n    if arr[0] != arr[1]:\n        return arr[0]\n    \n    # If the last and second-to-last elements are different, the last element is the unique element\n    if arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    \n    # Otherwise, the unique element is somewhere in the middle of the array\n    for i in range(2, n-1):\n        # If the element is different from the previous and next elements, it is the unique element\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    \n    # If no unique element is found, return None\n    return None\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if abs(product) > max_product:\n            max_product = abs(product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1]-list1[i][1]*list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if abs(product) > abs(max_product):\n            max_product = product\n    return abs(max_product)"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product1 = abs(list1[i][0] * list1[j][0])\n            product2 = abs(list1[i][1] * list1[j][1])\n            product = max(product1, product2)\n            max_product = max(max_product, product)\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        divisors = [i for i in range(1, num) if num % i == 0]\n        sum_divisors = sum(divisors)\n        if sum_divisors != num and sum_divisors <= limit:\n            if sum_divisors in divisors and sum_divisors != 1:\n                if num not in amicable_numbers and sum_divisors not in amicable_numbers:\n                    amicable_numbers.append(num)\n                    amicable_numbers.append(sum_divisors)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(n):\n        '''\n        Helper function to determine if a number is amicable.\n        '''\n        sum_of_divisors = 0\n        for i in range(1, n):\n            if n % i == 0:\n                sum_of_divisors += i\n        if sum_of_divisors == n:\n            return False\n        return sum_of_divisors == n\n\n    total = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            total += i\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(n):\n        '''\n        Helper function to check if a given number is amicable or not.\n        '''\n        div_sum = sum(d for d in range(1, n//2 + 1) if n % d == 0)\n        if div_sum != n:\n            if n == sum(d for d in range(1, div_sum//2 + 1) if div_sum % d == 0):\n                return True\n        return False\n    \n    amicable_numbers = [n for n in range(1, limit+1) if is_amicable(n)]\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_of_factors(n):\n        factors = []\n        for i in range(1, n):\n            if n % i == 0:\n                factors.append(i)\n        return sum(factors)\n\n    total = 0\n    for i in range(1, limit+1):\n        sum_i = sum_of_factors(i)\n        if sum_i != i and sum_of_factors(sum_i) == i:\n            total += i\n\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initialize sum variable\n    sum = 0\n    \n    # loop through numbers from 1 to limit\n    for num in range(1, limit+1):\n        # find the sum of proper divisors of num\n        divisor_sum = sum(i for i in range(1, num) if num % i == 0)\n        \n        # check if num and divisor_sum are amicable\n        if sum(i for i in range(1, divisor_sum) if divisor_sum % i == 0) == num:\n            # add the amicable number to the sum\n            sum += num\n    \n    # return the sum of all amicable numbers from 1 to limit\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number (limit).\n    \"\"\"\n    def is_amicable(n):\n        \"\"\"\n        Returns True if n is an amicable number, False otherwise.\n        \"\"\"\n        if n == 0:\n            return False\n        divisors = [1]\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if n // i == i:\n                    divisors.append(i)\n                else:\n                    divisors.extend([i, n // i])\n        return sum(divisors[:-1]) == n\n\n    total = 0\n    for n in range(1, limit + 1):\n        if is_amicable(n):\n            total += n\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit+1):\n        divisors_sum = sum(d for d in range(1, i) if i % d == 0)\n        if i != divisors_sum:\n            # Check if the sum of divisors of the number\n            # equals the number itself (amicable number).\n            if i == sum(d for d in range(1, divisors_sum) if divisors_sum % d == 0):\n                # If it is, add it to the total sum.\n                total += i\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(n):\n        # Compute the sum of proper divisors of n\n        divisor_sum = sum(d for d in range(1, n) if n % d == 0)\n        # Check if n and divisor_sum are amicable\n        return divisor_sum != n and divisor_sum == sum(d for d in range(1, divisor_sum) if divisor_sum % d == 0)\n    \n    # Compute the sum of all amicable numbers from 1 to limit\n    return sum(n for n in range(1, limit+1) if is_amicable(n))"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        '''\n        Helper function to determine if a number is amicable or not.\n        '''\n        divisors_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisors_sum += i\n        if divisors_sum == num:\n            return False\n        return divisors_sum == num\n    \n    total_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            total_sum += i\n    return total_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def d(n):\n        '''\n        Calculate the sum of proper divisors of a given number.\n        '''\n        return sum([i for i in range(1, n) if n % i == 0])\n    \n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if d(i) != i and d(d(i)) == i:\n            amicable_sum += i\n    \n    return amicable_sum\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two arguments (real and imaginary parts of a complex number)\n    and returns its angle in degrees.\n    \"\"\"\n    z = complex(a, b)\n    angle = cmath.phase(z) * 180 / cmath.pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    angle = cmath.phase(z)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    angle = cmath.phase(z)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Given the real and imaginary parts of a complex number, compute its angle in radians.\n    \"\"\"\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two inputs representing the real and imaginary part of a complex number\n    and returns its angle in degrees.\n    \"\"\"\n    z = complex(a, b)\n    angle = cmath.phase(z) * 180 / cmath.pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    return cmath.phase(z)\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Returns the angle of a complex number in degrees.\n\n    :param a: The real part of the complex number.\n    :param b: The imaginary part of the complex number.\n    :return: The angle of the complex number in degrees.\n    \"\"\"\n\n    return cmath.phase(a + b*1j) * 180 / cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    angle = cmath.phase(z)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Returns the angle of a complex number in degrees.\n    \"\"\"\n    z = complex(a, b)\n    return cmath.phase(z) * 180 / cmath.pi"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_length(string):\n    max_diff = 0\n    count0 = 0\n    count1 = 0\n    \n    for i in string:\n        if i == '0':\n            count0 += 1\n            count1 -= 1\n        else:\n            count0 -= 1\n            count1 += 1\n            \n        if count0 > count1:\n            max_diff = max(max_diff, count0 - count1)\n        else:\n            max_diff = max(max_diff, count1 - count0)\n            \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_length(string):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in string:\n        if i == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    for i in string:\n        if i == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n\n    # initialize variables to keep track of count of 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # loop through the string to count the number of 0s and 1s\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        elif char == '1':\n            one_count += 1\n\n    # initialize variables to keep track of the minimum number of 0s and 1s seen so far\n    min_zero_count = zero_count\n    min_one_count = one_count\n\n    # loop through the string to find the maximum difference between the number of 0s and 1s\n    for i in range(len(string)):\n        # move the window by one character each time\n        if string[i] == '0':\n            zero_count -= 1\n        elif string[i] == '1':\n            one_count -= 1\n\n        # update the minimum number of 0s and 1s seen so far\n        min_zero_count = min(min_zero_count, zero_count)\n        min_one_count = min(min_one_count, one_count)\n\n        # calculate the maximum difference between the number of 0s and 1s in the current window\n        max_diff = max(zero_count - min_zero_count, one_count - min_one_count)\n\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    \n    for i in string:\n        if i == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n            \n        diff = abs(zero_count - one_count)\n        \n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n            \n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_length(string):\n    # Initialize variables to keep track of the number of 0s and 1s in the string\n    num_zeros = 0\n    num_ones = 0\n    \n    # Initialize variables to keep track of the maximum difference between the number of 0s and 1s\n    max_diff = 0\n    current_diff = 0\n    \n    # Iterate through each character in the string\n    for char in string:\n        # If the character is a 0, increment the number of 0s\n        if char == '0':\n            num_zeros += 1\n        # If the character is a 1, increment the number of 1s\n        elif char == '1':\n            num_ones += 1\n        \n        # Calculate the current difference between the number of 0s and 1s\n        current_diff = abs(num_zeros - num_ones)\n        \n        # If the current difference is greater than the maximum difference so far, update the maximum difference\n        if current_diff > max_diff:\n            max_diff = current_diff\n    \n    # Return the maximum difference\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    for i in string:\n        if i == '0':\n            zero_count += 1\n        elif i == '1':\n            one_count += 1\n        max_diff = max(max_diff, abs(zero_count - one_count))\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_length(string): \n    max_diff = 0\n    count_0 = count_1 = 0\n    for i in string:\n        if i == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    ones = 0\n    zeros = 0\n    for i in string:\n        if i == '1':\n            ones += 1\n        else:\n            zeros += 1\n        max_diff = max(max_diff, abs(ones - zeros))\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_of_common_divisors(a, b):\n    common_divisors_sum = 0\n    for i in range(1, int(gcd(a, b))+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nprint(sum_of_common_divisors(a, b))\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a Python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Find the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n    return sum_of_common_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum(a,b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Find the smaller number among a and b\n    if a > b:\n        a, b = b, a\n\n    # Initialize sum to zero\n    sum_divisors = 0\n\n    # Loop through all numbers from 1 to smaller number\n    for i in range(1, a+1):\n        # If i is a factor of both a and b, add it to sum_divisors\n        if a % i == 0 and b % i == 0:\n            sum_divisors += i\n\n    # Return the sum of common divisors\n    return sum_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two numbers using the Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors_sum = 0\n    for i in range(1, gcd(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find all the divisors of a and b\n    divisors_a = [i for i in range(1, a+1) if a % i == 0]\n    divisors_b = [i for i in range(1, b+1) if b % i == 0]\n    # Find the intersection of the two sets of divisors\n    common_divisors = set(divisors_a) & set(divisors_b)\n    # Calculate the sum of the common divisors\n    total = sum(common_divisors)\n    return total\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def gcd(a, b):\n    \"\"\"\n    Find the greatest common divisor of two given numbers.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_of_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the list of common divisors\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Find the sum of common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Given two integers a and b, find the sum of their common divisors.\n    \"\"\"\n    # Find the divisors of a and b\n    divisors_a = [i for i in range(1, a + 1) if a % i == 0]\n    divisors_b = [i for i in range(1, b + 1) if b % i == 0]\n    # Find the common divisors between a and b\n    common_divisors = set(divisors_a) & set(divisors_b)\n    # Return the sum of the common divisors\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors.\n    '''\n    # Find the common divisors of the two numbers\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    \n    # Calculate the sum of common divisors\n    sum_divisors = sum(common_divisors)\n    return sum_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_divisors(n):\n    total = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            total += i\n    return total\n\ndef sum(a, b):\n    common_divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    sum_of_divisors = 0\n    for num in common_divisors:\n        sum_of_divisors += sum_divisors(num)\n    return sum_of_divisors\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\n\nprint(sum(a, b))\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Initialize a list to store the common divisors\n    common_divisors = []\n    \n    # Loop through all the numbers from 1 to a\n    for i in range(1, a+1):\n        # Check if i is a factor of both a and b\n        if a % i == 0 and b % i == 0:\n            # If i is a common factor, append it to the list\n            common_divisors.append(i)\n    \n    # Calculate the sum of the common divisors\n    total_sum = sum(common_divisors)\n    \n    # Return the sum\n    return total_sum\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def multiply_int(x: int, y: int) -> int:\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Finds all words in str that are longer than n characters and returns them as a list.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def long_words(n, string):\n    words = string.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Given a list of words and a length n, return a list of words longer than n.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    '''\n    Finds words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()  # split the string into a list of words\n    long_words = []  # create an empty list to store the long words\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)  # add the long word to the list\n    return long_words  # return the list of long words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into a list of words\n    words = str.split()\n    # Create an empty list to store the long words\n    long_words = []\n    # Loop through the words and add them to the long_words list if they are longer than n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    # Return the list of long words\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Finds words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Get the order of the magic square\n    order = len(my_matrix)\n\n    # Calculate the sum of the first row\n    total = sum(my_matrix[0])\n\n    # Check if each row has the same sum as the first row\n    for i in range(1, order):\n        if sum(my_matrix[i]) != total:\n            return False\n\n    # Check if each column has the same sum as the first row\n    for i in range(order):\n        col_sum = 0\n        for j in range(order):\n            col_sum += my_matrix[j][i]\n        if col_sum != total:\n            return False\n\n    # Check if the sum of the diagonal from top left to bottom right is the same as the first row\n    diag_sum1 = 0\n    for i in range(order):\n        diag_sum1 += my_matrix[i][i]\n    if diag_sum1 != total:\n        return False\n\n    # Check if the sum of the diagonal from top right to bottom left is the same as the first row\n    diag_sum2 = 0\n    for i in range(order):\n        diag_sum2 += my_matrix[i][order-i-1]\n    if diag_sum2 != total:\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    # Check if all rows have the same sum\n    for i in range(1, n):\n        if sum(my_matrix[i]) != row_sum:\n            return False\n    # Check if all columns have the same sum\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum != row_sum:\n            return False\n    # Check if the sum of diagonal 1 is equal to the sum of diagonal 2\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag1_sum != diag2_sum:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    total = sum(my_matrix[0])\n    for i in range(1, n):\n        if sum(my_matrix[i]) != total:\n            return False\n    for j in range(n):\n        col_total = 0\n        row_total = 0\n        for i in range(n):\n            col_total += my_matrix[i][j]\n            row_total += my_matrix[j][i]\n        if col_total != total or row_total != total:\n            return False\n    diag1_total = sum(my_matrix[i][i] for i in range(n))\n    diag2_total = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag1_total != total or diag2_total != total:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_diag1 = sum_diag2 = 0\n    row_sum = col_sum = my_matrix[0][0] * n\n    for i in range(n):\n        for j in range(n):\n            # Check if all elements are equal\n            if my_matrix[i][j] != my_matrix[0][0]:\n                return False\n            # Calculate row and column sums\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n            # Calculate diagonal sums\n            if i == j:\n                sum_diag1 += my_matrix[i][j]\n            if i == n - j - 1:\n                sum_diag2 += my_matrix[i][j]\n    # Check if all row, column and diagonal sums are equal\n    if row_sum != my_matrix[0][0] * n or col_sum != my_matrix[0][0] * n or sum_diag1 != my_matrix[0][0] * n or sum_diag2 != my_matrix[0][0] * n:\n        return False\n    # If all checks pass, the matrix is a magic square\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Check if the matrix is square\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    if rows != cols:\n        return False\n\n    # Calculate the magic sum assuming the sum of first row\n    magic_sum = sum(my_matrix[0])\n\n    # Check if all rows have the same sum\n    for i in range(rows):\n        row_sum = sum(my_matrix[i])\n        if row_sum != magic_sum:\n            return False\n\n    # Check if all columns have the same sum\n    for j in range(cols):\n        col_sum = sum(my_matrix[i][j] for i in range(rows))\n        if col_sum != magic_sum:\n            return False\n\n    # Check if the sum of diagonal 1 is equal to the sum of diagonal 2\n    diag1_sum = sum(my_matrix[i][i] for i in range(rows))\n    diag2_sum = sum(my_matrix[i][cols-i-1] for i in range(rows))\n\n    if diag1_sum != diag2_sum:\n        return False\n\n    # If all checks pass, return True\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # calculate the sum of the first row\n    first_row_sum = sum(my_matrix[0])\n    # calculate the sum of each column\n    col_sums = [0]*n\n    for col in range(n):\n        col_sums[col] = sum(my_matrix[row][col] for row in range(n))\n    # calculate the sum of each diagonal\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    # check if all sums are equal\n    if first_row_sum == diag1_sum == diag2_sum:\n        for col in col_sums:\n            if col != first_row_sum:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    total = sum(my_matrix[0])\n    \n    # Check rows and columns\n    for i in range(n):\n        if sum(my_matrix[i]) != total:\n            return False\n        if sum(my_matrix[j][i] for j in range(n)) != total:\n            return False\n    \n    # Check diagonals\n    if sum(my_matrix[i][i] for i in range(n)) != total:\n        return False\n    if sum(my_matrix[i][n-i-1] for i in range(n)) != total:\n        return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Calculate the size of the matrix\n    n = len(my_matrix)\n\n    # Calculate the sum of the first row\n    first_row_sum = sum(my_matrix[0])\n\n    # Check if all rows have the same sum\n    for i in range(1, n):\n        if sum(my_matrix[i]) != first_row_sum:\n            return False\n\n    # Check if all columns have the same sum\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += my_matrix[i][j]\n        if column_sum != first_row_sum:\n            return False\n\n    # Check if the diagonal sums are equal\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += my_matrix[i][i]\n        diagonal_sum2 += my_matrix[i][n-i-1]\n    if diagonal_sum1 != first_row_sum or diagonal_sum2 != first_row_sum:\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    total = sum(my_matrix[0])  # assuming first row as reference\n    \n    # check rows and columns\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j][i] for j in range(n))\n        if row_sum != total or col_sum != total:\n            return False\n    \n    # check diagonals\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag1_sum != total or diag2_sum != total:\n        return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Test if a given matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    # Check if matrix is square\n    for row in my_matrix:\n        if len(row) != n:\n            return False\n    # Check if all rows and columns have same sum\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    if row_sums != col_sums:\n        return False\n    # Check if diagonal sums are equal\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    return diag1_sum == diag2_sum\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    counts = defaultdict(int)\n    for item in nums:\n        counts[item] += 1\n    max_item = max(counts, key=counts.get)\n    max_count = counts[max_item]\n    return max_item, max_count\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, f in freq.items():\n        if f > max_freq:\n            max_freq = f\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_num = [k for k, v in freq.items() if v == max_freq][0]\n    return max_num, max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    \n    # find the item with maximum count\n    max_count = 0\n    max_item = None\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item, max_count\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [key for key, value in freq.items() if value == max_freq]\n    return max_items\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    return max_item, max_freq\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_items = [item for item, freq in freq_dict.items() if freq == max_freq]\n    return max_items\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowels_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            vowels_str += char\n    reversed_vowels = vowels_str[::-1]\n    result = ''\n    i = 0\n    for char in str1:\n        if char.lower() in vowels:\n            result += reversed_vowels[i]\n            i += 1\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    vowels_str = ''.join(c for c in str1 if c.lower() in vowels)\n    reversed_vowels = vowels_str[::-1]\n    \n    result = ''\n    for c in str1:\n        if c.lower() in vowels:\n            result += reversed_vowels[0]\n            reversed_vowels = reversed_vowels[1:]\n        else:\n            result += c\n    \n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str_list = list(str1)\n    vowel_list = [c for c in str_list if c.lower() in vowels]\n    for i in range(len(vowel_list)):\n        str_list[str_list.index(vowel_list[i])] = vowel_list[-i-1]\n    return ''.join(str_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels_in_str = [char for char in str1 if char in vowels]\n    vowels_reversed = vowels_in_str[::-1]\n    new_str = ''\n    vowel_index = 0\n    for char in str1:\n        if char in vowels:\n            new_str += vowels_reversed[vowel_index]\n            vowel_index += 1\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_in_str = [char for char in str1 if char in vowels]\n    vowels_in_str.reverse()\n    result = []\n    vowel_count = 0\n    for char in str1:\n        if char in vowels:\n            result.append(vowels_in_str[vowel_count])\n            vowel_count += 1\n        else:\n            result.append(char)\n    return ''.join(result)\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    chars = list(str1)\n    vowels_in_str = [c for c in chars if c in vowels]\n    vowels_in_str.reverse()\n    for i, c in enumerate(chars):\n        if c in vowels:\n            chars[i] = vowels_in_str.pop()\n    return ''.join(chars)\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str1_list = list(str1)\n    vowels_list = [char for char in str1_list if char in vowels]\n    for i, char in enumerate(str1_list):\n        if char in vowels:\n            str1_list[i] = vowels_list.pop()\n    return ''.join(str1_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str1_vowels = [char for char in str1 if char in vowels]\n    str1_vowels.reverse()\n    result = ''\n    vowel_count = 0\n    for char in str1:\n        if char in vowels:\n            result += str1_vowels[vowel_count]\n            vowel_count += 1\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_in_string = [c for c in str1 if c.lower() in vowels]\n    reversed_vowels = vowels_in_string[::-1]\n    str_list = list(str1)\n    vowel_index = 0\n    for i, c in enumerate(str_list):\n        if c.lower() in vowels:\n            str_list[i] = reversed_vowels[vowel_index]\n            vowel_index += 1\n    return ''.join(str_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiou'\n    str1_vowels = [c for c in str1 if c.lower() in vowels]\n    reversed_vowels = str1_vowels[::-1]\n    result = ''\n    i = 0\n    for c in str1:\n        if c.lower() in vowels:\n            result += reversed_vowels[i]\n            i += 1\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return ''.join(str(i) for i in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for item in tup1:\n        string += str(item) + \" \"\n    return string.rstrip()\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n    \"\"\"\n    return \"\".join(str(x) for x in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    str1 = ''.join(str(i) for i in tup1)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ','.join(map(str, tup1))\n    return str_tup\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n    \"\"\"\n    string = \"\"\n    for element in tup1:\n        string += str(element) + \" \"\n    return string.strip()\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(i) for i in tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_of_negatives = 0\n    for num in nums:\n        if num < 0:\n            sum_of_negatives += num\n    return sum_of_negatives\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum of negative numbers\n    sum_of_negative = 0\n    \n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is negative, add it to the sum_of_negative variable\n        if num < 0:\n            sum_of_negative += num\n    \n    # Return the sum of negative numbers\n    return sum_of_negative\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(filter(lambda x: x < 0, nums))\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through the list of numbers\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            sum += num\n    \n    # Return the sum of negative numbers\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def hexagonal_num(n):  \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / (zero_count + non_zero_count)"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n            \n    if count_non_zero == 0:\n        ratio = 'Infinite'\n    else:\n        ratio = count_zero / count_non_zero\n        \n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    ratio = zero_count / non_zero_count\n\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = 0\n    non_zeros = 0\n\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n\n    if non_zeros == 0:\n        return \"Error: Division by zero!\"\n    else:\n        return zeros / non_zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def zero_count(nums):\n    \"\"\"\n    Find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count/non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes / non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_nonzeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_nonzeroes += 1\n            \n    if count_nonzeroes == 0:\n        return None\n    else:\n        return count_zeroes / count_nonzeroes"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    \n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n = n >> 1\n        \n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n = n >> 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n:\n        if n & 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n\n    while n != 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    C = 2 * 3.14 * r\n    return C"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    This function takes a radius 'r' as input and returns the circumference of the circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = set()\n    for sublist in test_list:\n        for num in sublist:\n            flattened.add(num)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for item in sublist:\n            result.add(item)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([num for sublist in test_list for num in sublist])\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # create an empty set to store the flattened list\n    flattened_set = set()\n    \n    # iterate through each item in the list\n    for item in test_list:\n        # if the item is a list, recursively call the function on the sublist\n        if isinstance(item, list):\n            flattened_set |= extract_singly(item)\n        # if the item is a number, add it to the set\n        elif isinstance(item, (int, float)):\n            flattened_set.add(item)\n    \n    return flattened_set\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = set()\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.add(item)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return set(flattened_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        if type(i) == list:\n            flattened_list.extend(extract_singly(i))\n        else:\n            flattened_list.append(i)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set to store the flattened list\n    flattened_set = set()\n    # Loop through each element in the list\n    for element in test_list:\n        # If the element is a list, recursively call the function\n        if isinstance(element, list):\n            flattened_set = flattened_set.union(extract_singly(element))\n        # If the element is a number, add it to the set\n        else:\n            flattened_set.add(element)\n    # Return the flattened set\n    return flattened_set\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    while n > 1:\n        # find index of maximum element in nums\n        mi = nums.index(max(nums[:n]))\n        # move it to the beginning\n        nums = nums[mi:n] + nums[:mi]\n        # reverse the first n elements\n        nums = nums[:n][::-1]\n        n -= 1\n\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort.\n    '''\n    n = len(nums)\n    while n > 1:\n        # find index of max value in nums\n        max_val = max(nums[:n])\n        max_idx = nums.index(max_val)\n        # reverse list from 0 to max_idx+1\n        nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n        # reverse list from 0 to n\n        nums = nums[:n][::-1] + nums[n:]\n        n -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in the list\n        max_idx = nums.index(max(nums[:n]))\n        # Reverse the list from 0 to max_idx\n        nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n        # Reverse the list from 0 to n-1\n        nums = nums[:n][::-1]\n        # Decrement n\n        n -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        # Find the index of the maximum number in the list\n        max_num_index = nums.index(max(nums[:i]))\n        # Reverse the list from 0 to max_num_index\n        nums = nums[max_num_index::-1] + nums[max_num_index+1:]\n        # Reverse the list from 0 to i\n        nums = nums[i::-1] + nums[i+1:]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n\n    for i in range(n-1, 0, -1):\n        # find the index of the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:i+1]))\n\n        # reverse the list from 0 to max_index+1 (inclusive)\n        nums[:max_index+1] = reversed(nums[:max_index+1])\n\n        # reverse the entire list\n        nums[:i+1] = reversed(nums[:i+1])\n\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        # Find the index of the maximum element in the list\n        max_index = nums.index(max(nums[:i]))\n        # Reverse the list from 0 to max_index+1\n        nums[:max_index+1] = reversed(nums[:max_index+1])\n        # Reverse the list from 0 to i\n        nums[:i] = reversed(nums[:i])\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(arr, k):\n        start = 0\n        while start < k:\n            temp = arr[start]\n            arr[start] = arr[k]\n            arr[k] = temp\n            start += 1\n            k -= 1\n\n    size = len(nums)\n    while size > 1:\n        max_idx = 0\n        for i in range(size):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        flip(nums, max_idx)\n        flip(nums, size-1)\n        size -= 1\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in the list\n        max_idx = nums.index(max(nums[:n]))\n        # Reverse the list up to the maximum element\n        nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n        # Reverse the list up to the first element\n        nums = nums[:n][::-1] + nums[n:]\n        n -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element\n        idx = nums.index(max(nums[:i]))\n        # Reverse the sublist from 0 to idx+1\n        nums = nums[idx+1:i+1][::-1] + nums[idx+1:i+1]\n        # Reverse the entire list\n        nums = nums[i-1::-1] + nums[i-1:]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index != i:\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n            nums[:i+1] = reversed(nums[:i+1])\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_lists(input_tuple):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in input_tuple:\n        if type(element) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_lists(input_tuple):\n    '''\n    This function takes a tuple as input and returns the number of lists inside the tuple.\n    '''\n    count = 0\n    for element in input_tuple:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_lists(input_tuple):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in input_tuple:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if abs(diff) > abs(max_diff):\n            max_diff = diff\n    return abs(max_diff)\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    min_val = arr[0]\n    max_val = arr[1]\n    \n    for i in range(2, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n            \n        diff = max_val - min_val\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):  \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            abs_diff = abs(arr[i] - arr[j])\n            if abs_diff > max_diff:\n                max_diff = abs_diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    \n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a solution exists\n    if n % gcd(a, b) == 0:\n        # Find the Bezout coefficients using the extended Euclidean algorithm\n        s, t, g = extended_gcd(a, b)\n        # Scale the Bezout coefficients to get the particular solution\n        x = n // g * s\n        y = n // g * t\n        return (x, y)\n    else:\n        return None\n\n\ndef extended_gcd(a, b):\n    '''\n    Returns the Bezout coefficients and their greatest common divisor for two integers a and b.\n    '''\n    if b == 0:\n        return (1, 0, a)\n    else:\n        s, t, g = extended_gcd(b, a % b)\n        return (t, s - (a // b) * t, g)\n\n\ndef gcd(a, b):\n    '''\n    Returns the greatest common divisor of two integers a and b.\n    '''\n    while b != 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = n // b, -n // a\n        return (x, y)\n        \ndef gcd(a, b):\n    '''\n    Returns the greatest common divisor of two numbers using Euclid's algorithm.\n    '''\n    while b != 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = extended_gcd(a, b)\n        x = x * (n // gcd(a, b))\n        y = y * (n // gcd(a, b))\n        return x, y\n\ndef gcd(a, b):\n    '''\n    Computes the gcd of two integers a and b using the Euclidean algorithm.\n    '''\n    while b:\n        a, b = b, a % b\n    return a\n\ndef extended_gcd(a, b):\n    '''\n    Computes the extended gcd of two integers a and b using the extended Euclidean algorithm.\n    Returns a tuple (x, y) such that ax + by = gcd(a, b).\n    '''\n    if b == 0:\n        return (1, 0)\n    x, y = extended_gcd(b, a % b)\n    return (y, x - (a // b) * y)\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n\n    # Check if a solution exists\n    if n % gcd(a, b) == 0:\n\n        # Find the B\u00e9zout's coefficients\n        x, y = bezout_coefficients(a, b)\n\n        # Multiply the B\u00e9zout's coefficients by n//gcd(a,b)\n        x = x * (n // gcd(a, b))\n        y = y * (n // gcd(a, b))\n\n        return x, y\n\n    else:\n        return None\n\n\ndef gcd(a, b):\n    \"\"\"\n    Return the greatest common divisor of a and b using Euclid's algorithm.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef bezout_coefficients(a, b):\n    \"\"\"\n    Return the B\u00e9zout's coefficients for a and b using the extended Euclidean algorithm.\n    \"\"\"\n    # Initialize the coefficients\n    x1, y1 = 1, 0\n    x2, y2 = 0, 1\n\n    while b != 0:\n        # Update the coefficients\n        q = a // b\n        x1, y1 = x2, y2\n        x2 = x1 - q * x2\n        y2 = y1 - q * y2\n\n        # Update the remainders\n        a, b = b, a - q * b\n\n    return x1, y1\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    elif b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    else:\n        gcd, s, t = extended_gcd(a, b)\n        if n % gcd == 0:\n            x = s * (n // gcd)\n            y = t * (n // gcd)\n            return (x, y)\n        else:\n            return None\n\n\ndef extended_gcd(a, b):\n    '''\n    Computes the gcd of a and b, as well as the coefficients of bezout's identity, i.e. numbers s and t such that\n    a * s + b * t = gcd(a, b)\n    '''\n    r0, r1 = a, b\n    s0, s1 = 1, 0\n    t0, t1 = 0, 1\n    while r1 != 0:\n        q = r0 // r1\n        r0, r1 = r1, r0 - q * r1\n        s0, s1 = s1, s0 - q * s1\n        t0, t1 = t1, t0 - q * t1\n    return r0, s0, t0\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0 and b == 0:\n        return None  # No solution exists\n    elif n % gcd(a, b) != 0:\n        return None  # No solution exists\n    else:\n        # Find the Bezout's coefficients\n        x, y, _ = extended_gcd(a, b)\n        # Multiply them by n/gcd(a,b)\n        x = x * (n // gcd(a, b))\n        y = y * (n // gcd(a, b))\n        return (x, y)\n\n\ndef gcd(a, b):\n    \"\"\"\n    Compute the greatest common divisor of two integers using Euclid's algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef extended_gcd(a, b):\n    \"\"\"\n    Compute the extended GCD algorithm.\n    Returns a tuple (x, y, gcd(a, b)) such that ax + by = gcd(a, b).\n    \"\"\"\n    if b == 0:\n        return (1, 0, a)\n    x1, y1, gcd = extended_gcd(b, a % b)\n    x = y1\n    y = x1 - (a // b) * y1\n    return (x, y, gcd)\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    d = gcd(a, b)\n    if n % d != 0:\n        return None\n    else:\n        x = (n * inv(a, b)) % b\n        y = (n * inv(b, a)) % a\n        return (x, y)\n\n\ndef gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of a and b.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef inv(a, b):\n    \"\"\"\n    Returns the inverse of a modulo b, or None if no inverse exists.\n    \"\"\"\n    g = gcd(a, b)\n    if g != 1:\n        return None\n    else:\n        return pow(a, b-2, b)\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # if a and b both divide n, then we can find the solution\n    if n % a == 0 and n % b == 0:\n        x = n // a\n        y = n // b\n        return (x, y)\n    else:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    # Check if a solution exists\n    if n % gcd(a, b) != 0:\n        return None\n    # Find B\u00e9zout's coefficients using the extended Euclidean algorithm\n    s, t, sn, tn = 0, 1, b, a\n    while tn != 0:\n        q, r = sn // tn, sn % tn\n        s, t, sn, tn = t, s - q * t, tn, sn - q * tn\n    # Compute the solution using the Bezout's coefficients\n    x, y = s, (n - a * s) // b\n    return (x, y)\n\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = n // b, -(n // a)\n        return x, y\n\ndef gcd(a, b):\n    '''\n    Calculate the greatest common divisor of two integers using Euclid's algorithm.\n    '''\n    while b != 0:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Using list comprehension to filter out elements from list1 that are present in list2\n    filtered_list = [elem for elem in list1 if elem not in list2]\n    return filtered_list\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [elem for elem in list1 if elem not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Using list comprehension to create a new list containing only elements from list1 that are not present in list2\n    return [elem for elem in list1 if elem not in list2]\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2 + 1):\n        sum += n - 2*i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    for i in range(n//2):\n        total_sum += (n - 2*i)\n    return total_sum\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    # initialize the sum variable\n    sum = 0\n\n    # loop through the values of i from 0 to n//2\n    for i in range(n//2):\n        # add the value of (n-2*i) to the sum\n        sum += n - 2*i\n\n    # return the final sum\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n//2 + 1):\n        total += n - 2*i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += (n - 2 * i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    \"\"\"\n    This function takes two arguments:\n    s: the length of the sides of the polygon\n    l: the number of sides of the polygon\n\n    It returns the area of the polygon.\n    \"\"\"\n\n    # Calculate the radius of the circumscribed circle\n    r = s / (2 * tan(pi / l))\n\n    # Calculate the area of the polygon using the formula: A = (1/2) * s * r * l\n    area = (1/2) * s * r * l\n\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon given the length and number of its sides.\n    \"\"\"\n    area = (l ** 2) / (4 * tan(pi / s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l ** 2) / (4 * math.tan(math.pi / s))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = l\n    a = s/(2*tan(pi/n))\n    area = (n*a**2)/(4*tan(pi/n))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l ** 2) / (4 * tan(pi / s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculates the area of a regular polygon given its side length and number of sides.\n    \"\"\"\n    area = (l ** 2) / (4 * math.tan(math.pi / l))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l ** 2) / (4 * math.tan(math.pi / s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l**2) / (4 * tan(pi / s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon given the length and number of its sides.\n    \"\"\"\n    area = (s**2 * l**2) / (4 * math.tan(math.pi/l))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2 * l**2) / (4 * math.tan(math.pi/l))\n    return area\n"
    },
    {
        "number": 164,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum1 = []\n    div_sum2 = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum1.append(i)\n    for j in range(1, n+1):\n        if (n+2) % j == 0:\n            div_sum2.append(j)\n    if sum(div_sum1) == sum(div_sum2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum"
    },
    {
        "number": 164,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n1, n2):\n    def sum_divisors(n):\n        divisors = set()\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                if i != n // i:\n                    divisors.add(n // i)\n        return sum(divisors)\n    \n    return sum_divisors(n1) == sum_divisors(n2)\n"
    },
    {
        "number": 164,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n1, n2):\n    '''\n    This function takes two integers as input and returns True if the sum of their divisors\n    is the same, else returns False.\n    '''\n    # Calculate the sum of divisors of n1 and n2\n    div_sum_n1 = sum(i for i in range(1, n1+1) if n1 % i == 0)\n    div_sum_n2 = sum(i for i in range(1, n2+1) if n2 % i == 0)\n    \n    # Check if the sum of divisors of n1 and n2 are the same\n    if div_sum_n1 == div_sum_n2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n1, n2):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(num):\n        '''\n        Returns the sum of all divisors of a number, excluding the number itself.\n        '''\n        sum = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                if num//i == i:\n                    sum += i\n                else:\n                    sum += i + num//i\n        return sum\n    \n    return sum_divisors(n1) == sum_divisors(n2)\n"
    },
    {
        "number": 164,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Return a list of pairs of integers whose divisor sums are equal to n.\n    \"\"\"\n    pairs = []\n    for i in range(1, n+1):\n        # Compute the sum of the divisors of i\n        div_sum_i = sum(j for j in range(1, i+1) if i % j == 0)\n        # Check if the sum of the divisors of i is equal to n\n        if div_sum_i == n:\n            # If so, find a pair of integers whose divisor sums are equal to n\n            for j in range(i+1, n+1):\n                div_sum_j = sum(k for k in range(1, j+1) if j % k == 0)\n                if div_sum_j == n:\n                    pairs.append((i, j))\n                    break\n    return pairs\n"
    },
    {
        "number": 164,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of two integers are the same, else returns False.\n    '''\n    divisors_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors_sum += i\n            \n    if divisors_sum == 2*n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n1, n2): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(num):\n        divisor_sum = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                if num//i == i:\n                    divisor_sum += i\n                else:\n                    divisor_sum += i + num//i\n        return divisor_sum\n    \n    sum1 = sum_divisors(n1)\n    sum2 = sum_divisors(n2)\n    \n    if sum1 == sum2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of divisors of n\n    sum_div = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_div += i\n    \n    # Check if the sum of divisors is a perfect square\n    root = int(math.sqrt(sum_div))\n    if root*root == sum_div:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n1, n2):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_sum1 = 0\n    divisors_sum2 = 0\n\n    # calculate sum of divisors of n1\n    for i in range(1, n1+1):\n        if n1 % i == 0:\n            divisors_sum1 += i\n\n    # calculate sum of divisors of n2\n    for i in range(1, n2+1):\n        if n2 % i == 0:\n            divisors_sum2 += i\n\n    # check if the sums are equal\n    if divisors_sum1 == divisors_sum2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and ord(str1[i].lower()) == i+97:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i+97):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if i == ord(str1[i].lower()) - ord('a'):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i + 97):\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1):\n        if char.lower() == chr(i + 97):\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if i+1 == ord(str1[i].lower()) - 96:\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if ord(str1[i]) - 97 == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if i+1 == ord(str1[i].lower()) - 96:\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_char_position(str1):  \n    count = 0\n    for i in range(len(str1)):\n        if ord(str1[i].lower()) - 96 == i+1:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if chr(ord('a')+i).lower() == str1[i].lower():\n            count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n"
    },
    {
        "number": 167,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    \n    power = 1\n    while power < n:\n        power *= 2\n    \n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"
    },
    {
        "number": 167,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n"
    },
    {
        "number": 168,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    This function takes two arguments - a list 'a' and a number 'x'. It returns the count of occurrences of 'x' in the list 'a'.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list 'a' and a number 'x' as input and returns the count of occurrences of 'x' in 'a'.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    This function finds the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Create a new list that contains only the elements between indices m and n (inclusive).\n    sub_list = list1[m:n+1]\n    # Calculate the sum of the elements in the sub_list using the built-in sum() function.\n    sub_sum = sum(sub_list)\n    # Return the sum.\n    return sub_sum\n"
    },
    {
        "number": 170,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 171,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5  # number of sides of a pentagon\n    return n * a\n"
    },
    {
        "number": 171,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5  # number of sides of a pentagon\n    perimeter = n * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = 5\n    perimeter = sides * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = 5\n    perimeter = sides * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = 5\n    perimeter = sides * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5  # number of sides of a pentagon\n    return n * a\n"
    },
    {
        "number": 171,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = 5\n    perimeter = sides * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5  # number of sides of the pentagon\n    perimeter = n * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5 # number of sides of a pentagon\n    p = n * a\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5  # number of sides of a pentagon\n    perimeter = n * a\n    return perimeter\n"
    },
    {
        "number": 172,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] == 'std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] == 'std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    This function takes a tuple as input and returns True if all the elements in the tuple have the same data type, otherwise False.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        print(\"Empty tuple!\")\n        return False\n    else:\n        data_type = type(test_tuple[0])\n        for element in test_tuple:\n            if type(element) != data_type:\n                return False\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i) != data_type:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(isinstance(x, type(test_tuple[0])) for x in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif arr[i] > x:\n            break\n    return count > n // 2\n"
    },
    {
        "number": 223,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Returns True if x is the majority element in arr, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2\n"
    },
    {
        "number": 223,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif arr[i] > x:\n            break\n    return count > n//2\n"
    },
    {
        "number": 223,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n    if count > n//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Find the index of the given element in the array\n    index = binary_search(arr, 0, n-1, x)\n\n    # Check if the element is the majority element\n    if index != -1:\n        count = 1\n        left = index - 1\n        right = index + 1\n\n        # Count the occurrences of the element to the left of it\n        while left >= 0 and arr[left] == x:\n            count += 1\n            left -= 1\n\n        # Count the occurrences of the element to the right of it\n        while right < n and arr[right] == x:\n            count += 1\n            right += 1\n\n        # Check if the element is the majority element\n        if count > n/2:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n\ndef binary_search(arr, low, high, x):\n    '''\n    Find the index of the given element in the array using binary search\n    '''\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n    else:\n        return -1\n"
    },
    {
        "number": 223,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    # Check if the array is empty or has only one element\n    if n < 2:\n        return False\n    \n    # Initialize variables to keep track of the current element and its count\n    current_element = arr[0]\n    count = 1\n    \n    # Loop through the array and count occurrences of the current element\n    for i in range(1, n):\n        if arr[i] == current_element:\n            count += 1\n        else:\n            # If a different element is found, check if it's the majority element\n            if count > n // 2:\n                return True\n            # Otherwise, update the current element and its count\n            current_element = arr[i]\n            count = 1\n    \n    # Check the last element and return True if it's the majority element\n    return count > n // 2\n"
    },
    {
        "number": 223,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2\n"
    },
    {
        "number": 224,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes a number n as input and returns the number of set bits (binary digits with value 1) in n.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer n as input and returns the count of set bits in the binary representation of n.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def odd_values_string(string):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def odd_values_string(string):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return string[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def odd_values_string(string):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def odd_values_string(string):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return string[::2]"
    },
    {
        "number": 226,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def odd_values_string(string):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return string[::2]\n"
    },
    {
        "number": 227,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 227,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num\n"
    },
    {
        "number": 227,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 228,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Loop through the range and check if all bits are set or not\n    for i in range(l, r+1):\n        if n & i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Loop through the range and check if all bits are set to 1\n    for i in range(l, r+1):\n        if (n & i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    # Create a mask with all bits set to 1 from l to r\n    mask = (1 << r) - 1 - ((1 << l) - 1)\n    \n    # Check if the bitwise AND of n and mask is 0 or not\n    return (n & mask) == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert n to binary string and reverse it\n    n_bin = bin(n)[2:][::-1]\n    # set all bits to 1\n    all_ones = '1'*len(n_bin)\n\n    # check if the bits between l and r are all set to 1\n    return n_bin[l:r+1] == all_ones[l:r+1]\n"
    },
    {
        "number": 228,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Loop through the range from l to r\n    for i in range(l, r+1):\n        # Check if all the bits are set in the current number\n        if n & i == 0:\n            return False\n    # If all bits are set in the given range, return True\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Find the bitwise AND of the given range of numbers\n    bitwise_and = l & r\n    # If the bitwise AND is equal to zero, all bits are unset\n    if bitwise_and == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # create a mask with all bits set to 1 from l to r\n    mask = (1 << (r + 1)) - (1 << l)\n    # check if all the bits are set to 1 in the given range\n    if (n & mask) == mask:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert n, l, r to binary strings\n    n = bin(n)[2:]\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n    \n    # Check if l is greater than n, if yes then return False\n    if len(l) > len(n) or len(r) > len(n):\n        return False\n    \n    # Check if any bit is set in the given range\n    for i in range(len(l), len(n)):\n        if n[i] == '1':\n            return False\n    \n    # Check if all bits are set in the given range\n    if r > n:\n        return False\n    \n    # If all the bits are unset, return True\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Loop through each bit in the given range\n    for i in range(l, r+1):\n        # Check if the bit is not set to 1\n        if n & (1 << i) == 0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if (n & i) == 0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 229,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers to keep track of the last negative element and last positive element\n    last_neg = 0\n    last_pos = n - 1\n    \n    # Loop through the first n elements of the array\n    for i in range(n):\n        # If the current element is negative, swap it with the element at last_neg and increment last_neg\n        if arr[i] < 0:\n            arr[i], arr[last_neg] = arr[last_neg], arr[i]\n            last_neg += 1\n        # If the current element is positive, swap it with the element at last_pos and decrement last_pos\n        elif arr[i] > 0:\n            arr[i], arr[last_pos] = arr[last_pos], arr[i]\n            last_pos -= 1\n            \n    # Return the modified array\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    for i in range(len(neg)):\n        arr[i] = neg[i]\n    \n    for i in range(len(pos)):\n        arr[n+i] = pos[i]\n    \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_indices = []\n    pos_indices = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_indices.append(i)\n        else:\n            pos_indices.append(i)\n    # Re-arrange the array\n    j = 0\n    for i in range(n):\n        if i in neg_indices:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    arr = neg + pos + arr[n:]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = n - 1\n\n    # Loop through the first n elements of the array\n    while left < right:\n        # If the leftmost element is positive, move both pointers to the right\n        if arr[left] >= 0:\n            left += 1\n        # If the rightmost element is negative, move both pointers to the left\n        elif arr[right] < 0:\n            right -= 1\n        # If both pointers point to positive and negative elements, respectively, swap them and move both pointers to the right and left, respectively\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two sub-arrays, one for negative elements and one for positive elements\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    # Merge the two sub-arrays\n    return negative + positive\n"
    },
    {
        "number": 229,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Find the first negative element in the array\n    index = 0\n    while index < n and arr[index] >= 0:\n        index += 1\n\n    # If there are no negative elements in the first n elements, return the original array\n    if index == n:\n        return arr\n\n    # Create two pointers, one at the beginning and one at the end of the first n elements\n    left, right = index, n - 1\n\n    # Swap elements until the pointers meet at the middle\n    while left < right:\n        # If the element at the left pointer is negative, increment the pointer\n        if arr[left] < 0:\n            left += 1\n        # If the element at the right pointer is positive, decrement the pointer\n        elif arr[right] >= 0:\n            right -= 1\n        # If the element at the left pointer is positive and the element at the right pointer is negative, swap them\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n\n    # If there are still negative elements in the first n elements after re-arranging, move them to the beginning of the array\n    if index > 0:\n        arr[:index] = sorted(arr[:index], reverse=True)\n\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists for negative and positive elements\n    neg = []\n    pos = []\n    # Loop through the first n elements of the array\n    for i in range(n):\n        # If the element is negative, append it to the neg list\n        if arr[i] < 0:\n            neg.append(arr[i])\n        # If the element is positive, append it to the pos list\n        else:\n            pos.append(arr[i])\n    # Re-arrange the array by concatenating the neg and pos lists\n    arr[:n] = neg + pos\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character,\n    replaces blank spaces in the string with the character,\n    and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character,\n    and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in a string with a given character.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character,\n    and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character,\n    and returns the string.\n    '''\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character,\n    and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replaces blank spaces in a string with a given character.\n    \"\"\"\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 232,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a copy of the list and reverse it\n    list2 = list1.copy()\n    list2.reverse()\n    # Use heapq module to find the n largest items\n    largest_items = heapq.nlargest(n, list2)\n    # Reverse the list again and return it\n    largest_items.reverse()\n    return largest_items\n"
    },
    {
        "number": 232,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import heapq\n\ndef largest_n_numbers(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result[::-1]\n"
    },
    {
        "number": 232,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap and add all elements of the list\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n    \n    # pop the smallest n items from the heap and store them in a list\n    n_largest = []\n    for i in range(n):\n        n_largest.append(heapq.heappop(heap))\n    \n    # return the list of n largest items\n    return n_largest\n"
    },
    {
        "number": 232,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap[::-1]\n"
    },
    {
        "number": 232,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap[::-1]\n"
    },
    {
        "number": 232,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for i in range(n)]\n"
    },
    {
        "number": 232,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a copy of the input list and heapify it in descending order\n    heap = list1.copy()\n    heapq.heapify(heap)\n    # pop the n largest items from the heap and store them in a list\n    largest_n = []\n    for i in range(n):\n        if len(heap) > 0:\n            largest_n.append(heapq.heappop(heap))\n    # return the list of n largest items\n    return largest_n\n"
    },
    {
        "number": 232,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import heapq\n\ndef largest_n_numbers(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n    return [heapq.heappop(heap) for i in range(n)]\n"
    },
    {
        "number": 232,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 233,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def lateral_surface_area_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n"
    },
    {
        "number": 233,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    This function finds the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n"
    },
    {
        "number": 234,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 235,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes in an integer n and sets all even bits of n to 1.\n    It returns the modified value of n.\n    '''\n    # mask to set all even bits to 1\n    mask = 0xAAAAAAAA\n    # setting all even bits of n to 1 using bitwise OR operator\n    n |= mask\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    # 1. Loop through all the bits in the number\n    for i in range(32):\n        # 2. Check if the current bit is even\n        if i % 2 == 0:\n            # 3. If it is even, set the corresponding bit in the number\n            n |= (1 << i)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    This function sets all the even bits of a given number to 1.\n    \"\"\"\n    return n | (n >> 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Set all even bits of a given number.\n    '''\n    # Get the binary representation of the number\n    binary_representation = bin(n)\n    # Convert the binary string to a list of characters\n    binary_list = list(binary_representation)\n    # Iterate over the list and set all even bits to 1\n    for i in range(1, len(binary_list), 2):\n        binary_list[i] = '1'\n    # Join the list of characters to form a new binary string\n    new_binary_string = ''.join(binary_list)\n    # Convert the new binary string to an integer\n    result = int(new_binary_string, 2)\n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Iterate through the bits of the given number\n    for i in range(32):\n        # Check if the current bit is even or not\n        if i%2 == 0:\n            # Set the current even bit to 1\n            n = n | (1<<i)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Iterate through each bit of the number\n    for i in range(32):\n        # If the bit is even and is zero, set it to 1\n        if i%2 == 0 and (n & (1<<i)) == 0:\n            n = n | (1<<i)\n    # Return the modified number\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    # Convert the given number to binary representation\n    binary_n = bin(n)[2:]\n    \n    # Iterate through the binary representation of the number\n    for i in range(len(binary_n)):\n        # If the current bit is even, set it to 1\n        if i % 2 == 0:\n            binary_n = binary_n[:i] + '1' + binary_n[i+1:]\n    \n    # Convert the modified binary representation back to decimal\n    result = int(binary_n, 2)\n    \n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Sets all even bits of a given number.\n    '''\n    # convert the number to binary representation\n    binary = bin(n)[2:]\n    # create a list of the binary digits\n    digits = [int(d) for d in binary]\n    # set the even bits to 1\n    for i in range(len(digits)):\n        if i % 2 == 0:\n            digits[i] = 1\n    # convert the list of digits back to an integer\n    result = 0\n    for d in digits:\n        result = (result << 1) | d\n    # return the result\n    return result\n"
    },
    {
        "number": 235,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes a number as input and returns a new number with all even bits set to 1.\n    '''\n    # Iterate over the binary representation of the number\n    binary_representation = bin(n)[2:]\n    new_binary = ''\n    for i, bit in enumerate(binary_representation):\n        # If the bit is even, set it to 1\n        if i % 2 == 0:\n            new_binary += '1'\n        else:\n            new_binary += bit\n    # Convert the new binary number to decimal and return it\n    return int(new_binary, 2)\n"
    },
    {
        "number": 237,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    tuple_counts = Counter(test_list)\n    return tuple_counts\n"
    },
    {
        "number": 237,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the unique tuples and their counts.\n    counts = {}\n    # Loop through each tuple in the list.\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it and set its count to 1.\n        if tup not in counts:\n            counts[tup] = 1\n        # If the tuple is already in the dictionary, increment its count.\n        else:\n            counts[tup] += 1\n    # Return the dictionary of unique tuples and their counts.\n    return counts\n"
    },
    {
        "number": 238,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def number_of_substrings(string):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    return (n * (n+1)) // 2\n"
    },
    {
        "number": 238,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def number_of_substrings(s):\n    n = len(s)\n    return (n*(n+1)//2)\n"
    },
    {
        "number": 238,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a Python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    n = len(str)\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 238,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def number_of_substrings(string):\n    '''\n    Count the number of non-empty substrings of a given string.\n    '''\n    n = len(string)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize a count variable to store the number of sequences\n    count = 0\n    \n    # Create a list to store all the valid elements for the first element of the sequence\n    valid_elements = [i for i in range(1, m+1) if i <= 2]\n    \n    # Loop through all the valid elements for the first element\n    for i in valid_elements:\n        \n        # Initialize a list to store the current sequence\n        curr_seq = [i]\n        \n        # Recursively find all the possible sequences for the remaining elements\n        count += get_total_number_of_sequences_recursive(m, n-1, curr_seq)\n        \n    return count\n\ndef get_total_number_of_sequences_recursive(m, n, curr_seq):\n    '''\n    Recursive function to find all the possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # If the length of the current sequence is equal to n, return 1 as we have found a valid sequence\n    if len(curr_seq) == n:\n        return 1\n    \n    # Initialize a count variable to store the number of sequences for this recursive call\n    count = 0\n    \n    # Get the last element of the current sequence\n    last_element = curr_seq[-1]\n    \n    # Create a list to store all the valid elements for the next element of the sequence\n    valid_elements = [i for i in range(last_element*2, m+1) if i <= last_element*2]\n    \n    # Loop through all the valid elements for the next element\n    for i in valid_elements:\n        \n        # Create a new list for the next recursive call with the new element added to the current sequence\n        new_seq = curr_seq + [i]\n        \n        # Recursively find all the possible sequences for the remaining elements\n        count += get_total_number_of_sequences_recursive(m, n-1, new_seq)\n        \n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n):\n    if n == 1:\n        return m\n    elif n == 2:\n        return sum(range(2,m+1))\n    else:\n        total = 0\n        for i in range(2,m+1):\n            total += get_total_number_of_sequences(i,n-1)\n        return total\n"
    },
    {
        "number": 239,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        # There is only one possible sequence of length 1\n        return 1\n    elif m < 3:\n        # There are no possible sequences if m < 3\n        return 0\n    else:\n        # Calculate the number of possible sequences for each first element in the sequence\n        total_sequences = 0\n        for i in range(2, m+1):\n            # Calculate the maximum length of the sequence starting with i\n            max_length = n\n            if i == 2:\n                # If i is 2, the sequence must start with 2, 3, 4, ...\n                max_length = min(m // i, n)\n            elif i > m:\n                # If i is greater than m, there are no possible sequences\n                break\n            \n            # Calculate the number of possible sequences starting with i and having length max_length\n            sequences_with_i = 1\n            for j in range(2, max_length+1):\n                # Calculate the maximum value for the next element in the sequence\n                max_value = min(i*2, m)\n                # Calculate the number of possible values for the next element in the sequence\n                num_values = max_value - i\n                # Add the number of possible values to the total count of sequences\n                sequences_with_i += num_values\n                # Update i to the next value\n                i *= 2\n            \n            # Add the total number of sequences starting with i to the overall count\n            total_sequences += sequences_with_i\n        \n        return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the number of possible sequences for each length\n    sequence_counts = [0] * (n + 1)\n    # Set the number of sequences for a length 1 sequence to m\n    sequence_counts[1] = m\n    # Loop through each length from 2 to n\n    for length in range(2, n + 1):\n        # Calculate the number of possible sequences for this length\n        for element in range(2, m + 1):\n            # The number of possible sequences with this element is the sum of the number of possible sequences for each previous element that's less than or equal to the square root of this element\n            sequence_counts[length] += sum(sequence_counts[length - 1][:int(element ** 0.5) + 1])\n    # Return the total number of possible sequences\n    return sequence_counts[n]\n"
    },
    {
        "number": 239,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < 2 or n < 1:  # invalid input\n        return 0\n    elif n == 1:  # only one possible sequence of length 1\n        return 1 if 2 <= m else 0\n    else:  # recursively compute number of sequences for each possible first element\n        total = 0\n        for i in range(2, m+1):\n            total += get_total_number_of_sequences(i*2-1, n-1)\n        return total\n"
    },
    {
        "number": 239,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m <= 2:\n        return 0\n\n    # Initialize the list with the first element of the sequence\n    sequences = [[1]]\n\n    for i in range(1, n):\n        new_sequences = []\n\n        # Iterate through all existing sequences\n        for sequence in sequences:\n            # Calculate the new element for the sequence\n            new_element = 2 * sequence[-1]\n\n            # Check if the new element is within the range of m\n            if new_element <= m:\n                # Create a new sequence with the new element\n                new_sequence = sequence + [new_element]\n\n                # Add the new sequence to the list of sequences\n                new_sequences.append(new_sequence)\n\n        # Update the list of sequences with the new sequences\n        sequences = new_sequences\n\n    # Return the total number of sequences\n    return len(sequences)\n"
    },
    {
        "number": 239,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return m\n\n    total_sequences = 0\n    for i in range(2, m+1):\n        total_sequences += get_total_number_of_sequences(i-1, n-1)\n\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # create a list to store the sequence\n    sequence = [2]\n    # loop through the sequence and append the next element to the list\n    for i in range(1, n):\n        next_element = sequence[i-1]*2\n        if next_element > m:\n            break\n        sequence.append(next_element)\n    # calculate the number of possible sequences\n    num_sequences = 1\n    for i in range(1, len(sequence)):\n        num_sequences *= (sequence[i] - sequence[i-1])\n    return num_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    total_sequences = 0\n    for i in range(2, m+1):\n        total_sequences += get_total_number_of_sequences(i, n-1)\n    return total_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    total = 0\n    for i in range(2, m+1):\n        total += get_total_number_of_sequences(i, n-1)\n    return total\n"
    },
    {
        "number": 240,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Removing the last element from the first list\n    list1.pop()\n    # Extending the first list with the elements of the second list\n    list1.extend(list2)\n    # Returning the modified first list\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < 1:\n        raise ValueError(\"List 1 should have at least one element.\")\n    elif len(list2) < 1:\n        raise ValueError(\"List 2 should have at least one element.\")\n    else:\n        list1[-1] = list2\n        return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for element in list2:\n        list1.append(element)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()  # remove last element of list1\n    list1.extend(list2)  # add elements of list2 to list1\n"
    },
    {
        "number": 240,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()  # remove last element of list1\n    list1.extend(list2)  # add elements of list2 to list1\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for element in list2:\n        list1.append(element)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of the given number\n    sqrt_N = int(math.sqrt(N))\n    # Find the next integer square greater than sqrt_N\n    next_square = (sqrt_N + 1) ** 2\n    return next_square\n"
    },
    {
        "number": 244,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return (int(root) + 1)**2\n    else:\n        return (int(root) + 2)**2\n"
    },
    {
        "number": 244,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square_root = int(math.sqrt(N)) + 1\n    next_square = (square_root * square_root)\n    return next_square\n"
    },
    {
        "number": 244,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root.is_integer():\n        return (int(root) + 1) ** 2\n    else:\n        return math.ceil(root) ** 2"
    },
    {
        "number": 244,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of the given number\n    sqrt_N = math.sqrt(N)\n    # Find the nearest integer to the square root\n    int_sqrt_N = math.ceil(sqrt_N)\n    # Calculate the next perfect square\n    next_square = (int_sqrt_N ** 2) + 2*int_sqrt_N + 1\n    \n    return next_square\n"
    },
    {
        "number": 244,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.floor(math.sqrt(N))\n    return (root+1)**2\n"
    },
    {
        "number": 244,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # Find the square root of the given number\n    sqrt_N = math.sqrt(N)\n    \n    # Round up the square root to the nearest integer\n    int_sqrt_N = math.ceil(sqrt_N)\n    \n    # Multiply the rounded up square root with itself to get the next perfect square\n    next_perfect_square = int_sqrt_N ** 2\n    \n    return next_perfect_square\n"
    },
    {
        "number": 244,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    root = math.floor(math.sqrt(N)) + 1\n    return (root * root)\n"
    },
    {
        "number": 244,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return (int(root) + 1)**2\n    else:\n        return int(math.ceil(root))**2\n"
    },
    {
        "number": 244,
        "checkpoint": "34B",
        "pass": 9,
        "answer": ""
    },
    {
        "number": 245,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Calculate the maximum sum of increasing subsequence\n    max_increasing = [0] * n\n    max_increasing[0] = arr[0]\n    for i in range(1, n):\n        max_increasing[i] = max(max_increasing[i-1] + arr[i], arr[i])\n\n    # Calculate the maximum sum of decreasing subsequence\n    max_decreasing = [0] * n\n    max_decreasing[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        max_decreasing[i] = max(max_decreasing[i+1] + arr[i], arr[i])\n\n    # Find the maximum sum of bitonic subsequence\n    max_sum = max_increasing[0] + max_decreasing[0]\n    for i in range(1, n-1):\n        max_sum = max(max_sum, max_increasing[i] + max_decreasing[i+1])\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    # calculate maximum sum of increasing subsequence\n    increasing[0] = arr[0]\n    for i in range(1, n):\n        max_val = 0\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_val = max(max_val, increasing[j])\n        increasing[i] = max_val + arr[i]\n\n    # calculate maximum sum of decreasing subsequence\n    decreasing[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        max_val = 0\n        for j in range(i, n):\n            if arr[j] < arr[i]:\n                max_val = max(max_val, decreasing[j])\n        decreasing[i] = max_val + arr[i]\n\n    # find maximum sum of bitonic subsequence\n    max_sum = arr[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, increasing[i] + decreasing[i] - arr[i])\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize two lists to store the maximum increasing and decreasing subsequences\n    inc_subseq = [0] * n\n    dec_subseq = [0] * n\n    # Initialize the first element of both lists as the first element of the array\n    inc_subseq[0] = arr[0]\n    dec_subseq[0] = arr[0]\n    # Find the maximum increasing subsequence\n    for i in range(1, n):\n        # If the current element is greater than the previous element, add it to the maximum increasing subsequence\n        if arr[i] > arr[i-1]:\n            inc_subseq[i] = max(inc_subseq[i-1] + arr[i], arr[i])\n        else:\n            inc_subseq[i] = arr[i]\n    # Find the maximum decreasing subsequence\n    for i in range(n-2, -1, -1):\n        # If the current element is less than the next element, add it to the maximum decreasing subsequence\n        if arr[i] < arr[i+1]:\n            dec_subseq[i] = max(dec_subseq[i+1] + arr[i], arr[i])\n        else:\n            dec_subseq[i] = arr[i]\n    # Find the maximum sum of a bitonic subsequence by comparing the sum of the maximum increasing and decreasing subsequences\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc_subseq[i] + dec_subseq[i])\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    inc = []\n    dec = []\n    \n    for i in range(len(arr)):\n        if i == 0:\n            inc.append(arr[i])\n            dec.append(arr[i])\n        else:\n            inc.append(max(inc[i-1] + arr[i], arr[i]))\n            dec.append(max(dec[i-1] + arr[i], arr[i]))\n    \n    return max(max(inc), max(dec[:-1]))\n"
    },
    {
        "number": 245,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # initialize two lists to store the maximum sum for increasing and decreasing subsequences\n    inc_sum = [0] * n\n    dec_sum = [0] * n\n    # initialize the first element of increasing subsequence to the first element of the array\n    inc_sum[0] = arr[0]\n    # initialize the first element of decreasing subsequence to the last element of the array\n    dec_sum[n-1] = arr[n-1]\n    # calculate the maximum sum of increasing subsequence\n    for i in range(1, n):\n        inc_sum[i] = max(inc_sum[i-1]+arr[i], arr[i])\n    # calculate the maximum sum of decreasing subsequence\n    for i in range(n-2, -1, -1):\n        dec_sum[i] = max(dec_sum[i+1]+arr[i], arr[i])\n    # find the maximum sum of bitonic subsequence\n    max_bitonic_sum = float('-inf')\n    for i in range(n-1):\n        max_bitonic_sum = max(max_bitonic_sum, inc_sum[i]+dec_sum[i+1])\n    return max_bitonic_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    # Find the maximum sum of an increasing subsequence\n    increasing = [0] * n\n    increasing[0] = arr[0]\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            increasing[i] = max(increasing[i-1] + arr[i], arr[i])\n        else:\n            increasing[i] = arr[i]\n\n    # Find the maximum sum of a decreasing subsequence\n    decreasing = [0] * n\n    decreasing[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            decreasing[i] = max(decreasing[i+1] + arr[i], arr[i])\n        else:\n            decreasing[i] = arr[i]\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(n-1):\n        max_sum = max(max_sum, increasing[i] + decreasing[i+1])\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n\n    # Initialize variables to store the maximum sum of increasing and decreasing sequences\n    inc_sum = arr[0]\n    dec_sum = arr[-1]\n\n    # Initialize variables to store the maximum sum of bitonic sequence\n    max_bitonic_sum = arr[0]\n\n    # Traverse the array from left to right\n    for i in range(1, len(arr)):\n        # Update the maximum sum of increasing sequence\n        if arr[i] > inc_sum + arr[i]:\n            inc_sum = arr[i]\n        else:\n            inc_sum += arr[i]\n\n        # Update the maximum sum of bitonic sequence if the current element is greater than the previous one\n        if arr[i] > arr[i - 1]:\n            max_bitonic_sum += arr[i] - arr[i - 1]\n\n    # Traverse the array from right to left\n    for i in range(len(arr) - 2, -1, -1):\n        # Update the maximum sum of decreasing sequence\n        if arr[i] > dec_sum + arr[i]:\n            dec_sum = arr[i]\n        else:\n            dec_sum += arr[i]\n\n        # Update the maximum sum of bitonic sequence if the current element is less than the previous one\n        if arr[i] < arr[i + 1]:\n            max_bitonic_sum += arr[i + 1] - arr[i]\n\n    return max_bitonic_sum"
    },
    {
        "number": 245,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    # find the maximum increasing subsequence\n    increasing = []\n    for num in arr:\n        while increasing and increasing[-1] < num:\n            increasing.pop()\n        increasing.append(num)\n    \n    # find the maximum decreasing subsequence\n    decreasing = []\n    for num in arr[::-1]:\n        while decreasing and decreasing[-1] < num:\n            decreasing.pop()\n        decreasing.append(num)\n    \n    # find the maximum sum of the bitonic subsequence\n    return max(sum(increasing[:-1]) + sum(decreasing[:-1]), sum(increasing), sum(decreasing))\n"
    },
    {
        "number": 245,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_increasing = [0] * n\n    max_decreasing = [0] * n\n    \n    # Find the maximum increasing subsequence\n    max_increasing[0] = arr[0]\n    for i in range(1, n):\n        max_increasing[i] = max(max_increasing[i-1] + arr[i], arr[i])\n    \n    # Find the maximum decreasing subsequence\n    max_decreasing[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        max_decreasing[i] = max(max_decreasing[i+1] + arr[i], arr[i])\n    \n    # Find the maximum sum of a bitonic subsequence\n    max_sum = max_increasing[0]\n    for i in range(1, n):\n        if max_increasing[i] > max_sum:\n            max_sum = max_increasing[i]\n    \n    for i in range(n-1):\n        if max_increasing[i] + max_decreasing[i+1] > max_sum:\n            max_sum = max_increasing[i] + max_decreasing[i+1]\n            \n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Given an array, find the maximum sum of a bitonic subsequence.\n\n    A subsequence is bitonic if it is first increasing and then decreasing.\n\n    :param arr: a list of integers\n    :return: the maximum sum of a bitonic subsequence in the array\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Calculate the maximum increasing subsequence ending at each position\n    dp_inc = [0] * n\n    dp_inc[0] = arr[0]\n    for i in range(1, n):\n        dp_inc[i] = max(dp_inc[i - 1] + arr[i], arr[i])\n\n    # Calculate the maximum decreasing subsequence starting at each position\n    dp_dec = [0] * n\n    dp_dec[-1] = arr[-1]\n    for i in range(n - 2, -1, -1):\n        dp_dec[i] = max(dp_dec[i + 1] + arr[i], arr[i])\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(1, n - 1):\n        max_sum = max(max_sum, dp_inc[i - 1] + dp_dec[i + 1] - arr[i])\n\n    return max_sum\n"
    },
    {
        "number": 246,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    else:\n        guess = number / 2\n        while True:\n            new_guess = (guess + number / guess) / 2\n            if abs(new_guess - guess) < 0.00001:\n                return new_guess\n            guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0 or number == 1:\n        return number\n\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 10**-6:\n            return new_guess\n        guess = new_guess\n"
    },
    {
        "number": 246,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    Args:\n        number (float): The number to compute the square root of.\n\n    Returns:\n        float: The square root of the number.\n    \"\"\"\n    # Use 1 as an initial guess\n    guess = 1.0\n    # Keep track of the previous guess for convergence check\n    prev_guess = 0.0\n    # Keep iterating until the guess converges to the true square root\n    while abs(guess - prev_guess) > 0.0001:\n        # Update the previous guess\n        prev_guess = guess\n        # Compute the new guess as the average of the previous guess and the number divided by the previous guess\n        guess = (guess + number / guess) / 2.0\n    # Return the final guess as the square root\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    x = number\n    y = 1\n    # loop until difference between x and y is less than or equal to 0.0001\n    while abs(x - y) > 0.0001:\n        x = (x + y) / 2\n        y = number / x\n    # return the square root\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0 or number == 1:\n        return number\n\n    guess = number / 2\n    epsilon = 0.0001\n\n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number/guess) / 2\n\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0 or number == 1:\n        return number\n    else:\n        guess = number/2\n        accuracy = 0.0001\n        while abs(number - guess**2) > accuracy:\n            guess = (guess + number/guess)/2\n        return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0 or number == 1:\n        return number\n\n    guess = number / 2\n    tolerance = 0.0001\n\n    while abs(guess ** 2 - number) > tolerance:\n        guess = (guess + number / guess) / 2\n\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0 or number == 1:\n        return number\n\n    # The initial value of x, which is also the value of the square root.\n    x = number / 2\n\n    # The accuracy factor, which determines the number of iterations to perform.\n    epsilon = 0.0001\n\n    # The maximum number of iterations to perform.\n    max_iterations = 100\n\n    # The loop that performs the iterations.\n    for i in range(max_iterations):\n        # The formula for the babylonian method.\n        x = (x + number / x) / 2\n\n        # Check if the desired accuracy has been achieved.\n        if abs(number - x ** 2) < epsilon:\n            break\n\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number, tolerance=1e-6):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n\n    Args:\n        number (float): The number to compute the square root of.\n        tolerance (float): The desired accuracy. The algorithm will stop when the difference between consecutive approximations is less than this value.\n\n    Returns:\n        float: An approximation of the square root of the input number with the desired accuracy.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Input number must be non-negative\")\n    \n    # Initialize the algorithm with a reasonable starting point\n    x = number / 2\n\n    # Repeat until the difference between consecutive approximations is less than the desired tolerance\n    while True:\n        # Compute the next approximation using the Babylonian method\n        x = (x + number / x) / 2\n\n        # Check if the difference between the current approximation and the previous one is less than the desired tolerance\n        if abs(x**2 - number) < tolerance:\n            return x"
    },
    {
        "number": 246,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    elif number == 0 or number == 1:\n        return number\n    else:\n        guess = number / 2\n        for i in range(10):\n            guess = (guess + number / guess) / 2\n        return guess\n"
    },
    {
        "number": 247,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store lengths of longest palindromic subsequence of substring ending at each index\n    dp = [1] * n\n    # Every substring of length 1 is a palindrome of length 1\n    # Traverse through all substring lengths and store lengths of longest palindromic subsequence\n    for i in range(n):\n        for j in range(i):\n            # If characters at start and end are same, then add 1 to the length of the palindrome that can be obtained from the substring excluding these characters\n            if str[i] == str[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n            # If characters at start and end are different, then check for the length of longest palindromic subsequence that can be obtained from the substring excluding these characters\n            elif dp[j] > dp[i]:\n                dp[i] = dp[j]\n    # Return the length of the longest palindromic subsequence\n    return max(dp)\n"
    },
    {
        "number": 247,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store lengths of longest palindromic subsequence of substring str[i..j]\n    L = [[0 for i in range(n)] for j in range(n)]\n    # All characters in the string are palindromes of length 1\n    for i in range(n):\n        L[i][i] = 1\n    # Check for substrings of length 2 to n\n    for start in range(n-2, -1, -1):\n        for end in range(start+1, n):\n            if str[start] == str[end]:\n                L[start][end] = L[start+1][end-1] + 2\n            else:\n                L[start][end] = max(L[start+1][end], L[start][end-1])\n    return L[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a table to store lengths of longest palindromic subsequences of substring\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    # All characters in the string are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for palindromes of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n\n    # Check for palindromes of length greater than 2\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j] and length == 3:\n                dp[i][j] = 3\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a table to store lengths of longest palindromic subsequences of substring\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n        else:\n            dp[i][i+1] = 1\n    # Check for substrings of length greater than 2\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j] and dp[i+1][j-1] > 0:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    n = len(str)\n\n    # Create a table to store the length of longest palindromic subsequence of substring str[i...j]\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2 to n\n    for start in range(n - 1, -1, -1):\n        for end in range(start + 1, n):\n            if str[start] == str[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n\n    return dp[0][n - 1]\n"
    },
    {
        "number": 247,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i + L - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a table to store lengths of longest palindromic subsequences of substring of given str\n    L = [[0 for x in range(n)] for x in range(n)]\n\n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Check for sub-string of length 2.\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            L[i][i+1] = 2\n        else:\n            L[i][i+1] = 1\n\n    # Check for lengths greater than 2. k is length of substring\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i + k - 1\n            if str[i] == str[j] and L[i+1][j-1] > 0:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n\n    return L[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    \n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # Check for substrings of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    \n    # Check for substrings of length greater than 2\n    for k in range(3, n+1):\n        for i in range(n-k+1):\n            j = i+k-1\n            if str[i] == str[j] and k == 3:\n                dp[i][j] = 3\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Loop over the range from 1 to n-1 and add the harmonic series value to the sum\n    for i in range(1, n):\n        sum += 1/i\n    \n    # Return the sum\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through the integers from 1 to n-1\n    for i in range(1, n):\n        # Add the reciprocal of i to the sum\n        sum += 1/i\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the range from 1 to n-1\n    for i in range(1, n):\n        # Add the reciprocal of i to the sum variable\n        sum += 1/i\n    # Return the sum variable\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    # Create an empty list to store the harmonic series\n    harmonic_series = []\n    # Loop through the integers from 1 to n-1\n    for i in range(1, n):\n        # Calculate the harmonic sum as the reciprocal of i\n        harmonic_sum = 1/i\n        # Append the harmonic sum to the harmonic series list\n        harmonic_series.append(harmonic_sum)\n    # Return the sum of the harmonic series\n    return sum(harmonic_series)\n"
    },
    {
        "number": 248,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculates the harmonic sum of n-1.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through all numbers from 1 to n-1\n    for i in range(1, n):\n        # Add the reciprocal of i to the sum\n        sum += 1/i\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n"
    },
    {
        "number": 249,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create an empty list to store the intersection values\n    intersection = []\n\n    # Loop through the first array\n    for num in array_nums1:\n        # Check if the number is present in the second array and not already in the intersection list\n        if num in array_nums2 and num not in intersection:\n            # Append the number to the intersection list\n            intersection.append(num)\n\n    # Return the intersection list\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set for each array\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the set back to a list and return it\n    return list(intersection)\n"
    },
    {
        "number": 249,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # convert the arrays to sets\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # find the intersection of the sets\n    intersection = set_nums1.intersection(set_nums2)\n    # convert the intersection back to a list\n    result = list(intersection)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert both lists to sets\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)\n"
    },
    {
        "number": 249,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n"
    },
    {
        "number": 249,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the arrays to sets to get unique elements only\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the intersection back to a list and return\n    return list(intersection)\n"
    },
    {
        "number": 249,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the arrays to sets and find their intersection\n    intersection = set(array_nums1) & set(array_nums2)\n    # Convert the set back to a list and return it\n    return list(intersection)\n"
    },
    {
        "number": 249,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 250,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Count the occurrences of the element x in the tuple tup.\n    \"\"\"\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(element)\n        new_lst.append(i)\n    return new_lst\n"
    },
    {
        "number": 251,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(lst)):\n        new_list.append(element)\n        new_list.append(lst[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(element)\n        new_lst.append(lst[i])\n    return new_lst\n"
    },
    {
        "number": 252,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert a list of complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Converts complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function converts complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import cmath  \n\ndef convert(numbers):\n    \"\"\"\n    Converts complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    polar_coordinates = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function converts a complex number to its polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert a list of complex numbers to their polar coordinates.\n\n    Args:\n        numbers: a list of complex numbers.\n\n    Returns:\n        a list of polar coordinates for each complex number.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coords.append((r, theta))\n    return polar_coords\n"
    },
    {
        "number": 252,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n"
    },
    {
        "number": 253,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = combinations_with_replacement(lst, n)\n    return [combo for combo in combos]\n"
    },
    {
        "number": 255,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition)\n    of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = list(combinations_with_replacement(l, n))\n    return combos\n"
    },
    {
        "number": 256,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        # check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is a prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i/2)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            primes[i*i:n:i] = [False] * len(primes[i*i:n:i])\n    return sum(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if all(num%i!=0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count\n\ndef is_prime(num):\n    '''\n    Helper function to determine if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 256,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    \n    primes = [True] * n\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n, i):\n                primes[j] = False\n    \n    return sum(primes)\n"
    },
    {
        "number": 257,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 259,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # concatenate the lists\n    combined_list = list1 + list2\n\n    # sort the combined list in descending order\n    combined_list.sort(reverse=True)\n\n    # return the sorted list as a tuple\n    return tuple(combined_list)\n"
    },
    {
        "number": 259,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value1 = max(test_tup1)\n    max_value2 = max(test_tup2)\n    return (max_value1, max_value2)\n"
    },
    {
        "number": 259,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elem = 0\n    for i in test_tup1:\n        for j in test_tup2:\n            if i+j > max_elem:\n                max_elem = i+j\n    return max_elem\n"
    },
    {
        "number": 259,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    return max(max_tup1, max_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup.append(test_tup1[i])\n        else:\n            max_tup.append(test_tup2[i])\n    return tuple(max_tup)\n"
    },
    {
        "number": 259,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_element1 = max(test_tup1)\n    max_element2 = max(test_tup2)\n    return (max_element1, max_element2)\n"
    },
    {
        "number": 259,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 > max2:\n        return \"Maximum element in tuple 1 is greater than tuple 2\"\n    elif max2 > max1:\n        return \"Maximum element in tuple 2 is greater than tuple 1\"\n    else:\n        return \"Both tuples have same maximum element\"\n"
    },
    {
        "number": 259,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = 0\n    for i in test_tup1:\n        for j in test_tup2:\n            if i + j > max_val:\n                max_val = i + j\n    return max_val\n"
    },
    {
        "number": 260,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes[-1]\n\ndef is_prime(num):\n    '''\n    Check whether a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 260,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef next_prime(n):\n    while True:\n        n += 1\n        if is_prime(n):\n            return n\n\ndef newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        p = newman_prime(n-1)\n        q = next_prime(p)\n        return next_prime(q)\n"
    },
    {
        "number": 260,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    num = 2\n    count = 0\n    while count < n:\n        if is_prime(num) and is_prime(num+2):\n            count += 1\n            if count == n:\n                return num\n        num += 2"
    },
    {
        "number": 260,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import sympy\n\ndef newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n_prime = 2\n    count = 1\n    \n    while count < n:\n        n_prime = sympy.nextprime(n_prime)\n        if n_prime % 3 == 2:\n            count += 1\n    \n    return n_prime\n"
    },
    {
        "number": 260,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef newman_shanks_williams_prime(n):\n    \"\"\"\n    Function to find the nth Newman\u2013Shanks\u2013Williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    else:\n        p1 = 2\n        p2 = 5\n        for i in range(3, n + 1):\n            p3 = p1 + p2 + 1\n            while not is_prime(p3):\n                p1, p2 = p2, p3\n                p3 = p1 + p2 + 1\n            p1, p2 = p2, p3\n        return p2\n"
    },
    {
        "number": 260,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    primes = [2, 3]\n    i = 2\n    while len(primes) < n:\n        i += 1\n        if i % 2 == 0:\n            continue\n        for p in primes:\n            if p * p > i:\n                primes.append(i)\n                break\n            if i % p == 0:\n                break\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    primes = [2, 3, 5, 7]\n    if n < 4:\n        return primes[n-1]\n    else:\n        for i in range(4, n+1):\n            primes.append(primes[i-1] + 2*primes[i-2] + primes[i-3])\n        return primes[n]\n"
    },
    {
        "number": 260,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Find the nth Newman-Shanks-Williams prime number.\n    '''\n\n    # Initialize the list of Newman-Shanks-Williams primes\n    nsw_primes = [2]\n\n    # Initialize variables to keep track of the current prime candidate and its factors\n    candidate = 3\n    factor1 = 2\n    factor2 = 3\n\n    # Loop until we have found n Newman-Shanks-Williams primes\n    while len(nsw_primes) < n:\n        # Check if the candidate is divisible by any of the previous primes\n        divisible = False\n        for prime in nsw_primes:\n            if candidate % prime == 0:\n                divisible = True\n                break\n\n        # If the candidate is not divisible by any previous primes, it is a Newman-Shanks-Williams prime\n        if not divisible:\n            nsw_primes.append(candidate)\n\n        # Update the candidate and its factors\n        candidate = (factor1 * factor2) - factor1\n        factor1 = factor2\n        factor2 = candidate\n\n    # Return the nth Newman-Shanks-Williams prime\n    return nsw_primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2, 3, 5, 7, 11]\n    i = 6\n    while len(primes) < n:\n        is_prime = True\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n    return primes[-1]"
    },
    {
        "number": 261,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] != 0:\n            result.append(test_tup1[i] / test_tup2[i])\n        else:\n            result.append(0)\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result\n"
    },
    {
        "number": 261,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]/test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(float('nan'))\n    return tuple(result)\n"
    },
    {
        "number": 262,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n"
    },
    {
        "number": 262,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n"
    },
    {
        "number": 262,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        raise ValueError(\"Length L cannot be greater than the length of the list\")\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 264,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # A dog's first year is equal to 15 human years\n    # A dog's second year is equal to 24 human years\n    # For all subsequent years, a dog's age is equal to 24 human years\n    if h_age <= 1:\n        return 15\n    elif h_age <= 2:\n        return 24 + 15\n    else:\n        return 24 + 24 * (h_age - 2)\n"
    },
    {
        "number": 264,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age"
    },
    {
        "number": 264,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # A dog's first year is 15 in human years\n    if h_age <= 15:\n        return 15 * 7\n    # A dog's second year is 12 in human years\n    elif h_age <= 27:\n        return (15 * 7) + ((h_age - 15) * 4)\n    # A dog's third year and onwards is 10 in human years\n    else:\n        return (15 * 7) + (12 * 4) + ((h_age - 27) * 10)\n"
    },
    {
        "number": 264,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Returns the age of a dog in dog years, given its age in human years.\n    \"\"\"\n    dog_years = h_age * 7\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    This function takes a human age as input and returns the corresponding dog age.\n    \"\"\"\n    d_age = h_age * 7\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Calculate a dog's age in dog years.\n    '''\n    d_age = h_age * 7\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog years.\n    \"\"\"\n    d_age = h_age * 7\n    return d_age\n"
    },
    {
        "number": 264,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age\n"
    },
    {
        "number": 265,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Create an empty list to store the resulting sublists\n    sublists = []\n    # Loop through the input list, starting at the first element\n    for i in range(0, len(S), step):\n        # Append a sublist containing the next step elements to the sublists list\n        sublists.append(S[i:i+step])\n    # Return the sublists\n    return sublists\n"
    },
    {
        "number": 265,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    temp = []\n    for i, item in enumerate(S, start=1):\n        temp.append(item)\n        if i % step == 0:\n            result.append(temp)\n            temp = []\n    if temp:\n        result.append(temp)\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    sublist = []\n    for i in range(len(S)):\n        sublist.append(S[i])\n        if (i + 1) % step == 0:\n            result.append(sublist)\n            sublist = []\n    if sublist:\n        result.append(sublist)\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step < 1:\n        raise ValueError(\"step must be a positive integer\")\n    if step == 1:\n        return [S]\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer\")\n    if step > len(S):\n        raise ValueError(\"Step must be less than or equal to the length of the list\")\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 266,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 4 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 4 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * (l ** 2)\n    return area\n"
    },
    {
        "number": 266,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 4 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 4 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 4 * l**2\n"
    },
    {
        "number": 267,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 1\n    \n    while count < n:\n        if num % 2 != 0:\n            sum += num ** 2\n            count += 1\n        num += 1\n    \n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Loop over the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of the current odd number to the sum\n        sum_of_squares += i**2\n    \n    # Return the sum of squares\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "34B",
        "pass": 4,
        "answer": ""
    },
    {
        "number": 267,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # add the square of each odd number to the sum variable\n        sum += i**2\n    \n    # return the sum of squares of the first n odd natural numbers\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    num = 1\n    while count < n:\n        if num % 2 != 0:\n            sum += num**2\n            count += 1\n        num += 1\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    i = 1\n    while count < n:\n        if i % 2 != 0:\n            sum += i ** 2\n            count += 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    count = 0\n    while count < n:\n        if i % 2 != 0:\n            sum += i*i\n            count += 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Start the loop from 1 and iterate n times\n    for i in range(1, n+1):\n        # Check if the number is odd\n        if i % 2 != 0:\n            # Add the square of the number to the sum variable\n            sum += i**2\n    \n    # Return the final sum\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    \"\"\"\n    if n == 1:\n        return 9\n    elif n == 2:\n        return 90\n    else:\n        # Find the nth star number by multiplying the previous two numbers\n        star_num = find_star_num(n-1) * find_star_num(n-2)\n        return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Create a list to store the star numbers\n    star_nums = []\n    \n    # Define the base cases\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 2]\n    \n    # Recursive case\n    else:\n        # Get the previous two star numbers\n        prev_nums = find_star_num(n-1)\n        prev1 = prev_nums[-1]\n        prev2 = prev_nums[-2]\n        \n        # Calculate the n'th star number\n        curr_num = prev1 + prev2\n        \n        # Append the current number to the list of star numbers\n        star_nums.append(curr_num)\n        \n        # Return the list of star numbers\n        return prev_nums + star_nums\n"
    },
    {
        "number": 268,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 2\n    count = 1\n    while count < n:\n        star_num += 1\n        if star_num % 3 == 0:\n            count += 1\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    return 2*n - 1 + n*(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 1\n    count = 0\n    while count < n:\n        num += 1\n        temp = num\n        while temp > 0:\n            if temp % 2 == 0:\n                temp //= 2\n            else:\n                temp = temp * 3 + 1\n        count += 1\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Start with the first star number\n    star_num = 1\n    # Loop through the first n-1 star numbers\n    for i in range(2, n+1):\n        # Multiply the current star number by i\n        star_num *= i\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1\n    for i in range(n):\n        star_num *= (i+2)\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2*find_star_num(n-1) + find_star_num(n-2)\n"
    },
    {
        "number": 268,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 3 * find_star_num(n-1) - find_star_num(n-2)\n"
    },
    {
        "number": 268,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    \"\"\"\n    star_num = 1\n    for i in range(n):\n        star_num += 2**i\n    return star_num\n"
    },
    {
        "number": 269,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the list\n    for i in range(len(arr)):\n        # Check if the element is even and its index is even\n        if i%2 == 0 and arr[i]%2 == 0:\n            # Add the element to the sum\n            sum += arr[i]\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 270,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            result += arr[i]\n    return result\n"
    },
    {
        "number": 270,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # Initialize sum variable\n    sum = 0\n    # Traverse through the list\n    for i in range(len(arr)):\n        # Check if the number at even index is even\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            # Add even number to sum\n            sum += arr[i]\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 271,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    i = 1\n    while n > 0:\n        if i % 2 == 0:\n            sum += i**5\n            n -= 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers raised to the fifth power.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate over the first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # Add the i^5 to the sum\n        sum += i**5\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n and finds the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    This function takes an integer n as input and returns the sum of first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers raised to the fifth power.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    \n    # loop over the first n even natural numbers and add their fifth power to the sum\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    \n    # return the sum\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # Add the ith even natural number raised to the fifth power to the sum\n        sum += i**5\n    \n    # Return the sum\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tpl in test_list:\n        if len(tpl) >= 2:\n            result.append(tpl[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n"
    },
    {
        "number": 272,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[-1] for t in test_list]\n"
    },
    {
        "number": 273,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 273,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 273,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the element at the current index of the second tuple from the element at the current index of the first tuple\n        diff = test_tup1[i] - test_tup2[i]\n\n        # Append the difference to the result list\n        result.append(diff)\n\n    # Convert the result list to a tuple and return it\n    return tuple(result)\n"
    },
    {
        "number": 273,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 273,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 273,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 273,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 274,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for k in range(0, n//2 + 1):\n        coeff = math.comb(n, k)\n        if coeff % 2 == 0:\n            result += coeff\n    return result\n"
    },
    {
        "number": 274,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for k in range(0, n//2 + 1):\n        sum += math.comb(n, k) * (k % 2 == 0)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    # Iterate over all even indices\n    for k in range(0, n+1, 2):\n        # Calculate the binomial coefficient for the current index\n        coeff = math.factorial(n)//(math.factorial(k)*math.factorial(n-k))\n        # Add the current coefficient to the sum\n        sum += coeff\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef binomial_coefficient(n, k):\n    \"\"\"\n    A function to calculate binomial coefficient.\n    \"\"\"\n    return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    A function to calculate the sum of even index binomial coefficients.\n    \"\"\"\n    even_index_coefficients = []\n    for k in range(0, n + 1, 2):\n        coefficient = binomial_coefficient(n, k)\n        if coefficient % 2 == 0:\n            even_index_coefficients.append(coefficient)\n    return sum(even_index_coefficients)"
    },
    {
        "number": 274,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize the sum of even index binomial coefficients to 0\n    sum_of_even_index_binomial_coefficients = 0\n    \n    # loop through the even indices and add the corresponding binomial coefficient to the sum\n    for i in range(0, n+1, 2):\n        # calculate the binomial coefficient using the formula: n choose i = n! / (i! * (n-i)!)\n        binomial_coefficient = math.factorial(n) // (math.factorial(i) * math.factorial(n-i))\n        \n        # add the binomial coefficient to the sum of even index binomial coefficients\n        sum_of_even_index_binomial_coefficients += binomial_coefficient\n    \n    return sum_of_even_index_binomial_coefficients\n"
    },
    {
        "number": 274,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for k in range(0, n//2 + 1):\n        total += math.comb(n, k) * math.factorial(n-k) * k\n    return total\n"
    },
    {
        "number": 274,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n//2 + 1):\n        sum += math.comb(n, i) * (i // 2)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n//2+1):\n        # calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        \n        # check if the index is even\n        if i % 2 == 0:\n            sum += coeff\n    \n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for k in range(0, n+1, 2):\n        sum += math.comb(n, k)\n    return sum\n"
    },
    {
        "number": 276,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * (r ** 2) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 22/7\n    volume = pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r * r * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r * r * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * r * r * h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r * r * h\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def dict_filter(dictionary, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dictionary.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def dict_filter(dict_obj, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict_obj.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def dict_filter(dct, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dct.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def dict_filter(dict_obj, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict_obj.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def dict_filter(d,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Create an empty dictionary to store the filtered entries\n    filtered_dict = {}\n    # Loop through the keys and values of the original dictionary\n    for key, value in d.items():\n        # If the value is greater than or equal to n, add it to the filtered dictionary\n        if value >= n:\n            filtered_dict[key] = value\n    # Return the filtered dictionary\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def dict_filter(d, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in d.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = [0] * len(test_tup)\n    for i in range(len(test_tup)):\n        for j in range(i):\n            if test_tup[i] == test_tup[j]:\n                count[i] += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i in range(len(test_tup)):\n        count_dict[test_tup[i]] = i\n    return count_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i in range(len(test_tup)):\n        count_dict[test_tup[i]] = i\n    return count_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            count_dict[test_tup[i]] = i + 1\n        else:\n            count_dict[test_tup[i]] = i + 1\n    return count_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i in range(len(test_tup)):\n        count_dict[test_tup[i]] = i\n    return count_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    freq_dict = {}\n    count_dict = {}\n    for i in test_tup:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    for j in test_tup:\n        if j not in count_dict:\n            count_dict[j] = sum([freq_dict[k] for k in freq_dict if k < j])\n        else:\n            count_dict[j] += sum([freq_dict[k] for k in freq_dict if k < j])\n    return count_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    count_dict = {}\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] not in count_dict:\n            count_dict[test_tup[i]] = count\n            count += 1\n        else:\n            count_dict[test_tup[i]] += 1\n    return count_dict\n\ntest_tup = (1, 2, 3, 1, 2, 4, 1, 2, 3)\nprint(count_first_elements(test_tup))\n"
    },
    {
        "number": 278,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i, item in enumerate(test_tup):\n        if item not in count_dict:\n            count_dict[item] = i\n    return count_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i in range(len(test_tup)):\n        count_dict[test_tup[i]] = i\n    return count_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counts = {}\n    count = 0\n    for elem in test_tup:\n        if elem not in counts:\n            counts[elem] = count\n        count += 1\n    return counts\n"
    },
    {
        "number": 279,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (9 * n - 7)) // 2"
    },
    {
        "number": 279,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(9*n - 1)//2\n"
    },
    {
        "number": 279,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is a decagonal number, otherwise it returns False.\n    A decagonal number is a figurate number that represents a polygon with 10 sides.\n    '''\n    # Check if n is a decagonal number\n    for i in range(1, n):\n        if (10 * i * (i + 1) == 2 * n):\n            return True\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the first n rows of the triangle\n    for i in range(1, n+1):\n        # add the i-th row sum to the total sum\n        sum += i * (i + 1) // 2\n    # check if the sum is a decagonal number (divisible by 11)\n    if sum % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = n * (9 * n - 7) // 2\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 279,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function finds the nth decagonal number.\n    '''\n    return (n*(3*n-1))/2\n"
    },
    {
        "number": 279,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = n * (9 * n - 7) // 2\n    return decagonal_num\n"
    },
    {
        "number": 279,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (9 * n - 1)) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = (n * (9 * n - 7)) // 2\n    return num\n"
    },
    {
        "number": 280,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            break\n    return found, i if found else -1\n"
    },
    {
        "number": 280,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n        else:\n            index = -1\n    return (found, index)\n"
    },
    {
        "number": 280,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n"
    },
    {
        "number": 281,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and checks whether all the elements in the list are unique or not.\n    If all the elements are unique, it returns True, otherwise it returns False.\n    \"\"\"\n    # Create an empty set to store the unique elements\n    unique_set = set()\n    \n    # Traverse through the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n    \n    # If the length of the set is equal to the length of the list, it means all elements are unique\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to remove duplicates\n    set_list = set(test_list)\n    # If the length of the set is equal to the length of the original list, all elements are unique\n    if len(set_list) == len(test_list):\n        return True\n    # If not, there are duplicates\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 282,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the lengths of the lists are equal\n    if len(nums1) != len(nums2):\n        return \"Lists are not equal in length.\"\n    else:\n        # subtract the elements of the two lists and store the result in a new list\n        result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n        return result\n"
    },
    {
        "number": 282,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i] - nums2[i])\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Ensure the lists are of equal length\n    if len(nums1) != len(nums2):\n        return None\n    # Subtract the corresponding elements of the two lists\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return sub\n"
    },
    {
        "number": 282,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 283,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a string and count the frequency of each digit\n    count = {}\n    for digit in str(n):\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in count:\n        if count[digit] > int(digit):\n            return False\n    \n    # If all checks passed, return True\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)):\n        if digits[i] != 0 and digits.count(i+1) > digits[i]:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer into a string for easier manipulation\n    str_n = str(n)\n    # Loop through each digit in the string and check its frequency against the digit itself\n    for i in str_n:\n        if str_n.count(i) > int(i):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def validate(n):\n    # convert integer to string\n    n_str = str(n)\n    # create a dictionary to store frequency of each digit\n    digit_freq = {}\n    for digit in n_str:\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digit_freq:\n        if int(digit) < digit_freq[digit]:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = str(n)\n    for digit in digits:\n        if digits.count(digit) > int(digit):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # convert the integer to a string\n    n_str = str(n)\n\n    # loop through each character in the string\n    for char in n_str:\n        # check if the frequency of the character is greater than the integer value of the character\n        if n_str.count(char) > int(char):\n            return False\n    \n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert integer to string\n    str_n = str(n)\n    # check if length of string is greater than 1\n    if len(str_n) > 1:\n        # loop through each digit in the string\n        for digit in str_n:\n            # check if the frequency of the digit is greater than the digit itself\n            if str_n.count(digit) > int(digit):\n                # return False if the condition is not satisfied for any digit\n                return False\n    # return True if all digits satisfy the condition\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Converting the integer into a string\n    n = str(n)\n    # Creating a dictionary to store the frequency of each digit\n    freq = {}\n    # Iterating over each digit in the string\n    for digit in n:\n        # If the digit is already present in the dictionary, increment its value by 1\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not present in the dictionary, add it with a value of 1\n        else:\n            freq[digit] = 1\n    # Iterating over each digit in the string\n    for digit in n:\n        # If the frequency of the digit is greater than the digit itself, return False\n        if freq[digit] > int(digit):\n            return False\n    # If all the digits satisfy the condition, return True\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer to a string\n    str_n = str(n)\n    # Loop through each character in the string\n    for char in str_n:\n        # Check if the frequency of the character is greater than the integer value of the character\n        if str_n.count(char) > int(char):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit\n    in the integer is less than or equal to the digit itself.\n    '''\n    # Convert the integer into a string\n    str_n = str(n)\n    # Initialize a dictionary to store the frequency of each digit\n    freq_dict = {}\n    # Loop through each digit in the string\n    for digit in str_n:\n        # If the digit is already present in the dictionary, increment its count\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        # If the digit is not present in the dictionary, add it with count 1\n        else:\n            freq_dict[digit] = 1\n    # Loop through each key-value pair in the dictionary and check if the frequency\n    # of the digit is less than or equal to the digit itself\n    for key, value in freq_dict.items():\n        if int(key) < value:\n            return False\n    # If all the digits satisfy the condition, return True\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in lst):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if all items in the list are equal to the given element\n    return all(item == element for item in lst)\n"
    },
    {
        "number": 284,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in lst)\n"
    },
    {
        "number": 284,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in lst)\n"
    },
    {
        "number": 284,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in lst)\n"
    },
    {
        "number": 284,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_element(lst,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in lst:\n        if i != element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in lst):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item != element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item != element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_element(lst, element):\n    '''\n    Checks whether all items in a list are equal to a given element.\n    '''\n    return all(x == element for x in lst)\n"
    },
    {
        "number": 285,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bb|bbb)'\n    match = re.search(pattern, text)\n    return bool(match)\n"
    },
    {
        "number": 285,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bb|bbb)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a[b]{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    result = re.search(pattern, text)\n    return bool(result)\n"
    },
    {
        "number": 285,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bb|bbb)'\n    match = re.search(pattern, text)\n    return bool(match)\n"
    },
    {
        "number": 285,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bb|bbb)'\n    match = re.search(pattern, text)\n    return bool(match)\n"
    },
    {
        "number": 285,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create a new list by repeating the given list k times\n    repeated_list = a * k\n\n    # Initialize variables to store the maximum sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the repeated list\n    for i in range(len(repeated_list)):\n        # Add the current element to the current sum\n        current_sum += repeated_list[i]\n\n        # If the current sum is negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # create a new array by repeating a k times\n    repeated_a = a * k\n    \n    # create a list to store the maximum sum of each subarray ending at each index\n    max_ending_here = [0] * len(repeated_a)\n    max_ending_here[0] = repeated_a[0]\n    \n    # create a list to store the maximum sum of each subarray seen so far\n    max_so_far = [float('-inf')] * len(repeated_a)\n    max_so_far[0] = repeated_a[0]\n    \n    # iterate through the repeated array, updating max_ending_here and max_so_far\n    for i in range(1, len(repeated_a)):\n        max_ending_here[i] = max(repeated_a[i], max_ending_here[i-1] + repeated_a[i])\n        max_so_far[i] = max(max_so_far[i-1], max_ending_here[i])\n    \n    # return the maximum sum of a contiguous subarray seen so far\n    return max_so_far[-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sum as the maximum possible value of an integer.\n    max_sum = float('-inf')\n    \n    # Create a new list by repeating the given array k times.\n    repeated_list = a * k\n    \n    # Loop through the repeated list and find the maximum sum of a contiguous sub-array.\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n*k):\n            current_sum += repeated_list[j]\n            max_sum = max(max_sum, current_sum)\n            if current_sum < 0:\n                current_sum = 0\n                \n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create a new array by repeating the given array k times\n    new_arr = []\n    for i in range(k):\n        for j in range(n):\n            new_arr.append(a[j])\n    \n    # Initialize max_sum to store the maximum sum\n    max_sum = float('-inf')\n    \n    # Initialize current_sum to store the current sum of the sub-array\n    current_sum = 0\n    \n    # Traverse through the new_arr and find the maximum sum of a contiguous sub-array\n    for i in range(len(new_arr)):\n        current_sum += new_arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Repeat the array k times\n    repeated_array = a * k\n    # Initialize variables to store max sum and current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    # Loop through the repeated array\n    for i in range(n*k):\n        # Add the current element to current sum\n        curr_sum += repeated_array[i]\n        # If current sum becomes negative, reset it to 0\n        if curr_sum < 0:\n            curr_sum = 0\n        # Update max sum if current sum is greater\n        elif curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of the given array\n    total_sum = sum(a)\n    # Find the maximum sub-array sum of the given array\n    max_sum = max_sub_array_sum(a, n)\n    # Calculate the total sum of the modified array\n    modified_total_sum = total_sum * k\n    # Calculate the maximum sub-array sum of the modified array\n    modified_max_sum = max_sum * k\n    # Calculate the minimum sub-array sum of the modified array\n    modified_min_sum = modified_total_sum - modified_max_sum\n    # Return the maximum sub-array sum of the modified array\n    return modified_max_sum"
    },
    {
        "number": 286,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    res = a[0]\n    cur_sum = 0\n    \n    for i in range(n):\n        cur_sum += a[i]\n        res = max(res, cur_sum)\n        \n        if cur_sum < 0:\n            cur_sum = 0\n    \n    return res*k\n"
    },
    {
        "number": 286,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create the repeated array\n    repeated_array = a * k\n    \n    # initialize variables to store the current sum and maximum sum\n    current_sum = 0\n    max_sum = float('-inf')\n    \n    # iterate through the array and calculate the maximum sum of contiguous subarray\n    for i in range(n*k):\n        current_sum += repeated_array[i]\n        \n        # update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # if the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Calculate the sum of the original array\n    original_sum = sum(a)\n    # Calculate the maximum sub-array sum for the original array\n    max_sub_array_sum = max_sub_array(a, n)\n    # Calculate the maximum sum that can be obtained by repeating the maximum sub-array k times\n    max_repeated_sum = max_sub_array_sum * k\n    # Calculate the maximum sum that can be obtained by repeating the original array k times\n    max_original_sum = original_sum * k\n    # Return the maximum of the two possible sums\n    return max(max_repeated_sum, max_original_sum)"
    },
    {
        "number": 286,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new array which is formed by repeating the given array k times\n    new_arr = [0] * (n * k)\n    for i in range(k):\n        for j in range(n):\n            new_arr[i * n + j] = a[j]\n    # Initialize the maximum sum and temporary sum\n    max_sum = float('-inf')\n    temp_sum = 0\n    # Loop through the new array and find the maximum sum of a contiguous subarray\n    for i in range(len(new_arr)):\n        temp_sum += new_arr[i]\n        max_sum = max(max_sum, temp_sum)\n        if temp_sum < 0:\n            temp_sum = 0\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def square_Sum(n):   \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    sum = 0\n    count = 0\n    while count < n:\n        sum += (2*count+2)**2\n        count += 1\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_num = 2\n    sum = 0\n    for i in range(n):\n        sum += even_num ** 2\n        even_num += 2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    i = 1\n    while count < n:\n        if i % 2 == 0:\n            sum += i**2\n            count += 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    This function takes in a list of lists and returns a list of maximum length.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = [lst]\n        elif len(lst) == max_len:\n            max_list.append(lst)\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = None\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = None\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sub_list in list1:\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n            max_list = sub_list\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_length(list1):\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = [lst]\n        elif len(lst) == max_len:\n            max_list.append(lst)\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    result = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            result = [sublist]\n        elif len(sublist) == max_len:\n            result.append(sublist)\n    return result\n"
    },
    {
        "number": 290,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = [sublist]\n        elif len(sublist) == max_len:\n            max_list.append(sublist)\n    return max_list\n"
    },
    {
        "number": 290,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sub_list in list1:\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n            max_list = sub_list\n    return max_list\n"
    },
    {
        "number": 291,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    elif n == 2:\n        return k*k\n    else:\n        return k*count_no_of_ways(n-1, k) + k*count_no_of_ways(n-2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color\n    for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n\n    if n == 2:\n        return k * k\n\n    # Initialize the DP table\n    dp = [[0] * k for _ in range(n)]\n\n    # Fill the first row of the DP table\n    for i in range(k):\n        dp[0][i] = k - 1\n\n    # Fill the second row of the DP table\n    for i in range(k):\n        dp[1][i] = (k - 1) * (k - 1)\n\n    # Fill the remaining rows of the DP table\n    for i in range(2, n):\n        for j in range(k):\n            for m in range(k):\n                if m != j:\n                    dp[i][j] += dp[i - 1][m]\n\n    # Calculate the number of ways\n    total_ways = 0\n    for i in range(k):\n        total_ways += dp[n - 1][i]\n\n    return total_ways\n"
    },
    {
        "number": 291,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k*k\n    dp = [0]*(n+1)\n    dp[1] = k\n    dp[2] = k*k\n    for i in range(3, n+1):\n        dp[i] = dp[i-1]*(k-1) + dp[i-2]*(k-1)\n    return dp[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color\n    for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k*k\n    else:\n        # Initialize dp table with initial values\n        dp = [0] * (n+1)\n        dp[1] = k\n        dp[2] = k*k\n        # Fill the dp table\n        for i in range(3, n+1):\n            for j in range(k):\n                dp[i] += dp[i-1] - dp[i-2]\n                dp[i] += dp[i-2]\n        return dp[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color\n    for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    same_color = k\n    diff_color = k * (k - 1)\n    for i in range(3, n + 1):\n        total_ways = (same_color + diff_color) * (k - 1)\n        same_color = diff_color\n        diff_color = total_ways - same_color\n    return same_color + diff_color\n"
    },
    {
        "number": 291,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        dp = [0] * n\n        dp[0] = k\n        dp[1] = k * k\n        for i in range(2, n):\n            dp[i] = dp[i-1] * k + dp[i-2] * (k-1)\n        return dp[-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color\n    for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1 or k == 1:\n        return k\n    else:\n        # Initialize dp array with initial values\n        dp = [0] * (n+1)\n        dp[1] = k\n        dp[2] = k*k\n        \n        # Fill the dp array using the recursive formula\n        for i in range(3, n+1):\n            dp[i] = (k-1) * dp[i-1] + (k-1) * dp[i-2]\n        \n        return dp[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    elif n == 2:\n        return k*k\n    else:\n        return (k-1)*count_no_of_ways(n-1, k) + (k-1)*count_no_of_ways(n-2, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k*k\n    dp = [0] * (n+1)\n    dp[1] = k\n    dp[2] = k*k\n    for i in range(3, n+1):\n        dp[i] = (k-1) * (dp[i-1] + dp[i-2])\n    return dp[n]\n"
    },
    {
        "number": 291,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    if n < 2:\n        return k ** n\n    elif k == 1:\n        return 1\n    else:\n        dp = [0] * (n + 1)\n        dp[0] = k\n        dp[1] = k\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] * (k - 1) + dp[i - 2] * (k - 1)\n        return dp[n]\n"
    },
    {
        "number": 292,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 292,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Returns the quotient of n divided by m (rounded down to the nearest integer).\n    \"\"\"\n    if m == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n / m)\n"
    },
    {
        "number": 292,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n / m)\n"
    },
    {
        "number": 293,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Find the length of the hypotenuse in a right-angled triangle given the lengths of the other two sides.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the square of the sides using the given values\n    w_square = w ** 2\n    h_square = h ** 2\n    \n    # Use the Pythagorean theorem to find the square of the third side\n    c_square = w_square + h_square\n    \n    # Take the square root of the square of the third side to find its length\n    c = math.sqrt(c_square)\n    \n    # Return the length of the third side\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the hypotenuse using Pythagorean theorem\n    hypotenuse = math.sqrt(w**2 + h**2)\n    return hypotenuse\n"
    },
    {
        "number": 293,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Given the length of the other two sides of a right-angled triangle,\n    returns the length of the hypotenuse (third side).\n    \"\"\"\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function finds the third side of a right-angled triangle.\n    '''\n    # Find the square of the missing side using Pythagoras' theorem\n    missing_side_sq = w**2 + h**2\n    # Find the length of the missing side using the square root function\n    missing_side = math.sqrt(missing_side_sq)\n    # Return the length of the missing side\n    return missing_side\n"
    },
    {
        "number": 293,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c\n"
    },
    {
        "number": 293,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Find the length of the third side of a right-angled triangle, given the lengths of the other two sides.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the third side using Pythagoras' theorem\n    c = math.sqrt(w**2 + h**2)\n    return c\n"
    },
    {
        "number": 294,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_val(listval):\n    \"\"\"\n    Finds the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = max(listval)\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]  # initialize max_val with the first element of the list\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if isinstance(val, (int, float)) and val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if isinstance(val, (int, float)) and (max_val is None or val > max_val):\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None:\n            max_val = val\n        elif val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 295,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Iterate from 1 to number\n    for i in range(1, number+1):\n        # Check if i is a divisor of number\n        if number % i == 0:\n            # Add i to sum\n            sum += i\n    \n    # Return sum\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum_divisors = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize sum as 0\n    sum = 0\n    \n    # Loop through all numbers from 1 to number\n    for i in range(1, number+1):\n        \n        # Check if i is a divisor of number\n        if number % i == 0:\n            \n            # Add i to sum\n            sum += i\n            \n    # Return the sum of all divisors\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    This function takes a number as input and returns the sum of all its divisors.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 296,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def merge(left, right):\n    result = []\n    i, j = 0, 0\n    inv_count = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            inv_count += len(left) - i\n            \n    result += left[i:]\n    result += right[j:]\n    \n    return result, inv_count\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    \n    mid = len(arr) // 2\n    left, left_inv = merge_sort(arr[:mid])\n    right, right_inv = merge_sort(arr[mid:])\n    \n    merged_arr, merge_inv = merge(left, right)\n    \n    return merged_arr, left_inv + right_inv + merge_inv\n\n\ndef get_Inv_Count(arr):\n    sorted_arr, inv_count = merge_sort(arr)\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def merge(left, right):\n    result = []\n    i, j = 0, 0\n    inv_count = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            inv_count += len(left) - i\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result, inv_count\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n\n    mid = len(arr) // 2\n    left, left_inv_count = merge_sort(arr[:mid])\n    right, right_inv_count = merge_sort(arr[mid:])\n    merged_arr, merge_inv_count = merge(left, right)\n\n    return merged_arr, left_inv_count + right_inv_count + merge_inv_count\n\n\ndef get_Inv_Count(arr):\n    sorted_arr, inv_count = merge_sort(arr)\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def merge_sort_inv_count(arr):\n    \"\"\"\n    Sorts the array using merge sort and returns the number of inversions\n    \"\"\"\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        left_inv_count, right_inv_count = merge_sort_inv_count(left), merge_sort_inv_count(right)\n        merge_inv_count = merge(arr, left, right)\n\n        return left_inv_count + right_inv_count + merge_inv_count\n    else:\n        return 0\n\n\ndef merge(arr, left, right):\n    \"\"\"\n    Merges two sorted arrays and returns the number of inversions\n    \"\"\"\n    i = j = inv_count = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[i + j] = left[i]\n            i += 1\n        else:\n            arr[i + j] = right[j]\n            inv_count += len(left) - i\n            j += 1\n\n    while i < len(left):\n        arr[i + j] = left[i]\n        i += 1\n\n    while j < len(right):\n        arr[i + j] = right[j]\n        j += 1\n\n    return inv_count\n\n\ndef get_Inv_Count(arr):\n    \"\"\"\n    Wrapper function that calls the merge_sort_inv_count function\n    \"\"\"\n    return merge_sort_inv_count(arr)\n"
    },
    {
        "number": 296,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def merge(left, right):\n    i = j = 0\n    count = 0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            count += len(left) - i\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return count, result\n\ndef get_Inv_Count(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left_count, left = get_Inv_Count(left)\n        right_count, right = get_Inv_Count(right)\n        count, arr = merge(left, right)\n        return left_count + right_count + count\n    else:\n        return 0, arr"
    },
    {
        "number": 296,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 297,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 299,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    for item in stdata:\n        aggregate_dict[item[0]] += item[1]\n    return max(aggregate_dict.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for t in stdata:\n        d[t[0]] += t[1]\n    return max(d.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the sum of values for each station\n    station_sum = defaultdict(int)\n    \n    # iterate over the tuples and add the values to the corresponding station key\n    for tup in stdata:\n        station_sum[tup[0]] += tup[1]\n    \n    # find the maximum value in the defaultdict\n    max_value = max(station_sum.values())\n    \n    # create a list of all the stations with the maximum value\n    max_stations = [k for k, v in station_sum.items() if v == max_value]\n    \n    return max_stations\n"
    },
    {
        "number": 299,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    city_dict = defaultdict(int)\n    for city, population, area in stdata:\n        city_dict[city] += population * area\n    return max(city_dict.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a defaultdict to store the sum of values for each key\n    aggregate_sum = defaultdict(int)\n    # Initialize a variable to store the maximum aggregate\n    max_agg = 0\n    # Iterate through the list of tuples\n    for tup in stdata:\n        # Update the aggregate sum for the key (first element of the tuple)\n        aggregate_sum[tup[0]] += tup[1]\n        # Update the maximum aggregate if necessary\n        if aggregate_sum[tup[0]] > max_agg:\n            max_agg = aggregate_sum[tup[0]]\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    d = defaultdict(int)\n    for s, t, v in stdata:\n        d[s] += v\n        d[t] -= v\n\n    max_v = float('-inf')\n    curr_v = 0\n    for v in d.values():\n        curr_v += v\n        max_v = max(max_v, curr_v)\n\n    return max_v\n"
    },
    {
        "number": 299,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a defaultdict to store the sum of values for each key\n    sums = defaultdict(int)\n\n    # Iterate through each tuple in the list\n    for tup in stdata:\n        # Add the value of each tuple to the sum of values for that key\n        sums[tup[0]] += tup[1]\n\n    # Return the maximum sum from the defaultdict\n    return max(sums.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the sum of values for each key\n    agg_dict = defaultdict(int)\n    \n    # Iterate over each tuple in the list\n    for tup in stdata:\n        # Extract the key and value from the tuple\n        key, value = tup\n        \n        # Add the value to the sum of values for this key in the dictionary\n        agg_dict[key] += value\n    \n    # Find the maximum value in the dictionary and return the key associated with it\n    max_key = max(agg_dict, key=agg_dict.get)\n    return max_key\n"
    },
    {
        "number": 299,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for s, t, d in stdata:\n        max_agg[s] += d\n        max_agg[t] -= d\n    total = 0\n    for k, v in max_agg.items():\n        total += v\n    return total"
    },
    {
        "number": 299,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg = defaultdict(int)\n    for s, t, d in stdata:\n        agg[s] += d\n        agg[t] += d\n    return max(agg.values())\n"
    },
    {
        "number": 300,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        binary = bin(i)[2:]\n        if binary.count('0') == binary.count('1'):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    else:\n        count = 0\n        for i in range(2**(2*n-1)):\n            binary_str = format(i, '0{}b'.format(2*n))\n            if sum(int(binary_str[j]) for j in range(n)) == sum(int(binary_str[j]) for j in range(n+1, 2*n+1)):\n                count += 1\n        return count"
    },
    {
        "number": 300,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        binary = bin(i)[2:]\n        if len(binary) < 2*n:\n            binary = '0'*(2*n-len(binary)) + binary\n        if sum(int(binary[i]) for i in range(n)) == sum(int(binary[i+n]) for i in range(n)):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # initialize a variable to store the count of valid sequences\n    count = 0\n    \n    # iterate over all possible binary sequences of length 2n\n    for i in range(2**(2*n)):\n        # convert the current number to binary string of length 2n\n        binary = format(i, '0'+str(2*n)+'b')\n        \n        # check if the sum of first n bits is equal to the sum of last n bits\n        if sum(int(binary[j]) for j in range(n)) == sum(int(binary[j]) for j in range(n, 2*n)):\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        binary = bin(i)[2:]\n        if len(binary) < 2*n:\n            binary = '0'*(2*n-len(binary)) + binary\n        if sum(int(binary[j]) for j in range(n)) == sum(int(binary[j]) for j in range(n, 2*n)):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "Let's implement this solution in Python. "
    },
    {
        "number": 300,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**2*n):\n        binary = bin(i)[2:].zfill(2*n)\n        if sum(int(binary[j]) for j in range(n)) == sum(int(binary[j]) for j in range(n, 2*n)):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        binary = bin(i)[2:]\n        if binary.count('1') <= n:\n            if binary[:n].count('1') == binary[n:].count('1'):\n                count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n-1)):\n        binary_str = format(i, '0{}b'.format(2*n))\n        if binary_str.count('1') == n:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**(2*n)):\n        binary = bin(i)[2:]\n        if len(binary) < 2*n:\n            binary = '0'*(2*n-len(binary)) + binary\n        if sum(int(binary[i]) for i in range(n)) == sum(int(binary[i]) for i in range(n, 2*n)):\n            count += 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def dict_depth(d, depth=1):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return depth\n\n    return max(dict_depth(v, depth+1) for k, v in d.items())\n"
    },
    {
        "number": 301,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Finds the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Find the maximum depth of a nested dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    \n    depths = []\n    for k in d:\n        depths.append(dict_depth(d[k]))\n    \n    if not depths:\n        return 1\n    \n    return max(depths) + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    \n    return 1 + max(dict_depth(v) for v in d.values())"
    },
    {
        "number": 301,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Returns the depth of a nested dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 301,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())\n"
    },
    {
        "number": 304,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    # Calculate the effective rotation\n    effective_rotation = rotations % n\n    # Calculate the index of the first element of the original array\n    original_first_index = n - effective_rotation\n    # Check if the original first element is present in the given range\n    if original_first_index in ranges:\n        # If yes, then the element at the given index is the (index - original_first_index + 1)th element of the original array\n        return arr[index - original_first_index + n]\n    else:\n        # If not, then the element at the given index is the (index - n + effective_rotation)th element of the original array\n        return arr[index - n + effective_rotation]\n"
    },
    {
        "number": 304,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    n = len(arr)\n    # calculate the effective rotation\n    effective_rotation = rotations % n\n    \n    # calculate the index of the last element of the original array\n    original_last_index = n - 1 - effective_rotation\n    \n    # calculate the index of the last element of the sorted array\n    sorted_last_index = min(original_last_index, ranges[index])\n    \n    # calculate the index of the first element of the sorted array\n    sorted_first_index = max(0, sorted_last_index - effective_rotation)\n    \n    # calculate the index of the desired element in the original array\n    original_index = arr.index(arr[sorted_first_index:sorted_last_index+1].sort()[index])\n    \n    return arr[original_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Create a new array with the rotations\n    new_arr = [0] * len(arr)\n    for i in range(len(arr)):\n        new_arr[(i + rotations) % len(arr)] = arr[i]\n\n    # Find the element at the given index\n    return new_arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Finding the actual index after rotations\n    actual_index = index - rotations\n    \n    # If actual index is negative, we add the ranges to it to make it positive\n    if actual_index < 0:\n        actual_index += ranges\n    \n    # Returning the element at the actual index\n    return arr[actual_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # rotate the array\n    for i in range(rotations):\n        arr.insert(0, arr.pop())\n    \n    # find the element at the given index\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    # Calculate the effective rotation\n    effective_rotation = rotations % n\n    \n    # Find the actual index in the original array\n    actual_index = (index + effective_rotation) % n\n    \n    # Return the element at the actual index\n    return arr[actual_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    # Calculate the effective rotation\n    effective_rotation = rotations % n\n    # Find the index of the first element of the original array\n    first_element_index = index - effective_rotation\n    # If the index is less than 0, then add n to it to make it positive\n    if first_element_index < 0:\n        first_element_index += n\n    return arr[first_element_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    actual_index = (index - rotations) % n\n    return arr[actual_index]"
    },
    {
        "number": 304,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    n = len(arr)\n    # rotations % n is the number of rotations that can be made\n    rotations = rotations % n\n    # find the index of the first element of the range\n    start = ranges[0]\n    # find the index of the last element of the range\n    end = ranges[1]\n    # calculate the index of the element after rotations\n    index = (index - start + rotations) % (end - start + 1) + start\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # calculate the actual index of the element after rotations\n    actual_index = (index + rotations) % len(arr)\n    # return the element at the actual index\n    return arr[actual_index]\n"
    },
    {
        "number": 305,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [w for w in words if re.search('^p', w)]\n    if len(p_words) < 2:\n        return p_words\n    return p_words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w*', re.IGNORECASE)\n    p_words = [word for word in words if pattern.match(word)]\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r\"^[pP].*\"\n    matched_words = [word for word in words if re.match(pattern, word)]\n    if len(matched_words) >= 2:\n        return matched_words[0], matched_words[1]\n    else:\n        return None\n"
    },
    {
        "number": 305,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p\\w+' # regex pattern to match words starting with 'p'\n    matches = re.findall(pattern, words.lower()) # find all matches in lowercase\n    return matches[:2] # return first two matches\n"
    },
    {
        "number": 305,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef start_with_p(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if re.match('^p', word)]\n    if len(p_words) < 2:\n        return \"Not enough words starting with 'p' in the list.\"\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef start_with_p(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    p_words = [word for word in words if pattern.match(word)]\n    return p_words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p')\n    p_words = [word for word in words if pattern.match(word)]\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef start_with_p(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match('^[Pp]', word):\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return None\n"
    },
    {
        "number": 305,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef start_with_p(words):\n    # use regex to find all words starting with 'p'\n    p_words = re.findall(r'\\bp\\w+', ' '.join(words))\n    \n    # return the first two words found, or an empty list if less than two were found\n    return p_words[:2]\n"
    },
    {
        "number": 305,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef start_with_p(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p')\n    p_words = [word for word in words if pattern.match(word)]\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]\n"
    },
    {
        "number": 306,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Create a list to store the maximum sum of increasing subsequence\n    max_sum = [0]*(n)\n    # Initialize the first element with the value of the first element of the given list\n    max_sum[0] = a[0]\n    # Loop through the list starting from the second element\n    for i in range(1, n):\n        # Check if the current element is greater than the kth element\n        if i <= index and a[i] > a[k]:\n            # If the current element is greater, set the maximum sum to the current element\n            max_sum[i] = a[i]\n        else:\n            # If the current element is not greater, find the maximum sum of the previous elements\n            max_sum[i] = max(max_sum[j] for j in range(i) if a[j] < a[i]) + a[i]\n    # Return the maximum sum of the subsequence\n    return max_sum[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Initialize max_sum as 0\n    max_sum = 0\n\n    # Initialize max_ending_here as the value of ith element\n    max_ending_here = a[index]\n\n    # Loop through all elements from ith to kth index\n    for i in range(index + 1, k + 1):\n        # If the current element is greater than max_ending_here, update max_ending_here\n        if a[i] > max_ending_here:\n            max_ending_here = a[i]\n\n        # If the current element is greater than max_sum, update max_sum\n        if max_ending_here > max_sum:\n            max_sum = max_ending_here\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # Initialize two lists to store the maximum sum including the current element and excluding the current element\n    incl = [0] * (n + 1)\n    excl = [0] * (n + 1)\n    \n    # Initialize the maximum sum including the kth element\n    max_sum_incl_k = 0\n    \n    # Loop through the array\n    for i in range(1, n + 1):\n        \n        # If the current element is less than or equal to the kth element, update the maximum sum including the kth element\n        if i > index and a[i] <= a[k]:\n            max_sum_incl_k = max(max_sum_incl_k, a[i])\n        \n        # Update the maximum sum including the current element\n        incl[i] = max(incl[i-1] + a[i], excl[i-1] + a[i])\n        \n        # Update the maximum sum excluding the current element\n        excl[i] = max(incl[i-1], excl[i-1])\n        \n    # Return the maximum sum including the kth element\n    return max_sum_incl_k\n"
    },
    {
        "number": 306,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n or k >= n:\n        return 0\n\n    if index == n-1 and k == n-1:\n        return a[index]\n\n    # calculate sum of subsequence until index\n    subseq_sum = 0\n    max_sum = 0\n    i = index\n    while i >= 0:\n        if a[i] < a[k]:\n            subseq_sum += a[i]\n            i -= 1\n        else:\n            break\n    max_sum = max(max_sum, subseq_sum + a[k])\n\n    # calculate sum of subsequence including k and after it\n    i = k+1\n    while i < n:\n        if a[i] > a[k]:\n            max_sum = max(max_sum, subseq_sum + a[i])\n        i += 1\n\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n or k >= n:\n        return None\n    \n    max_sum = 0\n    for i in range(index, k+1):\n        subseq_sum = sum(a[index:i+1])\n        if subseq_sum > max_sum:\n            max_sum = subseq_sum\n            \n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a new list containing the elements from a[index+1:k+1]\n    subseq = a[index+1:k+1]\n    \n    # Initialize a variable to keep track of the maximum sum found so far\n    max_sum = float('-inf')\n    \n    # Loop through all possible starting points for the increasing subsequence\n    for i in range(len(subseq)):\n        # Initialize a variable to keep track of the sum of the subsequence starting at this point\n        sum_so_far = subseq[i]\n        \n        # Loop through the rest of the subsequence, starting at the next index\n        for j in range(i+1, len(subseq)):\n            # If the current element is greater than the previous one, add it to the subsequence\n            if subseq[j] > subseq[j-1]:\n                sum_so_far += subseq[j]\n            # If the current element is not greater than the previous one, start a new subsequence\n            else:\n                sum_so_far = subseq[j]\n            \n            # Update the maximum sum if necessary\n            max_sum = max(max_sum, sum_so_far)\n    \n    # Return the maximum sum found\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Initialize the result variable\n    result = 0\n    \n    # Find the maximum sum including k\n    for i in range(index+1, k+1):\n        # Check if the current element is greater than the previous maximum element\n        if a[i] > a[result]:\n            # Update the result variable\n            result = i\n            \n    return a[index] + a[result]"
    },
    {
        "number": 306,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n or k >= n:\n        return 0\n    if index + 1 == k:\n        return max(a[index] + a[k], a[index])\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k))"
    },
    {
        "number": 306,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n or k >= n:\n        return 0\n    \n    include = a[index] + max_sum_increasing_subseq(a, n, k, k)\n    exclude = max_sum_increasing_subseq(a, n, index+1, k)\n    \n    return max(include, exclude)\n"
    },
    {
        "number": 306,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index\n    and also including a given kth element which is after i, i.e., k > i .\n    \"\"\"\n    if index >= n or k >= n:\n        return 0\n    \n    max_sum = float('-inf')\n    for i in range(index, n):\n        if a[i] > a[k]:\n            subseq_sum = a[k] + max_sum_increasing_subseq(a, n, i+1, k+1)\n            max_sum = max(max_sum, subseq_sum)\n    \n    return max_sum\n"
    },
    {
        "number": 307,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    result = ()\n    for i in range(m, n):\n        result += (tuplex[i],)\n        \n    return result\n"
    },
    {
        "number": 307,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # check if the input is a tuple\n    if type(tuplex) != tuple:\n        return \"Invalid input. Please enter a tuple.\"\n    # check if m and n are integers\n    if type(m) != int or type(n) != int:\n        return \"Invalid input. Please enter integers for m and n.\"\n    # check if m and n are within range\n    if m < 1 or n > len(tuplex) or m > n:\n        return \"Invalid input. Please enter valid values for m and n.\"\n    \n    # get the colon of the tuple\n    colon_tuple = deepcopy(tuplex[m-1:n])\n    return colon_tuple\n"
    },
    {
        "number": 307,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    if len(tuplex) < m:\n        return \"Error: Tuple index out of range\"\n    elif len(tuplex) < n:\n        return \"Error: Tuple index out of range\"\n    else:\n        return tuplex[m-1:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n    The colon is a slice of a tuple that includes elements from the m-th to the n-th, inclusive.\n    \"\"\"\n    result = ()\n    for i in range(m-1, n):\n        result += (tuplex[i],)\n    return result\n"
    },
    {
        "number": 307,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Get a colon of a tuple.\n    '''\n    # Create a new tuple with the desired elements\n    new_tuple = tuplex[m-1:n]\n    # Make a deep copy of the new tuple to avoid modifying the original\n    result = deepcopy(new_tuple)\n    return result\n"
    },
    {
        "number": 307,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n\n    Parameters:\n    tuplex (tuple): A tuple to get a colon of.\n    m (int): The starting index of the colon.\n    n (int): The ending index of the colon.\n\n    Returns:\n    tuple: The colon of the tuple from index m to n (inclusive).\n    \"\"\"\n\n    return tuplex[m:n+1]\n"
    },
    {
        "number": 307,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m-1, n):\n        new_tuplex = new_tuplex[1:]\n    return new_tuplex[0]\n"
    },
    {
        "number": 307,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n"
    },
    {
        "number": 307,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n == None:\n        n = len(tuplex)\n    if m == None:\n        m = 0\n    if m > len(tuplex) or n > len(tuplex):\n        return None\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n]\n"
    },
    {
        "number": 308,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the lists in descending order\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    \n    # Initialize the result list\n    result = []\n    \n    # Loop through the largest factors in each list\n    for i in range(N):\n        # Calculate the product of the largest factors\n        product = nums1[i] * nums2[i]\n        \n        # Add the product to the result list\n        result.append(product)\n    \n    # Sort the result list in descending order\n    result = sorted(result, reverse=True)\n    \n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if len(products) < N:\n                products.append(product)\n                products.sort()\n            elif product > products[0]:\n                products.pop(0)\n                products.append(product)\n                products.sort()\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = [(n1, n2) for n1 in nums1 for n2 in nums2]\n    products.sort(key=lambda x: x[0] * x[1], reverse=True)\n    return [n1 * n2 for n1, n2 in products[:N]]\n"
    },
    {
        "number": 308,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if len(products) < N:\n                products.append(product)\n                products.sort()\n            elif product > products[0]:\n                products.pop(0)\n                products.append(product)\n                products.sort()\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Initialize a list to store the products\n    products = []\n    # Iterate through the sorted lists up to the specified length\n    for i in range(N):\n        # Multiply the i-th elements from each list\n        product = nums1[i] * nums2[i]\n        # Append the product to the list of products\n        products.append(product)\n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n    # Return the list of products\n    return products\n"
    },
    {
        "number": 308,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n"
    },
    {
        "number": 309,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    This function takes in two numbers as arguments and returns the maximum of the two.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a Python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two arguments a and b and returns the maximum of the two.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the leftmost unset bit\n    unset_bit = 1\n    while (n & unset_bit) != 0:\n        unset_bit = unset_bit << 1\n        \n    # Set the leftmost unset bit\n    n = n | unset_bit\n    \n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Finding the left most unset bit\n    unset_bit = 1\n    while n & unset_bit:\n        unset_bit = unset_bit << 1\n    \n    # Setting the left most unset bit\n    n |= unset_bit\n    \n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the rightmost set bit\n    mask = n\n    while mask != 0:\n        mask >>= 1\n        if mask != 0:\n            n ^= mask\n\n    # Add 1 to the number to set the leftmost unset bit\n    return n + 1\n"
    },
    {
        "number": 311,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n+1)\n"
    },
    {
        "number": 311,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (n | (n+1))\n"
    },
    {
        "number": 311,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # finding the left most unset bit position\n    pos = 0\n    while (n & (1 << pos)):\n        pos += 1\n    \n    # setting the left most unset bit at the found position\n    n |= (1 << pos)\n    \n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the leftmost unset bit and set it\n    for i in range(31, -1, -1):\n        if (n & (1 << i)) == 0:\n            n |= (1 << i)\n            return n\n\n    # If all bits are set, return the same number\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    # XOR the number with its negative number\n    n ^= -n\n    \n    # Keep only the left most unset bit\n    n ^= (n & -n)\n    \n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n + 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # If the number is 0, return 1 as the left most bit is unset\n    if n == 0:\n        return 1\n    \n    # Find the left most unset bit using bitwise operators and set it\n    return n | (1 << (n.bit_length()-1))\n"
    },
    {
        "number": 312,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Finds the volume of a cone using the formula V = 1/3 * \u03c0 * r^2 * h.\n    \"\"\"\n    return (1/3) * math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Function to find the volume of a cone.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3) * math.pi * r**2 * h\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone using the formula (1/3) * \u03c0 * r^2 * h.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while (n > 0):\n        n = n//2\n        power += 1\n    return 2**(power-1)\n"
    },
    {
        "number": 388,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 0:\n        n //= 2\n        power += 1\n    return 2 ** (power - 1)\n"
    },
    {
        "number": 388,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n >= 1:\n        n //= 2  # divide by 2 until n becomes 0 or less than 1\n        power += 1\n    return 2**(power-1)  # return the highest power of 2 that is less than or equal to n\n"
    },
    {
        "number": 388,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while p <= n:\n        p *= 2\n    return p//2\n"
    },
    {
        "number": 388,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 1:\n        n = n // 2\n        power += 1\n    return 2**power\n"
    },
    {
        "number": 388,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 0:\n        n //= 2\n        power += 1\n    return 2**(power-1)\n"
    },
    {
        "number": 388,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 0:\n        n //= 2\n        power += 1\n    return 2 ** (power - 1)\n"
    },
    {
        "number": 388,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n >= 2**power:\n        power += 1\n    return 2**(power-1)\n"
    },
    {
        "number": 388,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n >= 1:\n        n = n//2\n        power += 1\n    return 2**(power-1)\n"
    },
    {
        "number": 388,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 0:\n        n //= 2\n        power += 1\n    return 2 ** (power - 1)"
    },
    {
        "number": 389,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the n'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_lucas(n):  \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(5)) # Output: 11\n\nThe Lucas sequence is a sequence of numbers similar to the Fibonacci sequence, but with different starting values. The first two Lucas numbers are 2 and 1. To generate the next Lucas number, we add the previous two Lucas numbers. The Lucas sequence can be defined recursively as:\n\nL(n) = L(n-1) + L(n-2), for n > 1\nL(0) = 2\nL(1) = 1\n\nThe function find_lucas(n) takes an integer n as input and recursively calculates the n'th Lucas number using the above formula. The function first checks if n is 0 or 1, in which case it returns the corresponding starting value. Otherwise, it recursively calls itself with n-1 and n-2 as inputs, adds the results, and returns the sum. "
    },
    {
        "number": 389,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Apply the given format string to all elements in a list.\n    \"\"\"\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list\n"
    },
    {
        "number": 390,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list\n"
    },
    {
        "number": 390,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list\n"
    },
    {
        "number": 390,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    formatted_list = [string.format(elem) for elem in list_]\n    return formatted_list\n"
    },
    {
        "number": 390,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]\n"
    },
    {
        "number": 391,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {l2[i]: l3[i]}\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {}\n        for j in range(len(l2)):\n            dictionary[l1[i]][l2[j]] = {}\n            for k in range(len(l3)):\n                dictionary[l1[i]][l2[j]][l3[k]] = None\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result = {}\n    \n    # Loop through each element in the first list\n    for i in range(len(l1)):\n        # Create a key-value pair with the first list element as the key and an empty dictionary as the value\n        result[l1[i]] = {}\n        \n        # Loop through each element in the second list\n        for j in range(len(l2)):\n            # Create a key-value pair with the second list element as the key and the third list element as the value\n            result[l1[i]][l2[j]] = l3[i][j]\n    \n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        d[l1[i]][l2[i]] = l3[i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    my_dict = {}\n    for i in range(len(l1)):\n        my_dict[l1[i]] = {}\n        my_dict[l1[i]][l2[i]] = l3[i]\n    return my_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {}\n        for j in range(len(l2)):\n            dictionary[l1[i]][l2[j]] = {}\n            for k in range(len(l3)):\n                dictionary[l1[i]][l2[j]][l3[k]] = 0\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to hold the result\n    result = {}\n    # iterate over the elements of the first list\n    for i in range(len(l1)):\n        # use the element as a key in the dictionary\n        key = l1[i]\n        # create a nested dictionary for the corresponding value\n        result[key] = {}\n        # iterate over the elements of the second list\n        for j in range(len(l2)):\n            # use the element as a key in the nested dictionary\n            subkey = l2[j]\n            # assign the corresponding element of the third list as the value\n            result[key][subkey] = l3[i][j]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Loop through the lists and add the items as keys and values to the dictionary\n    for i in range(len(l1)):\n        result_dict[l1[i]] = {}\n        result_dict[l1[i]][l2[i]] = l3[i]\n    return result_dict\n"
    },
    {
        "number": 392,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n < 1:\n        return 0\n\n    memo = {}\n\n    def max_sum(n):\n        if n in memo:\n            return memo[n]\n\n        memo[n] = max(max_sum(n // 2) + max_sum(n // 3) + max_sum(n // 4) + max_sum(n // 5), n)\n        return memo[n]\n\n    return max_sum(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    else:\n        max_sum = max(get_max_sum(n//2)+get_max_sum(n//3)+get_max_sum(n//4)+get_max_sum(n//5), n)\n        return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        max_sum = max(n,\n                      get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n        return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 393,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for l in input_list:\n        if len(l) > max_length:\n            max_length = len(l)\n            max_list = l\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if isinstance(item, list):\n            if len(item) > max_length:\n                max_length = len(item)\n                max_list = item\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n            \n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if isinstance(item, list) and len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_list\n"
    },
    {
        "number": 394,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert tuple to set and compare lengths\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # converting tuple to set removes duplicates\n    # if length of set is equal to length of tuple, then no duplicates\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 395,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # Loop through the string and return the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store character counts\n    char_counts = {}\n    \n    # Iterate through the string and count character occurrences\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    \n    # Find the first non-repeated character\n    for char in str1:\n        if char_counts[char] == 1:\n            return char\n    \n    # If no non-repeated characters are found, return None\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    \n    # Count the occurrences of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character in the string\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If all characters are repeated, return None\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeating character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # find the first non-repeated character in the string\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    # if no non-repeated character is found, return None\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character\n    char_count = {}\n    \n    # Loop through the string and count the occurrence of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through the string again and return the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string) is not None"
    },
    {
        "number": 396,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    return bool(match)\n"
    },
    {
        "number": 396,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == b == c:\n        return a\n    elif a > b:\n        if a > c:\n            return c\n        else:\n            return a\n    else:\n        if b > c:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == b == c:\n        return a\n    elif a > b > c or c > b > a:\n        return b\n    elif b > a > c or c > a > b:\n        return a\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Create a list with the three numbers\n    nums = [a, b, c]\n    # Sort the list\n    nums.sort()\n    # Compute the median\n    if len(nums) % 2 == 0:\n        # If the list has an even number of elements,\n        # take the average of the two middle numbers\n        median = (nums[len(nums)//2] + nums[len(nums)//2 - 1]) / 2\n    else:\n        # If the list has an odd number of elements,\n        # take the middle number\n        median = nums[len(nums)//2]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    # find the middle index of the sorted list\n    mid_index = len(sorted_nums) // 2\n    # return the middle element if the length of the list is odd, or the average of middle two elements if the length is even\n    if len(sorted_nums) % 2 == 0:\n        return (sorted_nums[mid_index - 1] + sorted_nums[mid_index]) / 2\n    else:\n        return sorted_nums[mid_index]\n"
    },
    {
        "number": 397,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # create a list of the three numbers\n    num_list = [a,b,c]\n    # sort the list\n    num_list.sort()\n    # find the middle index of the list\n    mid_index = len(num_list)//2\n    # return the middle element of the list\n    return num_list[mid_index]\n"
    },
    {
        "number": 397,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a < c:\n            return a\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return c\n        else:\n            return b\n"
    },
    {
        "number": 397,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == b == c:\n        return a\n    elif a > b and a < c or a < b and a > c:\n        return a\n    elif b > a and b < c or b < a and b > c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == b == c:\n        return a\n    elif a <= b <= c or c <= b <= a:\n        return b\n    else:\n        return a if a <= c else c\n"
    },
    {
        "number": 397,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Find the middle index\n    middle_index = len(sorted_numbers) // 2\n    \n    # If the length of sorted_numbers is even, return the average of the two middle numbers\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    \n    # If the length of sorted_numbers is odd, return the middle number\n    else:\n        return sorted_numbers[middle_index]\n"
    },
    {
        "number": 397,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Create a list of the three numbers\n    nums = [a, b, c]\n    # Sort the list\n    nums.sort()\n    # Return the middle number (or the average of the two middle numbers if there are an even number of numbers)\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2-1] + nums[len(nums)//2]) / 2\n    else:\n        return nums[len(nums)//2]\n"
    },
    {
        "number": 398,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Compute the sum of digits of each number in a given list.\n    '''\n    result = []\n    for num in nums:\n        # Convert the number to a string to be able to iterate over its digits\n        digits = str(num)\n        # Compute the sum of digits using a generator expression and the built-in `sum` function\n        digit_sum = sum(int(d) for d in digits)\n        # Add the result to the output list\n        result.append(digit_sum)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = 0\n        for digit in str(num):\n            digits_sum += int(digit)\n        result.append(digits_sum)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of sum of digits of each number in the same order.\n    \"\"\"\n    result = []\n    for num in nums:\n        # Converting the number to string to iterate over each digit\n        num_str = str(num)\n        # Initializing sum of digits of the current number to zero\n        digit_sum = 0\n        for digit in num_str:\n            # Adding each digit to the sum of digits of the current number\n            digit_sum += int(digit)\n        # Adding the sum of digits of the current number to the result list\n        result.append(digit_sum)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(d) for d in str(num)]\n        result.append(sum(digits))\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Computes the sum of digits of each number in a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        digits = [int(d) for d in str(num)]\n        digit_sum = sum(digits)\n        result.append(digit_sum)\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_list = []\n    for i in range(len(test_tup1)):\n        xor_list.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(xor_list)\n"
    },
    {
        "number": 399,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Convert the tuples to lists and iterate over them to perform the bitwise XOR operation\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] ^ lst2[i])\n    \n    # Convert the list back to a tuple and return it\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    # Check if the lengths of the tuples are equal\n    if len(test_tup1) != len(test_tup2):\n        print(\"Error: The tuples must have the same length.\")\n        return None\n    \n    # Perform the bitwise XOR operation\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    \n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Perform the bitwise XOR operation on each pair of integers in the two tuples\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    \n    # Convert the result list to a tuple and return it\n    return tuple(result)\n"
    },
    {
        "number": 399,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i], )\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(i) for i in test_list)\n    return len(unique_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        freq[tup] = freq.get(tup, 0) + 1\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty dictionary to store the frequency of each tuple\n    freq_dict = {}\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup not in freq_dict:\n            # If not, add it to the dictionary with a value of 1\n            freq_dict[tup] = 1\n        else:\n            # If it is already in the dictionary, increment its value by 1\n            freq_dict[tup] += 1\n\n    # Return the length of the dictionary, which is the number of unique tuples in the list\n    return len(freq_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 401,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        t1 = test_tup1[i]\n        t2 = test_tup2[i]\n        inner_result = []\n        for j in range(len(t1)):\n            inner_result.append(t1[j] + t2[j])\n        result.append(tuple(inner_result))\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_list = []\n        for j in range(len(test_tup1[i])):\n            inner_list.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_list))\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup1 = test_tup1[i]\n        tup2 = test_tup2[i]\n        temp = []\n        for j in range(len(tup1)):\n            temp.append(tup1[j] + tup2[j])\n        result.append(tuple(temp))\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp1 = test_tup1[i]\n        temp2 = test_tup2[i]\n        temp_result = []\n        for j in range(len(temp1)):\n            temp_result.append(temp1[j] + temp2[j])\n        result.append(tuple(temp_result))\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup1 = test_tup1[i]\n        tup2 = test_tup2[i]\n        temp_result = []\n        for j in range(len(tup1)):\n            temp_result.append(tup1[j] + tup2[j])\n        result.append(tuple(temp_result))\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        tup1 = test_tup1[i]\n        tup2 = test_tup2[i]\n        temp_result = []\n        for j in range(len(tup1)):\n            temp_result.append(tup1[j] + tup2[j])\n        result.append(tuple(temp_result))\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_tup1 = test_tup1[i]\n        inner_tup2 = test_tup2[i]\n        inner_result = []\n        for j in range(len(inner_tup1)):\n            inner_result.append(inner_tup1[j] + inner_tup2[j])\n        result.append(tuple(inner_result))\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of both tuples\n        temp = (test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1])\n        # Append the result to the list\n        result.append(temp)\n        \n    return result\n"
    },
    {
        "number": 401,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup1 = test_tup1[i]\n        tup2 = test_tup2[i]\n        temp_result = []\n        for j in range(len(tup1)):\n            temp_result.append(tup1[j] + tup2[j])\n        result.append(tuple(temp_result))\n    return tuple(result)\n"
    },
    {
        "number": 404,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Find the minimum of two numbers.\n\n    Args:\n        a: first number\n        b: second number\n\n    Returns:\n        minimum of a and b\n    \"\"\"\n\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input parameters and returns the minimum of the two.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    This function returns the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Find the minimum of two numbers.\n\n    :param a: first number\n    :param b: second number\n    :return: the minimum of a and b\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 405,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n"
    },
    {
        "number": 405,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    This function takes a number as input and returns True if the parity of the number is odd and False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"The parity of {} is even\".format(x)\n    else:\n        return \"The parity of {} is odd\".format(x)\n"
    },
    {
        "number": 406,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of the given number is even.\")\n    else:\n        print(\"The parity of the given number is odd.\")\n"
    },
    {
        "number": 406,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"The parity of the given number is even.\"\n    else:\n        return \"The parity of the given number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and checks whether its parity is odd or not.\n    '''\n    if x % 2 == 1:\n        return \"The parity of the number is odd.\"\n    else:\n        return \"The parity of the number is even.\""
    },
    {
        "number": 406,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2!=0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 407,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a string\n    n_str = str(n)\n    # Get the length of the string\n    n_len = len(n_str)\n    # Convert the string back to a list of integers\n    n_list = [int(d) for d in n_str]\n    # Sort the list in descending order\n    n_list.sort(reverse=True)\n    # Find the index of the first digit that is smaller than the previous digit\n    i = n_len - 1\n    while i > 0 and n_list[i] >= n_list[i - 1]:\n        i -= 1\n    # If no such digit is found, the number is already the largest possible\n    if i <= 0:\n        return None\n    # Find the index of the smallest digit that is greater than the digit at i\n    j = n_len - 1\n    while n_list[j] <= n_list[i - 1]:\n        j -= 1\n    # Swap the digits at i - 1 and j\n    n_list[i - 1], n_list[j] = n_list[j], n_list[i - 1]\n    # Reverse the digits after i - 1\n    n_list[i:] = n_list[n_len - 1:i - 1:-1]\n    # Convert the list back to an integer\n    next_bigger = int(''.join(str(d) for d in n_list))\n    # Return the next bigger number\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string and sort its digits\n    digits = sorted(str(n), reverse=True)\n    # check if there is a pair of adjacent digits that are in the wrong order\n    for i in range(len(digits) - 1):\n        if digits[i] > digits[i+1]:\n            # if so, find the smallest digit to the right of the pair that is greater than the left digit\n            j = i+1\n            while j < len(digits) and digits[j] > digits[i]:\n                j += 1\n            # swap the left and right digits\n            digits[i], digits[j-1] = digits[j-1], digits[i]\n            # reverse the digits to the right of the pair to get the smallest number\n            digits[i+1:] = digits[len(digits)-1:i:-1]\n            # convert the digits back to an integer and return it\n            return int(''.join(digits))\n    # if there are no adjacent pairs that can be rearranged, return None\n    return None\n"
    },
    {
        "number": 407,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # find the index of the first digit that is smaller than the previous digit\n    i = len(digits) - 1\n    while i > 0 and digits[i] >= digits[i-1]:\n        i -= 1\n    \n    # if no such digit is found, the number is already the biggest possible\n    if i == 0:\n        return -1\n    \n    # find the index of the smallest digit among the remaining digits that is bigger than the digit at i-1\n    j = i\n    while j < len(digits) and digits[j] > digits[i-1]:\n        j += 1\n    \n    # swap the digits at i-1 and j\n    digits[i-1], digits[j-1] = digits[j-1], digits[i-1]\n    \n    # reverse the digits after i-1 to make the new number as small as possible\n    digits[i:] = digits[i:][::-1]\n    \n    # convert the digits back to a number and return it\n    return int(''.join(str(d) for d in digits))\n"
    },
    {
        "number": 407,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string so we can manipulate the digits\n    num_str = str(n)\n    # Get a list of the digits in the number\n    digits = [int(d) for d in num_str]\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Loop through all possible permutations of the digits\n    for perm in itertools.permutations(digits):\n        # Check if the permutation is greater than the original number\n        perm_num = int(''.join(str(d) for d in perm))\n        if perm_num > n:\n            return perm_num\n    # If no bigger number was found, return None\n    return None\n"
    },
    {
        "number": 407,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string and sort its digits in descending order\n    sorted_digits = sorted(str(n), reverse=True)\n    # Check if the sorted digits are in descending order\n    if sorted_digits == list(str(n)):\n        return -1\n    # Create a list of permutations of the sorted digits\n    permutations = set(map(lambda x: int(''.join(x)), permutations(sorted_digits)))\n    # Find the smallest number greater than n from the permutations\n    next_bigger = min(filter(lambda x: x > n, permutations))\n    return next_bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i-1] >= digits[i]:\n        i -= 1\n    if i <= 0:\n        return -1  # no bigger number possible\n    j = len(digits) - 1\n    while digits[j] <= digits[i-1]:\n        j -= 1\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    digits[i:] = reversed(digits[i:])\n    return int(''.join(str(d) for d in digits))\n"
    },
    {
        "number": 407,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Find the index of the first digit that is smaller than the digit immediately after it\n    for i in range(len(sorted_digits)-1):\n        if sorted_digits[i] > sorted_digits[i+1]:\n            # Swap the digit at that index with the next smallest digit that is greater than it\n            for j in range(i+1, len(sorted_digits)):\n                if sorted_digits[j] > sorted_digits[i]:\n                    sorted_digits[i], sorted_digits[j] = sorted_digits[j], sorted_digits[i]\n                    break\n            # Reverse the digits after the swapped digit\n            reversed_digits = sorted_digits[:i+1] + sorted_digits[i+1:][::-1]\n            # Join the digits back into a number and return it\n            return int(''.join(str(d) for d in reversed_digits))\n    \n    # If no such digit is found, return None to indicate that there is no next bigger number\n    return None\n"
    },
    {
        "number": 407,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string for easy manipulation\n    num_str = str(n)\n    # Split the number into individual digits\n    digits = [int(d) for d in num_str]\n    # Find the index of the largest digit in the number\n    largest_index = digits.index(max(digits))\n    # Remove the largest digit from the list of digits\n    largest_digit = digits.pop(largest_index)\n    # Find the index of the next smallest digit that is greater than the largest digit\n    next_smallest_index = digits.index(min(filter(lambda x: x > largest_digit, digits)))\n    # Swap the largest and next smallest digits\n    digits[largest_index], digits[next_smallest_index] = digits[next_smallest_index], digits[largest_index]\n    # Sort the remaining digits in ascending order\n    digits[largest_index+1:] = sorted(digits[largest_index+1:])\n    # Convert the list of digits back to an integer\n    next_bigger_num = int(''.join(str(d) for d in digits))\n    # Return the next bigger number if it is greater than the original number, else return None\n    return next_bigger_num if next_bigger_num > n else None\n"
    },
    {
        "number": 407,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert n to a list of digits\n    digits = [int(d) for d in str(n)]\n    # sort the digits in descending order\n    digits.sort(reverse=True)\n    # convert digits back to a number\n    sorted_n = int(''.join([str(d) for d in digits]))\n    if sorted_n == n:\n        # if the sorted number is the same as the original number, no permutation is possible\n        return -1\n    else:\n        # try all permutations of the digits of n until a bigger number is found\n        for i in range(len(digits)-1, 0, -1):\n            # if the digit at position i is smaller than the digit at position i-1\n            if digits[i] > digits[i-1]:\n                # find the smallest digit in the range (i, len(digits)) that is bigger than digits[i-1]\n                j = i\n                while j < len(digits) and digits[j] > digits[i-1]:\n                    j += 1\n                if j < len(digits):\n                    # swap digits[i-1] and digits[j]\n                    digits[i-1], digits[j] = digits[j], digits[i-1]\n                    # reverse the digits in the range (i, len(digits)) to get the smallest possible permutation\n                    digits[i:] = digits[len(digits)-1:i-1:-1]\n                    # convert digits back to a number and return it\n                    return int(''.join([str(d) for d in digits]))\n        # if no bigger permutation is possible, return -1\n        return -1"
    },
    {
        "number": 407,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Rearranges the digits of n to create the next bigger number.\n    \"\"\"\n    # Convert n to a list of digits\n    digits = list(str(n))\n\n    # Find the index of the first digit that is less than the digit immediately after it\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i - 1]:\n        i -= 1\n\n    # If no such digit exists, return None (no bigger number can be formed)\n    if i == 0:\n        return None\n\n    # Find the index of the first digit that is greater than the digit at i\n    j = len(digits) - 1\n    while digits[j] <= digits[i - 1]:\n        j -= 1\n\n    # Swap the digits at i-1 and j\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n\n    # Reverse the digits after i-1\n    digits[i:] = reversed(digits[i:])\n\n    # Convert the list of digits back to an integer and return it\n    return int(''.join(digits))\n"
    },
    {
        "number": 408,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heap.append((nums1[i] + nums2[j], nums1[i], nums2[j]))\n    heapq.heapify(heap)\n    while len(result) < k:\n        _, n1, n2 = heapq.heappop(heap)\n        if n1 not in result:\n            result.append(n1)\n        if n2 not in result:\n            result.append(n2)\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a heap with the first element of each list\n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    # Initialize the result list with k elements\n    result = [(nums1[0] + nums2[0], 0, 0)] * k\n    # Initialize the counter for the k elements\n    counter = 1\n    # Loop through the heap\n    while heap:\n        # Pop the minimum element from the heap\n        minimum = heapq.heappop(heap)\n        # Check if the minimum element is not the last element of the result list\n        if counter < k:\n            # Calculate the indices of the next elements to add to the heap\n            index1 = minimum[1] + 1\n            index2 = minimum[2]\n            # Check if the next element from nums1 is within the bounds\n            if index1 < len(nums1):\n                # Calculate the sum of the next pair of elements and add it to the heap\n                next_sum = nums1[index1] + nums2[index2]\n                heapq.heappush(heap, (next_sum, index1, index2))\n            # Check if the next element from nums2 is within the bounds\n            if index2 + 1 < len(nums2):\n                # Calculate the sum of the next pair of elements and add it to the heap\n                next_sum = nums1[index1] + nums2[index2 + 1]\n                heapq.heappush(heap, (next_sum, index1, index2 + 1))\n            # Add the minimum element to the result list\n            result[counter] = minimum\n            counter += 1\n        else:\n            break\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heap.append((num1 + num2, num1, num2))\n            if len(heap) > k:\n                heapq.heappop(heap)\n\n    while heap:\n        _, num1, num2 = heapq.heappop(heap)\n        pairs.append((num1, num2))\n    return pairs[::-1]\n"
    },
    {
        "number": 408,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair_sum = nums1[i] + nums2[j]\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (-pair_sum, nums1[i], nums2[j]))\n            else:\n                if -pair_sum > min_heap[0][0]:\n                    heapq.heappushpop(min_heap, (-pair_sum, nums1[i], nums2[j]))\n    return [(-pair[0], pair[1], pair[2]) for pair in min_heap]\n"
    },
    {
        "number": 408,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n            else:\n                if (nums1[i] + nums2[j]) < heap[0][0]:\n                    heapq.heappushpop(heap, (nums1[i] + nums2[j], nums1[i], nums2[j]))\n    return [pair[1:] for pair in heap]\n"
    },
    {
        "number": 408,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n\n    # create a min heap with the first elements of both arrays\n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    \n    # keep track of the smallest pairs found so far\n    smallest_pairs = []\n\n    # loop until k pairs are found or both arrays are exhausted\n    while heap and len(smallest_pairs) < k:\n        # pop the smallest pair from the heap\n        total, i, j = heapq.heappop(heap)\n        smallest_pairs.append((nums1[i], nums2[j]))\n\n        # add the next pair from nums1 and the current element of nums2\n        if i + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[i+1] + nums2[j], i+1, j))\n\n        # add the next pair from nums2 and the current element of nums1\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j+1], i, j+1))\n\n    return smallest_pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            heap.append((num1 + num2, num1, num2))\n    \n    heapq.heapify(heap)\n    \n    while k > 0 and heap:\n        _, num1, num2 = heapq.heappop(heap)\n        pairs.append((num1, num2))\n        k -= 1\n        \n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2, num1+num2))\n    pairs.sort(key=lambda x: x[2])\n    return [pair[:2] for pair in pairs[:k]]\n"
    },
    {
        "number": 408,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap = []\n    \n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2, num1+num2))\n    \n    heapq.heapify(pairs)\n    \n    for _ in range(k):\n        num1, num2, sum_ = heapq.heappop(pairs)\n        heap.append((num1, num2, sum_))\n    \n    return heap\n"
    },
    {
        "number": 408,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    pairs = []\n    for n1 in nums1:\n        for n2 in nums2:\n            pairs.append((n1+n2, n1, n2))\n    heapq.heapify(pairs)\n    result = []\n    for _ in range(k):\n        if not pairs:\n            break\n        _, n1, n2 = heapq.heappop(pairs)\n        result.append((n1, n2))\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            min_product = min(min_product, product)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if prod < min_prod:\n                min_prod = prod\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 410,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Create an empty list to store the numeric values\n    num_list = []\n\n    # Loop through the input list and append only numeric values to the num_list\n    for val in listval:\n        if isinstance(val, (int, float)):\n            num_list.append(val)\n\n    # Return the minimum value in the num_list\n    if num_list:\n        return min(num_list)\n    else:\n        return None\n"
    },
    {
        "number": 410,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None:\n            min_val = val\n        elif val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Finds the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = None\n    for val in listval:\n        if min_val is None:\n            min_val = val\n        elif val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(?:^|_)([a-zA-Z])', lambda x: x.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_([a-zA-Z0-9])', lambda m: m.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(x.title() for x in words[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(w.title() for w in words[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(?:^|_)([a-z])', lambda x: x.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = ''\n    for w in words:\n        camel_case_word += w.capitalize()\n    return camel_case_word\n"
    },
    {
        "number": 411,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = ''\n    for w in words:\n        camel_case_word += w.capitalize()\n    return camel_case_word\n"
    },
    {
        "number": 411,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-zA-Z0-9])', lambda match: match.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join([w.title() for w in words[1:]])"
    },
    {
        "number": 411,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))"
    },
    {
        "number": 412,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [i for i in l if i % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n"
    },
    {
        "number": 413,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    extracted_element = []\n    for tuple_element in list1:\n        extracted_element.append(tuple_element[n-1])\n    return extracted_element\n"
    },
    {
        "number": 413,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for tup in list1:\n        if len(tup) >= n:\n            result.append(tup[n-1])\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Create an empty list to store the nth elements of each tuple in the given list\n    nth_elements = []\n    # Loop through each tuple in the list\n    for tup in list1:\n        # Check if the tuple contains at least n elements\n        if len(tup) >= n:\n            # If it does, append the nth element to the nth_elements list\n            nth_elements.append(tup[n-1])\n        else:\n            # If it doesn't, append None to the nth_elements list\n            nth_elements.append(None)\n    # Return the list of nth elements\n    return nth_elements\n"
    },
    {
        "number": 413,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # create a new list to store the nth element of each tuple\n    nth_element_list = []\n    # iterate over each tuple in the list\n    for tup in list1:\n        # check if the tuple has at least n elements\n        if len(tup) >= n:\n            # append the nth element of the tuple to the new list\n            nth_element_list.append(tup[n-1])\n    # return the new list of nth elements\n    return nth_element_list\n"
    },
    {
        "number": 413,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for tup in list1:\n        if n <= len(tup):\n            result.append(tup[n-1])\n        else:\n            result.append(None)\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        return None\n    else:\n        return list1[n-1][n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    extracted_element = [tup[n-1] for tup in list1]\n    return extracted_element\n"
    },
    {
        "number": 413,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function extracts the nth element from a given list of tuples.\n    \"\"\"\n    nth_element = []\n    for tup in list1:\n        nth_element.append(tup[n-1])\n    return nth_element\n"
    },
    {
        "number": 413,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result\n"
    },
    {
        "number": 413,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = [element[n-1] for element in list1]\n    return nth_element\n"
    },
    {
        "number": 414,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if any(i in list1 for i in list2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check whether any value in list1 exists in list2.\n    '''\n    for val in list1:\n        if val in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Check if any value in list1 exists in list2\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = -float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair\n"
    },
    {
        "number": 415,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n    return max_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize the maximum product to the smallest possible value\n    max_product = float('-inf')\n    \n    # Loop through the array and consider every pair of elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the current pair\n            product = arr[i] * arr[j]\n            # Update the maximum product if the current product is greater\n            if product > max_product:\n                max_product = product\n    \n    # Return the maximum product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = -float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair\n"
    },
    {
        "number": 415,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    arr.sort()\n    n = len(arr)\n    for i in range(n-1):\n        product = arr[n-1-i] * arr[i]\n        if product > max_product:\n            max_product = product\n            pair = (arr[n-1-i], arr[i])\n    return pair\n"
    },
    {
        "number": 415,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair\n"
    },
    {
        "number": 415,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n    return max_pair, max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                pair = (arr[i], arr[j])\n    return pair\n"
    },
    {
        "number": 415,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                pair = (arr[i], arr[j])\n    return pair\n"
    },
    {
        "number": 417,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for tpl in Input:\n        common_elements.add(tpl[0])\n    return list(common_elements)\n"
    },
    {
        "number": 417,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = set([t[0] for t in Input])\n    output = []\n    for f in common_first:\n        output.append([f, [t[1] for t in Input if t[0] == f]])\n    return output\n"
    },
    {
        "number": 417,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in range(len(Input)-1):\n        if Input[i][0] == Input[i+1][0]:\n            result.append((Input[i][0], Input[i][1], Input[i+1][1]))\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elements = set([t[0] for t in Input])\n    result = []\n    for element in first_elements:\n        group = [t for t in Input if t[0] == element]\n        result.append((element, group))\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elements = [t[0] for t in Input]\n    common_element = set(first_elements)\n    if len(common_element) > 1:\n        return None\n    else:\n        return common_element.pop()\n"
    },
    {
        "number": 417,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for tup in Input:\n        if len(common_elements) == 0:\n            common_elements.add(tup[0])\n        else:\n            common_elements = common_elements.intersection(tup)\n            if len(common_elements) == 0:\n                break\n    return common_elements\n"
    },
    {
        "number": 417,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for tup in Input:\n        if tup[0] not in result:\n            result.append(tup[0])\n    return result\n"
    },
    {
        "number": 417,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for tup in Input:\n        if tup[0] in groups:\n            groups[tup[0]].append(tup)\n        else:\n            groups[tup[0]] = [tup]\n    return groups\n"
    },
    {
        "number": 417,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary to store the first element of each tuple as key and its count as value\n    count_dict = {}\n    \n    # Iterate over the input list of tuples\n    for tup in Input:\n        # If the first element of the tuple is already in the dictionary, increment its count by 1\n        if tup[0] in count_dict:\n            count_dict[tup[0]] += 1\n        # Else, add the first element of the tuple to the dictionary with count 1\n        else:\n            count_dict[tup[0]] = 1\n    \n    # Find the first element with count equal to the length of the input list\n    for key, value in count_dict.items():\n        if value == len(Input):\n            return key\n    \n    # If no such element is found, return None\n    return None\n"
    },
    {
        "number": 417,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = None\n    for tup in Input:\n        if common_first_element is None:\n            common_first_element = tup[0]\n        elif tup[0] != common_first_element:\n            return None\n    return common_first_element\n"
    },
    {
        "number": 418,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n"
    },
    {
        "number": 418,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n            \n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element\n"
    },
    {
        "number": 418,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element\n"
    },
    {
        "number": 419,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # rounding each number in the list to the nearest integer\n    rounded_list = [round(num) for num in list1]\n    # finding the sum of the rounded list\n    total_sum = sum(rounded_list)\n    # multiplying the sum by the length of the list\n    result = total_sum * len(list1)\n    # printing the final result\n    print(result)\n"
    },
    {
        "number": 419,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)\n"
    },
    {
        "number": 419,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # round each number in the list to the nearest integer\n    rounded_list = [round(num) for num in list1]\n    # calculate the sum of the rounded list\n    total_sum = sum(rounded_list)\n    # multiply the total sum by the length of the list\n    result = total_sum * len(list1)\n    # print the final result\n    print(result)\n"
    },
    {
        "number": 419,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    result = total_sum * len(list1)\n    print(result)\n"
    },
    {
        "number": 419,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list) * len(list1)\n    print(total_sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for num in list1:\n        sum += round(num)\n    total_sum = sum * len(list1)\n    print(\"The total sum is:\", total_sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(\"The sum multiplied by the length of the list is:\", result)\n"
    },
    {
        "number": 419,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)\n"
    },
    {
        "number": 419,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    total *= len(list1)\n    print(total)\n"
    },
    {
        "number": 420,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    sum = 0\n    i = 1\n    while i <= (2*n):\n        sum += i**3\n        i += 1\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Cube sum of first\", n, \"even natural numbers:\", cube_Sum(n))\n"
    },
    {
        "number": 420,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def cube_sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function finds the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    num = 2\n    count = 0\n    \n    while count < n:\n        sum += num**3\n        num += 2\n        count += 1\n    \n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    i = 2\n    while count < n:\n        sum += i ** 3\n        count += 1\n        i += 2\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while n > 0:\n        sum += i ** 3\n        n -= 1\n        i += 2\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize sum variable to 0\n    sum = 0\n    # Loop through the first n even natural numbers and add their cubes to sum\n    for i in range(1, 2*n+1, 2):\n        sum += i**3\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    sum = 0\n    count = 0\n    i = 1\n    while count < n:\n        if i % 2 == 0:\n            sum += i ** 3\n            count += 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    sum = 0\n    count = 0\n    i = 2\n    while count < n:\n        sum += i**3\n        count += 1\n        i += 2\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    sum = 0\n    num = 2\n    \n    for i in range(n):\n        sum += num**3\n        num += 2\n    \n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=''):\n    \"\"\"\n    Concatenate each element of a tuple into a single string, using a delimiter.\n\n    Args:\n        test_tup: A tuple of strings.\n        delimiter: A string to separate the elements of the tuple in the concatenated string. Defaults to an empty string.\n\n    Returns:\n        A string that is the concatenation of all elements in the tuple, separated by the delimiter.\n    \"\"\"\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    delimiter = '-'\n    concatenated_str = delimiter.join(str(elem) for elem in test_tup)\n    return concatenated_str\n"
    },
    {
        "number": 421,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Concatenate each element of a tuple using a delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = delimiter.join(str(elem) for elem in test_tup)\n    return concatenated_string\n"
    },
    {
        "number": 421,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    result = delimiter.join(str(x) for x in test_tup)\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = delimiter.join(test_tup)\n    return concatenated_string\n"
    },
    {
        "number": 421,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    result = \"\"\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n        if i != len(test_tup)-1:\n            result += delimiter\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = ''\n    for i in range(len(test_tup)-1):\n        concatenated_str += str(test_tup[i]) + delimiter\n    concatenated_str += str(test_tup[-1])\n    return concatenated_str\n"
    },
    {
        "number": 422,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    avg = sum/(n*(n+1)/2)\n    return avg\n"
    },
    {
        "number": 422,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([i**3 for i in range(1,n+1)])\n    average = sum_of_cubes / n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    \n    average = sum_of_cubes / n\n    \n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):   \n    \"\"\"\n    This function finds the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n\n"
    },
    {
        "number": 422,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum / n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):   \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum/(n*(n+1)*(2*n+1)/6.0)\n    return avg\n"
    },
    {
        "number": 424,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        result.append(tup[-1])\n    return tuple(result)\n"
    },
    {
        "number": 424,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        if isinstance(string, str):\n            result.append(string[-1])\n        else:\n            continue\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, str):\n            result.append(item[-1])\n        else:\n            result.append(None)\n    return tuple(result)\n"
    },
    {
        "number": 424,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        if isinstance(tup, str):\n            result.append(tup[-1])\n        else:\n            result.append(None)\n    return tuple(result)\n"
    },
    {
        "number": 424,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        if len(string) > 0:\n            rear_elements.append(string[-1])\n        else:\n            rear_elements.append(None)\n    return tuple(rear_elements)\n"
    },
    {
        "number": 424,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, str):\n            result.append(i[-1])\n        else:\n            result.append(None)\n    return result\n"
    },
    {
        "number": 424,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return tuple(result)\n"
    },
    {
        "number": 424,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, str):\n            result.append(i[-1])\n        else:\n            result.append(None)\n    return tuple(result)\n"
    },
    {
        "number": 425,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 != 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]\n"
    },
    {
        "number": 427,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Split the input date into year, month and day\n    year, month, day = re.split('-', dt)\n\n    # Return the date in the required format\n    return '{}-{}-{}'.format(day, month, year)\n"
    },
    {
        "number": 427,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        raise ValueError('Invalid date format')\n"
    },
    {
        "number": 427,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # using regex to extract year, month, and day values\n    year = re.search(r'\\d{4}', dt).group()\n    month = re.search(r'\\d{2}', dt).group()\n    day = re.search(r'\\d{2}(?!-)', dt).group()\n    # returning date in desired format\n    return f'{day}-{month}-{year}'\n"
    },
    {
        "number": 427,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Using regex to extract year, month, and day from the input date string\n    year = re.findall(r'\\d{4}', dt)[0]\n    month = re.findall(r'\\d{2}', dt)[1]\n    day = re.findall(r'\\d{2}', dt)[2]\n    \n    # Formatting the date string in the required format\n    new_dt = day + '-' + month + '-' + year\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        # using regex to check if input date is in yyyy-mm-dd format\n        if re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n            # split the input date into year, month and day\n            year, month, day = map(int, dt.split('-'))\n            # return the date in dd-mm-yyyy format\n            return '{:02d}-{:02d}-{}'.format(day, month, year)\n        else:\n            raise ValueError('Invalid date format')\n    except ValueError as ve:\n        print(ve)"
    },
    {
        "number": 427,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return day + \"-\" + month + \"-\" + year\n    else:\n        return None\n"
    },
    {
        "number": 427,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Using regular expressions to extract year, month and date from the input date\n    year = re.findall(r'\\d{4}', dt)[0]\n    month = re.findall(r'\\d{2}', dt)[1]\n    date = re.findall(r'\\d{2}', dt)[2]\n    # Creating the output date format by concatenating date, month and year in the desired format\n    output_date = date + '-' + month + '-' + year\n    return output_date\n"
    },
    {
        "number": 427,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Split the date into year, month, and day components\n    year, month, day = re.split('-', dt)\n    # Return the date in the desired format\n    return '{}-{}-{}'.format(day, month, year)"
    },
    {
        "number": 427,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\nfrom datetime import datetime\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        # Convert the string to a datetime object\n        dt_obj = datetime.strptime(dt, '%Y-%m-%d')\n        \n        # Convert the datetime object to the desired format\n        new_dt = dt_obj.strftime('%d-%m-%Y')\n        \n        return new_dt\n    \n    except ValueError:\n        print('Incorrect date format. Please use yyyy-mm-dd format.')\n"
    },
    {
        "number": 427,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None\n"
    },
    {
        "number": 428,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Find the length of the list\n    n = len(my_list)\n    \n    # Set the gap for the first iteration\n    gap = n // 2\n    \n    # Do the sorting\n    while gap > 0:\n        # Sort each sublist for the current gap\n        for i in range(gap, n):\n            # Set the value to be inserted\n            temp = my_list[i]\n            \n            # Shift the values to the right\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n                \n            # Insert the value\n            my_list[j] = temp\n        \n        # Reduce the gap for the next iteration\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sort the given array using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # Initialize the gap\n    gap = n // 2\n    # Do the sorting\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Initialize the gap\n    gap = n // 2\n    # Do the gapped insertion sort for this gap size.\n    # The first gap elements a[0..gap-1] are already in gapped \n    # order. Keep adding one more element until the entire array is gap sorted.\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    \n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 429,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_result = []\n    for i in range(len(test_tup1)):\n        and_result.append(test_tup1[i] & test_tup2[i])\n    return tuple(and_result)\n"
    },
    {
        "number": 429,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 430,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = -b / (2 * a)\n    y1 = a * x1**2 + b * x1 + c\n    m = -1 / a\n    return 'y = {} * (x - {}) + {}'.format(m, x1, y1)"
    },
    {
        "number": 430,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b ** 2 - 4 * a * c == 0:\n        print(\"The parabola is a line.\")\n        return None\n    else:\n        d = -b / (2 * a)\n        return f\"The directrix is y = {d}\""
    },
    {
        "number": 430,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d < 0:\n        return None\n    elif d == 0:\n        y_coord = -b / (2*a)\n        return \"x = {}\".format(y_coord)\n    else:\n        y1 = (-b - d**0.5) / (2*a)\n        y2 = (-b + d**0.5) / (2*a)\n        return \"y = {}x + {}\".format(-1/y2, y1*y2/(y2-y1))"
    },
    {
        "number": 430,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = abs(b)**2 - 4*a*c\n    if d < 0:\n        print(\"The directrix does not exist.\")\n        return None\n    else:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        return x1, x2\n"
    },
    {
        "number": 430,
        "checkpoint": "34B",
        "pass": 4,
        "answer": ""
    },
    {
        "number": 430,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = abs(b) / 2\n    if b > 0:\n        directrix = 'x = ' + str(-c / b) + ' + ' + str(d) + 'y'\n    else:\n        directrix = 'y = ' + str(-c / b) + ' + ' + str(d) + 'x'\n    return directrix\n"
    },
    {
        "number": 430,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = abs(b) / 2  # calculate the shift\n    return a * d**2 + b * d + c  # calculate the directrix equation\n"
    },
    {
        "number": 430,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):  \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The directrix does not exist for this parabola.\"\n    else:\n        d = abs((b**2) - (4*a*c))\n        root1 = (-b + d**0.5)/(2*a)\n        root2 = (-b - d**0.5)/(2*a)\n        return \"The directrix of the parabola is y = {}\".format(root1)\n"
    },
    {
        "number": 430,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = abs(b) / a\n    return d\n"
    },
    {
        "number": 430,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = abs(b) / a\n    return 'y = {}'.format(-d) if b > 0 else 'y = {}'.format(d)\n"
    },
    {
        "number": 431,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1) & set(list2)) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Convert the lists to sets to efficiently check for common elements\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if there is any element that appears in both sets\n    return len(set1.intersection(set2)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Convert lists to sets to easily check for common elements\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if there is any element in both sets\n    return len(set1.intersection(set2)) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n"
    },
    {
        "number": 432,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1+base2)/2\n    return median*height\n"
    },
    {
        "number": 432,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median length of the trapezium\n    median = ((base1 + base2) / 2) * height\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the length of the diagonal of the trapezium\n    diagonal = (abs(base2-base1))**0.5\n    # Find the median length of the trapezium using the formula\n    median = ((base1+base2)/2) + (height**2/(2*diagonal))\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1+base2)/2\n    return median*height"
    },
    {
        "number": 432,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the diagonals\n    diagonal1 = (base1**2 + height**2)**0.5\n    diagonal2 = (base2**2 + height**2)**0.5\n    # calculate the median length\n    median_length = (diagonal1 + diagonal2)/2\n    return median_length\n"
    },
    {
        "number": 432,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2 * height\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1+base2)/2\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = ((base1 + base2) / 2) * height\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median\n"
    },
    {
        "number": 433,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if elem > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element >= number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i >= number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i >= number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i >= number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i >= number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return False\n    return True"
    },
    {
        "number": 434,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[\\s\\S]*b')\n    return bool(pattern.search(text))\n"
    },
    {
        "number": 434,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?:b)+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?:b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('ab+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('ab+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile('ab+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]+'\n    result = re.match(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 435,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of a given number\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of the given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for num in list1:\n        if num < 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums\n"
    },
    {
        "number": 436,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # Create an empty list to store the negative numbers\n    neg_list = []\n    # Iterate through each element in the given list\n    for num in list1:\n        # Check if the number is negative\n        if num < 0:\n            # If it is negative, append it to the neg_list\n            neg_list.append(num)\n    # Return the neg_list\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers\n"
    },
    {
        "number": 436,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # initialize an empty list to store the negative numbers\n    neg_list = []\n    \n    # iterate through the list and append negative numbers to the neg_list\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    \n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n"
    },
    {
        "number": 437,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if ord(char) % 2 == 0])\n"
    },
    {
        "number": 437,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n"
    },
    {
        "number": 438,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] == (test_list[j][1], test_list[j][0])):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] == test_list[j][::-1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[i][0]) == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list or (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[i][0]) == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[i][0]) == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[i][0]) == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[i][0]) == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = 0\n    for i in L:\n        num = num*10 + i\n    return num\n"
    },
    {
        "number": 439,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize an empty string to store the joined integers\n    num_str = ''\n    \n    # iterate over each integer in the list\n    for num in L:\n        # convert the integer to a string and concatenate it to the num_str\n        num_str += str(num)\n    \n    # convert the num_str back to an integer and return it\n    return int(num_str)\n"
    },
    {
        "number": 439,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result*10 + i\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for digit in L:\n        result = result * 10 + digit\n    return result\n"
    },
    {
        "number": 439,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list of integers to a list of strings\n    str_list = [str(x) for x in L]\n    # Concatenate the list of strings into a single string\n    result = ''.join(str_list)\n    # Convert the concatenated string back to an integer\n    return int(result)\n"
    },
    {
        "number": 440,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression for adverbs\n    adverb_pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Find all adverbs in the text\n    adverbs = re.findall(adverb_pattern, text)\n    \n    # Find the positions of the first adverb(s)\n    positions = [text.find(adv) for adv in adverbs]\n    \n    # Return the adverb(s) and their positions\n    return adverbs, positions\n"
    },
    {
        "number": 440,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = ['very', 'really', 'extremely', 'quite', 'most', 'much', 'more', 'most', 'much', 'too', 'enough', 'rather', 'hardly', 'merely', 'only', 'very', 'indeed', 'not', 'also', 'even', 'just', 'but', 'yet', 'still', 'already', 'never', 'ever', 'evermore', 'now', 'then', 'always', 'forever', 'never', 'anymore', 'surely', 'ever', 'instead', 'indeed', 'barely', 'only', 'ever', 'finally', 'before', 'after', 'beyond', 'through', 'under', 'above', 'below', 'between', 'throughout', 'inside', 'outside', 'up', 'down', 'in', 'out', 'away', 'toward', 'from', 'within', 'around', 'through', 'under', 'above', 'below', 'near', 'far', 'away', 'close', 'afar', 'apart', 'aside', 'back', 'forward', 'straight', 'sideways', 'up', 'down', 'left', 'right', 'behind', 'beside', 'underneath', 'over', 'near', 'far', 'nearby', 'abroad', 'upstairs', 'downstairs', 'straight', 'sideways', 'up', 'down', 'left', 'right', 'back', 'forward', 'sideways', 'behind', 'above', 'below', 'beside', 'underneath', 'over', 'inside', 'outside', 'away', 'close', 'far', 'apart', 'nearby', 'abroad', 'upstairs', 'downstairs', 'now', 'then', 'always', 'forever', 'never', 'anymore', 'surely', 'instead', 'indeed', 'before', 'after', 'throughout', 'inside', 'outside', 'up', 'down', 'in', 'out', 'away', 'toward', 'from', 'within', 'around', 'through', 'under', 'above', 'below', 'near', 'far', 'away', 'close', 'afar', 'apart', 'aside', 'back', 'forward', 'straight', 'sideways', 'up', 'down', 'left', 'right', 'behind', 'beside', 'underneath', 'over', 'near', 'far', 'nearby', 'abroad', 'upstairs', 'downstairs', 'now', 'then', 'always', 'forever', 'never', 'anymore', 'surely', 'instead', 'indeed', 'before', 'after', 'now', 'then', 'always', 'forever', 'never', 'anymore', 'surely', 'instead', 'indeed', 'before', 'after', 'now', 'then', 'always', 'forever', 'never', 'anymore', 'surely', 'instead', 'indeed', 'before', 'after', 'now', 'then', 'always', 'forever', 'never', 'anymore', 'surely', 'instead', 'indeed', 'before', 'after', 'now', 'then', 'always', 'forever', 'never', 'anymore', 'surely', 'instead', 'indeed', 'before', 'after']\n    pattern = re.compile(r'\\b(' + '|'.join(adverb_list) + r')\\b')\n    match = pattern.search(text)\n    if match:\n        return match.group(0), match.start()\n    else:\n        return None, None\n"
    },
    {
        "number": 440,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b[a-zA-Z]+ly\\b')\n    adverb_list = re.findall(adverb_pattern, text)\n    if not adverb_list:\n        return 'No adverb found in the sentence.'\n    else:\n        adverb = adverb_list[0]\n        position = text.find(adverb)\n        return f'The first adverb \"{adverb}\" is found at position {position+1}.'"
    },
    {
        "number": 440,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Using regular expression to match adverbs\n    adverb_pattern = r'\\b[a-zA-Z]+ly\\b'\n    adverb_list = re.findall(adverb_pattern, text)\n    \n    # Finding the position of the first adverb\n    for adverb in adverb_list:\n        position = text.find(adverb)\n        print(f\"The adverb {adverb} is at position {position + 1}\")\n        break\n"
    },
    {
        "number": 440,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regex pattern for adverbs\n    pattern = r'\\b(?:[a-zA-Z]+ly)\\b'\n    \n    # Find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n    \n    # If there are no adverbs, return None\n    if len(adverbs) == 0:\n        return None\n    \n    # Find the position of the first adverb in the text\n    position = text.find(adverbs[0])\n    \n    # Return the first adverb and its position\n    return adverbs[0], position\n"
    },
    {
        "number": 440,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regex pattern to match adverbs\n    pattern = r'\\b(?:very|really|extremely|quite|most|much|very|too|really|just|exceedingly|absolutely|truly|highly|perfectly|accurately)\\b'\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # If no matches are found, return None\n    if not matches:\n        return None\n\n    # Find the position of the first match\n    first_match = matches[0]\n    first_match_start = text.index(first_match)\n\n    # Return a tuple of the first match and its starting position\n    return (first_match, first_match_start)\n"
    },
    {
        "number": 440,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'  # pattern for words\n    adverbs = ['very', 'extremely', 'highly', 'quite', 'rather', 'sort', 'of', 'mildly', 'almost', 'somewhat', 'most', 'least']\n    words = re.findall(pattern, text)  # get all words in the sentence\n    for i, word in enumerate(words):\n        if word.lower() in adverbs:\n            return word, i\n    return None, None\n"
    },
    {
        "number": 440,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = ['really', 'very', 'most', 'much', 'highly', 'extremely']\n    for adverb in adverb_list:\n        if adverb in text.lower():\n            position = text.lower().index(adverb)\n            return (adverb, position)\n    return None\n"
    },
    {
        "number": 440,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # create a list of adverbs\n    adverbs = ['really', 'very', 'highly', 'extremely', 'quite', 'most', 'much', 'very', 'rather', 'absolutely']\n    # create a regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b(' + '|'.join(adverbs) + r')\\b', re.IGNORECASE)\n    # find the first adverb and its position in the sentence\n    match = pattern.search(text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None\n"
    },
    {
        "number": 440,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Find the first adverb and its position in a given sentence.\n    '''\n    adverb_list = ['adverb1', 'adverb2', ...]  # list of adverbs to look for\n    pattern = re.compile(r'\\b(' + '|'.join(adverb_list) + r')\\b', re.IGNORECASE)  # create pattern for regex search\n    match = pattern.search(text)  # search for adverbs in text\n    if match:\n        return match.group().lower(), match.start()\n    else:\n        return None, None\n"
    },
    {
        "number": 441,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n"
    },
    {
        "number": 442,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    count_positive = 0\n    count_total = len(nums)\n\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n\n    return count_positive / count_total\n"
    },
    {
        "number": 442,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_numbers = 0\n    total_numbers = len(nums)\n\n    for num in nums:\n        if num > 0:\n            positive_numbers += 1\n\n    return positive_numbers / total_numbers\n"
    },
    {
        "number": 442,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = [num for num in list1 if num < 0]\n    if neg_list:\n        return max(neg_list)\n    else:\n        return None\n"
    },
    {
        "number": 443,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_numbers = [num for num in list1 if num < 0]\n    if len(neg_numbers) == 0:\n        return None\n    else:\n        return max(neg_numbers)\n"
    },
    {
        "number": 443,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    if len(neg_nums) == 0:\n        return None\n    return max(neg_nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_nums = [num for num in list1 if num < 0]\n    if neg_nums:\n        return max(neg_nums)\n    else:\n        return None\n"
    },
    {
        "number": 443,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_numbers = [num for num in list1 if num < 0]  # filter negative numbers\n    if not neg_numbers:  # if no negative numbers, return None\n        return None\n    return max(neg_numbers)  # return largest negative number\n"
    },
    {
        "number": 443,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initialize the largest negative number to None\n    largest_neg = None\n    # Iterate over the list elements\n    for num in list1:\n        # If the number is negative and larger than the current largest negative number,\n        # update the largest negative number\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n    # Return the largest negative number\n    return largest_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_nums = [num for num in list1 if num < 0]\n    if len(neg_nums) == 0:\n        return None\n    else:\n        return max(neg_nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # initialize variable to hold the largest negative number\n    largest = None\n    # iterate through the list and find the largest negative number\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    # return the largest negative number\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    if not neg_list:\n        return None\n    else:\n        return max(neg_list)\n"
    },
    {
        "number": 443,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_negative = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest_negative:\n                largest_negative = num\n    return largest_negative\n"
    },
    {
        "number": 444,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tpl in test_list:\n        if len(tpl) > K:\n            trimmed_tpl = tpl[:K] + tpl[-K:]\n        else:\n            trimmed_tpl = tpl\n        trimmed_list.append(trimmed_tpl)\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        elif len(tup) == K:\n            result.append(tup)\n        else:\n            result.append(tup + tuple([None] * (K - len(tup))))\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[K:]) for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        else:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        else:\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        result.append(tpl[:K])\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        if len(tpl) > K:\n            result.append(tpl[:K])\n        else:\n            result.append(tpl)\n    return result\n"
    },
    {
        "number": 444,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Create an empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # Iterate over each tuple in the given list\n    for tup in test_list:\n        # Check if the length of the tuple is greater than or equal to K\n        if len(tup) >= K:\n            # Trim the tuple by K and add it to the trimmed list\n            trimmed_list.append(tup[:K])\n    \n    # Return the trimmed list of tuples\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        # Slicing the tuple from index K to the end\n        result.append(tup[K:])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return tuple(result_tup)\n"
    },
    {
        "number": 445,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = tuple(x*y for x, y in zip(test_tup1, test_tup2))\n    return result_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(x*y for x,y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 446,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    for element in lst:\n        if element in c:\n            print(f\"{element} occurs {c[element]} time(s) in the tuple.\")\n        else:\n            print(f\"{element} does not occur in the tuple.\")"
    },
    {
        "number": 446,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    c = Counter(tup)\n    result = {}\n    for elem in lst:\n        result[elem] = c[elem]\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    result = {}\n    for item in lst:\n        if item in count_dict:\n            result[item] = count_dict[item]\n        else:\n            result[item] = 0\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    for item in lst:\n        if item in count_dict:\n            print(f\"{item}: {count_dict[item]}\")\n        else:\n            print(f\"{item}: 0\")"
    },
    {
        "number": 446,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for item in lst:\n        if item in count:\n            result[item] = count[item]\n        else:\n            result[item] = 0\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for item in lst:\n        if item in count:\n            result[item] = count[item]\n        else:\n            result[item] = 0\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    # Convert the tuple to a list\n    tup_list = list(tup)\n    # Use the Counter class to count the occurrences of each element in the list\n    count = Counter(tup_list)\n    # Initialize an empty dictionary to store the counts for each element in the list\n    counts = {}\n    # Iterate over the elements in the list\n    for elem in lst:\n        # If the element is in the count dictionary, increment its count\n        if elem in count:\n            counts[elem] = count[elem]\n        # If the element is not in the count dictionary, set its count to 0\n        else:\n            counts[elem] = 0\n    return counts\n"
    },
    {
        "number": 446,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for element in lst:\n        if element in count:\n            print(f\"{element}: {count[element]}\")\n        else:\n            print(f\"{element}: 0\")"
    },
    {
        "number": 446,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for i in lst:\n        if i in count:\n            result[i] = count[i]\n        else:\n            result[i] = 0\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for i in lst:\n        if i in count:\n            result[i] = count[i]\n        else:\n            result[i] = 0\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as input and returns a new list containing the cubes of each number in the input list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube = num ** 3\n        cube_list.append(cube)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list of the cubes of those numbers.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def perrin_number(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return perrin_number(n-1) + perrin_number(n-2) + perrin_number(n-3)\n\ndef cal_sum(n):\n    perrin_sum = 0\n    for i in range(n):\n        perrin_sum += perrin_number(i)\n    return perrin_sum\n"
    },
    {
        "number": 448,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def perrin_number(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return perrin_number(n-1) + perrin_number(n-2)\n\ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += perrin_number(i)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def perrin(n):\n    \"\"\"\n    Returns the nth Perrin number.\n    \"\"\"\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return perrin(n - 1) + perrin(n - 2)\n\n\ndef cal_sum(n):\n    \"\"\"\n    Calculates the sum of the first n Perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += perrin(i)\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def perrin(n):\n    \"\"\"\n    Returns the nth Perrin number.\n    \"\"\"\n    if n in [0, 1, 2]:\n        return n\n    else:\n        return perrin(n-1) + perrin(n-2) - 2*perrin(n-3)\n\ndef cal_sum(n):\n    \"\"\"\n    Returns the sum of the first n Perrin numbers.\n    \"\"\"\n    return sum(perrin(i) for i in range(n))\n"
    },
    {
        "number": 448,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def perrin(n):\n    \"\"\"\n    Generates the nth Perrin number.\n    \"\"\"\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return perrin(n-1) + perrin(n-2)\n\ndef cal_sum(n):\n    \"\"\"\n    Calculates the sum of the first n Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += perrin(i)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def perrin(n):\n    \"\"\"\n    Returns the n-th Perrin number.\n    \"\"\"\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return perrin(n-1) + perrin(n-2)\n\ndef cal_sum(n):\n    \"\"\"\n    Calculates the sum of the first n Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += perrin(i)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = [0, 1, 1]\n    for i in range(3, n+1):\n        p.append(p[i-1]+p[i-2])\n    return sum(p)\n"
    },
    {
        "number": 448,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    else:\n        # Initialize variables for the first two Perrin numbers\n        p0 = 3\n        p1 = 0\n        \n        # Calculate the next n-1 Perrin numbers and accumulate their sum\n        total = 3\n        for i in range(2, n+1):\n            p2 = p0 + p1\n            total += p2\n            p0, p1 = p1, p2\n            \n        return total\n"
    },
    {
        "number": 448,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def perrin(n):\n    \"\"\"\n    Returns nth perrin number\n    \"\"\"\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return perrin(n-1) + perrin(n-2)\n\ndef cal_sum(n):\n    \"\"\"\n    Returns sum of first n perrin numbers\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += perrin(i)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return perrin(n-1) + perrin(n-2)\n\ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += perrin(i)\n    return total\n"
    },
    {
        "number": 450,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings\n"
    },
    {
        "number": 450,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in str:\n        if len(s) == l:\n            extracted_strings.append(s)\n    return extracted_strings\n"
    },
    {
        "number": 450,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_list.append(string)\n    return extracted_list\n"
    },
    {
        "number": 450,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_str.append(string)\n    return extracted_str\n"
    },
    {
        "number": 450,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in str_list:\n        if len(s) == size:\n            extracted_strings.append(s)\n    return extracted_strings\n"
    },
    {
        "number": 450,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def extract_string(str_list, length):\n    \"\"\"\n    Returns a list of strings with the specified length, extracted from the given list of strings.\n    If there are not enough strings in the list to satisfy the length requirement, returns an empty list.\n    \"\"\"\n    result = []\n    current_length = 0\n    for s in str_list:\n        if current_length + len(s) <= length:\n            result.append(s)\n            current_length += len(s)\n        else:\n            # Truncate the current string to fit the remaining length\n            result.append(s[:length - current_length])\n            break\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings\n"
    },
    {
        "number": 450,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str:\n        if len(string) == l:\n            extracted_strings.append(string)\n    return extracted_strings\n"
    },
    {
        "number": 450,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings\n"
    },
    {
        "number": 450,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings\n"
    },
    {
        "number": 451,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 451,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n\ntext = input(\"Enter a string: \")\nprint(\"String without whitespaces:\", remove_whitespaces(text))\n"
    },
    {
        "number": 451,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)\n\ntext1 = 'hello world'\ntext2 = 'python    is   great'\n\nprint(remove_whitespaces(text1)) # output: helloworld\nprint(remove_whitespaces(text2)) # output: pythonisgreat\n"
    },
    {
        "number": 451,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expressions to remove all whitespaces from the string\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 452,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = 0\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n    return loss\n"
    },
    {
        "number": 452,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    return loss if loss > 0 else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function finds the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i != i:\n                if n // i % 2 == 0:\n                    sum += n // i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number n as input and returns the sum of even factors of the number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i != i:\n                if n // i % 2 == 0:\n                    sum += n // i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i % 2 == 0 and i != n // i:\n                sum += n // i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i != i:\n                if n // i % 2 == 0:\n                    sum += n // i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function returns the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define a regex pattern to match a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    # Use re.findall() to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the matches\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*z\\w*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b\\w*z\\w*\\b', text)\n    if match:\n        return match.group(0)\n    else:\n        return \"No match found\"\n"
    },
    {
        "number": 454,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b\\w*z\\w*\\b', text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'\n"
    },
    {
        "number": 455,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_monthnum_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # A list of months having 31 days\n    month_list = [1, 3, 5, 7, 8, 10, 12]\n\n    if monthnum2 in month_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"The month number contains 31 days.\")\n    else:\n        print(\"The month number does not contain 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # iterate through each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string using slicing\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n"
    },
    {
        "number": 456,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n"
    },
    {
        "number": 456,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n"
    },
    {
        "number": 456,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]\n"
    },
    {
        "number": 456,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n"
    },
    {
        "number": 456,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n"
    },
    {
        "number": 456,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n"
    },
    {
        "number": 456,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Reverse each string in a given list of string values.\n    \"\"\"\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n"
    },
    {
        "number": 457,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_lst = None\n    for sublst in lst:\n        if len(sublst) < min_len:\n            min_len = len(sublst)\n            min_lst = sublst\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = lst[0]\n    for sublst in lst:\n        if len(sublst) < min_len:\n            min_len = len(sublst)\n            min_lst = sublst\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) < min_len:\n                min_len = len(lst[i:j])\n                min_lst = lst[i:j]\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize variables to store the minimum length and the sublist\n    min_len = float('inf')\n    sublist = []\n\n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n        # If the length of the sublist is less than the current minimum length\n        if len(lst[i]) < min_len:\n            # Set the new minimum length and sublist\n            min_len = len(lst[i])\n            sublist = lst[i]\n\n    # Return the sublist with minimum length\n    return sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_lst = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize minimum length to be the length of the first sublist\n    min_len = len(lst[0])\n    # initialize minimum sublist to be the first sublist\n    min_sublist = lst[0]\n    # iterate through the list of sublists\n    for sublist in lst:\n        # if the length of the current sublist is less than the minimum length,\n        # update the minimum length and minimum sublist\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 458,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function calculates the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes in the length and breadth of a rectangle as inputs and returns its area.\n    \"\"\"\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(s):\n    \"\"\"\n    Remove all substrings in s that contain uppercase letters.\n    \"\"\"\n    return re.sub(r'[A-Z]+', '', s)\n"
    },
    {
        "number": 459,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove all substrings in uppercase from a given string.\n    \"\"\"\n    return re.sub(r'[A-Z]+', '', string)\n"
    },
    {
        "number": 459,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n"
    },
    {
        "number": 460,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def Extract(lst):\n    \"\"\"\n    Extracts the first element of each sublist in a list.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    This function extracts the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def Extract(lst):\n    \"\"\"\n    Get the first element of each sublist in a list.\n    \"\"\"\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function takes a list of sublists as input and returns a list of the first element of each sublist.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def Extract(lst): \n    # empty list to store first elements of sublists\n    first_elements = []\n    \n    # loop through each sublist in the given list\n    for sublist in lst:\n        # append the first element of the sublist to the first_elements list\n        first_elements.append(sublist[0])\n    \n    # return the first_elements list\n    return first_elements\n"
    },
    {
        "number": 460,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def Extract(lst): \n    \"\"\"\n    This function extracts the first element of each sublist from a given list.\n    \"\"\"\n    # Using list comprehension to extract the first element of each sublist.\n    result = [sublist[0] for sublist in lst]\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isupper():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 461,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in string:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result += list(itertools.combinations(list1, i))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import itertools\n\ndef combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    combos = []\n    for i in range(1, len(list1) + 1):\n        for combo in itertools.combinations(list1, i):\n            combos.append(combo)\n    return combos\n"
    },
    {
        "number": 462,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Generate all combinations of elements in a list.\n    \"\"\"\n    res = []\n    def backtrack(start, comb):\n        \"\"\"\n        Backtrack to generate all possible combinations.\n        \"\"\"\n        if start == len(lst):\n            res.append(list(comb))\n        else:\n            # Include the element at current position\n            comb.append(lst[start])\n            backtrack(start + 1, comb)\n            comb.pop()\n            # Exclude the element at current position\n            backtrack(start + 1, comb)\n    backtrack(0, [])\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(lst) + 1):\n        result += list(combinations(lst, i))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    This function takes a list as an input and returns a list of all possible combinations of the elements of the given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        result += list(combinations(list1, i))\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for combo in combinations(list1, i):\n            result.append(combo)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for combo in combinations(list1, i):\n            result.append(combo)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        for combo in combinations(list1, i):\n            result.append(combo)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements in the input list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return None\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n        \n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(max_product, result)\n\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n\n        result = max(result, max_product)\n\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n        \n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n        \n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result\n"
    },
    {
        "number": 464,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a variable to keep track of the first value\n    first_value = list(dict.values())[0]\n    # Loop through all values in the dictionary and compare them with the first value\n    for value in dict.values():\n        if value != first_value:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if the dictionary is empty\n    if not dict:\n        return False\n\n    # Get the first value and compare it with all other values\n    first_value = list(dict.values())[0]\n    for value in dict.values():\n        if value != first_value:\n            return False\n\n    # If all values are same, return True\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val_list = list(dict.values())\n    if len(set(val_list))==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the first value of the dictionary\n    first_value = list(dict.values())[0]\n    # Check if all values are the same as the first value\n    for value in dict.values():\n        if value != first_value:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    first_value = list(dict.values())[0]\n    return all(value == first_value for value in dict.values())\n"
    },
    {
        "number": 464,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1 and n in values:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the first value in the dictionary as a reference\n    first_value = list(dict.values())[0]\n    \n    # Check if all values in the dictionary are same as the first value\n    for value in dict.values():\n        if value != first_value:\n            return False\n    \n    # If all values are same, return True\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 0:\n        return False\n    return len(set(values)) == 1 and values[0] == n\n"
    },
    {
        "number": 464,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the first value of the dictionary\n    first_value = list(dict.values())[0]\n    # Check if all values are same as the first value\n    for value in dict.values():\n        if value != first_value:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 465,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create a new dictionary to store non-empty items\n    new_dict = {}\n    # iterate over the items in the input dictionary\n    for key, value in dict1.items():\n        # check if the value is not empty\n        if value:\n            # add the non-empty item to the new dictionary\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in list(dict1.keys()):\n        if dict1[key] == '':\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create a new dictionary to store non-empty items\n    new_dict = {}\n    # iterate through the keys in the given dictionary\n    for key in dict1:\n        # check if the value for the key is not empty\n        if dict1[key] != '':\n            # add the key-value pair to the new dictionary\n            new_dict[key] = dict1[key]\n    # return the new dictionary with non-empty items\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {k:v for k,v in dict1.items() if v}\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {k: v for k, v in dict1.items() if v}\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create a new dictionary to store non-empty items\n    new_dict = {}\n    # iterate over the items in the original dictionary\n    for key, value in dict1.items():\n        # check if the value is not empty (e.g. None, '', [], {}, set(), etc.)\n        if value not in (None, '', [], {}, set()):\n            # add the non-empty item to the new dictionary\n            new_dict[key] = value\n    # return the new dictionary with non-empty items\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n"
    },
    {
        "number": 468,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize the dp array\n    dp = [1] * n\n    \n    # Calculate the maximum product for each index\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n                \n    # Return the maximum product formed by multiplying numbers of an increasing subsequence\n    return max(dp)\n"
    },
    {
        "number": 468,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize dp array to store maximum product for each subsequence ending at that index\n    dp = [0] * n\n    dp[0] = arr[0]\n    \n    # Fill dp array with maximum product for each subsequence ending at that index\n    for i in range(1, n):\n        if arr[i] > dp[i-1]:\n            dp[i] = dp[i-1] * arr[i]\n        else:\n            dp[i] = arr[i]\n    \n    # Find the maximum product among all increasing subsequences\n    max_product = 0\n    for i in range(n):\n        if dp[i] > max_product:\n            max_product = dp[i]\n            \n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = 0\n    current_product = 1\n    \n    for i in range(len(arr)):\n        if i > 0 and arr[i] > arr[i-1]:\n            current_product *= arr[i-1]\n        max_product = max(max_product, current_product)\n        current_product = max(current_product, 1)\n    \n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return None\n    n = len(arr)\n    max_product = 0\n    max_ending_here = 1\n    for i in range(n):\n        max_ending_here *= arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 1\n        if max_product < max_ending_here:\n            max_product = max_ending_here\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 1\n    for i in range(len(arr)):\n        max_product *= arr[i]\n        if arr[i] < arr[i+1]:\n            max_product = max(max_product//arr[i], max_product)\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        else:\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = max_ending_here * arr[i]\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    if not arr:\n        return 0\n    max_ending_here = max_so_far = arr[0]\n    for num in arr[1:]:\n        if num > max_ending_here:\n            max_ending_here = max(max_ending_here * num, num)\n            max_so_far = max(max_so_far, max_ending_here)\n        else:\n            max_ending_here = num\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    # Initialize the list to store the maximum product for each length subsequence\n    max_products = [0] * n\n\n    # Initialize the first element as the first element of the array\n    max_products[0] = arr[0]\n\n    # Calculate the maximum product for each length subsequence\n    for i in range(1, n):\n        max_products[i] = max(max_products[i-1] * arr[i], arr[i])\n\n    # Return the maximum product of all increasing subsequences\n    return max(max_products)\n"
    },
    {
        "number": 468,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    max_product = 1\n    for i in range(len(arr)):\n        max_product = max(max_product, max_product * arr[i])\n        if max_product < 0:\n            max_product = 1\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return None\n\n    max_product = 1\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n        else:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], arr[i])\n            min_ending_here = min(temp * arr[i], arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product\n"
    },
    {
        "number": 470,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i] + test_tup[i+1])\n    return res\n"
    },
    {
        "number": 470,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n\n    return tuple(result)\n"
    },
    {
        "number": 470,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i] + test_tup[i+1])\n    return res\n"
    },
    {
        "number": 471,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mod = 1\n    for i in arr:\n        mod *= i\n        mod %= n\n    return mod\n"
    },
    {
        "number": 471,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n"
    },
    {
        "number": 472,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_Consecutive(l):  \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = sorted(l)\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l = sorted(set(l))\n    return l[-1] - l[0] == len(l) - 1\n"
    },
    {
        "number": 472,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # sort the list\n    l.sort()\n    # check if consecutive numbers exist\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    l = sorted(set(l))  # remove duplicates and sort the list\n    for i in range(len(l) - 1):\n        if l[i] + 1 != l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] > 1:\n            return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection_list.append(i)\n    return tuple(intersection_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return tuple(set1.intersection(set2))\n"
    },
    {
        "number": 473,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if sorted(tup1) == sorted(tup2):\n                intersection.append(tup1)\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the lists to sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of sets\n    intersection = set1.intersection(set2)\n    # convert the set to tuple and return\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = tuple(set1.intersection(set2))\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for i in test_list1:\n        if i in test_list2:\n            intersection.append(i)\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if sorted(tup1) == sorted(tup2):\n                intersection.append(tup1)\n                break\n    return intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if sorted(tup1) == sorted(tup2):\n                intersection_list.append(tup1)\n    return intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return tuple(set1.intersection(set2))\n"
    },
    {
        "number": 473,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return tuple(set1.intersection(set2))\n"
    },
    {
        "number": 474,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a specified character 'ch' with a new character 'newch' in the given string 'str1'.\n    '''\n    return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of ch with newch in str1.\n    \"\"\"\n    return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace a character in a string with a new character.\n    \"\"\"\n    return str1.replace(ch, newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str_list = list(str1)\n    for i in range(len(str_list)):\n        if str_list[i] == ch:\n            str_list[i] = newch\n    return ''.join(str_list)"
    },
    {
        "number": 474,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1\n"
    },
    {
        "number": 475,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}"
    },
    {
        "number": 475,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(Counter(dict1).most_common())\n"
    },
    {
        "number": 475,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = {k: v for k, v in sorted(dict1.items(), key=lambda x: x[1])}\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda x: x[1])}\n"
    },
    {
        "number": 475,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1]))\n"
    },
    {
        "number": 475,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n"
    },
    {
        "number": 475,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1]))\n"
    },
    {
        "number": 476,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"The array must have at least 2 values.\")\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        min_val = min(nums)\n        max_val = max(nums)\n        return min_val + max_val"
    },
    {
        "number": 476,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        nums.sort()\n        return nums[0] + nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[0] + nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums) + min(nums)\n"
    },
    {
        "number": 477,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return ''.join(filter(str.isupper, str1))\n"
    },
    {
        "number": 478,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # using regular expressions to remove lowercase substrings\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regex to find all lowercase substrings and replace them with an empty string\n    return re.sub(r'[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Removes lowercase substrings from a given string.\n    \"\"\"\n    return re.sub('[a-z]+', '', string)\n"
    },
    {
        "number": 478,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n"
    },
    {
        "number": 479,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    This function returns the first digit of a given number\n    '''\n    # converting the number to string\n    n = str(n)\n    # returning the first character of the string\n    return int(n[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Returns the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns its first digit.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string\n    n_str = str(n)\n    # Get the first character of the string\n    first_digit = n_str[0]\n    # Convert the character back to an integer\n    first_digit = int(first_digit)\n    # Return the result\n    return first_digit\n"
    },
    {
        "number": 479,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as an argument and returns its first digit.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0: # if the number is negative, remove the negative sign\n        n = n * -1\n    while n >= 10: # keep dividing the number by 10 until it becomes single digit\n        n = n // 10\n    return n"
    },
    {
        "number": 479,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n"
    },
    {
        "number": 554,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2 != 0:\n            odd_lst.append(num)\n    return odd_lst\n"
    },
    {
        "number": 554,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in lst if num%2!=0]\n"
    },
    {
        "number": 554,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in lst if x % 2 != 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for i in lst:\n        if i % 2 != 0:\n            odd_lst.append(i)\n    return odd_lst\n"
    },
    {
        "number": 554,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def split(lst):\n    '''\n    This function takes a list of integers as input and returns a new list containing only the odd integers of the input list.\n    '''\n    result = []\n    for num in lst:\n        if num % 2 != 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 554,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2 != 0]\n"
    },
    {
        "number": 554,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in lst if x % 2 != 0]"
    },
    {
        "number": 555,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def difference(n):\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def difference(n):\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n        \n    return sum_of_cubes - sum_of_natural_numbers**2\n"
    },
    {
        "number": 555,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n        \n    return sum_of_cubes - sum_of_natural_numbers**2"
    },
    {
        "number": 555,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    result = sum_of_numbers**2 - sum_of_cubes\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_natural_numbers = (n*(n+1))//2\n    sum_of_cubes = (n*(n+1)*(2*n+1))//6\n    diff = sum_of_cubes - sum_of_natural_numbers\n    return diff\n\nn = int(input(\"Enter the value of n: \"))\nprint(difference(n))\n"
    },
    {
        "number": 555,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_numbers - sum_of_cubes\n"
    },
    {
        "number": 555,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def difference(n):\n    sum_cubes = 0\n    sum_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n        \n    return sum_cubes - sum_numbers**2\n"
    },
    {
        "number": 555,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_natural_numbers = (n * (n+1)) // 2\n    sum_of_cubes = ((n*(n+1)//2) ** 2) // 3\n    difference = sum_of_natural_numbers - sum_of_cubes\n    return difference\n"
    },
    {
        "number": 555,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of the first n natural numbers using the formula n(n+1)/2\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of cubes of the first n natural numbers using the formula n(n+1)(2n+1)/6\n    sum_cubes = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Calculate the difference between the two sums\n    diff = sum_cubes - sum_n ** 2\n    \n    # Return the difference\n    return diff\n"
    },
    {
        "number": 556,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j]) & 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])&1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j])&1:  # Check if xor value is odd\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j]) % 2 != 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j]) % 2 != 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j]) & 1: # check if xor value is odd\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j])&1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j]) & 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 557,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 557,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled = \"\"\n    for char in string:\n        if char.islower():\n            toggled += char.upper()\n        elif char.isupper():\n            toggled += char.lower()\n        else:\n            toggled += char\n    return toggled\n"
    },
    {
        "number": 557,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled = ''\n    for char in string:\n        if char.islower():\n            toggled += char.upper()\n        elif char.isupper():\n            toggled += char.lower()\n        else:\n            toggled += char\n    return toggled\n"
    },
    {
        "number": 557,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c)^32) if not c.isdigit() else c for c in string)\n"
    },
    {
        "number": 558,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = abs(n1) # Make sure both numbers are positive\n    n2 = abs(n2)\n    n1_str = str(n1) # Convert integers to strings\n    n2_str = str(n2)\n    n1_len = len(n1_str) # Find the lengths of the strings\n    n2_len = len(n2_str)\n    diff_sum = 0 # Initialize the sum to 0\n    \n    # Loop through each digit of the longer number\n    for i in range(max(n1_len, n2_len)):\n        # Get the current digit of each number (if it exists), otherwise use 0\n        n1_digit = int(n1_str[n1_len-1-i]) if i < n1_len else 0\n        n2_digit = int(n2_str[n2_len-1-i]) if i < n2_len else 0\n        diff_sum += abs(n1_digit - n2_digit) # Add the absolute difference to the sum\n    \n    return diff_sum # Return the final sum\n"
    },
    {
        "number": 558,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert integers to strings for easy iteration\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Get length of longest integer string\n    max_length = max(len(n1_str), len(n2_str))\n    \n    # Pad shorter string with zeros to match length of longer string\n    n1_str = n1_str.zfill(max_length)\n    n2_str = n2_str.zfill(max_length)\n    \n    # Calculate the per-digit difference between the two strings\n    distance_sum = 0\n    for i in range(max_length):\n        distance_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    return distance_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n    diff = []\n    for i in range(len(num1)):\n        diff.append(abs(num1[i] - num2[i]))\n    return sum(diff)\n"
    },
    {
        "number": 558,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    distance = 0\n    \n    if len(n1_str) != len(n2_str):\n        return \"The two numbers should have the same number of digits\"\n    \n    for i in range(len(n1_str)):\n        distance += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    return distance\n"
    },
    {
        "number": 558,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n    max_len = max(n1_len, n2_len)\n    sum_diff = 0\n    for i in range(max_len):\n        n1_digit = int(n1_str[i]) if i < n1_len else 0\n        n2_digit = int(n2_str[i]) if i < n2_len else 0\n        diff = abs(n1_digit - n2_digit)\n        sum_diff += diff\n    return sum_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n    distance = 0\n    for i in range(len(num1)):\n        distance += abs(num1[i] - num2[i])\n    return distance\n"
    },
    {
        "number": 558,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = [int(i) for i in str(n1)]\n    num2 = [int(i) for i in str(n2)]\n    \n    if len(num1) != len(num2):\n        diff = abs(len(num1) - len(num2))\n        if len(num1) < len(num2):\n            num1 = [0] * diff + num1\n        else:\n            num2 = [0] * diff + num2\n    \n    diff_sum = 0\n    for i in range(len(num1)):\n        diff_sum += abs(num1[i] - num2[i])\n    \n    return diff_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n    \n    # if one number is longer than the other, add zeros to the shorter number\n    if n1_len > n2_len:\n        n2_str = '0' * (n1_len - n2_len) + n2_str\n    elif n2_len > n1_len:\n        n1_str = '0' * (n2_len - n1_len) + n1_str\n    \n    # calculate the per-digit difference and sum them up\n    diff_sum = 0\n    for i in range(len(n1_str)):\n        diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    return diff_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and get their lengths\n    n1_str = str(n1)\n    n2_str = str(n2)\n    n1_len = len(n1_str)\n    n2_len = len(n2_str)\n\n    # Make sure the integers have the same number of digits\n    if n1_len != n2_len:\n        raise ValueError(\"Both integers must have the same number of digits\")\n\n    # Initialize the sum variable\n    digit_diff_sum = 0\n\n    # Loop through each digit of the integers\n    for i in range(n1_len):\n        # Get the current digit of each integer\n        n1_digit = int(n1_str[n1_len - 1 - i])\n        n2_digit = int(n2_str[n2_len - 1 - i])\n\n        # Calculate the per-digit difference\n        digit_diff = abs(n1_digit - n2_digit)\n\n        # Add the per-digit difference to the sum\n        digit_diff_sum += digit_diff\n\n    # Return the sum of per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        d1 = int(str(n1)[::-1][i]) if i < len(str(n1)) else 0\n        d2 = int(str(n2)[::-1][i]) if i < len(str(n2)) else 0\n        sum_diff += abs(d1 - d2)\n    return sum_diff\n\nThe function takes two integers as input, converts them to strings, reverses them to get the digits in the order they appear from left to right, and then compares the digits one by one from the least significant to the most significant. The absolute difference between the digits is accumulated in the variable sum_diff, which is returned at the end of the function. If one of the numbers has less digits than the other, the missing digits are assumed to be zero.\n\nExample usage:\n\n>>> digit_distance_nums(123, 456)\n9\n\n>>> digit_distance_nums(12345, 6789)\n9\n\n>>> digit_distance_nums(1000, 2000)\n1000 "
    },
    {
        "number": 559,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        \n        if max_ending_here < 0:\n            max_ending_here = 0\n            \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            \n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n            \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum < 0:\n            current_sum = 0\n        elif current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum < 0:\n            current_sum = 0\n        elif current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -float('inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        \n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1).union(set(test_tup2))\n    return sorted(union)\n"
    },
    {
        "number": 560,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    result = set1.union(set2)\n    return sorted(result)\n"
    },
    {
        "number": 560,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples using the + operator\n    combined_tuple = test_tup1 + test_tup2\n    # Convert the combined tuple to a set to remove duplicates\n    unique_set = set(combined_tuple)\n    # Convert the set back to a tuple and sort it\n    sorted_tuple = tuple(sorted(unique_set))\n    # Return the sorted tuple\n    return sorted_tuple\n"
    },
    {
        "number": 560,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    # Concatenate the two tuples using the '+' operator\n    concatenated = test_tup1 + test_tup2\n    # Convert the concatenated tuple into a set to remove duplicates\n    unique = set(concatenated)\n    # Convert the set back into a sorted tuple and return it\n    return tuple(sorted(unique))\n"
    },
    {
        "number": 560,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    return tuple(sorted(union_set))\n"
    },
    {
        "number": 560,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one set\n    combined_set = set(test_tup1) | set(test_tup2)\n    # Convert the set back into a tuple and sort it\n    sorted_tuple = tuple(sorted(combined_set))\n    return sorted_tuple\n"
    },
    {
        "number": 560,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenating the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Using set to get the unique elements and converting it back to a tuple\n    unique_tup = tuple(set(combined_tup))\n    \n    # Sorting the unique elements in the tuple\n    sorted_tup = sorted(unique_tup)\n    \n    # Returning the sorted tuple\n    return sorted_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the concatenated tuple to a set to remove duplicate elements\n    unique_set = set(combined_tup)\n    \n    # Convert the set back to a tuple and sort it in ascending order\n    sorted_tuple = tuple(sorted(unique_set))\n    \n    # Return the sorted tuple\n    return sorted_tuple\n"
    },
    {
        "number": 560,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the combined tuple to a set to remove duplicates\n    combined_set = set(combined_tup)\n    \n    # Convert the set back to a tuple and sort it\n    result_tup = tuple(sorted(combined_set))\n    \n    return result_tup\n"
    },
    {
        "number": 562,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):   \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Find the length of the longest sublist in a list of lists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 563,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # pattern to match text between quotation marks\n    pattern = r'\"(.*?)\"'\n    # find all matches of pattern in text\n    matches = re.findall(pattern, text)\n    # return matches as a list\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    matches = re.findall(r'\"(.*?)\"', text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    matches = re.findall(r'\"(.*?)\"', text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"(.*?)\"', text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 564,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n):  \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_Pairs(arr):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 565,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def split(word):\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    This function splits a string into individual characters.\n    \"\"\"\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of characters.\n    \"\"\"\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def split(word):\n    return list(word)\n"
    },
    {
        "number": 566,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input integer to a string and iterate over each character (digit)\n    digits = str(n)\n    total = 0\n    for digit in digits:\n        # Convert the character back to an integer and add it to the total\n        total += int(digit)\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string and iterate over its characters\n    total = 0\n    for char in str(n):\n        # Add the integer value of the character to the total\n        total += int(char)\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string and iterate over its characters\n    digits = str(n)\n    total = 0\n    for digit in digits:\n        total += int(digit)\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n != 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and iterate over its characters\n    digits = str(n)\n    total = 0\n    for digit in digits:\n        total += int(digit)\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n"
    },
    {
        "number": 567,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Returns True if the given list is sorted in ascending order, False otherwise.\n    \"\"\"\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def issorted_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def issorted_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n"
    },
    {
        "number": 567,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is already sorted or not\n    if all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    if n == 0 or n == 1:\n        return True\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def issorted_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))"
    },
    {
        "number": 568,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def empty_list(length):\n    \"\"\"\n    This function creates a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length\n"
    },
    {
        "number": 568,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict_list = []\n    for i in range(length):\n        empty_dict_list.append({})\n    return empty_dict_list\n"
    },
    {
        "number": 568,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        result.append(sorted_sublist)\n    return result\n"
    },
    {
        "number": 569,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        result.append(sorted(sublist))\n    return result\n"
    },
    {
        "number": 569,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        result.append(sorted_sublist)\n    return result\n"
    },
    {
        "number": 569,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list1 = []\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        sorted_list1.append(sorted_sublist)\n    return sorted_list1\n"
    },
    {
        "number": 569,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n"
    },
    {
        "number": 572,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        if len(unique_nums) == 2:\n            break\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        unique_nums.append(list(set(num)))\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 573,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of unique numbers in the list\n    unique_numbers = set(list_data)\n    # initialize the product to 1\n    product = 1\n    # iterate through the unique numbers and calculate their product\n    for number in unique_numbers:\n        product *= number\n    # return the product\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for i in unique_list:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * (r + h)"
    },
    {
        "number": 574,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    side_area = 2 * 3.14 * r * h\n    top_area = 3.14 * r**2\n    total_area = 2 * (side_area + top_area)\n    return total_area\n"
    },
    {
        "number": 574,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = (2 * 3.14 * r * (r + h))\n    # Return the surface area\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    side_area = 2 * math.pi * r * h\n    top_area = math.pi * r**2\n    total_area = 2 * top_area + side_area\n    return total_area\n"
    },
    {
        "number": 574,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * (r + h)\n"
    },
    {
        "number": 574,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = (2 * 3.14 * r * (r + h))\n    # return the surface area\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * (r + h)\n"
    },
    {
        "number": 574,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h\n    \n    # return the surface area\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\n"
    },
    {
        "number": 574,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * (r + h)"
    },
    {
        "number": 576,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # create a string for list A and B\n    A_str = ''.join(str(e) for e in A)\n    B_str = ''.join(str(e) for e in B)\n    \n    # check if B_str is a substring of A_str\n    if B_str in A_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    strA = ','.join(map(str, A))\n    strB = ','.join(map(str, B))\n\n    if strB in strA:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # convert lists to strings for pattern search\n    A, B = ''.join(map(str, A)), ''.join(map(str, B))\n    if B in A:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # convert A and B to strings and check if B is a substring of A\n    return str(B) in str(A)\n"
    },
    {
        "number": 576,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    str1 = ''.join(map(str,A))\n    str2 = ''.join(map(str,B))\n    if str1 in str2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A = ''.join(str(i) for i in A)   # Convert list A to string\n    B = ''.join(str(i) for i in B)   # Convert list B to string\n    if B in A:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # convert lists to strings for easier comparison\n    str_A = ''.join(map(str, A))\n    str_B = ''.join(map(str, B))\n    \n    # check if str_B is a substring of str_A\n    if str_B in str_A:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # convert both lists to strings and check if B is a substring of A\n    if str(B) in str(A):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    sub_str = ''.join(map(str, B))\n    main_str = ''.join(map(str, A))\n    if sub_str in main_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 577,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        last_digit = 1\n        for i in range(1, n+1):\n            last_digit = (last_digit * i) % 10\n        return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return None # factorial is undefined for negative numbers\n    elif n == 0:\n        return 1 # factorial of 0 is defined as 1\n    else:\n        last_digit = 1\n        for i in range(1, n+1):\n            last_digit *= i % 10\n        return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 1\n    \n    # Iterate from 1 to n and multiply the last digit with the current number\n    for i in range(1, n+1):\n        last_digit *= i % 10\n        \n    # Return the last digit of the factorial\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the factorial\n    factorial = 1\n    # Iterate from 1 to n and multiply each number to factorial\n    for i in range(1, n+1):\n        factorial *= i\n    # Return the last digit of the factorial\n    return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return \"Factorial cannot be computed for negative numbers\"\n\n    # Initialize the factorial variable to 1\n    factorial = 1\n\n    # Compute the factorial of the given number\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 1\n    \n    # Compute the last digit of factorial\n    for i in range(1, n+1):\n        last_digit = (last_digit * i) % 10\n    \n    # Return the last digit of the factorial\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a variable to store the last digit of the factorial\n    last_digit = 1\n    \n    # Iterate through the numbers from 1 to n and multiply them with the last digit of factorial\n    for i in range(1, n+1):\n        last_digit = (last_digit * i) % 10\n    \n    # Return the last digit of factorial\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Initialize a variable to store the last digit of factorial\n    last_digit = 1\n\n    # Calculate the last digit of factorial using modulo operator\n    for i in range(1, n+1):\n        last_digit = (last_digit * i) % 10\n\n    # Return the last digit of factorial\n    return last_digit\n"
    },
    {
        "number": 577,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result = result * i\n        \n    return result % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Returns the last digit in factorial of a given number.\n    \"\"\"\n    # Initialize the variable for last digit as 1\n    last_digit = 1\n    \n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Multiply the last digit with the current number and get the last digit\n        last_digit = (last_digit * i) % 10\n    \n    return last_digit\n"
    },
    {
        "number": 578,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list to store the interleaved elements\n    interleaved_list = []\n\n    # Use a for loop to iterate over the lists and append elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n"
    },
    {
        "number": 578,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n"
    },
    {
        "number": 578,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n"
    },
    {
        "number": 578,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Get the length of the lists\n    length = len(list1)\n    \n    # Create an empty list to store the interleaved values\n    interleaved_list = []\n    \n    # Loop through each index of the lists and add the corresponding values to the interleaved list\n    for i in range(length):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list\n"
    },
    {
        "number": 578,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n"
    },
    {
        "number": 578,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n"
    },
    {
        "number": 578,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n"
    },
    {
        "number": 579,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            result.append(test_tup1[i])\n            result.append(test_tup2[i])\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return tuple(dissimilar)\n"
    },
    {
        "number": 579,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar = set1.symmetric_difference(set2)\n    return tuple(dissimilar)\n"
    },
    {
        "number": 579,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return list(set1.symmetric_difference(set2))\n"
    },
    {
        "number": 579,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            dissimilar.append((test_tup1[i], test_tup2[i]))\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            result.append((test_tup1[i], test_tup2[i]))\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n            dissimilar.append(test_tup2[i])\n    return tuple(set(dissimilar))\n"
    },
    {
        "number": 579,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            result.append((test_tup1[i], test_tup2[i]))\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.symmetric_difference(set2)\n"
    },
    {
        "number": 579,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            dissimilar.append((test_tup1[i], test_tup2[i]))\n    return dissimilar\n"
    },
    {
        "number": 580,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)\n"
    },
    {
        "number": 580,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        return x % 2 == 0\n    result = []\n    for tpl in test_tuple:\n        result.append(tuple(x for x in tpl if even_fnc(x)))\n    return tuple(result)\n"
    },
    {
        "number": 580,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create an empty list to store the even elements\n    even_list = []\n    # Loop through each element in the tuple\n    for element in test_tuple:\n        # If the element is a tuple, recursively call the function with the nested tuple\n        if type(element) == tuple:\n            even_list.append(even_ele(element, even_fnc))\n        # If the element is even, add it to the even list\n        elif even_fnc(element):\n            even_list.append(element)\n    # Return the list of even elements\n    return tuple(even_list)\n"
    },
    {
        "number": 580,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(even_fnc(x) for x in test_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 580,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for sub_tuple in test_tuple:\n        sub_result = []\n        for element in sub_tuple:\n            if even_fnc(element):\n                sub_result.append(element)\n        result.append(tuple(sub_result))\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        new_tup = tuple(filter(even_fnc, tup))\n        result.append(new_tup)\n    return tuple(result)\n"
    },
    {
        "number": 580,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for tup in test_tuple:\n        if isinstance(tup, tuple):\n            new_tup = ()\n            for element in tup:\n                if even_fnc(element):\n                    new_tup += (element,)\n            new_tuple.append(new_tup)\n        elif even_fnc(tup):\n            new_tuple.append(tup)\n    return tuple(new_tuple)\n"
    },
    {
        "number": 580,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == int:\n            if even_fnc(test_tuple[i]):\n                result.append(test_tuple[i])\n        else:\n            result.append(even_ele(test_tuple[i], even_fnc))\n    return tuple(result)\n"
    },
    {
        "number": 580,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements from a nested tuple using a given function.\n\n    Parameters:\n    test_tuple (tuple): A nested tuple with mixed types (int, str, etc.).\n    even_fnc (function): A function that takes an integer and returns True if it's even, False otherwise.\n\n    Returns:\n    tuple: A new tuple with only even elements from the input tuple.\n    \"\"\"\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            # If the item is a tuple, recursively call the function on it\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            # If the item is even, add it to the result list\n            result.append(item)\n    return tuple(result)\n"
    },
    {
        "number": 581,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def surface_Area(b, s):\n    '''\n    This function takes base and height as parameters and returns the surface area of a square pyramid.\n    '''\n    return (b**2 + b*s) * 0.5\n"
    },
    {
        "number": 581,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2 + (b*s)**2)**0.5\n"
    },
    {
        "number": 581,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def surface_Area(b, h):\n    '''\n    This function finds the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the square base\n    base_area = b ** 2\n    # calculate the area of each triangular face\n    face_area = (b * h) / 2\n    # calculate the total surface area of the pyramid\n    total_area = base_area + 4 * face_area\n    return total_area\n"
    },
    {
        "number": 581,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def surface_Area(b, h):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Formula for the surface area of a square pyramid is: (1/2 * base area) + (perimeter of the base * slant height)\n    base_area = b ** 2\n    slant_height = (h ** 2) / (2 * b)\n    perimeter_base = 4 * b\n    surface_area = (1 / 2) * base_area + perimeter_base * slant_height\n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def surface_Area(b, h):\n    '''\n    This function takes base edge and height as input and returns the surface area of a square pyramid.\n    '''\n    # Calculating the slant edge of the pyramid\n    slant_edge = (b**2 + h**2)**0.5\n    \n    # Calculating the surface area of the pyramid\n    surface_area = (b**2 + 2*b*slant_edge) + (2*b**2)\n    \n    return surface_area\n"
    },
    {
        "number": 581,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the square base\n    base_area = b * b\n\n    # Calculate the area of each triangular face\n    triangle_area = 0.5 * b * s\n\n    # Calculate the total surface area\n    total_area = base_area + 4 * triangle_area\n\n    # Return the total surface area\n    return total_area\n"
    },
    {
        "number": 581,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # formula to find the surface area of a square pyramid\n    return (b**2 + (b*s)**2)**0.5"
    },
    {
        "number": 581,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((b**2) + (b*s) * 4)\n"
    },
    {
        "number": 581,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2 + (b*s)*2)/2\n"
    },
    {
        "number": 581,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base_area = b ** 2\n    perimeter = 4 * b\n    slant_height = (b ** 2 + s ** 2) ** 0.5\n    lateral_area = perimeter * slant_height / 2\n    surface_area = base_area + lateral_area\n    return surface_area\n"
    },
    {
        "number": 582,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not bool(dict1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 583,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth catalan number\n    \"\"\"\n    if num <= 1:\n        return 1\n    else:\n        res = 0\n        for i in range(num):\n            res += catalan_number(i) * catalan_number(num - i - 1)\n        return res\n"
    },
    {
        "number": 583,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if num <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-i-1)\n        return result\n"
    },
    {
        "number": 583,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num < 0:\n        return \"Invalid input! n must be a non-negative integer.\"\n    elif num == 0 or num == 1:\n        return 1\n    else:\n        return (4*num*catalan_number(num-1))//(2*num+1)\n"
    },
    {
        "number": 583,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-i-1)\n        return result\n"
    },
    {
        "number": 583,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 0:\n        return \"Invalid input\"\n    elif num == 1:\n        return 1\n    else:\n        catalan = [0]*(num+1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2,num+1):\n            for j in range(i):\n                catalan[i] += catalan[j]*catalan[i-j-1]\n        return catalan[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n\n    # Initialize a list to store catalan numbers\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    # Calculate catalan numbers for n using the formula (2n)Cn/(n+1).\n    # where (2n)Cn is the binomial coefficient.\n    for i in range(2, num + 1):\n        catalan[i] = (4 * i - 2) * catalan[i - 1] // (i + 1)\n\n    return catalan[num]"
    },
    {
        "number": 583,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-i-1)\n        return result\n"
    },
    {
        "number": 583,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if num <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-i-1)\n        return result\n"
    },
    {
        "number": 583,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    catalan = [0]*(num+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, num+1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n    return catalan[num]"
    },
    {
        "number": 584,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    adverb = re.search(pattern, text)\n    if adverb:\n        return (adverb.group(), adverb.span())\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.span()\n    else:\n        return None, None\n"
    },
    {
        "number": 584,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = re.compile(r'\\b\\w+ly\\b')\n    adverbs = adverb_pattern.findall(text)\n    \n    if adverbs:\n        first_adverb = adverbs[0]\n        first_adverb_positions = [m.start() for m in re.finditer(first_adverb, text)]\n        return first_adverb, first_adverb_positions\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'\\b\\w+ly\\b'\n    adverb_match = re.search(adverb_pattern, text)\n    if adverb_match:\n        return adverb_match.group(), adverb_match.span()\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    adverb = re.search(pattern, text)\n    if adverb:\n        return adverb.group(), adverb.span()\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Find the first adverb ending with -ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.span()\n    else:\n        return None, None\n"
    },
    {
        "number": 584,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None\n\ntext = \"He ran quickly and the dog barked loudly.\"\nadverb, start, end = find_adverbs(text)\nif adverb:\n    print(f\"The first adverb ending with 'ly' is '{adverb}' starting at position {start} and ending at position {end}.\")\nelse:\n    print(\"No adverb ending with 'ly' found.\")\n"
    },
    {
        "number": 584,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Finds the first adverb ending with 'ly' and its positions in a given string.\n    '''\n    adverb = re.search(r'\\b\\w+ly\\b', text)\n    if adverb:\n        return adverb.group(0), [m.start() for m in re.finditer(r'\\b\\w+ly\\b', text)]\n    else:\n        return \"No adverb ending with 'ly' found in the given text.\""
    },
    {
        "number": 584,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    adverb = re.search(pattern, text)\n    if adverb:\n        return adverb.group(), adverb.span()\n    else:\n        return None\n"
    },
    {
        "number": 584,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.span()\n    else:\n        return None\n"
    },
    {
        "number": 585,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heap.append(item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return min_heap\n"
    },
    {
        "number": 585,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, (item[1], item)) # item[1] is the cost of the item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return [item for _, item in min_heap] # return the items in sorted order of cost\n"
    },
    {
        "number": 585,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    return sorted(min_heap, reverse=True)\n"
    },
    {
        "number": 585,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return sorted(min_heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    expensive_items = [(-price, name) for price, name in sorted(heap, reverse=True)]\n    return expensive_items\n"
    },
    {
        "number": 585,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    \n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    \n    return result[::-1]\n"
    },
    {
        "number": 585,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item['price'], item['name']))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[1] for item in sorted(heap, reverse=True)]\n"
    },
    {
        "number": 585,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return min_heap\n"
    },
    {
        "number": 585,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    expensive_items = []\n    while min_heap:\n        expensive_items.append(heapq.heappop(min_heap))\n    expensive_items.reverse()\n    return expensive_items\n"
    },
    {
        "number": 586,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part\n"
    },
    {
        "number": 586,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part\n"
    },
    {
        "number": 586,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    l = second_part + first_part\n    return l\n"
    },
    {
        "number": 586,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid n value\"\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return second_part + first_part\n"
    },
    {
        "number": 586,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part\n"
    },
    {
        "number": 586,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    result = second_part + first_part\n    return result\n"
    },
    {
        "number": 586,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part\n"
    },
    {
        "number": 586,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # get the first part of the list up to the nth element\n    first_part = l[:n]\n    # get the second part of the list after the nth element\n    second_part = l[n:]\n    # concatenate the second part and the first part of the list\n    new_list = second_part + first_part\n    # return the new list\n    return new_list\n"
    },
    {
        "number": 586,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # split the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # add the first part to the end of the second part\n    result = second_part + first_part\n    return result\n"
    },
    {
        "number": 586,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return second_part + first_part\n"
    },
    {
        "number": 587,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    min_val = max_val = nums[0]\n    \n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n            \n    return max_val - min_val\n"
    },
    {
        "number": 588,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 589,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root * root == num:\n            squares.append(num)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        root = int(i**0.5)\n        if root**2 == i:\n            squares.append(i)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i == int(i) ** 2:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        root = int(num**0.5)\n        if root*root == num:\n            squares.append(num)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    squares = []\n    # Loop through each number from a to b (inclusive)\n    for num in range(a, b+1):\n        # Calculate the square root of the number\n        sqrt = int(num ** 0.5)\n        # If the square root is an integer, add it to the list of squares\n        if sqrt ** 2 == num:\n            squares.append(num)\n    # Return the list of perfect squares\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    i = 1\n    squares = []\n    while i*i <= b:\n        if i*i >= a:\n            squares.append(i*i)\n        i += 1\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for i in range(a, b+1):\n        if i**(1/2) == int(i**(1/2)):\n            squares.append(i)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        root = int(i**0.5)\n        if root**2 == i:\n            squares.append(i)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        root = int(i ** 0.5)\n        if root ** 2 == i:\n            squares.append(i)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        root = int(math.sqrt(num))\n        if root**2 == num:\n            squares.append(num)\n    return squares\n"
    },
    {
        "number": 590,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_coord = cmath.rect(x, y)\n    return rect_coord\n"
    },
    {
        "number": 590,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    r is the magnitude of the vector\n    theta is the angle between the vector and the positive x-axis\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r: float, The radius.\n    theta: float, The angle in radians.\n\n    Returns:\n    A tuple of two floats, representing the rectangular coordinates (x, y).\n    \"\"\"\n\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n"
    },
    {
        "number": 590,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x.real, y.real\n"
    },
    {
        "number": 591,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0: # If the list is empty\n        return [] # return empty list\n    elif len(newList) == 1: # If the list has only one element\n        return newList # return the original list\n    else: # If the list has more than one element\n        first_element = newList[0] # Store the first element\n        newList[0] = newList[-1] # Replace the first element with the last element\n        newList[-1] = first_element # Replace the last element with the first element\n        return newList # Return the modified list\n"
    },
    {
        "number": 591,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as input and swaps the first and last elements of the list.\n    \"\"\"\n    if len(newList) == 0:\n        print(\"The list is empty\")\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        print(\"The swapped list is: \", newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    This function takes a list as an argument and interchanges the first and last elements of the list.\n    \"\"\"\n    if len(newList) > 1:\n        # swapping first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # check if the list is not empty\n    if len(newList) > 0:\n        # get the first and last elements of the list\n        first_element = newList[0]\n        last_element = newList[-1]\n        \n        # swap the first and last elements\n        newList[0] = last_element\n        newList[-1] = first_element\n        \n        # return the modified list\n        return newList\n    else:\n        print(\"List is empty!\")\n"
    },
    {
        "number": 591,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List has less than 2 elements.\")\n        return newList\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements.\")\n        return\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements.\")\n        return\n    \n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return []\n    elif len(newList) == 1:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    from math import factorial\n    result = 1\n    for i in range(n, n-k, -1):\n        result *= i\n    return result // factorial(k)\n\n\nThe function uses the formula for the binomial coefficient:\n\nn! / (k! * (n-k)!) = n * (n-1) * ... * (n-k+1) / 1 * 2 * ... * k\n\nWe can simplify it by dividing both the numerator and the denominator by k!, which gives:\n\nn * (n-1) * ... * (n-k+1) / 1 * 2 * ... * k\n\nThis is the product of consecutive binomial coefficients that we want to sum. We can compute this product by iterating over the range (n, n-k, -1), which gives the sequence of numbers n, n-1, ..., n-k+1, and multiplying them together. To obtain the sum, we repeat this process k times and add up the results.\n\nThe function returns the result divided by k!, which simplifies the expression and gives the final answer. "
    },
    {
        "number": 592,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from math import factorial\n\ndef binomial_Coeff(n, k):\n    '''\n    This function calculates the binomial coefficient of nCr, where r is the smaller of the two.\n    '''\n    return factorial(n) // (factorial(k) * factorial(n-k))\n\ndef sum_of_products(n):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for k in range(1, n//2 + 1):\n        sum += binomial_Coeff(n, k) * binomial_Coeff(n-k, k-1)\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", sum_of_products(n))\n"
    },
    {
        "number": 592,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from math import factorial\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef sum_of_binomial_coefficients(n, k):\n    result = 0\n    for i in range(n - k + 1):\n        result += binomial_coefficient(n - i, k) * binomial_coefficient(i + 1, k)\n    return result\n\nn = int(input(\"Enter the value of n: \"))\nk = int(input(\"Enter the value of k: \"))\n\nprint(\"Sum of the product of consecutive binomial coefficients is:\", sum_of_binomial_coefficients(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(n, n-k, -1):\n        result *= i\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def binomial(n, k):\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial(n-1, k-1) + binomial(n-1, k)\n    \n    total = 0\n    for i in range(k, n+1):\n        total += binomial(i, k) * binomial(n, i-1)\n    return total\n"
    },
    {
        "number": 592,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    result = 1\n    for i in range(k, n+1):\n        result *= i\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from math import factorial\n\ndef binomial_Coeff(n, k):\n    '''\n    This function calculates the binomial coefficient of n and k.\n    '''\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef sum_of_product(n):\n    '''\n    This function calculates the sum of product of consecutive binomial coefficients.\n    '''\n    result = 0\n    for k in range(n):\n        result += binomial_Coeff(n-1, k) * binomial_Coeff(n, k)\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from math import factorial as fact\n\ndef binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(k):\n        result += fact(n-i) / (fact(i+1) * fact(n-k))\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = 1\n    result = 0\n    for i in range(k):\n        result += C\n        C = C * (n-i) // (i+1)\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k):\n        result *= (n - i) / (i + 1)\n    return round(result)"
    },
    {
        "number": 593,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef remove_leading_zeroes(ip):\n    '''\n    This function takes an IP address as input and removes any leading zeroes from each octet.\n    '''\n    # Split the IP address into octets\n    octets = ip.split('.')\n\n    # Iterate over each octet and remove leading zeroes\n    for i in range(len(octets)):\n        octets[i] = re.sub('^0+', '', octets[i])\n        # If the octet is now empty, replace it with '0'\n        if octets[i] == '':\n            octets[i] = '0'\n\n    # Join the octets back into a string\n    ip = '.'.join(octets)\n\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the IP address into a list of octets\n    octets = ip.split('.')\n    # Create a new list to store the octets without leading zeroes\n    new_octets = []\n    # Iterate through each octet and remove leading zeroes using regex\n    for octet in octets:\n        new_octet = re.sub(r'^0+', '', octet)\n        # If the new octet is empty, replace it with zero\n        if not new_octet:\n            new_octet = '0'\n        new_octets.append(new_octet)\n    # Join the new octets with dots to form the new IP address\n    new_ip = '.'.join(new_octets)\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octets = ip.split('.')\n    return '.'.join([re.sub(r'0*(\\d+)', r'\\1', octet) for octet in octets])\n"
    },
    {
        "number": 593,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef remove_leading_zeros_ip(ip):\n    '''\n    Remove leading zeroes from an IP address\n    '''\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the IP address into its 4 octets\n    octets = ip.split('.')\n    # Iterate through each octet and remove leading zeroes using regex\n    for i in range(len(octets)):\n        octets[i] = re.sub(r'^0+', '', octets[i])\n        # If the octet is now empty, set it to 0\n        if octets[i] == '':\n            octets[i] = '0'\n    # Join the octets back into a valid IP address\n    return '.'.join(octets)\n"
    },
    {
        "number": 593,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    iplist = ip.split('.')\n    newip = []\n    for i in iplist:\n        if i.startswith('0') and len(i) > 1:\n            newip.append(int(i))\n        else:\n            newip.append(i)\n    return '.'.join(str(i) for i in newip)"
    },
    {
        "number": 593,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)\n"
    },
    {
        "number": 594,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            return even_num - odd_num\n    return None\n"
    },
    {
        "number": 594,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            return even_num - odd_num\n    return None\n"
    },
    {
        "number": 594,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            return odd - even\n    return None  # If there are no even or odd numbers in the list"
    },
    {
        "number": 594,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n        \n    for num in list1:\n        if num % 2 != 0:\n            odd_num = num\n            break\n        \n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num - odd_num\n"
    },
    {
        "number": 594,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    \n    for num in list1:\n        if even is None and num % 2 == 0:\n            even = num\n        elif odd is None and num % 2 == 1:\n            odd = num\n            \n        if even is not None and odd is not None:\n            break\n            \n    if even is not None and odd is not None:\n        return even - odd\n    else:\n        return None\n"
    },
    {
        "number": 594,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n        else:\n            if first_odd is None:\n                first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return None\n    else:\n        return first_even - first_odd\n"
    },
    {
        "number": 594,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if first_even is None:\n                first_even = num\n        else:\n            if first_odd is None:\n                first_odd = num\n        if first_even is not None and first_odd is not None:\n            return first_even - first_odd\n    return None\n"
    },
    {
        "number": 594,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    even_found = False\n    odd_found = False\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and not even_found:\n            even_num = num\n            even_found = True\n        elif num % 2 == 1 and not odd_found:\n            odd_num = num\n            odd_found = True\n            \n        if even_found and odd_found:\n            break\n            \n    if even_num is None or odd_num is None:\n        return None\n        \n    return abs(even_num - odd_num)\n"
    },
    {
        "number": 594,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd = num\n            break\n    if even is not None and odd is not None:\n        return abs(even - odd)\n    else:\n        return None\n"
    },
    {
        "number": 595,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Count the minimum number of swaps required to convert str1 to str2.\n    \"\"\"\n    # Convert the strings to lists of integers\n    list1 = [int(c) for c in str1]\n    list2 = [int(c) for c in str2]\n    # Initialize a counter for swaps\n    swaps = 0\n    # Iterate over the lists\n    for i in range(len(list1)):\n        # If the values are different and not already in the correct position\n        if list1[i] != list2[i] and list1[i] != list2[len(list1)-1-i]:\n            # Swap the corresponding elements\n            list1[i], list1[len(list1)-1-i] = list1[len(list1)-1-i], list1[i]\n            # Increment the counter\n            swaps += 1\n    # Return the minimum number of swaps\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert str1 and str2 to lists\n    str1 = list(str1)\n    str2 = list(str2)\n    # initialize count variable\n    count = 0\n    # loop through each element in str1\n    for i in range(len(str1)):\n        # if the element in str1 is not equal to the corresponding element in str2\n        if str1[i] != str2[i]:\n            # loop through the remaining elements in str1\n            for j in range(i+1, len(str1)):\n                # if the element in str1 is equal to the element at position j in str2\n                if str1[j] == str2[i]:\n                    # swap the elements\n                    str1[i], str1[j] = str1[j], str1[i]\n                    # increment count variable\n                    count += 1\n                    # break out of the inner loop\n                    break\n    # return the count variable\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the strings to lists of integers\n    str1 = [int(i) for i in str1]\n    str2 = [int(i) for i in str2]\n\n    # Initialize variables to keep track of swaps and comparisons\n    swaps = 0\n    comparisons = 0\n\n    # Loop through each element in the list\n    for i in range(len(str1)):\n        # If the elements don't match, swap them\n        if str1[i] != str2[i]:\n            swaps += 1\n            # Swap the elements\n            str1[i], str2[i] = str2[i], str1[i]\n\n            # Loop through the remaining elements in the list to find the correct position for the swapped element\n            for j in range(i+1, len(str1)):\n                # If the element is in the wrong position, swap it with the previous element\n                if str1[j] != str2[j]:\n                    str1[j], str2[j] = str2[j], str1[j]\n                    swaps += 1\n                    comparisons += 1\n\n    # Return the minimum number of swaps\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert the strings to lists of integers\n    lst1 = [int(digit) for digit in str1]\n    lst2 = [int(digit) for digit in str2]\n    \n    # sort the lists\n    lst1.sort()\n    lst2.sort()\n    \n    # initialize counters for swaps and matches\n    swaps = 0\n    matches = 0\n    \n    # iterate over the lists and count swaps and matches\n    for i in range(len(lst1)):\n        if lst1[i] == lst2[i]:\n            matches += 1\n        else:\n            j = i + 1\n            while j < len(lst1) and lst1[j] != lst2[i]:\n                j += 1\n            if j < len(lst1):\n                lst1[i], lst1[j] = lst1[j], lst1[i]\n                swaps += 1\n            else:\n                return None # no matching digit found\n    \n    # calculate the number of swaps needed to convert str1 to str2\n    swaps += len(lst1) - matches\n    \n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the strings to lists of integers\n    list1 = [int(bit) for bit in str1]\n    list2 = [int(bit) for bit in str2]\n\n    # Sort the lists\n    list1.sort()\n    list2.sort()\n\n    # Count the number of swaps needed to make the two lists equal\n    swaps = 0\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            swaps += 1\n            # Find the index of the element that should be at this position\n            j = list2.index(list1[i])\n            # Swap the elements at the two positions\n            list2[i], list2[j] = list2[j], list2[i]\n\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Convert strings to lists of digits\n    list1 = [int(digit) for digit in str1]\n    list2 = [int(digit) for digit in str2]\n    # Sort the lists in descending order\n    list1.sort(reverse=True)\n    list2.sort(reverse=True)\n    # Initialize counts of matches and swaps\n    matches = 0\n    swaps = 0\n    # Loop through the lists and compare digits\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            matches += 1\n        else:\n            # Find the index of the matching digit in list2\n            j = list2.index(list1[i])\n            # Swap the digits in list2\n            list2[i], list2[j] = list2[j], list2[i]\n            # Increment the swap count\n            swaps += 1\n    # Calculate the total number of swaps needed\n    total_swaps = swaps + (len(list1) - matches)\n    return total_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert strings to lists and sort them\n    str1_list = list(str1)\n    str1_list.sort()\n    str2_list = list(str2)\n    str2_list.sort()\n\n    # Count number of swaps needed\n    swaps = 0\n    for i in range(len(str1_list)):\n        if str1_list[i] != str2_list[i]:\n            swaps += 1\n            # Find the index of the correct digit in str2_list and swap it with the current digit in str1_list\n            j = str2_list.index(str1_list[i])\n            str2_list[i], str2_list[j] = str2_list[j], str2_list[i]\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Counts minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n    count = 0\n\n    for i in range(n):\n        if str1[i] != str2[i]:\n            count += 1\n            j = i + 1\n            while j < n and str1[j] == str1[i]:\n                str1[i], str1[j] = str1[j], str1[i]\n                j += 1\n\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    # create hash table for str1\n    h1 = {}\n    for i in range(len(str1)):\n        h1[str1[i]] = i\n    \n    # create hash table for str2\n    h2 = {}\n    for i in range(len(str2)):\n        h2[str2[i]] = i\n    \n    # iterate over the two strings and swap characters\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            # swap characters\n            j = h1[str2[i]]\n            str1 = str1[:i] + str2[j] + str1[i+1:]\n            str2 = str2[:j] + str1[i] + str2[j+1:]\n            # update hash tables\n            h1[str1[i]] = h1[str2[j]] = i\n            h1[str2[i]] = h2[str1[j]] = j\n            # increment swaps counter\n            swaps += 1\n    \n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # convert strings to lists\n    str1 = list(str1)\n    str2 = list(str2)\n    \n    # sort the two lists\n    str1.sort()\n    str2.sort()\n    \n    # count the number of swaps required to convert str1 to str2\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n            \n            # find the index of the correct element in str2\n            j = i\n            while str1[i] != str2[j]:\n                j += 1\n            \n            # swap the elements at i and j\n            str1[i], str1[j] = str1[j], str1[i]\n    \n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sum(sys.getsizeof(i) for i in tuple_list)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sum(sys.getsizeof(i) for i in tuple_list)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)"
    },
    {
        "number": 596,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)"
    },
    {
        "number": 596,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize variables for indices of the current elements\n    i = 0\n    j = 0\n    # Initialize a counter for the number of elements compared\n    compared = 0\n    # Loop until the kth element is found\n    while compared < k:\n        # If the current element of arr1 is less than the current element of arr2,\n        # increment the index of arr1 and increment the counter\n        if arr1[i] < arr2[j]:\n            i += 1\n        # If the current element of arr1 is greater than or equal to the current element of arr2,\n        # increment the index of arr2 and increment the counter\n        else:\n            j += 1\n        # Increment the counter\n        compared += 1\n    # If k is odd, return the minimum of the kth elements in arr1 and arr2\n    if k % 2 == 1:\n        return min(arr1[i-1], arr2[j-1])\n    # If k is even, return the average of the (k-1)th and kth elements in arr1 and arr2\n    else:\n        return (max(arr1[i-1], arr2[j-1]) + min(arr1[i], arr2[j])) / 2\n"
    },
    {
        "number": 597,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    # Initialize variables to store the lengths of the arrays\n    len1 = len(arr1)\n    len2 = len(arr2)\n    \n    # Initialize variables to store the indices of the current elements\n    i = 0\n    j = 0\n    \n    # Initialize a variable to store the current sum of the elements\n    curr_sum = 0\n    \n    # Loop until we find the kth element\n    while i < len1 and j < len2 and curr_sum < k:\n        \n        # Get the minimum of the current elements\n        if arr1[i] < arr2[j]:\n            curr_sum += 1\n            i += 1\n        else:\n            curr_sum += 1\n            j += 1\n            \n        # If we've found the kth element, return it\n        if curr_sum == k:\n            if i == 0:\n                return arr2[j-1]\n            elif j == 0:\n                return arr1[i-1]\n            else:\n                return max(arr1[i-1], arr2[j-1])\n    \n    # If we haven't found the kth element, return None\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Initialize pointers for both arrays\n    i = 0\n    j = 0\n\n    # Loop until kth element is found\n    while k > 0:\n        # If first array is exhausted, return kth element of second array\n        if i == len(arr1):\n            return arr2[j+k-1]\n        # If second array is exhausted, return kth element of first array\n        elif j == len(arr2):\n            return arr1[i+k-1]\n        # If kth element is less than sum of current pointers, increment first pointer\n        elif arr1[i] < arr2[j]:\n            i += 1\n        # If kth element is greater than sum of current pointers, increment second pointer\n        elif arr1[i] > arr2[j]:\n            j += 1\n        # If kth element is equal to sum of current pointers, decrement k and increment both pointers\n        else:\n            i += 1\n            j += 1\n        # Decrement k\n        k -= 1\n"
    },
    {
        "number": 597,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # determine which array is smaller\n    if len(arr1) < len(arr2):\n        return find_kth_helper(arr1, arr2, k)\n    else:\n        return find_kth_helper(arr2, arr1, k)\n\n\ndef find_kth_helper(arr1, arr2, k):\n    '''\n    Helper function to find kth element from two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    # calculate the indices to consider in each array\n    idx1 = min(k // 2, len(arr1)) - 1\n    idx2 = k - idx1 - 2\n\n    # if the index in arr1 is greater than the element at that index, the kth element is in arr2\n    if arr1[idx1] < arr2[idx2]:\n        return find_kth_helper(arr1[idx1+1:], arr2, k-idx1-1)\n    else:\n        return find_kth_helper(arr1, arr2[idx2+1:], k-idx2-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize pointers for both arrays\n    i, j = 0, 0\n    \n    # Loop until we find the kth element or one of the arrays is exhausted\n    while i < len(arr1) and j < len(arr2) and k > 0:\n        # Compare the elements at the current pointers\n        if arr1[i] < arr2[j]:\n            # If the element in arr1 is smaller, move the pointer for arr1\n            i += 1\n        else:\n            # If the element in arr2 is smaller or equal, move the pointer for arr2\n            j += 1\n        # Decrement k\n        k -= 1\n    \n    # If k is still greater than 0, it means we need to move the pointer for the other array\n    if k > 0:\n        if i < len(arr1):\n            i += k\n        else:\n            j += k\n    \n    # Return the kth element\n    return arr1[i-1] if i > 0 else arr2[j-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    if n1 > n2:\n        return find_kth(arr2, arr1, k)\n    if n1 == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i1, i2 = min(k//2, n1)-1, min(k//2, n2)-1\n    if arr1[i1] < arr2[i2]:\n        return find_kth(arr1[i1+1:], arr2, k-i1-1)\n    else:\n        return find_kth(arr1, arr2[i2+1:], k-i2-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if not arr1:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    idx1 = min(k//2, len(arr1)) - 1\n    idx2 = k - idx1 - 2\n    if arr1[idx1] < arr2[idx2]:\n        return find_kth(arr1[idx1+1:], arr2, k-idx1-1)\n    else:\n        return find_kth(arr1, arr2[idx2+1:], k-idx2-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n\n    if not arr1:\n        return arr2[k - 1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    idx1 = min(k // 2, len(arr1)) - 1\n    idx2 = k - idx1 - 2\n\n    if arr1[idx1] > arr2[idx2]:\n        return find_kth(arr1, arr2[idx2 + 1:], k - idx2 - 1)\n    else:\n        return find_kth(arr1[idx1 + 1:], arr2, k - idx1 - 1)\n"
    },
    {
        "number": 597,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Get the lengths of both arrays\n    m, n = len(arr1), len(arr2)\n\n    # Check if k is within the range of the lengths of both arrays\n    if k < 1 or k > m + n:\n        return None\n\n    # Calculate the indices of the middle elements of both arrays\n    middle_i = (m + n + 1) // 2\n    middle_j = k - middle_i\n\n    # Check if k is even or odd\n    if k % 2 == 1:\n        # If k is odd, get the middle element of the merged array\n        if middle_i < m and middle_j >= 0 and middle_j < n:\n            return min(arr1[middle_i], arr2[middle_j])\n        elif middle_i < m:\n            return arr1[middle_i]\n        else:\n            return arr2[middle_j]\n    else:\n        # If k is even, get the middle element of the merged array\n        if middle_i - 1 < m and middle_j + 1 >= 0 and middle_j + 1 < n:\n            return (max(arr1[middle_i - 1], arr2[middle_j + 1]) +\n                    min(arr1[middle_i], arr2[middle_j])) / 2\n        elif middle_i - 1 < m:\n            return arr1[middle_i - 1]\n        else:\n            return arr2[middle_j - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize two variables to keep track of indices for arr1 and arr2\n    i, j = 0, 0\n    # Loop until we reach the kth element or one of the arrays is exhausted\n    while i < len(arr1) and j < len(arr2) and k > 0:\n        # Compare the current elements of both arrays and increment the index of the array with the smaller value\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        # Decrement k to keep track of how many elements we've seen so far\n        k -= 1\n    # At this point, we've either reached the kth element or one of the arrays is exhausted\n    # If we've reached the kth element, return it\n    if k == 0:\n        if i < len(arr1):\n            return arr1[i]\n        else:\n            return arr2[j]\n    # If one of the arrays is exhausted, return the kth element of the non-exhausted array\n    elif i < len(arr1):\n        return arr1[i+k]\n    else:\n        return arr2[j+k]\n"
    },
    {
        "number": 598,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert number to string and calculate the length\n    str_num = str(number)\n    num_length = len(str_num)\n\n    # calculate the sum of the cube of each digit\n    digit_cube_sum = 0\n    for digit in str_num:\n        digit_cube_sum += int(digit) ** num_length\n\n    # check if the number is armstrong or not\n    if digit_cube_sum == number:\n        return f\"{number} is an armstrong number.\"\n    else:\n        return f\"{number} is not an armstrong number.\"\n"
    },
    {
        "number": 598,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # converting the number into string to find its length\n    num_str = str(number)\n    # finding the length of the number\n    num_len = len(num_str)\n    # initializing the sum variable to 0\n    sum = 0\n    # iterating through each digit of the number\n    for digit in num_str:\n        # adding the cube of the digit to the sum variable\n        sum += int(digit) ** num_len\n    # checking if the sum is equal to the number\n    if sum == number:\n        return f\"{number} is an Armstrong number\"\n    else:\n        return f\"{number} is not an Armstrong number\"\n"
    },
    {
        "number": 598,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert number to string to get each digit\n    str_num = str(number)\n    \n    # calculate the length of the number\n    num_length = len(str_num)\n    \n    # initialize sum to zero\n    sum = 0\n    \n    # iterate over each digit and add cube of the digit to the sum\n    for digit in str_num:\n        sum += int(digit) ** num_length\n    \n    # check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    # finding the length of the number\n    num_length = len(str(number))\n    # initializing the sum to 0\n    sum = 0\n    # finding the sum of the cube of each digit of the number\n    for i in str(number):\n        sum += int(i) ** num_length\n    # checking if the sum is equal to the number\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # finding the number of digits\n    n = len(str(number))\n    # initializing the sum variable to 0\n    sum = 0\n    # finding the sum of nth power of each digit\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    # checking if number is armstrong or not\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    # Convert the number to string and then to list of integers\n    digits = [int(digit) for digit in str(number)]\n\n    # Calculate the length of the list to get the number of digits in the number\n    n = len(digits)\n\n    # Calculate the sum of nth power of each digit in the number\n    sum_of_powers = sum([digit ** n for digit in digits])\n\n    # Check if the sum is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Calculate the sum of cubes of digits of the number\n    sum_of_cubes = sum([int(digit) ** 3 for digit in str(number)])\n    \n    # Check if the sum of cubes of digits is equal to the number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # finding the length of the number\n    n = len(str(number))\n    # initializing sum to 0\n    sum = 0\n    # finding the sum of nth power of each digit of the number\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** n\n        temp //= 10\n    # checking if number is armstrong or not\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # converting number to string to count the digits\n    str_num = str(number)\n    # length of the number\n    num_length = len(str_num)\n    # initializing sum to zero\n    sum = 0\n    # finding the sum of each digit raised to the power of number of digits\n    for i in range(num_length):\n        sum += int(str_num[i]) ** num_length\n    # checking if the sum is equal to the number\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Find the number of digits in the given number\n    num_of_digits = len(str(number))\n    \n    # Iterate through each digit of the number and add its cube to the sum variable\n    for digit in str(number):\n        sum += int(digit) ** num_of_digits\n    \n    # Check if the sum is equal to the given number, and return True if it is, otherwise return False\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Calculate the sum of first n natural numbers\n    sum = (number * (number + 1)) / 2\n    # Calculate the average of first n natural numbers\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return (sum, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # calculate sum of first n natural numbers\n    sum = (number * (number + 1)) // 2\n    # calculate average of first n natural numbers\n    average = sum / number\n    # return sum and average as a tuple\n    return (sum, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    for i in range(1, number + 1):\n        sum_of_numbers += i\n    average = sum_of_numbers / number\n    return sum_of_numbers, average\n"
    },
    {
        "number": 599,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    This function returns the sum and average of the first n natural numbers.\n    \"\"\"\n    # Find the sum of the first n natural numbers\n    sum = (number * (number + 1)) // 2\n    # Find the average of the first n natural numbers\n    average = sum / number\n    # Return the sum and average as a tuple\n    return (sum, average)\n"
    },
    {
        "number": 600,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Returns True if n is even, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    This function checks whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    This function takes in a number 'n' as an argument and returns True if it's even, otherwise False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 602,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return it as the first repeated character\n        if char in char_count:\n            return char\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    # If no repeated characters are found, return None\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Find the first repeated character in a given string.\n    '''\n    seen_chars = set()\n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return None  # no repeated characters found\n"
    },
    {
        "number": 602,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return the character\n        if char in char_count:\n            return char\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    # If no repeated character is found, return None\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, return it as the first repeated character\n        if char in char_count:\n            return char\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n\n    # if no repeated character is found, return None\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store character counts\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return it\n        if char in char_count:\n            return char\n        # Otherwise, add it to the dictionary\n        else:\n            char_count[char] = 1\n    # If no character is repeated, return None\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # converting the string to lowercase\n    str1 = str1.lower()\n    \n    # creating an empty dictionary to store the count of each character\n    char_dict = {}\n    \n    # iterating through each character in the string\n    for char in str1:\n        # if the character is already present in the dictionary, return the character\n        if char in char_dict:\n            return char\n        # otherwise, add the character to the dictionary with value 1\n        else:\n            char_dict[char] = 1\n            \n    # if no repeated character is found, return None\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        else:\n            seen.add(char)\n    return None\n"
    },
    {
        "number": 603,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n    for i in range(len(ludic)):\n        for j in range(i+1, len(ludic)):\n            if ludic[j] % ludic[i] == 0:\n                ludic.remove(ludic[j])\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n    \n    index = 1\n    while index < len(ludic):\n        to_remove = []\n        for num in ludic[index:]:\n            if num % ludic[index-1] == 0:\n                to_remove.append(num)\n        for num in to_remove:\n            ludic.remove(num)\n        index += 1\n    \n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Returns a list of all Ludic numbers smaller than or equal to n.\n    \"\"\"\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n    \n    index = 1\n    while(index != len(ludic)):\n        first_ludic = ludic[index]\n        remove_index = index + first_ludic\n        \n        while(remove_index < len(ludic)):\n            ludic.pop(remove_index)\n            remove_index = remove_index + first_ludic - 1\n            \n        index += 1\n        \n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n    i = 1\n    while i < n:\n        j = i + 1\n        while j <= n:\n            if ludic[j-1] % i == 0:\n                ludic.remove(ludic[j-1])\n            j += 1\n        i += 1\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_nums = []\n    for i in range(1, n+1):\n        if i not in ludic_nums:\n            ludic_nums.append(i)\n            for j in ludic_nums[::-1]:\n                if j > i:\n                    continue\n                if i % j == 0:\n                    ludic_nums.remove(i)\n                    break\n    return ludic_nums\n"
    },
    {
        "number": 603,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n    \n    i = 1\n    while(i < len(ludic)):\n        j = i + 1\n        while(j < len(ludic)):\n            if(ludic[j] % ludic[i] == 0):\n                ludic.pop(j)\n            else:\n                j += 1\n        i += 1\n    \n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    ludics = []\n    for i in range(1, n+1):\n        ludics.append(i)\n    m = 1\n    while m <= n:\n        i = 1\n        while i <= m:\n            if i*m <= n and i*m in ludics:\n                ludics.remove(i*m)\n            i += 1\n        m += 1\n    return ludics\n"
    },
    {
        "number": 603,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        ludics.append(i)\n        \n    ludic_idx = 1\n    while ludic_idx < len(ludics):\n        # Remove non-lucid numbers\n        for i in range(ludic_idx, len(ludics)):\n            if ludics[i] % ludics[ludic_idx] == 0:\n                ludics.remove(ludics[i])\n                \n        ludic_idx += 1\n        \n    return ludics\n"
    },
    {
        "number": 603,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n    index = 1\n    while(index < len(ludic)):\n        first_num = ludic[index]\n        remove_index = index + first_num\n        while(remove_index < len(ludic)):\n            ludic.pop(remove_index)\n            remove_index = remove_index + first_num - 1\n        index += 1\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        ludic_numbers.append(i)\n    \n    index = 1\n    while(index != len(ludic_numbers)):\n        first_ludic = ludic_numbers[index]\n        remove_index = index + first_ludic\n        \n        while(remove_index < len(ludic_numbers)):\n            ludic_numbers.pop(remove_index)\n            remove_index = remove_index + first_ludic - 1\n            \n        index += 1\n        \n    return ludic_numbers[:-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reverse_words = [word[::-1] for word in words]\n    return ' '.join(reverse_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    reversed_s = \" \".join(words)\n    return reversed_s\n"
    },
    {
        "number": 604,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the reversed list of words back into a string\n    reversed_s = ' '.join(words)\n    return reversed_s\n"
    },
    {
        "number": 604,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse the order of the words in the list\n    words.reverse()\n    # join the words back into a string with spaces between them\n    reversed_s = ' '.join(words)\n    return reversed_s\n"
    },
    {
        "number": 604,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of the words\n    words.reverse()\n    # Join the words back into a string with spaces between them\n    return ' '.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n"
    },
    {
        "number": 605,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks whether the given number is a prime number or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function takes an integer as an argument and returns True if it is a prime number, else False.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian\n``` \n\nThis script imports the math module to use the constant pi. The radian_degree function takes a degree as input and returns its corresponding radian value. The formula used to convert degrees to radians is `radian = degree * (pi/180)`. "
    },
    {
        "number": 606,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian\n"
    },
    {
        "number": 607,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching substring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        matching_substring = text[start_index:end_index]\n        return matching_substring, start_index, end_index\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return text[start:end], start, end\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        return text[start_index:end_index], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"
    },
    {
        "number": 608,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    bell = [[0 for j in range(n+1)] for i in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1] \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n  \n"
    },
    {
        "number": 608,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]"
    },
    {
        "number": 608,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    bell_num = [0] * (n+1)\n    bell_num[0] = 1\n    for i in range(1, n+1):\n        bell_num[i] = 0\n        for k in range(i):\n            bell_num[i] += k * bell_num[k]\n    return bell_num[n]"
    },
    {
        "number": 608,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"
    },
    {
        "number": 608,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"
    },
    {
        "number": 608,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n"
    },
    {
        "number": 608,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n"
    },
    {
        "number": 608,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"
    },
    {
        "number": 608,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"
    },
    {
        "number": 610,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k > len(list1):\n        return list1\n    else:\n        return list1[:k-1] + list1[k:]"
    },
    {
        "number": 610,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Create a new list and copy all elements from list1 except the k'th element\n    new_list = []\n    for i in range(len(list1)):\n        if i != k:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k] + list1[k+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k < 0 or k >= len(list1):\n        return list1\n    else:\n        return list1[:k] + list1[k+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1[:k] + list1[k+1:]\n    return new_list\n"
    },
    {
        "number": 610,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k > len(list1):\n        return list1\n    return list1[:k-1] + list1[k:]\n"
    },
    {
        "number": 610,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements,\n    but the k'th element removed.\n    '''\n    if L <= len(list1):\n        return list1[:L-1] + list1[L:]\n    else:\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L < 1 or L > len(list1):\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]\n"
    },
    {
        "number": 610,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i != L-1:\n            new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 611,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, this function returns the max of the n'th column.\n    \"\"\"\n    max_element = float('-inf')\n    for row in test_list:\n        if len(row) >= N:\n            max_element = max(max_element, row[N-1])\n    return max_element\n"
    },
    {
        "number": 611,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_value:\n            max_value = row[N]\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    col_list = []\n    for row in test_list:\n        col_list.append(row[N])\n    return max(col_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a list of lists, return the max of the n'th column.\n    \"\"\"\n    max_val = test_list[0][N]\n    for i in range(1, len(test_list)):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            max_value = max(max_value, row[N])\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            max_value = max(max_value, row[N])\n    return max_value\n"
    },
    {
        "number": 611,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, return the maximum value of the Nth column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            max_val = max(max_val, row[N])\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if N <= len(test_list[i]):\n            max_val = max(max_val, test_list[i][N-1])\n    return max_val\n"
    },
    {
        "number": 612,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n"
    },
    {
        "number": 612,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]\n"
    },
    {
        "number": 612,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for i in lst:\n        first_list.append(i[0])\n        second_list.append(i[1])\n    return [first_list, second_list]\n"
    },
    {
        "number": 612,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def merge(lst):\n    # Initialize two empty lists to hold the first and second elements of each sublist\n    first_elements = []\n    second_elements = []\n    \n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Append the first and second elements of each sublist to the appropriate list\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    # Return the two lists as a tuple\n    return (first_elements, second_elements)\n"
    },
    {
        "number": 612,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]\n"
    },
    {
        "number": 612,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def merge(lst):   \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for i in lst:\n        first_list.append(i[0])\n        second_list.append(i[1])\n    return [first_list, second_list]\n"
    },
    {
        "number": 612,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for i in lst:\n        first_list.append(i[0])\n        second_list.append(i[1])\n    return [first_list, second_list]\n"
    },
    {
        "number": 612,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n"
    },
    {
        "number": 612,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def merge(lst):\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n"
    },
    {
        "number": 612,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for i in lst:\n        first_list.append(i[0])\n        second_list.append(i[1])\n    return [first_list, second_list]\n"
    },
    {
        "number": 614,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i[1]\n        result.append((i[0], cum_sum))\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = []\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i][1]\n        cumulative_sum.append(total_sum)\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n        result.append(cum_sum)\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n        result.append(cum_sum)\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(sum(test_list[:i+1]))\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for element in test_list:\n        cumulative_sum += element\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(sum(test_list[:i+1]))\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    This function takes a list as input and returns the cumulative sum of the values in the list.\n    \"\"\"\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum values\n    cumulative_sum = []\n    # Initialize a variable to keep track of the sum so far\n    sum_so_far = 0\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each element in the tuple\n        for elem in tup:\n            # Add the element to the sum so far\n            sum_so_far += elem\n        # Append the sum so far to the cumulative sum list\n        cumulative_sum.append(sum_so_far)\n    # Return the cumulative sum list\n    return cumulative_sum\n"
    },
    {
        "number": 615,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t)/len(t) for t in nums]"
    },
    {
        "number": 615,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        result.append(avg)\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    This function takes a tuple of tuples as an input and returns a list of averages of each tuple.\n    \"\"\"\n    avg_list = []\n    for i in nums:\n        avg = sum(i)/len(i)\n        avg_list.append(avg)\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        avg.append(total/len(tup))\n    return avg\n"
    },
    {
        "number": 615,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    averages = []\n    # Iterate over the tuples in the input tuple\n    for tup in nums:\n        # Calculate the average value of the current tuple\n        avg = sum(tup) / len(tup)\n        # Append the average value to the list of averages\n        averages.append(avg)\n    # Return the list of averages\n    return averages\n"
    },
    {
        "number": 615,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        result.append(sum(tup) / len(tup))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        result.append(sum(tup) / len(tup))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 616,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 616,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(i % j for i, j in zip(test_tup1, test_tup2))\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 617,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Use dynamic programming to find the minimum number of jumps\n    n = len(steps)\n    dp = [float('inf')] * (d + 1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(steps[i], d + 1):\n            dp[j] = min(dp[j], dp[j - steps[i]] + 1)\n    return dp[d]\n"
    },
    {
        "number": 617,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def min_jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d:\n        return -1  # not possible to reach (d, 0) point\n\n    if d == 0 or d == 1:\n        return d  # no need to jump\n\n    # calculate minimum jumps required\n    min_jumps = float('inf')\n    for i in range(1, steps + 1):\n        # calculate distance from (0, 0) to (i, steps-i)\n        distance = i * i + (steps - i) * (steps - i)\n\n        # calculate distance from (i, steps-i) to (d, 0)\n        distance = distance + (d - i) * (d - i)\n\n        # check if distance is less than current minimum jumps\n        if distance < min_jumps:\n            min_jumps = distance\n\n    return int(min_jumps) + 2  # add 2 for initial and final jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return 0\n    if d > steps:\n        return -1  # cannot reach (d, 0) with the given number of steps\n    jumps = 1  # start with 1 jump\n    while True:\n        # try to reach (d, 0) with the remaining steps\n        if steps - jumps * d >= d:\n            # we can reach (d, 0) with the remaining steps\n            # and we still have enough steps to make another jump\n            jumps += 1\n        else:\n            # we cannot reach (d, 0) with the remaining steps\n            # or we have enough steps to make another jump but we cannot reach (d, 0)\n            # with the remaining steps and a single jump\n            return jumps if d == steps - jumps * d else -1\n"
    },
    {
        "number": 617,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif steps == 0 or steps < d:\n        return -1\n    else:\n        return (d // steps) + (1 if d % steps != 0 else 0)\n"
    },
    {
        "number": 617,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d:\n        return \"Not possible\"\n    elif d == 0:\n        return 0\n    else:\n        return (steps // d) + (1 if steps % d != 0 else 0)\n"
    },
    {
        "number": 617,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif steps == 0 or steps < d:\n        return -1\n    else:\n        jumps = 1\n        cur_dist = steps\n        while cur_dist >= d:\n            cur_dist -= d\n            jumps += 1\n        if cur_dist == 0:\n            return jumps\n        else:\n            return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    # Check if the number of steps is sufficient to reach the destination\n    if steps < d:\n        return -1\n    \n    # Initialize variables\n    jumps = 0\n    curr_pos = 0\n    \n    # Loop through the steps\n    for i in range(steps):\n        # Check if the current position is sufficient to reach (d, 0)\n        if curr_pos >= d:\n            jumps += 1\n            return jumps\n        \n        # Update the current position\n        curr_pos += i + 1\n        \n        # Check if the current position is sufficient to reach (d, 0)\n        if curr_pos >= d:\n            jumps += 1\n            return jumps\n    \n    # If the loop completes without reaching (d, 0), return -1\n    return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if d == 0 or steps == 0:\n        return 0\n    elif d < 0 or steps < 0:\n        return -1\n    elif d == steps:\n        return 1\n    else:\n        jumps = [0] * (d + 1)\n        for i in range(1, d + 1):\n            min_jumps = float('inf')\n            for j in range(1, steps + 1):\n                if i - j >= 0 and jumps[i - j] != -1:\n                    min_jumps = min(min_jumps, jumps[i - j] + 1)\n            jumps[i] = min_jumps if min_jumps != float('inf') else -1\n        return jumps[d]\n"
    },
    {
        "number": 617,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    if d <= 0 or d > steps:\n        return \"Invalid input\"\n    jumps = [0] * (steps + 1)\n    for i in range(1, steps + 1):\n        min_jumps = float('inf')\n        for j in range(i):\n            if jumps[j] != float('inf') and i <= j + d:\n                min_jumps = min(min_jumps, jumps[j])\n        if min_jumps != float('inf'):\n            jumps[i] = min_jumps + 1\n    if jumps[steps] == float('inf'):\n        return \"Not possible\"\n    else:\n        return jumps[steps]\n"
    },
    {
        "number": 617,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def min_jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d or d <= 0:\n        return \"Not possible\"\n    elif d == 1:\n        return 1\n    elif steps == d:\n        return 2\n    else:\n        jumps = 1\n        current_steps = steps\n        while current_steps > d:\n            jumps += 1\n            current_steps -= d\n        if current_steps == 0:\n            jumps -= 1\n        return jumps\n"
    },
    {
        "number": 618,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Divide each element of nums1 by the corresponding element of nums2\n    # and append the result to the list\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise.\n\n    :param nums1: list of numbers\n    :param nums2: list of numbers\n    :return: list of element-wise division of nums1 and nums2\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Divide two lists element-wise and return the result as a list.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element-wise.\n    \"\"\"\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists should have same length.\")\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            result.append(float('inf'))\n        else:\n            result.append(nums1[i] / nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num = ''\n    alpha = ''\n    for char in test_str:\n        if char.isdigit():\n            num += char\n        else:\n            alpha += char\n    return alpha + num\n"
    },
    {
        "number": 619,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = \"\"\n    alpha_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n        else:\n            alpha_str += i\n    return alpha_str + num_str\n"
    },
    {
        "number": 619,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            letters.append(char)\n    return ''.join(letters) + ''.join(numbers)\n"
    },
    {
        "number": 619,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    letters = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            letters.append(char)\n    return ''.join(letters) + ''.join(numbers)\n"
    },
    {
        "number": 619,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    char_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            char_list.append(char)\n    return ''.join(char_list) + ''.join(num_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    non_num_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            non_num_str += char\n    return non_num_str + num_str\n"
    },
    {
        "number": 619,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    words = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            words.append(char)\n    return ''.join(words) + ''.join(nums)\n"
    },
    {
        "number": 619,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    return ''.join(c for c in test_str if not c.isdigit()) + ''.join(nums)\n"
    },
    {
        "number": 619,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    alpha_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            alpha_str += char\n    return alpha_str + num_str\n"
    },
    {
        "number": 619,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num = ''\n    alpha = ''\n    for char in test_str:\n        if char.isdigit():\n            num += char\n        else:\n            alpha += char\n    return alpha + num\n"
    },
    {
        "number": 620,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    i, j = 0, 1\n    count = 0\n    while i < n-1:\n        if a[j] % a[i] == 0:\n            count += 1\n            i += 1\n            j += 1\n        elif a[i] % a[j] == 0:\n            count += 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n        if i == n-1 and j == n:\n            break\n    return count\n"
    },
    {
        "number": 620,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_size = 1\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0:\n                max_size = max(max_size, j-i+1)\n                break\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    # Sort the list in ascending order\n    a.sort()\n    \n    # Initialize variables to keep track of current subset size and largest subset size\n    curr_size = 1\n    max_size = 1\n    \n    # Iterate through the sorted list\n    for i in range(1, len(a)):\n        # If the current number is divisible by the previous number, increase current subset size\n        if a[i] % a[i-1] == 0:\n            curr_size += 1\n        # If the current number is not divisible by the previous number, check if current subset size is greater than largest subset size\n        else:\n            if curr_size > max_size:\n                max_size = curr_size\n            curr_size = 1\n            \n    # Check if last subset is the largest subset\n    if curr_size > max_size:\n        max_size = curr_size\n        \n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    size = len(a)\n    max_size = 0\n    current_size = 0\n    for i in range(size):\n        current_size += 1\n        for j in range(i+1, size):\n            if a[j] % a[i] == 0:\n                current_size += 1\n            else:\n                break\n        if current_size > max_size:\n            max_size = current_size\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n    res = 1\n    for k in range(1, n):\n        for i in range(n-k):\n            j = i + k\n            if dp[i][j] == 1:\n                continue\n            for x in range(i, j):\n                if dp[i][x] == 0 or dp[x+1][j] == 0:\n                    continue\n                dp[i][j] = 1\n                res = max(res, j-i+1)\n    return res\n"
    },
    {
        "number": 620,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    max_size = 0\n    for i in range(1, 2**n):\n        subset = []\n        for j in range(n):\n            if i & (1 << j):\n                subset.append(a[j])\n        if all(x % y == 0 or y % x == 0 for x, y in zip(subset, subset[1:])):\n            max_size = max(max_size, len(subset))\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    n = len(a)\n    # Initialize boolean variables\n    dp = [[False] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    # Build larger subsets\n    for size in range(2, n+1):\n        for i in range(n-size+1):\n            j = i + size - 1\n            for k in range(i, j):\n                if a[i] % a[k] == 0 and a[k+1] % a[j] == 0 and dp[i][k] and dp[k+1][j]:\n                    dp[i][j] = True\n                    break\n    # Find largest valid subset\n    max_size = 0\n    for i in range(n):\n        if dp[0][i]:\n            max_size = max(max_size, i+1)\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    max_subset_size = 0\n    \n    for i in range(n):\n        subset = [a[i]]\n        \n        for j in range(i+1, n):\n            if all(x % subset[-1] == 0 for x in subset):\n                subset.append(a[j])\n            \n        max_subset_size = max(max_subset_size, len(subset))\n        \n    return max_subset_size\n"
    },
    {
        "number": 620,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a = sorted(set(a))\n    n = len(a)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[j] % a[i] == 0:\n                dp[i][j] = dp[i][j - 1] + 1\n            else:\n                dp[i][j] = dp[i][j - 1]\n    return max(map(max, dp))\n"
    },
    {
        "number": 620,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    a = sorted(set(a))  # remove duplicates and sort the list\n    n = len(a)\n    dp = [1] * n  # initialize the dynamic programming array\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"
    },
    {
        "number": 622,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = k = 0\n    median_list = []\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median_list.append(arr1[i])\n            i += 1\n        else:\n            median_list.append(arr2[j])\n            j += 1\n        k += 1\n        \n        if k == n:\n            break\n    \n    if k < n:\n        if i == n:\n            median_list.extend(arr2[j:])\n        else:\n            median_list.extend(arr1[i:])\n    \n    if n % 2 == 0:\n        median = (median_list[n//2 - 1] + median_list[n//2]) / 2\n    else:\n        median = median_list[n//2]\n    \n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists into a new sorted list\n    merged = []\n    i, j = 0, 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    merged += arr1[i:]\n    merged += arr2[j:]\n    \n    # compute the median of the merged list\n    if n % 2 == 0:\n        return (merged[n//2 - 1] + merged[n//2]) / 2\n    else:\n        return merged[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Initialize the indices for both the lists\n    i = j = 0\n    \n    # Initialize a variable to store the median value\n    median = 0\n    \n    # Iterate through the lists until one of them becomes empty\n    while i < n and j < n:\n        \n        # Check if the current element of the first list is less than or equal to the current element of the second list\n        if arr1[i] <= arr2[j]:\n            \n            # Update the median value\n            median = arr1[i]\n            \n            # Move to the next element of the first list\n            i += 1\n            \n        else:\n            \n            # Update the median value\n            median = arr2[j]\n            \n            # Move to the next element of the second list\n            j += 1\n            \n        \n        # If the current element of any list becomes the middle element, break the loop\n        if (i + j) == (n - 1) or (i + j) == n:\n            break\n    \n    # Check if the length of the lists is even or odd and return the median value accordingly\n    if n % 2 == 0:\n        if (i + j) == n:\n            return (median + arr1[i]) / 2\n        else:\n            return (median + arr2[j]) / 2\n    else:\n        return median\n"
    },
    {
        "number": 622,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = k = 0\n    median = [0] * n\n\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median[k] = arr1[i]\n            i += 1\n        else:\n            median[k] = arr2[j]\n            j += 1\n        k += 1\n\n    while i < n:\n        median[k] = arr1[i]\n        i += 1\n        k += 1\n\n    while j < n:\n        median[k] = arr2[j]\n        j += 1\n        k += 1\n\n    if n % 2 == 0:\n        return (median[n // 2] + median[n // 2 - 1]) / 2\n    else:\n        return median[n // 2]\n"
    },
    {
        "number": 622,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays into a single sorted array\n    sorted_arr = []\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            sorted_arr.append(arr1[i])\n            i += 1\n        else:\n            sorted_arr.append(arr2[j])\n            j += 1\n    sorted_arr += arr1[i:]\n    sorted_arr += arr2[j:]\n    \n    # Calculate the median\n    if n % 2 == 0:\n        median = (sorted_arr[n//2 - 1] + sorted_arr[n//2]) / 2\n    else:\n        median = sorted_arr[n//2]\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Create two pointers for both lists and initialize them to point to the beginning of each list\n    i = j = 0\n    # Create an empty list to store the elements of the merged list\n    merged_list = []\n    # Loop through both pointers until one of them reaches the end of its respective list\n    while i < n and j < n:\n        # Compare the elements pointed by both pointers and append the smaller element to the merged list\n        if arr1[i] < arr2[j]:\n            merged_list.append(arr1[i])\n            i += 1\n        else:\n            merged_list.append(arr2[j])\n            j += 1\n    # If one of the pointers reaches the end of its respective list, append the remaining elements of the other list to the merged list\n    if i == n:\n        merged_list.extend(arr2[j:])\n    else:\n        merged_list.extend(arr1[i:])\n    # Calculate the median of the merged list\n    if n % 2 == 0:\n        return (merged_list[n//2 - 1] + merged_list[n//2])/2\n    else:\n        return merged_list[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j, k = 0, 0, 0\n    median = [0] * n\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median[k] = arr1[i]\n            i += 1\n        else:\n            median[k] = arr2[j]\n            j += 1\n        k += 1\n    \n    while i < n:\n        median[k] = arr1[i]\n        i += 1\n        k += 1\n        \n    while j < n:\n        median[k] = arr2[j]\n        j += 1\n        k += 1\n        \n    if n % 2 == 0:\n        return (median[n//2 - 1] + median[n//2]) / 2\n    else:\n        return median[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize two pointers for each list\n    i = j = 0\n    \n    # Initialize a variable to store the median value\n    median = 0\n    \n    # Loop through the elements of both lists\n    for _ in range(n // 2):\n        # Find the smaller value between the two pointers\n        if arr1[i] < arr2[j]:\n            median = arr1[i]\n            i += 1\n        else:\n            median = arr2[j]\n            j += 1\n    \n    # Check if the length of the merged list is odd or even\n    if n % 2 == 0:\n        # If the length is even, find the average of the two middle values\n        if arr1[i] < arr2[j]:\n            median += arr1[i+1]\n        else:\n            median += arr2[j+1]\n        median /= 2\n    \n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = k = 0\n    median = []\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median.append(arr1[i])\n            i += 1\n        else:\n            median.append(arr2[j])\n            j += 1\n        k += 1\n        \n        if k == n:\n            if n % 2 == 0:\n                return (median[n//2] + median[n//2 - 1]) / 2\n            else:\n                return median[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = k = 0\n    median = []\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median.append(arr1[i])\n            i += 1\n        else:\n            median.append(arr2[j])\n            j += 1\n        k += 1\n        if k == n:\n            break\n    if i < n:\n        median += arr1[i:]\n    else:\n        median += arr2[j:]\n    if n % 2 == 0:\n        return (median[n//2 - 1] + median[n//2]) / 2\n    else:\n        return median[n//2]\n"
    },
    {
        "number": 623,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Computes the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n"
    },
    {
        "number": 624,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements.\")\n        return\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return []\n    elif len(newList) == 1:\n        return newList\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements.\")\n        return\n    \n    first_elem = newList[0]\n    last_elem = newList[-1]\n    \n    newList[0] = last_elem\n    newList[-1] = first_elem\n    \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) > 1:\n        # Get the first and last elements\n        first = newList[0]\n        last = newList[-1]\n        # Swap the first and last elements\n        newList[0] = last\n        newList[-1] = first\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # swapping the first and last element of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        print(\"The list is empty!\")\n    elif len(newList) == 1:\n        print(\"The list has only one element!\")\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        print(\"The swapped list is:\", newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def swap_List(newList):  \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Interchanges the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        print(\"List should have at least two elements.\")\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r**2 * math.sqrt(2 - r**2/2)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = r**2\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r ** 2 * math.acos(-1 / r)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle\n    with a given radius r.\n    '''\n    area = r**2 * (math.sqrt(3)/2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r.\n    '''\n    # The largest inscribed triangle has two vertices on the diameter and one on the semicircle.\n    # Let the diameter be the line x = -r and the semicircle be x^2 + y^2 = r^2.\n    # Then the equation of the line perpendicular to x and passing through (-r,0) is y = mx, where m = r/y.\n    # The intersection of y = mx and the semicircle is at x = r/sqrt(1+m^2), y = r*m/sqrt(1+m^2).\n    # The area of the triangle is 0.5 * base * height = 0.5 * r * r * m * sqrt(1+m^2) = 0.5 * r^2 * m * sqrt(1+m^2).\n    # The maximum area is when m is maximum, i.e. when the triangle touches the semicircle at the top, which occurs when y = r.\n    # Thus the area is 0.5 * r^2 * r/sqrt(2) * sqrt(2) = 0.25 * r^2.\n    return 0.25 * r**2\n"
    },
    {
        "number": 626,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculating the diameter of the semicircle\n    diameter = 2 * r\n    \n    # Calculating the height of the triangle\n    height = math.sqrt(r**2 - (diameter/2)**2)\n    \n    # Calculating the base of the triangle\n    base = diameter/2\n    \n    # Calculating the area of the triangle\n    area = 0.5 * base * height\n    \n    # Returning the area of the triangle\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes the radius of a semicircle as input and returns the area of the largest triangle that can be inscribed in it.\n    '''\n    # calculate the height of the triangle using the Pythagorean theorem\n    h = math.sqrt(r**2 - (r/2)**2)\n    # calculate the base of the triangle using the diameter of the semicircle\n    b = r\n    # calculate the area of the triangle using the formula 1/2 * base * height\n    area = 0.5 * b * h\n    # return the area of the triangle\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes the radius of a semicircle as input and returns the area of the largest triangle that can be inscribed in the semicircle.\n    '''\n    # Calculate the length of the radius of the semicircle\n    radius = 2 * r\n    # Calculate the height of the triangle using the Pythagorean theorem\n    height = math.sqrt(radius**2 - (radius/2)**2)\n    # Calculate the area of the triangle using the formula 0.5 * base * height\n    area = 0.5 * (radius/2) * height\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # First, we calculate the length of the semicircle's diameter\n    diameter = 2 * r\n    # Then, we calculate the height of the triangle using the Pythagorean theorem\n    height = math.sqrt((diameter/2)**2 - r**2)\n    # Finally, we calculate the area of the triangle using the formula 1/2 * base * height\n    area = 0.5 * (diameter/2) * height\n    # We return the area of the triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the diameter of the semicircle\n    diameter = 2 * r\n    \n    # Calculate the base of the triangle (which is also the diameter of the semicircle)\n    base = diameter\n    \n    # Calculate the height of the triangle (using the Pythagorean theorem)\n    height = math.sqrt(r**2 - (diameter/2)**2)\n    \n    # Calculate the area of the triangle\n    area = (1/2) * base * height\n    \n    return area"
    },
    {
        "number": 627,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if not array:\n        return None\n\n    if end is None:\n        end = len(array)\n\n    if start >= end:\n        return None\n\n    first_missing = None\n    for i in range(start, end):\n        if array[i] <= i:\n            continue\n        if first_missing is None:\n            first_missing = i\n        else:\n            break\n\n    return first_missing\n"
    },
    {
        "number": 627,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    missing = start\n    for i in range(start, end):\n        if array[i] == missing:\n            missing += 1\n        elif array[i] > missing:\n            return missing\n    \n    return missing\n"
    },
    {
        "number": 627,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    if end is None:\n        end = n-1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == mid:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start\n"
    },
    {
        "number": 627,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    if start > end:\n        return start\n    \n    mid = (start + end) // 2\n    \n    if array[mid] == mid:\n        return find_First_Missing(array, mid+1, end)\n    else:\n        return find_First_Missing(array, start, mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n\n    # Initialize variables\n    missing = start\n\n    # Iterate over the array\n    for i in range(start, end):\n        # If the current number is not in the correct position, update missing\n        if array[i] != i - start + missing:\n            missing = i - start + array[i]\n\n    # Return the first missing number\n    return missing\n"
    },
    {
        "number": 627,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array)\n    for i in range(start, end):\n        if i+1 != array[i]:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    missing = None\n    \n    for i in range(start, end):\n        if array[i] > i:\n            missing = i\n            break\n        \n        if i == end-1:\n            missing = end\n            \n    return missing\n"
    },
    {
        "number": 627,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array)\n    \n    missing = start\n    \n    for i in range(start, end):\n        if array[i] == missing:\n            missing += 1\n        elif array[i] > missing:\n            return missing\n    \n    return missing\n"
    },
    {
        "number": 627,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array)\n    \n    missing = start\n    for i in range(start, end):\n        if array[i] == missing:\n            missing += 1\n        elif array[i] > missing:\n            return missing\n    \n    return missing\n"
    },
    {
        "number": 627,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    missing_num = start\n    \n    for num in array[start:end]:\n        if num == missing_num:\n            missing_num += 1\n        elif num > missing_num:\n            break\n    \n    return missing_num\n"
    },
    {
        "number": 628,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n"
    },
    {
        "number": 629,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def even_numbers(list):\n    '''\n    This function takes a list of numbers as input and returns a list of even numbers from it.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def even_nums(lst):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only even numbers from the input list.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst\n"
    },
    {
        "number": 629,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def Split(lst): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in lst:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def Split(lst):\n    even_nums = []\n    odd_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n        else:\n            odd_nums.append(num)\n    return even_nums, odd_nums\n"
    },
    {
        "number": 629,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n"
    },
    {
        "number": 629,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n"
    },
    {
        "number": 630,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    for i in adj:\n        if i not in sub:\n            sub.append(i)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    for coord in adj_coords:\n        if coord not in sub:\n            sub.append(coord)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    return [(row+1, col), (row-1, col), (row, col+1), (row, col-1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    for i in adj:\n        if i not in sub:\n            sub.append(i)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1,y),(x+1,y),(x,y-1),(x,y+1)]\n    return [a for a in adj if a not in sub]\n"
    },
    {
        "number": 630,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # initialize the adjacent coordinates list\n    adj_coords = []\n    \n    # check for the adjacent coordinates\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i, j) != (0, 0):\n                adj_coords.append((ele[0] + i, ele[1] + j))\n    \n    # return the adjacent coordinates list\n    return adj_coords\n"
    },
    {
        "number": 630,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    for e in adj:\n        if e not in sub:\n            sub.append(e)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return [coord for coord in adj_coords if coord not in sub]\n"
    },
    {
        "number": 630,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return [coord for coord in adj_coords if coord not in sub]\n"
    },
    {
        "number": 631,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    \n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace whitespaces with underscore\n    text = text.replace(' ', '_')\n    \n    # replace underscores with whitespace\n    text = text.replace('_', ' ')\n    \n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_', ' ')\n"
    },
    {
        "number": 631,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscore\n    text = text.replace(' ', '_')\n    # replace underscore with space\n    text = text.replace('_', ' ')\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in range(len(text)):\n        if text[i] == ' ':\n            new_text += '_'\n        elif text[i] == '_':\n            new_text += ' '\n        else:\n            new_text += text[i]\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replacing spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # replacing underscores with spaces\n    text = text.replace(\"_\", \" \")\n    \n    # returning the updated text\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_', ' ')"
    },
    {
        "number": 631,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n"
    },
    {
        "number": 632,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    result = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            result.append(num)\n    result.extend(zeroes)\n    return result\n"
    },
    {
        "number": 632,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store non-zero elements\n    new_list = []\n    # iterate over the original list and add non-zero elements to the new list\n    for num in num_list:\n        if num != 0:\n            new_list.append(num)\n    # add zeroes to the end of the new list\n    for i in range(num_list.count(0)):\n        new_list.append(0)\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = [num for num in num_list if num != 0] + [0] * num_list.count(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store non-zero values\n    non_zero_list = []\n    # loop through the given list and append non-zero values to non_zero_list\n    for num in num_list:\n        if num != 0:\n            non_zero_list.append(num)\n    # append zeroes at the end of non_zero_list to get the desired output\n    for i in range(num_list.count(0)):\n        non_zero_list.append(0)\n    return non_zero_list\n"
    },
    {
        "number": 632,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            zeroes.insert(0, num)\n    return zeroes\n"
    },
    {
        "number": 632,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    # use a list comprehension to filter out non-zero elements\n    non_zero_list = [num for num in num_list if num != 0]\n    # use another list comprehension to create a list of zeroes with the same length as the original list\n    zero_list = [0] * (len(num_list) - len(non_zero_list))\n    # concatenate the two lists to obtain the desired output\n    return non_zero_list + zero_list\n"
    },
    {
        "number": 632,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    non_zero_list = []\n    zero_list = []\n    for i in num_list:\n        if i != 0:\n            non_zero_list.append(i)\n        else:\n            zero_list.append(i)\n    return non_zero_list + zero_list\n"
    },
    {
        "number": 632,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    non_zero_list = []\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n    return non_zero_list + zero_list\n"
    },
    {
        "number": 632,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    # Create a new list to store non-zero values\n    new_list = []\n    \n    # Iterate through the given list\n    for num in num_list:\n        # Check if the number is not zero\n        if num != 0:\n            # Add the number to the new list\n            new_list.append(num)\n            \n    # Add the required number of zeros to the new list\n    for i in range(num_list.count(0)):\n        new_list.append(0)\n        \n    # Return the new list\n    return new_list\n"
    },
    {
        "number": 632,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    non_zero_list = []\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n    return non_zero_list + zero_list\n"
    },
    {
        "number": 633,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    # Sort the given array in ascending order\n    arr.sort()\n    # Initialize the sum variable\n    sum = 0\n    # Loop through the array and xor all pairs of numbers\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    # Return the sum of xor of all pairs of numbers\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Loop through all pairs of numbers in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # XOR the two numbers and add to the sum\n            sum += arr[i] ^ arr[j]\n            \n    # Return the final sum\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Returns the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    # Initialize the sum to 0\n    sum_xor = 0\n    \n    # Iterate over all pairs of indices in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Compute the xor of the pair of elements\n            xor = arr[i] ^ arr[j]\n            # Add the xor to the running total\n            sum_xor += xor\n    \n    # Return the final sum\n    return sum_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the xor of the current pair of numbers\n            xor_value = arr[i] ^ arr[j]\n            # Add the xor value to the sum\n            sum += xor_value\n    \n    # Return the final sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Iterate over all possible pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # Compute the xor of the two numbers and add it to the sum\n            sum += arr[i] ^ arr[j]\n            \n    # Return the final sum\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    # Initialize a variable to store the sum of xor of all pairs\n    sum = 0\n    \n    # Traverse through the list and xor all pairs of elements\n    for i in range(n):\n        for j in range(i+1,n):\n            # Add the xor of the current pair to the sum\n            sum += arr[i] ^ arr[j]\n    \n    # Return the sum\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 635,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    hq.heapify(iterable)\n    sorted_iterable = []\n    while iterable:\n        sorted_iterable.append(hq.heappop(iterable))\n    return sorted_iterable[::-1]\n"
    },
    {
        "number": 635,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 635,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 635,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n"
    },
    {
        "number": 637,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"No profit and no loss\")\n    elif actual_cost > sale_amount:\n        print(\"Loss\")\n    else:\n        print(\"Profit\")\n"
    },
    {
        "number": 637,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return math.ceil(wind_chill_index)\n"
    },
    {
        "number": 638,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # formula to calculate wind chill index\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    # rounding the result to the next integer\n    wind_chill_index = math.ceil(wind_chill_index)\n    return wind_chill_index\n"
    },
    {
        "number": 638,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0:\n        return t\n    else:\n        wci = 13.12 + 0.6215*t - 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n        return math.ceil(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # formula for wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    # rounding the wind chill index to the next integer\n    return math.ceil(wc)\n"
    },
    {
        "number": 638,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return math.ceil(wc)\n"
    },
    {
        "number": 638,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index using the 13.12 equation\n    wc_index = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    \n    # Round the index to the next integer\n    wc_index_rounded = math.ceil(wc_index)\n    \n    return wc_index_rounded\n"
    },
    {
        "number": 638,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert km/h to m/s\n    v_ms = v / 3.6\n    \n    # calculate wind chill index\n    wc_index = 13.12 + 0.6215 * t - 11.37 * v_ms**0.16 + 0.3965 * t * v_ms**0.16\n    \n    # round to next integer\n    wc_index_rounded = math.ceil(wc_index)\n    \n    return wc_index_rounded\n"
    },
    {
        "number": 638,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Wind chill index formula\n    wci = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    # Round to the next integer\n    wci_rounded = math.ceil(wci)\n    return wci_rounded\n"
    },
    {
        "number": 638,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Formula for wind chill index\n    wc = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    # Round to the next integer and return the result\n    return math.ceil(wc)\n"
    },
    {
        "number": 638,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert km/h to m/s\n    v_ms = v / 3.6\n    # calculate wind chill index\n    wci = 13.12 + 0.6215 * t - 11.37 * v_ms**0.16 + 0.3965 * t * v_ms**0.16\n    # round to next integer\n    wci_rounded = math.ceil(wci)\n    return wci_rounded\n"
    },
    {
        "number": 639,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    # remove names starting with lowercase letters\n    sample_names = [name for name in sample_names if name[0].isupper()]\n    # compute sum of lengths of remaining names\n    return sum(len(name) for name in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_name_lengths(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_of_lengths(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that start with uppercase letters\n    uppercase_names = []\n    # iterate over each name in the sample_names list\n    for name in sample_names:\n        # check if the first letter of the name is uppercase\n        if name[0].isupper():\n            # if it is, add the name to the uppercase_names list\n            uppercase_names.append(name)\n    # sum the length of all the names in the uppercase_names list\n    sum_of_lengths = sum(len(name) for name in uppercase_names)\n    # return the sum_of_lengths variable\n    return sum_of_lengths\n"
    },
    {
        "number": 639,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_of_lengths(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Filter out names that start with lowercase letters\n    names = [name for name in sample_names if not name[0].islower()]\n    # Calculate the sum of the lengths of the remaining names\n    total_length = sum(len(name) for name in names)\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Remove names that start with a lowercase letter\n    sample_names = [name for name in sample_names if name[0].isupper()]\n    \n    # Sum the length of the remaining names\n    total_length = sum(len(name) for name in sample_names)\n    \n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        total_length += len(name)\n    return total_length\n"
    },
    {
        "number": 640,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(string):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^()]*\\)', '', string)\n"
    },
    {
        "number": 640,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(string):\n    \"\"\"\n    Removes the text inside parenthesis from a string.\n    \"\"\"\n    return re.sub(r'\\([^)]*\\)', '', string)"
    },
    {
        "number": 640,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'  # regex pattern for matching parenthesis with content\n    return re.sub(pattern, '', items)  # substitute matched pattern with empty string\n"
    },
    {
        "number": 640,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)"
    },
    {
        "number": 640,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # use regex to remove everything inside parenthesis including parenthesis\n    return re.sub(r'\\([^)]*\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Removing parenthesis and what is in between them using regex\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int((n * (n - 1)) / 2)"
    },
    {
        "number": 641,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_numbers = [n*(3*n-1)//2 for n in range(1, n+1)]\n    return nonagonal_numbers\n"
    },
    {
        "number": 641,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = n * (3*n - 1) // 2\n    return nonagonal_number\n"
    },
    {
        "number": 641,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = (n * (n + 1)) // 2\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = (n * (3 * n - 1)) // 2\n    return nonagonal_number\n"
    },
    {
        "number": 641,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function returns the nth nonagonal number.\n    \"\"\"\n    return (n * (3 * n - 1)) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (10 * n - 1) // 9\n"
    },
    {
        "number": 641,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_num = (n * (3 * n - 1)) // 2\n    return nonagonal_num\n"
    },
    {
        "number": 641,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # formula for nth nonagonal number\n    nth_nonagonal = (n * (n + 1)) // 2\n    return nth_nonagonal\n"
    },
    {
        "number": 643,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = text.split()\n    for word in words:\n        if re.search(r'z', word[1:-1]):\n            return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!\\w*z\\b)\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # use regex to find all words containing 'z'\n    matches = re.findall(r'\\b\\w*z\\w*\\b', text)\n    # filter out words that start or end with 'z'\n    middle_z_words = [word for word in matches if not (word.startswith('z') or word.endswith('z'))]\n    # return True if there is at least one middle_z_word\n    return bool(middle_z_words)\n"
    },
    {
        "number": 643,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # use regex to find all words that contain 'z' in the middle\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n\n    # check if any matches were found\n    if matches:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # find all words that contain 'z'\n    words_with_z = re.findall(r'\\b\\w*z\\w*\\b', text)\n    \n    # remove words that start or end with 'z'\n    words_with_z = [word for word in words_with_z if not word.startswith('z') and not word.endswith('z')]\n    \n    # check if there are any remaining words with 'z'\n    if words_with_z:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    pattern = r'\\b(?!\\w*z\\b)\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.findall(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return \"Invalid input! K should be less than or equal to the length of the input array.\"\n    else:\n        left = 0\n        right = k - 1\n        while left < right:\n            input[left], input[right] = input[right], input[left]\n            left += 1\n            right -= 1\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # convert the input list to a deque (double-ended queue)\n    from collections import deque\n    d = deque(input)\n    # rotate the deque k times to the left\n    d.rotate(-k)\n    # reverse the first k elements\n    d_reverse = list(reversed(d))\n    # rotate the deque back to the original position\n    d.rotate(k)\n    # replace the first k elements with the reversed ones\n    d_list = list(d)\n    d_list[:k] = d_reverse[:k]\n    return d_list\n"
    },
    {
        "number": 644,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Convert the input list to a mutable object (e.g. a list)\n    input_list = list(input)\n    # Reverse the elements in the input list up to position k\n    input_list[:k] = input_list[:k][::-1]\n    # Convert the list back to a tuple and return it\n    return tuple(input_list)\n"
    },
    {
        "number": 644,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    k = k-1\n    \n    # Swap the elements from 0 to k\n    for i in range(k+1):\n        input[i], input[k-i] = input[k-i], input[i]\n        \n    # Print the reversed array\n    print(input)\n    \n    # Return the reversed array\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k >= n:\n        return input[::-1]\n    else:\n        return input[:k][::-1] + input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    k = min(n, k)\n    left = 0\n    right = k - 1\n    \n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0 or k > len(input):\n        return \"Invalid k value\"\n    else:\n        start = 0\n        end = k\n        while start < end:\n            temp = input[start]\n            input[start] = input[end]\n            input[end] = temp\n            start += 1\n            end -= 1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    k = min(k, len(input))\n    start = 0\n    end = k - 1\n\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the entire array\n    input.reverse()\n    \n    # Reverse the remaining array from k to end\n    input[k:].reverse()\n    \n    # Reverse the first part of the array from start to k-1\n    input[:k-1].reverse()\n    \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    k = min(k, len(input))\n    left = 0\n    right = k-1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    return input[:k]\n"
    },
    {
        "number": 720,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    test_tup += (test_dict,)\n    \n    # Return the tuple\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + tuple(test_dict.items())\n"
    },
    {
        "number": 720,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 720,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n"
    },
    {
        "number": 721,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1] / n**2\n"
    },
    {
        "number": 721,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1] / (n-1)\n"
    },
    {
        "number": 721,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1] / n"
    },
    {
        "number": 721,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1] / (n * n)\n"
    },
    {
        "number": 721,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1]/(n**2)\n"
    },
    {
        "number": 721,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[-1][-1]/(n-1)\n"
    },
    {
        "number": 721,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    rows = len(cost)\n    cols = len(cost[0])\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\n    max_avg = dp[rows - 1][cols - 1] / (rows + cols - 2)\n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[N-1][N-1]/(N-1)\n"
    },
    {
        "number": 721,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "Here's the Python code:<|im_sep|> "
    },
    {
        "number": 721,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1] / (n * (n-1) / 2)\n"
    },
    {
        "number": 722,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float\n    (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float\n    (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students\n"
    },
    {
        "number": 723,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = base ** power\n    digits = [int(digit) for digit in str(result)]\n    return sum(digits)\n"
    },
    {
        "number": 724,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    temp = base ** power\n    while temp != 0:\n        result += temp % 10\n        temp //= 10\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base ** power):\n        result += int(digit)\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Calculate the base raised to the power\n    result = base ** power\n\n    # Convert the result to string and split into digits\n    digits = [int(digit) for digit in str(result)]\n\n    # Calculate the sum of digits\n    digit_sum = sum(digits)\n\n    return digit_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    base_power = base ** power\n    for digit in str(base_power):\n        result += int(digit)\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    base_power = pow(base, power)\n    for digit in str(base_power):\n        result += int(digit)\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num = base ** power\n    sum_of_digits = 0\n    for digit in str(num):\n        sum_of_digits += int(digit)\n    return sum_of_digits\n"
    },
    {
        "number": 724,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    result = base ** power\n    digits = [int(d) for d in str(result)]\n    return sum(digits)\n"
    },
    {
        "number": 724,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    num = base ** power\n    sum_of_digits = 0\n    for digit in str(num):\n        sum_of_digits += int(digit)\n    return sum_of_digits\n"
    },
    {
        "number": 724,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string to get each digit as a character.\n    base_str = str(base ** power)\n    # Initialize the sum to zero.\n    sum_of_digits = 0\n    # Iterate through each character in the base string and add it to the sum.\n    for digit in base_str:\n        sum_of_digits += int(digit)\n    return sum_of_digits\n"
    },
    {
        "number": 725,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Extracts all values between quotation marks \" \" of the given string.\n    Returns a list of the extracted values.\n    '''\n    pattern = r'\"(.*?)\"'  # regular expression pattern for matching text between quotation marks\n    matches = re.findall(pattern, text)  # find all matches of the pattern in the text\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # using regular expression to extract values between quotation marks\n    result = re.findall(r'\"(.*?)\"', text)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall(r'\"(.*?)\"', text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotation_pattern = re.compile(r'\"(.*?)\"')\n    quotations = quotation_pattern.findall(text1)\n    return quotations\n"
    },
    {
        "number": 725,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text1)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i]*test_tup[i+1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(test_tup[i]*test_tup[i+1] for i in range(len(test_tup)-1))\n"
    },
    {
        "number": 726,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1], )\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 726,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)\n"
    },
    {
        "number": 728,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Returns a list that contains the sum of the corresponding elements of the two input lists.\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n"
    },
    {
        "number": 730,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.append(key)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, _ in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, _ in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]"
    },
    {
        "number": 731,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi * r * h)\n"
    },
    {
        "number": 731,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function finds the lateral surface area of a cone given its radius r and height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * math.sqrt(r**2 + h**2)"
    },
    {
        "number": 731,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = (math.pi * r * slant_height) / h\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = (math.pi * r * slant_height)\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n"
    },
    {
        "number": 732,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[,.\\s]+', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,.\\s]+')\n    return pattern.sub(':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[,.\\s]+', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,. ]', ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,.\\s]+'\n    return re.sub(pattern, ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s\\,\\.]'\n    return re.sub(pattern, ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s\\,\\.]+'\n    replacement = ':'\n    return re.sub(pattern, replacement, text)\n"
    },
    {
        "number": 732,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[ ,.]', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[ ,.]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[ ,.]'\n    replacement = ':'\n    return re.sub(pattern, replacement, text)\n"
    },
    {
        "number": 733,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    low, high = 0, len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            # if it's the first occurrence, return\n            if mid == 0 or A[mid - 1] != x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # if x not found in array\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    index = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            index = mid\n            right = mid - 1\n            \n        elif A[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return index\n"
    },
    {
        "number": 733,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n"
    },
    {
        "number": 733,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Initialize the low and high indices of the array\n    low = 0\n    high = len(A) - 1\n\n    # Keep searching until the low index is less than or equal to the high index\n    while low <= high:\n\n        # Find the middle index of the array\n        mid = (low + high) // 2\n\n        # If the middle element is the number we're looking for, return its index\n        if A[mid] == x:\n            return mid\n\n        # If the middle element is greater than the number we're looking for, search the left half of the array\n        elif A[mid] > x:\n            high = mid - 1\n\n        # If the middle element is less than the number we're looking for, search the right half of the array\n        else:\n            low = mid + 1\n\n    # If the number is not found in the array, return -1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)-1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result\n"
    },
    {
        "number": 733,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n"
    },
    {
        "number": 733,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    \n    low, high = 0, len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            else:\n                end = mid - 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    \n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    first_occurrence = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            first_occurrence = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return first_occurrence\n"
    },
    {
        "number": 733,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    mod = 10**9 + 7\n    total = 0\n    \n    # Calculate sum of products of all sublists having odd number of elements\n    for i in range(n):\n        prod = 1\n        subtotal = 0\n        for j in range(i, n):\n            prod *= arr[j]\n            prod %= mod\n            subtotal += prod\n            subtotal %= mod\n        total += subtotal\n        total %= mod\n        \n    # Calculate sum of products of all sublists having even number of elements\n    for i in range(n):\n        prod = 1\n        subtotal = 0\n        for j in range(i):\n            prod *= arr[j]\n            prod %= mod\n            subtotal += prod\n            subtotal %= mod\n        total += subtotal\n        total %= mod\n        \n    return total\n"
    },
    {
        "number": 734,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    mod = 10**9 + 7\n    res = 0\n    \n    for i in range(1, n+1):\n        product = 1\n        for j in range(i):\n            product *= arr[j]\n            product %= mod\n        res += product\n        res %= mod\n    \n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    mod = 10**9 + 7\n    res = 0\n    \n    # Calculate sum of products of all sublists of length 1\n    for i in range(n):\n        res += arr[i]\n        res %= mod\n    \n    # Calculate sum of products of all sublists of length 2\n    for i in range(n-1):\n        res += (arr[i]*arr[i+1])%mod\n        res %= mod\n    \n    # Calculate sum of products of all sublists of length greater than 2\n    for i in range(n-2):\n        j = i+2\n        prod = arr[i]*arr[i+1]\n        while j < n:\n            prod *= arr[j]\n            prod %= mod\n            res += prod\n            res %= mod\n            j += 1\n    \n    # Return the final result\n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. \n    https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            sum += prod\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9+7\n    # Initialize prefix array with 1 as default factorial value\n    prefix = [1]*(n+1)\n    for i in range(1, n+1):\n        prefix[i] = (prefix[i-1]*arr[i-1])%mod\n    # Initialize suffix array with 1 as default factorial value\n    suffix = [1]*(n+1)\n    for i in range(n-1, -1, -1):\n        suffix[i] = (suffix[i+1]*arr[i])%mod\n    # Calculate sum of products of all possible sublists\n    ans = 0\n    for i in range(n):\n        ans += (prefix[i+1]*suffix[i+1])%mod\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. \n    https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    mod = 10**9 + 7\n    res = 0\n \n    # Calculate sum of products of all subarrays\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            res += prod\n            res %= mod\n \n    # Return the result\n    return res % mod"
    },
    {
        "number": 734,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    mod = 10**9 + 7\n    total = 0\n    for i in range(n):\n        sub_sum = 0\n        sub_prod = 1\n        for j in range(i, n):\n            sub_prod = (sub_prod * arr[j]) % mod\n            sub_sum += sub_prod\n        total += (sub_sum % mod)\n    return total % mod\n"
    },
    {
        "number": 734,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n\n    n = len(arr)\n    mod = 10**9 + 7\n    res = 0\n    \n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            res += prod\n            res %= mod\n    \n    return res\n"
    },
    {
        "number": 734,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    mod = 10**9 + 7\n    # Initialize prefix array\n    prefix = [0] * (n+1)\n    prefix[0] = 1\n    for i in range(1, n+1):\n        prefix[i] = (prefix[i-1] * arr[i-1]) % mod\n    # Initialize suffix array\n    suffix = [0] * (n+1)\n    suffix[n] = 1\n    for i in range(n-1, -1, -1):\n        suffix[i] = (suffix[i+1] * arr[i]) % mod\n    # Initialize the result\n    result = 0\n    for i in range(1, n):\n        result += ((prefix[i] * suffix[i+1]) % mod * arr[i]) % mod\n    # Return the final result\n    return result % mod\n"
    },
    {
        "number": 734,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    mod = 10**9 + 7\n    ans = 0\n    for i in range(n):\n        sub_sum = 1\n        for j in range(i, n):\n            sub_sum *= arr[j]\n            sub_sum %= mod\n            ans += sub_sum\n            ans %= mod\n\n    return ans\n"
    },
    {
        "number": 735,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def set_middle_bits(n):   \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    return (n ^ (n >> 2) << 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit.\n    '''\n    # create a mask with first and last bit as 0 and rest as 1\n    mask = (1 << n.bit_length()-1) - 1\n    # toggle the bits\n    return n ^ mask\n"
    },
    {
        "number": 735,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit.\n    '''\n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n    # Toggle the bits between the first and last bits\n    middle_bits = n ^ (((1 << n.bit_length() - 2) - 1) << 1)\n    # Combine the first, middle, and last bits\n    result = first_bit | middle_bits | last_bit\n    return result\n"
    },
    {
        "number": 735,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. \n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first and last bits\n    first_bit = (n & 1)\n    last_bit = (n & 2)\n\n    # Toggle the bits except the first and last bits\n    n ^= (n >> 1)\n\n    # Set the first and last bits\n    n = (n & ~(3)) | (first_bit) | (last_bit << 1)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n\n    # Find the length of the binary representation of the number\n    bit_len = n.bit_length()\n\n    # Toggle the middle bits by XORing them with 1\n    for i in range(1, bit_len - 1):\n        bit = (n >> i) & 1\n        if bit == 1:\n            n ^= (1 << i)\n\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit\n    '''\n    return (n ^ (n >> 1)) & (2 ** (n.bit_length()-2) - 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    return ((n ^ (n >> 1)) ^ (n << 1))\n"
    },
    {
        "number": 735,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # get the first and last bits\n    first_bit = (n >> 1) & 1\n    last_bit = n & 1\n\n    # toggle the middle bits\n    middle_bits = n ^ (n >> 2)\n\n    # combine the first, middle, and last bits\n    result = (first_bit << 1) | (middle_bits << 1) | last_bit\n\n    return result\n"
    },
    {
        "number": 735,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    return ((n ^ (n >> 1)) ^ (n << 1)) & ~3"
    },
    {
        "number": 735,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit.\n    '''\n    # Get the first and last bits\n    first_bit = (n & 1)\n    last_bit = (n & (1 << (n.bit_length() - 1))) >> (n.bit_length() - 1)\n\n    # Get the middle bits and toggle them\n    middle_bits = n >> 1\n    middle_bits = (middle_bits ^ (middle_bits << 1)) & ((1 << (n.bit_length() - 2)) - 1)\n\n    # Combine the first, middle, and last bits\n    result = (first_bit | middle_bits | last_bit)\n\n    return result"
    },
    {
        "number": 736,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx"
    },
    {
        "number": 736,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "The given problem statement and function implementation are not clear. Please provide more information. "
    },
    {
        "number": 736,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n"
    },
    {
        "number": 737,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 738,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1/2\n    else:\n        return 1/2 + 1/2 * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1/2\n    else:\n        return 1/n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Calculates the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1/2\n    else:\n        return 1/2 + 1/2 * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1/2\n    else:\n        return 1/2 * (1 - (1/2)**(n-1))"
    },
    {
        "number": 739,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    \n    # First we need to calculate the triangular number with n digits\n    # For a number to have n digits, the number must be greater than 10^(n-1) and less than 10^n\n    # So, we can use binary search to find the index of smallest triangular number with n digits\n    \n    # Initialize low and high values for binary search\n    low = 1\n    high = 10**n\n    \n    # Perform binary search to find the index of smallest triangular number with n digits\n    while low < high:\n        mid = (low + high + 1) // 2\n        \n        # Calculate the number of digits in the triangular number at index mid\n        digits = math.log10(mid*(mid+1)//2) + 1\n        \n        if digits == n:\n            return mid\n        elif digits < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    # If no triangular number is found with n digits, return -1\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    i = 0\n    triangular_num = 0\n    while True:\n        triangular_num += i\n        if len(str(triangular_num)) == n:\n            return i\n        i += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize value of m\n    m = 1\n\n    # Loop until m is not equal to n\n    while (m < n):\n        # Multiply m with 10 and subtract m from it\n        m = (m * 10) - m\n\n    # Initialize value of k\n    k = 0\n\n    # Loop until k is not equal to n\n    while (k < n):\n        # Calculate the triangular number\n        tn = (k * (k + 1)) // 2\n\n        # Check if number of digits in tn is equal to n\n        if (math.log10(tn) + 1 == n):\n            return k\n\n        # Increment k\n        k += 1\n\n    # Return -1 if no triangular number found with n digits\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    \n    # First triangular number is 1, so we start with t = 1\n    t = 1\n    \n    # Initialize index to 1\n    index = 1\n    \n    # Keep incrementing the index until we find a triangular number with n digits\n    while len(str(t)) < n:\n        index += 1\n        t += index\n        \n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Returns the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the value of index to 1\n    index = 1\n\n    # Keep increasing the value of index until we get the desired result\n    while True:\n        # Calculate the triangular number for the current value of index\n        triangular_number = (index * (index + 1)) // 2\n\n        # Check if the number of digits in triangular_number is equal to n\n        if len(str(triangular_number)) == n:\n            # If yes, return the current value of index\n            return index\n        else:\n            # If not, increment the value of index and continue\n            index += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    # initialize the search space\n    left = 1\n    right = 10**(n-1) * 9\n\n    # keep searching until we find the smallest triangular number with n digits\n    while True:\n        # calculate the middle index of the search space\n        middle = (left + right) // 2\n\n        # calculate the triangular number for the middle index\n        triangular_number = (middle*(middle+1))//2\n\n        # check if the number of digits in the triangular number is greater than n\n        if len(str(triangular_number)) > n:\n            # move to the left half of the search space\n            right = middle - 1\n        else:\n            # check if the number of digits in the triangular number is less than n\n            if len(str(triangular_number+middle)) > n:\n                # the smallest triangular number with n digits is found\n                return middle\n            else:\n                # move to the right half of the search space\n                left = middle + 1\n"
    },
    {
        "number": 739,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize a variable to store the count of digits\n    count = 0\n    \n    # Initialize a variable to store the triangular number\n    triangular_num = 0\n    \n    # Loop through each number and check its number of digits\n    for i in range(1, 1000000):\n        triangular_num += i\n        count = int(math.log10(triangular_num)) + 1\n        if count == n:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    i = 1\n    \n    while True:\n        triangular_number = (i * (i + 1)) // 2\n        \n        # Count the number of digits in the triangular number\n        num_digits = int(math.log10(triangular_number)) + 1\n        \n        if num_digits == n:\n            return i\n        \n        elif num_digits > n:\n            return -1\n        \n        i += 1\n"
    },
    {
        "number": 739,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    count = 0\n    i = 1\n    \n    while True:\n        triangular_num = i * (i + 1) // 2\n        \n        if len(str(triangular_num)) == n:\n            count += 1\n            \n        if len(str(triangular_num)) > n:\n            break\n        \n        i += 1\n    \n    return count\n"
    },
    {
        "number": 739,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    k = 1\n    while True:\n        triangular_number = sum([i for i in range(1, k+1)])\n        if len(str(triangular_number)) == n:\n            return k\n        k += 1\n"
    },
    {
        "number": 740,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n    \n    # Loop through the tuple and add adjacent elements as key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n        \n    # Return the dictionary\n    return result_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        if i + 1 < len(test_tup):\n            test_dict[test_tup[i]] = test_tup[i + 1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n"
    },
    {
        "number": 740,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict_result = {}\n    for i in range(0, len(test_tup), 2):\n        dict_result[test_tup[i]] = test_tup[i+1]\n    return dict_result\n"
    },
    {
        "number": 740,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        if i+1 < len(test_tup):\n            test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary to store key-value pairs\n    result_dict = {}\n    # Loop through the tuple and add adjacent elements as key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    # Return the final dictionary\n    return result_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        if i+1 < len(test_tup):\n            result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict\n"
    },
    {
        "number": 741,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all(c == s[0] for c in s)\n"
    },
    {
        "number": 741,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Removing all the spaces from the string\n    s = s.replace(\" \", \"\")\n    # If length of the string is 1 then all characters are same\n    if len(s) == 1:\n        return True\n    # Comparing all the characters with the first character\n    for i in range(1, len(s)):\n        if s[i] != s[0]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 or len(s) == 1:\n        return True\n    for i in range(1, len(s)):\n        if s[i] != s[0]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in the given string are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        for i in range(1, len(s)):\n            if s[i] != s[0]:\n                return False\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, otherwise False.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        for i in range(1, len(s)):\n            if s[i] != s[0]:\n                return False\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a set of characters and check its length\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Check if the length of the string is 0 or 1\n    if len(s) <= 1:\n        return True\n\n    # Check if all characters are same\n    for i in range(1, len(s)):\n        if s[i] != s[0]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a set of unique characters\n    unique_chars = set(s)\n    # If the length of the set is 1, then all characters are the same\n    return len(unique_chars) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all characters in the string are the same, otherwise False.\n    '''\n    # Convert string to set and compare length with original string\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 742,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side ** 2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(a, b, c):\n    \"\"\"\n    Calculates the area of a tetrahedron given its three edges.\n    \"\"\"\n    cross_product = (a[1]*b[2] - a[2]*b[1], a[2]*b[0] - a[0]*b[2], a[0]*b[1] - a[1]*b[0])\n    area = abs(cross_product[0]*c[0] + cross_product[1]*c[1] + cross_product[2]*c[2]) / 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    r = side/2\n    base_area = 3**0.5 * r**2\n    height = r * math.sqrt(6) / 3\n    lateral_area = 2 * math.pi * r * height / 6\n    total_area = base_area + lateral_area\n    return total_area"
    },
    {
        "number": 742,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * side**2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side**2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side ** 2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side**2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side**2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function takes the length of one side of a tetrahedron as input and returns the area of the tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side**2)\n    return area\n"
    },
    {
        "number": 743,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list[m:n], list[0:m] = list[0:n-m], list[n-m:n]\n"
    },
    {
        "number": 743,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and a number m as input and rotates the list by m positions to the right.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    lst[-m:] = lst[:m]\n    lst[:n-m] = lst[m:]\n    return lst\n"
    },
    {
        "number": 743,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(lst)\n    m = m % n\n    lst[-m:] = lst[:m]\n    lst[:-m] = lst[-m:]\n    return lst\n"
    },
    {
        "number": 743,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    \n    # rotate the list by m elements from right to left\n    list = list[-m:] + list[:-m]\n    \n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    \n    for i in range(m):\n        last_element = list[-1]\n        for j in range(n-1, 0, -1):\n            list[j] = list[j-1]\n        list[0] = last_element\n        \n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    rotated_list = list[-m:] + list[:-m]\n    return rotated_list\n"
    },
    {
        "number": 743,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list[-m:] = list[:m]\n    list[:-m] = list[m:]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(lst)\n    m = m % n\n    rotated_list = lst[-m:] + lst[:n-m]\n    return rotated_list"
    },
    {
        "number": 744,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(i is None for i in test_tup):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return None in test_tup\n"
    },
    {
        "number": 744,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    This function checks if the given tuple has any none value or not.\n    If none value is present, it returns True else False.\n    \"\"\"\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num%digit == 0 for digit in digits):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for i in range(startnum, endnum+1):\n        digits = [int(d) for d in str(i)]\n        if all(i % d == 0 for d in digits):\n            result.append(i)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num%digit==0 for digit in digits):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 746,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2 / 2) * (a * math.pi / 180)"
    },
    {
        "number": 746,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2 * a * math.pi) / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r * r * a / 360 * math.pi\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2 * (a/360) * math.pi)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2 * (a/360) * math.pi)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r*r*a)/(2*math.pi)\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * (math.radians(a) - math.sin(math.radians(a)))/2\n"
    },
    {
        "number": 746,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2 * a) / 360\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * (a/360) * math.pi"
    },
    {
        "number": 746,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2 * (a/360) * math.pi)\n"
    },
    {
        "number": 747,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store lengths of longest common suffixes of pairs of prefixes\n    L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n\n    # fill the table in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # return the length of longest common subsequence\n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function finds the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    # Get the lengths of the three sequences\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store the lengths of the longest common suffixes of pairs of subsequences\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Following steps are to print the longest common subsequence\n\n    index = L[m][n][o]\n\n    # Create a character array to store the longest common subsequence string\n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n\n    # Start from the right-most-bottom-most corner and one by one store characters in lcs[]\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        # If the current character in all sequences is same, then current character is part of LCS\n        if (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        # If not same, then find the maximum of three and go in the direction of greater value\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            if L[i][j][k] > L[i][j-1][k]:\n                k -= 1\n            else:\n                j -= 1\n        elif L[i][j-1][k] > L[i][j][k-1]:\n            if L[i][j][k] > L[i][j-1][k]:\n                k -= 1\n            else:\n                i -= 1\n        else:\n            i -= 1\n\n    # Print the longest common subsequence\n    return \"\".join(lcs[1:index+1])"
    },
    {
        "number": 747,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common suffixes of substrings\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] and Z[0..k-1]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Following code is used to print LCS\n    index = L[m][n][o]\n\n    # Create a character array to store LCS string\n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n\n    # Start from the right-most-bottom-most corner and one by one store characters in lcs[]\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n\n        # If current character in all strings is same, then current character is part of LCS\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n\n        # If not same, then find the maximum of three and go in the direction of greater value\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Print the LCS\n    return \"\".join(lcs[1:])"
    },
    {
        "number": 747,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lcs[i][j][k] = 1 + lcs[i-1][j-1][k-1]\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n\n    return lcs[m][n][o]\n"
    },
    {
        "number": 747,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    # function to find the longest common subsequence for the given three string sequence\n    \n    # get the lengths of all three strings\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # create a 3D array to store the length of LCS at each point\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # build the 3D array to find the LCS length at each point\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    # create a string to store the LCS\n    index = L[m][n][o]\n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n    \n    # traverse the 3D array backwards to find the LCS\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            if L[i][j][k] == L[i-1][j][k]:\n                i -= 1\n            elif L[i][j][k] == L[i][j-1][k]:\n                j -= 1\n            elif L[i][j][k] == L[i][j][k-1]:\n                k -= 1\n        elif L[i][j-1][k] > L[i][j][k]:\n            if L[i][j][k] == L[i-1][j][k]:\n                i -= 1\n            elif L[i][j][k] == L[i][j-1][k]:\n                j -= 1\n            elif L[i][j][k] == L[i][j][k-1]:\n                k -= 1\n        else:\n            if L[i][j][k] == L[i-1][j][k]:\n                i -= 1\n            elif L[i][j][k] == L[i][j-1][k]:\n                j -= 1\n            elif L[i][j][k] == L[i][j][k-1]:\n                k -= 1\n    \n    return \"\".join(lcs)\n"
    },
    {
        "number": 747,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store lengths of longest common suffixes of substrings\n    L = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    # fill the table in bottom-up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # L[m][n][o] contains length of LCS of X[0..m-1], Y[0..n-1] and Z[0..o-1]\n    return L[m][n][o]\n"
    },
    {
        "number": 748,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=\\b[A-Z])', r' ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z])', r' \\1', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])([A-Z])', r' \\1', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # use regex to find all the words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # join the words with spaces and return the result\n    return ' '.join(words)\n"
    },
    {
        "number": 748,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regex to find all words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Put spaces between the words and join them back into a string\n    new_str = ' '.join(words)\n    return new_str\n"
    },
    {
        "number": 748,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z])', r' \\1', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)\n"
    },
    {
        "number": 749,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)\n"
    },
    {
        "number": 749,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)\n"
    },
    {
        "number": 749,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Create a list to store the sorted integers\n    nums = []\n    # Loop through the list of strings\n    for num in nums_str:\n        # Append the integer value of the string to the list of integers\n        nums.append(int(num))\n    # Sort the list of integers\n    nums.sort()\n    # Create a list to store the sorted strings\n    nums_str_sorted = []\n    # Loop through the sorted list of integers\n    for num in nums:\n        # Append the string value of the integer to the list of strings\n        nums_str_sorted.append(str(num))\n    # Return the sorted list of strings\n    return nums_str_sorted\n"
    },
    {
        "number": 749,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)\n"
    },
    {
        "number": 749,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)\n"
    },
    {
        "number": 749,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)"
    },
    {
        "number": 749,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_int = [int(num_str) for num_str in nums_str]\n    nums_int.sort()\n    nums_str = [str(num) for num in nums_int]\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str = [int(num) for num in nums_str]\n    nums_str.sort()\n    return [str(num) for num in nums_str]\n"
    },
    {
        "number": 749,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_int = [int(num) for num in nums_str] # convert all strings to integers\n    nums_int.sort() # sort the integers\n    nums_str = [str(num) for num in nums_int] # convert all integers back to strings\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=int)\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += list(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += list(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 751,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    \"\"\"\n    n = len(arr)\n\n    # Check if the given array represents min heap\n    for i in range(n):\n        if i == 0:\n            continue\n        if arr[i] < arr[int((i-1)/2)]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    if i >= n:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] < arr[i]:\n        return False\n\n    if right < n and arr[right] < arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n"
    },
    {
        "number": 751,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n\n    # Check if the given array represents min heap\n    if i >= n:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    # Check if the left child is smaller than parent\n    if left < n and arr[left] < arr[i]:\n        return False\n\n    # Check if the right child is smaller than parent\n    if right < n and arr[right] < arr[i]:\n        return False\n\n    # Recursively check for the left and right subtrees\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n"
    },
    {
        "number": 751,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n\n    # Check if the given array represents a binary heap\n    for i in range(n):\n        if i == 0:\n            continue\n        elif i % 2 == 0:\n            parent = (i - 2) // 2\n        else:\n            parent = (i - 1) // 2\n\n        if arr[parent] > arr[i]:\n            return False\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    \n    # Check if the parent node is smaller than the child nodes\n    if (i * 2) + 1 < n and arr[i] > arr[(i * 2) + 1]:\n        return False\n    if (i * 2) + 2 < n and arr[i] > arr[(i * 2) + 2]:\n        return False\n\n    # Recursively check the child nodes\n    if (i * 2) + 1 < n and not check_min_heap_helper(arr, (i * 2) + 1):\n        return False\n    if (i * 2) + 2 < n and not check_min_heap_helper(arr, (i * 2) + 2):\n        return False\n\n    # If all nodes are in the correct order, return True\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    left = 2*i + 1\n    right = 2*i + 2\n\n    if left < n and arr[left] < arr[i]:\n        return False\n\n    if right < n and arr[right] < arr[i]:\n        return False\n\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Call the helper function for all the elements of the array.\n    '''\n    for i in range(len(arr)):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n"
    },
    {
        "number": 751,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    left_child = 2*i+1\n    right_child = 2*i+2\n    if left_child < n and arr[left_child] < arr[i]:\n        return False\n    if right_child < n and arr[right_child] < arr[i]:\n        return False\n    return True\n\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n\n    if left_child < n and arr[left_child] < arr[i]:\n        return False\n\n    if right_child < n and arr[right_child] < arr[i]:\n        return False\n\n    return True\n\n\ndef check_min_heap(arr):\n    n = len(arr)\n    i = 0\n    while i < n:\n        if not check_min_heap_helper(arr, i):\n            return False\n        i += 1\n\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 3 * jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 3 * jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2) - jacobsthal_num(n-3)\n"
    },
    {
        "number": 752,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n"
    },
    {
        "number": 753,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list based on the second element of the tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Get the minimum k records\n    min_k_records = sorted_list[:K]\n\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    \n    # Sort the list in ascending order based on the second element of each tuple\n    test_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Return the first k records from the sorted list\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the test list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Get the first k records\n    min_k_records = test_list[:K]\n\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # sorting the list based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # selecting the first k records from the sorted list\n    min_k_records = test_list[:K]\n\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    if K >= len(test_list):\n        return test_list\n\n    test_list = sorted(test_list, key=lambda x: x[1])\n\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    # sorting the list in ascending order\n    test_list.sort()\n    # finding the minimum k records\n    min_k_records = test_list[:K]\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sorting the list in ascending order based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Extracting the first k records from the sorted list\n    min_k_records = test_list[:K]\n\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list in ascending order based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Return the first K elements of the sorted list\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # sort the list based on second element of tuple i.e. marks\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # get the first k records from sorted list\n    min_k_list = sorted_list[:K]\n\n    return min_k_list\n"
    },
    {
        "number": 754,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(l1[i])\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists\n    under the same index. Write a function to find common elements from three lists. \n    The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    result = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n    return common_list\n"
    },
    {
        "number": 754,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] == l1[i] and l3[i] == l1[i]:\n            common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n"
    },
    {
        "number": 754,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list\n"
    },
    {
        "number": 755,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    first_min = second_min = float('inf')\n    for num in numbers:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif num < second_min and num != first_min:\n            second_min = num\n            \n    return second_min\n"
    },
    {
        "number": 755,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    first_min = second_min = float('inf')\n    for num in numbers:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif first_min < num < second_min:\n            second_min = num\n    \n    return second_min if second_min != float('inf') else None\n"
    },
    {
        "number": 755,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # sort the list in ascending order\n    numbers.sort()\n    # return the second element of the sorted list\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Create a set of unique numbers\n    unique_numbers = set(numbers)\n    # Remove the smallest number from the set\n    unique_numbers.remove(min(unique_numbers))\n    # Return the new smallest number (second smallest overall)\n    return min(unique_numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first_min = float('inf')\n    second_min = float('inf')\n\n    for num in numbers:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif num < second_min and num != first_min:\n            second_min = num\n\n    return second_min\n"
    },
    {
        "number": 755,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    first, second = float('inf'), float('inf')\n    for n in numbers:\n        if n < first:\n            first, second = n, first\n        elif n < second and n != first:\n            second = n\n    return second\n"
    },
    {
        "number": 755,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    first_min = second_min = float('inf')\n    for num in numbers:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif first_min < num < second_min:\n            second_min = num\n    return second_min\n"
    },
    {
        "number": 755,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    first_min = second_min = float('inf')\n    for n in numbers:\n        if n < first_min:\n            second_min = first_min\n            first_min = n\n        elif n < second_min and n != first_min:\n            second_min = n\n    return second_min\n"
    },
    {
        "number": 755,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers = sorted(set(numbers))\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Make a copy of the list to avoid modifying the original list\n    numbers_copy = numbers.copy()\n    # Sort the copy in ascending order\n    numbers_copy.sort()\n    # Return the second element of the sorted list\n    return numbers_copy[1]\n"
    },
    {
        "number": 756,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a+b*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 756,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 756,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's.\n    '''\n    pattern = re.compile(r'a[b]?')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 756,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 756,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 756,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[^b]*b+' # regex pattern to match a string that has an 'a' followed by one or more 'b's\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 756,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 756,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n\n    pattern = r'a\\w*b\\w*'\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 757,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    count = 0\n    n = len(test_list)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    test_list = sorted(test_list, key=lambda x: x[::-1])\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] > test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in result:\n            result[sublist_tuple] += 1\n        else:\n            result[sublist_tuple] = 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        else:\n            count_dict[sublist_tuple] += 1\n    return count_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        if tuple(sublist) not in count:\n            count[tuple(sublist)] = 1\n        else:\n            count[tuple(sublist)] += 1\n    return count\n"
    },
    {
        "number": 758,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for sublist in list1:\n        tuple1 = tuple(sublist)\n        if tuple1 in dict1:\n            dict1[tuple1] += 1\n        else:\n            dict1[tuple1] = 1\n    return dict1\n"
    },
    {
        "number": 758,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        tup_sublist = tuple(sublist)\n        if tup_sublist in count_dict:\n            count_dict[tup_sublist] += 1\n        else:\n            count_dict[tup_sublist] = 1\n    return count_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in sublist_dict:\n            sublist_dict[tuple(sublist)] = 1\n        else:\n            sublist_dict[tuple(sublist)] += 1\n    return sublist_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Count lists within a list.\n    \"\"\"\n    counts = {}\n    for sublist in list1:\n        # Convert sublist to tuple to use it as a dictionary key\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            # If tuple is already in the dictionary, increment its count\n            counts[sublist_tuple] += 1\n        else:\n            # Otherwise, add the tuple to the dictionary with a count of 1\n            counts[sublist_tuple] = 1\n    return counts\n"
    },
    {
        "number": 758,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        sublists += [list1[i:j] for j in range(i+1, len(list1)+1)]\n\n    freq = {}\n    for sublist in sublists:\n        tup = tuple(sublist)\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n\n    return freq\n"
    },
    {
        "number": 758,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for sublist in list1:\n        if tuple(sublist) in counts:\n            counts[tuple(sublist)] += 1\n        else:\n            counts[tuple(sublist)] = 1\n    return counts\n"
    },
    {
        "number": 759,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if '.' in num:\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) == 2:\n            return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            decimal_part = num.split('.')[1]\n            if len(decimal_part) == 2:\n                return True\n            else:\n                return False\n        else:\n            return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        if len(num.split('.')[1]) == 2:\n            return True\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        if round(float(num), 2) == float(num):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 759,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if isinstance(num, str):\n        # Check if the string starts with a negative sign\n        if num.startswith('-'):\n            num = num[1:]\n        # Split the string into two parts: integer and decimal\n        integer, decimal = num.split('.')\n        # Check if the integer part is empty or contains non-numeric characters\n        if not integer or not integer.isdigit():\n            return False\n        # Check if the decimal part has exactly 2 digits\n        if len(decimal) != 2 or not decimal.isdigit():\n            return False\n        # Check if the decimal part is greater than or equal to 0 and less than 100\n        if not 0 <= int(decimal) < 100:\n            return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Checks whether a given string is a decimal number with a precision of 2.\n\n    Args:\n        num (str): The string to check.\n\n    Returns:\n        bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        if \".\" in num:\n            decimal_part = num.split(\".\")[1]\n            if len(decimal_part) == 2:\n                return True\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Check if the input is a valid decimal number with precision 2\n    try:\n        float_num = float(num)\n        if round(float_num, 2) == float_num:\n            return True\n    except ValueError:\n        pass\n    \n    # If the input is not a valid decimal number with precision 2, return False\n    return False\n"
    },
    {
        "number": 759,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            decimal_point = num.index('.')\n            if len(num) - decimal_point > 3:\n                return False\n            else:\n                return True\n        else:\n            return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if type(num) != str:\n        return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if len(num.split('.')) != 2:\n        return False\n    if len(num.split('.')[1]) != 2:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Returns True if the given string is a decimal number with a precision of 2, else False.\n    \"\"\"\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        if '.' in num:\n            parts = num.split('.')\n            if len(parts[1]) == 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n"
    },
    {
        "number": 760,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        print(\"True\")\n    else:\n        if len(set(arr)) == 1:\n            print(\"True\")\n        else:\n            print(\"False\")\n"
    },
    {
        "number": 760,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n"
    },
    {
        "number": 760,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Create a list of months containing 30 days\n    months_30_days = [4, 6, 9, 11]\n    \n    # Check if the given month number is in the list of months containing 30 days\n    if monthnum3 in months_30_days:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    elif monthnum3 == 2:\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 763,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference as infinite\n    min_diff = float('inf')\n\n    # Traverse the sorted array and compare adjacent elements\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    # Return the minimum difference\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference as infinite\n    min_diff = float('inf')\n\n    # Traverse the sorted array and update the minimum difference\n    for i in range(n - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort() # sort the array in ascending order\n    min_diff = float('inf') # initialize the minimum difference to infinity\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n    # Iterate over the sorted array from the second element onwards\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i - 1]\n        # If the difference is less than the current minimum difference, update the minimum difference variable\n        if diff < min_diff:\n            min_diff = diff\n    # Return the minimum difference\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the given array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n\n    # Traverse the sorted array and calculate the difference between adjacent elements\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Finds the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()  # Sort the array in ascending order\n    min_diff = float('inf')  # Initialize the minimum difference to infinity\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]  # Calculate the difference between two consecutive elements\n        if diff < min_diff:\n            min_diff = diff  # Update the minimum difference if necessary\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize minimum difference variable\n    min_diff = float('inf')\n    \n    # Traverse the sorted array and compute the difference between adjacent elements\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    # Return the minimum difference\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def number_ctr(string):\n    '''\n    Counts the number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def number_ctr(string):\n    '''\n    This function takes a string as an argument and returns the count of digits present in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in str:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 765,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(i)\n    return sum\n"
    },
    {
        "number": 765,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n    \"\"\"\n    \n    # Initialize the result as 0\n    result = 0\n    \n    # Check if n is greater than 0\n    if n > 0:\n        \n        # Calculate the value of the nth polite number\n        result = (math.pow(2, n) - 1) + (math.pow(2, n) - 1) / 2\n        \n        # Return the result\n        return result\n    else:\n        \n        # Return an error message if n is less than or equal to 0\n        return \"Invalid input. n should be greater than 0.\"\n"
    },
    {
        "number": 765,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    num = 1\n    count = 0\n    \n    # Loop until nth polite number is found\n    while count < n:\n        # Get the prime factors of the number\n        factors = []\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                factors.append(i)\n                factors.append(num // i)\n        \n        # Remove duplicates and sort the prime factors\n        factors = sorted(set(factors))\n        \n        # Check if the prime factors of the number are consecutive integers starting from 2\n        if factors == list(range(2, len(factors)+2)):\n            count += 1\n        \n        # Generate the next polite number\n        num += 1\n        \n    # Return the nth polite number\n    return num-1\n"
    },
    {
        "number": 765,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    # Initialize a variable to store the polite number\n    polite_number = 0\n    # Calculate the nth polite number using the formula given in the problem statement\n    for i in range(1, n+1):\n        polite_number += math.comb(n-1, i-1) * math.pow(10, i-1)\n    # Return the nth polite number\n    return polite_number\n"
    },
    {
        "number": 765,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    polite_number = 0\n    \n    for i in range(1, n+1):\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                polite_number += i\n                break\n        else:\n            polite_number += i\n            \n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 5\n    \n    # Initialize variables\n    count = 1\n    num = 5\n    \n    # Loop until nth polite number is found\n    while count < n:\n        # Get the factors of the number\n        factors = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                factors.append(i)\n        \n        # Find the number of distinct prime factors\n        prime_factors = set(factors)\n        count_prime = 0\n        for factor in prime_factors:\n            if num % factor == 0:\n                count_prime += 1\n        \n        # Check if the number is polite\n        if count_prime == len(prime_factors):\n            count += 1\n            \n        # Generate the next number\n        num += 1\n        \n    # Return the nth polite number\n    return num-1\n"
    },
    {
        "number": 765,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    i = 2\n    \n    while count < n:\n        # Calculate the prime factors of i\n        factors = []\n        for j in range(2, int(math.sqrt(i)) + 1):\n            if i % j == 0:\n                factors.append(j)\n                factors.append(i // j)\n        \n        # Check if i is polite\n        if len(set(factors)) == len(factors):\n            count += 1\n            \n            if count == n:\n                return i\n        \n        # Increment i\n        i += 1\n"
    },
    {
        "number": 765,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    for i in range(n-1):\n        num = num * 2 + 1\n    return num\n"
    },
    {
        "number": 765,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number.\n    '''\n    num = 0\n    count = 0\n    while count < n:\n        sum = 0\n        temp = num\n        while temp > 0:\n            sum += math.factorial(temp % 10)\n            temp //= 10\n        if num == sum:\n            count += 1\n        num += 1\n    return num - 1\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))\n"
    },
    {
        "number": 765,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 8\n    else:\n        # Initialize variables\n        count = 0\n        num = 0\n        i = 0\n        \n        # Loop to find the nth polite number\n        while count < n:\n            # Check if the number is polite\n            if is_prime(num) and is_prime(math.floor(num/2)):\n                count += 1\n            \n            # Generate the next number\n            i += 1\n            num = 2*i*i - 2*i + 1\n        \n        # Return the nth polite number\n        return num\n\ndef is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 766,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append([l1[i], l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pair = [l1[i], l1[i+1]]\n        pairs.append(pair)\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pair = (l1[i], l1[i+1])\n        pairs.append(pair)\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pair = (l1[i], l1[i+1])\n        pairs.append(pair)\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    hash_map = {}\n    for num in arr:\n        if sum - num in hash_map:\n            count += hash_map[sum - num]\n        if num in hash_map:\n            hash_map[num] += 1\n        else:\n            hash_map[num] = 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Count the number of pairs whose sum is equal to 'sum'.\n    The function gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    num_dict = {}\n    \n    for num in arr:\n        if sum - num in num_dict:\n            count += num_dict[sum - num]\n        \n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n            \n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    num_dict = {}\n    for num in arr:\n        diff = sum - num\n        if diff in num_dict:\n            count += num_dict[diff]\n        if num not in num_dict:\n            num_dict[num] = 1\n        else:\n            num_dict[num] += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n    The funtion gets as input a list of numbers and the sum.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list\n"
    },
    {
        "number": 769,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list\n"
    },
    {
        "number": 769,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = list(set(li1) - set(li2))\n    return diff_list\n"
    },
    {
        "number": 769,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function returns a list of elements that are in the first list but not in the second list.\n    \"\"\"\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 770,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = 1  # starting with first odd number\n    sum = 0\n    \n    for i in range(n):\n        sum += odd_num ** 4  # adding the fourth power of each odd number to the sum\n        odd_num += 2  # incrementing the odd number by 2 to get the next odd number\n    \n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    count = 0\n    while count < n:\n        if i % 2 != 0:\n            sum += i ** 4\n            count += 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function calculates the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    result = 0\n    for i in range(1, 2*n, 2):\n        result += i**4\n    return result\n"
    },
    {
        "number": 770,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Initialize the counter to 1\n    i = 1\n    \n    # Iterate through the odd natural numbers till n\n    while i <= (2 * n):\n        \n        # Calculate the fourth power of the current odd number\n        fourth_power = i ** 4\n        \n        # Add the fourth power to the sum variable\n        sum += fourth_power\n        \n        # Increment the counter by 2 to get the next odd number\n        i += 2\n        \n    # Return the final sum\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = 1\n    sum = 0\n    for i in range(n):\n        sum += odd_num ** 4\n        odd_num += 2\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 1\n    while count < n:\n        sum += num ** 4\n        num += 2\n        count += 1\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the fourth power of the current odd number to the sum\n        sum += i**4\n    \n    # Return the final sum\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    count = 0\n    while count < n:\n        if i % 2 != 0:\n            sum += i**4\n            count += 1\n        i += 1\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    \n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n                \n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    \n    # Traverse the expression for matching parentheses\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            # Add opening parentheses to the stack\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            # If there are no opening parentheses in the stack, the expression is not balanced\n            if len(stack) == 0:\n                return False\n            \n            # Check if the current closing parenthesis matches the last opening parenthesis in the stack\n            last_paren = stack.pop()\n            if char == \")\" and last_paren != \"(\":\n                return False\n            elif char == \"}\" and last_paren != \"{\":\n                return False\n            elif char == \"]\" and last_paren != \"[\":\n                return False\n    \n    # If there are any opening parentheses left in the stack, the expression is not balanced\n    if len(stack) != 0:\n        return False\n    \n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ('{', '[', '('):\n            stack.append(char)\n        elif char in ('}', ']', ')'):\n            if not stack:\n                return False\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        else:\n            continue\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    '''\n\n    stack = deque()\n    brackets = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for char in exp:\n        if char in brackets.keys():\n            stack.append(char)\n        elif char in brackets.values():\n            if len(stack) == 0:\n                return False\n            elif brackets[stack[-1]] != char:\n                return False\n            else:\n                stack.pop()\n\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    \n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    \n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char == ')' and last_char != '(':\n                return False\n            elif char == '}' and last_char != '{':\n                return False\n            elif char == ']' and last_char != '[':\n                return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    \n    # Traversing the Expression\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            \n            opening_bracket = stack.pop()\n            \n            if char == \")\" and opening_bracket != \"(\":\n                return False\n            \n            elif char == \"}\" and opening_bracket != \"{\":\n                return False\n            \n            elif char == \"]\" and opening_bracket != \"[\":\n                return False\n            \n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 772,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into a list of words\n    filtered_words = [word for word in words if len(word) != K] # filter out words with length K\n    filtered_str = ' '.join(filtered_words) # join the filtered words into a string\n    return filtered_str\n"
    },
    {
        "number": 772,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word) != K]\n    return ' '.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # filter out words with length K\n    filtered_words = filter(lambda w: len(w) != K, words)\n    # join the filtered words into a string\n    filtered_str = ' '.join(filtered_words)\n    return filtered_str\n"
    },
    {
        "number": 772,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word) != K]\n    return ' '.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return \" \".join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word) != K]\n    return ' '.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word) != K]\n    return ' '.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = [word for word in words if len(word) != K]\n    return \" \".join(result)\n"
    },
    {
        "number": 773,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = list(re.finditer(pattern, text))\n    if not matches:\n        return None\n    result = []\n    for match in matches:\n        result.append((match.start(), match.group()))\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # create a list of tuples with the position and length of each match\n    positions = [(m.start(), len(m.group())) for m in matches]\n    # return the list of positions or None if there are no matches\n    return positions if positions else None\n"
    },
    {
        "number": 773,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    \n    if not matches:\n        return None\n    \n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    \n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # initialize an empty list to store the positions of the matches\n    positions = []\n    \n    # iterate over the matches and append their positions to the list\n    for match in matches:\n        positions.append((match.start(), match.end()))\n    \n    # if the list is empty, return None, otherwise return the list of positions\n    return positions if positions else None "
    },
    {
        "number": 773,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result if result else None\n"
    },
    {
        "number": 773,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Initialize an empty list to store the positions and occurrences of the pattern in the text\n    positions = []\n    \n    # Find all occurrences of the pattern in the text\n    pattern_occurrences = re.finditer(pattern, text)\n    \n    # If no pattern is found, return None\n    if not pattern_occurrences:\n        return None\n    \n    # Loop through all occurrences of the pattern and append the position and occurrence to the positions list\n    for i, occurrence in enumerate(pattern_occurrences):\n        positions.append((occurrence.start(), occurrence.group()))\n        \n    # Return the list of positions and occurrences of the pattern in the text\n    return positions\n"
    },
    {
        "number": 773,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    # use regex to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # if there are no matches, return None\n    if not matches:\n        return None\n    \n    # create a list to store the positions and occurrences of the pattern\n    results = []\n    \n    # loop through each match and find its position and occurrence\n    for match in matches:\n        position = text.find(match)\n        occurrence = matches.count(match)\n        results.append((match, position, occurrence))\n    \n    # return the results list\n    return results\n"
    },
    {
        "number": 773,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if result:\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end()))\n    if positions:\n        return len(positions), positions\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # initialize an empty list to store the positions and occurrences of the pattern\n    positions = []\n    # loop through the matches and append the start position and the matched string to the positions list\n    for match in matches:\n        positions.append((match.start(), match.group()))\n    # return the positions list if it is not empty, otherwise return None\n    if positions:\n        return positions\n    else:\n        return None\n"
    },
    {
        "number": 775,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1:\n            if test_str[i].lower() in vowels and test_str[i-1].lower() in vowels and test_str[i+1].lower() in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n        if i < len(test_str)-1 and test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i != 0 and i != len(test_str)-1:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(test_str)):\n        if (i != 0 and test_str[i].lower() in vowels and test_str[i-1].lower() in vowels) or (i != len(test_str)-1 and test_str[i].lower() in vowels and test_str[i+1].lower() in vowels):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n        if i < len(test_str) - 1 and test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(test_str)):\n        if (i > 0 and test_str[i-1] in vowels and test_str[i] in vowels) or (i < len(test_str)-1 and test_str[i] in vowels and test_str[i+1] in vowels):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiou')\n    count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = set('aeiou')\n    count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if (i > 0 and test_str[i-1].lower() in vowels) and (i < len(test_str)-1 and test_str[i+1].lower() in vowels):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n        elif i < len(test_str)-1 and test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_elements = set(arr)\n    sum_of_non_repeated_elements = sum(non_repeated_elements)\n    return sum_of_non_repeated_elements\n"
    },
    {
        "number": 777,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set from the original list to remove duplicates\n    unique_set = set(arr)\n    # Initialize the sum of non-repeated elements to zero\n    sum_non_repeated = 0\n    # Iterate over the unique elements in the set\n    for element in unique_set:\n        # If the count of the element is one, it is a non-repeated element\n        if arr.count(element) == 1:\n            # Add its value to the sum of non-repeated elements\n            sum_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_non_repeated\n"
    },
    {
        "number": 777,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    return sum(unique_elements)\n"
    },
    {
        "number": 777,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    # create a set of unique elements in the list\n    unique_set = set(arr)\n    # create a new list of unique elements\n    unique_list = list(unique_set)\n    # create a set of repeated elements in the list\n    repeated_set = set([x for x in arr if arr.count(x) > 1])\n    # create a new list of non-repeated elements\n    non_repeated_list = [x for x in unique_list if x not in repeated_set]\n    # calculate the sum of non-repeated elements\n    non_repeated_sum = sum(non_repeated_list)\n    # return the sum\n    return non_repeated_sum\n"
    },
    {
        "number": 777,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    # Create an empty list to store non-repeated elements\n    non_repeat_list = []\n    # Iterate through the list and add each element to the unique set\n    for element in arr:\n        unique_set.add(element)\n    # Iterate through the unique set and add non-repeated elements to the non_repeat_list\n    for element in unique_set:\n        if arr.count(element) == 1:\n            non_repeat_list.append(element)\n    # Return the sum of the non-repeated elements in the non_repeat_list\n    return sum(non_repeat_list)\n"
    },
    {
        "number": 777,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_of_unique_elements = sum(unique_elements)\n    return sum_of_unique_elements\n"
    },
    {
        "number": 777,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Initialize a sum variable\n    sum_unique = 0\n    # Iterate over the original list and add non-repeated elements to the sum\n    for element in arr:\n        if element in unique_set:\n            sum_unique += element\n            unique_set.remove(element)\n    return sum_unique\n"
    },
    {
        "number": 777,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated = []\n    for i in arr:\n        if arr.count(i) == 1:\n            non_repeated.append(i)\n    return sum(non_repeated)\n"
    },
    {
        "number": 777,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 778,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n"
    },
    {
        "number": 779,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublists.append(tuple(list1[i:j]))\n    sublist_count = {}\n    for sublist in sublists:\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count\n"
    },
    {
        "number": 779,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        else:\n            count_dict[sublist_tuple] = 1\n    return count_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the unique sublists and their counts\n    unique_sublists_dict = {}\n    \n    # Loop through each sublist in the given list1\n    for sublist in list1:\n        # Convert the sublist to a tuple and store it in the dictionary\n        # If the tuple already exists in the dictionary, increment its count by 1\n        # If the tuple does not exist in the dictionary, add it with a count of 1\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in unique_sublists_dict:\n            unique_sublists_dict[tuple_sublist] += 1\n        else:\n            unique_sublists_dict[tuple_sublist] = 1\n    \n    return unique_sublists_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        t = tuple(sublist)\n        if t in counts:\n            counts[t] += 1\n        else:\n            counts[t] = 1\n    return counts\n"
    },
    {
        "number": 779,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        # Convert list to tuple\n        sublist_tuple = tuple(sublist)\n        # Increment count of tuple\n        count[sublist_tuple] = count.get(sublist_tuple, 0) + 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        if tuple(sublist) not in result:\n            result[tuple(sublist)] = 1\n        else:\n            result[tuple(sublist)] += 1\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in result_dict:\n            result_dict[tuple(sublist)] = 1\n        else:\n            result_dict[tuple(sublist)] += 1\n    return result_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        if tuple(sublist) not in result:\n            result[tuple(sublist)] = 1\n        else:\n            result[tuple(sublist)] += 1\n    return result\n"
    },
    {
        "number": 779,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dict1 = {}\n    for i in range(len(list1)):\n        tpl = tuple(list1[i])\n        if tpl not in dict1:\n            dict1[tpl] = 1\n        else:\n            dict1[tpl] += 1\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of each unique sublist\n    sublist_count = {}\n    \n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # If the tuple is already in the dictionary, increment its count by 1\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    \n    # Return the dictionary of unique sublists and their counts\n    return sublist_count\n"
    },
    {
        "number": 780,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            results.append(sum(combo))\n    return results"
    },
    {
        "number": 780,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    # Get all possible combinations of tuples from the given list\n    combos = list(combinations(test_list, 2))\n    \n    # Create a list to store the combinations of sums\n    sum_combos = []\n    \n    # Iterate through each tuple combination\n    for combo in combos:\n        # Calculate the sum of the tuple values\n        sum = sum(combo)\n        \n        # Check if the sum is a multiple of 5\n        if sum % 5 == 0:\n            # If it is, add the combination to the list of sum combinations\n            sum_combos.append(combo)\n    \n    # Return the list of sum combinations\n    return sum_combos\n"
    },
    {
        "number": 780,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            result.append(sum(comb))\n    return result\n\ntest_list = [(1, 2), (3, 4), (5, 6)]\nprint(find_combinations(test_list))\n"
    },
    {
        "number": 780,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    results = []\n    \n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            results.append(sum(combo))\n    \n    return list(set(results))"
    },
    {
        "number": 780,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Get all possible combinations of tuples in the list\n    all_combinations = []\n    for i in range(1, len(test_list)+1):\n        all_combinations.extend(list(combinations(test_list, i)))\n    \n    # Calculate the sum of each combination and store in a dictionary\n    sum_dict = {}\n    for combo in all_combinations:\n        sum_dict[combo] = sum(combo)\n    \n    # Return the dictionary\n    return sum_dict\n"
    },
    {
        "number": 780,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for j in combinations(test_list, i):\n            result.append(sum(j))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            result.append(sum(combo))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in combinations(test_list, i):\n            if sum(j) == 10:\n                result.append(j)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 10:\n                result.append(comb)\n    return result\n\ntest_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\nprint(find_combinations(test_list))"
    },
    {
        "number": 780,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # find all possible combinations of tuples in the list\n    all_combinations = []\n    for i in range(1, len(test_list)+1):\n        all_combinations += list(combinations(test_list, i))\n\n    # find the sum of each tuple combination and store in a list\n    sums = []\n    for c in all_combinations:\n        sums.append(sum(c))\n\n    # find the unique combinations of sums\n    unique_sums = set(sums)\n\n    # print the unique combinations of sums\n    for s in unique_sums:\n        print(s)\n"
    },
    {
        "number": 781,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0:\n    print(\"The count of divisors is even\")\nelse:\n    print(\"The count of divisors is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function counts the number of divisors of a given number n\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n"
    },
    {
        "number": 782,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 != 0:\n                total_sum += sum(arr[i:j+1])\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            res += sum(arr[i:j+1])\n    return res\n"
    },
    {
        "number": 782,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n, 2):\n            sub_arr = arr[i:j+1]\n            if len(sub_arr) % 2 != 0:\n                result += sum(sub_arr)\n\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum_odd_length = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sum_odd_length += sum(arr[i:j+1])\n    return sum_odd_length\n"
    },
    {
        "number": 782,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sub_arr = arr[i:j+1]\n            sum += sum(sub_arr)\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sub_arr = arr[i:j+1]\n            total_sum += sum(sub_arr)\n    return total_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        for j in range(i, n, 2):\n            subarray = arr[i:j+1]\n            subarray_sum = sum(subarray)\n            total_sum += subarray_sum\n            \n    return total_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            subarray = arr[i:j+1]\n            sum += sum(subarray)\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j-i+1) % 2 != 0:\n                sum += sum(arr[i:j+1])\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sub_arr = arr[i:j+1]\n            if len(sub_arr) % 2 != 0:\n                sum += sum(sub_arr)\n    return sum\n"
    },
    {
        "number": 783,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n    \n    saturation = round(saturation * 100)\n\n    value = round(cmax * 100)\n\n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    saturation = round(saturation * 100)\n\n    value = round(cmax * 100)\n\n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = round(delta / cmax * 100)\n\n    value = round(cmax * 100)\n\n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert an RGB color to HSV.\n\n    Parameters:\n    r (float): Red component (0.0-1.0)\n    g (float): Green component (0.0-1.0)\n    b (float): Blue component (0.0-1.0)\n\n    Returns:\n    float: Hue component (0.0-1.0)\n    float: Saturation component (0.0-1.0)\n    float: Value component (0.0-1.0)\n    '''\n\n    # Convert RGB to CMYK\n    k = 1 - max(r, g, b)\n    c = (1 - r - k) / (1 - k)\n    m = (1 - g - k) / (1 - k)\n    y = (1 - b - k) / (1 - k)\n\n    # Convert CMYK to HSV\n    h = None\n    s = None\n    v = 1 - k\n\n    if c == 1:\n        h = m - y\n    elif m == 1:\n        h = 2 + (y - c)\n    elif y == 1:\n        h = 4 + (c - m)\n\n    h = h % 6\n    h /= 6\n\n    if v == 0:\n        s = 0\n    else:\n        s = 1 - k / v\n\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, b [0, 255] range to [0, 1] range\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # Find the maximum and minimum of r, g, b color values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the difference between max and min color values\n    delta = max_value - min_value\n\n    # Calculate the hue value\n    if delta == 0:\n        hue = 0\n    elif max_value == r:\n        hue = ((g - b) / delta) % 6\n    elif max_value == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    # Calculate the saturation value\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = round(delta / max_value * 100)\n\n    # Calculate the value value\n    value = round(max_value * 100)\n\n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    saturation = round(saturation * 100)\n\n    value = round(cmax * 100)\n\n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    saturation = round(saturation * 100)\n\n    value = round(cmax * 100)\n\n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n\n    Args:\n    r (float): red component of RGB color, in range [0, 1]\n    g (float): green component of RGB color, in range [0, 1]\n    b (float): blue component of RGB color, in range [0, 1]\n\n    Returns:\n    tuple: (h, s, v) HSV color, with h in range [0, 1], s and v in range [0, 1]\n    '''\n    r, g, b = float(r), float(g), float(b)\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h /= 6\n\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n\n    v = cmax\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta/cmax\n\n    saturation = round(saturation * 100)\n\n    value = round(cmax * 100)\n\n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    \n    hue = round(hue * 60)\n    \n    if hue < 0:\n        hue += 360\n    \n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = round(delta/cmax * 100)\n    \n    value = round(cmax * 100)\n    \n    return (hue, saturation, value)\n"
    },
    {
        "number": 784,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n            \n    return even_product * odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    even_found = False\n    odd_found = False\n    \n    for num in list1:\n        if num % 2 == 0 and not even_found:\n            even_product *= num\n            even_found = True\n        elif num % 2 != 0 and not odd_found:\n            odd_product *= num\n            odd_found = True\n    \n    return even_product * odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    even_product = 1\n    odd_product = 1\n    even_found = False\n    odd_found = False\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n            even_found = True\n        else:\n            odd_product *= num\n            odd_found = True\n    \n    if even_found and odd_found:\n        return even_product * odd_product\n    else:\n        return \"Not enough even and odd numbers in the list\"\n"
    },
    {
        "number": 784,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    even_prod = 1\n    odd_prod = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_prod *= num\n        else:\n            odd_count += 1\n            odd_prod *= num\n    \n    if even_count == 0 or odd_count == 0:\n        return None\n    else:\n        return even_prod * odd_prod\n"
    },
    {
        "number": 784,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n        else:\n            if odd is None:\n                odd = num\n        if even is not None and odd is not None:\n            return even * odd\n    return None\n"
    },
    {
        "number": 784,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_found = False\n    odd_found = False\n    even_prod = 0\n    odd_prod = 0\n\n    for num in list1:\n        if num % 2 == 0 and not even_found:\n            even_prod = num\n            even_found = True\n        elif num % 2 != 0 and not odd_found:\n            odd_prod = num\n            odd_found = True\n        if even_found and odd_found:\n            break\n\n    return even_prod * odd_prod\n"
    },
    {
        "number": 784,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for i in list1:\n        if i % 2 == 0 and even is None:\n            even = i\n        elif i % 2 != 0 and odd is None:\n            odd = i\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return \"Invalid input\"\n    else:\n        return even * odd\n"
    },
    {
        "number": 784,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n        else:\n            if odd is None:\n                odd = num\n        if even is not None and odd is not None:\n            return even * odd\n    return None\n"
    },
    {
        "number": 784,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product\n"
    },
    {
        "number": 785,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Removing the parentheses from the string\n    test_str = test_str.replace('(','').replace(')','')\n    # Splitting the string by comma to get a list of strings\n    str_list = test_str.split(',')\n    # Converting each string in the list to integer and appending to a new list\n    int_list = [int(i) for i in str_list]\n    # Converting the list to tuple\n    int_tuple = tuple(int_list)\n    # Returning the integer tuple\n    return int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the parentheses from the string\n    test_str = test_str.replace('(', '').replace(')', '')\n    # Split the string on commas to get a list of strings\n    str_list = test_str.split(',')\n    # Convert each string to an integer and add it to a new tuple\n    int_tuple = tuple(int(s.strip()) for s in str_list)\n    return int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string at the comma\n    str_list = test_str.split(\",\")\n    # Remove any leading or trailing spaces from each element\n    str_list = [s.strip() for s in str_list]\n    # Convert each string element to an integer\n    int_list = [int(i) for i in str_list]\n    # Convert the integer list to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a tuple of integers\n    int_tuple = tuple(int(i) for i in test_str[1:-1].split(','))\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    \n    # Convert the tuple string to integer tuple using tuple() and map()\n    int_tuple = tuple(map(int, test_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")))\n    \n    return int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # remove the parentheses from the string\n    test_str = test_str.replace('(', '').replace(')', '')\n    # split the string into a list of strings\n    str_list = test_str.split(',')\n    # convert each string to an integer\n    int_list = [int(s) for s in str_list]\n    # convert the list of integers to a tuple\n    result = tuple(int_list)\n    return result\n"
    },
    {
        "number": 785,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of integers\n    int_list = list(map(int, test_str[1:-1].split(', ')))\n    # Convert the list to a tuple\n    int_tuple = tuple(int_list)\n    # Return the tuple\n    return int_tuple\n"
    },
    {
        "number": 785,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        int_tuple = tuple(map(int, test_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")))\n        return int_tuple\n    except ValueError:\n        print(\"Invalid input! Input must be a tuple string.\")\n"
    },
    {
        "number": 785,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to tuple of strings\n    tup_str = tuple(test_str.split(','))\n    # Convert tuple of strings to tuple of integers\n    tup_int = tuple(map(int, tup_str))\n    return tup_int\n"
    },
    {
        "number": 785,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of strings\n    str_list = test_str.strip('()').split(',')\n    # Convert each string in the list to an integer\n    int_list = [int(i) for i in str_list]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    return int_tuple\n"
    },
    {
        "number": 786,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\n"
    },
    {
        "number": 787,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[^b]*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\sb{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[^b]*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 787,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[^b]*b{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 788,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create an empty list to hold the values\n    new_list = []\n    \n    # Loop through each element of the list and append it to the new list\n    for elem in test_list:\n        new_list.append(elem)\n        \n    # Append the given string to the new list\n    new_list.append(test_str)\n    \n    # Convert the new list to a tuple\n    new_tuple = tuple(new_list)\n    \n    # Return the new tuple\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list.append(test_str)\n    new_tuple = tuple(test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a new tuple by concatenating the given string and list\n    new_tuple = (test_str,) + tuple(test_list)\n    \n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the list and string into a single list\n    combined = test_list + [test_str]\n    \n    # Convert the combined list into a tuple\n    result = tuple(combined)\n    \n    return result\n"
    },
    {
        "number": 788,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = tuple(test_list)\n    if test_str in test_tuple:\n        return test_tuple + (test_str, )\n    else:\n        return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, tuple(test_list))\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a new list by appending the string to the end of the list\n    new_list = test_list + [test_str]\n    # Convert the new list to a tuple and return it\n    return tuple(new_list)\n"
    },
    {
        "number": 790,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 != 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of numbers as input and returns True if every even index contains an even number,\n    and False otherwise.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Define an empty list to hold the result\n    result = []\n    # Loop through each element in the input tuple\n    for element in test_tup:\n        # Check if the element is a tuple\n        if isinstance(element, tuple):\n            # If the element is a tuple, recursively call the function to remove any nested tuples\n            result += remove_nested(element)\n        else:\n            # If the element is not a tuple, append it to the result list\n            result.append(element)\n    # Return the result list\n    return result\n"
    },
    {
        "number": 791,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i) != tuple:\n            result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 791,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)\n"
    },
    {
        "number": 791,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) != tuple:\n            result.append(item)\n    return tuple(result)\n"
    },
    {
        "number": 791,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    res = []\n    for i in test_tup:\n        if type(i) != tuple:\n            res.append(i)\n        else:\n            res.extend(remove_nested(i))\n    return tuple(res)\n"
    },
    {
        "number": 791,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n    \n    # Iterate over each element of the list\n    for i in range(len(test_list)):\n        # If the element is a tuple, remove it\n        if isinstance(test_list[i], tuple):\n            del test_list[i]\n    \n    # Convert the list back to a tuple\n    return tuple(test_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)\n"
    },
    {
        "number": 791,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) != tuple:\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)\n"
    },
    {
        "number": 791,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i) != tuple:\n            result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 791,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) != tuple:\n            result.append(item)\n    return tuple(result)\n"
    },
    {
        "number": 792,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n            count += count_list(i)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n            count += count_list(item)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n            count += count_list(i)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 793,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def last(arr,x):\n    \"\"\"\n    This function takes a sorted array and an element x as input and returns the last position of x in the array.\n    If x is not present in the array, it returns -1.\n    \"\"\"\n    n = len(arr)\n    low, high = 0, n-1\n    pos = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            pos = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return pos\n"
    },
    {
        "number": 793,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left = 0\n    right = n - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n"
    },
    {
        "number": 793,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n"
    },
    {
        "number": 793,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            # If we find the element, we need to continue searching to the right\n            left = mid + 1\n        elif arr[mid] < x:\n            # If the element is greater than the middle element, we need to search the right half\n            left = mid + 1\n        else:\n            # If the element is less than the middle element, we need to search the left half\n            right = mid - 1\n    if left == len(arr) or arr[left] != x:\n        # If the element is not found or the last occurrence is not in the middle element,\n        # we need to return -1\n        return -1\n    else:\n        # Otherwise, we return the index of the last occurrence\n        return left\n"
    },
    {
        "number": 793,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    left, right = 0, n-1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result\n"
    },
    {
        "number": 793,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] == x and (mid == len(arr)-1 or arr[mid+1] > x):\n            return mid\n        elif arr[mid] < x:\n            left = mid+1\n        else:\n            right = mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    left, right = 0, n-1\n    last_pos = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            last_pos = mid\n            left = mid + 1\n\n        elif arr[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return last_pos\n"
    },
    {
        "number": 793,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    # Binary search to find the last position of x in arr\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n"
    },
    {
        "number": 793,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left, right = 0, n-1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n\n        elif arr[mid] < x:\n            left = mid + 1\n\n        else:\n            right = mid - 1\n\n    return result\n"
    },
    {
        "number": 793,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 794,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b$')\n    return bool(pattern.search(text))\n"
    },
    {
        "number": 794,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    match = re.search('a.*b$', text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 796,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Iterate over the values in the dictionary and add them to the sum\n    for value in dict.values():\n        sum += value\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dictionary:\n        total_sum += dictionary[key]\n    return total_sum\n"
    },
    {
        "number": 796,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Initialize the sum to 0\n    sum_of_items = 0\n    \n    # Iterate over the dictionary and add each item to the sum\n    for key in dictionary:\n        sum_of_items += dictionary[key]\n    \n    # Return the sum\n    return sum_of_items\n"
    },
    {
        "number": 796,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Iterate over the dictionary items and add each value to the sum\n    for key in dictionary:\n        sum += dictionary[key]\n    # Return the sum\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_of_odd = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum_of_odd += i\n    return sum_of_odd"
    },
    {
        "number": 797,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    # Initialize a variable to store the sum of odd numbers\n    sum = 0\n    \n    # Loop through all the natural numbers up to n\n    for i in range(1, n+1):\n        # If the current number is odd, add it to the sum\n        if i % 2 == 1:\n            sum += i\n            \n    # Return the sum of odd numbers\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes a positive integer n and returns the sum of all odd natural numbers\n    from 1 to n (inclusive).\n    \"\"\"\n    # Initialize the sum as 0\n    sum = 0\n    \n    # Iterate through the range from 1 to n (inclusive)\n    for i in range(1, n+1):\n        \n        # Check if the current number is odd\n        if i % 2 != 0:\n            \n            # If it is odd, add it to the sum\n            sum += i\n    \n    # Return the sum\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(1,n+1,2):\n        sum_odd += i\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(n):\n        if i % 2 != 0:\n            total += i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 != 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes in a number n and returns the sum of all odd numbers from 1 to n.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total\n"
    },
    {
        "number": 797,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    # Initialize sum as 0\n    sum = 0\n    \n    # Loop through each number in the range 1 to n\n    for i in range(1, n+1):\n        # Check if the number is odd\n        if i % 2 != 0:\n            # Add the odd number to the sum\n            sum += i\n    \n    # Return the sum of all odd numbers\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments l and r and returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize the sum of odd numbers to 0\n    odd_sum = 0\n\n    # Loop through each number in the range l to r\n    for i in range(l, r+1):\n        # If the number is odd, add it to the sum\n        if i % 2 != 0:\n            odd_sum += i\n\n    # Return the sum of odd numbers\n    return odd_sum\n"
    },
    {
        "number": 798,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes an array as an argument and returns the sum of its elements.\n    \"\"\"\n    result = 0\n    for element in arr:\n        result += element\n    return result\n"
    },
    {
        "number": 798,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initialize a variable to hold the sum\n    sum = 0\n    \n    # Iterate through each element of the array and add it to the sum\n    for element in arr:\n        sum += element\n    \n    # Return the sum\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def _sum(arr):   \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for i in arr:\n        result += i\n    return result\n"
    },
    {
        "number": 799,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # convert n to binary string\n    n_bin = bin(n)[2:].zfill(32)\n    # convert d to binary string\n    d_bin = bin(d)[2:].zfill(5)\n    # extract the last 5 bits of d as the number of rotations\n    rotations = int(d_bin[3:], 2)\n    # rotate the bits of n by rotations\n    n_rotated = n_bin[rotations:] + n_bin[:rotations]\n    # convert the binary string back to integer\n    n_result = int(n_rotated, 2)\n    return n_result\n"
    },
    {
        "number": 799,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate the bits of the given number n d positions to the left.\n    We assume that the number is 32 bit.\n    \"\"\"\n    # Mask to get the last d bits of n\n    mask = (1 << d) - 1\n    # Get the last d bits of n\n    last_bits = n & mask\n    # Shift the bits of n d positions to the left\n    rotated = (n << d) & ((1 << 32) - 1)\n    # Combine the last d bits of n with the rotated bits\n    result = rotated | (last_bits << (32 - d))\n    return result\n"
    },
    {
        "number": 799,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def left_rotate(n,d):    \n    \"\"\"\n    Rotate the bits of a number to the left by d positions.\n    \"\"\"\n    d = d % 32 # To handle cases where d > 32\n    mask = (2**d) - 1 # Create a mask of d 1's\n    return ((n << d) & (mask << 32-d)) | ((n & (mask << 32-d)) >> d)\n"
    },
    {
        "number": 799,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def left_rotate(n,d):  \n    '''\n    Write a function to that rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # Number of bits to shift\n    shift = d % 32\n    # Mask to shift only the required bits\n    mask = (1 << shift) - 1\n    # Shift and mask the number\n    return ((n << shift) & mask) | ((n & mask) >> (32 - shift))\n"
    },
    {
        "number": 799,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary form\n    binary_n = bin(n)[2:]\n\n    # Left pad the binary number with zeroes to make it 32 bit\n    binary_n = binary_n.zfill(32)\n\n    # Calculate the number of bits to be rotated to the left\n    d = d % 32\n\n    # Rotate the bits to the left by d bits\n    rotated_binary = binary_n[d:] + binary_n[:d]\n\n    # Convert the rotated binary number to decimal form\n    rotated_n = int(rotated_binary, 2)\n\n    return rotated_n\n"
    },
    {
        "number": 799,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to be shifted right\n    r_shift = 32 - d\n    # Bitwise shift right and left to perform the rotation\n    return ((n << d) | (n >> r_shift)) & 0xFFFFFFFF\n"
    },
    {
        "number": 799,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # convert the number to binary\n    binary = bin(n)[2:]\n    # add leading 0s to make the binary 32 bit\n    binary = binary.zfill(32)\n    # rotate the binary by d bits\n    rotated_binary = binary[d:]+binary[:d]\n    # convert the binary back to decimal\n    decimal = int(rotated_binary, 2)\n    return decimal\n"
    },
    {
        "number": 799,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function takes a number `n` and a number of bits `d` as input, and returns the number\n    obtained by rotating the bits of the given number `n` `d` bits to the left.\n    \"\"\"\n    # calculate the number of bits to be shifted\n    shift = d % 32\n    # shift the bits to the left by `shift` number of bits\n    rotated_n = (n << shift) | (n >> (32 - shift))\n    return rotated_n\n"
    },
    {
        "number": 799,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # Circular shift the number by d bits to the left\n    d = d % 32\n    mask = (1 << 32) - 1\n    n_rotated = ((n << d) & mask) | ((n >> (32 - d)) & mask)\n    return n_rotated\n"
    },
    {
        "number": 799,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def left_rotate(n,d): \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 800,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # using regular expression to match all whitespaces and replace them with an empty string\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text) "
    },
    {
        "number": 800,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    else:\n        count = 0\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    if count == 3:\n        return \"All three numbers are equal.\"\n    elif count == 2:\n        return \"Two numbers are equal.\"\n    elif count == 1:\n        return \"One number is equal.\"\n    else:\n        return \"No numbers are equal.\"\n"
    },
    {
        "number": 801,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    num = set([x,y,z])\n    if len(num) == 1:\n        count = 3\n    elif len(num) == 2:\n        count = 2\n    else:\n        count = 0\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    pivot = find_pivot(arr, 0, n-1)\n    if pivot != -1:\n        return n - pivot\n    else:\n        return 0\n\n\ndef find_pivot(arr, low, high):\n    \"\"\"\n    Helper function to find the pivot index.\n    \"\"\"\n    if high < low:\n        return -1\n    if high == low:\n        return low\n\n    mid = int((low + high) / 2)\n    if mid < high and arr[mid] > arr[mid+1]:\n        return mid\n    if mid > low and arr[mid] < arr[mid-1]:\n        return mid - 1\n    if arr[low] >= arr[mid]:\n        return find_pivot(arr, low, mid-1)\n    else:\n        return find_pivot(arr, mid, high)\n"
    },
    {
        "number": 802,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_rotation(arr):  \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    pivot = find_pivot(arr, 0, n-1)\n    if pivot == -1:\n        return 0\n    return pivot\n\n\ndef find_pivot(arr, low, high):\n    if high < low:\n        return -1\n    if high == low:\n        return low\n\n    mid = int((low + high)/2)\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return mid\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return mid - 1\n    if arr[low] >= arr[mid]:\n        return find_pivot(arr, low, mid-1)\n    return find_pivot(arr, mid + 1, high)\n"
    },
    {
        "number": 802,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_rotation(arr):  \n    \"\"\"\n    This function takes an array as input and returns the number of rotations required\n    to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    low = 0\n    high = n - 1\n    # Check if array is already sorted\n    while high > low:\n        if arr[high] > arr[low]:\n            return low\n        # If not sorted, then find the pivot point\n        mid = (low + high) // 2\n        # If mid element is greater than the next element, then mid+1 is the pivot point\n        if mid < n - 1 and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        # If mid element is smaller than the previous element, then mid-1 is the pivot point\n        if mid > 0 and arr[mid] < arr[mid - 1]:\n            return mid\n        # If the element at the low index is smaller than mid element, then the pivot point is in the right half\n        if arr[low] < arr[mid]:\n            low = mid + 1\n        # If the element at the low index is greater than mid element, then the pivot point is in the left half\n        else:\n            high = mid - 1\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    pivot = find_pivot(arr, 0, n-1)\n    if pivot == -1:\n        return 0\n    return pivot\n\ndef find_pivot(arr, low, high):\n    if high < low:\n        return -1\n    if high == low:\n        return low\n    mid = (low + high) // 2\n    if mid < high and arr[mid] > arr[mid+1]:\n        return mid\n    if mid > low and arr[mid] < arr[mid-1]:\n        return mid-1\n    if arr[low] >= arr[mid]:\n        return find_pivot(arr, low, mid-1)\n    return find_pivot(arr, mid+1, high)\n"
    },
    {
        "number": 802,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Count the number of rotations required to generate a sorted array\n    \"\"\"\n    n = len(arr)\n    pivot = find_pivot(arr, 0, n-1)\n\n    if pivot == -1:\n        return 0\n\n    return pivot\n\n\ndef find_pivot(arr, low, high):\n    \"\"\"\n    Find the pivot index of the array\n    \"\"\"\n    if high < low:\n        return -1\n\n    if high == low:\n        return low\n\n    mid = int((low + high) / 2)\n\n    if mid < high and arr[mid] > arr[mid+1]:\n        return mid\n\n    if mid > low and arr[mid] < arr[mid-1]:\n        return mid-1\n\n    if arr[low] >= arr[mid]:\n        return find_pivot(arr, low, mid-1)\n\n    return find_pivot(arr, mid+1, high)\n"
    },
    {
        "number": 802,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotations = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            rotations += 1\n            \n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    pivot = find_pivot(arr, 0, n-1)\n    if pivot == -1:\n        return 0\n    return pivot\n\n\ndef find_pivot(arr, low, high):\n    if high < low:\n        return -1\n    if high == low:\n        return low\n    mid = int((low + high) / 2)\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return mid\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return mid - 1\n    if arr[low] >= arr[mid]:\n        return find_pivot(arr, low, mid - 1)\n    return find_pivot(arr, mid + 1, high)\n"
    },
    {
        "number": 802,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_rotation(arr):  \n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    rotations = 0\n    for i in range(n):\n        if i < n-1 and arr[i] > arr[i+1]:\n            rotations += 1\n        elif i > 0 and arr[i] < arr[i-1]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_rotation(arr): \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    \n    # Find the minimum element and its index\n    min_idx = 0\n    for i in range(1, n):\n        if arr[i] < arr[min_idx]:\n            min_idx = i\n    \n    # Count the number of rotations\n    return min_idx\n"
    },
    {
        "number": 802,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_rotation(arr):    \n    \"\"\"\n    Count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[n-1-i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n\n"
    },
    {
        "number": 803,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sqrt_n = int(math.sqrt(n))\n    return n == sqrt_n * sqrt_n\n"
    },
    {
        "number": 803,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    i = 0\n    while i*i < n:\n        i += 1\n    if i*i == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # find the square root of the number\n    root = int(n ** 0.5)\n    # check if the square of the root is equal to the number\n    return root * root == n\n"
    },
    {
        "number": 803,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    import math\n    return n == int(math.sqrt(n)) ** 2\n"
    },
    {
        "number": 803,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    i = 1\n    while (n > 0):\n        n -= i\n        i += 2\n    return (i - 2) % 2 == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 2:\n        return True\n    \n    left = 1\n    right = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if mid * mid == n:\n            return True\n        \n        if mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    i = 0\n    while i*i < n:\n        i += 1\n    if i*i == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    import math\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n\n"
    },
    {
        "number": 804,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')  # start with negative infinity\n    max_list = None  # no list has been found yet\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf') # start with negative infinity as the highest sum\n    max_list = None # no list has been chosen yet\n    \n    # iterate through each list in the input list\n    for lst in lists:\n        # calculate the sum of elements in the current list\n        lst_sum = sum(lst)\n        \n        # if the current sum is higher than the previous highest sum\n        if lst_sum > max_sum:\n            # update the highest sum and the list with the highest sum\n            max_sum = lst_sum\n            max_list = lst\n    \n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    max_sum = float('-inf')\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n"
    },
    {
        "number": 806,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    This function finds the maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 0\n    max_run = 0\n    for char in test_str:\n        if char.isupper():\n            run += 1\n            if run > max_run:\n                max_run = run\n        else:\n            run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n            \n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    # Loop through the string and check for uppercase characters\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None  # if no odd numbers are found\n"
    },
    {
        "number": 807,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n"
    },
    {
        "number": 808,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Check if the given tuples contain the value K or not.\n    \"\"\"\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if length of both tuples is equal\n    if len(test_tup1) != len(test_tup2):\n        return False\n    # Check if each element of second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n"
    }
]