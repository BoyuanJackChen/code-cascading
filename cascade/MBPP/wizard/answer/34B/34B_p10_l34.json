[
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two tuples.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of sets\n    common_elements = set1.intersection(set2)\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two tuples.\n    '''\n    # Create an empty set to store the shared elements\n    shared_elements = set()\n\n    # Iterate through the elements of the first tuple\n    for element in test_tup1:\n        # Check if the element is also present in the second tuple\n        if element in test_tup2:\n            # Add the element to the shared_elements set\n            shared_elements.add(element)\n\n    # Return the set of shared elements\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            common_elements.append(item)\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two tuples.\n    '''\n    # Convert tuples to sets and find their intersection\n    return set(test_tup1).intersection(set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Returns True if the given number is not prime, False otherwise.\n    '''\n    if n < 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Returns True if n is not a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Returns True if n is not a prime number, else False.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number, and False if n is a prime number.\n    '''\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number, and False otherwise.\n    '''\n    if n < 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min heap to keep track of the n largest numbers\n    min_heap = []\n    # Add each number to the heap\n    for num in nums:\n        hq.heappush(min_heap, num)\n        # If heap size exceeds n, remove the smallest number\n        if len(min_heap) > n:\n            hq.heappop(min_heap)\n    # Reverse the heap to get the n largest numbers in descending order\n    return sorted(min_heap, reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-hq.heappop(heap) for _ in range(len(heap))]\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums) for i in range(n)], reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap of size n\n    min_heap = []\n    for num in nums:\n        if len(min_heap) < n:\n            hq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                hq.heappop(min_heap)\n                hq.heappush(min_heap, num)\n    \n    # convert the min heap to a max heap\n    max_heap = []\n    while min_heap:\n        hq.heappush(max_heap, -hq.heappop(min_heap))\n    \n    return max_heap\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums) for i in range(n)], reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums) for i in range(n)], reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums) for i in range(n)], reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of the first n elements of the list\n    min_heap = nums[:n]\n    hq.heapify(min_heap)\n    \n    # iterate over the remaining elements of the list\n    for num in nums[n:]:\n        # if the current element is larger than the smallest element in the heap,\n        # replace the smallest element with the current element and re-heapify\n        if num > min_heap[0]:\n            hq.heapreplace(min_heap, num)\n    \n    # reverse the heap to get the n largest elements in descending order\n    return sorted(min_heap, reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heapreplace(heap, num)\n    \n    # Return the heap in reverse order to get the largest n numbers in descending order\n    return sorted(heap, reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    result = [-hq.heappop(heap) for _ in range(len(heap))]\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether a number is a power of two or not.\n    '''\n    if x == 0:\n        return False\n    return (x & (x-1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the number is a power of two or not.\n    '''\n    if x == 0:\n        return False\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks if the given number is a power of two or not.\n    '''\n    if x <= 0:\n        return False\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    if x <= 0:\n        return False\n    return (x & (x - 1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as an input and returns True if n is a power of 2, otherwise it returns False.\n    \"\"\"\n    if n <= 0:\n        return False\n    return (n & (n-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the given number is a power of two or not.\n    '''\n    if x == 0:\n        return False\n    return (x & (x-1)) == 0"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function returns True if the given number x is a power of two, else it returns False.\n    '''\n    return False if x == 0 else (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether a number is a power of two or not.\n    '''\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Returns True if the given number is a power of two, else False.\n    \"\"\"\n    if x < 1:\n        return False\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    if x == 0:\n        return False\n    return (x & (x-1)) == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # find all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # return the list of matched words\n    return matches\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    \n    # Print the matches\n    print(\"Words that are at least 4 characters long:\")\n    for match in matches:\n        print(match)\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = [num ** 2 for num in nums]\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for num in nums:\n        square_list.append(num**2)\n    return square_list\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    str += str\n    for i in range(n):\n        if str[i:i+n] == str[n:n+n]:\n            return n - i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    for i in range(n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0)\n    required to get the same string.\n    '''\n    # convert the string to a list to make it mutable\n    s = list(str)\n    # find the index of the first occurrence of the first character in the string\n    index = s.index(s[0])\n    # rotate the string by the found index and compare it to the original string\n    if s == s[index:] + s[:index]:\n        # if they match, return the index as the number of rotations\n        return index\n    else:\n        # otherwise, the string is not a rotation of itself and the answer is 0\n        return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    str = str + str\n    for i in range(n):\n        if str[i:i+n] == str[n:n+i]:\n            return i\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_Rotations(string):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(string)\n    for i in range(n):\n        if string[i:] + string[:i] == string:\n            return i\n    return n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    str += str\n    for i in range(n):\n        if str[i:i+n] == str[:n]:\n            return i\n"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    if s.count(ch) == 1:\n        return s.replace(ch, '')\n    else:\n        index_first = s.find(ch)\n        index_last = s.rfind(ch)\n        return s[:index_first] + s[index_first+1:index_last] + s[index_last+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Find first and last occurrence of character in string\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    \n    # Remove character from string if found\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ+1:]\n    if last_occ != -1:\n        s = s[:last_occ] + s[last_occ+1:]\n        \n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        if first_occ == last_occ:\n            s = s.replace(ch, '', 1)\n        else:\n            s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        if first_occ == last_occ:\n            return s.replace(ch, '', 1)\n        else:\n            return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first_index = s.find(ch)\n        last_index = s.rfind(ch)\n        if first_index == last_index:\n            return s.replace(ch, '', 1)\n        else:\n            return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == -1 or last_occ == -1:\n        return s\n    elif first_occ == last_occ:\n        return s[:first_occ] + s[last_occ+1:]\n    else:\n        return s[:first_occ] + s[last_occ+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) < 2:  # if given character occurs less than 2 times\n        return s\n    else:\n        first_occ = s.find(ch)  # index of first occurrence of given character\n        last_occ = s.rfind(ch)  # index of last occurrence of given character\n        if first_occ == last_occ:  # if given character occurs only once\n            return s.replace(ch, '')\n        else:\n            return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):  \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first_occ = s.index(ch)\n        last_occ = s.rindex(ch)\n        if first_occ == last_occ:\n            s = s.replace(ch, '', 1)\n        else:\n            s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    first = s.find(ch)\n    last = s.rfind(ch)\n    if first == -1 or last == -1:\n        return s\n    elif first == last:\n        return s[:first] + s[last+1:]\n    else:\n        return s[:first] + s[last+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if character is present in the string\n    if ch in s:\n        # Find the index of the first and last occurrence of the character\n        first_index = s.find(ch)\n        last_index = s.rfind(ch)\n\n        # Remove the character from the string using string slicing\n        new_string = s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]\n        return new_string\n    else:\n        return s\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    # Compute the row sums\n    row_sums = [sum(row) for row in M]\n    # Sort the row sums and the matrix rows together\n    sorted_sums, sorted_rows = zip(*sorted(zip(row_sums, M)))\n    return sorted_rows\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    for i in range(rows):\n        for j in range(i+1, rows):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    columns = len(M[0])\n    # calculate the sum of each row and store it in a list\n    sums = [sum(M[i]) for i in range(rows)]\n    # sort the sum list in ascending order\n    sums.sort()\n    # create a new matrix to store the sorted matrix\n    sorted_matrix = [[0 for j in range(columns)] for i in range(rows)]\n    # iterate over the sorted sum list and retrieve the corresponding row from the original matrix\n    # and store it in the new matrix\n    for i in range(rows):\n        index = sums.index(sum(M[i]))\n        sorted_matrix[index] = M[i]\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows based on the sum of each row\n    sorted_rows = [row for _, row in sorted(zip(row_sums, M))]\n    \n    # Sort the row sums in ascending order\n    sorted_row_sums = sorted(row_sums)\n    \n    return sorted_rows, sorted_row_sums\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    sorted_row_sums = sorted(row_sums)\n    sorted_matrix = []\n    for i in range(len(sorted_row_sums)):\n        index = row_sums.index(sorted_row_sums[i])\n        sorted_matrix.append(M[index])\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the row sums in ascending order\n    row_sums.sort()\n    \n    # Create a new matrix with the sorted rows\n    sorted_matrix = []\n    for row_sum in row_sums:\n        row_index = M.index([col for col in M if sum(col) == row_sum][0])\n        sorted_matrix.append(M[row_index])\n    \n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n    sorted_indices = sorted(range(len(row_sums)), key=lambda k: row_sums[k])\n    sorted_matrix = []\n    for index in sorted_indices:\n        sorted_matrix.append(M[index])\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    row_sum = [sum(row) for row in M]\n    # sort the row sum in ascending order\n    sorted_sum = sorted(row_sum)\n    # create a dictionary to store the original index of each row sum\n    index_dict = {}\n    for i, j in enumerate(row_sum):\n        index_dict[j] = i\n    # sort the matrix according to the sorted row sum\n    sorted_M = []\n    for i in sorted_sum:\n        sorted_M.append(M[index_dict[i]])\n    return sorted_M\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    sorted_indices = sorted(range(len(row_sums)), key=lambda k: row_sums[k])\n    sorted_matrix = [M[i] for i in sorted_indices]\n    return sorted_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Sorts a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get a list of row sums\n    row_sums = [sum(row) for row in M]\n    # Sort the row sums and use them to index into M\n    sorted_M = [M[i] for i in sorted(range(len(M)), key=lambda x: row_sums[x])]\n    return sorted_M\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three parameters: length (l), breadth (b) and height (h) of a triangular prism.\n    It returns the volume of the triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function finds the volume of a triangular prism using the formula:\n    volume = (1/2) * base area * height\n    '''\n    base_area = (1/2) * l * b\n    volume = base_area * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/4) * h * l * b\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes the lengths of the triangular prism's sides (l,b) and the height (h) as inputs and returns the volume of the triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+(_[a-z]+)+'\n    result = re.search(pattern, text)\n    return bool(result)\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    return bool(matches)\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile('^[a-z]+(_[a-z]+)*$')\n    return pattern.match(text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+(_[a-z]+)+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    matches = pattern.findall(text)\n    if matches:\n        for match in matches:\n            if '_' in match:\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def remove_chars(string1, string2):\n    '''\n    This function removes the characters from string1 that are present in string2.\n    '''\n    # Create a dictionary to store the frequency of characters in string2\n    char_freq = {}\n    for char in string2:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Create a list to store the characters to be removed from string1\n    remove_chars = []\n    for char in string1:\n        if char in char_freq:\n            remove_chars.append(char)\n    \n    # Remove the characters from string1\n    for char in remove_chars:\n        string1 = string1.replace(char, '')\n    \n    return string1\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    # Create a set of characters to remove from string1\n    remove_chars = set(string2)\n    # Convert string1 to a list and remove the characters to keep only the desired characters\n    result = [char for char in string1 if char not in remove_chars]\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def remove_chars(str1, str2):\n    freq = [0] * NO_OF_CHARS\n    for i in range(len(str2)):\n        freq[ord(str2[i])] += 1\n    res = \"\"\n    for i in range(len(str1)):\n        if freq[ord(str1[i])] == 0:\n            res += str1[i]\n    return res"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def remove_chars(string1, string2):\n    char_list1 = list(string1)\n    char_list2 = list(string2)\n    for char in char_list2:\n        if char in char_list1:\n            char_list1.remove(char)\n    return \"\".join(char_list1)\n\n\nstring1 = input(\"Enter the first string: \")\nstring2 = input(\"Enter the second string: \")\n\nresult = remove_chars(string1, string2)\nprint(\"The resultant string is:\", result)\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def remove_chars_in_second_string(str1, str2):\n    '''\n    Remove characters from str1 which are present in str2.\n    '''\n    char_set = [False for i in range(NO_OF_CHARS)]\n    for i in range(len(str2)):\n        char_set[ord(str2[i])] = True\n\n    new_str = \"\"\n    for i in range(len(str1)):\n        if char_set[ord(str1[i])] == False:\n            new_str += str1[i]\n\n    return new_str\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def remove_chars(str1, str2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a flag array to mark presence of characters\n    flag = [0] * NO_OF_CHARS\n    for i in range(len(str2)):\n        flag[ord(str2[i])] = 1\n\n    # Filter the characters based on flag array\n    filtered_str = ''\n    for i in range(len(str1)):\n        if flag[ord(str1[i])] == 0:\n            filtered_str += str1[i]\n\n    return filtered_str\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def remove_chars(string1, string2):\n    '''\n    Remove characters from string1 that are present in string2\n    '''\n    # Initialize a flag array to keep track of characters to be removed\n    to_remove = [False] * NO_OF_CHARS\n    # Mark characters to be removed as True in flag array\n    for char in string2:\n        to_remove[ord(char)] = True\n    # Remove marked characters from string1\n    result = []\n    for char in string1:\n        if not to_remove[ord(char)]:\n            result.append(char)\n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def remove_chars(s1, s2):\n    \"\"\"\n    Remove characters from s1 which are present in s2.\n    \"\"\"\n    freq = [0] * NO_OF_CHARS\n    for ch in s2:\n        freq[ord(ch)] += 1\n    res = []\n    for ch in s1:\n        if freq[ord(ch)] == 0:\n            res.append(ch)\n    return ''.join(res)\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def remove_chars(str1, str2):\n    char_set = set(str2)\n    result = []\n    for char in str1:\n        if char not in char_set:\n            result.append(char)\n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def remove_chars(string1, string2):\n    \"\"\"\n    This function removes all the characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the strings to lists of characters\n    list1 = list(string1)\n    list2 = list(string2)\n    \n    # Initialize an empty list to store the characters that are not present in list2\n    result = []\n    \n    # Loop through the characters of list1 and check if they are present in list2\n    for char in list1:\n        if char not in list2:\n            result.append(char)\n    \n    # Join the characters in the result list to form a string and return it\n    return ''.join(result)\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set(arraynums)\n    if len(num_set) == len(arraynums):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the given array to a set to remove duplicates.\n    # If the length of the set is less than the length of the array, it means there were duplicates.\n    if len(set(arraynums)) < len(arraynums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty set to store unique elements\n    unique_nums = set()\n    \n    # Iterate over the input array\n    for num in arraynums:\n        # If a number is already in the set, it means it is a duplicate\n        if num in unique_nums:\n            return True\n        # Otherwise, add it to the set\n        else:\n            unique_nums.add(num)\n    \n    # If we reach this point, there are no duplicates\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set of unique elements from the input array\n    unique_nums = set(arraynums)\n    # compare the lengths of the two arrays to determine if there were duplicates\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums_set = set(arraynums)\n    if len(nums_set) != len(arraynums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set from the input array to remove duplicates\n    num_set = set(arraynums)\n    # If the length of the set is less than the length of the array, there were duplicates\n    if len(num_set) < len(arraynums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums_set = set(arraynums)\n    if len(nums_set) == len(arraynums):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums)) != len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty set to store unique elements\n    unique_elements = set()\n    # Iterate over the input array\n    for num in arraynums:\n        # If the number is already in the set, return True\n        if num in unique_elements:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_elements.add(num)\n    # If no duplicates are found, return False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set(arraynums)\n    if len(num_set) == len(arraynums):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return False\n    for i in range(2, int(x/2) + 1):\n        if x % i == 0:\n            return True\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_woodall(x):\n    if x == 1:\n        return False\n    p = 2\n    while 2**p - 1 <= x:\n        if 2**p - 1 == x:\n            return is_prime(p)\n        p += 1\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 1000 and x % 10 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    This function takes a positive integer x as input and returns True if x is a Woodall number, otherwise False.\n    '''\n    if x == 1:\n        return True\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 2:\n        return False\n    for i in range(2, int(x/2)+1):\n        if x % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Returns True if the given number is a Woodall number, False otherwise.\n\n    A number is said to be a Woodall number if 2^n - 1 is divisible by n,\n    where n is a positive integer. For example, 5 is a Woodall number because\n    2^5 - 1 = 31, which is divisible by 5.\n    \"\"\"\n    if x <= 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        return (2**x - 1) % x == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is Woodall number or not.\n    \"\"\"\n    if x == 1 or x == 2:\n        return True\n    for i in range(3, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    # Calculate the sum of proper divisors\n    divisor_sum = sum(set(range(1, x)) - set(range(2, int(x**0.5) + 1)) - set([i for i in range(2, int(x**0.5) + 1) if x % i == 0]))\n    # Check if the sum is equal to the number\n    return divisor_sum == x\n"
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "The problem statement is not clear, so it's difficult to provide a solution. Please provide more details about the problem or refer to an external link if available. "
    },
    {
        "number": 20,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x % 10 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def rev(num):\n    # Convert the number to a string and reverse it\n    reverse_num = str(num)[::-1]\n    # Convert the reversed string back to an integer\n    reverse_num = int(reverse_num)\n    # Check if the number is one less than twice its reverse\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def rev(num):\n    # Convert the number to a string and reverse it\n    reverse = str(num)[::-1]\n    # Convert the reversed string back to an integer\n    reverse_num = int(reverse)\n    # Check if num is one less than twice the reverse number\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert num to string\n    num_str = str(num)\n    # reverse the string\n    reverse_str = num_str[::-1]\n    # convert the reversed string back to integer\n    reverse_num = int(reverse_str)\n    # check if the number is one less than twice its reverse\n    if num == (reverse_num * 2) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = int(str(num)[::-1])\n    twice_reverse = reverse * 2\n    return num == twice_reverse - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    This function takes an integer as input and returns True if the integer is one less than twice its reverse.\n    \"\"\"\n    # Convert the integer to a string and reverse it.\n    reverse = str(num)[::-1]\n    # Convert the reversed string back to an integer.\n    reverse_num = int(reverse)\n    # Calculate twice the reverse number.\n    twice_reverse = reverse_num * 2\n    # Return True if the number is one less than twice its reverse, False otherwise.\n    return num == twice_reverse - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to string\n    num_str = str(num)\n\n    # reverse the string\n    rev_str = num_str[::-1]\n\n    # convert the reversed string back to integer\n    rev_num = int(rev_str)\n\n    # check if the number is one less than twice its reverse\n    if num == rev_num * 2 - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = int(str(num)[::-1])\n    if num == (reverse * 2) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reverse = str(num)[::-1]\n    # Convert the reversed string back to an integer\n    reverse_num = int(reverse)\n    # Check if the given number is one less than twice its reverse\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def rev(num):\n    # convert the number to string and reverse it\n    reverse_num = str(num)[::-1]\n    \n    # convert the reversed number to integer and multiply by 2\n    twice_reverse = int(reverse_num) * 2\n    \n    # check if the number is one less than twice its reverse\n    if num == twice_reverse - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string so we can reverse it\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the number is one less than twice the reversed number\n    if num == rev_num * 2 - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr, reverse=True)\n    res = ''.join(map(str, arr))\n    return res\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = ''.join(map(str, arr))\n    return int(max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = ''.join(map(str, arr))\n    return int(max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = ''.join(map(str, arr))\n    return int(max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # sort the array in descending order\n    arr.sort(reverse=True)\n\n    # convert the array to a string and return the string as an integer\n    return int(''.join(map(str, arr)))\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = sorted(arr, reverse=True)\n    max_num = ''.join(map(str, arr))\n    return int(max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    max_num = \"\".join(str(x) for x in arr)\n    return int(max_num)\n"
    },
    {
        "number": 57,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the digits in descending order\n    arr.sort(reverse=True)\n    # Create an empty string to store the digits in the desired order\n    max_num = \"\"\n    # Remove all the duplicates from the list\n    arr = list(set(arr))\n    # Iterate over the sorted list of digits\n    for num in arr:\n        # Add the digit to the max_num string\n        max_num += str(num)\n    # Convert the max_num string to an integer\n    max_num = int(max_num)\n    # Return the maximum number formed\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Returns True if x and y have opposite signs, False otherwise.\n    \"\"\"\n    return (x < 0 and y > 0) or (x > 0 and y < 0)\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n - 2) if n > 0 else 0\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    \n    count = 0\n    i = 1\n    while count < n:\n        count += i\n        i += 1\n    \n    if count == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    else:\n        octagonal_number = n*(3*n-1)\n        return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 2)\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = s[i:j+1]\n            sum_digits = sum(int(digit) for digit in sub_str)\n            if sum_digits == len(sub_str):\n                count += 1\n\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            sub = s[i:j+1]\n            digits_sum = sum(int(ch) for ch in sub if ch.isdigit())\n            if digits_sum == len(sub):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = s[i:j+1]\n            if sum(int(ch) for ch in sub_str) == len(sub_str):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    n = len(s)\n    count = 0\n    \n    for i in range(n):\n        curr_sum = 0\n        curr_len = 0\n        \n        for j in range(i, n):\n            curr_sum += int(s[j])\n            curr_len += 1\n            \n            if curr_sum == curr_len:\n                count += 1\n                \n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Convert the string to a list of digits\n    digits = [int(d) for d in s]\n    \n    # Initialize a dictionary to store the count of substrings with each digit sum\n    digit_sum_count = defaultdict(int)\n    \n    # Initialize a dictionary to store the count of substrings with each length\n    length_count = defaultdict(int)\n    \n    # Iterate through the digits of the string\n    for i in range(len(digits)):\n        # Calculate the current digit sum\n        digit_sum = 0\n        for j in range(i, len(digits)):\n            digit_sum += digits[j]\n            # Update the count of substrings with this digit sum\n            digit_sum_count[digit_sum] += 1\n            # Update the count of substrings with this length\n            length_count[j - i + 1] += 1\n    \n    # Initialize the count of substrings with sum of digits equal to their length\n    result = 0\n    \n    # Iterate through the digit sums and length counts\n    for digit_sum, count in digit_sum_count.items():\n        # If the digit sum is equal to the length of a substring, increment the result\n        if digit_sum in length_count:\n            result += count * length_count[digit_sum]\n    \n    return result\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(k) for k in s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = s[i:j+1]\n            digit_sum = sum(int(ch) for ch in sub_str)\n            if digit_sum == len(sub_str):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(ch) for ch in s[i:j+1]) == j-i+1:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(ch) for ch in s[i:j+1]) == j+1 - i:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if sum(int(c) for c in sub) == len(sub):\n                res += 1\n    return res\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Finds the smallest number in a list of numbers.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize the smallest number to be the first number in the list\n    smallest = xs[0]\n    \n    # Loop through the list and compare each number to the smallest number\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n            \n    # Return the smallest number in the list\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list as input and returns the smallest number in the list.\n    \"\"\"\n    # Initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    \n    # Loop through the list and compare each element to the current smallest number\n    for num in xs:\n        if num < smallest:\n            smallest = num\n            \n    # Return the smallest number found\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes in a list of numbers and returns the smallest number in the list.\n    \"\"\"\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function finds the smallest number in a list.\n    \"\"\"\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None or x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i+1][1] - test_list[i][1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i+1] - test_list[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = test_list[1][0] - test_list[0][0]\n    for i in range(1, len(test_list)):\n        diff = test_list[i][0] - test_list[i-1][0]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list or len(test_list) < 2:\n        return \"Invalid input\"\n    min_value = test_list[0][0]\n    max_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][0] < min_value:\n            min_value = test_list[i][0]\n        if test_list[i][1] > max_value:\n            max_value = test_list[i][1]\n    return max_value - min_value\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return None\n    elif len(test_list) == 1:\n        return None\n    else:\n        max_diff = test_list[1][0] - test_list[0][0]\n        for i in range(1, len(test_list)):\n            diff = test_list[i][0] - test_list[i-1][0]\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        raise ValueError(\"List should have at least two elements.\")\n    max_diff = test_list[1] - test_list[0]\n    for i in range(2, len(test_list)):\n        diff = test_list[i] - test_list[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list or len(test_list) < 2:\n        return None\n    max_diff = test_list[1][1] - test_list[0][0]\n    min_val = test_list[0][0]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] - test_list[i][0] > max_diff:\n            max_diff = test_list[i][1] - test_list[i][0]\n        elif test_list[i][0] - min_val > max_diff:\n            max_diff = test_list[i][0] - min_val\n        if test_list[i][0] < min_val:\n            min_val = test_list[i][0]\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples by the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for element in data_list:\n        if type(element) == list:\n            flattened_list.extend(recursive_list_sum(element))\n        else:\n            flattened_list.append(element)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case: empty list\n        return 0\n    elif isinstance(data_list[0], list):  # recursive case: first element is a list\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:  # recursive case: first element is not a list\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if not data_list:\n        return 0\n    \n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    \n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flattened_list.extend(recursive_list_sum(item))\n        else:\n            flattened_list.append(item)\n    return sum(flattened_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n"
    },
    {
        "number": 65,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    Count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    Count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def bell_number(n):\n    bell = [[0]*n for _ in range(n)]\n    bell[0][0] = 1\n    for i in range(1, n):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n-1][n-1]\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def bell_number(n):\n    bell = [1] * (n+1)\n    for i in range(1, n+1):\n        bell[i] = 1 + sum(bell[j] * bell[i-j] for j in range(1, i))\n    return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from scipy.special import bell, comb\n\ndef bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    total = 0\n    for k in range(n+1):\n        total += comb(n, k) * bell(k)\n    return total\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def bell_number(n):\n    bell = [[0] * (n+1) for i in range(n+1)]\n    bell[0][0] = 1\n    bell[0][1] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def bell_number(n):\n    bell = [[0] * 20 for _ in range(20)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = 1\n        for j in range(1, i):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n        bell[i][i] = 1\n    return bell[n][0]\n\ndef num_partitions(n):\n    partitions = 1\n    for i in range(1, n + 1):\n        partitions *= bell_number(i)\n    return partitions\n\nn = int(input(\"Enter the index n: \"))\nprint(f\"The number of ways to partition a set of Bell numbers up to index {n} is: {num_partitions(n)}\")"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def bell_number(n):\n    bell = [[0] * (n+1) for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def bell_number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    This function takes an integer n as input and returns the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from scipy.special import bell, comb\n\ndef bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    total = 0\n    for k in range(n+1):\n        total += comb(n, k) * bell(k)\n    return total\n"
    },
    {
        "number": 67,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from scipy.special import bell\n\ndef bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_num = bell(n)\n    return bell_num\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if all elements are increasing or decreasing\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)) or all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is sorted in non-decreasing order\n    non_decreasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    # Check if the array is sorted in non-increasing order\n    non_increasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n    # If the array is either non-decreasing or non-increasing, it is monotonic\n    return non_decreasing or non_increasing\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes an array as input and returns True if the array is monotonic and False otherwise.\n    \"\"\"\n    if not A:\n        return True\n\n    is_increasing = is_decreasing = True\n    \n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            is_increasing = False\n        if A[i] < A[i+1]:\n            is_decreasing = False\n            \n    return is_increasing or is_decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if not A:\n        return True\n    \n    if len(A) == 1:\n        return True\n    \n    increasing = decreasing = None\n    \n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            if increasing is None:\n                increasing = True\n            elif not increasing:\n                return False\n        elif A[i] > A[i+1]:\n            if decreasing is None:\n                decreasing = True\n            elif not decreasing:\n                return False\n                \n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array is increasing or decreasing\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            increasing = False\n        elif A[i] < A[i+1]:\n            decreasing = False\n    \n    # If the array is increasing or decreasing, return True else False\n    return increasing or decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    increasing = decreasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        if A[i] < A[i+1]:\n            decreasing = False\n    return increasing or decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if not A:\n        return False\n\n    is_non_decreasing = True\n    is_non_increasing = True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            is_non_decreasing = False\n        if A[i] < A[i + 1]:\n            is_non_increasing = False\n\n        if not is_non_decreasing and not is_non_increasing:\n            return False\n\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Initialize the flag variables\n    increasing = False\n    decreasing = False\n    \n    # Loop through the array elements and check for monotonicity\n    for i in range(len(A)-1):\n        if A[i] <= A[i+1]:\n            increasing = True\n        if A[i] >= A[i+1]:\n            decreasing = True\n            \n    # If both increasing and decreasing are false, then the array is not monotonic\n    if not increasing and not decreasing:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if array is increasing or decreasing\n    increasing = decreasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        elif A[i] < A[i+1]:\n            decreasing = False\n    \n    return increasing or decreasing\n"
    },
    {
        "number": 68,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    is_increasing = None\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            if is_increasing is None:\n                is_increasing = True\n            elif not is_increasing:\n                return False\n        elif A[i] > A[i+1]:\n            if is_increasing is None:\n                is_increasing = False\n            elif is_increasing:\n                return False\n\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(s)\n    for i in range(len(l)-n+1):\n        if l[i:i+n] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(s)\n    for i in range(len(l) - n + 1):\n        if l[i:i+n] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # iterate through the list l\n    for i in range(len(l) - len(s) + 1):\n        # check if the sublist s is present in the list l\n        if l[i:i+len(s)] == s:\n            return True\n    # if sublist not found return False\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sublist = ''.join([str(i) for i in s])\n    list_str = ''.join([str(i) for i in l])\n    if sublist in list_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(s)\n    for i in range(len(l)-n+1):\n        if l[i:i+n] == s:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Get the length of the first tuple in the input list\n    first_length = len(Input[0])\n    \n    # Loop through the input list of tuples\n    for tup in Input:\n        # Check if the length of the current tuple is equal to the length of the first tuple\n        if len(tup) != first_length:\n            # If not, return False\n            return False\n    \n    # If all tuples have equal length, return True\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Check if the input is a list of tuples\n    if type(Input) == list and all(isinstance(x, tuple) for x in Input):\n        # Check if all tuples have equal length\n        if len(set(len(x) for x in Input)) == 1:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_length = len(Input[0])\n    for tup in Input:\n        if len(tup) != tuple_length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i]) != length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap/shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap/shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using Comb Sort.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n    \"\"\"\n    size = len(nums)\n    shrink_factor = 1.3\n    gap = size\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / shrink_factor))\n        swapped = False\n\n        for i in range(size - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n            \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap <= 1:\n            sorted = True\n            gap = 1\n\n        sorted = True\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n//2 + 1):\n        j = n - i*i\n        if j < 0:\n            continue\n        if int(j**0.5)**2 == j:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        j = n - i\n        if i**2 + j**2 == n:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n/2)+1):\n        j = n - i*i\n        if(j>=0):\n            if(int(j**(1/2))**2 == j):\n                print(\"Yes. \", n, \" can be represented as the difference of two squares\")\n                return\n    print(\"No. \", n, \" cannot be represented as the difference of two squares\")\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i**2 - j**2 == n:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    j = 1\n    while j**2 <= n:\n        if (i**2 + j**2) == n:\n            return True\n        elif (i**2 + j**2) < n:\n            j += 1\n        else:\n            i += 1\n            j = i+1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def dif_Square(n):  \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    j = n - 1\n    while i <= j:\n        sq_sum = i*i + j*j\n        if sq_sum == n:\n            return True\n        elif sq_sum < n:\n            i += 1\n        else:\n            j -= 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if (i * i) <= n:\n            j = n - (i * i)\n            if (j < 0):\n                continue\n            if int(j**0.5)**2 == j:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if i**2 > n:\n            break\n        j = n - i**2\n        if int(j**0.5)**2 == j:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        j = n - i*i\n        if j < 0:\n            break\n        if int(j**0.5)**2 == j:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    j = 1\n    while j**2 <= n:\n        if i**2 + j**2 == n:\n            return True\n        elif i**2 + j**2 > n:\n            i += 1\n        else:\n            j += 1\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n):\n        if colors[i] != patterns[i % n]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n-1):\n        if patterns[i] > patterns[i+1]:\n            return False\n        if patterns[i] == patterns[i+1]:\n            if colors[i] != colors[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if patterns[i] == \"A\":\n            if colors[i] != \"red\":\n                return False\n        elif patterns[i] == \"B\":\n            if colors[i] != \"green\":\n                return False\n        elif patterns[i] == \"C\":\n            if colors[i] != \"blue\":\n                return False\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] != patterns[i % len(patterns)]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    n = len(colors)\n    if n == 0 or n != len(patterns):\n        return False\n    \n    for i in range(n):\n        if colors[i] not in patterns[i]:\n            return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_dict = {}\n    for i in range(len(colors)):\n        if colors[i] not in color_dict:\n            color_dict[colors[i]] = patterns[i]\n        else:\n            if color_dict[colors[i]] != patterns[i]:\n                return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is divisible by 11, otherwise False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    This function checks if a given number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    This function checks whether a given number is divisible by 11 or not.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(f\"The length of the word '{s}' is even.\")\n    else:\n        print(f\"The length of the word '{s}' is odd.\")\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return f\"{s} has even length.\"\n    else:\n        return f\"{s} has odd length.\"\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def word_len(s):  \n    '''\n    This function takes a string as input and returns True if the length of the string is odd, else returns False.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        print(\"Length of the word is even\")\n    else:\n        print(\"Length of the word is odd\")\n"
    },
    {
        "number": 79,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2))/6\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * (r**3)\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * (r**3)\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * (r**3)\n    return vol\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def get_Char(strr):   \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    sum %= 26\n    if sum == 0:\n        return 'Z'\n    else:\n        return chr(sum + 64)\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the sum of ASCII values to 0\n    sum_ascii = 0\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum_ascii += ord(char)\n    # Take the sum modulo 26\n    sum_ascii %= 26\n    # Convert the sum to a character and return it\n    return chr(sum_ascii)\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    # Iterate over the string\n    for i in strr:\n        # Add the ASCII value of each character to the sum\n        sum += ord(i)\n    # Calculate the resultant character using modulo 26\n    result = sum % 26\n    # Convert the result into a character\n    char = chr(result)\n    # Return the character\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize sum of ASCII values of characters\n    ascii_sum = 0\n\n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        ascii_sum += ord(char)\n\n    # Compute the result by taking modulo 26 of the sum\n    result = ascii_sum % 26\n\n    # Convert the result to a character and return it\n    return chr(result)\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initializing sum as 0\n    sum = 0\n\n    # Looping through each character of the string\n    for char in strr:\n        # Adding the ASCII value of each character to sum\n        sum += ord(char)\n\n    # Taking modulo 26 of sum\n    sum %= 26\n\n    # Converting the result into a character\n    result = chr(sum)\n\n    return result\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def get_Char(strr):   \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    sum_ascii %= 26\n    return chr(sum_ascii + 65)\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def get_Char(strr):   \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # Initialize the sum of ASCII values as 0\n    sum_ascii = 0\n    \n    # Calculate the sum of ASCII values of all the characters of the string\n    for char in strr:\n        sum_ascii += ord(char)\n        \n    # Find the character made by adding the ASCII value of all the characters of the given string modulo 26\n    ascii_char = sum_ascii % 26\n    \n    # Convert the ASCII value to character\n    char_result = chr(ascii_char)\n    \n    return char_result\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # Calculate the sum of ASCII values of all characters in the string\n    sum_ascii = sum(ord(char) for char in strr)\n\n    # Find the character made by adding the ASCII value of all the characters of the given string modulo 26\n    result = sum_ascii % 26\n\n    # Convert the result to the corresponding character\n    char = chr(result + 65)\n\n    return char\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = sum(ord(c) for c in strr)\n    return chr(total % 26 + 65)\n"
    },
    {
        "number": 83,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    sum %= 26\n    return chr(sum)\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[sequence[i-1]] + sequence[i - sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n            sequence.append(next_num)\n        return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sequence(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[-1]] + seq[i - seq[-1]])\n        return seq\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        seq = [1, 1]\n        for i in range(2, n):\n            seq.append(seq[seq[i-1]] + seq[i - seq[i-1]])\n        return seq[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sequence(n):\n    if n == 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        sequence_list = [0, 1]\n        for i in range(2, n+1):\n            next_num = sequence_list[sequence_list[i-1]] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(next_num)\n        return sequence_list[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[i-1] + sequence[i-sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return \"Invalid input. n must be a positive integer greater than 0.\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[i-1] + sequence[i-sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Calculates the nth number in the Newman-Conway sequence.\n\n    Args:\n    n: the index of the number in the sequence to calculate\n\n    Returns:\n    The nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        seq = [0] * (n + 1)\n        seq[1] = 1\n        for i in range(2, n + 1):\n            seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n        return seq[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Returns the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        # Initialize the sequence with the first two terms\n        sequence = [1, 1]\n        # Compute the remaining terms\n        for i in range(2, n):\n            sequence.append(sequence[sequence[-1]] + sequence[i - sequence[-1]])\n        return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[sequence[i-1]] + sequence[i-sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n-1]\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef surface_area_sphere(r):\n    \"\"\"\n    This function takes in the radius of a sphere and calculates its surface area.\n    \"\"\"\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r**2)\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * (r ** 2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r**2)\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import math\n\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 85,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Returns the nth centered hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function finds the nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n    \"\"\"\n    return (n * ((2 * n) - 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    c_n = (n * (2 * n - 1)) + 1\n    return c_n\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1))"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(result_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    final_dict = dict(merged_dict)\n    return final_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged)\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    final_dict = dict(merged_dict)\n    return final_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = collections.defaultdict(int)\n    for elem in list1:\n        count_dict[elem] += 1\n    return count_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n    # loop through each element in the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its count\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # if the element is not in the dictionary, add it and set its count to 1\n        else:\n            freq_dict[element] = 1\n    # return the dictionary of frequencies\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = collections.Counter(list1)\n    return dict(frequency)\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # create a list of numbers from 1 to N-1\n    nums = list(range(1, N))\n    \n    # initialize variables to keep track of closest number and its distance\n    closest_num = None\n    closest_dist = float('inf')\n    \n    # iterate over the list of numbers\n    for num in nums:\n        # calculate the absolute distance between the current number and N\n        dist = abs(N - num)\n        \n        # if the distance is smaller than the closest distance so far, update the closest number and distance\n        if dist < closest_dist:\n            closest_num = num\n            closest_dist = dist\n    \n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Convert the number to a list of digits\n    num_list = list(str(N))\n    \n    # Loop through each digit in the list\n    for i in range(len(num_list)):\n        # If the current digit is not 0, try decreasing it by 1\n        if num_list[i] != '0':\n            num_list[i] = str(int(num_list[i]) - 1)\n            # Join the list of digits back into a number and return it\n            return int(''.join(num_list[:i+1]))\n    \n    # If all digits are 0, there is no smaller number\n    return None\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def closest_num(N):\n    \"\"\"\n    Find the closest smaller number than N.\n    \"\"\"\n    if N < 2:\n        return None\n    i = N - 1\n    while i >= 2:\n        if N % i == 0:\n            return i\n        i -= 1\n    return None\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # find the floor division of N by 2\n    floor_division = N // 2\n    # check if the floor division is equal to N divided by 2\n    if floor_division * 2 == N:\n        # if yes, then subtract 1 from the floor division\n        floor_division -= 1\n    # return the floor division\n    return floor_division\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize the closest number to zero\n    closest_num = 0\n    \n    # Loop through all the numbers from 2 to n-1\n    for i in range(2, N):\n        # Check if the current number is a closer number than the previous one\n        if N % i == 0 and N/i - i < N - closest_num:\n            closest_num = i\n    \n    # Return the closest smaller number\n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    i = N-1\n    while i >= 0:\n        if i < N:\n            return i\n        i -= 1\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Find the closest smaller number than N.\n    '''\n    i = N-1\n    while i > 0:\n        if N % i == 0:\n            return i\n        i -= 1\n    return None\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    closest_num = None\n    for i in range(N-1, 0, -1):\n        if i < N and i > closest_num:\n            closest_num = i\n    \n    return closest_num\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, -1, -1):\n        if i < N and i > 0:\n            return i\n    return None\n"
    },
    {
        "number": 89,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return None\n    \n    closest = None\n    for i in range(N-1, 0, -1):\n        if i < N and (closest is None or N-i < N-closest):\n            closest = i\n    \n    return closest\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = max(list1, key=len)\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = max(list1, key=len)\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = max(list1, key=len)\n    return len(longest_word)\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if not isinstance(str1, str):\n        return False\n    if not isinstance(sub_str, str):\n        return False\n    return sub_str in str1\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # check if sub_str is present in str1\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Split the string into a list of substrings\n    str_list = str1.split()\n    # Loop through each substring in the list\n    for substr in str_list:\n        # Check if the given substring is present in the current substring\n        if sub_str in substr:\n            return True\n    # If the given substring is not present in any of the substrings, return False\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    inc = False\n    dec = False\n    for i in range(len(s)-1):\n        if int(s[i]) < int(s[i+1]):\n            inc = True\n        elif int(s[i]) > int(s[i+1]):\n            dec = True\n        if inc and dec:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 2:\n        return False\n    s = str(n)\n    l = len(s)\n    for i in range(l-1):\n        if s[i] == s[i+1]:\n            return False\n        elif abs(int(s[i])-int(s[i+1])) != 1:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    if len(s) == 1:\n        return False\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            return False\n        elif i+1 == len(s)-1:\n            continue\n        elif abs(int(s[i])-int(s[i+1])) != 1:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert the number to a string\n    n_str = str(n)\n    \n    # Check if all digits in the number are the same\n    if len(set(n_str)) == 1:\n        return False\n    \n    # Check if the number is undulating or not\n    is_undulating = True\n    for i in range(len(n_str)-1):\n        if abs(int(n_str[i]) - int(n_str[i+1])) != 1:\n            is_undulating = False\n            break\n            \n    return is_undulating\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_undulating(n):  \n    # Convert the number to a string and check if it's undulating or not\n    str_n = str(n)\n    prev_digit = str_n[0]\n    for i in range(1, len(str_n)):\n        if str_n[i] == prev_digit:\n            return False\n        prev_digit = str_n[i]\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Convert the number to a string\n    s = str(n)\n    # Initialize a flag to keep track of whether we're going up or down\n    up = None\n    # Loop over each digit in the string\n    for i in range(len(s)-1):\n        # Compare the current digit with the next digit\n        if s[i] < s[i+1]:\n            # If the current digit is less than the next digit, we're going up\n            if up is False:\n                # If we were previously going down, return False\n                return False\n            up = True\n        elif s[i] > s[i+1]:\n            # If the current digit is greater than the next digit, we're going down\n            if up is True:\n                # If we were previously going up, return False\n                return False\n            up = False\n    # If we made it through the loop without returning False, return True\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 2:\n        return False\n    s = str(n)\n    inc = s[0] < s[1]\n    for i in range(1, len(s)):\n        if (s[i] < s[i-1]) == inc:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    This function takes an integer n as input and returns True if n is an undulating number, else False.\n    An undulating number is a positive integer that has at least two distinct prime factors and the difference between any two consecutive prime factors is either 2 or 4.\n    '''\n    if n < 2:\n        return False\n    \n    # Get the prime factors of n\n    prime_factors = []\n    for i in range(2, int(n**0.5)+1):\n        while n % i == 0:\n            prime_factors.append(i)\n            n //= i\n    if n > 1:\n        prime_factors.append(n)\n    \n    # Check if the prime factors satisfy the condition\n    if len(prime_factors) < 2:\n        return False\n    for i in range(len(prime_factors)-1):\n        if abs(prime_factors[i] - prime_factors[i+1]) not in [2, 4]:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is an undulating number, otherwise False.\n    An undulating number is a positive integer whose digits increase and decrease by 1 alternatively.\n    \"\"\"\n    # Convert the integer to a string\n    n_str = str(n)\n\n    # Initialize a variable to keep track of the direction of change in digits\n    direction = None\n\n    # Iterate through the digits of the number\n    for i in range(len(n_str)-1):\n        # Calculate the difference between the current digit and the next digit\n        diff = abs(int(n_str[i]) - int(n_str[i+1]))\n\n        # If the difference is not equal to 1, the number is not undulating\n        if diff != 1:\n            return False\n\n        # If the direction of change in digits is not yet determined, set it to the current difference\n        if direction is None:\n            direction = diff\n\n        # If the direction of change in digits is different from the current difference, the number is not undulating\n        elif direction != diff:\n            return False\n\n    # If all the digits of the number satisfy the conditions, the number is undulating\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check if a number is undulating or not.\n    A number is said to be undulating if the absolute difference between consecutive digits is 1.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    diffs = [abs(digits[i] - digits[i-1]) for i in range(1, len(digits))]\n    return all(diff == 1 for diff in diffs)\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def power(a, b):\n    \"\"\"\n    This function takes two arguments a and b and returns the value of a raised to the power b.\n    \"\"\"\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def power(a,b):\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function finds the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf') # set the minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):   \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # initialize min_length to infinity\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    \n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            \n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Find the length of each list in the input list\n    lengths = [len(sublist) for sublist in lst]\n    # Return the minimum length from the lengths list\n    return min(lengths)\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):   \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # set min_length to positive infinity\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min(len(sub_lst) for sub_lst in lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min(len(sublist) for sublist in lst)\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Given an integer n, returns the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Returns the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        if element not in frequency:\n            frequency[element] = 1\n        else:\n            frequency[element] += 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Flatten the list using nested loops\n    flattened_list = []\n    for sublist in list1:\n        for item in sublist:\n            flattened_list.append(item)\n    \n    # Create an empty dictionary to store the frequencies\n    frequencies = {}\n    \n    # Loop through the flattened list and count the frequency of each element\n    for item in flattened_list:\n        if item in frequencies:\n            frequencies[item] += 1\n        else:\n            frequencies[item] = 1\n    \n    # Return the dictionary of frequencies\n    return frequencies\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequencies\n    freq_dict = {}\n    \n    # Flatten the list of lists using nested loops and add each element to the dictionary\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n                \n    # Return the dictionary of frequencies\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    if len(numbers) == 0:\n        return None\n    else:\n        product = 1\n        for num in numbers:\n            product *= num\n        return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def multiply_num(numbers):   \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Initialize a variable to store the sum of the numbers in the list\n    sum = 0\n    \n    # Iterate through the list and add each number to the sum variable\n    for num in numbers:\n        sum += num\n    \n    # Calculate the average of the numbers by dividing the sum by the length of the list\n    average = sum / len(numbers)\n    \n    return average\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def multiply_num(numbers):   \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers in the list\n    result = 1\n    for num in numbers:\n        result *= num\n    \n    # Divide the result with the length of the list\n    final_result = result / len(numbers)\n    \n    return final_result\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function multiplies all the numbers in a list and divides the result with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # calculating the product of all numbers\n    product = 1\n    for num in numbers:\n        product *= num\n    # dividing the product with the length of the list and returning the result\n    return product / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert decimal number to binary number and return it as a string.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return ''\n    else:\n        return decimal_to_binary(n // 2) + str(n % 2)\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert integer to string\n    num_str = str(num)\n    # check if number is a palindrome\n    if num_str == num_str[::-1]:\n        # add 1 to number to make it not a palindrome\n        num += 1\n    # loop until next palindrome is found\n    while True:\n        # increment number by 1\n        num += 1\n        # convert number to string\n        num_str = str(num)\n        # check if number is a palindrome\n        if num_str == num_str[::-1]:\n            # if so, return as integer\n            return int(num_str)\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Given a positive integer num, return the next smallest palindrome\n    that is greater than or equal to num.\n    \"\"\"\n    def is_palindrome(n):\n        \"\"\"Helper function to check if a number is palindromic\"\"\"\n        return str(n) == str(n)[::-1]\n    \n    # if num is already palindromic, increment it by 1 and return\n    if is_palindrome(num):\n        return num + 1\n    \n    # convert num to a string to allow iteration through its digits\n    num_str = str(num)\n    \n    # iterate backwards through the string, checking if flipping a digit\n    # to make the remaining digits palindromic would make the entire\n    # number palindromic. If so, return the smallest such number.\n    for i in range(len(num_str) // 2):\n        # check if flipping the ith digit from the left makes the remaining\n        # digits palindromic\n        left_digit = int(num_str[i])\n        right_digit = int(num_str[-i-1])\n        if left_digit != right_digit:\n            # flip the left digit to match the right digit and check if the result is\n            # a palindrome\n            new_num = int(num_str[:i] + str(right_digit) + num_str[i+1:][::-1])\n            if is_palindrome(new_num):\n                return new_num\n    \n    # if we haven't found a palindrome yet, flip the leftmost digit and make the\n    # rest of the digits palindromic\n    rightmost_digit = int(num_str[-1])\n    if rightmost_digit == 9:\n        # if the rightmost digit is already 9, add 2 to the second rightmost digit\n        # and make the rest of the digits palindromic\n        second_rightmost_digit = int(num_str[-2])\n        new_num = int(num_str[:-2] + str(second_rightmost_digit + 1) + '0'*(len(num_str)-2) + str(second_rightmost_digit + 1))\n    else:\n        # otherwise, just flip the leftmost digit and make the rest of the digits palindromic\n        new_num = int(num_str[:-1] + str(rightmost_digit + 1) + '0'*(len(num_str)-2) + str(rightmost_digit + 1))\n    \n    # check if the new number is palindromic and return it if so\n    if is_palindrome(new_num):\n        return new_num\n    else:\n        # if the new number isn't palindromic, recurse with the new number\n        return next_smallest_palindrome(new_num)\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # convert the number to a string to check if it's already a palindrome\n    num_str = str(num)\n\n    # if the number is already a palindrome, add 1 to the last digit and check again\n    while num_str == num_str[::-1]:\n        # check if the last digit is 9, if so, carry over to the next digit\n        if num_str[-1] == '9':\n            num_str = '1' + '0' * len(num_str)    # add 1 to the last digit and carry over to the next digit\n        else:\n            # increment the last digit by 1\n            num_str = str(int(num_str[-1]) + 1) + num_str[:-1]\n\n    # convert the number back to an integer and return it\n    return int(num_str)\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num_str = str(num)\n    for i in range(1, len(num_str)):\n        left, mid, right = num_str[:-i], num_str[-i], num_str[1:-i]\n        if mid < '9':\n            return int(left + mid + right)\n        elif mid == '9':\n            next_num_str = left[:-1] + '0' + left[-1:] + left[-1] + right\n            return int(next_num_str)\n        else:\n            next_num_str = str(int(left) + 1).zfill(len(left) + 1) + left[-1]\n            return int(next_num_str)\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Helper function to check if a given number is a palindrome or not.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the integer to string and reverse it\n    reverse_num = str(num)[::-1]\n\n    # check if the reverse of the number is equal to the original number\n    if reverse_num == str(num):\n        # if the number is a palindrome, check for the next palindrome by adding 1 to the number and reverse it again\n        reverse_num = str(num + 1)[::-1]\n\n    # return the integer value of the reverse_num\n    return int(reverse_num)\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Given a positive integer num, find the next smallest palindrome that is greater than num.\n    If num is already a palindrome, return it.\n    \"\"\"\n    # Check if num is a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return num\n    # Find the next palindrome\n    next_num = int(num_str[::-1]) + 1\n    while True:\n        if str(next_num) == str(next_num)[::-1]:\n            return next_num\n        next_num += 1\n\n\nif __name__ == \"__main__\":\n    try:\n        num = int(input(\"Enter a positive integer: \"))\n        if num < 0:\n            print(\"Please enter a positive integer.\")\n        else:\n            next_palindrome = next_smallest_palindrome(num)\n            print(\"The next smallest palindrome greater than\", num, \"is\", next_palindrome)\n    except ValueError:\n        print(\"Invalid input. Please enter a positive integer.\") "
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the integer to a string\n    str_num = str(num)\n\n    # Check if the number is a palindrome\n    if str_num == str_num[::-1]:\n        # If it's a palindrome, add 1 to the number and check again\n        return next_smallest_palindrome(num + 1)\n\n    # Find the next smallest palindrome\n    for i in range(num + 1, sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\n\n    # If no next palindrome is found, return None\n    return None\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    def is_palindrome(n):\n        '''\n        Helper function to check if a number is a palindrome.\n        '''\n        return str(n) == str(n)[::-1]\n\n    if num < 10:\n        return num + 1\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num\n\n\nif __name__ == '__main__':\n    num = int(input('Enter a number: '))\n    print('Next smallest palindrome:', next_smallest_palindrome(num))\n"
    },
    {
        "number": 100,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Function to find the next smallest palindrome of a specified integer,\n    returned as an integer.\n    '''\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Convert k to 0-based indexing\n    k -= 1\n    # Sort the array in ascending order\n    arr.sort()\n    # Return the kth element\n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return \"Invalid input\"\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr) or k < 1:\n        return \"Invalid k value\"\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if k is within the range of the array\n    if k > len(arr) or k < 1:\n        return \"Invalid index.\"\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(w.capitalize() for w in words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join([w.capitalize() for w in words[1:]])\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the snake case string by underscore\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one and join them\n    return words[0] + ''.join(w.capitalize() for w in words[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split(\"_\")\n    return words[0] + \"\".join([w.capitalize() for w in words[1:]])\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Converts a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case = words[0] + ''.join([w.capitalize() for w in words[1:]])\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.title() for w in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel = words[0] + ''.join(w.title() for w in words[1:])\n    return camel\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from scipy.special import binom\n\ndef eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return int(binom(n-1, m-1))\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    if n < 0 or m < 0:\n        return 0\n    elif n == 0 and m == 0:\n        return 1\n    elif m == 0:\n        return 0\n    elif m == 1:\n        return 1\n    elif m == 2:\n        return n\n    else:\n        return (m-1)*(eulerian_num(n-1, m-2) + eulerian_num(n, m-1))"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m == 1:\n        return n + 1\n    else:\n        return (n * eulerian_num(n - 1, m)) + (m * eulerian_num(n, m - 1))\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from math import factorial\n\ndef eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 0 or m < 0 or n < m:\n        return None\n    else:\n        return factorial(n) // (factorial(m) * factorial(n-m))\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    elif m > n:\n        return 0\n    elif n == m:\n        return 1\n    else:\n        return (m * eulerian_num(n-1, m-1)) / (n-m+1)\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0 and n == 0:\n        return 1\n    elif n == 0 or m == 0:\n        return 0\n    else:\n        return m*eulerian_num(n-1, m-1) + (m-1)*eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    elif n == 0 or m < 0:\n        return 0\n    else:\n        return (m * eulerian_num(n-1, m-1)) + (n * eulerian_num(n-1, m))\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    # Initialize a 2D array to store the values of Eulerian numbers\n    euler = [[0 for j in range(n+1)] for i in range(n+1)]\n\n    # Base cases\n    for i in range(n+1):\n        euler[i][0] = 1\n    for j in range(n+1):\n        euler[j][j] = 1\n\n    # Fill the rest of the array using the recursive formula\n    for i in range(1, n+1):\n        for j in range(1, i):\n            euler[i][j] = euler[i-1][j-1] + (i-1)*euler[i-1][j]\n\n    # Return the Eulerian number a(n, m)\n    return euler[n][m]\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize a matrix to store the Eulerian numbers\n    eulerian = [[0 for i in range(n+1)] for j in range(n+1)]\n\n    # Base cases\n    for i in range(n+1):\n        eulerian[i][0] = 1\n\n    for i in range(n+1):\n        eulerian[i][i] = 1\n\n    # Fill the matrix using the recurrence relation\n    for i in range(2, n+1):\n        for j in range(1, i):\n            for k in range(j, i):\n                eulerian[i][j] += eulerian[i-1][j-1]*(i-j)*eulerian[i-k-1][j-1]\n\n    # Return the value of a(n, m)\n    return eulerian[n][m]\n"
    },
    {
        "number": 103,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    # Initialize a 2D array with zeros\n    e = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Base cases\n    for i in range(n+1):\n        e[i][0] = 1\n    for j in range(1, m+1):\n        e[0][j] = 0\n\n    # Fill the array using the algorithm\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, i+1):\n                e[i][j] += e[i-k][j-1]\n\n    # Return the requested element\n    return e[n][m]\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the input list\n    for i in range(len(input_list)):\n        # sort each sublist\n        input_list[i].sort()\n    # return the sorted input list\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    # iterate over each sublist in the input list\n    for i in range(len(input_list)):\n        # sort the sublist in place\n        input_list[i].sort()\n    # return the sorted list of lists\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count(lst):    \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count(lst):    \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count(lst):    \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count(lst): \n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count(lst):    \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple and concatenate them using the + operator\n    result = test_tup + tuple(test_list)\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result_tup = test_tup + tuple(test_list)\n    return result_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the tuple to a list\n    test_list_tup = list(test_tup)\n    # Append the list to the converted tuple\n    test_list_tup.append(test_list)\n    # Convert the updated tuple back to a tuple and return it\n    return tuple(test_list_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Converting the tuple to a list\n    tup_list = list(test_tup)\n    # Appending the list to the tuple list\n    tup_list.append(test_list)\n    # Converting the list back to tuple\n    new_tup = tuple(tup_list)\n    return new_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_tup) + test_list\n    return tuple(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heappush(merged_list, (num1[0], 0))\n    heapq.heappush(merged_list, (num2[0], 1))\n    heapq.heappush(merged_list, (num3[0], 2))\n\n    result = []\n    while merged_list:\n        val, list_idx = heapq.heappop(merged_list)\n        result.append(val)\n        if list_idx == 0:\n            num1.pop(0)\n            if num1:\n                heapq.heappush(merged_list, (num1[0], 0))\n        elif list_idx == 1:\n            num2.pop(0)\n            if num2:\n                heapq.heappush(merged_list, (num2[0], 1))\n        elif list_idx == 2:\n            num3.pop(0)\n            if num3:\n                heapq.heappush(merged_list, (num3[0], 2))\n\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heappush(merged_list, (num1[0], 0))\n    heapq.heappush(merged_list, (num2[0], 1))\n    heapq.heappush(merged_list, (num3[0], 2))\n    \n    while merged_list:\n        current_num, list_index = heapq.heappop(merged_list)\n        if list_index == 0:\n            num1.pop(0)\n        elif list_index == 1:\n            num2.pop(0)\n        else:\n            num3.pop(0)\n            \n        if not num1:\n            merged_list += [(x, 1) for x in num2] + [(x, 2) for x in num3]\n            break\n        elif not num2:\n            merged_list += [(x, 0) for x in num1] + [(x, 2) for x in num3]\n            break\n        elif not num3:\n            merged_list += [(x, 0) for x in num1] + [(x, 1) for x in num2]\n            break\n        else:\n            heapq.heappush(merged_list, (num1[0], 0))\n            heapq.heappush(merged_list, (num2[0], 1))\n            heapq.heappush(merged_list, (num3[0], 2))\n    \n    return [x[0] for x in merged_list]\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n\n    for num in num1:\n        heapq.heappush(heap, (num, 'num1'))\n\n    for num in num2:\n        heapq.heappush(heap, (num, 'num2'))\n\n    for num in num3:\n        heapq.heappush(heap, (num, 'num3'))\n\n    while heap:\n        num, num_list = heapq.heappop(heap)\n        merged_list.append(num)\n\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n    \n    for num in num1:\n        heapq.heappush(heap, (num, 1))\n    for num in num2:\n        heapq.heappush(heap, (num, 2))\n    for num in num3:\n        heapq.heappush(heap, (num, 3))\n        \n    while heap:\n        num, list_num = heapq.heappop(heap)\n        merged_list.append(num)\n        \n        if list_num == 1 and num1:\n            num = num1.pop(0)\n            heapq.heappush(heap, (num, 1))\n        elif list_num == 2 and num2:\n            num = num2.pop(0)\n            heapq.heappush(heap, (num, 2))\n        elif list_num == 3 and num3:\n            num = num3.pop(0)\n            heapq.heappush(heap, (num, 3))\n            \n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heap = []\n\n    # Add the first element of each list to the heap\n    for i in range(len(num1)):\n        heapq.heappush(heap, (num1[i], 0))\n    for i in range(len(num2)):\n        heapq.heappush(heap, (num2[i], 1))\n    for i in range(len(num3)):\n        heapq.heappush(heap, (num3[i], 2))\n\n    # Extract the smallest element from the heap and add it to the merged list\n    while heap:\n        smallest, list_num = heapq.heappop(heap)\n        merged_list.append(smallest)\n\n        # Add the next element from the same list to the heap (if there is one)\n        if list_num == 0 and i < len(num1) - 1:\n            i += 1\n            heapq.heappush(heap, (num1[i], 0))\n        elif list_num == 1 and i < len(num2) - 1:\n            i += 1\n            heapq.heappush(heap, (num2[i], 1))\n        elif list_num == 2 and i < len(num3) - 1:\n            i += 1\n            heapq.heappush(heap, (num3[i], 2))\n\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heappush(merged_list, (num1.pop(0), 0))\n    heapq.heappush(merged_list, (num2.pop(0), 1))\n    heapq.heappush(merged_list, (num3.pop(0), 2))\n\n    while merged_list:\n        val, idx = heapq.heappop(merged_list)\n        merged_list.append((num1[idx].pop(0), idx) if num1[idx] else None)\n        merged_list.append((num2[idx].pop(0), idx) if num2[idx] else None)\n        merged_list.append((num3[idx].pop(0), idx) if num3[idx] else None)\n\n        merged_list = [x for x in merged_list if x is not None]\n        heapq.heapify(merged_list)\n\n    return [val for val, idx in sorted(merged_list)]\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for num in heapq.merge(num1,num2,num3):\n        merged_list.append(num)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n    \n    for num in num1:\n        heapq.heappush(heap, (num, 1))\n    for num in num2:\n        heapq.heappush(heap, (num, 2))\n    for num in num3:\n        heapq.heappush(heap, (num, 3))\n    \n    while heap:\n        num, index = heapq.heappop(heap)\n        merged_list.append(num)\n        \n        if index == 1 and num1:\n            next_num = num1.pop(0)\n            heapq.heappush(heap, (next_num, 1))\n        elif index == 2 and num2:\n            next_num = num2.pop(0)\n            heapq.heappush(heap, (next_num, 2))\n        elif index == 3 and num3:\n            next_num = num3.pop(0)\n            heapq.heappush(heap, (next_num, 3))\n    \n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for num in heapq.merge(num1, num2, num3):\n        merged_list.append(num)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n\n    # Add the first elements of each list to the heap\n    for i in range(len(num1)):\n        heapq.heappush(heap, (num1[i], 1))\n    for i in range(len(num2)):\n        heapq.heappush(heap, (num2[i], 2))\n    for i in range(len(num3)):\n        heapq.heappush(heap, (num3[i], 3))\n\n    # Take the smallest element from the heap and add it to the merged list\n    while heap:\n        element, list_num = heapq.heappop(heap)\n        merged_list.append(element)\n\n        # Add the next element from the list that the element was taken from\n        if list_num == 1 and len(num1) > 0:\n            heapq.heappush(heap, (num1.pop(0), 1))\n        elif list_num == 2 and len(num2) > 0:\n            heapq.heappush(heap, (num2.pop(0), 2))\n        elif list_num == 3 and len(num3) > 0:\n            heapq.heappush(heap, (num3.pop(0), 3))\n\n    return merged_list\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        binary = int(s, 2)\n        binary = (binary << 1) | (binary >> len(s) - 1)\n        if binary % 2 == 1:\n            count += 1\n        s = bin(binary)[2:].zfill(len(s))\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        # concatenate the string with itself and take the i-th character\n        if int(s[i % len(s)]) % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if int(s, 2) % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function takes a binary string and a number n as input and returns the number of numbers with an odd value when rotating the binary string n times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if int(s, 2) % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n+1):\n        binary_string = s[i:] + s[:i]\n        decimal_number = int(binary_string, 2)\n        if decimal_number % 2 != 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(len(s)):\n        if int(s[i])%2 != 0:\n            count += 1\n            s = s[i+1:]+s[:i+1]\n            n -= 1\n            if n == 0:\n                return count\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n):\n    # convert binary string to integer\n    num = int(s, 2)\n    # rotate binary string n times\n    for i in range(n):\n        # find the binary equivalent of the decimal equivalent of the given number\n        # if the binary equivalent has odd number of 1's, increment count\n        binary_str = bin(num)[2:]\n        if binary_str.count('1') % 2 != 0:\n            count += 1\n        # rotate the binary string by one position\n        num = (num << 1) | (num >> (len(s)-1))\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if int(s, 2) % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function finds the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        # rotate the string one position to the right\n        s = s[-1] + s[:-1]\n        # check if the decimal equivalent of the binary string is odd\n        if int(s, 2) % 2 == 1:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(len(s)):\n        # rotate the string s by n positions\n        rotated = s[i:]+s[:i]\n        # convert rotated string to integer\n        num = int(rotated, 2)\n        # check if the number is odd\n        if num % 2 == 1:\n            count += 1\n    # return the count of odd numbers\n    return count\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Find the common elements in given nested lists.\n    '''\n    # First, flatten the nested list using a list comprehension\n    flattened = [item for sublist in nestedlist for item in sublist]\n    \n    # Next, create a set of the unique elements in the flattened list\n    unique = set(flattened)\n    \n    # Finally, create a list of the common elements by filtering the set for elements that appear more than once\n    common = [item for item in unique if flattened.count(item) > 1]\n    \n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements = common_elements.intersection(set(sublist))\n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # converting the nested list into a single list\n    single_list = [item for sublist in nestedlist for item in sublist]\n    \n    # finding the common elements using Counter\n    from collections import Counter\n    count = Counter(single_list)\n    common_elements = [key for key, value in count.items() if value > 1]\n    \n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Finds the common elements in given nested lists.\n    '''\n    # Flatten the nested list using a list comprehension\n    flattened_list = [item for sublist in nestedlist for item in sublist]\n    \n    # Use a set to find the unique elements in the flattened list\n    unique_elements = set(flattened_list)\n    \n    # Create a list of the elements that appear multiple times\n    common_elements = []\n    for element in unique_elements:\n        if flattened_list.count(element) > 1:\n            common_elements.append(element)\n    \n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # convert all lists to sets and take intersection\n    common_set = set(nestedlist[0]).intersection(*nestedlist)\n    \n    # convert set back to list and return\n    return list(common_set)\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    flattened = [item for sublist in nestedlist for item in sublist]\n    return set.intersection(*map(set, nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(set(lst))\n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        common_elements = common_elements.intersection(set(nestedlist[i]))\n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty set to hold the common elements\n    common_elements = set()\n\n    # iterate over the sublists\n    for sublist in nestedlist:\n        # iterate over the elements in the sublist\n        for element in sublist:\n            # if the element is in all previous sublists, add it to the common set\n            if all(element in sub for sub in nestedlist):\n                common_elements.add(element)\n\n    # return the set of common elements\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Finds common elements in given nested lists.\n    \"\"\"\n    flattened_list = [item for sublist in nestedlist for item in sublist]\n    common_elements = set(flattened_list)\n    for element in flattened_list:\n        if element not in common_elements:\n            common_elements.remove(element)\n    return common_elements\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for d in list1:\n        if d:\n            empty = False\n            break\n    return empty\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def empty_dict(list1):\n    '''\n    Check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def empty_dict(list1):\n    \"\"\"\n    This function takes a list of dictionaries as input and returns True if all the dictionaries in the list are empty.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def empty_list(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if isinstance(i, dict) and i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def empty_dict(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d) != 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Initializing a flag to check if all dictionaries are empty\n    flag = True\n    \n    # Iterating through each dictionary in the list\n    for i in range(len(list1)):\n        # If the dictionary is not empty, set the flag to False and break the loop\n        if list1[i]:\n            flag = False\n            break\n    \n    # Returning the result based on the flag\n    if flag:\n        return True\n    else:\n        return False"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Converts a tuple of positive integers to a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for n in nums:\n        result = result * 10 + n\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for n in nums:\n        result = result * 10 + n\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result*10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for n in nums:\n        result = result * 10 + n\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result*10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Converts all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        elif isinstance(item, str):\n            try:\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        result_sublist = []\n        for item in sublist:\n            try:\n                result_sublist.append(float(item))\n            except ValueError:\n                result_sublist.append(item)\n        result.append(result_sublist)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, sublist in enumerate(test_list):\n        for j, element in enumerate(sublist):\n            try:\n                test_list[i][j] = float(element)\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        temp = []\n        for item in sublist:\n            try:\n                temp.append(float(item))\n            except ValueError:\n                temp.append(item)\n        result.append(temp)\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, sublist in enumerate(test_list):\n        for j, item in enumerate(sublist):\n            try:\n                test_list[i][j] = float(item)\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in test_list:\n        sub_result = []\n        for j in i:\n            try:\n                sub_result.append(float(j))\n            except ValueError:\n                sub_result.append(j)\n        result.append(sub_result)\n    return result\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def string_to_list(string):  \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def string_to_list(string):  \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character and return the list\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    if len(arr) == 1:\n        return arr[0]\n    \n    if arr[0] != arr[1]:\n        return arr[0]\n    \n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    \n    for i in range(1, len(arr)-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    \n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    left, right = 1, n-2\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:\n            return arr[mid]\n        elif arr[mid] == arr[mid-1]:\n            right = mid - 1\n        else:\n            left = mid + 1"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif arr[0] != arr[1]:\n        return arr[0]\n    elif arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    else:\n        for i in range(2, n-2):\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0, len(arr)-1, 2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    return arr[-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Finds the element that appears only once in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n\n    Returns:\n    int: The element that appears only once in the list.\n    \"\"\"\n\n    # Initialize variables to keep track of the element that appears only once.\n    unique_element = None\n    count = 0\n\n    # Loop through the list and count how many times each element appears.\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i - 1]:\n            count = 1\n        else:\n            count += 1\n\n        # If we find an element that appears only once, return it.\n        if count == 1 and i == len(arr) - 1:\n            return arr[i]\n        elif count == 1 and arr[i] != arr[i + 1]:\n            return arr[i]\n\n    # If we don't find an element that appears only once, return None.\n    return unique_element\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Given a sorted array arr, find the element that appears only once.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif arr[0] != arr[1]:\n        return arr[0]\n    elif arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    else:\n        for i in range(2, n-2):\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    else:\n        for i in range(n-1):\n            if arr[i] != arr[i+1]:\n                if i == 0:\n                    return arr[i]\n                elif i == n-2:\n                    return arr[i+1]\n                else:\n                    if arr[i] != arr[i-1]:\n                        return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif arr[0] != arr[1]:\n        return arr[0]\n    elif arr[-1] != arr[-2]:\n        return arr[-1]\n    else:\n        for i in range(2, n-1):\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    elif arr[0] != arr[1]:\n        return arr[0]\n    elif arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    else:\n        for i in range(2, n-1):\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0] or arr[1]\n    else:\n        if arr[0] != arr[1]:\n            return arr[0]\n        elif arr[len(arr)-1] != arr[len(arr)-2]:\n            return arr[len(arr)-1]\n        else:\n            for i in range(1, len(arr)-1):\n                if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                    return arr[i]\n            return None\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product1 = abs(list1[i][0] * list1[j][1])\n            product2 = abs(list1[i][1] * list1[j][0])\n            max_product = max(max_product, product1, product2)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if abs(product) > abs(max_product):\n            max_product = product\n    return abs(max_product)\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            max_product = max(max_product, product)\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')  # initialize max product to negative infinity\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    \n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n                \n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product1 = abs(list1[i][0]*list1[j][1])\n            product2 = abs(list1[i][1]*list1[j][0])\n            if product1 > product2:\n                max_product = max(max_product, product1)\n            else:\n                max_product = max(max_product, product2)\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_of_proper_divisors(n):\n        divisors = [i for i in range(1, n) if n % i == 0]\n        return sum(divisors)\n    \n    total = 0\n    for i in range(1, limit+1):\n        j = sum_of_proper_divisors(i)\n        if j <= limit and sum_of_proper_divisors(j) == i:\n            if i != j:\n                total += i + j\n    \n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_amicable(num):\n    '''\n    Returns True if the given number is amicable, False otherwise.\n    '''\n    # Calculate the sum of proper divisors of num\n    divisor_sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            divisor_sum += i\n    # Check if num and divisor_sum are amicable\n    if divisor_sum != num and num == sum([i for i in range(1, divisor_sum) if divisor_sum % i == 0 and i != divisor_sum]):\n        return True\n    else:\n        return False\n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize sum variable\n    total_sum = 0\n    # Iterate through all numbers from 1 to limit\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            total_sum += i\n    # Return the sum of all amicable numbers\n    return total_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_amicable(num):\n    divisor_sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\ndef amicable_numbers_sum(limit):\n    total = 0\n    for i in range(1, limit+1):\n        if is_amicable(i) != i and is_amicable(is_amicable(i)) == i:\n            total += i\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Returns True if the given number is amicable, False otherwise.\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            divisors_sum += i\n    return divisors_sum == num\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            total += i\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_of_amicable_numbers(limit):\n    def is_amicable(n):\n        sum_divisors = 0\n        for i in range(1, n):\n            if n % i == 0:\n                sum_divisors += i\n        if sum_divisors == n:\n            return False\n        elif sum_divisors > n:\n            if is_amicable(sum_divisors):\n                return True\n        return False\n\n    sum_amicable_numbers = 0\n    for i in range(2, limit+1):\n        if is_amicable(i):\n            sum_amicable_numbers += i\n\n    return sum_amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total_sum = 0\n    for i in range(1, limit+1):\n        divisor_sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                divisor_sum += j\n        if divisor_sum != i and divisor_sum <= limit:\n            if sum(range(1, divisor_sum)) == i:\n                total_sum += i\n    return total_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        '''\n        Helper function to check if a number is amicable.\n        '''\n        divisors_sum = sum([i for i in range(1, num) if num % i == 0])\n        return divisors_sum != num and divisors_sum in range(1, limit)\n    \n    amicable_numbers = [i for i in range(1, limit) if is_amicable(i)]\n    amicable_numbers_sum = sum(amicable_numbers)\n    return amicable_numbers_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    def is_amicable(n):\n        # Compute the sum of proper divisors of n\n        divisor_sum = sum(d for d in range(1, n) if n % d == 0)\n        # Check if the sum is equal to n and n is not a perfect square\n        return divisor_sum == n and n != int(n ** 0.5 + 0.5) ** 2\n    \n    # Sum all amicable numbers from 1 to limit\n    return sum(n for n in range(1, limit+1) if is_amicable(n))\n"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_factors(n):\n        factors = [i for i in range(1, n) if n % i == 0]\n        return sum(factors)\n\n    total = 0\n    for num in range(1, limit+1):\n        other = sum_factors(num)\n        if num != other and num == sum_factors(other):\n            total += num\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(n):\n        '''\n        Returns True if n is an amicable number, False otherwise.\n        '''\n        div_sum = sum(d for d in range(1, n) if n % d == 0)\n        return div_sum != n and div_sum in range(1, n)\n\n    # initialize sum to zero\n    total = 0\n\n    # loop through numbers from 1 to limit\n    for n in range(1, limit+1):\n        # check if n is an amicable number\n        if is_amicable(n):\n            # add n to total if it is\n            total += n\n\n    return total\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = a + b*1j\n    return cmath.phase(z)*180/cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    angle = cmath.phase(z)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_number = complex(a, b)\n    angle = cmath.phase(complex_number)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_number = complex(a, b)\n    angle = cmath.phase(complex_number)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    angle = cmath.phase(z)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_str = string[i:j+1]\n            count_0 = sub_str.count('0')\n            count_1 = sub_str.count('1')\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    zeros = [0]*n\n    ones = [0]*n\n    zeros[0] = int(string[0]=='0')\n    ones[0] = int(string[0]=='1')\n    for i in range(1, n):\n        zeros[i] = zeros[i-1] + int(string[i]=='0')\n        ones[i] = ones[i-1] + int(string[i]=='1')\n    diff = abs(zeros[0]-ones[0])\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            diff = max(diff, abs(zeros[j-1]-ones[j-1]-zeros[i-1]+ones[i-1]))\n    return diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count_0 = count_1 = 0\n    for i in string:\n        if i == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_length(string):\n    max_diff = 0\n    count0 = 0\n    count1 = 0\n    for char in string:\n        if char == '0':\n            count0 += 1\n        elif char == '1':\n            count1 += 1\n        diff = abs(count0 - count1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_length(string):\n    zeros = [0] * len(string)\n    ones = [0] * len(string)\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros[i] = (zeros[i-1] + 1 if i > 0 else 1)\n            ones[i] = ones[i-1] if i > 0 else 0\n        else:\n            ones[i] = ones[i-1] + 1 if i > 0 else 1\n            zeros[i] = zeros[i-1] if i > 0 else 0\n    return max(max(zeros) - min(ones), max(ones) - min(zeros))\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_length(string):\n    max_diff = 0\n    count_0 = count_1 = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n            \n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n    \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_length(string):\n    n = len(string)\n    diff = [0] * n\n    \n    for i in range(n):\n        if string[i] == '0':\n            diff[i] = -1\n        elif string[i] == '1':\n            diff[i] = 1\n            \n    for i in range(1, n):\n        diff[i] += diff[i-1]\n        \n    max_diff = diff[0]\n    \n    for i in range(1, n):\n        if diff[i] - diff[i-1] > max_diff:\n            max_diff = diff[i] - diff[i-1]\n            \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_length(string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            sub_str = string[i:j+1]\n            num_zeros = sub_str.count('0')\n            num_ones = sub_str.count('1')\n            diff = abs(num_zeros - num_ones)\n            max_diff = max(max_diff, diff)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_length(string):\n    ones = 0\n    zeros = 0\n    max_diff = 0\n    \n    for char in string:\n        if char == '1':\n            ones += 1\n        else:\n            zeros += 1\n            \n        diff = abs(ones - zeros)\n        \n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Calculate the sum of common divisors\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\n\nresult = sum_of_common_divisors(a, b)\nprint(\"The sum of common divisors of\", a, \"and\", b, \"is:\", result)\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # create an empty list to store the common divisors\n    common_divisors = []\n    # iterate through the range from 1 to a // 2\n    for i in range(1, a // 2 + 1):\n        # check if i is a factor of both a and b\n        if a % i == 0 and b % i == 0:\n            # if i is a common factor, append it to the common_divisors list\n            common_divisors.append(i)\n    # return the sum of common divisors\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def gcd(a,b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef sum_common_divisors(a, b):\n    sum = 0\n    for i in range(1, gcd(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef sum_of_common_divisors(a, b):\n    common_divisors_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum\n\ndef sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return sum_of_common_divisors(a, b)\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_common_divisors(a, b):\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\na = int(input(\"Enter the first number: \"))\nb = int(input(\"Enter the second number: \"))\n\nprint(\"The sum of common divisors of\", a, \"and\", b, \"is\", sum_common_divisors(a, b))\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    Args:\n    a (int): First number\n    b (int): Second number\n\n    Returns:\n    int: Sum of common divisors of a and b\n\n    \"\"\"\n\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    # Calculate the sum of the common divisors\n    sum_of_divisors = sum(common_divisors)\n\n    return sum_of_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Return the sum of common divisors\n    return sum(common_divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function multiplies two integers and returns the result.\n    \"\"\"\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function multiplies two integers and returns the result.\n    \"\"\"\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words_list = str.split()\n    long_words_list = []\n    for word in words_list:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Returns a list of words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Check if the matrix is a magic square.\n    '''\n    # get dimensions of matrix\n    n = len(my_matrix)\n\n    # check if matrix is square\n    if n == 0:\n        return False\n    for row in my_matrix:\n        if len(row) != n:\n            return False\n\n    # compute sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[j][i] for j in range(n)) for i in range(n)]\n\n    # check if sum of diagonal elements is equal to sum of rows and columns\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag1_sum != diag2_sum or diag1_sum not in row_sums or diag1_sum not in col_sums:\n        return False\n\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    total = sum(my_matrix[0])\n    for i in range(n):\n        if sum(my_matrix[i]) != total:\n            return False\n        if sum(my_matrix[j][i] for j in range(n)) != total:\n            return False\n    if sum(my_matrix[i][i] for i in range(n)) != total:\n        return False\n    if sum(my_matrix[i][n-i-1] for i in range(n)) != total:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is square\n    rows, cols = len(my_matrix), len(my_matrix[0])\n    if rows != cols:\n        return False\n\n    # Check if all rows and columns have the same sum\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(rows)) for j in range(cols)]\n    if len(set(row_sums)) != 1 or len(set(col_sums)) != 1:\n        return False\n\n    # Check if the diagonal sums are equal\n    diag1_sum = sum(my_matrix[i][i] for i in range(rows))\n    diag2_sum = sum(my_matrix[i][rows-i-1] for i in range(rows))\n    if diag1_sum != diag2_sum:\n        return False\n\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    # Calculate the sum of the first column\n    col_sum = sum(my_matrix[j][0] for j in range(n))\n    # Calculate the sum of the diagonal from top-left to bottom-right\n    diag_sum = sum(my_matrix[i][i] for i in range(n))\n    # Calculate the sum of the diagonal from top-right to bottom-left\n    diag2_sum = sum(my_matrix[i][n-1-i] for i in range(n))\n    # Check if all sums are equal\n    if row_sum == col_sum == diag_sum == diag2_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    \n    # calculate the sum of each row and each column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    \n    # calculate the sum of diagonal elements\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    \n    # check if all row sums, column sums, and diagonal sums are equal\n    if len(set(row_sums)) != 1 or len(set(col_sums)) != 1 or diag1_sum != diag2_sum:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Function to check if a matrix is a magic square.\n    \"\"\"\n    # Get the length of the matrix\n    n = len(my_matrix)\n\n    # Calculate the sum of first row\n    row_sum = sum(my_matrix[0])\n\n    # Calculate the sum of first column\n    col_sum = sum(my_matrix[i][0] for i in range(n))\n\n    # Calculate the sum of diagonal elements\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n\n    # Check if all the rows, columns and diagonal sums are equal\n    for i in range(1, n):\n        if sum(my_matrix[i]) != row_sum or sum(my_matrix[j][i] for j in range(n)) != col_sum:\n            return False\n\n    if diag1_sum != row_sum or diag2_sum != row_sum:\n        return False\n\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Check whether a given matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    total = sum(my_matrix[0])\n    \n    # Check rows\n    for i in range(n):\n        if sum(my_matrix[i]) != total:\n            return False\n    \n    # Check columns\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += my_matrix[i][j]\n        if column_sum != total:\n            return False\n    \n    # Check diagonals\n    diagonal_sum1 = 0\n    diagonal_sum2 = 0\n    for i in range(n):\n        diagonal_sum1 += my_matrix[i][i]\n        diagonal_sum2 += my_matrix[i][n-i-1]\n    if diagonal_sum1 != total or diagonal_sum2 != total:\n        return False\n    \n    # If everything checks out, it's a magic square!\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    total = sum(my_matrix[0])\n    for i in range(1, n):\n        if sum(my_matrix[i]) != total:\n            return False\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum != total:\n            return False\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag1_sum != total or diag2_sum != total:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    # Calculate the sum of the first column\n    col_sum = sum(my_matrix[i][0] for i in range(n))\n    # Calculate the sum of the diagonal from top-left to bottom-right\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    # Calculate the sum of the diagonal from top-right to bottom-left\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    # Check if all the sums are equal\n    if row_sum == col_sum == diag1_sum == diag2_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_1 = sum(my_matrix[0])\n    sum_2 = sum(my_matrix[n-1])\n    \n    # Check if the sums of the first row and last row are equal\n    if sum_1 != sum_2:\n        return False\n    \n    # Check if the sums of the first column and last column are equal\n    for i in range(n):\n        if my_matrix[i][0] != my_matrix[i][n-1]:\n            return False\n    \n    # Check if the sum of each diagonal is equal\n    diag_sum_1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum_2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag_sum_1 != diag_sum_2:\n        return False\n    \n    # If all conditions are satisfied, return True\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = max(counts.values())\n    max_items = [key for key, value in counts.items() if value == max_count]\n    return max_items\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_num = [key for key, value in freq.items() if value == max_freq]\n    return max_num[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_freq_items = []\n    for key, value in freq_dict.items():\n        if value == max_freq:\n            max_freq_items.append(key)\n    return max_freq_items\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a defaultdict to store the count of each element in the list\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    \n    # find the item with maximum count\n    max_item = None\n    max_count = 0\n    for item, count in counts.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n    \n    return max_item, max_count\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_item = [key for key, value in freq_dict.items() if value == max_freq][0]\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    max_count = 0\n    max_item = None\n    for item, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with the maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n            \n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_item = None\n    max_count = 0\n    \n    for num in nums:\n        count_dict[num] += 1\n        \n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n            \n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_items = [key for key, value in freq_dict.items() if value == max_freq]\n    return max_items\n"
    },
    {
        "number": 130,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the count of each item\n    count_dict = defaultdict(int)\n    # Iterate through the list and update the count of each item in the dictionary\n    for num in nums:\n        count_dict[num] += 1\n    # Find the maximum count of any item in the dictionary\n    max_count = max(count_dict.values())\n    # Find all items that have the maximum count\n    max_items = [k for k, v in count_dict.items() if v == max_count]\n    # Return the first item from the list of max_items\n    return max_items[0]\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    str1_vowels = [c for c in str1 if c in vowels]\n    str1_vowels.reverse()\n    result = ''\n    i = 0\n    for c in str1:\n        if c in vowels:\n            result += str1_vowels[i]\n            i += 1\n        else:\n            result += c\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i].lower() not in vowels and str1[j].lower() not in vowels:\n            i += 1\n            j -= 1\n            continue\n        if str1[i].lower() in vowels and str1[j].lower() not in vowels:\n            i += 1\n            continue\n        if str1[i].lower() not in vowels and str1[j].lower() in vowels:\n            j -= 1\n            continue\n        str1[i], str1[j] = str1[j], str1[i]\n        i += 1\n        j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    # extract vowels from the string\n    vowels_list = [char for char in str1 if char in vowels]\n    # reverse the extracted vowels\n    vowels_list.reverse()\n    # create an empty string to store the result\n    result = ''\n    # iterate over the characters in the original string\n    for char in str1:\n        # if the character is a vowel, add the reversed vowel from the list\n        if char in vowels:\n            result += vowels_list.pop()\n        # otherwise, add the original character\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1_list = list(str1)\n    vowel_list = []\n    for char in str1_list:\n        if char.lower() in vowels:\n            vowel_list.append(char)\n    reversed_vowels = vowel_list[::-1]\n    i = 0\n    for char in str1_list:\n        if char.lower() in vowels:\n            str1_list[str1_list.index(char)] = reversed_vowels[i]\n            i += 1\n    return ''.join(str1_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    vowels_in_str = [c for c in str1 if c in vowels]\n    str_list = list(str1)\n    for i in range(len(str_list)):\n        if str_list[i] in vowels:\n            str_list[i] = vowels_in_str.pop()\n    return ''.join(str_list)"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    vowels_list = [char for char in str1_list if char in vowels]\n    vowels_list.reverse()\n    index = 0\n    for char in str1_list:\n        if char in vowels:\n            str1_list[index] = vowels_list.pop(0)\n        index += 1\n    return \"\".join(str1_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    vowel_list = []\n    \n    # Extract vowels from the string and store in a list\n    for char in str_list:\n        if char in vowels:\n            vowel_list.append(char)\n    \n    # Reverse the vowels list\n    vowel_list = vowel_list[::-1]\n    \n    # Replace vowels in the original string with the reversed vowels\n    i = 0\n    for j, char in enumerate(str_list):\n        if char in vowels:\n            str_list[j] = vowel_list[i]\n            i += 1\n    \n    # Convert the list back to a string and return it\n    return \"\".join(str_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_in_str = [c for c in str1 if c in vowels]\n    vowels_in_str.reverse()\n    str_list = list(str1)\n    vowel_index = 0\n    for i, c in enumerate(str_list):\n        if c in vowels:\n            str_list[i] = vowels_in_str[vowel_index]\n            vowel_index += 1\n    return \"\".join(str_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    vowels_in_str = [c for c in str1 if c in vowels]\n    vowels_in_str.reverse()\n    new_str = ''\n    vowel_idx = 0\n    for c in str1:\n        if c in vowels:\n            new_str += vowels_in_str[vowel_idx]\n            vowel_idx += 1\n        else:\n            new_str += c\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i].lower() in vowels and str1[j].lower() in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n        elif str1[i].lower() in vowels:\n            j -= 1\n        elif str1[j].lower() in vowels:\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(i) for i in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join([str(i) for i in tup1])\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in tup1:\n        str1 += str(i) + ' '\n    return str1.strip()\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''.join(str(i) for i in tup1)\n    return str_tup\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''\n    for item in tup1:\n        str_tup += str(item) + ' '\n    return str_tup.strip()\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for element in tup1:\n        str1 += str(element) + \" \"\n    return str1.rstrip()\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Convert a tuple to a string.\n    '''\n    s = ','.join(str(x) for x in tup1)\n    return '(' + s + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(i) for i in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''.join(map(str, tup1))\n    return str_tup\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Loop through the list and add the negative numbers to the sum\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum of negative numbers\n    sum_neg = 0\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # Check if the number is negative\n        if num < 0:\n            # Add the negative number to the sum of negative numbers\n            sum_neg += num\n    \n    # Return the sum of negative numbers\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize the sum of negative numbers to zero\n    neg_sum = 0\n    # Iterate over the list of numbers\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            neg_sum += num\n    # Return the sum of negative numbers\n    return neg_sum\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def hexagonal_num(n):  \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    This function finds the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def hexagonal_num(n):  \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    This function finds the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # initialize variables for counting zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # loop through the array and count zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # calculate the ratio of zeroes to non-zeroes and return it\n    ratio = zero_count / non_zero_count if non_zero_count > 0 else 0\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    ratio = zero_count / non_zero_count\n\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = nums.count(0)\n    non_zeros = len(nums) - zeros\n    if non_zeros == 0:\n        return float('inf')\n    else:\n        return zeros / float(non_zeros)\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n    \n    if nonzero_count == 0:\n        return 0\n    else:\n        return zero_count/nonzero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_nonzero = 0\n\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n\n    return count_zero / count_nonzero\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # count the number of zeroes and non-zeroes in the array\n    zero_count = 0\n    nonzero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n    # calculate the ratio of zeroes to non-zeroes\n    if nonzero_count == 0:\n        ratio = float('inf')  # avoid division by zero\n    else:\n        ratio = zero_count / nonzero_count\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_non_zeroes = 0\n    count_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n            \n    if count_zeroes == 0:\n        return \"No zeroes found.\"\n    else:\n        ratio = count_zeroes / (count_zeroes + count_non_zeroes)\n        return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    ratio = zeroes / non_zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return 0\n    else:\n        return zeroes/non_zeroes"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    while n:\n        if n & 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1 == 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    while n != 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n:\n        if n & 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n == 0:\n        return False\n\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert n to binary\n    binary_n = bin(n)[2:]\n    # Check if each digit is either 0 or 1\n    for digit in binary_n:\n        if digit not in ['0', '1']:\n            return False\n    # Check if the binary representation contains any consecutive zeros\n    if '00' in binary_n:\n        return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1 == 1:\n            return True\n        n = n >> 1\n    return False\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    This function calculates the circumference of a circle.\n    \"\"\"\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for i in test_list:\n        if type(i) == list:\n            flat_list.extend(i)\n        else:\n            flat_list.append(i)\n    return set(flat_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for element in sublist:\n            flattened_list.append(element)\n    return set(flattened_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = set()\n    for sublist in test_list:\n        for item in sublist:\n            result.add(item)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = set()\n    for sublist in test_list:\n        for item in sublist:\n            flattened.add(item)\n    return flattened\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    unique_numbers = set(flattened_list)\n    return unique_numbers\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # initialize an empty set\n    num_set = set()\n    \n    # loop through each item in the list\n    for item in test_list:\n        # if the item is a list, recursively call the function\n        if isinstance(item, list):\n            num_set.update(extract_singly(item))\n        # if the item is a number, add it to the set\n        elif isinstance(item, int):\n            num_set.add(item)\n    \n    # return the set of numbers\n    return num_set\n"
    },
    {
        "number": 140,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result |= extract_singly(item)\n        else:\n            result.add(item)\n    return result\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort.\n    '''\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in the list\n        max_idx = nums.index(max(nums[:n]))\n        # Reverse the list from 0 to max_idx + 1\n        nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n        # Reverse the entire list\n        nums = nums[:n][::-1]\n        n -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in the list\n        max_idx = nums.index(max(nums[:i]))\n        # Reverse the list from 0 to max_idx\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        # Reverse the list from 0 to i\n        nums[:i] = reversed(nums[:i])\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in the list\n        mi = nums.index(max(nums[:n]))\n        # Reverse the list from index 0 to mi\n        nums = nums[mi::-1] + nums[mi+1:]\n        # Reverse the list from index 0 to n-1\n        nums = nums[-1:n:-1] + nums[n:]\n        n -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # find the index of the maximum element in the unsorted part of the list\n        max_idx = nums.index(max(nums[:i+1]))\n        # reverse the list from 0 to max_idx+1 (inclusive)\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        # reverse the entire list\n        nums[:i+1] = reversed(nums[:i+1])\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in the list\n        max_index = nums.index(max(nums[:n]))\n        # Reverse the list from 0 to max_index\n        nums = nums[max_index::-1] + nums[max_index+1:]\n        # Reverse the list from 0 to n-1\n        nums = nums[n-1::-1] + nums[n:]\n        n -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        max_idx = i\n        for j in range(0, i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        if max_idx != i:\n            nums[max_idx], nums[i] = nums[i], nums[max_idx]\n        if i == 1:\n            break\n        flipped = nums[:i+1]\n        flipped.reverse()\n        nums = flipped + nums[i+1:]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of numbers using the \"pancake sort\" algorithm.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in the list\n        max_idx = nums.index(max(nums[:n]))\n        # Reverse the list from 0 to max_idx+1\n        nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n        # Reverse the entire list\n        nums = nums[:n][::-1]\n        n -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_idx = nums.index(max(nums[:i]))\n\n        # Reverse the list from the maximum element to the beginning\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n\n        # Reverse the entire list\n        nums[:i] = reversed(nums[:i])\n\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # Find the index of the maximum element in the list\n        max_index = nums.index(max(nums[:i+1]))\n        \n        # Reverse the list from 0 to max_index+1\n        nums[:max_index+1] = reversed(nums[:max_index+1])\n        \n        # Reverse the list from 0 to i+1\n        nums[:i+1] = reversed(nums[:i+1])\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        if i-1 != max_index:\n            nums = nums[:i][::-1] + nums[i:]\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_lists(input_tuple):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in input_tuple:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_lists(input_tuple):\n    count = 0\n    for item in input_tuple:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_lists(input_tuple):\n    \"\"\"\n    Counts the number of lists in a tuple recursively.\n    \"\"\"\n    count = 0\n    for item in input_tuple:\n        if isinstance(item, list):\n            count += 1\n            count += find_lists(item)\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_lists(Input):  \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1]) # initialize the max_diff variable\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            abs_diff = abs(arr[i] - arr[j])\n            if abs_diff > max_diff:\n                max_diff = abs_diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a solution exists\n    if a == 0 and b == 0 and n != 0:\n        return None\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    # check if a solution exists\n    if n % gcd(a, b) == 0:\n        # find B\u00e9zout's coefficients\n        (x, y) = bezout(a, b)\n        x0 = x * (n // gcd(a, b))\n        y0 = y * (n // gcd(a, b))\n        return (x0, y0)\n    else:\n        return None\n\ndef gcd(a, b):\n    '''\n    Compute the greatest common divisor of a and b using Euclid's algorithm.\n    '''\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef bezout(a, b):\n    '''\n    Compute B\u00e9zout's coefficients for a and b using the extended Euclidean algorithm.\n    '''\n    if b == 0:\n        return (1, 0)\n    else:\n        (x, y) = bezout(b, a % b)\n        return (y, x - (a // b) * y) "
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    gcd, s, t = extended_gcd(a, b)\n    if n % gcd == 0:\n        k = n // gcd\n        x = k * s\n        y = k * t\n        return (x, y)\n    else:\n        return None\n    \ndef extended_gcd(a, b):\n    '''\n    Returns a tuple (gcd, s, t) such that gcd is the greatest common divisor of a and b, and s and t are coefficients such that a*s + b*t = gcd.\n    '''\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        gcd, s, t = extended_gcd(b, a % b)\n        return (gcd, t, s - (a // b) * t)\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = extended_gcd(a, b)\n        return (n // gcd(a, b)) * x, (n // gcd(a, b)) * y\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # If a and b are both 0, there is no solution unless n is also 0\n    if a == 0 and b == 0:\n        return (0, 0) if n == 0 else None\n    # If a is 0, there is a solution only if n is divisible by b\n    elif a == 0:\n        return (0, n // b) if n % b == 0 else None\n    # If b is 0, there is a solution only if n is divisible by a\n    elif b == 0:\n        return (n // a, 0) if n % a == 0 else None\n    # If a and b are both non-zero, there is a solution only if n is divisible by the greatest common divisor of a and b\n    else:\n        d = gcd(a, b)\n        return (n // d, 0) if n % d == 0 else None\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Check if a solution exists\n    if n % gcd(a, b) == 0:\n        # Find the Bezout coefficients\n        x, y = extended_gcd(a, b)\n        # Multiply the Bezout coefficients by the quotient of n and gcd(a, b)\n        x *= n // gcd(a, b)\n        y *= n // gcd(a, b)\n        # Return the solution as a tuple\n        return x, y\n    else:\n        # Return None if no solution exists\n        return None\n\n\ndef gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of a and b.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef extended_gcd(a, b):\n    \"\"\"\n    Calculate the Bezout coefficients x and y for ax + by = gcd(a, b).\n    \"\"\"\n    if b == 0:\n        return 1, 0\n    else:\n        x, y = extended_gcd(b, a % b)\n        return y, x - (a // b) * y\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = extended_gcd(a, b)\n        return (n // b * x, n // a * y)\n\ndef gcd(a, b):\n    '''\n    Compute the greatest common divisor of a and b using Euclid's algorithm.\n    '''\n    while b:\n        a, b = b, a % b\n    return a\n\ndef extended_gcd(a, b):\n    '''\n    Compute the extended GCD of a and b.\n    Return (g, x, y) such that g = gcd(a, b) = ax + by.\n    '''\n    x0, x1, y0, y1 = 0, 1, 1, 0\n    while b:\n        q, a, b = a // b, b, a % b\n        x0, x1 = x1, x0 - q * x1\n        y0, y1 = y1, y0 - q * y1\n    return a, x0, y0"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n.\n\n    Returns:\n        A tuple of two integers (x, y) if a solution exists,\n        or None if no solution exists.\n    \"\"\"\n    if a == 0 and b == 0:\n        return None  # No solution exists\n    if n % gcd(a, b) != 0:\n        return None  # No solution exists\n    x0, y0 = extended_gcd(a, b)\n    c = n // gcd(a, b)\n    return (x0 * c, y0 * c)\n\ndef gcd(a, b):\n    \"\"\"\n    Calculates the greatest common divisor of a and b using the Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef extended_gcd(a, b):\n    \"\"\"\n    Finds integers x and y such that ax + by = gcd(a, b) using the extended Euclidean algorithm.\n    Returns:\n        A tuple of two integers (x, y).\n    \"\"\"\n    if b == 0:\n        return (1, 0)\n    x, y = extended_gcd(b, a % b)\n    return (y, x - (a // b) * y)\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    # check if a solution exists\n    if n % gcd(a, b) != 0:\n        return None\n    \n    # find Bezout coefficients\n    x, y = extended_gcd(a, b)\n    \n    # scale the Bezout coefficients to get the solution\n    s = n // gcd(a, b)\n    return (s * x, s * y)\n\n\ndef gcd(a, b):\n    # Euclidean algorithm to find gcd\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef extended_gcd(a, b):\n    # extended Euclidean algorithm to find Bezout coefficients\n    x0, x1 = 0, 1\n    while b:\n        a, (q, b) = b, divmod(a, b)\n        x0, x1 = x1, x0 - q * x1\n    return (x0, x1)\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    elif a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    elif n % gcd(a, b) == 0:\n        c = n // gcd(a, b)\n        return (c * a // b, c)\n    else:\n        return None\n\ndef gcd(a, b):\n    '''\n    Returns the gcd of two numbers using Euclid's algorithm.\n    '''\n    while b:\n        a, b = b, a % b\n    return a\n"
    },
    {
        "number": 160,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    if a == 0 and b == 0:\n        return None  # no solution exists\n    else:\n        x = n // a  # integer division\n        y = (n - a*x) // b\n        if a*x + b*y == n:\n            return (x, y)\n        else:\n            return None  # no solution exists"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from list1 that are present in list2.\n    \"\"\"\n    return [elem for elem in list1 if elem not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a set from list2 for faster membership testing\n    set2 = set(list2)\n    # Filter out elements from list1 that are present in set2\n    filtered = filter(lambda x: x not in set2, list1)\n    # Convert the result back to a list and return it\n    return list(filtered)\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Create a new list and copy all elements of list1 to it that are not in list2\n    new_list = [element for element in list1 if element not in list2]\n    # Return the new list\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2 + 1):\n        total += (n - 2*i)\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2+1):\n        sum += n - 2*i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, \n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n//2 + 1):\n        sum += (n - 2*i)\n    return sum\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l**2 * s**2) / (4 * math.tan(math.pi/s))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon given the length of one of its sides and the number of sides.\n    \"\"\"\n    area = (s ** 2 * l ** 2) / (4 * tan(pi / l))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 2,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Calculates the area of a regular polygon given the length and number of its sides\n    '''\n    area = (l ** 2) / (4 * math.tan(math.pi / s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*s*l*tan(pi/l))/4\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 4,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the apothem (shortest distance from center to side)\n    ap = l / (2 * math.tan(math.pi / s))\n    # calculate the area of the polygon\n    area = (s * ap**2) / (4 * math.tan(math.pi / s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = 1/tan(2*pi/n)\n    area = (n/4)*s**2/n\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l ** 2) / (4 * tan(pi / s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 7,
        "answer": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    This function calculates the area of a regular polygon given the length and number of its sides.\n    \"\"\"\n    area = (s ** 2 * l ** 2) / (4 * math.tan(math.pi/l))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2 * l * tan(pi/l))/4\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "34B",
        "pass": 9,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length and number of its sides.\n    \n    Args:\n        s: the number of sides of the polygon\n        l: the length of each side of the polygon\n    \n    Returns:\n        The area of the polygon as a float.\n    '''\n    \n    # Calculate the interior angle of the polygon\n    theta = math.pi * (s - 2) / s\n    \n    # Calculate the apothem of the polygon (the distance from the center to the midpoint of a side)\n    apothem = l / (2 * math.tan(theta / 2))\n    \n    # Calculate the area of the polygon using the formula: area = (1/2) * apothem * perimeter\n    area = 0.5 * s * apothem * l / 2\n    \n    return area\n"
    }
]