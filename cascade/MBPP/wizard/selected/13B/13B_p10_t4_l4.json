[
    {
        "number": 2,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared.append(i)\n    return shared\n",
        "test": "assert similar_elements([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 2292,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 36,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(1) == True",
        "num_ids": 1524,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([1], 1) == [1]",
        "num_ids": 2657,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # convert the input number to binary\n    binary_x = bin(x)[2:]\n    # count the number of set bits in the binary representation of the input number\n    set_bits = sum(int(bit) for bit in binary_x)\n    # check if the number of set bits is equal to 1 or not\n    if set_bits == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"\") == [] ",
        "num_ids": 1602,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 1654,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def find_Rotations(s):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    :param s: The input string.\n    :return: The minimum number of rotations.\n    \"\"\"\n    # Check if the string is empty or has only one character\n    if len(s) == 0 or len(s) == 1:\n        return 0\n\n    # Check if the string is already a palindrome\n    if s == s[::-1]:\n        return 0\n\n    # Find the longest palindromic substring in the string\n    longest_palindrome = \"\"\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[i:j][::-1] and len(s[i:j]) > len(longest_palindrome):\n                longest_palindrome = s[i:j]\n\n    # Calculate the number of rotations required to get the same string\n    rotations = 0\n    while s.find(longest_palindrome) != 0:\n        s = s[1:] + s[:1]\n        rotations += 1\n\n    return rotations\n",
        "test": "assert find_Rotations(\"\") == 0",
        "num_ids": 2546,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    if ch in s:\n        s.remove(ch)\n    if ch in s:\n        s.remove(ch)\n    return ''.join(s)\n",
        "test": "assert remove_Occ('hello world', 'x') == 'hello world'",
        "num_ids": 2155,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sort_matrix(M):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows based on their sum\n    sorted_M = [row for _, row in sorted(zip(row_sums, M))]\n    \n    return sorted_M\n",
        "test": "assert sort_matrix([[1,2],[3,4]]) != [[2,1],[4,3]] #changed matrix",
        "num_ids": 3229,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_Volume(l,b,h):\n    \"\"\"\n    This function takes in the length, base and height of a triangular prism and returns the volume.\n    \"\"\"\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(0, 0, 0) == 0",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return bool(pattern.search(text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 1782,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(4) == 16, \"The perimeter of a square with side length 4 should be 16\" ",
        "num_ids": 1293,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def str_to_list(string1, string2):\n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Convert both strings to lists of characters\n    list1 = [char for char in string1]\n    list2 = [char for char in string2]\n    \n    # Iterate through the characters in the first list\n    for char in list1:\n        # Check if the character is not present in the second list\n        if char not in list2:\n            # If not, append it to the result list\n            result.append(char)\n    \n    # Convert the result list back to a string and return it\n    return ''.join(result)\n",
        "test": "assert str_to_list(\"hello world\", \" \") == \"helloworld\"",
        "num_ids": 2971,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 2075,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 6 == 0 and x % 10 != 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(35) == False",
        "num_ids": 1788,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    num_str = str(num)\n    reverse_num = int(num_str[::-1])\n    return num + 1 == 2 * reverse_num\n",
        "test": "assert rev(12345) == False ",
        "num_ids": 1487,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest\n    number that can be formed with those digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
        "test": "assert find_Max_Num([1,2,3,4,5]) == 54321",
        "num_ids": 2122,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes in two integers x and y and returns True if they have opposite signs, and False otherwise.\n    \"\"\"\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(5, 2) == False",
        "num_ids": 1317,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n    \n    # Formula to calculate the nth octagonal number\n    octagonal_number = n * (2 * n - 1)\n    \n    # Check if the octagonal number is a positive integer\n    if octagonal_number > 0 and isinstance(octagonal_number, int):\n        return True\n    else:\n        return False\n",
        "test": "assert is_octagonal(1) == 1, \"1 is not an octagonal number\"",
        "num_ids": 1996,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count\n",
        "test": "assert count_Substrings('0123') == 2",
        "num_ids": 2863,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        smallest = xs[0]\n        for num in xs:\n            if num < smallest:\n                smallest = num\n        return smallest\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1706,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 1, 1, 1, 1]) == 0",
        "num_ids": 2628,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "test": "assert subject_marks([(10, 90), (20, 80), (30, 70), (40, 60), (50, 50)]) == [(50, 50), (40, 60), (30, 70), (20, 80), (10, 90)] ",
        "num_ids": 2808,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            sum += recursive_list_sum(item)\n        else:\n            sum += item\n    return sum\n",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 2170,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5 # expected output: 5",
        "num_ids": 1467,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    bell_sum = 0\n    for k in range(1, n+1):\n        bell_sum += bell_number(k-1) * bell_number(n-k)\n    return bell_sum\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1627,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            increasing = False\n        elif A[i] > A[i-1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return False\n    return True\n",
        "test": "assert is_Monotonic([1, 2, 3, 2, 1]) == False # Non-monotonic sequence",
        "num_ids": 2387,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1,2,3,4,5], [2,3]) == True",
        "num_ids": 2097,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = len(Input[0])\n    for t in Input:\n        if len(t) != count:\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1,2,3),(4,5,6),(7,8,9)]) == True",
        "num_ids": 2224,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 36,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted_flag = False\n\n    while not sorted_flag:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted_flag = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted_flag = False\n            i += 1\n\n    return nums\n",
        "test": "assert comb_sort([5, 2, 9, 1, 5, 6]) == comb_sort([5, 2, 9, 1, 5, 6][::-1]) # checks if the function works for a reversed list",
        "num_ids": 2938,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    while i*i <= n:\n        j = 0\n        while i*i + j*j <= n:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n",
        "test": "assert dif_Square(1) == True # 1 = 0^2 - 1^2",
        "num_ids": 2074,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns(['Red', 'Green', 'Blue', 'Yellow'], ['Red', 'Green', 'Blue', 'Yellow']) == True, \"Test case 1 failed\"",
        "num_ids": 2712,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(2, 4, 6), (1, 2, 3)], 2) == [(2, 4, 6)]",
        "num_ids": 3559,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Returns True if n is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(12) == False",
        "num_ids": 1148,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 23,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if the length of the string is odd, else False.\n    \"\"\"\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert word_len(\"hello\") == True",
        "num_ids": 1263,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    t = 0\n    for i in range(n + 1):\n        t += i * (i + 1) * (i + 2) // 6\n    return t\n",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 1476,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi",
        "num_ids": 1562,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Convert the string to lowercase\n    strr = strr.lower()\n    \n    # Initialize the sum of ASCII values\n    ascii_sum = 0\n    \n    # Iterate over the characters of the string\n    for char in strr:\n        # Add the ASCII value of the character modulo 26 to the sum\n        ascii_sum += ord(char) % 26\n    \n    # Convert the sum to an ASCII character\n    result_char = chr(ascii_sum % 26 + 97)\n    \n    return result_char",
        "test": "assert get_Char(\"hello\") == \"m\"",
        "num_ids": 1758,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def sequence(n):\n    \"\"\"\n    Returns the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Invalid input: n must be a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        seq = [0, 1]\n        for i in range(2, n+1):\n            seq.append(seq[seq[-1]] + seq[i - seq[seq[-1]]])\n        return seq[n]\n",
        "test": "assert sequence(2) == 2",
        "num_ids": 1782,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4*math.pi # Test with radius 1",
        "num_ids": 1751,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    hex_num = n * (2 * n - 1)\n    return hex_num",
        "test": "assert centered_hexagonal_number(1) == 1, \"Incorrect result for centered_hexagonal_number(1)\"",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = {}\n\n    # Merge dict1 and dict2\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n\n    # Merge merged_dict and dict3\n    merged_dict.update(dict3)\n\n    # Count the number of occurrences of each key\n    count_dict = ct.Counter(merged_dict)\n\n    # Create a new dictionary with the keys as the original keys and values as the count\n    result_dict = {}\n    for key, value in count_dict.items():\n        result_dict[key] = value\n\n    return result_dict\n",
        "test": "assert merge_dictionaries_three({'a':1, 'b':2}, {'c':3, 'd':4}, {'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6} # test case 1",
        "num_ids": 3191,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "test": "assert freq_count([1,2,2,3,3,3]) == {1:1, 2:2, 3:3}",
        "num_ids": 2522,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 37,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # initialize a variable to store the closest number found so far\n    closest = None\n    \n    # loop over all numbers from 1 to N-1\n    for i in range(1, N):\n        # check if i is closer to N than the current closest number\n        if closest is None or abs(N-i) < abs(N-closest):\n            closest = i\n    \n    # return the closest number found\n    return closest\n",
        "test": "assert closest_num(25) == 24",
        "num_ids": 1479,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6, \"The length of the longest word is incorrect.\"",
        "num_ids": 1685,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n",
        "test": "assert find_substring('hello world', 'foo') == False",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_undulating(n):\n    if n == 0:  # special case for 0\n        return False\n    \n    # count the number of 2s and 3s in the prime factorization of n\n    num_twos = 0\n    num_threes = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n                if i == 2:\n                    num_twos += 1\n                elif i == 3:\n                    num_threes += 1\n        i += 1\n    \n    if n > 1:  # if n is still greater than 1, it must be a prime factor of n\n        if n == 2:\n            num_twos += 1\n        elif n == 3:\n            num_threes += 1\n    \n    # check if the number has an even number of 2s and an odd number of 3s\n    if num_twos % 2 == 0 and num_threes % 2 == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert is_undulating(3) == True",
        "num_ids": 2443,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b\n",
        "test": "assert power(2,3) == 8",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(1, 2), (3, 1), (4, 3), (5, 4)]) == 3",
        "num_ids": 2430,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6,7],[8,9,10]]) == 3 # all lists have the same length",
        "num_ids": 2122,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(0) == 0 # 0 has no divisors",
        "num_ids": 1379,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency\n",
        "test": "assert frequency_lists([]) == {} ",
        "num_ids": 3055,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    average = product / len(numbers)\n    return average\n",
        "test": "assert multiply_num([0]) == 0",
        "num_ids": 1698,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 1456,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_num)\n    # Add 1 to the reversed number\n    next_num = rev_num + 1\n    # Convert the next number to a string and reverse it\n    next_num = str(next_num)[::-1]\n    # Check if the next number is a palindrome\n    while not str(next_num) == str(next_num)[::-1]:\n        # If it's not a palindrome, add 1 and repeat the process\n        next_num = int(next_num) + 1\n        next_num = str(next_num)[::-1]\n    # Convert the next palindrome back to an integer and return it\n    return int(next_num)\n",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 4408,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1,2,3,4,5], 5) == 5",
        "num_ids": 1814,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the snake case string into a list of words using underscore as the separator\n    words = word.split('_')\n    \n    # Convert the first word to lowercase and add it to the result\n    result = words[0].lower()\n    \n    # Loop through the remaining words, capitalize the first letter and add it to the result\n    for word in words[1:]:\n        result += word.capitalize()\n    \n    return result\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 2090,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Computes the Eulerian number a(n, m).\n    \"\"\"\n    if n < 0 or m < 0:\n        return None\n\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0 and m > 0:\n        return 0\n    elif n > 0 and m == 0:\n        return 0\n    else:\n        return eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n",
        "test": "assert eulerian_num(0, 0) == 1, \"Incorrect result for eulerian_num(0, 0)\"",
        "num_ids": 2210,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # Sort each sublist of strings in input_list\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n        \n    return input_list\n",
        "test": "assert sort_sublists([['d', 'a', 'b'], ['c', 'e', 'f'], ['g', 'h', 'i']]) == [['a', 'b', 'd'], ['c', 'e', 'f'], ['g', 'h', 'i']]  # correct output",
        "num_ids": 2718,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, True]) == 3 ",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) != (1, 2, 3)",
        "num_ids": 2376,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 39,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Use heapq to merge the three lists into a single sorted list\n    merged_list = heapq.merge(num1, num2, num3)\n\n    # Return the merged list\n    return list(merged_list)\n",
        "test": "assert merge_sorted_list([1], [2], [3]) == [1, 2, 3]",
        "num_ids": 4098,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(len(s)):\n        if int(s, 2) % 2 == 1:\n            count += 1\n        s = s[-1] + s[:-1]\n    return count * n\n",
        "test": "assert odd_Equivalent(\"0000\", 4) == 0, \"Incorrect output for input: '0000', 4\"",
        "num_ids": 1974,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements &= set(lst)\n    return list(common_elements)\n",
        "test": "assert common_in_nested_lists([[1,2,3],[4,5,6]]) == []",
        "num_ids": 2798,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer('123') == True",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def empty_dit(list1):\n    '''\n    This function checks whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i) == False:\n            return True\n    return False\n",
        "test": "assert empty_dit([{}, {}]) == True # all dictionaries are empty",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    # Initialize an empty string\n    result = ''\n\n    # Loop through the tuple\n    for num in nums:\n\n        # Convert the integer to a string and append to the result string\n        result += str(num)\n\n    # Convert the result string to an integer and return\n    return int(result)\n",
        "test": "assert tuple_to_int((0, 0, 0)) == 0",
        "num_ids": 1837,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        else:\n            try:\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n    return result\n",
        "test": "assert list_to_float([[1, 2, 3], [4, \"5\", 6.0]]) == [[1, 2, 3], [4, 5.0, 6.0]]",
        "num_ids": 3059,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1217,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0:\n            if arr[i] != arr[i+1]:\n                return arr[i]\n        elif i == len(arr) - 1:\n            if arr[i] != arr[i-1]:\n                return arr[i]\n        else:\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n",
        "test": "assert search([1, 1, 2, 3, 3, 4, 4, 8]) == 2",
        "num_ids": 3970,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1] - list1[i][1]*list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2), (3,4), (5,6), (-2,3), (-4,5)]) != 12",
        "num_ids": 2977,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def sum_of_divisors(n):\n    \"\"\"Return the sum of divisors of a given number n.\"\"\"\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n\ndef is_amicable(n):\n    \"\"\"Return True if n is amicable, False otherwise.\"\"\"\n    d = sum_of_divisors(n)\n    m = sum_of_divisors(d)\n    return n == m and n != d\n\ndef amicable_numbers_sum(limit):\n    \"\"\"Return the sum of all amicable numbers up to limit.\"\"\"\n    amicable = []\n    for n in range(1, limit+1):\n        if is_amicable(n):\n            amicable.append(n)\n    return sum(amicable)\n",
        "test": "assert amicable_numbers_sum(10) == 0, \"Test case failed for limit 10\"",
        "num_ids": 3327,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = complex(a,b)\n    return cmath.phase(complex_num)\n",
        "test": "assert angle_complex(0, 0) == 0",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            zero_count = sub_string.count('0')\n            one_count = sub_string.count('1')\n            diff = abs(zero_count - one_count)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert find_length('00110011') == 2",
        "num_ids": 2821,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "",
        "test": "assert sum(10, 21) == 41",
        "num_ids": 1909,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def long_words(n, words_list):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words_list:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(3, \"\") == []",
        "num_ids": 1952,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def magic_square_test(my_matrix):\n    # Check if matrix is square (all rows have the same length)\n    rows = len(my_matrix)\n    if not all(len(row) == rows for row in my_matrix):\n        return False\n    # Calculate the sum of the first row and first column\n    sum_first_row = sum(my_matrix[0])\n    sum_first_col = sum(my_matrix[i][0] for i in range(rows))\n    # Check if all rows and columns have the same sum\n    if sum_first_row != sum_first_col:\n        return False\n    # Check if all diagonals have the same sum\n    sum_main_diagonal = sum(my_matrix[i][i] for i in range(rows))\n    sum_secondary_diagonal = sum(my_matrix[i][rows-i-1] for i in range(rows))\n    if sum_main_diagonal != sum_secondary_diagonal:\n        return False\n    # If all checks passed, the matrix is a magic square\n    return True\n",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 3827,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for item in nums:\n        freq[item] += 1\n        if freq[item] > max_freq:\n            max_freq = freq[item]\n            max_item = item\n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 3, 4, 5]) == 1",
        "num_ids": 2693,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)  # convert string to list of characters\n    left, right = 0, len(s) - 1  # initialize pointers\n    \n    while left < right:\n        # if both left and right pointers are vowels, swap them\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        # if left pointer is vowel and right pointer is consonant, move left pointer to right\n        elif s[left] in vowels:\n            right -= 1\n        # if right pointer is vowel and left pointer is consonant, move right pointer to left\n        elif s[right] in vowels:\n            left += 1\n        # if both pointers are consonants, move both pointers\n        else:\n            left += 1\n            right -= 1\n    \n    return \"\".join(s)  # convert list back to string\n",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 2438,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert tup_string(('a', 'b', 'c')) == \"('a', 'b', 'c')\"",
        "num_ids": 1405,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative\n",
        "test": "assert sum_negativenum([1, 2, 3, -4, 5]) == -4 # should return -4",
        "num_ids": 1994,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1 ",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    ratio = zeroes / (zeroes + non_zeroes)\n    return ratio\n",
        "test": "assert zero_count([1,2,3]) == 0 ",
        "num_ids": 2535,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    else:\n        binary_representation = bin(n)[2:]\n        return all(binary_representation.count(digit) <= 1 for digit in '1')\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(12) == False",
        "num_ids": 2234,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Import math module to use pi value\n    import math\n    # Calculate circumference of circle using formula 2*pi*r\n    circumference = 2 * math.pi * r\n    # Return the circumference of the circle\n    return circumference\n",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 1499,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for item in sublist:\n            result.add(item)\n    return result\n",
        "test": "assert extract_singly([[1, 2], [3, 4, 5], [6, 7]]) == {1, 2, 3, 4, 5, 6, 7}",
        "num_ids": 2506,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        max_index = 0\n        for j in range(i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        nums = nums[:i][::-1] + nums[i:]\n    return nums\n",
        "test": "assert pancake_sort([]) == [] ",
        "num_ids": 3355,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3, \"All elements are the same in the same position\"",
        "num_ids": 2312,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, tuple) or isinstance(i, list):\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0",
        "num_ids": 1559,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 2422,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    else:\n        x = n // b\n        y = (n - a*x) // b\n        return (x, y)\n",
        "test": "assert find_solution(1, 1, 0) == (0, 0)",
        "num_ids": 3040,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list that are present in another list.\n\n    Args:\n    list1: the list from which elements will be removed\n    list2: the list containing the elements to be removed\n\n    Returns:\n    A new list with the elements of `list1` that are not in `list2`\n    '''\n    return [element for element in list1 if element not in list2]\n",
        "test": "assert remove_elements([1,2,3,4,5], [2,4]) == [1,3,5]",
        "num_ids": 2012,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2+1):\n        sum += n - 2*i\n    return sum\n",
        "test": "assert sum_series(10) == 30, \"Error: sum_series(10) should return 30\"",
        "num_ids": 1607,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n",
        "test": "assert area_polygon(10, 0) == 0.0, \"area_polygon(10, 0) should be 0.0\"",
        "num_ids": 2296,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum1 = 0\n    div_sum2 = 0\n    \n    # calculate the sum of divisors for the first number\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum1 += i\n    \n    # calculate the sum of divisors for the second number\n    for j in range(1, n+1):\n        if n % j == 0:\n            div_sum2 += j\n    \n    # check if the sums are the same\n    if div_sum1 == div_sum2:\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(1) == 1 # 1 is the only divisor of 1, so the sum of divisors should be 1",
        "num_ids": 2435,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i).lower():\n            count += 1\n    return count\n",
        "test": "assert count_char_position('') == 0",
        "num_ids": 1861,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 1, 2, 2]) == 2",
        "num_ids": 1865,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 1420,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,2,1], 2) == 2 ",
        "num_ids": 1590,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 2137,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(7) == 7*5, \"Error: incorrect perimeter calculation for a pentagon with side length 7\"",
        "num_ids": 1533,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s) - 2:\n        if s[i:i+3] == 'std':\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert count_occurance(\"This is a sample std string for testing.\") == 1",
        "num_ids": 1617,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize a flag variable to check if all elements have same data type\n    flag = True\n    \n    # Iterate through the elements of the tuple\n    for i in range(len(test_tuple)):\n        \n        # Check if the current element is of the same data type as the first element\n        if type(test_tuple[0]) != type(test_tuple[i]):\n            \n            # If not, set the flag variable to False and break out of the loop\n            flag = False\n            break\n    \n    # Return the flag variable as the result of the function\n    return flag\n",
        "test": "assert check_type((1, 2, 3)) == True, \"Error: check_type returned False for (1, 2, 3)\"",
        "num_ids": 2019,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_majority(arr, n, x):\n    # Check if the element is present in the array\n    if x in arr:\n        # Find the index of the element in the array\n        index = arr.index(x)\n        # Check if the element is present more than n/2 times\n        if index <= n/2 or (n-index) <= n/2:\n            return True\n    return False",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 6) == False",
        "num_ids": 3254,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 38,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 1190,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_values_string(s):\n    \"\"\"\n    This function takes a string as input and returns a new string\n    with characters at odd index positions removed.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Iterate through the string character by character\n    for i in range(len(s)):\n        # Check if the character is at an odd index position\n        if i % 2 == 0:\n            # If it is, add it to the result string\n            result += s[i]\n    # Return the result string\n    return result",
        "test": "assert odd_values_string('') == '' ",
        "num_ids": 1538,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a\n    if b < minimum:\n        minimum = b\n    if c < minimum:\n        minimum = c\n    return minimum\n",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 1581,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if n & ((1 << (r - l + 1)) - 1) == (1 << (r - l + 1)) - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b111011,2,5) == False ",
        "num_ids": 2273,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def re_arrange_array(arr, n):\n    # Separate negative and positive elements\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    # Concatenate negative and positive elements in the correct order\n    result = negatives + positives\n    # Fill the remaining positions with the original elements in the order they were in\n    for i in range(n, len(arr)):\n        result.append(arr[i])\n    # Return the re-arranged array\n    return result\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 3635,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank('hello world', '') == 'helloworld'",
        "num_ids": 1373,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, lst)\n",
        "test": "assert larg_nnum([1], 1) == [1] # Test case 3",
        "num_ids": 2451,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n",
        "test": "assert lateralsuface_cylinder(7,8) == 2*pi*7*8 ",
        "num_ids": 2087,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 1181,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert the given number to binary and store it in a string\n    binary_representation = bin(n)[2:]\n    # initialize a variable to store the modified binary number\n    modified_binary_number = \"\"\n    # loop through each bit of the binary number\n    for i in range(len(binary_representation)):\n        # check if the current bit is even or odd\n        if i % 2 == 0:\n            # if it's even, set it to 1\n            modified_binary_number += \"1\"\n        else:\n            # if it's odd, keep the current value\n            modified_binary_number += binary_representation[i]\n    # convert the modified binary number to decimal and return it\n    return int(modified_binary_number, 2)\n",
        "test": "assert even_bit_set_number(1) == 1 # check if 1 has even bits set",
        "num_ids": 3090,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n",
        "test": "assert check_occurences([(1,2), (2,3), (1,2), (2,3), (1,2)]) == {(1, 2): 3, (2, 3): 2}",
        "num_ids": 3079,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_of_substrings(string):\n    count = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if string[i:j] != \"\":\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings('abc') == 6",
        "num_ids": 1537,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(2, m // 2 + 1):\n            count += get_total_number_of_sequences(i, n - 1)\n        return count\n",
        "test": "assert get_total_number_of_sequences(5,1) == 1",
        "num_ids": 2886,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2\n    return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 4, 5, 6]",
        "num_ids": 1877,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello world\") == 11",
        "num_ids": 1213,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the next integer square root of N\n    i_sqrt = int(math.sqrt(N))\n    # Increment the square root by 1 and square it\n    next_square = (i_sqrt + 1) ** 2\n    # Return the next perfect square\n    return next_square\n",
        "test": "assert next_Perfect_Square(9) == 16",
        "num_ids": 1949,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    increasing[0] = arr[0]\n    decreasing[n - 1] = arr[n - 1]\n\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            increasing[i] = max(increasing[i - 1] + arr[i], arr[i])\n        else:\n            increasing[i] = increasing[i - 1]\n\n    for i in range(n - 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            decreasing[i] = max(decreasing[i + 1] + arr[i], arr[i])\n        else:\n            decreasing[i] = decreasing[i + 1]\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, increasing[i], decreasing[i])\n\n    return max_sum",
        "test": "assert max_sum([3, 4, 5, 6, 7]) == 25  # Bitonic subsequence [3, 4, 5, 6] has a sum of 25",
        "num_ids": 4876,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    elif number == 0 or number == 1:\n        return number\n    else:\n        x = number\n        y = (x + 1) / 2\n        while abs(x - y) >= 0.0001:\n            x = y\n            y = (x + number / x) / 2\n        return round(y, 10)\n",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 2227,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "test": "assert lps(\"cbbd\") == 2",
        "num_ids": 2318,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 24,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 1664,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result\n",
        "test": "assert intersection_array([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 2131,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5, 6, 7, 8, 9), 5) == 1, \"Incorrect count\"",
        "num_ids": 2206,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts the given element before each element in the list.\n    \n    Args:\n        lst (list): A list of elements.\n        elem (object): An element to insert.\n        \n    Returns:\n        list: A new list with the element inserted before each element in the original list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([], 1) == []",
        "num_ids": 1966,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a Python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        print(cmath.polar(num))\n",
        "test": "assert convert(-2) == (-2, 0)",
        "num_ids": 1808,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1525,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors(['red', 'green', 'blue'], 2) == [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')] ",
        "num_ids": 3081,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 2187,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1,2) == (2,1) # Test case 1",
        "num_ids": 1268,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1,2,3), (4,5,6)) == (4,5,6)",
        "num_ids": 3162,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % i != 0 for i in range(2, int(num**0.5)+1)):\n            primes.append(num)\n        num += 1\n    return primes[-1]\n",
        "test": "assert newman_prime(2) == 3, \"Error in newman_prime(2)\"",
        "num_ids": 3653,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(0)\n    return tuple(result)\n",
        "test": "assert division_elements((2, 4, 8), (2, 2, 2)) == (1.0, 2.0, 4.0)",
        "num_ids": 2910,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])",
        "num_ids": 2792,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def dog_age(human_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = human_age * 7\n    return dog_age\n",
        "test": "assert dog_age(0) == 0*7",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    sublist = []\n    for i, item in enumerate(S):\n        sublist.append(item)\n        if (i+1) % step == 0:\n            result.append(sublist)\n            sublist = []\n    if sublist:\n        result.append(sublist)\n    return result\n",
        "test": "assert list_split([1, 2], 3) == [[1, 2]]",
        "num_ids": 2796,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l\n",
        "test": "assert lateralsurface_cube(20) == 2400",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of the current number to the sum\n        sum_of_squares += i**2\n    # Return the sum of squares\n    return sum_of_squares\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1470,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number using the Stern-Brocot sequence.\n    \"\"\"\n    # Initialize the sequence with the first two elements\n    seq = [0, 1]\n    \n    # Generate the rest of the sequence\n    while len(seq) < 2*n:\n        seq.append(seq[-1]+seq[-2])\n    \n    # Reverse the sequence and sum its elements\n    seq = seq[::-1]\n    num, denom = 0, 1\n    for i in range(n):\n        num, denom = num + seq[i]*denom, denom\n    \n    return num / denom\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1776,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97 ",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "test": "assert sum_even_and_even_index([1,2,3,4,5]) == 0, \"Incorrect sum for even numbers at even positions of the list [1,2,3,4,5]\"",
        "num_ids": 2648,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    count = 0\n    \n    while count < n:\n        num = 2 * count\n        total += num ** 5\n        count += 1\n        \n    return total\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1707,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n",
        "test": "assert rear_extract([(1,2), (3,4), (5,6)]) == [2, 4, 6]",
        "num_ids": 2178,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 2517,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients for a given positive integer n.\n    \"\"\"\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += binomialCoefficient(n, i)\n        i += 2\n    return sum\n\ndef binomialCoefficient(n, k):\n    \"\"\"\n    This function calculates the binomial coefficient of two integers n and k.\n    \"\"\"\n    return int(math.factorial(n) / (math.factorial(k) * math.factorial(n - k)))",
        "test": "assert even_binomial_Coeff_Sum(1) == 0",
        "num_ids": 1862,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(0, 10) == 0",
        "num_ids": 1628,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def dict_filter(d, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in d.items() if v >= n}\n    return filtered_dict\n",
        "test": "assert dict_filter({'a': 3, 'b': 1, 'c': 5}, 3) == {'a': 3, 'c': 5}",
        "num_ids": 2592,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == 0",
        "num_ids": 2299,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert is_num_decagonal(1) == 1 ",
        "num_ids": 1463,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 2060,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for i in test_list:\n        if i not in unique:\n            unique.append(i)\n    if len(unique) == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 1756,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1,2,3],[2,3,4]) == [-1,-1,-1]",
        "num_ids": 2105,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def validate(n):\n    n = str(n)\n    count = {}\n    for digit in n:\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n    for digit in count:\n        if count[digit] > int(digit):\n            return False\n    return True\n",
        "test": "assert validate(123) == True, \"validate(123) should return True\"",
        "num_ids": 2283,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item != element:\n            return False\n    return True",
        "test": "assert check_element([1, 1, 1], 1) == True",
        "num_ids": 1337,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('abbb') == True",
        "num_ids": 1573,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Repeating the given array k times\n    repeated_array = a * k\n\n    # Getting the length of the repeated array\n    len_repeated_array = len(repeated_array)\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through the repeated array\n    for i in range(len_repeated_array):\n        # Add the current element to the current sum\n        current_sum += repeated_array[i]\n\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 8, 3) == 7, \"Failed for [-2, -3, 4, -1, -2, 1, 5, -3], 8, 3\"",
        "num_ids": 4320,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1285,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    max_length = 0\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([]) == []",
        "num_ids": 2115,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def count_no_of_ways(n, k):\n    # Create a list to store the number of ways to paint each post\n    dp = [0] * n\n    # Base case: there is only one way to paint the first post\n    dp[0] = 1\n    # Iterate through the remaining posts\n    for i in range(1, n):\n        # Initialize the number of ways for this post to 0\n        ways = 0\n        # Iterate through the previous posts\n        for j in range(i):\n            # If the previous post has a different color than the current post,\n            # and the number of ways to paint the previous post is non-zero,\n            # add it to the total number of ways for the current post\n            if k > 1 and dp[j] != 0 and (i - j) % (k - 1) != 0:\n                ways += dp[j]\n        # If the number of ways is still 0, it means that all previous posts have the same color as the current post\n        # Therefore, there is only one way to paint this post\n        if ways == 0:\n            ways = 1\n        # Store the number of ways for this post\n        dp[i] = ways\n    # Return the total number of ways to paint the entire fence\n    return sum(dp)\n",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 3231,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient\n",
        "test": "assert find(10, 3) == 3",
        "num_ids": 1130,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 36,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the square of the hypotenuse\n    c_squared = w**2 + h**2\n\n    # Calculate the third side using the Pythagorean theorem\n    c = math.sqrt(c_squared)\n\n    return c\n",
        "test": "assert otherside_rightangle(3,4) == 5 ",
        "num_ids": 1598,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1990,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    # We start with the sum of 1 (which is always a divisor)\n    total = 1\n    # We iterate over all numbers from 2 to number-1 (inclusive)\n    for i in range(2, number):\n        # If i is a divisor of number, we add it to the total\n        if number % i == 0:\n            total += i\n    return total\n",
        "test": "assert sum_div(1) == 1",
        "num_ids": 1699,
        "indeed": true
    },
    {
        "number": 296,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([]) == 0",
        "num_ids": 4123,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert flatten_list([1,2,[3,4,5],[6, [7,8,9], 10]]) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 2163,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    # create a defaultdict to store the sum of values for each key\n    total = defaultdict(int)\n    \n    # iterate through the list of tuples and add the values to the defaultdict\n    for key, value in stdata:\n        total[key] += value\n        \n    # find the key with the maximum value in the defaultdict and return its aggregate\n    max_key = max(total, key=total.get)\n    return total[max_key]\n",
        "test": "assert max_aggregate([(1,2), (3,4), (5,6)]) == 6 ",
        "num_ids": 3493,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        b = bin(i)[2:].zfill(n) # Convert decimal to binary and pad with zeroes\n        if b == b[::-1]: # Check if binary sequence is a palindrome\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(0) == 1, \"count_binary_seq(0) should return 1\"",
        "num_ids": 2677,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 1\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth\n",
        "test": "assert dict_depth({1: 2, 3: 4}) == 1",
        "num_ids": 1781,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a Python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    rotations = rotations % n\n\n    if rotations == 0:\n        return arr[index]\n    else:\n        new_arr = arr[-rotations:] + arr[:-rotations]\n        return new_arr[index]\n",
        "test": "assert find_Element([1,2,3,4,5], [1,2,3,4,5], 0, 4) == 5, \"Test failed for find_Element\"",
        "num_ids": 3342,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match('^p', word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words\n",
        "test": "assert start_withp(['apple', 'pear', 'orange', 'peach', 'plum']) == ['pear', 'peach']",
        "num_ids": 2459,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0 or index == k:\n        return a[index]\n    if index > k:\n        return a[k]\n    dp = [0] * (n+1)\n    for i in range(index+1):\n        for j in range(i+1, k+1):\n            if a[j] > a[i]:\n                dp[i] = max(dp[i], a[j] + dp[j])\n    return max(dp[:index+1])\n",
        "test": "assert max_sum_increasing_subseq([1, 10, 2, 3, 4], 5, 2, 3) == 10",
        "num_ids": 4583,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 23,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n]",
        "test": "assert colon_tuplex((1, 2, 3, 4, 5), 2, 0) == ()",
        "num_ids": 2375,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 0) == []  # expected output: []",
        "num_ids": 2915,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2, 5) == 5",
        "num_ids": 1255,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 1346,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the number with all the bits set except the leftmost unset bit\n    left_most_unset_bit = 1\n    while (n & left_most_unset_bit) != 0:\n        left_most_unset_bit <<= 1\n    \n    # XOR the input number with the number with the leftmost unset bit set\n    return n ^ left_most_unset_bit",
        "test": "assert set_left_most_unset_bit(0) == 1 ",
        "num_ids": 2626,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area = math.pi * r * r\n    lateral_surface_area = math.pi * r * h\n    volume = (1/3) * math.pi * r * r * h\n    return volume",
        "test": "assert volume_cone(3, 4) == math.pi * (3 ** 2) * (4/3)",
        "num_ids": 1824,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a Python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        power = 1\n        while power * 2 <= n:\n            power *= 2\n        return power\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1467,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 1311,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list\n",
        "test": "assert add_string([1, 2, 3], '{:.2f}') == ['1.00', '2.00', '3.00']",
        "num_ids": 1905,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Convert more than one list to nested dictionary\n    '''\n    result = {}\n    for i in range(len(l1)):\n        if l1[i] not in result:\n            result[l1[i]] = {l2[i]: l3[i]}\n        else:\n            result[l1[i]][l2[i]] = l3[i]\n    return result\n",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 3257,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        max_sum = max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)\n        return max_sum",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 2159,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = []\n    for lst in input_list:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1,2,3],[4,5],[6,7,8,9],[1,2,3,4,5]]) == [1,2,3,4,5]",
        "num_ids": 1911,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 1673,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store character frequencies\n    char_freq = {}\n    \n    # Iterate through the string and update the character frequencies\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Iterate through the string again and return the first character with frequency 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    # If no non-repeating character found, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"\") == None",
        "num_ids": 2406,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"abc\") == False",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median",
        "test": "assert median_numbers(1, 2, 3) != 1",
        "num_ids": 1713,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result\n",
        "test": "assert sum_of_digits([12, 34, 56]) == [3, 7, 11]",
        "num_ids": 2585,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
        "test": "assert bitwise_xor((0, 1, 0, 1), (1, 0, 1, 0)) == (1, 1, 1, 1)",
        "num_ids": 2971,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    return len(freq)\n",
        "test": "assert extract_freq([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 5",
        "num_ids": 2855,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_sum = []\n        for j in range(len(test_tup1[i])):\n            inner_sum.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_sum))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples((0, 0, 0), (1, 2, 3)) == (1, 2, 3) ",
        "num_ids": 3135,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minimum(a, b):\n    '''\n    Write a Python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(0,1) == 0",
        "num_ids": 1088,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex(('hello','world'),'world') == True # Test case 4",
        "num_ids": 1507,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer as input and returns True if its parity is odd, and False otherwise.\n    \"\"\"\n    # Use the modulus operator to determine the remainder when x is divided by 2\n    remainder = x % 2\n    \n    # If the remainder is 1, return True (indicating odd parity), otherwise return False (indicating even parity)\n    if remainder == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_Parity(0) == 0",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string, sort the digits in descending order, and join them back to a string\n    digits = sorted(str(n), reverse=True)\n    next_bigger = int(\"\".join(digits))\n    return next_bigger\n",
        "test": "assert rearrange_bigger(0) == 0 # check if the function returns 0 for input 0",
        "num_ids": 2618,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i], nums2[j])\n            pairs.append(pair)\n    \n    sorted_pairs = sorted(pairs)\n    \n    if k > len(sorted_pairs):\n        k = len(sorted_pairs)\n    \n    return sorted_pairs[:k]\n",
        "test": "assert k_smallest_pairs([1], [1], 1) == [(1, 1)]",
        "num_ids": 4077,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def min_product_tuple(list1):\n    '''\n    Find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1,2), (3,4), (5,6), (7,8)]) == 24, \"Error: incorrect output for [(1,2), (3,4), (5,6), (7,8)]\"",
        "num_ids": 2807,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of heterogeneous values and returns the minimum value in the list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if type(listval[i]) == str:\n            try:\n                if float(listval[i]) < float(min_val):\n                    min_val = listval[i]\n            except ValueError:\n                pass\n        elif listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 2127,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # splitting the snake case string by underscore and storing it in a list\n    word_list = word.split(\"_\")\n    # converting the first element of the list to lowercase and storing it in the first element of the list\n    word_list[0] = word_list[0].lower()\n    # initializing an empty string to store the camel case string\n    camel_case_word = \"\"\n    # iterating over the list and appending each element to the camel case string\n    for i in range(len(word_list)):\n        if i == 0:\n            camel_case_word += word_list[i]\n        else:\n            camel_case_word += word_list[i].capitalize()\n    # returning the camel case string\n    return camel_case_word\n",
        "test": "assert snake_to_camel(\"\") == \"\"",
        "num_ids": 2219,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "test": "assert remove_odd([1,2,3,4,5]) == [2,4] # test case 1",
        "num_ids": 1675,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    for tup in list1:\n        if len(tup) > n:\n            return tup[n]\n",
        "test": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 0) == 1 ",
        "num_ids": 2175,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[2,4,6]) == True",
        "num_ids": 1765,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            \n            if product > max_product:\n                max_product = product\n    \n    return max_product\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20 ",
        "num_ids": 3329,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples containing common first elements.\n    '''\n    # Create an empty dictionary to store the count of first elements\n    count = {}\n    # Loop through the list of tuples and count the frequency of each first element\n    for t in Input:\n        if t[0] in count:\n            count[t[0]] += 1\n        else:\n            count[t[0]] = 1\n    # Create an empty list to store the tuples with common first elements\n    result = []\n    # Loop through the dictionary and add tuples with common first elements to the result list\n    for key, value in count.items():\n        if value > 1:\n            for t in Input:\n                if t[0] == key:\n                    result.append(t)\n    return result\n",
        "test": "assert group_tuples([]) == []",
        "num_ids": 3334,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_item = None\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_item = item\n    return max_item\n",
        "test": "assert Find_Max(['a', 'bc', 'def']) == 'def'",
        "num_ids": 2008,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    return total * len(list1)\n",
        "test": "assert round_and_sum([0.001, 0.002, 0.003]) == 0.0 * 3 ",
        "num_ids": 2187,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(0) == 0 # cube sum of 0 even natural numbers is 0",
        "num_ids": 1653,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in range(len(test_tup)):\n        result += str(test_tup[i])\n    return result\n",
        "test": "assert concatenate_tuple(()) == \"\"",
        "num_ids": 1875,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 2121,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear((\"apple\", \"banana\", \"cherry\")) == (\"e\", \"a\", \"y\") ",
        "num_ids": 1837,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 2) == 0",
        "num_ids": 1939,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 != 0]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1768,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # using regex to match date pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        # converting to desired format\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'\n",
        "test": "assert change_date_format('2020-10-20') == '20-10-2020'",
        "num_ids": 2753,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([3, 2, 1]) == [1, 2, 3]",
        "num_ids": 3174,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(i and j for i, j in zip(test_tup1, test_tup2))\n    return result_tup\n",
        "test": "assert and_tuples((True, True, False), (True, False, True)) == (True, False, False)",
        "num_ids": 2068,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -b\n    return directrix\n",
        "test": "assert parabola_directrix(2, 0, 0) == 0, \"Incorrect directrix for a parabola with coefficients 2, 0, 0\"",
        "num_ids": 1984,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1,2,3], [3,4,5]) == True",
        "num_ids": 1745,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the top and bottom base lengths\n    top_base = (base1 + base2) / 2\n    bottom_base = abs(base1 - base2)\n\n    # Calculate the area of the trapezium\n    area = (top_base + bottom_base) / 2 * height\n\n    # Calculate the median length\n    median = 2 * area / (top_base + bottom_base)\n\n    return median\n",
        "test": "assert median_trapezium(10, 20, 30) == 30",
        "num_ids": 2182,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 5) == False",
        "num_ids": 1528,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 36,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one('ab') == True ",
        "num_ids": 1443,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(10) == 0",
        "num_ids": 970,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [-2, -4]",
        "num_ids": 1768,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in str1:\n        if str1.count(i) % 2 == 0:\n            result += i\n    return result\n",
        "test": "assert remove_odd('') == ''",
        "num_ids": 1375,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 1), (2, 2), (3, 3), (4, 4)]) == 0",
        "num_ids": 2842,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n    L (list): A list of integers.\n\n    Returns:\n    int: A single integer that is the concatenation of the integers in L.\n    \"\"\"\n\n    # Convert the list of integers to a string\n    L_str = [str(i) for i in L]\n    L_str = \"\".join(L_str)\n\n    # Convert the string back to an integer\n    L_int = int(L_str)\n\n    return L_int\n",
        "test": "assert multiple_to_single([1, 2, 3]) == 123",
        "num_ids": 1771,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = re.compile(r'\\b\\w+ly\\b')\n    # Find all adverbs in the text and their positions\n    adverbs = [(match.group(), match.start()) for match in adverb_pattern.finditer(text)]\n    # Return the first adverb and its position\n    if adverbs:\n        return adverbs[0]\n    else:\n        return None\n",
        "test": "assert find_adverb_position('The boy swam quickly.') == ('quickly', 13)",
        "num_ids": 2729,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a parameter l, which is the length of the side of a cube.\n    It returns the surface area of the cube.\n    '''\n    surface_area = 6 * l**2\n    return surface_area\n",
        "test": "assert surfacearea_cube(3) == 54 # should return 54 as the surface area of a cube with length 3",
        "num_ids": 1468,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n            \n    if len(nums) > 0:\n        ratio = pos_count / len(nums)\n        return ratio\n    else:\n        return 0\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0",
        "num_ids": 2226,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def largest_neg(list1):\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest if largest != float('-inf') else None\n",
        "test": "assert largest_neg([-5, -7, -3, -9, -2]) == -2 # should return -2",
        "num_ids": 1718,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[:K])\n    return result\n",
        "test": "assert trim_tuple([], 1) == []",
        "num_ids": 2829,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "test": "assert index_multiplication((2, 3, 4), (5, 6, 7)) == (10, 18, 28) # (2*5, 3*6, 4*7)",
        "num_ids": 2536,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 30,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Convert the tuple to a set for faster lookup\n    set_tup = set(tup)\n    \n    # Initialize an empty dictionary\n    count_dict = {}\n    \n    # Iterate over the list and count the occurence of each element in the tuple\n    for item in lst:\n        if item in set_tup:\n            count_dict[item] = count_dict.get(item, 0) + 1\n    \n    return count_dict\n",
        "test": "assert count_Occurrence((1,2,3), [1,2,3]) == Counter({1: 1, 2: 1, 3: 1})",
        "num_ids": 2965,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 1623,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_num = [0, 1, 1]\n    for i in range(3, n+1):\n        perrin_num.append(perrin_num[i-1] + perrin_num[i-2] + perrin_num[i-3])\n    return sum(perrin_num[:n+1])\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def extract_string(lst, size):\n    '''\n    Given a list of strings and a size, return a new list with\n    strings of the specified size. If a string in the original list\n    is shorter than the specified size, it will be skipped.\n    '''\n    result = []\n    for s in lst:\n        if len(s) >= size:\n            result.append(s[:size])\n    return result\n",
        "test": "assert extract_string([], 10) == []",
        "num_ids": 1911,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n",
        "test": "assert remove_whitespaces(\"This is a test string.\") == \"Thisisateststring.\"",
        "num_ids": 1423,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss\n    else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(1000, 1000) == 0, \"Loss amount is not correct\"",
        "num_ids": 1719,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 1\n    while i*i <= n:\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n            if n/i != i and (n/i)%2 == 0:\n                sum += n/i\n        i += 1\n    return sum",
        "test": "assert sumofFactors(0) == 0, \"Incorrect output\" # test case 3",
        "num_ids": 1982,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'  # word boundary, any number of word characters before and after 'z', followed by another word boundary\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert text_match_wordz(\"Hello World\") == []",
        "num_ids": 1597,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(3) == True",
        "num_ids": 1908,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"] ",
        "num_ids": 1487,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    #Initialize the minimum length and sublist\n    min_length = float('inf')\n    min_sublist = []\n\n    #Iterate through all sublists of the given list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            #Check if current sublist is shorter than the minimum sublist\n            if len(lst[i:j]) < min_length:\n                min_length = len(lst[i:j])\n                min_sublist = lst[i:j]\n\n    #Return the sublist with minimum length\n    return min_sublist ",
        "test": "assert Find_Min([]) == []",
        "num_ids": 2263,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(10,20) == 200 # test case 1",
        "num_ids": 1198,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    return pattern.sub('', str1)",
        "test": "assert remove_uppercase('HELLO world') == ' world'",
        "num_ids": 1603,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 1915,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"\") == 0",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    from itertools import combinations\n\n    result = []\n    for i in range(1, len(lst) + 1):\n        for comb in combinations(lst, i):\n            result.append(comb)\n    return result\n",
        "test": "assert combinations_list([]) == [], \"Error in combinations_list\"",
        "num_ids": 2832,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n        \n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_product = max(max_product, max_ending_here)\n        \n    return max_product\n",
        "test": "assert max_subarray_product([1, 2, 3, 4, 5]) == 120  # expected output: 120",
        "num_ids": 3088,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_value(my_dict, n):\n    '''\n    This function checks if all values in a dictionary are same.\n    It takes in a dictionary and a number n as inputs. It returns True if all values in the dictionary are equal to n, False otherwise.\n    '''\n    for value in my_dict.values():\n        if value != n:\n            return False\n    return True\n",
        "test": "assert check_value({1: 1, 2: 1, 3: 1}, 1) == True",
        "num_ids": 2003,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1858,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return None\n    \n    max_product = 0\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < min_so_far:\n            min_so_far = arr[i]\n        else:\n            max_product = max(max_product, max_so_far * arr[i])\n            max_so_far = max(max_so_far, arr[i] * min_so_far)\n            min_so_far = min(min_so_far, arr[i])\n            \n    return max_product\n",
        "test": "assert max_product([1, 2, 3, -4, -5]) == 6, \"max_product([1, 2, 3, -4, -5]) incorrect\" ",
        "num_ids": 3362,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 31,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Given a tuple, return a new tuple where each element\n    is the sum of the two adjacent elements in the original tuple.\n    '''\n    # initialize a new empty tuple\n    result = ()\n    \n    # iterate over the tuple, starting from the second element\n    for i in range(1, len(test_tup)):\n        # add the current element and the previous element and append to the result tuple\n        result += (test_tup[i] + test_tup[i-1],)\n    \n    # return the result tuple\n    return result\n",
        "test": "assert add_pairwise((1, 2, 3, 4, 5)) == (3, 5, 7, 9)",
        "num_ids": 1974,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize the result to 1\n    result = 1\n    # Iterate through the array and multiply each element to the result modulo n\n    for x in arr:\n        result = (result * x) % n\n    # Return the result\n    return result\n",
        "test": "assert find_remainder([5, 10, 15, 20, 25], 5) == 0, \"Error: incorrect result\"",
        "num_ids": 1990,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3]) == True",
        "num_ids": 1752,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                intersection.append(tup1)\n                break\n    return intersection",
        "test": "assert tuple_intersection([(1, 2), (2, 3), (3, 4)], [(2, 3), (3, 4), (4, 5)]) != [(1, 2), (2, 3)] ",
        "num_ids": 3078,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char(\"hello\", \"l\", \"L\") == \"heLLo\"",
        "num_ids": 1585,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict\n",
        "test": "assert sort_counter({}) == {} # test with an empty dictionary",
        "num_ids": 2407,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def big_sum(nums):\n    '''\n    Write a Python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest\n",
        "test": "assert big_sum([5, 4, 3, 2, 1]) == 6",
        "num_ids": 1986,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n",
        "test": "assert remove_lowercase(\"123456789\") == \"123456789\"",
        "num_ids": 1567,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 37,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the number to a string\n    str_num = str(n)\n    # Find the first character of the string and return it as the first digit\n    return int(str_num[0])\n",
        "test": "assert first_Digit(1234) == 1",
        "num_ids": 1280,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 35,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in lst if x % 2 != 0]\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1648,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def difference(n):\n    # Find the sum of the first n natural numbers using formula\n    sum_n = n * (n + 1) // 2\n\n    # Find the sum of cubes of the first n natural numbers using formula\n    sum_cubes = n * (n + 1) * (2 * n + 1) // 6\n\n    # Return the difference between the sum of cubes and the sum of natural numbers\n    return sum_cubes - sum_n\n",
        "test": "assert difference(0) == 0, \"Difference is not correct for n = 0\"",
        "num_ids": 1797,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([2, 4, 6, 8, 10], 5) == 0",
        "num_ids": 2051,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n",
        "test": "assert toggle_string('The quick brown fox jumps over the lazy dog.') == 'tHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.'",
        "num_ids": 1767,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings to access individual digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through each digit in the longer of the two numbers\n    for i in range(max(len(n1_str), len(n2_str))):\n        # Convert the current digit in the first number to an integer\n        digit1 = int(n1_str[i]) if i < len(n1_str) else 0\n        # Convert the current digit in the second number to an integer\n        digit2 = int(n2_str[i]) if i < len(n2_str) else 0\n        \n        # Calculate the absolute difference between the two digits and add it to the sum\n        sum += abs(digit1 - digit2)\n    \n    return sum\n",
        "test": "assert digit_distance_nums(0, 0) == 0",
        "num_ids": 3344,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 45 ",
        "num_ids": 2848,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1).union(set(test_tup2))\n    sorted_union = sorted(list(union))\n    return sorted_union\n",
        "test": "assert union_elements((1, 2, 3), (2, 4, 6)) == [1, 2, 3, 4, 6]",
        "num_ids": 2672,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 2207,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert extract_values('The answer is \"42\".') == ['42']",
        "num_ids": 1567,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3, 4, 5], 5) == 10 # test case 1",
        "num_ids": 2007,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of its characters.\n    \"\"\"\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 1192,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total_sum = 0\n    while n > 0:\n        digit = n % 10\n        total_sum += digit\n        n //= 10\n    return total_sum\n",
        "test": "assert sum_digits(0) == 0, \"Error: sum_digits(0) != 0\"",
        "num_ids": 1728,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 33,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1,2,3,4,5]) == True",
        "num_ids": 1632,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n",
        "test": "assert empty_list(5) == [ {}, {}, {}, {}, {} ] # expected output: a list of 5 empty dictionaries",
        "num_ids": 1249,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "test": "assert sort_sublists([['b','a','c'], ['d','e','f']]) == [['a', 'b', 'c'], ['d', 'e', 'f']]",
        "num_ids": 2224,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([]) == [] ",
        "num_ids": 2560,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 2145,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(0,0) == 0, \"surfacearea_cylinder is not correct\"",
        "num_ids": 2196,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 38,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3],[1,2,3]) == True, \"Error in is_Sub_Array function\"",
        "num_ids": 2115,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return \"Not defined for negative numbers\"\n    elif n == 0:\n        return 1\n    else:\n        return n % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1960,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 2334,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    # Check if the lengths of the two tuples are the same\n    if len(test_tup1) != len(test_tup2):\n        print(\"Error: Tuples are of different lengths.\")\n        return\n    \n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_elements = []\n    \n    # Iterate over the tuples and compare the elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    \n    # Return the dissimilar elements as a tuple\n    return tuple(dissimilar_elements)\n",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3)) == (), \"Empty tuple expected.\"",
        "num_ids": 3196,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(num):\n        '''\n        A function to check if a number is even.\n        '''\n        return num % 2 == 0\n\n    # Create an empty list to hold the even elements.\n    even_list = []\n\n    # Loop through the nested tuple.\n    for element in test_tuple:\n        # Check if the element is a tuple.\n        if isinstance(element, tuple):\n            # Loop through the inner tuple.\n            for sub_element in element:\n                # Check if the sub-element is even.\n                if even_fnc(sub_element):\n                    even_list.append(sub_element)\n        else:\n            # Check if the element is even.\n            if even_fnc(element):\n                even_list.append(element)\n\n    # Return the list of even elements.\n    return tuple(even_list)\n",
        "test": "assert even_ele((1, 2, 3, 4, 5), lambda x: x%2==0) == (2, 4)",
        "num_ids": 2968,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Calculate the surface area of a square pyramid with given base edge and height.\n    \"\"\"\n    base_area = b ** 2\n    slant_height = (b ** 2 + s ** 2) ** 0.5\n    triangular_area = 0.5 * b * slant_height\n    surface_area = base_area + 4 * triangular_area\n    return surface_area",
        "test": "assert surface_Area(4,3) == 56.0, \"Test case 1 failed\"",
        "num_ids": 2375,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True, \"Dictionary is not empty\"",
        "num_ids": 1210,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def catalan_number(num):\n    if num <= 1:\n        return 1\n    else:\n        res = 0\n        for i in range(num):\n            res += catalan_number(i) * catalan_number(num-i-1)\n        return res\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1524,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    matches = pattern.findall(text)\n    if matches:\n        first_adverb = matches[0]\n        first_adverb_position = text.index(first_adverb)\n        return first_adverb, first_adverb_position\n    else:\n        return None, None\n",
        "test": "assert find_adverbs(\"The bird was flying slowly.\") == ((\"slowly\", 20))",
        "num_ids": 2717,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # Create a max-heap of size n to store the n most expensive items\n    max_heap = []\n    \n    # Iterate through the items list\n    for item in items:\n        # Add the item to the max-heap\n        heapq.heappush(max_heap, item)\n        \n        # If the max-heap size exceeds n, remove the smallest item\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    \n    # Return the n most expensive items in descending order\n    return sorted(max_heap, reverse=True)\n",
        "test": "assert expensive_items([], 3) == [] ",
        "num_ids": 3154,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    first_part = l[:n]\n    second_part = l[n:]\n    second_part.extend(first_part)\n    return second_part\n",
        "test": "assert split_Arr([1, 2, 3], 0) == [1, 2, 3]",
        "num_ids": 2012,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3]) == (1,2,3) # check if it converts list to tuple correctly",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 1:\n        return None\n    return max(nums) - min(nums)\n",
        "test": "assert big_diff([1, 5, 3, 8, 4]) == 7 # should return 7",
        "num_ids": 1973,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    i = 1\n    while i * i <= b:\n        if i * i >= a:\n            squares.append(i * i)\n        i += 1\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9] ",
        "num_ids": 2256,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return rect_x, rect_y",
        "test": "assert polar_rect(1,0) == (1,0)",
        "num_ids": 1649,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) <= 1:\n        return newList\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1879,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k):\n        result *= (n-i)\n        result //= (i+1)\n    return result\n",
        "test": "assert binomial_Coeff(10,1) == 10",
        "num_ids": 2225,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Using regular expressions to match the pattern of an IP address\n    pattern = r'\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b'\n    match = re.match(pattern, ip)\n\n    # If the input ip address is not a valid IP address, return None\n    if not match:\n        return None\n\n    # Split the input IP address into its component octets\n    octets = ip.split('.')\n\n    # Remove leading zeroes from each octet\n    cleaned_octets = [octet.lstrip('0') or '0' for octet in octets]\n\n    # Join the cleaned octets to form the new IP address\n    new_ip = '.'.join(cleaned_octets)\n\n    return new_ip",
        "test": "assert removezero_ip('192.168.010.001') == '192.168.10.1' # correct output",
        "num_ids": 2445,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def diff_even_odd(lst):\n    # initialize variables to None to check if there are even/odd numbers in the list\n    first_even = None\n    first_odd = None\n    \n    # iterate over the list and find the first even and odd numbers\n    for num in lst:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        # if we've found both even and odd numbers, break out of the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # if there is no even or odd number in the list, return None\n    if first_even is None or first_odd is None:\n        return None\n    \n    # return the difference between the first even and first odd numbers\n    return first_even - first_odd\n",
        "test": "assert diff_even_odd([1, 3, 5, 7, 9, 2]) == 1, \"Error: diff_even_odd([1, 3, 5, 7, 9, 2]) should return 1\"",
        "num_ids": 3333,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Returns the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    str1_list = list(str1)\n    str2_list = list(str2)\n    n = len(str1)\n    count = 0\n    \n    # Count the number of mismatches between the two strings\n    for i in range(n):\n        if str1_list[i] != str2_list[i]:\n            count += 1\n    \n    # If the count is odd, we cannot make the two strings equal with any number of swaps\n    if count % 2 != 0:\n        return -1\n    \n    # We can swap pairs of bits to make the two strings equal\n    count = count // 2\n    \n    return count\n",
        "test": "assert min_Swaps(\"000\", \"000\") == 0, \"Test case 3 failed\"",
        "num_ids": 3574,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        # Get the size of the item in bytes\n        size += sys.getsizeof(item)\n    return size\n",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 1818,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def find_kth(arr1, arr2, k):\n    i = j = 0\n    while k > 0:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        if j == len(arr2):\n            return arr1[i + k - 1]\n        if k == 1:\n            return min(arr1[i], arr2[j])\n        ti = min(i + k // 2, len(arr1))\n        tj = min(j + k // 2, len(arr2))\n        if arr1[ti-1] <= arr2[tj-1]:\n            k -= ti - i\n            i = ti\n        else:\n            k -= tj - j\n            j = tj",
        "test": "assert find_kth([1, 2, 3], [4, 5, 6], 0) == None",
        "num_ids": 3221,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Calculate the length of the number\n    length = len(str(number))\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Find the sum of the cube of each digit of the number\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(1000) == False",
        "num_ids": 2294,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1), \"Incorrect result for sum_average(1)\"",
        "num_ids": 1515,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False ",
        "test": "assert is_Even(0) == True, \"0 is even, but is_Even(0) returns False\"",
        "num_ids": 1223,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    # Loop through the string and update the frequency of each character\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # Loop through the string again and return the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            return char\n    # If no character is repeated, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 1854,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all ludic numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        factors = []\n        for j in range(1, i+1):\n            if i % j == 0:\n                factors.append(j)\n        if len(factors) == len(set(factors)):\n            ludic_numbers.append(i)\n    return ludic_numbers",
        "test": "assert get_ludic(0) == []  # Test if the function returns an empty list for a non-positive input. ",
        "num_ids": 3698,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse the list of words\n    words = words[::-1]\n    \n    # Join the reversed list of words into a string\n    s = ' '.join(words)\n    \n    return s\n",
        "test": "assert reverse_words(\"a\") == \"a\"",
        "num_ids": 1488,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 1417,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 40,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians\n",
        "test": "assert radian_degree(0) == 0, \"Radian_degree error\"",
        "num_ids": 1154,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"hello world\", \"hello\") == (\"hello\", 0, 5)",
        "num_ids": 2418,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 2541,
        "indeed": true
    },
    {
        "number": 610,
        "max_answer_num": 29,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Create a new list with all the elements of list1 except the L'th element\n    new_list = [element for i, element in enumerate(list1) if i != L-1]\n    return new_list\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5] ",
        "num_ids": 2351,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, return the max of the n'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 9 ",
        "num_ids": 2447,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first\n    element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 2409,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 35,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    total_sum = 0\n    for i in test_list:\n        total_sum += i\n        cum_sum.append(total_sum)\n    return cum_sum",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 2387,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [2.0, 5.0, 8.0]",
        "num_ids": 3218,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n",
        "test": "assert tuple_modulo((2, 4, 6), (3, 5, 7)) == (2, 4, 6)",
        "num_ids": 2744,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    while steps > 0:\n        if steps >= d:\n            jumps += 1\n            steps -= d\n        else:\n            break\n    return jumps",
        "test": "assert min_Jumps(10, 5) == 2",
        "num_ids": 2072,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] == 0 and nums2[i] == 0:\n            result.append(0)\n        else:\n            result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([2, 4, 6], [2, 2, 3]) == [1.0, 2.0, 2.0] ",
        "num_ids": 2260,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    non_nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    return ''.join(non_nums) + ''.join(nums)\n",
        "test": "assert move_num(\"Hello123\") == \"Hello123\"",
        "num_ids": 2475,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def largest_subset(a):\n    # Create a set to store the divisors of each pair of numbers\n    divisors = set()\n\n    # Loop through all pairs of numbers in the list\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            # If the pair is divisible, add the divisor to the set\n            if a[i] % a[j] == 0:\n                divisors.add(a[j])\n            if a[j] % a[i] == 0:\n                divisors.add(a[i])\n\n    # Return the size of the set, which is the size of the largest subset\n    return len(divisors)\n",
        "test": "assert largest_subset([1,2,4,7,14]) == 3",
        "num_ids": 2309,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        median1 = (arr1[n // 2] + arr2[n // 2 - 1]) / 2\n        median2 = (arr1[n // 2 - 1] + arr2[n // 2]) / 2\n        median = (median1 + median2) / 2\n    else:\n        median = (arr1[n // 2] + arr2[n // 2]) / 2\n    return median\n",
        "test": "assert get_median([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 5) == 3",
        "num_ids": 3159,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1, 2, 3], 2) == [1, 4, 9]",
        "num_ids": 1915,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 39,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"HELLO\") == \"HELLO\"",
        "num_ids": 1057,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 2046,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area",
        "test": "assert triangle_area(0) == 0",
        "num_ids": 1843,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i] != i+1:\n            return i+1\n\n    return end+1\n",
        "test": "assert find_First_Missing([0,2,3,4,5,6,7,8]) == 1, \"Test case 4 failed\"",
        "num_ids": 2557,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 1209,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 25,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 1801,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    This function takes a coordinate tuple (x, y) and returns a list of all adjacent coordinates.\n    \"\"\"\n    if len(sub) == 0:  # If no adjacent coordinates have been generated yet\n        sub = [(ele[0], ele[1]+1), (ele[0], ele[1]-1), (ele[0]+1, ele[1]), (ele[0]-1, ele[1])]\n    else:\n        for i in range(len(sub)):\n            if sub[i][0] < 0 or sub[i][1] < 0:  # If x or y is less than 0\n                sub[i] = None\n        sub = [x for x in sub if x is not None]  # Remove all None values from the list\n    return sub\n",
        "test": "assert adjac((1,1), [(0,0), (0,1), (0,2), (1,0), (1,2), (2,0), (2,1), (2,2)]) == [(0,0), (0,1), (0,2), (1,0), (1,2), (2,0), (2,1), (2,2)]",
        "num_ids": 3608,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_', ' ')\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    non_zero = []\n    zero = []\n    for num in num_list:\n        if num == 0:\n            zero.append(num)\n        else:\n            non_zero.append(num)\n    return non_zero + zero\n",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] ",
        "num_ids": 2692,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pair_xor_Sum(arr, n):\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor ^= arr[i] ^ arr[j]\n    return sum_xor\n",
        "test": "assert pair_xor_Sum([0,1],2) == 1 # True",
        "num_ids": 2144,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 36,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1862,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) # Should return True",
        "num_ids": 1746,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16)\n    wc = round(wc)\n    return wc\n",
        "test": "assert wind_chill(40, 10) == 5",
        "num_ids": 2730,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    \n    return total_length\n",
        "test": "assert sample_nam([\"alice\", \"Bob\", \"charlie\", \"DAVID\", \"eva\"]) == 8 ",
        "num_ids": 1899,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is in between them from a string.\n    '''\n\n    # Using regex to remove parenthesis and what is in between them\n    items = re.sub(r'\\([^)]*\\)', '', items)\n\n    return items\n",
        "test": "assert remove_parenthesis('hello') == 'hello' ",
        "num_ids": 1643,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_nonagonal(n):\n    '''\n    Find the nth nonagonal number using the formula n*(2n-1).\n    '''\n    return n*(2*n-1)\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1571,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expression to match words containing 'z' except at the start and end of the word\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n",
        "test": "assert text_match_wordz_middle('Hello, world!') == False",
        "num_ids": 1844,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array upto the given position\n    input[:k] = input[:k][::-1]\n    \n    # Return the reversed array\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 2377,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((), {'a': 10, 'b': 20}) == ({'a': 10, 'b': 20},) ",
        "num_ids": 2403,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    # Initialize the memoization table\n    memo = [[0] * n for _ in range(n)]\n    # Fill the memoization table with the base cases\n    for i in range(n):\n        memo[i][0] = sum(cost[i]) / (i + 1)\n    for j in range(1, n):\n        memo[0][j] = sum(cost[k][j] for k in range(j + 1)) / (j + 1)\n    # Fill the memoization table using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            # Compare the option of going right or down\n            memo[i][j] = max(memo[i-1][j] + cost[i][j], memo[i][j-1] + cost[i][j]) / (i + j + 1)\n    # Return the maximum average of all paths\n    return memo[n-1][n-1]\n",
        "test": "assert maxAverageOfPath([[1, 2], [3, 4]]) == 2.5",
        "num_ids": 5470,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value,\n    - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students\n",
        "test": "assert filter_data({'Alice': (1.65, 50), 'Bob': (1.70, 60), 'Charlie': (1.80, 70)}, 1.75, 60) == {'Charlie': (1.8, 70)}, \"Test case 2 failed\"",
        "num_ids": 3489,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,2,3], [1,2,3]) == 3",
        "num_ids": 2358,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to string to get individual digits\n    base_str = str(base)\n    # Convert each digit to an integer and raise it to the power\n    digits_squared = [int(digit) ** power for digit in base_str]\n    # Calculate the sum of the digits raised to the power\n    sum_of_digits = sum(digits_squared)\n    return sum_of_digits\n",
        "test": "assert power_base_sum(6, 1) == 6  # should return 6",
        "num_ids": 2089,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n",
        "test": "assert extract_quotation('') == [], \"extract_quotation() should return [] for empty string\"",
        "num_ids": 1633,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_list = []\n    for i in range(len(test_tup) - 1):\n        result_list.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_list)\n",
        "test": "assert multiply_elements((2,3,4)) == (6,12)",
        "num_ids": 2441,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 2069,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.append(key)\n    return result\n",
        "test": "assert consecutive_duplicates([]) == [] ",
        "num_ids": 3160,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * h\n    return lateral_area\n",
        "test": "assert lateralsurface_cone(0, 0) == 0, \"Incorrect result\"",
        "num_ids": 2142,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s.,]+'\n    text = re.sub(pattern, ':', text)\n    return text\n",
        "test": "assert replace_specialchar(\"hello.world,\") == \"hello:world:\"",
        "num_ids": 1640,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1 # If x is not found in A\n",
        "test": "assert find_first_occurrence([1,2,3,4,5], 3) == 2 # should return 2",
        "num_ids": 3119,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n    \n    # Initialize prefix sum array to store the product of all elements till that index\n    prefix_prod = [1] * (n+1)\n    for i in range(1, n+1):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n        \n    # Initialize suffix sum array to store the product of all elements from that index to the end\n    suffix_prod = [1] * (n+1)\n    for i in range(n-1, -1, -1):\n        suffix_prod[i] = suffix_prod[i+1] * arr[i]\n        \n    # Calculate the sum of products of all subarrays\n    result = 0\n    for i in range(1, n):\n        result += prefix_prod[i] * suffix_prod[i+1]\n        result %= mod\n        \n    return result\n",
        "test": "assert sum_Of_Subarray_Prod([]) == 0, \"Incorrect result for []\"",
        "num_ids": 3441,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    mask = 0b111111111011111111101111111110 # binary mask to set middle bits\n    return n ^ (n & mask) # XOR with mask to toggle bits\n",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 2198,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 1903,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert check_str(\"Apple\") == True, \"Test Case 1 Failed\"",
        "num_ids": 1500,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (1/2**(n-1)) * geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1, \"geometric_sum(1) should be 1\"",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\n\ndef find_Index(n):\n    index = 1\n    count = 1\n    num = 1\n    \n    while count <= n:\n        num += index\n        count += 1\n        index += 1\n        \n    return index-1",
        "test": "assert find_Index(1) == 1 # n = 1",
        "num_ids": 1786,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    result = {}\n    # Loop over the tuple, using an index to access adjacent elements\n    for i in range(len(test_tup) - 1):\n        # Add the key-value pair to the dictionary\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 2845,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    for i in range(len(s)-1):\n        if s[i] != s[i+1]:\n            return False\n    return True\n",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 1648,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    # calculate the height of the tetrahedron\n    height = (math.sqrt(3) / 3) * side\n    # calculate the area of each face\n    face1 = 0.5 * side * side\n    face2 = 0.5 * height * height\n    # calculate the area of the triangle formed by the three faces\n    base = math.sqrt(3) * height / 2\n    triangle = 0.5 * base * height\n    # calculate the total area of the tetrahedron\n    total_area = 2 * face1 + 2 * face2 - triangle\n    return total_area\n",
        "test": "assert area_tetrahedron(10) == 325.75  # should return 325.75",
        "num_ids": 1981,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    return list[-m:] + list[:-m]\n",
        "test": "assert rotate_right([1], 5) == [1]",
        "num_ids": 2904,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
        "test": "assert check_none((None, None)) == True",
        "num_ids": 1418,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def divisible_by_digit(digit):\n        return lambda num: num % digit == 0\n    \n    numbers = range(startnum, endnum+1)\n    for digit in range(1, 10):\n        numbers = filter(divisible_by_digit(digit), numbers)\n    \n    return list(numbers)\n",
        "test": "assert divisible_by_digits(201, 300) == []",
        "num_ids": 2972,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a / 360) * math.pi\n",
        "test": "assert sector_area(5, 720) is None",
        "num_ids": 1826,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Returns the length of the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Initialize a 3D table to store lengths of longest common subsequences of different string combinations\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n\n    # Compute lengths of longest common subsequences of different string combinations\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1], L[i][j][k-1])\n\n    # Return the length of the longest common subsequence of all three strings\n    return L[m][n][o]\n",
        "test": "assert lcs_of_three(\"abcdefg\", \"azced\", \"abgde\") == \"a\"",
        "num_ids": 4534,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Using regular expressions to match words starting with capital letters\n    pattern = re.compile(r'([A-Z][a-z]+)')\n    \n    # Replace each match with the same word with a space before it\n    result = pattern.sub(r' \\1', str1)\n    \n    # Return the modified string with spaces between capital words\n    return result\n",
        "test": "assert capital_words_spaces('ACustomerSupportSystem') == 'A Customer Support System'",
        "num_ids": 2117,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str\n",
        "test": "assert sort_numeric_strings([]) == []",
        "num_ids": 2347,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1,2), (3,4)], (5,6)) == [(1,2), (3,4), (5,6)]",
        "num_ids": 1845,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def check_min_heap_helper(arr, i):\n    # base case: if current index is equal to the length of the array or if parent index is negative, then it's a valid heap\n    if i >= len(arr) or arr[i] > arr[(i+1)//2-1]:\n        return True\n    # recursive call for the left and right child of the current index\n    left = check_min_heap_helper(arr, i*2+1)\n    right = check_min_heap_helper(arr, i*2+2)\n    # if both left and right are valid heaps, then current index is a valid heap\n    return left and right",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5], 0) == True ",
        "num_ids": 3481,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def jacobsthal_num(n):\n    jacobsthal = [0, 1]\n    for i in range(2, n + 1):\n        jacobsthal.append(jacobsthal[i - 1] + 2 * jacobsthal[i - 2])\n    return jacobsthal[n]",
        "test": "assert jacobsthal_num(2) == 1",
        "num_ids": 1945,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list in ascending order\n    sorted_list = sorted(test_list)\n    \n    # select first K elements from sorted list\n    min_k_records = sorted_list[:K]\n    \n    return min_k_records\n",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 0) == []",
        "num_ids": 3195,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3] # all elements are common",
        "num_ids": 2905,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    # Find the smallest number\n    smallest = min(numbers)\n    \n    # Remove the smallest number from the list\n    numbers.remove(smallest)\n    \n    # Find the second smallest number\n    second_smallest = min(numbers)\n    \n    # Return the second smallest number\n    return second_smallest\n",
        "test": "assert second_smallest([1, 2, 3]) == 2",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 35,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    result = re.search(pattern, text)\n    return result is not None\n",
        "test": "assert text_match_zero_one(\"ab\") is not None",
        "num_ids": 1450,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0, \"Test case failed\"",
        "num_ids": 2450,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    # Initialize an empty dictionary to store the count of each sublist\n    count_dict = {}\n\n    # Loop through each sublist in the given list\n    for sublist in list1:\n        # Convert the sublist to a tuple and use it as the key for the count_dict\n        sublist_tuple = tuple(sublist)\n        \n        # If the sublist_tuple is not already in the count_dict, add it with a value of 1\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        # If the sublist_tuple is already in the count_dict, increment its value by 1\n        else:\n            count_dict[sublist_tuple] += 1\n    \n    # Return the count_dict\n    return count_dict\n",
        "test": "assert unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5, 6]]) == {(1, 2, 3): 3, (4, 5, 6): 1} ",
        "num_ids": 2932,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if len(num.split(\".\")[1]) <= 2:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "test": "assert is_decimal('123.45') == True, \"Test failed for is_decimal('123.45')\"",
        "num_ids": 1381,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 31,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 0:\n        return False\n    else:\n        for i in range(len(arr)):\n            if arr[i] not in arr[i+1:]:\n                return False\n        return True\n",
        "test": "assert unique_Element([1]) == True",
        "num_ids": 1512,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 == 9 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 11:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumber_number(9) == 1 # September has 30 days",
        "num_ids": 1761,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n    # initialize the minimum difference as infinity\n    min_diff = float('inf')\n    # loop through the array and find the minimum difference between adjacent elements\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    # return the minimum difference\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1",
        "num_ids": 2677,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 1174,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number.\n    \"\"\"\n    polite = 1\n    count = 1\n    while count < n:\n        polite += 1\n        is_polite = True\n        for i in range(1, int(math.sqrt(polite)) + 1):\n            if polite % i == 0:\n                if i != 1 and polite // i != i:\n                    is_polite = False\n                    break\n        if is_polite:\n            count += 1\n    return polite",
        "test": "assert is_polite(1) == 1",
        "num_ids": 2125,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result\n",
        "test": "assert pair_wise([1,2,3,4,5]) == [(1,2), (2,3), (3,4), (4,5)] ",
        "num_ids": 1695,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1,2,3,4,5,6], 0) == 0",
        "num_ids": 2497,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1, 2, 3], [1, 2, 3]) == []",
        "num_ids": 1765,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n",
        "test": "assert odd_num_sum(0) == 0",
        "num_ids": 1688,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n\n    stack = deque()\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    \n    return not stack\n",
        "test": "assert check_expression(\"()()()\") == True",
        "num_ids": 2316,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words using space as a delimiter\n    words = test_str.split()\n    \n    # Create an empty list to store words with length greater than K\n    new_words = []\n    \n    # Loop through each word and check its length\n    for word in words:\n        if len(word) > K:\n            # If the length of the word is greater than K, add it to the new list\n            new_words.append(word)\n    \n    # Join the words in the new list with a space and return the result\n    return ' '.join(new_words)\n",
        "test": "assert remove_length(\"\", 0) == \"\"",
        "num_ids": 1878,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(), match.start()))\n    if not results:\n        return None\n    return results",
        "test": "assert occurance_substring(\"This is a sample text\", \"nothing\") == None",
        "num_ids": 2238,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and checks if every odd index contains odd numbers.\n    '''\n    # Loop through the list with a step of 2 (i.e., only odd indices)\n    for i in range(1, len(nums), 2):\n        # If the element at the current index is not an odd number, return False\n        if nums[i] % 2 == 0:\n            return False\n    # If the loop completes without returning False, then all odd indices contain odd numbers\n    return True\n",
        "test": "assert odd_position([1,3,5,7]) == True, \"Error in odd_position\"",
        "num_ids": 1770,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Counts the characters in the given string that have vowels as their neighbors.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0:\n            if test_str[i+1] in vowels:\n                count += 1\n        elif i == len(test_str) - 1:\n            if test_str[i-1] in vowels:\n                count += 1\n        else:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count\n",
        "test": "assert count_vowels(\"\") == 0",
        "num_ids": 1929,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the count of each element\n    count = {}\n    # Iterate through the list and count the occurrence of each element\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    # Iterate through the list again and sum up the non-repeated elements\n    total = 0\n    for num in arr:\n        if count[num] == 1:\n            total += num\n    return total\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15 ",
        "num_ids": 2532,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    packed_list = []\n    for key, group in groupby(list1):\n        packed_list.append(list(group))\n    return packed_list\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 2770,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert each list to a tuple and count the occurrences using Counter function\n    from collections import Counter\n    sublist_count = Counter([tuple(sublist) for sublist in list1])\n    return sublist_count\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 3019,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n\n    result = []\n\n    # Find all possible combinations of tuples in the list\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            # Calculate the sum of each combination\n            total = sum([sum(t) for t in comb])\n\n            # Add the combination and its sum to the result list\n            result.append((comb, total))\n\n    return result",
        "test": "assert find_combinations([(2, 3), (5, 7), (4, 6)]) != [(2, 3, 5, 7), (4, 6, 2, 3), (5, 7, 2, 3)] ",
        "num_ids": 5637,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n and returns True if the count of divisors of n is even, and False otherwise.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 2\n        elif i * i == n:\n            divisor_count += 1\n    return divisor_count % 2 == 0\n",
        "test": "assert count_divisors(1) == 1, \"Incorrect count of divisors\" ",
        "num_ids": 1993,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+2, n+1, 2):\n            for k in range(i, j, 2):\n                sum += arr[k]\n    return sum",
        "test": "assert odd_length_sum([0, 0, 0, 0, 0]) == 0, \"Incorrect output for odd_length_sum([0, 0, 0, 0, 0])\"",
        "num_ids": 2825,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Compute the max and min of RGB components\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    \n    # Compute the difference between max and min of RGB components\n    diff = maxc - minc\n    \n    # Compute the Value component\n    v = maxc\n    \n    # Check if the color is grayscale\n    if diff == 0:\n        return (0, 0, v)\n    \n    # Compute the Saturation component\n    s = diff/maxc\n    \n    # Compute the Hue component\n    if r == maxc:\n        h = (g - b)/diff\n    elif g == maxc:\n        h = 2 + (b - r)/diff\n    else:\n        h = 4 + (r - g)/diff\n    \n    # Convert Hue to degrees\n    h = h*60\n    if h < 0:\n        h = h + 360\n    \n    return (h, s, v)\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 4601,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def mul_even_odd(list1):\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                odd_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                even_num = num\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None\n",
        "test": "assert mul_even_odd([2, 4, 6, 8]) == 16 ",
        "num_ids": 2917,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the parentheses from the string\n    test_str = test_str.strip('()')\n\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Convert the list of strings into a list of integers\n    int_list = [int(num) for num in str_list]\n\n    # Convert the list of integers into a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 2412,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "test": "assert right_insertion([1, 3, 5, 7], 0) == 0",
        "num_ids": 1672,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a(b{3})\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three('abbbb')",
        "num_ids": 1396,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    test_tuple = tuple(test_list)\n\n    # create a new tuple with the list tuple and the string\n    new_tup = test_tuple + (test_str,)\n\n    return new_tup\n",
        "test": "assert new_tuple([], \"empty_list\") == (\"empty_list\",)",
        "num_ids": 1803,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8]) == True",
        "num_ids": 1907,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        if type(i) != tuple:\n            new_list.append(i)\n    return tuple(new_list)\n",
        "test": "assert remove_nested(()) == () # Empty tuple input",
        "num_ids": 2259,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert count_list([]) == 0",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of x in arr if x is present, else returns -1.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    result = -1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == x:\n            result = mid\n            start = mid + 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    # Check if x is present in arr or not\n    if arr[result] == x:\n        while result < len(arr) - 1 and arr[result + 1] == x:\n            result += 1\n        return result\n    else:\n        return -1\n",
        "test": "assert last([1, 2, 3, 4, 5], 5) == 4",
        "num_ids": 2559,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb(\"aab\") == True",
        "num_ids": 1583,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 1751,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 != 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_odd(10) == 25",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 40,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "test": "assert _sum([1, 2, 3]) == 6",
        "num_ids": 1523,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to binary string\n    n_binary = bin(n)[2:]\n    \n    # Pad leading zeros if necessary\n    n_binary = n_binary.zfill(32)\n    \n    # Rotate the binary string to the left by d bits\n    rotated_n_binary = n_binary[d:] + n_binary[:d]\n    \n    # Convert the rotated binary string back to decimal\n    rotated_n = int(rotated_n_binary, 2)\n    \n    return rotated_n\n",
        "test": "assert left_rotate(0,1) == 0, \"Incorrect rotation\"",
        "num_ids": 2084,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello, world!\") == \"Hello,world!\" # test with spaces",
        "num_ids": 1353,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a Python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    elif x != y and y != z and x != z:\n        count = 0\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 1696,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # If the array is already sorted, then the number of rotations required is 0\n    if arr == sorted(arr):\n        return 0\n\n    # Find the minimum element in the array\n    min_element = min(arr)\n\n    # Initialize the count of rotations\n    count = 0\n\n    # Iterate through the array and check if the minimum element is encountered\n    for i in range(n):\n        if arr[i] == min_element:\n            count = i\n            break\n\n    # Return the count of rotations\n    return count",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0, \"Incorrect number of rotations\" ",
        "num_ids": 3140,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # square root of n rounded to nearest integer\n    root = int(n ** 0.5)\n    # if square of root is equal to n, then n is a perfect square\n    return root * root == n\n",
        "test": "assert is_perfect_square(1) == True",
        "num_ids": 1380,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 3, 4, 5]) == True",
        "num_ids": 1391,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            result = lst\n    return result\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]",
        "num_ids": 3109,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 1984,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1591,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 36,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup\n",
        "test": "assert check_K(('a', 'b', 'c'), 'a') == True",
        "num_ids": 1551,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    # check if tuples have same length\n    if len(test_tup1) != len(test_tup2):\n        return False\n    \n    # check if each element of second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n        \n    # if all conditions are satisfied, return True\n    return True\n",
        "test": "assert check_smaller((2, 4, 6), (1, 3, 5)) == True ",
        "num_ids": 2216,
        "indeed": true
    }
]