[
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n",
        "test": "assert similar_elements([1, 2, 3, 4, 5], [2, 3, 4, 6, 7]) == [2, 3, 4]",
        "num_ids": 1608,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False\n",
        "test": "assert is_not_prime(0) == True",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    h = []\n    for num in nums:\n        hq.heappush(h, num)\n        if len(h) > n:\n            hq.heappop(h)\n    return sorted(h, reverse=True)\n",
        "test": "assert heap_queue_largest([1,1,1,1,1,1,1,1,1],3) == [1,1,1]",
        "num_ids": 2144,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Check whether a number is a power of two or not.\n\n    :param x: the number to check\n    :return: True if x is a power of two, False otherwise\n    '''\n\n    # If the number is 0 or negative, it's not a power of two\n    if x <= 0:\n        return False\n\n    # Check if the number can be divided by 2 without a remainder\n    while x % 2 == 0:\n        x = x // 2\n\n    # If the number is 1, it's a power of two\n    if x == 1:\n        return True\n\n    # If the number is greater than 1, it's not a power of two\n    return False\n",
        "test": "assert is_Power_Of_Two(2) == True, \"2 is a power of 2\"",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to find all words that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    return words\n",
        "test": "assert find_char_long('I love programming.') == ['love', 'programming']",
        "num_ids": 1380,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "test": "assert square_nums([1,2,3]) == [1,4,9]",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    if not str:\n        return 0\n\n    # Find the longest common suffix of the string with its reverse\n    # and the length of the prefix of the string that is also the suffix\n    # of the reversed string\n    max_suffix_len = 0\n    prefix_len = 0\n    for i in range(len(str)):\n        if str[i] == str[-i-1]:\n            max_suffix_len += 1\n        else:\n            break\n    prefix_len = len(str) - max_suffix_len\n\n    # Calculate the minimum number of rotations required to get the same string\n    rotations = (len(str) - prefix_len) % len(str)\n\n    return rotations\n",
        "test": "assert find_Rotations(\"hello world\") == 0, \"hello world should not have any rotation\"",
        "num_ids": 1969,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n\n    if first_occurrence == last_occurrence:\n        return s.replace(ch, '', 1)\n\n    return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n",
        "test": "assert remove_Occ('hello world', 'o') == 'hell wrld'",
        "num_ids": 2238,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def sort_matrix(M):\n    # Compute the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    # Sort the matrix rows according to the sum of their elements\n    sorted_M = [row for _, row in sorted(zip(row_sums, M))]\n    # Return the sorted matrix\n    return sorted_M\n",
        "test": "assert sort_matrix([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]",
        "num_ids": 2305,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(0, 0, 0) == 0",
        "num_ids": 965,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters\n    joined with an underscore, False otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_lowercase_underscore(\"this_is_a_test\") == True",
        "num_ids": 1242,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Removes the characters present in the second string from the first string.\n    \"\"\"\n    result = \"\"\n    for char in string1:\n        if char not in string2:\n            result += char\n    return result",
        "test": "assert str_to_list('python', 'py') == 'thon'",
        "num_ids": 2127,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 1436,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    woodall_sum = 0\n    while x > 0:\n        woodall_sum += x % 10\n        x //= 10\n    return woodall_sum == 13\n",
        "test": "assert is_woodall(17) == False",
        "num_ids": 1366,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    str_num = str(num)\n    rev_num = int(str_num[::-1])\n    twice_rev = rev_num * 2\n    if num == twice_rev - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(12345) == False, \"Expected False but got True\"",
        "num_ids": 1417,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a Python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    res = \"\"\n    for i in arr:\n        res += str(i)\n    return int(res)\n",
        "test": "assert find_Max_Num([1,2,3]) == 321 # largest number that can be formed with the given list of digits",
        "num_ids": 1638,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x * y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(5,-7) == True",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_num = n * (2*n - 1)\n    return oct_num\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sum_dict = defaultdict(int)\n    count = 0\n    n = len(s)\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += int(s[j])\n            count += sum_dict[current_sum]\n            sum_dict[current_sum] += 1\n    return count\n",
        "test": "assert count_Substrings(\"\") == 0",
        "num_ids": 2216,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1217,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1762,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples using the second value of each tuple.\n    '''\n    # Use the `sorted` function with the `key` parameter to specify that we want to sort by the second element of each tuple\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(\"English\", 80), (\"Maths\", 75), (\"Science\", 90)]) == [(\"Maths\", 75), (\"English\", 80), (\"Science\", 90)]",
        "num_ids": 1739,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 1544,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, -2, 3, -4, 5]) == 3 # output: 3 ",
        "num_ids": 1024,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize a list to store Bell numbers\n    bell = [1, 1]\n    # Calculate Bell numbers up to n\n    for i in range(2, n+1):\n        bell.append(sum(bell[:i]))\n    # Initialize a list to store the partition numbers\n    partition = [1]\n    # Calculate partition numbers up to n\n    for i in range(1, n+1):\n        partition.append(sum(partition[:i])*bell[i])\n    # Return the partition number of n\n    return partition[n]\n",
        "test": "assert bell_number(0) == 1, \"Bell number for 0 should be 1\"",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    inc = A[1] > A[0]\n    for i in range(2, len(A)):\n        if A[i] > A[i-1]:\n            if not inc:\n                return False\n        elif A[i] < A[i-1]:\n            if inc:\n                return False\n        else:\n            continue\n    return True\n",
        "test": "assert is_Monotonic([1,1,1,1,1]) == True # monotonic increasing array",
        "num_ids": 2136,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_sublist(l, s):\n    '''\n    Check whether a list contains the given sublist or not.\n    '''\n    n = len(s)\n    for i in range(len(l) - n + 1):\n        if l[i:i+n] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1, 2, 3], [3, 4]) == False",
        "num_ids": 1573,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i]) != length:\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1,2,3),(4,5,6)]) == True",
        "num_ids": 1605,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted_arr = False\n\n    while not sorted_arr:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted_arr = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted_arr = False\n            i += 1\n\n    return nums\n",
        "test": "assert comb_sort([3, 1, 4, 1, 5, 9, 2, 6, 5]) == [1, 1, 2, 3, 4, 5, 5, 6, 9] ",
        "num_ids": 2129,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    j = 0\n    while i*i < n:\n        i += 1\n        if i*i == n:\n            return True\n    i -= 1\n    while j*j < n:\n        j += 1\n        if j*j == n:\n            return True\n        if j*j - i*i == n:\n            return True\n    return False\n",
        "test": "assert dif_Square(30) == False",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    \n    color_dict = {}\n    for i in range(len(colors)):\n        if colors[i] not in color_dict:\n            color_dict[colors[i]] = patterns[i]\n        elif color_dict[colors[i]] != patterns[i]:\n            return False\n    \n    return True\n",
        "test": "assert is_samepatterns(['yellow', 'green', 'red'], ['yellow', 'green', 'red']) == True",
        "num_ids": 2207,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6)], 1) == [(1, 2, 3), (4, 5, 6)]",
        "num_ids": 2155,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(23) == False",
        "num_ids": 1020,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def word_len(s):\n    '''\n    This function takes in a string and returns True if the length of the string is odd, False otherwise.\n    '''\n    return len(s) % 2 != 0\n",
        "test": "assert word_len('hello') == True, \"word_len('hello') should return True\"",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tetrahedral_number(n):\n    # Using the formula 1/6 n(n+1)(n+2)\n    return int(n*(n+1)*(n+2)/6)",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 1009,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    total %= 26\n    return chr(total + 97)\n",
        "test": "assert get_Char('hello') == 'm'",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def sequence(n):\n    if n == 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1]\n        for i in range(2, n+1):\n            seq.append(seq[seq[-1]] + seq[i-seq[-1]-1])\n        return seq[n-1]\n",
        "test": "assert sequence(1) == 1 # should return 1",
        "num_ids": 1756,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi ",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Returns the nth centered hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)",
        "test": "assert centered_hexagonal_number(1) == 1 ",
        "num_ids": 821,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({'a':1, 'b':2}, {'c':3, 'd':4}, {'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6} ",
        "num_ids": 2358,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list,\n    returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency counts\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for item in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict\n",
        "test": "assert freq_count([1,2,2,3,3,3,4,4,4,4]) == {1:1, 2:2, 3:3, 4:4}",
        "num_ids": 2022,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def closest_num(N):\n    '''\n    Find the closest smaller number than N.\n    '''\n    \n    # Set the initial closest number to None\n    closest = None\n    \n    # Loop through all numbers smaller than N\n    for i in range(N-1, -1, -1):\n        # Check if the current number is closer than the closest number found so far\n        if closest is None or abs(i - N) < abs(closest - N):\n            closest = i\n    \n    # Return the closest number\n    return closest\n",
        "test": "assert closest_num(10) == 9",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function takes a list of words as input and returns the length of the longest word.\n\n    :param list1: List of words\n    :return: Length of the longest word\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['hello', 'world']) == 5",
        "num_ids": 1270,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \"worlds\") == False",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is negative or zero\n    if n <= 0:\n        return False\n    \n    # Convert the number to a string and iterate over its digits\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)):\n        # Check if the digit is larger than the next digit\n        if i < len(digits) - 1 and digits[i] > digits[i+1]:\n            return False\n        # Check if the digit is smaller than the previous digit\n        elif i > 0 and digits[i] < digits[i-1]:\n            return False\n    \n    # If no false conditions are met, the number is undulating\n    return True\n",
        "test": "assert is_undulating(10) == False",
        "num_ids": 1826,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2, 3) == 8, \"Error in power function\"",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_second_value = float('inf')\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_second_value:\n            min_index = i\n            min_second_value = test_list[i][1]\n    return test_list[min_index][0]",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 6)]) == 1",
        "num_ids": 1762,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3], [4,5], [6,7,8,9]]) == 2, \"Test case failed\"",
        "num_ids": 1537,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def divisor(n):\n    '''\n    Write a Python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "test": "assert divisor(1) == 1  # 1 has 1 divisor (1)",
        "num_ids": 1136,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # iterate through the flattened list and update the frequency dictionary\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict\n",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 2288,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n",
        "test": "assert multiply_num([1, 2, 3]) == 2 # expected output: 2.0",
        "num_ids": 1198,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def decimal_to_binary(n):\n    '''\n    Convert a decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 1238,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input number is already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return int(num_str) + 1\n\n    # If the number is not a palindrome, find the next smallest palindrome\n    next_num = num + 1\n    while True:\n        next_num_str = str(next_num)\n        if next_num_str == next_num_str[::-1]:\n            return next_num\n        next_num += 1",
        "test": "assert next_smallest_palindrome(5) == 6",
        "num_ids": 4149,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be between 1 and the length of the array\")\n    return sorted(arr)[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def eulerian_num(n, m):\n    if n < m:\n        n, m = m, n\n    if m == 0:\n        return 1\n    if m == 1:\n        return pow(n, m, 10**9 + 7)\n    return (eulerian_num(n-1, m-1) + eulerian_num(n, m-1)) % (10**9 + 7)",
        "test": "assert eulerian_num(0,0) == 1",
        "num_ids": 1403,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    \n    # Iterate over each sublist in the input list\n    for i in range(len(input_list)):\n        # Sort the sublist using the built-in sorted() function\n        input_list[i] = sorted(input_list[i])\n    \n    # Return the sorted list\n    return input_list\n",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'bird']]) == [['apple', 'banana', 'cherry'], ['bird', 'cat', 'dog']]",
        "num_ids": 1718,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True]) == 2, \"Failed to count True values in the list\"",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) != [1, 2, 3, 4, 5, 7]",
        "num_ids": 1548,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into one list\n    all_lists = num1 + num2 + num3\n\n    # Use heapq to merge all the lists into one sorted list\n    merged_list = []\n    heapq.heapify(all_lists)\n    while all_lists:\n        merged_list.append(heapq.heappop(all_lists))\n\n    return merged_list\n",
        "test": "assert merge_sorted_list([1], [2], [3]) == [1, 2, 3]",
        "num_ids": 3474,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string and an integer n, and returns the count of numbers with odd value when rotating the binary string n times.\n    \"\"\"\n    # convert the binary string to an integer\n    binary_int = int(s, 2)\n\n    # count the number of odd numbers when rotating the binary string n times\n    count = 0\n    for i in range(n):\n        rotated_int = binary_int << i | binary_int >> (n - i)\n        if rotated_int % 2 != 0:\n            count += 1\n\n    # return the count of odd numbers\n    return count\n",
        "test": "assert odd_Equivalent(\"101\", 2) == 1",
        "num_ids": 1916,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for sublist in nestedlist:\n        for element in sublist:\n            if element not in common_elements:\n                if all(element in sublist for sublist in nestedlist):\n                    common_elements.append(element)\n    return common_elements\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6]]) == [] ",
        "num_ids": 1830,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"5\") == True, \"Error in check_integer function: '5' should return True\"",
        "num_ids": 824,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "test": "assert empty_dit([{1:2}, {}]) == False",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(str(x) for x in nums))\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 1347,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        elif isinstance(item, str):\n            try:\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
        "num_ids": 2477,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    for i in range(len(arr)):\n        if i == 0 or i == len(arr) - 1:\n            if arr.count(arr[i]) == 1:\n                return arr[i]\n        elif arr[i-1] != arr[i] and arr[i+1] != arr[i]:\n            return arr[i]\n    \n    # If no element appears only once, return None\n    return None\n",
        "test": "assert search([1, 1, 1, 1, 1, 1, 1, 2, 3, 4, 4, 4, 4]) == 2",
        "num_ids": 1868,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product\n",
        "test": "assert max_product_tuple([(-5, 1), (-2, 4), (3, -6)]) == 30 ",
        "num_ids": 2090,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(2, limit+1):\n        amicable_sum += i\n        divisors_sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                divisors_sum += j\n        if i == divisors_sum and divisors_sum != i:\n            amicable_sum += divisors_sum\n    return amicable_sum\n",
        "test": "assert amicable_numbers_sum(10000) == 3663466 ",
        "num_ids": 2470,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    return cmath.phase(complex_num)",
        "test": "assert angle_complex(0,0) == 0",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_length(string):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "test": "assert find_length('1101') == 2",
        "num_ids": 2044,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two integers a and b and returns their sum of common divisors.\n    \"\"\"\n    # Create an empty list to store the common divisors\n    common_divisors = []\n\n    # Loop through all numbers between 1 and a and b\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            # Check if i and j are divisors of a and b\n            if a % i == 0 and b % j == 0 and i == j:\n                # If i and j are divisors of a and b and equal to each other, add to the common divisors list\n                common_divisors.append(i)\n\n    # Return the sum of common divisors\n    return sum(common_divisors)\n",
        "test": "assert sum(15, 25) == 30 # Test case 2",
        "num_ids": 1702,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(5, [\"apple\", \"banana\", \"cherry\", \"grape\"]) == [\"banana\", \"cherry\"]",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the dimensions of the matrix\n    n = len(my_matrix)\n    # Check if the matrix is square\n    if any(len(row) != n for row in my_matrix):\n        return False\n    # Check if the sum of the first row is equal to the sum of the other rows\n    first_row_sum = sum(my_matrix[0])\n    if any(sum(row) != first_row_sum for row in my_matrix[1:]):\n        return False\n    # Check if the sum of the first column is equal to the sum of the other columns\n    first_col_sum = sum(row[0] for row in my_matrix)\n    if any(sum(row[0] for row in my_matrix) != first_col_sum for row in my_matrix):\n        return False\n    # Check if the sum of the diagonals is equal to the sum of the other diagonal\n    diagonal_sum = sum(my_matrix[i][i] for i in range(n))\n    if any(sum(my_matrix[i][i] for i in range(n)) != diagonal_sum for i in range(n)):\n        return False\n    return True\n",
        "test": "assert magic_square_test([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]) ",
        "num_ids": 3590,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for item in nums:\n        counts[item] += 1\n        if counts[item] > max_count:\n            max_count = counts[item]\n            max_item = item\n            \n    return max_item\n",
        "test": "assert max_occurrences([1,2,3,3,2,1,2,3,4,5]) == 2 ",
        "num_ids": 2138,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    vowel_index = []\n    for i in range(len(str1)):\n        if str1_list[i] in vowels:\n            vowel_index.append(i)\n\n    for i in range(len(vowel_index)//2):\n        str1_list[vowel_index[i]], str1_list[vowel_index[-i-1]] = str1_list[vowel_index[-i-1]], str1_list[vowel_index[i]]\n\n    return ''.join(str1_list)",
        "test": "assert reverse_vowels('python') == 'python'",
        "num_ids": 2066,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert tup_string((1, 2, 3)) == \"(1, 2, 3)\"",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1441,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 770,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeros += 1\n    ratio = zeroes / non_zeros\n    return ratio",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 2122,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0 or n < 1:\n            return False\n        n = n // 2\n    return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(0) == False # 0 can't be represented as sum of non-zero powers of 2",
        "num_ids": 1974,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 1130,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if type(item) == list:\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result\n",
        "test": "assert extract_singly([[1,2,3],[4,5,6]]) == {1, 2, 3, 4, 5, 6}",
        "num_ids": 1691,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    \n    while n > 1:\n        max_idx = nums.index(max(nums[:n])) # find the maximum element in the unsorted part of the list\n        nums = pancake_reverse(nums, max_idx) # flip the maximum element to the beginning of the list\n        nums = pancake_reverse(nums, n-1) # flip the entire list to put the maximum element in its correct position\n        n -= 1\n    \n    return nums\n\ndef pancake_reverse(nums, k):\n    \"\"\"\n    Reverse the first k elements of the list in place\n    \"\"\"\n    nums[:k+1] = reversed(nums[:k+1])\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 2293,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3, \"Should return 3\"",
        "num_ids": 1566,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1,2,3, (4,5,6))) == 2",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[-1] - arr[0]\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1879,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if b == 0:\n        if a == 0:\n            if n == 0:\n                return (0, 0)\n            else:\n                return None\n        else:\n            return None\n    else:\n        x = n // b\n        y = (n - a * x) // b\n        if a * x + b * y == n:\n            return (x, y)\n        else:\n            return None\n",
        "test": "assert find_solution(2, 3, 5) == (1, 1)",
        "num_ids": 3143,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]\n",
        "test": "assert remove_elements([1,2,3],[2]) == [1,3]",
        "num_ids": 1322,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 1316,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the angle at the center of the polygon\n    angle = 180 * (s - 2) / s\n    # calculate the radius of the polygon\n    radius = l / (2 * tan(pi / s))\n    # calculate the area of the polygon\n    area = (s * radius ** 2) / (4 * tan(pi / s))\n    return area\n",
        "test": "assert area_polygon(10, 12) == pytest.approx(28.2743)",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def div_sum(n):\n    \"\"\"\n    Determines if the sum of the divisors of two integers are the same.\n    \"\"\"\n    div_sum1 = 0\n    div_sum2 = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum1 += i\n            if i != n // i:\n                div_sum1 += n // i\n    return div_sum1 == div_sum2",
        "test": "assert div_sum(28) == False ",
        "num_ids": 2013,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == 'a' or str1[i].lower() == 'e' or str1[i].lower() == 'i' or str1[i].lower() == 'o' or str1[i].lower() == 'u':\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"Python\") == 1 # P occurs at position 1 in the English alphabet.",
        "num_ids": 2271,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1369,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 1\n    \n    # Find the highest set bit (largest power of 2 less than or equal to n)\n    highest_set_bit = 0\n    power_of_two = 1\n    while power_of_two <= n:\n        highest_set_bit = power_of_two\n        power_of_two <<= 1\n    \n    # The next power of 2 is twice the highest set bit\n    return highest_set_bit << 1\n",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1, 2, 3, 4, 5], 3) == 1",
        "num_ids": 1154,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 2, 4) == 12",
        "num_ids": 1469,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon.\n\n    :param a: length of a side of the pentagon\n    :return: perimeter of the pentagon\n    \"\"\"\n    return 5 * a\n",
        "test": "assert perimeter_pentagon(7) == 7 * 5",
        "num_ids": 919,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_occurance(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] == 'std':\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert count_occurance('std') == 1",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Check if tuple is empty\n    if len(test_tuple) == 0:\n        return True\n    \n    # Get the data type of the first element in the tuple\n    first_type = type(test_tuple[0])\n    \n    # Check if all the elements have the same data type as the first element\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    \n    # If all elements have the same data type, return True\n    return True\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 1523,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Check if the element is present in the array\n    if x in arr:\n        # Find the index of the element in the array\n        index = arr.index(x)\n        # Check if the element occurs more than n/2 times\n        if index < (n/2):\n            return True\n        elif index == (n/2):\n            return False\n        else:\n            return False\n    else:\n        return False",
        "test": "assert is_majority([1,2,3,4,5,6,7], 7, 5) == False, \"Test case 2 failed\"",
        "num_ids": 2146,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 880,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n",
        "test": "assert odd_values_string('') == ''",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    min_num = a\n    \n    if b < min_num:\n        min_num = b\n    \n    if c < min_num:\n        min_num = c\n    \n    return min_num\n",
        "test": "assert min_of_three(1, 2, 3) == 1 ",
        "num_ids": 1159,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert the given range into a set of bits\n    bits_set = set(range(l, r+1))\n    \n    # Check if all the bits in the set are set in the number\n    for bit in bits_set:\n        if (n & (1 << bit)) == 0:\n            return False\n    \n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b11100, 1, 5) == False ",
        "num_ids": 2161,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Rearranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n\n    :param arr: A list of integers\n    :param n: An integer representing the number of elements to re-arrange\n    :return: A list of integers with the first n elements re-arranged as described\n    \"\"\"\n\n    # Split the array into negative and positive elements\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n\n    # Re-arrange the first n elements of the array\n    i = 0\n    while negatives and i < n:\n        arr[i] = negatives.pop(0)\n        i += 1\n    while positives and i < n:\n        arr[i] = positives.pop(0)\n        i += 1\n\n    # Return the re-arranged array\n    return arr\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 3102,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in the string with the character and return the string.\n    '''\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"Hello world\", \"-\") == \"Hello-world\"",
        "num_ids": 1033,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([10, 20, 30, 40, 50], 2) == [50, 40] # Test the function with a larger list and n=2",
        "num_ids": 2004,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n",
        "test": "assert lateralsuface_cylinder(1,2) == 2*3.14*2",
        "num_ids": 1383,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n & -n)\n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 2568,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # Create an empty dictionary to store the occurrences of each tuple\n    occurrences = {}\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in occurrences:\n            occurrences[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            occurrences[tup] = 1\n    \n    # Return the dictionary of occurrences\n    return occurrences\n",
        "test": "assert check_occurences([(1, 2), (2, 3), (1, 2), (2, 3), (1, 2)]) == Counter({(1, 2): 3, (2, 3): 2})",
        "num_ids": 2895,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j] != '':\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"abc\") == 6, \"Incorrect number of substrings\"",
        "num_ids": 1124,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the number of sequences that end with each possible value\n    num_sequences = [0] * (m + 1)\n    # The number of sequences that end with 1 is 1\n    num_sequences[1] = 1\n\n    # Iterate through all possible values of the second element\n    for i in range(2, m + 1):\n        # Initialize the number of sequences that end with the current value to 0\n        num_sequences[i] = 0\n        # Iterate through all possible values of the previous element\n        for j in range(1, i - 1):\n            # If the current value is within the allowed range, add the number of sequences that end with the previous value to the current value\n            if 2 * j <= i <= m:\n                num_sequences[i] += num_sequences[j]\n\n    # Return the number of sequences that end with the nth element\n    return num_sequences[n]\n",
        "test": "assert get_total_number_of_sequences(5,1) == 1",
        "num_ids": 2473,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "test": "assert replace_list([7, 8, 9], [10]) == [7, 8, 10]",
        "num_ids": 1404,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac('hello') == 5",
        "num_ids": 869,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of the given number\n    sqrt_N = int(math.sqrt(N)) + 1\n    \n    # Check if the square of the square root is greater than the given number\n    if sqrt_N**2 > N:\n        return sqrt_N**2\n    else:\n        # If not, increase the square root by 1 and check again\n        while sqrt_N**2 <= N:\n            sqrt_N += 1\n        \n        return sqrt_N**2\n",
        "test": "assert next_Perfect_Square(12) == 16",
        "num_ids": 1821,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_ending_here += arr[i]\n        else:\n            max_so_far = max(max_so_far, max_ending_here)\n            max_ending_here = arr[i]\n    \n    max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n",
        "test": "assert max_sum([1,2,3,4,5,4,3,2,1]) == 15, \"Incorrect max_sum for [1,2,3,4,5,4,3,2,1]\"",
        "num_ids": 3237,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"Cannot compute square root of negative numbers\"\n    elif number == 0 or number == 1:\n        return number\n    else:\n        guess = number / 2\n        while abs(guess**2 - number) > 0.0001:\n            guess = (guess + number / guess) / 2\n        return guess\n",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 1680,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a table to store lengths of longest palindromic subsequences of substrings\n    dp = [[0] * n for _ in range(n)]\n    # All substrings of length 1 are palindromes, so their lengths are 1\n    for i in range(n):\n        dp[i][i] = 1\n    # Fill the table in a bottom-up manner\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    # Return the length of the longest palindromic subsequence in the string\n    return dp[0][n-1]\n",
        "test": "assert lps(\"racecar\") == 7 # should return 7 for \"racecar\"",
        "num_ids": 2589,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def harmonic_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 974,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert intersection_array([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 1696,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5), 3) == 1 ",
        "num_ids": 1057,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([1,2,3], 0) == [0,1,0,2,0,3]",
        "num_ids": 1377,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if not isinstance(numbers, complex):\n        raise TypeError(\"Input should be a complex number.\")\n    r = cmath.polar(numbers)[0]\n    theta = cmath.polar(numbers)[1]\n    return (r, theta)\n",
        "test": "assert convert(0+0j) == (0, 0)",
        "num_ids": 1466,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 'a', 'b']) == 3",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 2224,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 2120,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1, 2) == (2, 1)",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((), ()) == ()",
        "num_ids": 2205,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def nth_prime(n):\n        \"\"\"\n        Find the nth prime number.\n        \"\"\"\n        primes = [2]\n        p = 3\n        while len(primes) < n:\n            for prime in primes:\n                if p % prime == 0:\n                    break\n            else:\n                primes.append(p)\n            p += 2\n        return primes[n-1]\n\n    def newman_shanks_williams(n, k=1):\n        \"\"\"\n        Compute the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        if n == 1:\n            return 5\n        elif n == 2:\n            return 11\n        elif n == 3:\n            return 23\n        elif n == 4:\n            return 47\n\n        m = k * (k - 1)\n        p = nth_prime(n-4) + 1\n        while True:\n            if p % m == 1:\n                return p\n            p += 2\n\n    if n > 4:\n        k = 1\n        while True:\n            p = newman_shanks_williams(n, k)\n            if nth_prime(k*(k-1)) < p:\n                return p\n            k += 1\n    else:\n        return newman_shanks_williams(n)\n",
        "test": "assert newman_prime(1) == 5",
        "num_ids": 2949,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            result_tup += (0,)\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup\n",
        "test": "assert division_elements((2, 4, 8), (2, 2, 2)) == (1.0, 2.0, 4.0) ",
        "num_ids": 1951,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_part1 = []\n    list1_part2 = []\n    for i in range(L):\n        list1_part1.append(list1[i])\n    for i in range(L, len(list1)):\n        list1_part2.append(list1[i])\n    return (list1_part1, list1_part2)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])",
        "num_ids": 2005,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def dog_age(h_age):\n    '''\n    Calculate a dog's age in dog's years.\n    '''\n    # Human years to dog years conversion\n    DOG_YEARS_FACTOR = 7\n    \n    # Calculate dog's age in dog's years\n    d_age = h_age * DOG_YEARS_FACTOR\n    \n    # Return dog's age in dog's years\n    return d_age\n",
        "test": "assert dog_age(1) == 7",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    sublist = []\n    count = 0\n    for element in S:\n        sublist.append(element)\n        count += 1\n        if count == step:\n            result.append(sublist)\n            sublist = []\n            count = 0\n    if sublist:\n        result.append(sublist)\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 2420,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count*count\n        count += 2\n    return sum\n",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    \"\"\"\n    # Initialize variables\n    stars = 1\n    num = 0\n    \n    # Loop until the n'th star number is found\n    while num < n:\n        # Calculate the number of stars for the current level\n        level_stars = 2 * stars - 1\n        # Add the level stars to the total number of stars\n        num += level_stars\n        # Move to the next level\n        stars += 1\n        \n    # Return the n'th star number\n    return num\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1798,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97 #checks if the ascii value of 'a' is 97",
        "num_ids": 746,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    # Loop over the list indices\n    for i in range(0, len(arr), 2):\n        # If the number at the even index is even, add it to the sum\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    # Return the sum\n    return sum\n",
        "test": "assert sum_even_and_even_index([2, 4, 6, 8, 10]) == 18",
        "num_ids": 1773,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate over the first n even numbers (i.e., the even numbers from 2 to 2n)\n    for i in range(2, 2*n+1, 2):\n        # Add i raised to the fifth power to the sum\n        sum += i**5\n    \n    # Return the sum\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1343,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n",
        "test": "assert rear_extract([(1,2),(3,4)]) == [2, 4]",
        "num_ids": 1545,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = tuple(map(lambda x, y: x-y, test_tup1, test_tup2))\n    return sub_tup\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 1925,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Initialize the sum to zero\n    sum = 0\n\n    # Loop through all the even index values of n\n    for i in range(1, n+1):\n        # Calculate the binomial coefficient of i and n\n        coeff = math.comb(n, i)\n        \n        # Check if the coefficient is even\n        if coeff % 2 == 0:\n            # If it is even, add it to the sum\n            sum += coeff\n    \n    # Return the sum of even index binomial coefficients\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(2) == 2",
        "num_ids": 1399,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(0,5) == 0 ",
        "num_ids": 1276,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def dict_filter(dict, n):\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3) == {'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 1681,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count\n",
        "test": "assert count_first_elements((1, 2, 3, 4, 5, 1)) == 1",
        "num_ids": 1666,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    i = 1\n    while i <= n:\n        decagonal += i * (3 * i - 1) // 2\n        if i == n:\n            return decagonal\n        i += 1\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1816,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 1299,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]",
        "num_ids": 1357,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def validate(n):\n    \"\"\"\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \n    Args:\n    n (int): The integer to be validated.\n    \n    Returns:\n    bool: True if the validation passes, False otherwise.\n    \"\"\"\n    # Convert the integer to a string and count the occurrences of each digit\n    counts = {}\n    for digit in str(n):\n        if digit in counts:\n            counts[digit] += 1\n        else:\n            counts[digit] = 1\n    \n    # Check if the count of each digit is less than or equal to the digit itself\n    for digit, count in counts.items():\n        if int(digit) < count:\n            return False\n    return True",
        "test": "assert validate(12345) == True",
        "num_ids": 1759,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in lst:\n        if i != element:\n            return False\n    return True\n",
        "test": "assert check_element([1, 1, 1, 1, 1], 1) == True",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three(\"abb\") == True",
        "num_ids": 1202,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # create a new array by repeating the given array k times\n    new_array = a * k\n    \n    # find the maximum sum subarray in the new array\n    max_sum = 0\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += new_array[i]\n        if max_sum_so_far < 0:\n            max_sum_so_far = 0\n        if max_sum_so_far > max_sum:\n            max_sum = max_sum_so_far\n    \n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 8, 2) == 7, \"Test Case 2 Failed\"",
        "num_ids": 2901,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            sum += i**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = None\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 1944,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    elif n == 2:\n        return k*k\n    else:\n        dp = [0]*k\n        for i in range(k):\n            dp[i] = 1\n        dp[0] = k\n        dp[1] = k*k\n        for i in range(2, n):\n            new_dp = [0]*k\n            for j in range(k):\n                for m in range(k):\n                    if m != j:\n                        new_dp[j] += dp[m]\n            dp = new_dp\n        return sum(dp)\n",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 2741,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find(n, m):\n    '''\n    Returns the quotient of two numbers, rounded down to the nearest integer.\n    '''\n    return n // m\n",
        "test": "assert find(3, 4) == 0",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Find the third side of a right-angled triangle given the lengths of two sides.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "test": "assert otherside_rightangle(3,4) == 5, \"Incorrect result for otherside_rightangle(3,4)\"",
        "num_ids": 1137,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if type(val) == int or type(val) == float:\n            if val > max_val:\n                max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5 # test with a list of integers",
        "num_ids": 1383,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_div(0) == 0, \"sum_div(0) should return 0\"",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    temp = [0] * n\n    return merge_sort(arr, temp, 0, n-1)\n\ndef merge_sort(arr, temp, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort(arr, temp, left, mid)\n        inv_count += merge_sort(arr, temp, mid+1, right)\n        inv_count += merge(arr, temp, left, mid, right)\n    return inv_count\n\ndef merge(arr, temp, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n        else:\n            temp[k] = arr[j]\n            inv_count += (mid - i + 1)\n            k += 1\n            j += 1\n    while i <= mid:\n        temp[k] = arr[i]\n        k += 1\n        i += 1\n    while j <= right:\n        temp[k] = arr[j]\n        k += 1\n        j += 1\n    for i in range(left, right+1):\n        arr[i] = temp[i]\n    return inv_count\n",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 2867,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def flatten_list(list1):\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([1, [2, 3, [4, 5, 6], 7], 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1747,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the counts of each item\n    count_dict = defaultdict(int)\n    \n    # Iterate through the list of tuples and update the count_dict\n    for item, count in stdata:\n        count_dict[item] += count\n        \n    # Find the maximum aggregate by finding the sum of the counts for each item\n    max_aggregate = sum(count_dict.values())\n    \n    return max_aggregate\n",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)]) != 10 ",
        "num_ids": 2436,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    def count_helper(n, start):\n        \"\"\"\n        Helper function to count the number of binary sequences of length 2n that meet the condition.\n        \"\"\"\n        if n == 0:\n            return 1\n        count = 0\n        if start == 0:\n            count += count_helper(n - 1, 1)\n        elif start == 1:\n            count += count_helper(n - 1, 0)\n        return count\n    \n    return count_helper(n, 0)\n",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 2383,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()), default=0)\n    else:\n        return 0\n",
        "test": "assert dict_depth({'a':1}) == 1",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Given an array of integers, a list of ranges and rotations, and an index, \n    return the element at the given index after the rotations are applied.\n    \"\"\"\n    # sum all the ranges and rotations to determine the effective rotation\n    total_rotation = sum(rotations)\n    \n    # find the effective index after all rotations have been applied\n    effective_index = (index + total_rotation) % len(arr)\n    \n    return arr[effective_index]\n",
        "test": "assert find_Element([1,2,3,4,5],5,[1,2,3,4,5],2) == 3",
        "num_ids": 2665,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # create a regular expression pattern to match words starting with 'p'\n    pattern = re.compile(r'^p\\w*')\n    # use filter() to get all the words that match the pattern\n    p_words = list(filter(pattern.match, words))\n    # check if there are at least two words starting with 'p'\n    if len(p_words) >= 2:\n        # return the first two words starting with 'p'\n        return p_words[:2]\n    else:\n        # return an empty list if there are less than two words starting with 'p'\n        return []\n",
        "test": "assert start_withp(['peach', 'orange', 'pineapple']) == ['peach', 'pineapple']",
        "num_ids": 1713,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Initialize a list to store the maximum sum until ith index\n    dp = [0]*n\n    # Initialize the maximum sum to zero\n    max_sum = 0\n    \n    # Loop through the array a\n    for i in range(n):\n        # If the current element is less than or equal to the last element of the increasing subsequence\n        if a[i] <= dp[len(dp)-1]:\n            # Replace the last element with the current element\n            dp[len(dp)-1] = a[i]\n        else:\n            # Add the current element to the end of the increasing subsequence\n            dp.append(a[i])\n            \n        # If the kth element is reached, return the sum of the increasing subsequence\n        if i == k-1:\n            return sum(dp)\n        \n        # Update the maximum sum if the sum of the increasing subsequence is greater\n        max_sum = max(max_sum, sum(dp))\n        \n    # Return the maximum sum of increasing subsequence\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 5) == 15 # Test case 1",
        "num_ids": 3858,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 0 or n > len(tuplex) or m > n:\n        return None\n    else:\n        result = deepcopy(tuplex[m:n])\n        return result\n",
        "test": "assert colon_tuplex(('a', 'b', 'c', 'd', 'e'), 2, 5) == ('c', 'd', 'e')",
        "num_ids": 1830,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize an empty list to store the largest products\n    products = []\n\n    # Iterate over the first N elements of nums1 and nums2\n    for i in range(N):\n        # Calculate the product of the current element of nums1 and nums2\n        product = nums1[i] * nums2[i]\n        # Append the product to the list of products\n        products.append(product)\n\n    # Return the N largest products\n    return products[:N]\n",
        "test": "assert large_product([1, 2, 3, 4, 5], [5, 6, 7, 8, 9], 1) == [45] ",
        "num_ids": 2400,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def maximum(a, b):\n    '''\n    Returns the maximum of two numbers\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(2, 3) == 3",
        "num_ids": 880,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\") ",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a Python function to set the left-most unset bit of a given number.\n    '''\n    # Check if the number is 0, if so, return 1\n    if n == 0:\n        return 1\n    \n    # Check if the number has an unset bit to the left of the least significant 1-bit\n    if n & (n-1) != 0:\n        # If so, return the number with the left-most unset bit set\n        return n | (n+1)\n    else:\n        # Otherwise, return the number with the left-most 1-bit shifted to the left\n        return set_left_most_unset_bit(n << 1)\n",
        "test": "assert set_left_most_unset_bit(0b0) == 0b1",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi / 3) * h * (r ** 2)\n    return volume\n",
        "test": "assert volume_cone(0,0) == 0",
        "num_ids": 1195,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i *= 2\n    return i // 2\n",
        "test": "assert highest_Power_of_2(6) == 4",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the n'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 1067,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]\n",
        "test": "assert add_string([], \"Hello, {}\") == []",
        "num_ids": 1293,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {l2[i]: l3[i]}\n    return dictionary\n",
        "test": "assert convert_list_dictionary([4,5,6], ['d', 'e', 'f'], ['w','r','t']) == {'d': {'w': 4}, 'e': {'r': 5}, 'f': {'t': 6}}",
        "num_ids": 2068,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1, \"Error: get_max_sum(1)\"",
        "num_ids": 1705,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = []\n    max_length = 0\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1, 2], [3, 4, 5], [6]]) == [3, 4, 5] # expecting [3, 4, 5]",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert check_distinct((1,2,3,4,5)) == True",
        "num_ids": 1068,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store character counts\n    counts = {}\n    # iterate through the string and count each character\n    for char in str1:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    # find the first character with a count of 1\n    for char in str1:\n        if counts[char] == 1:\n            return char\n    # if all characters are repeated, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"aabbcdd\") == \"c\"",
        "num_ids": 2142,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('a') == True",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert median_numbers(5,1,3) == 3",
        "num_ids": 1234,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(d) for d in str(num)]\n        sum_digits = sum(digits)\n        result.append(sum_digits)\n    return result\n",
        "test": "assert sum_of_digits([123, 456]) == [6, 15]",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    \n    return result_tup\n",
        "test": "assert bitwise_xor((1, 0, 1), (0, 1, 1)) == (1, 1, 0)",
        "num_ids": 2164,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if type(item) == tuple:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return len(freq_dict)\n",
        "test": "assert extract_freq([(1,2),(2,3),(1,2)]) == 2 ",
        "num_ids": 2176,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        sub_result = []\n        for j in range(len(test_tup1[i])):\n            sub_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(sub_result))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples((1, (2, 3)), (4, (5, 6))) == (5, (7, 9)) # Test case 2",
        "num_ids": 1981,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(2, 3) == 2, \"minimum of 2 and 3 should be 2\"",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1, 2, 3), 4) == False",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def find_Parity(x):\n    '''\n    This function takes an integer x as input and returns True if the parity of x is odd, False otherwise.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert find_Parity(5) == True",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    str_n = str(n)\n    digits = sorted(str_n, reverse=True)\n    return int(''.join(digits))\n",
        "test": "assert rearrange_bigger(123) == 321 ",
        "num_ids": 2914,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pair = (num1, num2)\n            if len(pairs) < k:\n                heapq.heappush(pairs, pair)\n            else:\n                if pair < pairs[0]:\n                    heapq.heappop(pairs)\n                    heapq.heappush(pairs, pair)\n    return sorted(pairs)\n",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 2) == [(1, 2), (1, 4)]",
        "num_ids": 2906,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if min_product is None or product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(2, 3), (1, 4), (5, 6)]) != (2, 3)  # The correct product tuple is not (2, 3)",
        "num_ids": 2071,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_val(listval):\n    '''\n    Find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert min_val([5,4,3,2,1]) == 1",
        "num_ids": 1533,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 1605,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8] # Test case 1",
        "num_ids": 1148,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for tup in list1:\n        if len(tup) >= n:\n            result.append(tup[n-1])\n    return result\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == 2",
        "num_ids": 1506,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False # No values overlap",
        "num_ids": 1157,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Calculate the product of the two largest elements in the array\n    highest_product = arr[0] * arr[1]\n    \n    # Calculate the product of the two smallest elements in the array\n    lowest_product = arr[-1] * arr[-2]\n    \n    # Return the higher of the two products\n    return max(highest_product, lowest_product)\n",
        "test": "assert max_Product([1,2,3,4,5]) == 20  # highest product is 5 * 5 = 25",
        "num_ids": 2284,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = []\n    for i in range(len(Input)):\n        first_element.append(Input[i][0])\n    result = []\n    for i in range(len(first_element)):\n        if first_element.count(first_element[i]) > 1:\n            result.append(first_element[i])\n    return result\n",
        "test": "assert group_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == []",
        "num_ids": 2239,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max(['a','b','cde','f']) == 'cde'",
        "num_ids": 1353,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    return total_sum * len(list1)\n",
        "test": "assert round_and_sum([-2.5, 3.5, 7.5, -8.5]) == 8",
        "num_ids": 1563,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize sum variable\n    sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the current number\n        cube = i ** 3\n        # Add the cube to the sum variable\n        sum += cube\n\n    # Return the sum of the cubes of the first n even natural numbers\n    return sum\n",
        "test": "assert cube_Sum(0) == 0, \"Error: cube_Sum(0) should return 0\"",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element)\n    return concatenated_string\n",
        "test": "assert concatenate_tuple(('a', 'b', 'c', 'd', 'e')) == 'abcde'",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1292,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function takes a tuple of strings as input and returns a tuple of strings that only contains the last character of each string in the original tuple.\n    '''\n    result = ()\n    for string in test_tuple:\n        result += (string[-1],)\n    return result\n",
        "test": "assert extract_rear((\"abcde\", \"fghij\", \"klmno\")), \"e\"",
        "num_ids": 1285,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 1) == 0",
        "num_ids": 1232,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1173,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return None\n",
        "test": "assert change_date_format('2022-01-31') == '31-01-2022' ",
        "num_ids": 2121,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n\n        for i in range(gap, n):\n\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list\n",
        "test": "assert shell_sort([5,3,8,6,7]) == [3, 5, 6, 7, 8] # should return [3, 5, 6, 7, 8]",
        "num_ids": 2318,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "test": "assert and_tuples((True, False), (True, True)) == (True, False)",
        "num_ids": 1520,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The parabola does not exist\"\n    else:\n        directrix = (-b) / (2 * a)\n        return directrix\n",
        "test": "assert parabola_directrix(a=1, b=2, c=3) == -1",
        "num_ids": 1697,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 1241,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base = (base1 + base2) / 2\n    area = ((base1 + base2) / 2) * height\n    median = area / height\n    return median\n",
        "test": "assert median_trapezium(4, 6, 8) == 5",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "test": "assert check_greater([1,2,3,4], 3) == True, \"Incorrect output for check_greater([1,2,3,4], 3)\"",
        "num_ids": 1195,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"a\") == False",
        "num_ids": 1072,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negatives = []\n    for num in list1:\n        if num < 0:\n            negatives.append(num)\n    return negatives\n",
        "test": "assert neg_nos([1, 2, 3, -4, 5, -6]) == [-4, -6]  # test with positive and negative numbers",
        "num_ids": 1219,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 1190,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (2, 3), (3, 4)]) == 0",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result*10 + i\n    return result\n",
        "test": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # create a regex pattern for finding adverbs\n    pattern = r'\\b\\w+ly\\b'\n    # find all adverbs in the sentence\n    adverbs = re.findall(pattern, text.lower())\n    # if there are no adverbs, return an empty list\n    if not adverbs:\n        return []\n    # find the position of the first adverb\n    position = text.lower().find(adverbs[0])\n    # return a list containing the adverb and its position\n    return [(adverbs[0], position)]\n",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog.\") == []",
        "num_ids": 2396,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area\n",
        "test": "assert surfacearea_cube(3) == 54",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    ratio = positive_count / total_count\n    return ratio",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0, \"Error: positive_count([1, 2, 3, 4, 5]) != 1.0\"",
        "num_ids": 1646,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def largest_neg(list1):\n    largest_neg_num = None\n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None or num > largest_neg_num:\n                largest_neg_num = num\n    return largest_neg_num\n",
        "test": "assert largest_neg([-5, -3, -7, -1]) == -1, \"largest_neg([-5, -3, -7, -1]) should return -1\"",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        result.append(tup[:len(tup) - K])\n    return result\n",
        "test": "assert trim_tuple([(1,2,3,4,5,6,7,8,9,10), (1,2,3,4,5,6,7,8,9,10)], 5) == [(1,2,3,4,5), (1,2,3,4,5)]",
        "num_ids": 2113,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result_tup = tuple(i*j for i,j in zip(test_tup1, test_tup2))\n        return result_tup\n    else:\n        return \"Tuples are not of same length\"\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18) ",
        "num_ids": 1695,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # create a dictionary to store the count of each element\n    count = {}\n    # iterate through each element of the tuple\n    for elem in tup:\n        # check if the element is in the list\n        if elem in lst:\n            # if the element is found, increment its count in the dictionary\n            count[elem] = count.get(elem, 0) + 1\n    # return the dictionary\n    return count\n",
        "test": "assert count_Occurrence((1, 2, 3), [1, 2, 3]) == {1: 1, 2: 1, 3: 1}",
        "num_ids": 2313,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 1234,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of pernicious numbers.\n    '''\n    sum_of_pernicious = 0\n    \n    for i in range(1, n+1):\n        binary_i = bin(i)[2:] # Convert decimal to binary and remove the '0b' prefix\n        count_ones = binary_i.count('1')\n        \n        if count_ones % 2 != 0: # If the count of ones is odd, add the number to sum\n            sum_of_pernicious += i\n    \n    return sum_of_pernicious",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of strings and a integer l as input parameters.\n    It extracts the first l characters from each string in the list and returns a new list of the extracted strings.\n    '''\n    extracted_list = []\n    for s in str_list:\n        extracted_list.append(s[:l])\n    return extracted_list\n",
        "test": "assert extract_string([], 1) == []",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces from the given string\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 1103,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(1000, 1000) == 0, \"Incorrect loss amount\"",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i%2 == 0:\n                sum += i\n            if (n//i)%2 == 0:\n                sum += n//i\n    if n == 1:\n        return 0\n    elif int(math.sqrt(n))**2 == n:\n        return 2*int(math.sqrt(n))\n    else:\n        return sum\n",
        "test": "assert sumofFactors(0) == 0, \"Error: sumofFactors(0) should be 0\"",
        "num_ids": 1485,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\"\n",
        "test": "assert text_match_wordz(\"This is a string with zebras.\") == \"zebras\"",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(2) == False ",
        "num_ids": 1461,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp']",
        "num_ids": 1383,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([]) == []",
        "num_ids": 1523,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(5, 10) == 50",
        "num_ids": 813,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]+\\b'\n    return re.sub(pattern, '', str1)\n",
        "test": "assert remove_uppercase(\"Hello World\") == \"Hello World\"",
        "num_ids": 1033,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7] ",
        "num_ids": 1282,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n\n    result = []\n\n    for i in range(1, len(list1)+1):\n        for j in combinations(list1, i):\n            result.append(list(j))\n\n    return result\n",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n        \n    return result\n",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0 ",
        "num_ids": 2723,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_value(dictionary, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dictionary) == 0:\n        return True\n    else:\n        first_value = dictionary[next(iter(dictionary))]\n        for value in dictionary.values():\n            if value != first_value:\n                return False\n        return True\n",
        "test": "assert check_value({\"a\": 1, \"b\": 2, \"c\": 3}, 3) == False",
        "num_ids": 1516,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 120,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create an empty dictionary\n    new_dict = {}\n\n    # iterate over the key-value pairs in the original dictionary\n    for key, value in dict1.items():\n        # check if the value is not an empty string, list, tuple, or set\n        if value and not (isinstance(value, str) and value.isspace()) and not (isinstance(value, (list, tuple, set)) and len(value) == 0):\n            # add the key-value pair to the new dictionary if it is not empty\n            new_dict[key] = value\n\n    return new_dict\n",
        "test": "assert drop_empty({\"name\": \"John\", \"age\": 25, \"city\": \"New York\"}) == {\"name\": \"John\", \"age\": 25, \"city\": \"New York\"}",
        "num_ids": 1390,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def max_product(arr):\n    max_val = arr[0]\n    min_val = arr[0]\n    max_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            min_val = max_product\n        elif arr[i] <= min_val:\n            min_val = arr[i]\n            \n        max_product = max(max_product, max_val * min_val)\n    \n    return max_product\n",
        "test": "assert max_product([-1, -2, -3, -4, -5]) == 5",
        "num_ids": 2118,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (3, 5, 7)",
        "num_ids": 1444,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n",
        "test": "assert find_remainder([2, 3, 4, 5], 5) == 0 # expected output is 0",
        "num_ids": 1312,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3]) == True",
        "num_ids": 1398,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the input lists to sets to remove duplicates and order\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list of tuples\n    result = [tuple(sorted(t)) for t in intersection]\n    return result\n",
        "test": "assert tuple_intersection([(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10)]) == []",
        "num_ids": 2359,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n",
        "test": "assert replace_char(\"hello\", \"o\", \"0\") == \"hell0\" ",
        "num_ids": 1166,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({'a': 2, 'b': 1, 'c': 3}) == Counter({'a': 2, 'c': 3, 'b': 1}) ",
        "num_ids": 1580,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_sum(nums):\n    '''\n    Write a Python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the sum of the largest and smallest values\n    total = largest + smallest\n    \n    return total\n",
        "test": "assert big_sum([5, 4, 3, 2, 1]) == 6 ",
        "num_ids": 1634,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    result = pattern.sub('', str1)\n    return result\n",
        "test": "assert remove_lowercase(\"Hello World\") == \"Hello World\"",
        "num_ids": 1250,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(1234) == 1",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def Split(lst):\n    '''\n    Returns a new list containing only the odd numbers from the input list.\n    '''\n    return [num for num in lst if num % 2 != 0]\n",
        "test": "assert Split([1,2,3,4,5]) == [1, 3, 5]",
        "num_ids": 1214,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    # Calculate and return the difference\n    return sum_of_cubes - sum_of_numbers\n",
        "test": "assert difference(1) == 0",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_Odd_Pair(A,N) : \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1, 2, 3, 4], 4) == 4",
        "num_ids": 1513,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])\n",
        "test": "assert toggle_string('Hello World') == 'hELLO wORLD'",
        "num_ids": 1166,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    n1 = str(n1)\n    n2 = str(n2)\n    distance = 0\n    for i in range(min(len(n1), len(n2))):\n        distance += abs(int(n1[i]) - int(n2[i]))\n    distance += abs(len(n1) - len(n2)) * max(len(n1), len(n2))\n    return distance\n",
        "test": "assert digit_distance_nums(0, 0) == 0",
        "num_ids": 2437,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6 ",
        "num_ids": 2029,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n",
        "test": "assert union_elements( (1,2,3,4,5), (4,5,6,7,8) ) == (1, 2, 3, 4, 5, 6, 7, 8)",
        "num_ids": 1884,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 1486,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.+?)\\\"')\n    return pattern.findall(text)\n",
        "test": "assert extract_values('hello \"world\"') == [\"world\"]",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a Python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3, 4, 5], 5) == 10",
        "num_ids": 1515,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 729,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    n_str = str(n)\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through each digit in the string\n    for digit in n_str:\n        # Add the digit to the sum\n        sum += int(digit)\n    # Return the sum\n    return sum\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 1301,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list has at least two elements\n    if len(list1) < 2:\n        return True\n    \n    # check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    # if no element is out of order, the list is sorted\n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True, \"List is not sorted\"",
        "num_ids": 1263,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst",
        "test": "assert empty_list(0) == []",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'mouse']]) == [['apple', 'banana', 'cherry'], ['cat', 'dog', 'mouse']]",
        "num_ids": 1768,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n",
        "test": "assert two_unique_nums([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]",
        "num_ids": 1648,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_product(list_data):\n    '''\n    Write a Python function to calculate the product of unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 1236,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    # Calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * (r + h)\n    \n    return surface_area\n",
        "test": "assert surfacearea_cylinder(0, 1) == 0",
        "num_ids": 1735,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3], [1,2,3]) == True",
        "num_ids": 1430,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n < 0:\n        return \"Invalid input\"\n    else:\n        # using the property of last digit of a factorial\n        # the last digit is always 0 or 1 or -1\n        # if the given number is even, the last digit is 0\n        # if the given number is odd, the last digit is 1\n        # if the given number is negative and odd, the last digit is -1\n        if n % 2 == 0:\n            return 0\n        else:\n            return 1",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 1975,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    # Convert the tuples to sets to remove duplicate elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the dissimilar elements by subtracting the two sets\n    dissimilar_elements = set1 - set2\n    \n    # Convert the set back to a tuple and return it\n    return tuple(dissimilar_elements)\n",
        "test": "assert find_dissimilar((1,2,3), (1,2,3)) == ()",
        "num_ids": 2121,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def even_ele(test_tuple, even_fnc):\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                result.append(item)\n    return tuple(result)",
        "test": "assert even_ele((1, 2, (3, 4), 5, (6, 7, 8), 9), lambda x: x%2 == 0) == (2, (4,), (6, 8),) ",
        "num_ids": 2197,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def surface_Area(b,s):\n    # calculate the area of the base\n    area_base = b**2\n    # calculate the area of the slant face\n    area_slant = b**2 / 2\n    # calculate the height\n    height = b * s\n    # calculate the area of the triangular face\n    area_tri = b**2 / 4\n    # calculate the total surface area\n    total_area = 2 * area_base + 2 * area_slant + height * area_tri\n    # return the total surface area\n    return total_area\n",
        "test": "assert surface_Area(2,3) == 18.0",
        "num_ids": 1686,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True, \"Dictionary is not empty\"",
        "num_ids": 887,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(num):\n            catalan += catalan_number(i) * catalan_number(num - i - 1)\n        return catalan\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1317,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    # Use a regular expression to match the first adverb ending with \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n\n    if match:\n        # If a match is found, print the adverb and its positions\n        print(f\"Adverb: {match.group()}\")\n        print(f\"Start: {match.start()}\")\n        print(f\"End: {match.end()}\")\n    else:\n        # If no match is found, print a message\n        print(\"No adverb ending with 'ly' found.\")\n",
        "test": "assert find_adverbs(\"The movie was not as good as expected.\") == None",
        "num_ids": 2053,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Use heapq to find the n most expensive items\n    return heapq.nlargest(n, items, key=lambda x: x[1])\n",
        "test": "assert expensive_items([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 1) == [(9, 10)]",
        "num_ids": 2775,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    new_list = second_part + first_part\n    return new_list\n",
        "test": "assert split_Arr([1,2,3,4,5,6], 3) == [4,5,6,1,2,3]",
        "num_ids": 1612,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 868,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Returns the difference between the largest and smallest value in a list of numbers.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) - min(nums)\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1498,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if (int(i**0.5))**2 == i:\n            result.append(i)\n    return result\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9] ",
        "num_ids": 1666,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return rect_x, rect_y",
        "test": "assert polar_rect(1, 0) == (1, 0)",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1505,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
        "test": "assert binomial_Coeff(0,0) == 1",
        "num_ids": 2068,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = ''\n    for i in ip_list:\n        new_ip += str(int(i)) + '.'\n    return new_ip[:-1]",
        "test": "assert removezero_ip('1.2.3.4') == '1.2.3.4'",
        "num_ids": 1860,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_numbers = [num for num in list1 if num % 2 == 0]\n    odd_numbers = [num for num in list1 if num % 2 != 0]\n    if even_numbers:\n        first_even = even_numbers[0]\n    else:\n        first_even = None\n    if odd_numbers:\n        first_odd = odd_numbers[0]\n    else:\n        first_odd = None\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None\n",
        "test": "assert diff_even_odd([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1  # first even: 10, first odd: 1, difference: 9",
        "num_ids": 2359,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables to keep track of swaps and differences\n    swaps = 0\n    differences = 0\n    \n    # Iterate through the strings and compare each character\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            differences += 1\n            \n            # If the characters are different and the second string has a 1 where the first string has a 0, swap the characters\n            if str1[i] == '0' and str2[i] == '1':\n                swaps += 1\n                \n    # Return the minimum number of swaps required to convert the first string to the second string\n    return swaps\n",
        "test": "assert min_Swaps('1001','1011') == 1",
        "num_ids": 2398,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert tuple_size((1, 2, 3, 4)) == sys.getsizeof((1, 2, 3, 4))",
        "num_ids": 1438,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return min(arr1[i], arr2[j])\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return min(arr1[i], arr2[j])\n            k -= 1\n            j += 1\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]\n",
        "test": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 1) == 1",
        "num_ids": 2709,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # initialize sum\n    sum = 0\n    # find the length of the number\n    length = len(str(number))\n    # convert the number to a string\n    num = str(number)\n    # iterate through each digit of the number and add its cube to the sum\n    for digit in num:\n        sum += int(digit) ** length\n    # return True if the sum is equal to the original number, otherwise return False\n    return sum == number\n",
        "test": "assert armstrong_number(153) == True # 1^3 + 5^3 + 3^3 = 153",
        "num_ids": 1949,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n",
        "test": "assert sum_average(10) == (55, 5.5) ",
        "num_ids": 1171,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(4) == True",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the characters and their frequency\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Find the first character that occurs more than once\n    for char in str1:\n        if char_freq[char] > 1:\n            return char\n    \n    # If no repeated character was found, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 1476,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        # Check if number is already a lucid number\n        if len(str(i)) != len(set(str(i))):\n            continue\n        # Check if number is the reverse of its reverse\n        if str(i) != str(i)[::-1]:\n            continue\n        # Check if number is palindrome\n        if str(i) != str(i)[::1]:\n            continue\n        # Check if number is mirror number\n        if str(i) != str(i)[::-1][::1]:\n            continue\n        # Add number to list of lucid numbers\n        lucid_numbers.append(i)\n    return lucid_numbers\n",
        "test": "assert get_ludic(0) == [] ",
        "num_ids": 4020,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    # Split the input string into a list of words\n    words = s.split()\n\n    # Reverse the order of the words in the list\n    words = words[::-1]\n\n    # Join the reversed words into a single string, separated by spaces\n    result = ' '.join(words)\n\n    return result",
        "test": "assert reverse_words(\"Hello world\") == \"world Hello\"",
        "num_ids": 1157,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 1068,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert find_literals(\"Hello, world!\", r\"\\w+\") == (\"Hello\", 0, 5)",
        "num_ids": 1627,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth Bell number.\n    \"\"\"\n    bell = [0]*(n+1)\n    bell[0] = 1\n    for i in range(1,n+1):\n        bell[i] = bell[i-1] + bell[i-1]*(i-1)\n    return bell[n]\n",
        "test": "assert bell_Number(1) == 1 # bell number for n=1 should be 1",
        "num_ids": 1394,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i != L-1:\n            new_list.append(list1[i])\n    return new_list\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]",
        "num_ids": 1534,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of the n'th column.\n    \"\"\"\n    max_val = float('-inf')  # initialize the max value to negative infinity\n    for row in test_list:\n        if len(row) > N:\n            max_val = max(max_val, row[N])\n    return max_val\n",
        "test": "assert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 2) == 9 # returns the max of the 2nd column (3,5,7)",
        "num_ids": 1858,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def merge(lst):\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 1557,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Given a tuple list, this function computes the cumulative sum of all values.\n    '''\n    # Create an empty list to store the cumulative sum\n    cumulative_sum = []\n    # Initialize the sum to 0\n    current_sum = 0\n    # Iterate over the elements of the tuple list\n    for i in range(len(test_list)):\n        # Add the current value to the current sum\n        current_sum += test_list[i]\n        # Append the current sum to the cumulative sum list\n        cumulative_sum.append(current_sum)\n    # Return the cumulative sum list\n    return cumulative_sum\n",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15] ",
        "num_ids": 1783,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    # Initialize an empty list to store the average values for each tuple\n    avg_list = []\n    \n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the sum of elements in the tuple\n        tup_sum = sum(tup)\n        \n        # Calculate the length of the tuple\n        tup_len = len(tup)\n        \n        # Calculate the average value for the tuple\n        tup_avg = tup_sum / tup_len\n        \n        # Append the average value to the avg_list\n        avg_list.append(tup_avg)\n    \n    # Return the avg_list\n    return avg_list\n",
        "test": "assert average_tuple(((1,2,3),(4,5,6))) == [2,5] ",
        "num_ids": 1941,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    # Check if the lengths of the tuples are equal\n    if len(test_tup1) != len(test_tup2):\n        return None\n    \n    # Create an empty list to store the results of the modulo operation\n    result = []\n    \n    # Perform the element wise modulo operation and append the results to the result list\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    \n    # Return the result list as a tuple\n    return tuple(result)\n",
        "test": "assert tuple_modulo((2, 4, 6), (3, 5, 7)) == (2, 4, 6)",
        "num_ids": 2108,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    i = 0\n    jumps = 0\n    while i < steps:\n        j = min(steps, d)\n        i += j\n        jumps += 1\n        if i >= d:\n            return jumps\n    return -1  # no possible solution",
        "test": "assert min_Jumps(1, 1) == 1",
        "num_ids": 1940,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([2, 4, 6], [1, 2, 3]) == [2.0, 2.0, 2.0]",
        "num_ids": 1596,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    result = \"\"\n    num_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            result += char\n    return result + num_str",
        "test": "assert move_num('') == ''",
        "num_ids": 1513,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def largest_subset(a):\n    n = len(a)\n    if n < 2:\n        return n\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n",
        "test": "assert largest_subset([1, 2, 4]) == 3 # should return 3",
        "num_ids": 2103,
        "indeed": true
    },
    {
        "number": 622,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # If the length of arrays is even\n        median = (arr1[n // 2 - 1] + arr2[n // 2 - 1]) / 2\n    else:\n        # If the length of arrays is odd\n        median = (arr1[n // 2] + arr2[n // 2]) / 2\n    return median\n",
        "test": "assert get_median([1,2,3,4,5], [5,4,3,2,1], 5) == 3, \"Test case 1 failed\"",
        "num_ids": 3175,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3], 2) == [1, 4, 9]",
        "num_ids": 1273,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"Hello\") == \"HELLO\"",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1] ",
        "num_ids": 1565,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r**2\n    return area\n",
        "test": "assert triangle_area(0) == 0, \"Radius 0\"",
        "num_ids": 1575,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i] != i:\n            return i\n\n    return end\n",
        "test": "assert find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 11  # missing number is 11",
        "num_ids": 2077,
        "indeed": true
    },
    {
        "number": 628,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n",
        "test": "assert Split([1,2,3,4,5,6]) == [2,4,6]",
        "num_ids": 1479,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) != 2:\n        raise ValueError(\"The given element must be a tuple of two elements.\")\n    x, y = ele\n    if x < 0 or y < 0:\n        raise ValueError(\"The coordinates must be non-negative.\")\n    result = []\n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            if dx == 0 and dy == 0:\n                continue\n            new_x, new_y = x + dx, y + dy\n            if new_x < 0 or new_y < 0:\n                continue\n            result.append((new_x, new_y))\n    if sub:\n        result = [coord for coord in result if coord in sub]\n    return result\n",
        "test": "assert adjac((1, 1)) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)]",
        "num_ids": 2367,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_list = []\n    non_zero_list = []\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n    return non_zero_list + zero_list",
        "test": "assert move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 2301,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a Python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    \n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate through the list\n    for i in range(n):\n        # Iterate through the list again\n        for j in range(i+1, n):\n            # XOR the current pair of numbers and add to the sum\n            sum += arr[i] ^ arr[j]\n            \n    # Return the sum\n    return sum\n",
        "test": "assert pair_xor_Sum([], 0) == 0",
        "num_ids": 1690,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for _ in range(len(heap))]\n",
        "test": "assert heap_sort([3,2,1,5,4]) == [1,2,3,4,5] # check if the function can sort a simple list in ascending order",
        "num_ids": 1642,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(10, 15) == False",
        "num_ids": 1346,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wc)\n",
        "test": "assert wind_chill(34, -5) == 30, \"Error: wind_chill(34, -5) should be 30\" ",
        "num_ids": 1945,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['Alice', 'Bob', 'carol', 'dave', 'eve']) == 8",
        "num_ids": 1598,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)",
        "test": "assert remove_parenthesis(\"hello (world)\") == \"hello \"",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    while True:\n        nonagonal = i*(2*i - 1)\n        if n == nonagonal:\n            return nonagonal\n        elif n < nonagonal:\n            return False\n        else:\n            i += 1\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expressions to match any word that contains 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    return bool(match)",
        "test": "assert text_match_wordz_middle('hello world') == False ",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    return input\n",
        "test": "assert reverse_Array_Upto_K([3, 2, 1, 4, 5], 0) == [3, 2, 1, 4, 5]",
        "num_ids": 1779,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    return tuple(test_tup)\n",
        "test": "assert add_dict_to_tuple((\"apple\", \"banana\", \"cherry\"), {\"fruit\": \"apple\", \"vegetable\": \"carrot\"}) == (\"apple\", \"banana\", \"cherry\", {\"fruit\": \"apple\", \"vegetable\": \"carrot\"}) ",
        "num_ids": 1897,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell.\n    We want to find a path with the maximum average over all existing paths.\n    Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            dp[i][j] = cost[i][j]\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1])\n    return dp[N-1][N-1]/float(N*N)\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 3.4444444444444444, \"Incorrect result for maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\"",
        "num_ids": 3945,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n",
        "test": "assert filter_data({'Alice': (170, 50), 'Bob': (160, 60), 'Charlie': (180, 80)}, 170, 60) == {'Charlie': (180, 80)} ",
        "num_ids": 2016,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    \n    # Convert the base to a string to iterate over each digit\n    base_str = str(base)\n    \n    # Initialize a variable to store the sum of digits\n    digit_sum = 0\n    \n    # Iterate over each digit of the base\n    for digit in base_str:\n        # Convert the digit back to an integer and raise it to the power\n        digit_power = int(digit) ** power\n        \n        # Add the digit power to the sum of digits\n        digit_sum += digit_power\n    \n    # Return the sum of digits\n    return digit_sum\n",
        "test": "assert power_base_sum(2, 4) == 16 ",
        "num_ids": 1935,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    result = pattern.findall(text1)\n    return result\n",
        "test": "assert extract_quotation('\"hello\" world') == ['hello']",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)-1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    return result_tup\n",
        "test": "assert multiply_elements((1,2,3)) == (2,6)",
        "num_ids": 1710,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1533,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    # group the list by consecutive elements\n    grouped = groupby(nums)\n    \n    # keep only the first element of each group\n    result = [key for key, group in grouped]\n    \n    return result\n",
        "test": "assert consecutive_duplicates([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2018,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_area",
        "test": "assert lateralsurface_cone(0, 10) == 0, \"lateralsurface_cone with radius 0 and height 10 is incorrect\"",
        "num_ids": 1559,
        "indeed": true
    },
    {
        "number": 732,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r\"[\\s.,]+\"\n    result = re.sub(pattern, \":\", text)\n    return result\n",
        "test": "assert replace_specialchar(\"This is a sentence.\") == \"This:is:a:sentence:\" ",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 2942,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9+7\n    dp = [1]*(n+1)\n    res = 0\n\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] * arr[i-1]\n        res = (res + dp[i]) % mod\n\n        for j in range(i+1, n+1):\n            dp[j] = dp[j-1] * arr[j-1]\n            res = (res + (dp[i] * dp[j]) % mod) % mod\n\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 2, -3]) == 0",
        "num_ids": 2343,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    mask = 0xFFFFFFFE # this mask will set all bits to 1 except the first and last bit\n    return n ^ (n & mask) # this operation will toggle the bits of n except the first and last bit\n",
        "test": "assert set_middle_bits(0) == 0, \"Test case failed: set_middle_bits(0)\"",
        "num_ids": 2750,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif a[index - 1] == x:\n        return index - 1\n    else:\n        return index\n",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 1395,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('world') == False",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1/(1-0.5) + geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math\n\ndef find_Index(n):\n    i = 1\n    count = 0\n    while True:\n        count += i\n        if len(str(count)) == n:\n            return i\n        i += 1\n",
        "test": "assert find_Index(1) == 1",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    res = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        if i+1 < len(test_tup):\n            value = test_tup[i+1]\n        else:\n            value = None\n        res[key] = value\n    return res\n",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 1952,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a set to remove duplicate characters\n    unique_chars = set(s)\n    # If the length of the set is 1, then all characters are same\n    if len(unique_chars) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same('aaa') == True",
        "num_ids": 1187,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    height = math.sqrt(side**2 - (side/2)**2)\n    area = (side * height) / 2\n    return area\n",
        "test": "assert area_tetrahedron(4) == 11.782037323676104 ",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(lst)\n    m = m % n\n    \n    # Reverse the list\n    lst = lst[::-1]\n    \n    # Reverse the first m elements of the reversed list\n    lst[:m] = lst[:m][::-1]\n    \n    # Reverse the remaining elements of the reversed list\n    lst[m:] = lst[m:][::-1]\n    \n    return lst",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 1858,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False",
        "num_ids": 1057,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(100, 500) == [] # should return []",
        "num_ids": 2580,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a / 360) * math.pi\n",
        "test": "assert sector_area(0, 180) == 0",
        "num_ids": 1435,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common suffixes of substrings\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table in a dynamic programming manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Find the length of the longest common subsequence of the three strings\n    lcs_length = L[m][n][o]\n\n    # Create a table to store the longest common subsequence\n    LCS = [[\"\" for k in range(o+1)] for j in range(n+1)]\n\n    # Fill the table in a dynamic programming manner\n    for i in range(m, 0, -1):\n        for j in range(n, 0, -1):\n            for k in range(o, 0, -1):\n                if L[i][j][k] == L[i-1][j][k]:\n                    LCS[j][k] = LCS[j][k-1]\n                elif L[i][j][k] == L[i][j-1][k]:\n                    LCS[j][k] = LCS[j-1][k]\n                elif L[i][j][k] == L[i][j][k-1]:\n                    LCS[j][k] = LCS[j][k-1]\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[j][k] = LCS[j-1][k-1] + X[i-1]\n                else:\n                    LCS[j][k] = LCS[j-1][k]\n\n    # Return the longest common subsequence\n    return LCS[n][o][-lcs_length:]\n",
        "test": "assert lcs_of_three(\"ABCDEFG\", \"HijKLMN\", \"OpQRSTUVWXYZ\") == \"\" ",
        "num_ids": 4796,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Using regular expression to find all the words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    words = pattern.findall(str1)\n\n    # Replacing the words starting with capital letters with the same word with a space before it\n    for word in words:\n        str1 = str1.replace(word, ' '+word)\n\n    # Removing the extra space at the beginning of the string\n    str1 = str1.lstrip()\n    \n    return str1 ",
        "test": "assert capital_words_spaces('') == '', 'Input string should return empty string'",
        "num_ids": 1476,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    \n    # Converting each string in the list to a float and sorting the list\n    nums_str.sort(key=float)\n    \n    # Returning the sorted list\n    return nums_str\n",
        "test": "assert sort_numeric_strings(['12', '45', '7', '9', '34']) == ['7', '9', '12', '34', '45'] # correct output for ascending order",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1, 2, 3)], (4, 5, 6)) == [(1, 2, 3), (4, 5, 6)] ",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    last_index = len(arr) - 1\n    parent_index = i\n    child_index = 2 * i + 1\n\n    while child_index <= last_index:\n        # Check if parent is smaller than child\n        if arr[parent_index] > arr[child_index]:\n            return False\n\n        # Check if child has two elements\n        if child_index + 1 <= last_index and arr[child_index] > arr[child_index + 1]:\n            return False\n\n        # Move to next parent and child\n        parent_index = child_index\n        child_index = 2 * child_index + 1\n\n    return True\n",
        "test": "assert check_min_heap_helper([4, 10, 3, 5, 1], 1) == False",
        "num_ids": 3041,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1618,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]",
        "test": "assert min_k([(1, 3), (4, 2), (5, 6), (7, 9)], 0) == []",
        "num_ids": 2760,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists.\n    The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) == []",
        "num_ids": 2099,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    first_min = second_min = float('inf')\n    for num in numbers:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif first_min < num < second_min:\n            second_min = num\n    \n    return second_min\n",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one('ab') == True ",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_reverse_pairs(test_list):\n    n = len(test_list)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] > test_list[j]:\n                count += 1\n    \n    return count",
        "test": "assert count_reverse_pairs([]) == 0, \"Test case 1 failed\"",
        "num_ids": 1763,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count\n",
        "test": "assert unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 4], [2, 3], [4, 5]]) == {(1, 2, 3): 2, (1, 2, 4): 1, (2, 3): 1, (4, 5): 1} ",
        "num_ids": 2236,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "test": "assert is_decimal('3.14') == True",
        "num_ids": 1309,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # Convert the list to a set to remove duplicates\n    arr_set = set(arr)\n    \n    # If the length of the set is 1, then all elements in the list are the same\n    if len(arr_set) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([2,2,2]) == True",
        "num_ids": 1196,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    '''\n    # Create a list of months with 30 days\n    thirty_days = [4, 6, 9, 11]\n    # Check if the given month number is in the list of months with 30 days\n    if monthnum3 in thirty_days:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(1) == False, \"Month 1 should not contain 30 days\"",
        "num_ids": 1428,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_min_diff(arr, n):\n    arr.sort() # Sorting the array in ascending order\n    min_diff = float('inf') # Initializing the minimum difference to infinity\n    \n    # Traversing through the sorted array and finding the minimum difference between any two elements\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff # Returning the minimum difference\n",
        "test": "assert find_min_diff([3, 5, 9, 12, 15], 5) == 2 # correct result should be 2 as the difference between 9 and 12 is 2",
        "num_ids": 2090,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr('12345') == 5",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number.\n    \"\"\"\n\n    # Initialize a variable to store the sum of divisors\n    sum_of_divisors = 0\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Initialize a variable to store the sum of divisors of i\n        divisor_sum = 1  # 1 is always a divisor\n\n        # Loop through all divisors of i\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                divisor_sum += j\n                if i // j != j:  # If j is not a perfect square\n                    divisor_sum += i // j\n\n        # Add the sum of divisors of i to the sum of divisors of all numbers from 1 to n\n        sum_of_divisors += divisor_sum\n\n    # Return the nth polite number\n    return sum_of_divisors\n",
        "test": "assert is_polite(1) == 1",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result\n",
        "test": "assert pair_wise([1,2,3,4,5]) == [(1,2),(2,3),(3,4),(4,5)]",
        "num_ids": 1418,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    pairs = {}\n    for num in arr:\n        if num in pairs:\n            pairs[num] += 1\n        else:\n            pairs[num] = 1\n    for num in pairs:\n        if (sum - num) in pairs:\n            count += pairs[num] * pairs[sum - num]\n    count //= 2\n    return count\n",
        "test": "assert get_pairs_count([2, 4, 6, 8], 6) == 1 # one pair with sum 6: 2 + 4",
        "num_ids": 1885,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Diff(li1, li2):\n    '''\n    Returns a list containing the elements of li1 that are not present in li2.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1,2,3,4,5], [2,3,4]) == [1,5]",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total_sum = 0\n    count = 0\n    \n    while count < n:\n        total_sum += (2*count + 1) ** 4\n        count += 1\n    \n    return total_sum\n",
        "test": "assert odd_num_sum(0) == 0",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if not (current_char == \"(\" and char == \")\") and not (current_char == \"{\" and char == \"}\") and not (current_char == \"[\" and char == \"]\"):\n                return False\n    if not stack:\n        return True\n    return False\n",
        "test": "assert check_expression('(1+2))') == False",
        "num_ids": 1828,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create an empty list to store words with length greater than K\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the word is greater than K\n        if len(word) > K:\n            # If the length is greater than K, append the word to the result list\n            result.append(word)\n    \n    # Join the words in the result list to form the final string\n    final_str = ' '.join(result)\n    \n    return final_str\n",
        "test": "assert remove_length(\"Hello world\", 4) == \"Hello world\"",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n\n    # Initialize an empty list to store the positions and substrings\n    positions = []\n\n    # Use the re.finditer() function to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Loop through the matches and add the position and substring to the list\n    for match in matches:\n        positions.append((match.start(), match.group()))\n\n    # Return the list of positions and substrings if there are matches, otherwise return None\n    if positions:\n        return positions\n    else:\n        return None\n",
        "test": "assert occurance_substring(\"Hello World\", \"world\") == None",
        "num_ids": 1703,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 3, 4, 6]) == False",
        "num_ids": 1335,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"abcd\") == 0",
        "num_ids": 1873,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    unique_sum = sum(unique_elements)\n    return unique_sum\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 2203,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # Create a list of tuples where each tuple contains an element and its count of consecutive duplicates\n    list2 = [(k, len(list(g))) for k, g in groupby(list1)]\n    \n    # Create a new list containing sublists of consecutive duplicates\n    result = []\n    for item in list2:\n        if item[1] > 1:\n            result.append([item[0]] * item[1])\n        else:\n            result.append([item[0]])\n            \n    return result\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 2033,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Counts the number of occurrences of each unique sublist in a list.\n\n    :param list1: A list of sublists.\n    :return: A dictionary where each key is a unique sublist as a tuple, and the value is the number of times it appears in the input list.\n    \"\"\"\n    counts = {}\n    for sublist in list1:\n        # Convert the sublist to a tuple so it can be used as a key in the dictionary\n        key = tuple(sublist)\n        if key in counts:\n            counts[key] += 1\n        else:\n            counts[key] = 1\n    return counts\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2282,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 10:\n                result.append(comb)\n    return result\n",
        "test": "assert find_combinations([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(7, 8, 5, 6), (7, 8, 3, 4), (3, 4, 5, 6), (1, 3, 4, 5), (1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 4, 6), (1, 2, 5, 6)]",
        "num_ids": 3112,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Returns True if the count of divisors of n is even, False otherwise.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    return divisor_count % 2 == 0\n",
        "test": "assert count_divisors(12) == True, \"Incorrect output\"",
        "num_ids": 1797,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            for k in range(i, j, 2):\n                result += arr[k]\n    return result",
        "test": "assert odd_length_sum([1, 2, 3]) == 10",
        "num_ids": 1811,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert RGB values to floats\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    \n    # Calculate the maximum and minimum RGB values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / (max_val - min_val)) % 6\n    elif max_val == g:\n        hue = ((b - r) / (max_val - min_val)) + 2\n    else:\n        hue = ((r - g) / (max_val - min_val)) + 4\n    \n    # Calculate the saturation and value\n    if max_val == 0:\n        sat = 0\n        val = 0\n    else:\n        sat = 1 - min_val / max_val\n        val = max_val\n    \n    # Convert hue to degrees\n    hue *= 60\n    \n    # Return the HSV values as a tuple\n    return (hue, sat, val)\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) ",
        "num_ids": 3668,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2 != 0:\n            odd_num = num\n            break\n    \n    return even_num * odd_num\n",
        "test": "assert mul_even_odd([2, 3, 4, 5]) == 6 # even is 2, odd is 3",
        "num_ids": 2125,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the parentheses from the input string\n    test_str = test_str.replace('(', '').replace(')', '')\n    # Split the string into individual elements\n    elements = test_str.split(',')\n    # Convert the individual elements from string to integer\n    int_elements = [int(element.strip()) for element in elements]\n    # Convert the integer list to a tuple\n    int_tuple = tuple(int_elements)\n    return int_tuple\n",
        "test": "assert tuple_str_int(\"(1,2,3)\") == (1,2,3)",
        "num_ids": 1892,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "test": "assert right_insertion([1, 3, 5, 7], 2) == 1",
        "num_ids": 1260,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_three(\"abbbb\")",
        "num_ids": 1088,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # converting the list to tuple\n    test_list_tuple = tuple(test_list)\n    # concatenating the tuple with the string\n    result = test_list_tuple + (test_str,)\n    # returning the result\n    return result\n",
        "test": "assert new_tuple([1, 2, 3], \"test\") == (1, 2, 3, \"test\") ",
        "num_ids": 1249,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([1,3,5]) == False",
        "num_ids": 1244,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            continue\n        result.append(item)\n    return tuple(result)\n",
        "test": "assert remove_nested((1,2,3)) == (1,2,3)",
        "num_ids": 1534,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists and returns the count of lists inside it.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1], [2], [3]]) == 3",
        "num_ids": 1107,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element as input and returns the last position of the element in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n",
        "test": "assert last([1,3,5,7,9], 1) == 0 ",
        "num_ids": 2108,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    ending in 'b'.\n    '''\n\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return \"No match found\"",
        "test": "assert text_starta_endb(\"acb\") == \"acb\"",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def return_sum(d):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    # Initialize sum to zero\n    total = 0\n    \n    # Iterate over all key-value pairs in the dictionary\n    for key, value in d.items():\n        # Add the value to the total sum\n        total += value\n    \n    # Return the total sum\n    return total\n",
        "test": "assert return_sum({'a':1, 'b':2, 'c':3}) == 6",
        "num_ids": 1253,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum = 0\n    for num in range(l, r+1):\n        if num % 2 == 1:\n            sum += num\n    return sum\n",
        "test": "assert sum_odd(10) == 25",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15 # expected output: 15",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    while d < 0:\n        d += 32\n    while d > 32:\n        d -= 32\n    return ((n << d) & mask) | (n >> (32-d))\n",
        "test": "assert left_rotate(0, 1) == 0, \"Invalid left rotation for 0 by 1 bit\"",
        "num_ids": 1452,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"This is a test\") == \"Thisisatest\"",
        "num_ids": 956,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 3\n    elif x == y or x == z or y == z:\n        count += 2\n    elif x != y and y != z:\n        count += 0\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 1342,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Check if array is already sorted\n    if arr == sorted(arr):\n        return 0\n    \n    # Initialize variables\n    start = 0\n    end = n-1\n    mid = 0\n    \n    # Binary search to find the rotation index\n    while start <= end:\n        mid = (start + end)//2\n        \n        # If mid element is minimum element\n        if mid > 0 and arr[mid] < arr[mid-1]:\n            return mid\n        \n        # If mid element is greater than the first element of the array, then minimum element lies in the right subarray\n        elif arr[mid] > arr[0]:\n            start = mid + 1\n            \n        # If mid element is smaller than the first element of the array, then minimum element lies in the left subarray\n        else:\n            end = mid - 1\n    \n    # If the minimum element is not found in the array, then the array is not rotated\n    return 0\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5, 6, 7, 9, 10]) == 0 # expected output: 0",
        "num_ids": 2318,
        "indeed": true
    },
    {
        "number": 803,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_perfect_square(1) == True, \"Testcase failed for 1\"",
        "num_ids": 1289,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n",
        "test": "assert is_product_even([1,2,3,4,5]) == True",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 1837,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n",
        "test": "assert max_run_uppercase(\"AbCdEf\") == 1 # only one run of uppercase",
        "num_ids": 1582,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1158,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 18,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((1, 2, 3), 2) == True",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples are not of the same length.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    \n    return True\n",
        "test": "assert check_smaller((2, 3, 4), (4, 3, 2)) == False",
        "num_ids": 1742,
        "indeed": true
    }
]