[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in common_elements:\n            common_elements.append(element)\n    return common_elements\n",
        "test": "assert similar_elements((1, 2, 3, 4), (2, 3, 4, 5)) == (2, 3, 4)",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not is_prime(n) ",
        "test": "assert is_not_prime(2) == False",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for num in nums:\n        if len(h) < n:\n            hq.heappush(h, num)\n        elif num > h[0]:\n            hq.heappushpop(h, num)\n    return sorted(h, reverse=True)\n",
        "test": "assert heap_queue_largest([1, 1, 1, 1, 1], 3) == [1, 1, 1]",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a Python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # Check if the number is a power of two\n    if x == 0:\n        return False\n    \n    while x != 1:\n        if x % 2 != 0:\n            return False\n        x = x // 2\n        \n    return True\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to find all words that are 4 or more characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert find_char_long(\"\") == []",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert square_nums([1, 2, 3]) == [1, 4, 9]",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    temp = s + s\n    s1 = temp[0:n]\n    s2 = temp[n:]\n    min_rotations = n\n    for i in range(n):\n        if s1 == s2:\n            return i\n        s1 = s1[1:] + s1[0]\n        s2 = s2[1:] + s2[0]\n    return min_rotations\n",
        "test": "assert find_Rotations('hello') == 0",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first_index = s.find(ch)\n        last_index = s.rfind(ch)\n        if first_index == last_index:\n            return s.replace(ch, '')\n        else:\n            return s[:first_index] + s[(first_index+1):last_index] + s[last_index+1:]\n    else:\n        return s\n",
        "test": "assert remove_Occ('hello world', 'o') == 'hell wrld'",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    num_rows = len(M)\n    num_cols = len(M[0])\n\n    # Create a list to hold the sums of the rows\n    row_sums = []\n    for i in range(num_rows):\n        row_sum = sum(M[i])\n        row_sums.append(row_sum)\n\n    # Sort the rows based on their sums\n    sorted_rows = [x for _, x in sorted(zip(row_sums, M))]\n\n    # Return the sorted matrix\n    return sorted_rows\n",
        "test": "assert sort_matrix([[3, 2, 1], [4, 1, 5], [6, 3, 2]]) == [[3, 2, 1], [4, 1, 5], [6, 3, 2]]",
        "num_ids": 1012,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2)*l*b*h\n    return volume\n",
        "test": "assert find_Volume(0, 0, 0) == 0",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters\n    joined with an underscore and False otherwise.\n    '''\n    pattern = re.compile('[a-z]+_[a-z]+')\n    return bool(pattern.search(text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(4) == 16  # check if the perimeter of a square with side length 4 is 16",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and returns a list of unique characters in the string.\n    '''\n    char_list = []\n    for char in string:\n        if char not in char_list:\n            char_list.append(char)\n    return char_list\n\ndef remove_chars(string1, string2):\n    '''\n    This function takes two strings as input and removes the characters in the first string which are present in the second string.\n    '''\n    char_list = str_to_list(string1)\n    for char in str_to_list(string2):\n        if char in char_list:\n            char_list.remove(char)\n    return ''.join(char_list)\n",
        "test": "assert str_to_list(\"abcd\") == [\"a\", \"b\", \"c\", \"d\"]",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x <= 0:\n        return False\n    \n    # Calculate the sum of the digits of x\n    digits_sum = sum(int(digit) for digit in str(x))\n    \n    # Check if the sum of the digits is equal to 10 or 18\n    if digits_sum in [10, 18]:\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(15) == False",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    str_num = str(num)\n    reversed_num = str_num[::-1]\n    reversed_num_int = int(reversed_num)\n    if num == (2 * reversed_num_int) - 1:\n        return True\n    else:\n        return False",
        "test": "assert rev(23456) == False ",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 54321, \"Incorrect output\"",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(1, -1) == True",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    # check if n is positive integer\n    if n <= 0 or not isinstance(n, int):\n        return False\n    \n    # calculate the nth octagonal number using formula: n^2(3n-2)\n    oct_num = n**2 * (3*n - 2)\n    \n    # check if the octagonal number is perfect square\n    if oct_num**0.5 == int(oct_num**0.5):\n        return True\n    \n    # if not perfect square, return False\n    return False\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # initialize a dictionary to store the count of substrings with sum of digits equal to their length\n    count_dict = defaultdict(int)\n    n = len(s)\n    # iterate over all substrings of the given string\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # calculate the sum of digits of the current substring\n            digit_sum = sum(int(digit) for digit in s[i:j])\n            # if the sum of digits is equal to the length of the substring, increment its count in the dictionary\n            if digit_sum == j-i:\n                count_dict[s[i:j]] += 1\n    # return the total count of substrings with sum of digits equal to their length\n    return sum(count_dict.values())\n",
        "test": "assert count_Substrings(\"123123\") == 2, \"Substrings '123' and '231' with sum of digits equal to their length not found\"",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_num(xs):\n    '''\n    Write a Python function to find the smallest number in a list.\n    '''\n    smallest = None\n    for num in xs:\n        if smallest is None or num < smallest:\n            smallest = num\n    return smallest\n",
        "test": "assert smallest_num([1,2,3,4,5]) == 1",
        "num_ids": 506,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4, \"Expected output: 4\"",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sorts a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(100, 'Math'), (80, 'English'), (90, 'Science')]) == [(80, 'English'), (100, 'Math'), (90, 'Science')] ",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total_sum = 0\n    for data in data_list:\n        if isinstance(data, list):\n            total_sum += recursive_list_sum(data)\n        else:\n            total_sum += data\n    return total_sum\n",
        "test": "assert recursive_list_sum([1]) == 1",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Returns the count of positive numbers in a given list.\n\n    :param lst: List of numbers\n    :return: Count of positive numbers in the list\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, -2, 3, 4, -5]) == 3 ",
        "num_ids": 415,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_number(n-1) * sum(bell_number(i) for i in range(n))\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3:\n        return True\n    \n    # Check if the array is increasing or decreasing\n    increasing = A[1] > A[0]\n    \n    for i in range(2, len(A)):\n        if increasing:\n            if A[i] < A[i-1]:\n                return False\n        else:\n            if A[i] > A[i-1]:\n                return False\n    \n    return True\n",
        "test": "assert is_Monotonic([1,1,1,1]) == True",
        "num_ids": 884,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l) - len(s) + 1):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n",
        "test": "assert is_sublist([1, 2, 3], [2, 3]) == True",
        "num_ids": 567,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    if len(Input) == 0:\n        return False\n    \n    length = len(Input[0])\n    \n    for i in range(1, len(Input)):\n        if len(Input[i]) != length:\n            return False\n        \n    return True\n",
        "test": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6)]) == True",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = max(1, int(gap/1.3))\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n    return nums\n",
        "test": "assert comb_sort([5, 1, 8, 4, 2, 9, 6, 3, 7]) == [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5)+1):\n        if n == i**2 + (n-i)**2:\n            return True\n    return False\n",
        "test": "assert dif_Square(3) == False, \"Invalid output for input 3\"",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Initialize variables to store the current index of colors and patterns\n    color_index = 0\n    pattern_index = 0\n    \n    # Loop through the colors array\n    while color_index < len(colors):\n        # If the current color matches the current pattern\n        if colors[color_index] == patterns[pattern_index]:\n            # Increment both indices\n            color_index += 1\n            pattern_index += 1\n            \n            # If the pattern index reaches the end of the patterns array, it means we've found a match for all the patterns\n            if pattern_index == len(patterns):\n                return True\n        \n        # If the current color does not match the current pattern, check the next color\n        else:\n            # If the color is not the same as the current pattern\n            if colors[color_index] != patterns[pattern_index]:\n                # Reset the pattern index to 0\n                pattern_index = 0\n                \n                # Increment the color index\n                color_index += 1\n            \n            # If the color is the same as the current pattern, increment the pattern index\n            else:\n                pattern_index += 1\n                \n    # If we reach this point, it means we haven't found a match for all the patterns\n    return False\n",
        "test": "assert is_samepatterns([1,2,3,4], [1,2,3,4]) == True",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6)], 1) == [(1, 2, 3), (4, 5, 6)] # all elements are divisible by 1",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_Diff(n):\n    # Check if the number is divisible by 11\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(22) == True, \"22 is divisible by 11\"",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def word_len(s):\n    '''\n    A function to check whether the length of the word is odd or not.\n    \n    Args:\n    s: a string representing the word to be checked\n    \n    Returns:\n    True if the length of the word is odd, False otherwise.\n    '''\n    \n    # Calculate the length of the word\n    length = len(s)\n    \n    # Check if the length of the word is odd or not\n    if length % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert word_len(\"hello\") == True",
        "num_ids": 415,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    This function calculates the nth tetrahedral number using the formula:\n    n * (n * (n + 1)) / 2\n    :param n: the number of tetrahedral numbers to return\n    :return: the nth tetrahedral number\n    \"\"\"\n    return n * (n * (n + 1)) // 2 ",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * 1**3",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    total %= 26\n    return chr(total + 65)\n",
        "test": "assert get_Char(\"\") == \"\"",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sequence(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return \"1\"\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n        return sequence[n]",
        "test": "assert sequence(2) == 1",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "test": "assert surfacearea_sphere(2) == 50.26548245743669 # r=2, surface area = 50.27",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1))\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n",
        "test": "assert merge_dictionaries_three({'a':1, 'b':2}, {}, {}) == {'a': 1, 'b': 2} ",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n",
        "test": "assert freq_count([1,2,2,3,3,3,4,4,4,4]) == {1: 1, 2: 2, 3: 3, 4: 4} ",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # initialize a variable to store the closest smaller number\n    closest_num = None\n    \n    # loop through all numbers from 0 to N-1\n    for i in range(N-1, -1, -1):\n        # if the current number is smaller than N and greater than the closest smaller number found so far,\n        # update the closest smaller number\n        if i < N and (closest_num is None or i > closest_num):\n            closest_num = i\n    \n    return closest_num\n",
        "test": "assert closest_num(10) == 9",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log([\"apple\", \"banana\", \"orange\"]) == 6 ",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n",
        "test": "assert find_substring('hello world', 'goodbye') == False",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 1 or not isinstance(n, int):\n        return False\n    s = str(n)\n    for i in range(len(s) - 1):\n        if s[i] < s[i + 1]:\n            return False\n        elif s[i] > s[i + 1]:\n            for j in range(i + 1, len(s)):\n                if s[j] > s[i]:\n                    return True\n            return False\n    return True ",
        "test": "assert is_undulating(55555) == True, \"55555 should be undulating\"",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power(a, b):\n    '''\n    Calculate the value of 'a' to the power 'b'\n    '''\n    return a ** b\n",
        "test": "assert power(2,3) == 8 # check if 2 to the power 3 is equal to 8",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if not test_list:\n        return None\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value[0]\n",
        "test": "assert index_minimum([(1, 3), (2, 1), (3, 2)]) == 2, \"Incorrect output for index_minimum([(1, 3), (2, 1), (3, 2)]).\"",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3], [4,5], [6,7,8,9]]) == 2  # expected output: 2",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # initialize an empty dictionary to store the frequency of each element\n    freq = {}\n    \n    # iterate over each element in the flattened list\n    for element in list1:\n        # if the element is already in the dictionary, increment its count by 1\n        if element in freq:\n            freq[element] += 1\n        # otherwise, add the element to the dictionary with a count of 1\n        else:\n            freq[element] = 1\n            \n    # return the dictionary of element frequencies\n    return freq\n",
        "test": "assert frequency_lists([1, 2, 3, 1, 2, 3, 1, 2, 3]) == {1: 3, 2: 3, 3: 3}",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n",
        "test": "assert multiply_num([4, 5, 6, 7, 8]) == 36.0 # should be 210/5=42.0",
        "num_ids": 558,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent,\n    represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer,\n    returned as an integer.\n    '''\n    # Convert the number to a string, and find its length\n    num_str = str(num)\n    num_len = len(num_str)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, add 1 to the rightmost digit and return the result\n        return int(num_str[:-1] + str(int(num_str[-1]) + 1))\n    else:\n        # If it isn't, find the rightmost odd-length substring that is a palindrome\n        for i in range(num_len // 2):\n            if num_str[i] == num_str[num_len - 1 - i]:\n                # If there is one, add 1 to the rightmost digit of the substring and return the result\n                return int(num_str[:num_len - 1 - i] + str(int(num_str[num_len - 1 - i]) + 1) + num_str[num_len - 1 - i:])\n\n        # If there isn't one, add 1 to the leftmost digit and return the result\n        return int(str(int(num_str[0]) + 1) + \"0\" * (num_len - 1))\n",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 1384,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0]\n    for w in words[1:]:\n        camel_case += w.capitalize()\n    return camel_case\n",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0 or m == 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)",
        "test": "assert eulerian_num(0, 0) == 1",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n",
        "test": "assert sort_sublists([['b', 'a'], ['d', 'c'], ['f', 'e']]) == [['a', 'b'], ['c', 'd'], ['e', 'f']]",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, False]) == 2, \"Incorrect count result\"",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3) ",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        smallest_val = heapq.heappop(num1)\n        if smallest_val > heapq.heappop(num2):\n            smallest_val = heapq.heappop(num2)\n        if smallest_val > heapq.heappop(num3):\n            smallest_val = heapq.heappop(num3)\n        merged_list.append(smallest_val)\n\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n\n    return merged_list\n",
        "test": "assert merge_sorted_list([], [1,2,3], [4,5,6]) == [1, 2, 3, 4, 5, 6] # test with empty list",
        "num_ids": 1428,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    This function takes in a binary string s and an integer n as input.\n    It rotates the string n times and counts the number of odd values in the resulting string.\n    The function returns the count of odd values in the string.\n    \"\"\"\n    # Convert the binary string to an integer\n    num = int(s, 2)\n    # Rotate the binary string n times by multiplying it with 2^n\n    num *= 2**n\n    # Convert the integer back to binary string\n    binary = bin(num)[2:]\n    # Count the number of odd values in the resulting string\n    count = 0\n    for bit in binary:\n        if bit == '1':\n            count += 1\n    return count\n",
        "test": "assert odd_Equivalent(\"101\", 3) == 2, \"Test case failed\"",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = set(nestedlist[0])\n    for lst in nestedlist:\n        common.intersection_update(set(lst))\n    return list(common)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer('123') == True, 'Error: check_integer(\"123\") should return True'",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True\n",
        "test": "assert empty_dit([{'a': 1, 'b': 2}, {'c': 3}]) == False",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1,)) == 1",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([[1, 2, 3], ['4.5', '6.7', '8.9']]) == [[1.0, 2.0, 3.0], [4.5, 6.7, 8.9]]",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def search(arr):\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        if arr[0] == arr[1]:\n            return None\n        else:\n            return arr[0]\n    else:\n        for i in range(1, len(arr)-1):\n            if arr[i-1] != arr[i] and arr[i] != arr[i+1]:\n                return arr[i]\n        return None\n",
        "test": "assert search([1, 1, 2, 3, 3, 4, 4, 8]) == 2",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product",
        "test": "assert max_product_tuple([(1, 2), (3, 4), (-5, 6)]) == 24, \"Incorrect result for [(1, 2), (3, 4), (-5, 6)]\"",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for n in range(1, limit+1):\n        d = sum(i for i in range(1, n) if n % i == 0)\n        if n != d and n == sum(i for i in range(1, d) if d % i == 0):\n            total += n\n    return total",
        "test": "assert amicable_numbers_sum(10000) == 480697 # The sum of amicable numbers from 1 to 10000 is 480697",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two real numbers, a and b, as input and returns the angle of the complex number a+bi, where i is the imaginary unit.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    return angle\n",
        "test": "assert angle_complex(0-1j) == cmath.phase(0-1j) ",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in string:\n        if i == '0':\n            count_0 += 1\n        elif i == '1':\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n",
        "test": "assert find_length(\"0100100\") == 3, \"Incorrect length for binary string 0100100\"",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = set()\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors.add(i)\n    for i in range(1, b + 1):\n        if b % i == 0:\n            divisors.add(i)\n    return sum(divisors)\n",
        "test": "assert sum(12, 16) == 4",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2,3) == 6",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(4, [\"cat\", \"dog\", \"bird\", \"fish\", \"elephant\"]) == [\"elephant\"]",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is square\n    if any(len(row) != n for row in my_matrix):\n        return False\n    # Calculate the sum of each row and each column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-1-i] for i in range(n))\n    # Check if all sums are equal\n    if len(set(row_sums + col_sums + [diag1_sum, diag2_sum])) > 1:\n        return False\n    # Check if all elements are distinct\n    for row in my_matrix:\n        for i in range(n):\n            for j in range(i+1, n):\n                if row[i] == row[j]:\n                    return False\n    return True\n",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 1375,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n\n    # Iterate over the list and update the frequency of each item in the dictionary\n    for item in nums:\n        freq[item] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 3, 2, 1, 3]) == 1",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n\n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n\n    return ''.join(str1)",
        "test": "assert reverse_vowels(\"yay\") == \"yay\"",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(i) for i in tup1)\n",
        "test": "assert tup_string(()) == ''",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    # initialize sum variable\n    total = 0\n    \n    # iterate through each element of the list\n    for num in nums:\n        # if the element is negative, add it to the total sum\n        if num < 0:\n            total += num\n    \n    # return the total sum of negative numbers\n    return total\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Count the number of zeroes and non-zeroes in the array\n    num_zeroes = nums.count(0)\n    num_nonzero = len(nums) - num_zeroes\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    if num_nonzero == 0:\n        ratio = 1\n    else:\n        ratio = num_zeroes / num_nonzero\n    \n    return ratio\n",
        "test": "assert zero_count(array('i', [1, 2, 3, 4, 5, 6, 7, 8, 9])) == 0.0",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # base case\n    if n == 0:\n        return False\n    \n    # check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n    \n    # if n is not a power of 2, then check if it can be represented as sum of non-zero powers of 2\n    while n > 1:\n        if n & 1 == 1:\n            n -= 1\n        else:\n            n >>= 1\n    \n    # if n is 1, then it is a sum of non-zero powers of 2\n    return n == 1\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(0) == False",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    This function takes in a radius 'r' and returns the circumference of a circle with that radius.\n    The formula to find the circumference of a circle is 2*pi*r.\n    '''\n    pi = math.pi\n    circumference = 2*pi*r\n    return circumference\n",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result = set()\n    \n    for element in test_list:\n        if isinstance(element, list):\n            result.update(extract_singly(element))\n        else:\n            result.add(element)\n    \n    return result\n",
        "test": "assert extract_singly([]) == set()",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    while n > 1:\n        max_index = nums.index(max(nums[:n]))\n        nums = pancake_flip(nums, max_index+1)\n        nums = pancake_flip(nums, n)\n        n -= 1\n    return nums\n\ndef pancake_flip(nums, k):\n    nums[:k] = nums[:k][::-1]\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1, 2, 3, [4, 5], (6, 7))) == 3",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a Python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    for i in range(1, len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, -1, 2, -2, 3, -3]) == 6",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if a == 0:\n            return None # No solution for a = b = 0\n        else:\n            return None # No solution for b = 0\n    else:\n        x = n // b\n        y = (n - a * x) // b\n        if a * x + b * y == n:\n            return (x, y)\n        else:\n            return None # No solution exists\n",
        "test": "assert find_solution(1, 1, 0) == (0, 0) # test with zero solution",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_series(n):\n    total = 0\n    for i in range(n//2+1):\n        total += n - 2*i\n    return total\n",
        "test": "assert sum_series(1) == 1",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n\nprint(area_polygon(6, 4)) # Example usage\n``` ",
        "test": "assert area_polygon(10, 7) == 25.980762113533",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def div_sum(n):\n    \"\"\"\n    Check if the sum of divisors of two integers is the same.\n    \"\"\"\n    def divisors(num):\n        \"\"\"Return a list of divisors of a given number.\"\"\"\n        return [d for d in range(1, num+1) if num % d == 0]\n    \n    def sum_divisors(num):\n        \"\"\"Return the sum of divisors of a given number.\"\"\"\n        return sum(divisors(num))\n    \n    # find two integers whose sum of divisors is the same\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if sum_divisors(i) == sum_divisors(j):\n                return True\n    \n    # no such integers found\n    return False\n",
        "test": "assert div_sum(0) == False, \"The sum of divisors of 0 should not be equal to the sum of divisors of any other number\" ",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_char_position(s):\n    # Convert the string to lowercase\n    s = s.lower()\n    \n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n    \n    # Iterate over the characters in the string\n    for i, c in enumerate(s):\n        # If the character is not already in the dictionary, add it with a count of 1\n        if c not in char_count:\n            char_count[c] = 1\n        # If the character is already in the dictionary, increment its count\n        else:\n            char_count[c] += 1\n    \n    # Count the number of characters that occur at the same position in the string as in the English alphabet (case insensitive)\n    count = 0\n    for i, c in enumerate(s):\n        # If the character is at its position in the English alphabet (case insensitive), increment the count\n        if ord(c) - ord('a') == i or ord(c) - ord('A') == i:\n            count += char_count[c]\n    \n    # Return the count\n    return count",
        "test": "assert count_char_position('abcde') == 5",
        "num_ids": 748,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1,2,3]) == 1",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a Python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    i = 1\n    while i < n:\n        i <<= 1\n    \n    return i\n",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5], 2) == 1, \"Incorrect frequency count\"",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 2) == 6",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter\n",
        "test": "assert perimeter_pentagon(12.34) == 15 * math.sqrt(5) + 12.34",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance('abc') == 0",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_type(test_tuple):\n    if len(test_tuple) == 0:\n        return \"Empty tuple\"\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item) != data_type:\n            return False\n    return True\n",
        "test": "assert check_type((1,2,3)) == True",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_majority(arr, n, x):\n    # check if the element is in the array\n    if x not in arr:\n        return False\n    \n    # find the index of the first occurrence of x in the array\n    idx = arr.index(x)\n    \n    # if there are at least n/2 occurrences of x to the left of idx, then x is the majority element\n    if idx >= n/2 and arr[idx:].count(x) > n/2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 5) == False",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0, \"Error: count_Set_Bits(0)\"",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "test": "assert odd_values_string(\"hello world\") == \"hlowrd\" # remove odd index values",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three parameters:\n    1. n: The given number\n    2. l: The starting bit position (0-indexed)\n    3. r: The ending bit position (0-indexed)\n\n    It returns True if all the bits from the starting bit position (l) to the ending bit position (r)\n    in the given number (n) are set to 1. Otherwise, it returns False.\n    \"\"\"\n\n    # Check if l and r are within the range of the number of bits in n\n    if l < 0 or r > 31 or l > r:\n        return False\n\n    # Check if all bits from l to r are set to 1\n    for i in range(l, r+1):\n        if not (n & (1 << i)):\n            return False\n\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b1101,2,4) == False",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two pointers, one for negative and one for positive elements\n    negative_pointer = 0\n    positive_pointer = n-1\n    \n    # Iterate through the array from left to right\n    for i in range(n):\n        \n        # If the element is negative and the negative pointer is less than the positive pointer, swap the elements at these two positions\n        if arr[i] < 0 and negative_pointer < positive_pointer:\n            arr[negative_pointer], arr[i] = arr[i], arr[negative_pointer]\n            negative_pointer += 1\n            positive_pointer -= 1\n            \n    return arr\n",
        "test": "assert re_arrange_array([-1, -2, -3, 4, 5], 3) == [-1, -2, -3, 4, 5], \"Test failed for re_arrange_array\"",
        "num_ids": 1173,
        "indeed": true
    },
    {
        "number": 230,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1.replace(\" \", char)\n    return new_str\n",
        "test": "assert replace_blank(\"Hello world!\", \"-\") == \"Hello-world!\"",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([1, 1, 1, 1, 1], 1) == [1]",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area\n",
        "test": "assert lateralsuface_cylinder(0,0) == 0, \"Error: lateralsuface_cylinder(0,0) should return 0\" ",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n",
        "test": "assert volume_cube(1) == 1",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n & -n)\n",
        "test": "assert even_bit_set_number(0) == 0 # All even bits are set to 0 in 0",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # create an empty dictionary\n    dict_result = {}\n    \n    # create a counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    \n    # iterate through the counter object and add each tuple and its count to the dictionary\n    for key, value in counter.items():\n        dict_result[key] = value\n        \n    # return the dictionary\n    return dict_result\n",
        "test": "assert check_occurences([(1, 2), (2, 3), (1, 2), (2, 3), (1, 2)]) == {(1, 2): 3, (2, 3): 2} ",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_of_substrings(s):\n    \"\"\"\n    Count the number of non-empty substrings in a given string.\n\n    :param s: input string\n    :return: number of substrings\n    \"\"\"\n    # Initialize counter\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Add the number of substrings ending at the current character\n        count += len(s) - i\n\n    # Return the total count of substrings\n    return count",
        "test": "assert number_of_substrings(\"abc\") == 6 ",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the list to store the number of sequences for each possible value of the first element in the sequence\n    sequences = [1] * m\n\n    # Iterate through the range of possible values for the first element in the sequence\n    for i in range(1, m):\n        # Initialize the count of sequences for this value of the first element\n        count = 0\n\n        # Iterate through the range of possible values for the second element in the sequence\n        for j in range(i * 2, m):\n            # If the second element is valid, add the number of sequences for the previous element to the count\n            count += sequences[j - i * 2]\n\n        # Update the list of sequences for this value of the first element with the count\n        sequences[i] = count\n\n    # Return the total number of sequences, which is the sum of all the counts of sequences\n    return sum(sequences)\n",
        "test": "assert get_total_number_of_sequences(1, 1) == 1",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2\n    return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5]) == [1, 2, 4, 5]",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "test": "assert count_charac(\"hello\") == 5, \"Incorrect count of characters in string 'hello'\"",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #find the square root of the given number\n    sqrt_N = int(math.sqrt(N))\n    \n    #increment the square root by 1 and multiply it by itself\n    next_square = (sqrt_N+1)**2\n    \n    #return the next perfect square greater than the given number\n    return next_square\n",
        "test": "assert next_Perfect_Square(30) == 36",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = float('-inf')\n    for i in range(n-1):\n        if arr[i] < arr[i+1]:\n            inc = arr[i]\n            dec = arr[i+1]\n            for j in range(i+2, n):\n                if arr[j] > dec:\n                    dec = arr[j]\n            max_sum = max(max_sum, inc + dec)\n    return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 1]) == 5, \"Incorrect max_sum result\"",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be non-negative.\")\n\n    approx = number / 2.0\n    while approx**2 - number > 0.00001:\n        approx = (approx + number / approx) / 2.0\n\n    return approx\n",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store lengths of longest palindromic subsequence in all substrings\n    table = [[0 for x in range(n)] for y in range(n)]\n \n    # All substrings of length 1 are palindromes of length 1\n    for i in range(n):\n        table[i][i] = 1\n \n    # Check for substrings of length greater than 1. The loop runs from the start to end of the string\n    for gap in range(1, n):\n        for i in range(n - gap):\n            # Get the ending point of the current substring\n            j = i + gap\n \n            # If the first and last characters of the current substring are the same, then include them in the palindrome and check for the remaining substring\n            if str[i] == str[j]:\n                table[i][j] = 2 + table[i + 1][j - 1]\n            else:\n                # If the first and last characters of the current substring are not the same, then calculate the length of the palindrome by taking the maximum of the two substrings\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n \n    # Return the length of the longest palindrome substring\n    return table[0][n - 1]\n",
        "test": "assert lps(\"bbbab\") == 4, \"Incorrect output for bbbab\"",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0.0\n    for i in range(1, n+1):\n        result += 1.0/i\n    return result\n",
        "test": "assert harmonic_sum(1) == 1.0 ",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection_set = set(array_nums1) & set(array_nums2)\n    intersection_list = list(intersection_set)\n    return intersection_list\n",
        "test": "assert intersection_array([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5), 3) == 1",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def insert_element(lst, elem):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append(elem)\n        res.append(lst[i])\n    return res\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3] ",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = cmath.polar(numbers)\n    return result\n",
        "test": "assert convert(1) == (1.0, 0.0)",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors(['red', 'blue', 'yellow'], 2) == [('red', 'red'), ('red', 'blue'), ('red', 'yellow'), ('blue', 'blue'), ('blue', 'yellow'), ('yellow', 'yellow')] ",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 566,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def swap_numbers(a, b):\n    return (b, a)\n",
        "test": "assert swap_numbers(5, 8) == (8, 5) # test case 1",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1,2,3), (4,5,6)) == (4,5,6)",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef newman_prime(n):\n    '''\n    Returns the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    \n    # Start with an initial guess\n    p = 17\n    \n    # Initialize a list to hold the primes found so far\n    primes = [2, 3]\n    \n    while len(primes) < n:\n        # Check if p is prime\n        is_prime = True\n        for prime in primes:\n            if prime**2 > p:\n                # We don't need to check any more primes, since they're all smaller than p\n                break\n            if p % prime == 0:\n                is_prime = False\n                break\n        \n        # If p is prime, add it to the list\n        if is_prime:\n            primes.append(p)\n        \n        # Guess the next prime\n        p += 2\n    \n    return primes[-1]\n",
        "test": "assert newman_prime(2) == 3",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # Check if the lengths of the tuples are equal\n    if len(test_tup1) != len(test_tup2):\n        print(\"Error: Tuples are not of equal length.\")\n        return None\n    \n    # Perform division operation element-wise\n    result_tuple = tuple([round(test_tup1[i] / test_tup2[i], 2) for i in range(len(test_tup1))])\n    \n    return result_tuple\n",
        "test": "assert division_elements((2, 4, 6), (1, 2, 3)) == (2.0, 2.0, 2.0)",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])",
        "num_ids": 701,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    human_year = 7\n    dog_age = h_age * human_year\n    return dog_age\n",
        "test": "assert dog_age(1) == 7",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    sub_list = []\n    for i in range(len(S)):\n        sub_list.append(S[i])\n        if (i+1) % step == 0:\n            result.append(sub_list)\n            sub_list = []\n    if len(sub_list) > 0:\n        result.append(sub_list)\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Returns the lateral surface area of a cube with side length l.\n    \"\"\"\n    area = 6 * l * l\n    return area\n",
        "test": "assert lateralsurface_cube(1) == 6, \"Error in lateralsurface_cube for cube of side 1\"",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_Sum(n):\n    '''\n    Write a Python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_star_num(n):\n    # Initialize the list to store the star numbers\n    star_nums = []\n    # Initialize variables to keep track of the current number of stars and the current number of iterations\n    num_stars = 1\n    num_iterations = 0\n    # Loop until we have found the n'th star number\n    while len(star_nums) < n:\n        # Add the current number of stars to the list of star numbers\n        star_nums.append(num_stars)\n        # Increment the number of iterations by 1\n        num_iterations += 1\n        # Calculate the number of stars for the next iteration\n        num_stars = num_iterations * 2 - 1\n    # Return the n'th star number\n    return star_nums[n-1]\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value(\"a\") == 97 # check if the ascii value of 'a' is correct",
        "num_ids": 352,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a Python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0 # Test Case 2",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    count = 0\n    i = 2\n    while count < n:\n        sum += i ** 5\n        count += 1\n        i += 2\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0 ",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([]) == []",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples must be of equal length.\"\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] - test_tup2[i])\n        return tuple(result)\n",
        "test": "assert substract_elements((1,2,3), (4,5,6)) == (-3,-3,-3) # check with negative numbers",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    even_sum = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            even_sum += math.comb(n, i)\n    return even_sum",
        "test": "assert even_binomial_Coeff_Sum(1) == 1 # sum of even index binomial coefficients for n=1 is 1 ",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(1,2) == 2*3.14*1**2",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dict_filter(dict, n):\n    '''\n    Takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({\"a\": 10, \"b\": 5, \"c\": 15}, 10) == {\"a\": 10, \"c\": 15}",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                count += 1\n    return count\n",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == 0, \"Error: count_first_elements((1, 2, 3, 4, 5)) should return 0\" ",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # calculate decagonal number\n    decagonal_num = n * (2 * n - 1)  \n    return decagonal_num\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must be of same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]",
        "num_ids": 670,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def validate(n):\n    # convert integer to a string\n    n_str = str(n)\n    \n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # iterate through each digit in the string\n    for digit in n_str:\n        # if the digit is not already in the dictionary, add it with a frequency of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # otherwise, increment the frequency of the digit by 1\n        else:\n            freq[digit] += 1\n    \n    # iterate through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit, freq in freq.items():\n        if int(digit) < freq:\n            return False\n    \n    # if all the frequencies are less than or equal to the digit, return True\n    return True",
        "test": "assert validate(101112) == False",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item != element:\n            return False\n    return True\n",
        "test": "assert check_element([1,1,1,1,1],1) == True",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b{2}|b{3})')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('abbb') == True, \"abbb should match the pattern\"",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Repeat the given array k times\n    repeated_array = a * k\n    \n    # Calculate the maximum subarray sum using Kadane's algorithm\n    for i in range(n * k):\n        current_sum += repeated_array[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 2) == 30, \"Incorrect result for input [1, 2, 3, 4, 5], 5, 2\"",
        "num_ids": 1168,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_len = 0\n    max_list = None\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]  # correct result",
        "num_ids": 796,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    \n    # Base case\n    for i in range(n+1):\n        dp[i][0] = 0\n        \n    for j in range(k+1):\n        dp[0][j] = 1\n        \n    # Recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i-2][j-1] * (j-1)\n            \n    return dp[n][k]",
        "test": "assert count_no_of_ways(3, 2) == 3",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient\n",
        "test": "assert find(4,2) == 2",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2)\n    \n    # Return the third side\n    return hypotenuse\n",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 506,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if isinstance(val, (int, float)) and val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([-2, -1, 0, 1, 2]) == 2",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert sum_div(25) == 28, \"sum_div(25) should return 28\"",
        "num_ids": 477,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0  # test case with no inversions",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert flatten_list([1, 2, [3, 4], 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    # Create a dictionary to store the aggregate values for each student\n    aggregate = defaultdict(int)\n    \n    # Loop through the list of tuples and calculate the aggregate for each student\n    for tup in stdata:\n        student = tup[0]\n        score = tup[1]\n        aggregate[student] += score\n        \n    # Find the maximum aggregate value and return it\n    max_agg = max(aggregate.values())\n    return max_agg\n",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6)]) == 11, \"Incorrect maximum aggregate\" ",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Create a dictionary to store the count of binary sequences\n    d = {0:1, 1:1}\n    \n    # Loop through each length from 2 to 2n\n    for i in range(2, 2*n+1):\n        # Initialize the count for the current length\n        count = 0\n        \n        # Loop through each possible sum of first n bits (0 to n)\n        for j in range(n+1):\n            # Get the count of binary sequences of length i-1 with sum j and sum n-j\n            count += d.get(j, 0) * d.get(n-j, 0)\n        \n        # Update the count for the current length in the dictionary\n        d[i] = count\n    \n    # Return the count of binary sequences of length 2n\n    return d[2*n]\n",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    else:\n        return 1 + max(dict_depth(v) for v in d.values())\n",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a Python function to find element at a given index after number of rotations.\n    \"\"\"\n    n = len(arr)\n    rotations = rotations % n\n    rotated_arr = arr[-rotations:] + arr[:-rotations]\n    return rotated_arr[index]\n",
        "test": "assert find_Element([1,2,3,4,5], 0, 0, 2) == 3",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Return two words from a list of words starting with letter 'p'.\n    '''\n    # Use list comprehension to filter out words not starting with 'p'\n    p_words = [word for word in words if re.match(r'^p', word)]\n    \n    # If there are at least two words starting with 'p', return the first two\n    if len(p_words) >= 2:\n        return p_words[:2]\n    # If there are only one or zero words starting with 'p', return an empty list\n    else:\n        return []",
        "test": "assert start_withp([\"python\", \"ruby\", \"java\", \"perl\", \"c++\"]) == [\"python\", \"perl\"], \"Wrong output\"",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n\n    # Initialize a dictionary to store the maximum sum of increasing subsequence ending at each index\n    dp = {0: a[0]} \n    \n    # Iterate through the array a from index 1 to n\n    for i in range(1, n):\n        # Initialize the maximum sum as infinity\n        max_sum = float('inf')\n        \n        # Iterate through the dictionary dp from index 0 to i-1\n        for j in range(i):\n            # If the current element is greater than the element in dp and the index of the current element is less than the given kth element, update the maximum sum\n            if a[i] > a[j] and k > j:\n                max_sum = min(max_sum, dp[j])\n        \n        # If the maximum sum is infinity, that means there is no increasing subsequence from 0 to i-1 that includes the kth element.\n        # Therefore, the maximum sum of increasing subsequence from 0 to i-1 is the current element itself.\n        # Otherwise, add the current element to the maximum sum\n        if max_sum == float('inf'):\n            dp[i] = a[i]\n        else:\n            dp[i] = a[i] + max_sum\n    \n    # Return the maximum sum of increasing subsequence from 0 to n-1 and including the kth element\n    return dp[n-1]\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 4) == 6, \"Test case 4 failed\"",
        "num_ids": 1611,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n]\n",
        "test": "assert colon_tuplex((1, 2, 3), 0, 3) == (1, 2, 3)",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([10, 20, 30], [4, 5, 6], 0) == [], \"Failed for [10, 20, 30], [4, 5, 6], 0\"",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(10, 20) == 20 # test if maximum of 10 and 20 is 20",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple('') == ()",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # find the leftmost unset bit by using the bitwise AND with the complement\n    leftmost_unset_bit = n & (~n + 1)\n    # add 1 to set the leftmost unset bit\n    return n | leftmost_unset_bit\n",
        "test": "assert set_left_most_unset_bit(0b10000000) == 0b10000000  # Test for 128 (10000000) ",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone using its radius and height.\n    '''\n    return (math.pi / 3) * r ** 2 * h\n",
        "test": "assert volume_cone(0,0) == 0 ",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n    return 2 ** (power - 1)\n",
        "test": "assert highest_Power_of_2(9) == 8",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Returns the nth Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list\n",
        "test": "assert add_string([1, 2, 3], \"{}\") == ['1', '2', '3']",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function takes in three lists and converts them into a nested dictionary. The first list becomes the keys of the top-level dictionary, and the second and third lists become the keys of the nested dictionaries.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        for j in range(len(l2)):\n            if l2[j] not in d[l1[i]].keys():\n                d[l1[i]][l2[j]] = {}\n            for k in range(len(l3)):\n                if l3[k] not in d[l1[i]][l2[j]].keys():\n                    d[l1[i]][l2[j]][l3[k]] = 0\n                else:\n                    d[l1[i]][l2[j]][l3[k]] += 1\n    return d",
        "test": "assert convert_list_dictionary([1],[2],[3],[4]) == {'1': {'2': {'3': {'4': {}}}}}",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_max_sum(n):\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1  # testing with a number less than 5",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_list = []\n    max_length = 0\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[], [1], [1, 2]]) == [1, 2]",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    # Creating a set from the tuple, which automatically removes duplicates\n    new_set = set(test_tup)\n    \n    # If the length of set is same as the length of tuple, then there are no duplicates\n    if len(new_set) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1, 2, 3)) == True",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    \n    for char in str1:\n        if count[char] == 1:\n            return char\n    \n    return None\n",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char('a') == True",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]",
        "test": "assert median_numbers(1, 2, 3) == 2, \"median_numbers(1, 2, 3) should be 2\"",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result\n",
        "test": "assert sum_of_digits([1, 23, 456]) == [1, 5, 15]  # correct output",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
        "test": "assert bitwise_xor((1, 0, 0, 1), (0, 1, 1, 0)) == (1, 1, 1, 1)",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if type(item) != tuple:\n            raise TypeError(\"All elements in the list should be tuples\")\n        if len(item) != 2:\n            raise ValueError(\"All tuples in the list should have exactly two elements\")\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)\n",
        "test": "assert extract_freq([(1, 2), (2, 1), (3, 4), (1, 2)]) == 3  # should return 3 unique tuples",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        inner_tup = ()\n        for j in range(len(test_tup1[i])):\n            inner_tup += (test_tup1[i][j] + test_tup2[i][j],)\n        result += (inner_tup,)\n    return result\n",
        "test": "assert add_nested_tuples((1, (2, 3)), (4, (5, 6))) == (5, (7, 9)) ",
        "num_ids": 956,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(1, 2) == 1",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1,2,3), 2) == True",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n",
        "test": "assert find_Parity(3) == False, \"Incorrect output for input 3\"",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a string\n    str_n = str(n)\n    # Convert the string to a list of digits\n    digits = [int(d) for d in str_n]\n    # Sort the list of digits in descending order\n    digits.sort(reverse=True)\n    # Join the sorted list of digits back to a string\n    result = ''.join(str(d) for d in digits)\n    # Convert the string back to an integer\n    return int(result)\n",
        "test": "assert rearrange_bigger(3320) == 3320",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n            \n    pairs.sort()\n    \n    return pairs[:k]\n",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 0) == [] ",
        "num_ids": 1374,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    \n    return min_product\n",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 24",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    \n    return min_val\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1, \"Error: min_val([1, 2, 3, 4, 5]) should return 1\"",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.capitalize() for word in words[1:])",
        "test": "assert snake_to_camel('') == ''",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "test": "assert remove_odd([1,2,3,4,5]) == [2, 4]",
        "num_ids": 503,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [t[n] for t in list1]\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], -1) == 6 # Test case 4",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 414,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1, 2, 3], [2, 3, 4]) == True, \"Test case 1 failed\"",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max1 = max2 = -999999999999\n    for i in range(n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        else:\n            if arr[i] > max2:\n                max2 = arr[i]\n    return max1 * max2\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20 # highest product is 5 * 5 = 25 ",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples containing common first elements.\n    '''\n    \n    # Initialize an empty dictionary to store the first element of each tuple as key and the corresponding tuple as value\n    dict_ele = {}\n    \n    # Loop through each tuple in the input list\n    for tup in Input:\n        \n        # Check if the first element of the current tuple is already a key in the dictionary\n        if tup[0] in dict_ele:\n            \n            # If it is a key, append the current tuple to the value list of that key\n            dict_ele[tup[0]].append(tup)\n        \n        else:\n            \n            # If it is not a key, create a new key-value pair with the first element as key and the current tuple as value\n            dict_ele[tup[0]] = [tup]\n    \n    # Create an empty list to store the output tuples\n    output = []\n    \n    # Loop through each key-value pair in the dictionary\n    for key, val in dict_ele.items():\n        \n        # If the value list contains more than one tuple, the first element of the key is common to all tuples in the list\n        if len(val) > 1:\n            \n            # Append the first element as a tuple to the output list\n            output.append((key, val[0][1]))\n    \n    # Return the output list of common first elements and their corresponding second elements\n    return output\n",
        "test": "assert group_tuples([(1,2), (3,4), (5,6), (7,8)]) == [] # expected output []",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max(['cat', 'dog', 'elephant']) == 'elephant' ",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def round_and_sum(list1):\n    '''\n    Rounds every number in the given list and returns the sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total = sum(rounded_list)\n    return total * len(list1)\n",
        "test": "assert round_and_sum([7.2, 5.8, 3.9, 1.4]) == 19",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def cube_sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(4) == 100, \"cube_Sum(4) should be 100\"",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated = \"\"\n    for item in test_tup:\n        concatenated += item\n    return concatenated\n",
        "test": "assert concatenate_tuple(()) == \"\"",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Extracts the last character of each string in a tuple.\n\n    Args:\n        test_tuple (tuple): A tuple of strings.\n\n    Returns:\n        tuple: A tuple of the last character of each string in the original tuple.\n    \"\"\"\n    result = []\n    for s in test_tuple:\n        result.append(s[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear(('cat', 'dog', 'fox')) == ('t', 'g', 'x')",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12]], 4) == 1 ",
        "num_ids": 748,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 != 0]\n",
        "test": "assert filter_oddnumbers([1,2,3,4,5]) == [1, 3, 5]",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    match = re.match(pattern, dt)\n\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None\n",
        "test": "assert change_date_format('2022-01-01') == '01-01-2022'",
        "num_ids": 960,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([5, 3, 2, 1, 4]) == [1, 2, 3, 4, 5]",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n",
        "test": "assert and_tuples((True, True, False), (True, False, True)) == (True, False, False) # should pass",
        "num_ids": 670,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -1/a\n    return directrix\n",
        "test": "assert parabola_directrix(1, -3, 2) == -1, \"Error in finding directrix\" ",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1,2,3], [3,4,5]) == True #common element found",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the lengths of the two triangles\n    triangle1 = 0.5 * base1 * height\n    triangle2 = 0.5 * base2 * height\n    \n    # Calculate the median length of the trapezium\n    median = (triangle1 + triangle2) / 2\n    \n    return median\n",
        "test": "assert median_trapezium(1, 2, 3) == 2.125",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == True",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a[b]+\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"ab\") == True",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last_Digit(n):\n    '''\n    Write a Python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(10) == 0, \"Error in last_Digit\"",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1,2,3,-4,-5]) == [-4,-5]",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i%2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"Hello World\") == \"HloWrd\"",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]) or (test_list[i][1] == test_list[j][0] and test_list[i][0] == test_list[j][1]):\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == 0",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = ''\n    for i in L:\n        num += str(i)\n    return int(num)\n",
        "test": "assert multiple_to_single([1,2,3,4,5]) == 12345",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(?:about|across|after|along|around|before|behind|below|beneath|beside|between|beyond|but|by|despite|down|during|except|for|from|in|inside|into|like|near|of|off|on|onto|out|outside|over|past|since|through|throughout|till|to|towards|under|underneath|until|up|upon|with|within|without)\\b'\n    # Use the finditer() method to find all matches in the text and return their positions\n    matches = list(re.finditer(pattern, text.lower()))\n    if matches:\n        first_match = matches[0]\n        return first_match.group(), first_match.start()\n    else:\n        return None, None\n",
        "test": "assert find_adverb_position(\"The bus drove quickly through the mountainous roads.\") == [(2, 'quickly')]",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area\n",
        "test": "assert surfacearea_cube(2) == 24",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / total_count\n",
        "test": "assert positive_count([-1, -2, -3, -4, -5]) == 0",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_neg(list1):\n    largest_neg = None\n    for num in list1:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    return largest_neg\n",
        "test": "assert largest_neg([-1, 0, 1]) == -1",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        result.append(t[:K])\n    return result\n",
        "test": "assert trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8)], 2) == [(1, 2), (5, 6)]",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for i in lst:\n        if i in count:\n            result[i] = count[i]\n    return result\n",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5), [1, 2, 3]) == Counter({1: 1, 2: 1, 3: 1})",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube = num ** 3\n        cube_list.append(cube)\n    return cube_list",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_num = [1, 1]\n    for i in range(2, n):\n        perrin_num.append(perrin_num[i-1] + perrin_num[i-2])\n    return sum(perrin_num[:n])\n",
        "test": "assert cal_sum(2) == 2",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_string(str_list, l):\n    '''\n    Extract specified size of strings from a given list of string values.\n    \n    Parameters:\n    str_list (list): A list of strings.\n    l (int): The length of the strings to be extracted.\n    \n    Returns:\n    A list of strings of the specified length.\n    \n    Example:\n    >>> extract_string(['hello', 'world', 'python'], 2)\n    ['he', 'wo', 'py']\n    '''\n    result = []\n    for string in str_list:\n        if len(string) >= l:\n            result.append(string[:l])\n    return result\n",
        "test": "assert extract_string([], 0) == []",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Calculates the loss amount on a sale, if any.\n    \n    Parameters:\n    actual_cost (float): the actual cost of the item\n    sale_amount (float): the amount received for the item\n    \n    Returns:\n    float: the loss amount, if any, otherwise 0.0\n    '''\n    \n    if sale_amount < actual_cost:\n        # There is a loss\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        # There is no loss\n        return 0.0\n",
        "test": "assert loss_amount(100,100) == 0 # sale amount is equal to actual cost",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a Python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n\nprint(sumofFactors(20)) # Output: 60 (even factors of 20 are 2 and 10, and their sum is 12)\n",
        "test": "assert sumofFactors(1) == 0 # 1 has no even factors",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches\n",
        "test": "assert text_match_wordz(\"There are no words containing 'z' in this text\") == None # Should return None",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for s in stringlist:\n        new_list.append(s[::-1])\n    return new_list\n",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def Find_Min(lst):\n    # Initialize variables\n    min_len = len(lst)\n    min_sublist = []\n    \n    # Loop through all possible sublists\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    \n    return min_sublist\n",
        "test": "assert Find_Min([1,2,3,4,5,6]) == [1] ",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert rectangle_area(5, 10) == 50, \"rectangle_area(5, 10) should return 50\"",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regex to remove all uppercase substrings\n    return re.sub(r'[A-Z]+', '', str1)",
        "test": "assert remove_uppercase(\"HELLO\") == \"\"",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7] ",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Count the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2 # returns 2",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def combinations_list(lst):\n    '''\n    Returns a list of all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(lst)+1):\n        for j in range(len(lst)):\n            if j+i <= len(lst):\n                result.append(lst[j:j+i])\n    return result\n",
        "test": "assert combinations_list([]) == []",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_subarray_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n",
        "test": "assert max_subarray_product([1, 1, 1, 1, 1]) == 1",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_list = list(dict.values())\n    if len(set(value_list)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_value({'a':1, 'b':1, 'c':1}, 1) == True",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # create an empty dictionary\n    new_dict = {}\n    # iterate over the items in the original dictionary\n    for key, value in dict1.items():\n        # check if the value is not empty\n        if value:\n            # add the key-value pair to the new dictionary\n            new_dict[key] = value\n    # return the new dictionary\n    return new_dict\n",
        "test": "assert drop_empty({}) == {}  # empty dictionary",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_product(arr):\n    arr.sort(reverse=True)\n    result = arr[0]\n    if arr[1] < 0:\n        result *= arr[1]\n        result *= arr[2]\n    else:\n        result *= arr[1]\n        for i in range(2, len(arr)):\n            result *= arr[i]\n    return result\n",
        "test": "assert max_product([1, 2, 3, 4]) == 24",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result\n",
        "test": "assert add_pairwise((1, 2)) == (3,)",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3], 10) == 6",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # Sort the list in ascending order\n    l.sort()\n    \n    # Loop through the list and check if the difference between two adjacent elements is equal to 1 or not\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    \n    # If the loop completes successfully, then all elements are consecutive\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3]) == True",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                intersection.append(tup1)\n    return intersection\n",
        "test": "assert tuple_intersection([(1, 2, 3), (2, 3, 4), (3, 4, 5)], [(3, 4, 5), (4, 5, 6), (5, 6, 7)]) == [(3, 4, 5)]",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char == ch:\n            result += newch\n        else:\n            result += char\n    return result\n",
        "test": "assert replace_char(\"hello world\", \"z\", \"Z\") == \"hello world\"",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the input dictionary\n    counter = Counter(dict1)\n    # sort the Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # return a dictionary with the same keys as the input dictionary but sorted by value\n    return {k: v for k, v in sorted_counter}\n",
        "test": "assert sort_counter({'a': 2, 'b': 1, 'c': 3}) == Counter({'c': 3, 'a': 2, 'b': 1}) ",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    min_val = min(nums)\n    max_val = max(nums)\n    return min_val + max_val\n",
        "test": "assert big_sum([-1,0,1]) == 0 ",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"Hello world\") == \"hello world\"",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result",
        "test": "assert remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def first_digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n = n // 10\n    return n\n",
        "test": "assert first_Digit(101) == 1",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_lst = []\n    for num in lst:\n        if num % 2 != 0:\n            odd_lst.append(num)\n    return odd_lst\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5] ",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def difference(n):\n    sum_cubes = 0\n    sum_natural = 0\n    \n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    \n    return sum_cubes - sum_natural\n",
        "test": "assert difference(0) == 0, \"difference(0) failed\"",
        "num_ids": 576,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Odd_Pair(A, N):\n    pairs = []\n    for i in range(N):\n        for j in range(i+1, N):\n            pairs.append(A[i] ^ A[j])\n    \n    count = 0\n    for pair in pairs:\n        if pair % 2 != 0:\n            count += 1\n    \n    return count\n",
        "test": "assert find_Odd_Pair([1, 1, 1, 1, 1, 1], 6) == 0",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n",
        "test": "assert toggle_string('Hello World') == 'hELLO wORLD' ",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert integers to strings to work with digits as lists\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # Get the length of the longer number\n    max_len = max(len(n1_str), len(n2_str))\n    # Fill the shorter number with zeros to match the length of the longer number\n    n1_str = n1_str.zfill(max_len)\n    n2_str = n2_str.zfill(max_len)\n    # Calculate the sum of per-digit differences\n    total = 0\n    for i in range(max_len):\n        diff = abs(int(n1_str[i]) - int(n2_str[i]))\n        total += diff\n    # Return the total\n    return total\n",
        "test": "assert digit_distance_nums(0, 0) == 0, \"digit_distance_nums(0, 0) should return 0\" ",
        "num_ids": 985,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15, \"Incorrect result for [1, 2, 3, 4, 5]\"",
        "num_ids": 898,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a tuple containing the union of elements of the two input tuples.\n    \"\"\"\n    # Combine the two tuples and convert it to a set\n    combined_set = set(test_tup1 + test_tup2)\n\n    # Convert the set back to a tuple and sort it in ascending order\n    sorted_tuple = tuple(sorted(combined_set))\n\n    return sorted_tuple\n",
        "test": "assert union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)",
        "num_ids": 767,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expression to find all substrings between quotation marks\n    values = re.findall(r'\\\"(.+?)\\\"', text)\n    return values\n",
        "test": "assert extract_values(\"hello\") == []",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4,5,6], 6) == 15, \"count_Pairs([1,2,3,4,5,6], 6) should be 15\"",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def split(word):\n    return list(word)\n",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert empty_list(5) == [ {}, {}, {}, {}, {} ] ",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"orange\"], [\"cat\", \"dog\", \"elephant\"]]) == [[\"apple\", \"banana\", \"orange\"], [\"cat\", \"dog\", \"elephant\"]]",
        "num_ids": 815,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for i in nums:\n        if i not in result:\n            result.append(i)\n    return result\n",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5, 6, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1,2,3,4,5]) == 120, \"The product of unique numbers should be 120\"",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14*r*h + 2*3.14*r**2\n    return area",
        "test": "assert surfacearea_cylinder(1, 1) == 12.56637061435917  # correct value for surface area of cylinder with radius 1 and height 1",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3], [2,3]) == True",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit in the factorial of n.\n    \"\"\"\n    # Initialize a variable to store the factorial value\n    factorial = 1\n\n    # Loop through all the numbers from 1 to n and calculate the factorial\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Return the last digit of the factorial\n    return factorial % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 919,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            result.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            result.append(i)\n    return result\n",
        "test": "assert find_dissimilar((1, 2, 3, 4), (4, 3, 2, 1)) == ()",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            result.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                result.append(item)\n    return tuple(result)\n",
        "test": "assert even_ele((1,3,5,7), lambda x: x%2==0) == ()",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base_area = b**2\n    slant_height = (b**2 + s**2)**0.5\n    surface_area = base_area + 2 * (base_area / 2)\n    return surface_area\n",
        "test": "assert surface_Area(2, 3) == 18  # expected output 18 ",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        c = 0\n        for i in range(n):\n            c += catalan_number(i) * catalan_number(n-i-1)\n        return c\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Define a regular expression pattern for an adverb ending with ly\n    pattern = r\"\\b\\w+ly\\b\"\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # If there are no matches, return None\n    if not matches:\n        return None\n    # Find the position of the first match using its starting index\n    position = text.find(matches[0])\n    # Return the first match and its position as a tuple\n    return (matches[0], position)\n",
        "test": "assert find_adverbs(\"The cat jumped happily.\") == ([\"happily\"], [11]) # Checks if the function returns the correct adverb and its position in the string. ",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    # Create a heap with the first n items\n    heap = []\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n        \n    # Iterate through the remaining items and replace items in the heap if the current item is more expensive\n    for item in items[n:]:\n        if item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    \n    # Return the n most expensive items from the heap\n    return sorted(heap, reverse=True)\n",
        "test": "assert expensive_items([(1, 10), (2, 20), (3, 30), (4, 40), (5, 50)], 3) == [(5, 50), (4, 40), (3, 30)]",
        "num_ids": 1040,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def split_Arr(l, n):\n    return l[n:] + l[:n]\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_diff(nums):\n    '''\n    Find the difference between the largest and smallest values in a given list.\n    '''\n    \n    # Initialize variables to hold the minimum and maximum values\n    min_val = nums[0]\n    max_val = nums[0]\n    \n    # Iterate over the list and update the minimum and maximum values\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    # Return the difference between the maximum and minimum values\n    return max_val - min_val\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 622,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for i in range(a, b+1):\n        if int(i**0.5)**2 == i:\n            squares.append(i)\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 607,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(r, theta)\n",
        "test": "assert polar_rect(0,0) == 0",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n\n    C = [0] * (k + 1)\n    C[0] = 1\n\n    for i in range(1, n + 1):\n        j = min(i, k)\n        while j > 0:\n            C[j] = C[j] + C[j - 1]\n            j -= 1\n\n    return C[k]",
        "test": "assert binomial_Coeff(1,1) == 1 ",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # use regular expression to match zero or more digits followed by a period and then another zero or more digits\n    pattern = r'0+(\\.)0+(\\.)0+(\\.)0+(\\.)'\n    # replace the pattern with a period and then the same digit\n    new_ip = re.sub(pattern, r'\\1\\2\\3\\4', ip)\n    # return the new ip address with leading zeroes removed\n    return new_ip\n",
        "test": "assert removezero_ip('255.255.255.255') == '255.255.255.255'",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    # Iterate through the list and find the first even and odd numbers\n    for num in list1:\n        if even_num is None and num % 2 == 0:\n            even_num = num\n        if odd_num is None and num % 2 != 0:\n            odd_num = num\n        \n        # If both even and odd numbers are found, break out of the loop\n        if even_num is not None and odd_num is not None:\n            break\n    \n    # Return the difference between the first even and odd numbers\n    if even_num is not None and odd_num is not None:\n        return even_num - odd_num\n    else:\n        return None\n",
        "test": "assert diff_even_odd([1, 3, 5, 7, 9, 11]) == None, \"Test case failed\"",
        "num_ids": 985,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Returns the minimum number of swaps required to convert one binary number\n    represented as a string to another.\n\n    :param str1: A binary number represented as a string.\n    :param str2: Another binary number represented as a string.\n    :return: The minimum number of swaps required.\n    \"\"\"\n\n    # Convert the binary numbers to lists of 0s and 1s.\n    binary1 = list(str1)\n    binary2 = list(str2)\n\n    # Initialize variables to keep track of the number of swaps required.\n    swap_count = 0\n    zero_count = 0\n    one_count = 0\n\n    # Loop through the lists of 0s and 1s and compare them.\n    for i in range(len(binary1)):\n        if binary1[i] != binary2[i]:\n            swap_count += 1\n            if binary1[i] == '1':\n                zero_count += 1\n            else:\n                one_count += 1\n\n    # If the number of swaps is odd, we can't make it work.\n    if swap_count % 2 != 0:\n        return -1\n\n    # Calculate the minimum number of swaps required.\n    min_swaps = min(zero_count, one_count)\n\n    return min_swaps\n",
        "test": "assert min_Swaps(\"1010\",\"0101\") == 2, \"Incorrect output\"",
        "num_ids": 1367,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        for item in t:\n            total_size += sys.getsizeof(item)\n        total_size += sys.getsizeof(t)\n    return total_size\n",
        "test": "assert tuple_size([()]) == sys.getsizeof(())",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return min(arr1[i], arr2[j])\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return min(arr1[i], arr2[j])\n            k -= 1\n            j += 1\n    while i < len(arr1):\n        if k == 1:\n            return arr1[i]\n        k -= 1\n        i += 1\n    while j < len(arr2):\n        if k == 1:\n            return arr2[j]\n        k -= 1\n        j += 1\n",
        "test": "assert find_kth([1,3,5], [2,4,6], 6) == 6 # 6th element",
        "num_ids": 1147,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def armstrong_number(number):\n    # initialize sum of cubes of digits as 0\n    sum = 0\n    # calculate the number of digits in the given number\n    order = len(str(number))\n    # extract each digit of the number and cube it\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n    # check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False ",
        "test": "assert armstrong_number(371) == True",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables for sum and count\n    sum = 0\n    count = 0\n    \n    # loop through the numbers and add each number to the sum and count\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    \n    # calculate the average and return the sum and average as a tuple\n    average = sum / count\n    return sum, average\n",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True",
        "num_ids": 310,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n",
        "test": "assert first_repeated_char('abc') == None",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_lucid(num):\n        '''\n        Check if a number is lucid or not.\n        '''\n        num_str = str(num)\n        return all(num_str[i] != num_str[i+1] for i in range(len(num_str)-1))\n\n    lucid_nums = [num for num in range(1, n+1) if is_lucid(num)]\n    return lucid_nums\n",
        "test": "assert get_ludic(0) == []",
        "num_ids": 1253,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_words(s):\n    # Split the string by spaces\n    words = s.split()\n    # Reverse the order of the words\n    words.reverse()\n    # Join the words with a space\n    return \" \".join(words)\n",
        "test": "assert reverse_words('hello world') == 'world hello'",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:  # 0 and 1 are not prime\n        return False\n    \n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    \n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians\n",
        "test": "assert radian_degree(0) == 0 ",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern.\n    The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals('hello world', '[a-z]+') == ('hello', 0, 5)  # test case 2",
        "num_ids": 778,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j]*bell[i-j-1]\n    return bell[n]\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements,\n    but the k'th element removed.\n    \"\"\"\n    # If the kth element is out of range, return the original list\n    if L >= len(list1):\n        return list1\n    # Remove the kth element from the list and return it\n    list1.pop(L)\n    return list1\n",
        "test": "assert remove_kth_element([10, 20, 30, 40, 50], 0) == [20, 30, 40, 50]",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Get the nth column from each row in the matrix\n    nth_col = [row[N-1] for row in test_list]\n    # Return the maximum value in the nth column\n    return max(nth_col)\n",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first element of each sublist\n    and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    result = []\n    for i in test_list:\n        cum_sum += i[1]\n        result.append(cum_sum)\n    return result\n",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [2.0, 5.0, 8.0]",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_result = []\n    for i in range(len(test_tup1)):\n        mod_result.append(test_tup1[i] % test_tup2[i])\n    return tuple(mod_result)\n",
        "test": "assert tuple_modulo((2, 4, 8), (3, 5, 7)) == (2, 4, 1)",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if steps == d or d == 0:\n        return 0\n    elif steps < d:\n        return -1\n    \n    jumps = 0\n    jump_dist = d\n    while jump_dist <= steps:\n        jumps += 1\n        jump_dist += d\n        \n    return jumps\n",
        "test": "assert min_Jumps(10, 5) == 2",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1, 2, 3], [4, 5, 6]) == [0.25, 0.4, 0.5]",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    no_nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            no_nums.append(char)\n    return ''.join(no_nums) + ''.join(nums)\n",
        "test": "assert move_num('12345') == '12345'",
        "num_ids": 695,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def largest_subset(a):\n    if not a:\n        return 0\n    n = len(a)\n    # initialize a dp array to store the size of the largest subset\n    dp = [1] * n\n    # iterate over the list of numbers from left to right\n    for i in range(1, n):\n        # iterate over the previous numbers from right to left\n        for j in range(i-1, -1, -1):\n            # if the current number and the previous number are divisible, update the dp array\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    # return the size of the largest subset found\n    return max(dp)\n",
        "test": "assert largest_subset([1,2,3,4,5,6]) == 3",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2 == 0:\n        return (arr1[n//2-1] + arr2[n//2-1])/2\n    else:\n        return (arr1[n//2] + arr2[n//2])/2\n",
        "test": "assert get_median([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5) == 3",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    powers = []\n    for num in nums:\n        powers.append(num ** n)\n    return powers\n",
        "test": "assert nth_nums([2, 3, 4], 2) == [4, 9, 16]",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"HELLO WORLD\") == \"HELLO WORLD\"",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1], \"Incorrect output\"",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the radius of the incircle\n    in_radius = r / (1 + 2 ** 0.5)\n\n    # calculate the area of the incircle\n    in_area = 0.25 * 3.14159 * in_radius ** 2\n\n    # calculate the area of the semicircle\n    semicircle_area = 0.5 * 3.14159 * r ** 2\n\n    # calculate the area of the largest triangle\n    triangle_area = semicircle_area - in_area\n\n    return triangle_area\n",
        "test": "assert triangle_area(4) == 8.464225742425",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if i != array[i]:\n            return i\n    \n    return end\n",
        "test": "assert find_First_Missing([0,1,2,3,4,5,6,7,8,9]) == 10",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 628,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in lst:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n",
        "test": "assert Split([1, \"2\", 3, \"4\", 5]) == [2, 4] # should convert \"2\" and \"4\" to integers before checking if they are even",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub:\n        adj = [coord for coord in adj if coord in sub]\n    return adj\n",
        "test": "assert adjac((3, 3)) == [(2, 2)]",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(' ', '_').replace('_', ' ')\n",
        "test": "assert replace_spaces(\"Hello_World!\") == \"Hello World!\" # check for underscores to spaces",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_list = []\n    non_zero_list = []\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n    return non_zero_list + zero_list\n",
        "test": "assert move_zero([1, 0, 2, 0, 3, 0]) == [1, 2, 3, 0, 0, 0]",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pair_xor_Sum(arr,n):\n    # Initialize the sum of xor of all pairs as 0\n    xor_sum = 0\n\n    # Loop through each element of the array\n    for i in range(n):\n        # XOR the current element with all the remaining elements of the array\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    # Return the sum of xor of all pairs of numbers in the array\n    return xor_sum\n",
        "test": "assert pair_xor_Sum([], 0) == 0",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list\n",
        "test": "assert heap_sort([]) == []",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) # should return True",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef wind_chill(v,t):\n    wc = 13.12 + 0.6215 * t - 11.37 * v**0.16 + 0.3965 * t * v**0.16\n    return round(wc)\n",
        "test": "assert wind_chill(40, 20) == 19 ",
        "num_ids": 768,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['alice', 'bOB', 'Carol', 'david', 'EVE']) == 8",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)\n",
        "test": "assert remove_parenthesis(\"Hello (world)\") == \"Hello \"",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = n * (2 * n - 1)\n    return num",
        "test": "assert is_nonagonal(1) == 1 ",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle('hello world') == False",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function reverses an array up to a given position.\n    \"\"\"\n    n = len(input)\n    if k > n:\n        k = n\n    left = 0\n    right = k - 1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 3) == [3,2,1,4,5]",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    # Create an empty tuple\n    new_tuple = ()\n    \n    # Loop through the items in the original tuple\n    for item in test_tup:\n        # Add each item to the new tuple\n        new_tuple += (item,)\n    \n    # Add the dictionary to the new tuple\n    new_tuple += (test_dict,)\n    \n    # Return the new tuple\n    return new_tuple\n",
        "test": "assert add_dict_to_tuple((), {}) == ((), {})",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    # Initialize DP table with -1 to indicate that no path has been found yet\n    dp = [[-1 for _ in range(N)] for _ in range(N)]\n    # Compute the maximum average for the last row and last column\n    max_avg = 0\n    for i in range(N):\n        max_avg = max(max_avg, sum(cost[N-1][:i+1])/(i+1))\n        max_avg = max(max_avg, sum(cost[:,N-1][:i+1])/(i+1))\n    # Fill the DP table using dynamic programming\n    for i in range(N):\n        for j in range(N):\n            if i == 0 or j == 0:\n                dp[i][j] = sum(cost[:i+1,:j+1])/(i+j+1)\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                if i > 1 and j > 1:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j-1]+cost[i][j])\n    return max_avg\n",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18]]) == 13.0",
        "num_ids": 1487,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n",
        "test": "assert filter_data({'Alice': (160, 40), 'Bob': (170, 60), 'Charlie': (150, 50)}, 160, 50) == {'Bob': (170, 60)} ",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    \n    return count",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 1]) == 2",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power_base_sum(base, power):\n    # Convert the base to a string so we can iterate over its digits\n    base_str = str(base)\n\n    # Initialize a variable to hold the sum of the digits to the power\n    total_sum = 0\n\n    # Iterate over the digits of the base string\n    for digit in base_str:\n        # Convert the digit back to an integer and add it to the total_sum raised to the power\n        total_sum += int(digit) ** power\n\n    # Return the final sum\n    return total_sum\n",
        "test": "assert power_base_sum(9, 1) == 9",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    matches = re.findall(r'\"(.*?)\"', text1)\n    return matches\n",
        "test": "assert extract_quotation(\"The quick brown fox jumps over the lazy dog\") == []",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i]*test_tup[i+1])\n    return tuple(result_tup)\n",
        "test": "assert multiply_elements((5,1,2,3,4)) == (5,2,6,12)",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9] # test case 1",
        "num_ids": 748,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        first = True\n        for x in g:\n            if first:\n                result.append(x)\n                first = False\n    return result\n",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * h\n    return lateral_area\n",
        "test": "assert lateralsurface_cone(1,1) == 3.141592653589793, \"Incorrect value for lateralsurface_cone with r=1 and h=1\"",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r\"[.,\\s]\"\n    text = re.sub(pattern, \":\", text)\n    return text\n",
        "test": "assert replace_specialchar('hello world') == 'hello:world'",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    # Initialize variables to store the first and last index of the array\n    first = 0\n    last = len(A) - 1\n    \n    # Perform binary search to find the first occurrence of the given number\n    while first <= last:\n        mid = (first + last) // 2\n        \n        # If the middle element is equal to the given number, search the left side of the array for the first occurrence\n        if A[mid] == x:\n            # If the previous element is less than the given number, then the current index is the first occurrence\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            \n            # If the previous element is equal to the given number, search the left side of the array for the first occurrence\n            else:\n                last = mid - 1\n        \n        # If the middle element is less than the given number, search the right side of the array\n        elif A[mid] < x:\n            first = mid + 1\n        \n        # If the middle element is greater than the given number, search the left side of the array\n        else:\n            last = mid - 1\n    \n    # If the given number is not found in the array, return -1\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 3, 4, 4, 4], 4) == 4 # returns 4",
        "num_ids": 1202,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9+7\n    res = 0\n    \n    for i in range(n):\n        temp = 1\n        for j in range(i, n):\n            temp *= arr[j]\n            res = (res + temp) % mod\n    \n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([1]) == 1 ",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def set_middle_bits(n):\n    # Initialize a variable to store the toggled number\n    toggled_num = 0\n    # Loop through all the bits of the number\n    for i in range(1, len(bin(n)[2:])-1):\n        # If the bit is 1, toggle it to 0 and vice versa\n        if n & (1 << i):\n            toggled_num &= ~(1 << i)\n        else:\n            toggled_num |= (1 << i)\n    # Return the toggled number\n    return toggled_num\n",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0 or a[index-1] != x:\n        return index\n    else:\n        return index - 1\n",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 2) == 1",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('Apple') == True",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/(1-n) + geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef find_index(n):\n    # Calculate the number of triangular numbers that have n digits\n    num_triangular_numbers = math.floor(n * (n + 1) / 2)\n    \n    # Calculate the first triangular number with n digits\n    first_triangular_number = math.floor(0.5 * n * (n + 1))\n    \n    # Calculate the index of the first triangular number with n digits\n    index = math.floor(0.5 * n * (n + 1))\n    \n    # Return the index\n    return index\n",
        "test": "assert find_Index(5) == 204 # 2458 is the first triangular number with 5 digits",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        if i+1 < len(test_tup):\n            result_dict[test_tup[i]] = test_tup[i+1]\n        else:\n            result_dict[test_tup[i]] = None\n    return result_dict\n",
        "test": "assert tuple_to_dict((1,2,3,4,5,6)) == {1:2, 3:4, 5:6}",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all(s[0] == c for c in s)\n",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    # calculate the height of the tetrahedron\n    height = (2 / 3) * side\n    \n    # calculate the area of the base of the tetrahedron\n    base_area = math.sqrt(3) / 4 * (side ** 2)\n    \n    # calculate the area of the tetrahedron\n    tetrahedron_area = 0.5 * base_area * height\n    \n    return tetrahedron_area",
        "test": "assert area_tetrahedron(15) == 24.0",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and a number m as input.\n    It rotates the list to the right by m positions.\n    \"\"\"\n    n = len(lst)\n    if m % n == 0:\n        return lst\n    else:\n        return lst[-m%n:] + lst[:-m%n]",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 824,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1,2,3)) == False",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 21,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all([num % digit == 0 for digit in digits]):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(300, 400) == [315, 324, 333, 342, 351, 360]",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a/360) * math.pi\n",
        "test": "assert sector_area(2, 90) == math.pi",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Returns the length of the longest common subsequence for the given three string sequences.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Create a table to store lengths of longest common suffixes of substrings\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Compute lengths of longest common suffixes of substrings X[0...i-1] and Y[0...j-1]\n    for i in range(m+1):\n        for j in range(n+1):\n            if (i == 0 or j == 0):\n                L[i][j] = 0\n            elif (X[i-1] == Y[j-1]):\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Compute lengths of longest common suffixes of substrings X[0...i-1] and Z[0...k-1]\n    for i in range(m+1):\n        for k in range(o+1):\n            if (i == 0 or k == 0):\n                L[i][k] = 0\n            elif (X[i-1] == Z[k-1]):\n                L[i][k] = L[i-1][k-1] + 1\n            else:\n                L[i][k] = max(L[i-1][k], L[i][k-1])\n\n    # Compute length of longest common subsequence of X and Z\n    lcs_length = 0\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j], L[i][j-1]), L[i][k])\n                lcs_length = max(lcs_length, L[i][j][k])\n\n    return lcs_length\n",
        "test": "assert lcs_of_three(\"ABCDEFGH\", \"XZYWVTSR\", \"QPTSGHUA\") == \"GH\"",
        "num_ids": 1628,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'([A-Z][a-z]+)')\n    return pattern.sub(r' \\1', str1)\n",
        "test": "assert capital_words_spaces(\"IWillSucceed\") == \"I Will Succeed\"",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)\n",
        "test": "assert sort_numeric_strings([\"123\", \"456\", \"789\"]) == [\"123\", \"456\", \"789\"]",
        "num_ids": 892,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Adds a tuple to a list. If the tuple is already in the list, it does not add it again.\n    '''\n    if test_tup not in test_list:\n        test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, (4, 5)]",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_min_heap_helper(arr, i):\n    # Check if the left child is smaller than the parent or the right child\n    if (i*2+1) < len(arr) and arr[i] > arr[2*i+1]:\n        return False\n    \n    # Check if the right child is smaller than the parent\n    if (i*2+2) < len(arr) and arr[i] > arr[2*i+2]:\n        return False\n    \n    # Check if the left child is a min heap\n    if (2*i+1) < len(arr):\n        if not check_min_heap_helper(arr, 2*i+1):\n            return False\n    \n    # Check if the right child is a min heap\n    if (2*i+2) < len(arr):\n        if not check_min_heap_helper(arr, 2*i+2):\n            return False\n    \n    # If all checks pass, return True\n    return True\n\n\ndef check_min_heap(arr):\n    # Check if the root is a min heap\n    if not check_min_heap_helper(arr, 0):\n        return False\n    \n    # If the root is a min heap, check if the entire array is a min heap\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i//2]:\n            return False\n    \n    # If all checks pass, return True\n    return True\n",
        "test": "assert check_min_heap_helper([4, 10, 3, 5, 1], 1) == False",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_list = [0, 1]\n        for i in range(2, n+1):\n            jacobsthal_list.append(jacobsthal_list[i-1] + 2*jacobsthal_list[i-2])\n        return jacobsthal_list[n]\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Return the first K elements of the sorted list\n    return sorted_list[:K]\n",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)], 3) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 1146,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5]) == [] ",
        "num_ids": 1046,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = min(numbers)\n        numbers.remove(smallest)\n        second_smallest = min(numbers)\n        return second_smallest\n",
        "test": "assert second_smallest([1,2,3,4,5]) == 2 # should return 2 as the second smallest number",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one('abc') == True",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n                \n    return count",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for sublist in list1:\n        tup = tuple(sublist)\n        if tup in counts:\n            counts[tup] += 1\n        else:\n            counts[tup] = 1\n    return counts\n",
        "test": "assert unique_sublists([[1,2],[2,3],[1,2],[3,4],[2,3]]) == {(1, 2): 2, (2, 3): 2, (1, 2): 2, (3, 4): 1, (2, 3): 2}",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if len(num.split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal('3.14') == True",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1, 2, 3, 4, 5]) == False, \"Failed for [1, 2, 3, 4, 5]\"",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(2) == False",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(2, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1 ",
        "num_ids": 766,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"12345\") == 5, \"Failed test case\"",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    polite = []\n    c = 1\n    i = 1\n    while len(polite) < n:\n        if c == 1:\n            polite.append(1)\n            i += 1\n            c = 2\n        else:\n            t = int(math.factorial(c))\n            polite.append(t)\n            i += 1\n            c += 1\n    return polite[n-1]\n",
        "test": "assert is_polite(1) == 1",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1,2,3,4]) == [(1,2),(2,3),(3,4)] # should return [(1,2),(2,3),(3,4)]",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1,2,3,4,5,6], 0) == 0",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([1, 2, 3], [1, 2]) == [3]",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 # expected output: 1",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    return len(stack) == 0\n",
        "test": "assert check_expression(\"()\") == True",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words using whitespace as the delimiter\n    words = test_str.split()\n    # Create an empty list to store the words with length less than k\n    filtered_words = []\n    # Loop through the words and append the ones with length less than k\n    for word in words:\n        if len(word) < K:\n            filtered_words.append(word)\n    # Join the filtered words using whitespace as the delimiter and return the result\n    return ' '.join(filtered_words)\n",
        "test": "assert remove_length(\"\", 0) == \"\"",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end()))\n    if positions:\n        return positions\n    else:\n        return None\n",
        "test": "assert occurance_substring(\"abcabcd\", \"xyz\") == None ",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 != 1:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 3, 5, 7]) == True, \"Incorrect output for odd_position([1, 3, 5, 7])\"",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"\") == 0",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    return sum(set(arr))\n",
        "test": "assert find_sum([1,2,3,4,5]) == 15 # expected output: 15 (all elements are unique)",
        "num_ids": 738,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert each list to tuple and count its occurrence\n    count_dict = {}\n    for sublist in list1:\n        tup = tuple(sublist)\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    \n    return count_dict\n",
        "test": "assert unique_sublists([[1, 2, 3], [2, 3, 4], [1, 2, 3]]) == {(1, 2, 3): 2, (2, 3, 4): 1} ",
        "num_ids": 1016,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    result = []\n    \n    # iterate through all possible combinations of tuples\n    for comb in combinations(test_list, len(test_list)):\n        # calculate the sum of the current combination of tuples\n        sum_comb = sum([sum(tpl) for tpl in comb])\n        \n        # if the sum is equal to the target sum, add the combination to the result\n        if sum_comb == target_sum:\n            result.append(comb)\n            \n    return result\n",
        "test": "assert find_combinations([(2, 4, 3), (5, 1, 1), (4, 3)]) == [(2, 4, 3), (5, 1, 1), (4, 3)]",
        "num_ids": 1086,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef count_divisors(n):\n    # initialize count of divisors\n    count = 0\n    \n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if i divides n\n        if n % i == 0:\n            # if so, increment count of divisors\n            count += 1\n    \n    # check if count of divisors is even or odd\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert count_divisors(12) == True",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum_odd = 0\n    for i in range(n):\n        for j in range(i, n):\n            # checking if the length of the subarray is odd\n            if (j-i+1) % 2 != 0:\n                # adding the sum of the subarray to the total sum\n                sum_odd += sum(arr[i:j+1])\n    return sum_odd\n",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # Convert RGB values to range 0 to 1\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # Find the maximum and minimum values of r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate the difference between max and min values\n    diff = max_val - min_val\n    \n    # Check if the maximum value is zero\n    if max_val == 0:\n        h = 0\n    else:\n        if r == max_val:\n            h = (g - b) / diff\n        elif g == max_val:\n            h = 2 + (b - r) / diff\n        else:\n            h = 4 + (r - g) / diff\n        h = h * 60\n        \n    # Calculate the saturation\n    if max_val == 0:\n        s = 0\n    else:\n        s = diff / max_val\n    \n    # Calculate the value\n    v = max_val\n    \n    # Convert h, s, v values to range 0 to 1\n    h = h / 360.0\n    s = s\n    v = v\n    \n    # Return the hsv color as a tuple\n    return (h, s, v)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2 != 0:\n            odd_num = num\n            break\n    \n    return even_num * odd_num\n",
        "test": "assert mul_even_odd([2, 4, 6]) == 8, \"Test 4\"",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def tuple_str_int(test_str):\n    '''\n    This function takes a string representation of a tuple of integers as input and returns the tuple of integers.\n    \n    Example:\n    >>> tuple_str_int(\"(1, 2, 3)\")\n    (1, 2, 3)\n    '''\n    # Remove parenthesis and split the string into a list of strings\n    lst = test_str[1:-1].split(\", \")\n    # Convert each element of the list to an integer and return as a tuple\n    return tuple(int(x) for x in lst)\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3) ",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\n",
        "test": "assert right_insertion([1,2,3,4,5], 3) == 3",
        "num_ids": 607,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b){3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"a\") == False",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def new_tuple(test_list, test_str):\n    # Create a new list that concatenates the list and string\n    new_list = test_list + list(test_str)\n    # Convert the new list to a tuple\n    new_tuple = tuple(new_list)\n    # Return the new tuple\n    return new_tuple\n",
        "test": "assert new_tuple(['a', 'b', 'c'], 'd') == ('a', 'b', 'c', 'd')",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8]) == True",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Initialize an empty list to hold non-tuple elements\n    result = []\n    # Loop through the elements of the tuple\n    for item in test_tup:\n        # If the item is not a tuple, add it to the result list\n        if not isinstance(item, tuple):\n            result.append(item)\n        # If the item is a tuple, recursively call the function on it\n        else:\n            result.extend(remove_nested(item))\n    # Return the result list as a tuple\n    return tuple(result)\n",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 3",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of x in arr if it is present, else returns -1.\n    \"\"\"\n    # Initialize variables to store indices\n    start_idx = -1\n    end_idx = -1\n\n    # Find the first occurrence of x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            start_idx = i\n            break\n\n    # If x is not found in arr, return -1\n    if start_idx == -1:\n        return -1\n\n    # Find the last occurrence of x\n    for i in range(start_idx, len(arr)):\n        if arr[i] != x:\n            end_idx = i - 1\n            break\n\n    # If x is the last element in arr, set end_idx to len(arr)-1\n    if end_idx == -1:\n        end_idx = len(arr) - 1\n\n    # Return the last position of x\n    return end_idx\n",
        "test": "assert last([1, 2, 3, 4, 5], 5) == 4",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_starta_endb(\"Let's go to the park\") == False",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def return_sum(my_dict):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its items.\n    \"\"\"\n    sum = 0\n    for value in my_dict.values():\n        sum += value\n    return sum\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6, \"Sum should be 6\" ",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments, l and r, and returns the sum of all odd natural numbers within the range [l, r].\n    \"\"\"\n    \n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate through all numbers in the range [l, r]\n    for num in range(l, r+1):\n        \n        # If the number is odd, add it to the sum\n        if num % 2 != 0:\n            total += num\n    \n    # Return the total sum\n    return total\n",
        "test": "assert sum_odd(-10) == 0 # since there are no odd numbers in the range [-10,-10)",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    # Initialize the sum to zero\n    total = 0\n    \n    # Iterate through the array and add each element to the sum\n    for i in arr:\n        total += i\n    \n    # Return the sum of the array\n    return total\n",
        "test": "assert _sum([1,2,3,4,5]) == 15 ",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # First, we need to handle the case where d is greater than the number of bits in the number.\n    if d >= 32:\n        return n\n    \n    # Convert the number to binary and pad it with leading zeros to make it 32 bits.\n    bin_n = format(n, '032b')\n    \n    # Rotate the bits left by d positions and convert the result back to decimal.\n    rotated_n = int(bin_n[d:] + bin_n[:d], 2)\n    \n    return rotated_n\n",
        "test": "assert left_rotate(0,1) == 0",
        "num_ids": 768,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0, \"Expected 0 equal numbers, but got a different result\"",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    \n    # Base cases\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # Find the index of the smallest element\n    min_index = 0\n    for i in range(1, n):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    \n    # If the array is already sorted\n    if min_index == 0:\n        return 0\n    \n    # If the array is not sorted\n    return (min_index + 1)\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5, 6, 7]) == 0",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Checks whether a given number is a perfect square or not.\n    \"\"\"\n    # Handle negative numbers\n    if n < 0:\n        return False\n    \n    # If n is 0 or 1, it's a perfect square\n    if n == 0 or n == 1:\n        return True\n    \n    # Calculate the square root of n\n    root = int(n ** 0.5)\n    \n    # Check if the square root is an integer or not\n    if root * root == n:\n        return True\n    else:\n        return False\n",
        "test": "assert is_perfect_square(1) == True, \"1 is a perfect square\"",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if the product of all the numbers is even, and False otherwise.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([1, 2, 3]) == True",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_sum_list(lists):\n    max_list = []\n    max_sum = float('-inf')\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6]]) == [4, 5, 6]",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    count = 0\n    for char in test_str:\n        if char.isupper():\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n    max_count = max(max_count, count)\n    return max_count\n",
        "test": "assert max_run_uppercase('AaaaaaaaBbBbccdDddEEE') == 3",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    '''\n    Returns the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup",
        "test": "assert check_K(('a', 'b', 'c'), 3) == False",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((1, 2, 3), (0, 1, 2, 4)) == False",
        "num_ids": 696,
        "indeed": true
    }
]