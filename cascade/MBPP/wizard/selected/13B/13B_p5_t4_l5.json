[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n",
        "test": "assert similar_elements((1, 2, 3), (1, 2, 3)) == (1, 2, 3)",
        "num_ids": 1242,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(2) == False",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap (min heap with negative values) with the first n elements of the list\n    heap = nums[:n]\n    hq.heapify(heap)\n    \n    # iterate through the remaining elements of the list\n    for num in nums[n:]:\n        # if the current element is larger than the smallest element in the heap\n        if num > heap[0]:\n            # remove the smallest element and add the current element to the heap\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n    \n    # return the heap in descending order\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([], 0) == [] # check if the function returns an empty list if n is 0",
        "num_ids": 1333,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Power_Of_Two(x):\n    # Check if x is a power of 2 by comparing it with its next power of 2\n    if x and (not x & (x - 1)):\n        return True\n    else:\n        return False\n",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"I am a python programmer\") == ['python', 'programmer']",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 762,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_Rotations(s):\n    if len(s) == 0:\n        return 0\n    temp = s + s\n    min_rotations = len(temp)\n    for i in range(len(s)):\n        temp = temp[1:] + temp[:1]\n        if temp.find(s) != -1:\n            min_rotations = min(min_rotations, temp.index(s))\n    return min_rotations//len(s)\n",
        "test": "assert find_Rotations(\"\") == 0",
        "num_ids": 1231,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_Occ(s, ch):\n    if ch not in s:  # if the character is not in the string\n        return s\n    else:\n        # find the index of the first occurrence of the character\n        first_occ = s.find(ch)\n        # find the index of the last occurrence of the character\n        last_occ = s.rfind(ch)\n        # remove the first and last occurrences of the character from the string\n        new_s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n        return new_s\n",
        "test": "assert remove_Occ(\"hello\", \"l\") == \"heo\"",
        "num_ids": 1033,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_matrix(M):\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # sort the matrix according to the row sums\n    sorted_M = [row for _, row in sorted(zip(row_sums, M))]\n    \n    return sorted_M\n",
        "test": "assert sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == sort_matrix([[7,8,9],[1,2,3],[4,5,6]])  # returns the same sorted matrix for any two matrices with the same row sums",
        "num_ids": 1472,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5 * l * b * h\n",
        "test": "assert find_Volume(10, 12, 15) == 900",
        "num_ids": 753,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    This function takes a string as input and returns True if the string contains sequences of lowercase letters\n    joined with an underscore and False otherwise.\n    '''\n    # Using regular expression to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    \n    # If the pattern matches, return True, else return False\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 928,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(3) == 12",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def str_to_list(string1, string2): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string1)\n    list2 = list(string2)\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return ''.join(list1)\n",
        "test": "assert str_to_list(\"hello\", \"he\") == \"llo\" ",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty set to store unique elements\n    unique_nums = set()\n\n    # Iterate through the given array of integers\n    for num in arraynums:\n        # If the current number is already in the set, then it's a duplicate\n        if num in unique_nums:\n            return True\n        else:\n            # Otherwise, add it to the set\n            unique_nums.add(num)\n\n    # If no duplicates are found, return False\n    return False\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 1026,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if a given number is woodall or not.\n\n    A number is woodall if it has 3 consecutive odd digits.\n    \"\"\"\n    if x < 1000 or x > 9999:\n        return False\n\n    last_digit = x % 10\n    second_last_digit = (x // 10) % 10\n    third_last_digit = (x // 100) % 10\n\n    if last_digit % 2 == 1 and second_last_digit % 2 == 1 and third_last_digit % 2 == 1:\n        return True\n\n    return False",
        "test": "assert is_woodall(123) == False",
        "num_ids": 961,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Reverse the string using slicing\n    rev_str = num_str[::-1]\n    \n    # Convert the reversed string back to an integer\n    rev_int = int(rev_str)\n    \n    # Check if the original number is one less than twice the reversed number\n    if num == rev_int * 2 - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(12345) == False # expected output: False",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    result = \"\"\n    while arr:\n        result += str(arr.pop(0))\n    return int(result)\n",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 54321",
        "num_ids": 1154,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Check if two integers have opposite signs.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(5, -3) == True",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    octagonal_numbers = []\n\n    while True:\n        octagonal_number = i * (i * 2 - 1)\n        octagonal_numbers.append(octagonal_number)\n\n        if len(octagonal_numbers) == n:\n            return octagonal_number\n        else:\n            i += 1\n",
        "test": "assert is_octagonal(1) == 1 ",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    n = len(s)\n    freq = defaultdict(int)\n    for i in range(n):\n        freq[s[i]] += 1\n    for i in range(1, n):\n        for j in range(n-i):\n            if sum(int(digit) for digit in s[j:j+i]) == i:\n                count += freq[s[j:j+i]]\n    return count\n",
        "test": "assert count_Substrings('1234') == 1 # 1234 has one substring (1234) with sum of digits 1+2+3+4 = 10, which is equal to its length",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "test": "assert smallest_num([3, 1, 4, 2, 5]) == 1",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(\"English\", 80), (\"Maths\", 90), (\"Science\", 70)]) == [(\"Science\", 70), (\"English\", 80), (\"Maths\", 90)]",
        "num_ids": 1553,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    # if data_list is a list, recursively call the function on each element\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(x) for x in data_list)\n    # if data_list is not a list, return its value (assuming it's numeric)\n    else:\n        return data_list\n",
        "test": "assert recursive_list_sum([1,2,[3,4]]) == 10",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a Python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_number(n):\n    \"\"\"\n    Returns the nth Bell number.\n    \"\"\"\n    bell = [1, 1]\n    for i in range(2, n+1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-1-j]\n    return bell[n]\n\ndef partition_count(n):\n    \"\"\"\n    Returns the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    total = bell_number(n)\n    for i in range(1, n+1):\n        total -= bell_number(i) * bell_number(n-i)\n    return total",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1 or n == 0:\n        return True\n    \n    # check if the array is increasing or decreasing\n    if A[1] > A[0]:\n        # check if the array is increasing\n        for i in range(1, n-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        # check if the array is decreasing\n        for i in range(1, n-1):\n            if A[i] < A[i+1]:\n                return False\n        return True\n",
        "test": "assert is_Monotonic([1,2,3,2,1]) == False, \"Test case failed for [1,2,3,2,1]\"",
        "num_ids": 1376,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1, 2, 3], [2, 3]) == True",
        "num_ids": 1003,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check whether all the tuples have equal length or not\n    if all(len(t) == len(Input[0]) for t in Input):\n        return True\n    else:\n        return False\n",
        "test": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n\n    while gap > 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n\n    return nums\n",
        "test": "assert comb_sort([5, 2, 7, 1, 3]) == [1, 2, 3, 5, 7]",
        "num_ids": 1238,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n ** 0.5) + 1):\n        for j in range(int(n ** 0.5) + 1):\n            if i ** 2 - j ** 2 == n or j ** 2 - i ** 2 == n:\n                return True\n    return False\n",
        "test": "assert dif_Square(1) == True",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_samepatterns(colors, patterns):\n    # Convert the colors and patterns lists to strings\n    color_str = ''.join(colors)\n    pattern_str = ''.join(patterns)\n\n    # Check if the color_str matches the pattern_str\n    if color_str == pattern_str:\n        return True\n    else:\n        return False\n",
        "test": "assert is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\"], [\"red\", \"blue\", \"green\", \"yellow\"]) == True, \"should return True for same patterns\"",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6)], 1) == [(1, 2, 3), (4, 5, 6)]",
        "num_ids": 1744,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(22) == True, \"Error: is_Diff(22) should return True\"",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def word_len(s):\n    \"\"\"\n    This function checks whether the length of a word is odd or not.\n\n    Args:\n        s (str): The word to check.\n\n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(s) % 2 != 0\n",
        "test": "assert word_len('JavaScript') == False, \"word_len('JavaScript') should return False\"",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def tetrahedral_number(n):\n    t = 0\n    for i in range(n+1):\n        t += i*(i+1)*(i+2)//6\n    return t\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n",
        "test": "assert volume_sphere(2) == 33.510321638291124",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    result = total % 26\n    return chr(result + 65)  # convert ASCII value to character\n",
        "test": "assert get_Char(\"a\") == \"A\"",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sequence(n):\n    \"\"\"\n    Returns the nth number in the Newman-Conway sequence.\n\n    :param n: an integer greater than or equal to 1\n    :return: the nth number in the Newman-Conway sequence\n    \"\"\"\n\n    # Initialize the list with the first two numbers in the sequence\n    newman_conway = [0, 1, 1]\n\n    # If n is 1 or 2, return the corresponding number in the sequence\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Compute the rest of the sequence\n    for i in range(3, n + 1):\n        # The ith number in the sequence is the sum of the i-1th and i-2th numbers\n        newman_conway.append(newman_conway[i-1] + newman_conway[i-2])\n\n    # Return the nth number in the sequence\n    return newman_conway[n]\n",
        "test": "assert sequence(2) == 1 ",
        "num_ids": 973,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n",
        "test": "assert surfacearea_sphere(5) == 314.1592653589793  # radius of 5",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n    \"\"\"\n    hex_num = n * (2*n - 1)\n    return hex_num ",
        "test": "assert centered_hexagonal_number(1) == 1 ",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6} # Test case 2: Merging dictionaries with different keys",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "test": "assert freq_count([1, 2, 3, 2, 1, 1]) == {1: 3, 2: 2, 3: 1} ",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N-1, -1, -1):\n        if i < N:\n            return i\n",
        "test": "assert closest_num(1) == 0",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log([\"Hello\", \"world\", \"how\", \"are\", \"you\"]) == 5, \"Error: len_log function is not working correctly\"",
        "num_ids": 1022,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring('hello world', 'world!') == False ",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        i = 1\n        while n > 0:\n            if i % 2 == 0:\n                if n % 10 != 0:\n                    return False\n                n = n // 10\n            else:\n                if n % 10 != 9:\n                    return False\n                n = n // 10\n            i += 1\n        return True\n",
        "test": "assert is_undulating(122) == False # Test case 4",
        "num_ids": 1248,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert power(2,3) == 8, \"power(2,3) should be 8\"",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list by the second value of each tuple, in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(5, 6), (1, 2), (3, 4), (7, 8)]) == 1, \"Incorrect result for index_minimum([(5, 6), (1, 2), (3, 4), (7, 8)])\"",
        "num_ids": 1536,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize the minimum length to infinity\n    min_length = float('inf')\n    \n    # iterate through the list of lists and find the length of each list\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    # return the minimum length found\n    return min_length\n",
        "test": "assert Find_Min_Length([[1],[2,3],[4,5,6]]) == 1 # correct output",
        "num_ids": 1067,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if(n%i == 0):\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1 # 1 is only divisible by 1",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists,\n    returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "test": "assert frequency_lists([]) == {} # Empty list",
        "num_ids": 1801,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "test": "assert multiply_num([1, 2, 3]) == 2",
        "num_ids": 812,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def next_smallest_palindrome(num):\n    num += 1\n    while True:\n        if str(num) == str(num)[::-1]:\n            return int(num)\n        num += 1\n",
        "test": "assert next_smallest_palindrome(123123) == 123321",
        "num_ids": 2019,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    return arr[k-1]\n",
        "test": "assert kth_element([1,2,3,4,5], 5) == 5",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def snake_to_camel(word):\n    # Split the word into parts separated by underscores\n    parts = word.split('_')\n    # Convert the first part to lowercase\n    first_part = parts[0].lower()\n    # Convert the rest of the parts to titlecase\n    rest_parts = [part.title() for part in parts[1:]]\n    # Join the parts together\n    return first_part + ''.join(rest_parts)\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 1034,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Computes the Eulerian number a(n, m) using the recursive formula:\n    a(n, m) = (n * a(n - 1, m)) + (m * a(n, m - 1))\n    \"\"\"\n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    else:\n        return (n * eulerian_num(n - 1, m)) + (m * eulerian_num(n, m - 1))",
        "test": "assert eulerian_num(0, 0) == 1, \"eulerian_num(0, 0) should return 1\"",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\", \"bird\"]]) == [[\"apple\", \"banana\", \"cherry\"], [\"bird\", \"cat\", \"dog\"]] # should return sorted sublists",
        "num_ids": 1471,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, True]) == 3 # correct output: 3 ",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup\n",
        "test": "assert add_lists([], (1,2,3)) == (1,2,3)",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n    \n    # insert first element of each list into heap\n    if num1:\n        heapq.heappush(heap, (num1[0], 1))\n    if num2:\n        heapq.heappush(heap, (num2[0], 2))\n    if num3:\n        heapq.heappush(heap, (num3[0], 3))\n    \n    # iterate through heap and append smallest element to merged_list\n    while heap:\n        val, list_num = heapq.heappop(heap)\n        merged_list.append(val)\n        \n        if list_num == 1:\n            if len(num1) > 1:\n                num1.pop(0)\n                heapq.heappush(heap, (num1[0], 1))\n        elif list_num == 2:\n            if len(num2) > 1:\n                num2.pop(0)\n                heapq.heappush(heap, (num2[0], 2))\n        elif list_num == 3:\n            if len(num3) > 1:\n                num3.pop(0)\n                heapq.heappush(heap, (num3[0], 3))\n    \n    return merged_list\n",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 2399,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and an integer n as inputs.\n    It rotates the string s by n times and counts the number of odd values in the resulting binary string.\n    Returns the count.\n    \"\"\"\n    # Rotate the string s by n times\n    rotated_string = s[n:] + s[:n]\n    \n    # Count the number of odd values in the rotated string\n    count = 0\n    for digit in rotated_string:\n        if int(digit) % 2 == 1:\n            count += 1\n    \n    return count\n",
        "test": "assert odd_Equivalent(\"000\", 1) == 0",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    \n    result = nestedlist[0]\n    for lst in nestedlist[1:]:\n        result = list(set(result) & set(lst))\n    \n    return result\n",
        "test": "assert common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9]]) == []",
        "num_ids": 1398,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def empty_dit(list1):\n    '''\n    Checks if all dictionaries in a list are empty or not.\n    Returns True if all dictionaries are empty, otherwise False.\n    '''\n    for item in list1:\n        if not item:\n            return False\n    return True\n",
        "test": "assert empty_dit([{'a': 1}, {}]) == False",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_str = ''.join(str(n) for n in nums)\n    return int(num_str)\n",
        "test": "assert tuple_to_int((1,)) == 1",
        "num_ids": 812,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for element in test_list:\n        if isinstance(element, list):\n            new_list.append(list_to_float(element))\n        elif isinstance(element, str) and element.replace('.', '', 1).isdigit():\n            new_list.append(float(element))\n        else:\n            new_list.append(element)\n    return new_list\n",
        "test": "assert list_to_float([[\"foo\", \"bar\"], [1, 2]]) == [[\"foo\", \"bar\"], [1.0, 2.0]]",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split()\n    return list_of_strings\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    elif n == 1:\n        return arr[0]\n    \n    # Find the first element that appears only once\n    for i in range(1, n):\n        if arr[i] != arr[i-1]:\n            if i+1 < n and arr[i] != arr[i+1]:\n                return arr[i]\n            elif i+1 == n:\n                return arr[i]\n    \n    # If no element appears only once, return None\n    return None\n",
        "test": "assert search([1]) == 1",
        "num_ids": 1382,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1, 2), (-3, 4), (-5, 6)]) == 48, \"max_product_tuple([(1, 2), (-3, 4), (-5, 6)]) should return 48\"",
        "num_ids": 1569,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        divisors_sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                divisors_sum += j\n        divisors_sum_of_divisors = 0\n        for k in range(1, divisors_sum+1):\n            if divisors_sum % k == 0:\n                divisors_sum_of_divisors += k\n        if divisors_sum_of_divisors == i and i != divisors_sum:\n            amicable_sum += i\n    return amicable_sum\n\nlimit = int(input(\"Enter a limit: \"))\nprint(\"The sum of amicable numbers up to\", limit, \"is:\", amicable_numbers_sum(limit))\n",
        "test": "assert amicable_numbers_sum(1000) == 76124 # expected output for limit=1000",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_number = complex(a, b)\n    return cmath.phase(complex_number)\n",
        "test": "assert angle_complex(0) == 0, \"Angle of 0 should be 0\"",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_length(string):\n    max_length = 0\n    current_length = 0\n    zeros = 0\n    ones = 0\n\n    for char in string:\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n\n        current_length += 1\n\n        if zeros - ones > max_length:\n            max_length = zeros - ones\n\n        if ones - zeros > max_length:\n            max_length = ones - zeros\n\n    return max_length",
        "test": "assert find_length(\"00110011\") == 2, \"Error: find_length is not working correctly\"",
        "num_ids": 1385,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors_sum += i\n    return divisors_sum\n",
        "test": "assert sum(15,25) == 6, \"Test 4 failed\"",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def long_words(n, words_list):\n    '''\n    Returns a list of words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words_list:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "test": "assert long_words(6, \"hello world\") == []",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    s = sum(my_matrix[0])\n    magic_sum = (n*(n**2+1))/2\n\n    # check if all rows have the same sum\n    for i in range(n):\n        if sum(my_matrix[i]) != s:\n            return False\n\n    # check if all columns have the same sum\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum != s:\n            return False\n\n    # check if the diagonal sum is correct\n    diag_sum = 0\n    for i in range(n):\n        diag_sum += my_matrix[i][i]\n    if diag_sum != s:\n        return False\n\n    # check if the antidiagonal sum is correct\n    antidiag_sum = 0\n    for i in range(n):\n        antidiag_sum += my_matrix[i][n-i-1]\n    if antidiag_sum != s:\n        return False\n\n    # if all the above checks pass, return True\n    return True\n",
        "test": "assert magic_square_test([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [15, 1, 14, 4]]) == False # False",
        "num_ids": 2172,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for item in nums:\n        freq[item] += 1\n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    return max_item\n",
        "test": "assert max_occurrences([1, 1, 2, 2, 3, 3, 3]) == 3",
        "num_ids": 1223,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n    return ''.join(str1)\n",
        "test": "assert reverse_vowels('aeiou') == 'uoiea'",
        "num_ids": 1108,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert tuple to string using join method\n    str1 = ','.join(str(i) for i in tup1)\n    # return string\n    return str1\n",
        "test": "assert tup_string(()) == \"\"",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 985,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1 ",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    ratio = zero_count / non_zero_count if non_zero_count > 0 else 0\n    return ratio\n",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0 ",
        "num_ids": 1188,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(31):\n            if n == 2**i:\n                return True\n            elif n < 2**i:\n                break\n        return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "test": "assert circle_circumference(0) == 0 # radius = 0",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        elif isinstance(item, int):\n            result.add(item)\n    return result\n",
        "test": "assert extract_singly([[1,2],[3,4],[5]]) == set([1,2,3,4,5]) ",
        "num_ids": 1273,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using pancake sorting algorithm.\n    \"\"\"\n    # Start from the end of the list\n    for size in range(len(nums), 1, -1):\n        # Find the maximum element in the current sublist\n        max_index = nums.index(max(nums[:size]))\n        # Reverse the sublist from the beginning to the maximum element\n        nums[:max_index+1] = reversed(nums[:max_index+1])\n        # Reverse the entire sublist\n        nums[:size] = reversed(nums[:size])\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3",
        "num_ids": 1068,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0 # empty tuple",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff\n",
        "test": "assert max_Abs_Diff([1,2,3]) == 2",
        "num_ids": 1171,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Returns integers x and y that satisfy ax + by = n as a tuple, or None if no solution exists.\n    \"\"\"\n    if b == 0:\n        if a == 0:\n            return None\n        else:\n            return (n/a, 0)\n    else:\n        gcd, x, y = extended_euclidean_algorithm(a, b)\n        if n % gcd != 0:\n            return None\n        else:\n            x = x * (n // gcd)\n            y = y * (n // gcd)\n            return (x, y)\n\ndef extended_euclidean_algorithm(a, b):\n    \"\"\"\n    Returns the gcd of a and b, and x and y such that ax + by = gcd(a, b).\n    \"\"\"\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        gcd, x, y = extended_euclidean_algorithm(b, a % b)\n        return (gcd, y, x - ((a // b) * y))\n",
        "test": "assert find_solution(1, 2, 2) == (2, 0)",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 933,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2+1):\n        sum += n - 2*i\n    return sum\n",
        "test": "assert sum_series(0) == 0, \"Test case failed for n=0\"",
        "num_ids": 729,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    apothem = l/(2*tan(pi/s))\n    area = (s*l**2)/(4*tan(pi/s))\n    return area\n``` ",
        "test": "assert area_polygon(10, 5) == 40 ",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def div_sum(n):\n    def sum_divisors(num):\n        total = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                total += i\n        return total\n\n    for i in range(1, n + 1):\n        if sum_divisors(i) == sum_divisors(n - i):\n            return True\n    return False\n\nprint(div_sum(28))  # Output: True\nprint(div_sum(26))  # Output: False",
        "test": "assert div_sum(28) == True, \"div_sum(28) should return True\" ",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i%26):\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"abcde\") == 5 # No characters occur at the same position in the string as in the English alphabet",
        "num_ids": 1285,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4]) == 2",
        "num_ids": 1010,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n < 0:\n        return 0\n    \n    result = 1\n    \n    while result < n:\n        result *= 2\n        \n    return result\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 763,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,2,1,2],2) == 3 # test the function for a given list and a number",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "test": "assert sum_range_list([1,2,3,4,5], 0, 4) == 15",
        "num_ids": 1183,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = 5\n    perimeter = sides * a\n    return perimeter\n",
        "test": "assert perimeter_pentagon(2) == 10.4",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance('abc') == 0",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != first_element_type:\n            return False\n    return True\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 1024,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_majority(arr, n, x):\n    # first, check if x is the median element\n    if n % 2 == 0:\n        # if the array length is even, we need to check both the middle two elements\n        mid1 = n // 2 - 1\n        mid2 = n // 2\n        if arr[mid1] == x or arr[mid2] == x:\n            # if either of the middle two elements is x, we're done\n            return True\n        else:\n            # otherwise, check if there are more than n/4 elements to the left or right of the median\n            left_count = sum(1 for i in range(mid1) if arr[i] == x)\n            right_count = sum(1 for i in range(mid2, n) if arr[i] == x)\n            if left_count > n/4 or right_count > n/4:\n                return True\n            else:\n                return False\n    else:\n        # if the array length is odd, we only need to check the middle element\n        mid = n // 2\n        if arr[mid] == x:\n            # if the middle element is x, we're done\n            return True\n        else:\n            # otherwise, check if there are more than n/2 elements to the left or right of the median\n            left_count = sum(1 for i in range(mid) if arr[i] == x)\n            right_count = sum(1 for i in range(mid+1, n) if arr[i] == x)\n            if left_count > n/2 or right_count > n/2:\n                return True\n            else:\n                return False\n",
        "test": "assert is_majority([1, 1, 1, 2, 3], 5, 1) == True, \"Test case 4 failed\"",
        "num_ids": 1625,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\n",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the range to a binary string\n    binary_string = bin(n)[2:].zfill(32)\n    \n    # Check if all bits are set in the given range\n    for i in range(l, r+1):\n        if binary_string[i] != '1':\n            return False\n    \n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b10011100, 2, 6) == False ",
        "num_ids": 1210,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def re_arrange_array(arr, n):\n    # Create two lists, one for negative elements and one for positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Loop through the first n elements of the array\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    \n    # Combine the two lists into a single list with negative elements first\n    combined_list = neg_list + pos_list\n    \n    # Return the combined list as the re-arranged array\n    return combined_list\n",
        "test": "assert re_arrange_array([], 0) == [] ",
        "num_ids": 1813,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank(\"\", \"!\") == \"\"",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([1, 1, 1, 1, 1], 3) == [1, 1, 1] ",
        "num_ids": 1160,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area\n",
        "test": "assert lateralsuface_cylinder(3, 1) == 18.84955592153876, \"Incorrect result for lateralsurface_cylinder(3, 1)\"",
        "num_ids": 1433,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n & -n)\n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 1887,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary to store the results\n    result = {}\n    # use a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # loop over the keys of the counter and add them to the result dictionary with their corresponding counts\n    for key in counter:\n        result[key] = counter[key]\n    # return the result dictionary\n    return result\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2), (1, 2), (3, 4)]) == {(1, 2): 3, (3, 4): 2} ",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_of_substrings(s):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n    \"\"\"\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if sub:\n                count += 1\n    return count",
        "test": "assert number_of_substrings(\"\") == 0, \"Expected 0 but got different result\"",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def get_total_number_of_sequences(m, n):\n    dp = [0] * (m + 1)\n    dp[1] = 1\n\n    for i in range(2, n + 1):\n        count = 0\n        for j in range(1, m + 1):\n            if j >= 2 * i - 1:\n                count += dp[j - 2 * i + 1]\n        dp[i] = count\n\n    return dp[n]",
        "test": "assert get_total_number_of_sequences(5, 2) == 1",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1\n",
        "test": "assert replace_list([], []) == [] # replace an empty list with an empty list",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"Hello World\") == 11",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Find the next perfect square greater than N\n    root = math.sqrt(N)\n    if root == int(root):\n        root = int(root) + 1\n    else:\n        root = int(math.ceil(root))\n    return root * root",
        "test": "assert next_Perfect_Square(1) == 4",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # create two arrays to store the maximum sum up to that index for increasing and decreasing subarrays\n    inc = [0] * n\n    dec = [0] * n\n    # initialize the first elements of the arrays\n    inc[0] = arr[0]\n    dec[0] = arr[0]\n    # loop through the array starting from the second element\n    for i in range(1, n):\n        # if the current element is greater than the previous one, update the maximum sum up to that index for the increasing subarray\n        if arr[i] > arr[i-1]:\n            inc[i] = max(inc[i-1] + arr[i], arr[i])\n        # otherwise, the maximum sum up to that index for the decreasing subarray is the current element\n        else:\n            dec[i] = arr[i]\n    # find the maximum sum up to that index for the increasing subarray and the decreasing subarray\n    max_inc = max(inc)\n    max_dec = max(dec)\n    # return the maximum of the two maximum sums\n    return max(max_inc, max_dec)\n",
        "test": "assert max_sum([1, 3, 2, 5, 4]) == 5, \"max_sum([1, 3, 2, 5, 4]) should return 5\"",
        "num_ids": 2414,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    elif number == 0 or number == 1:\n        return number\n    else:\n        x = number\n        y = (x + 1) / 2\n        while abs(x - y) >= 0.0001:\n            x = y\n            y = (x + number / x) / 2\n        return round(y, 4)\n",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 1079,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "test": "assert lps(\"cbbd\") == 2, \"lps('cbbd') should be 2\"",
        "num_ids": 1148,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create empty set to store intersection\n    intersection = set()\n    # loop through each element in array_nums1\n    for num in array_nums1:\n        # check if the element is in array_nums2 and not in the intersection set\n        if num in array_nums2 and num not in intersection:\n            # add the element to the intersection set\n            intersection.add(num)\n    # convert the set to a list and return it\n    return list(intersection)\n",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3]  # intersection of [1,2,3] and [2,3,4] is [2,3]",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5) == 1 ",
        "num_ids": 956,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(element)\n        new_lst.append(lst[i])\n    return new_lst\n",
        "test": "assert insert_element([], 1) == []",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = cmath.polar(numbers)\n    return polar\n",
        "test": "assert convert(5) == (5, 0)",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "test": "assert count_integer([]) == 0",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for combo in combinations_with_replacement(l, n):\n        result.append(combo)\n    return result\n",
        "test": "assert combinations_colors(['r', 'g', 'b'], 3) == [('r', 'r', 'r'), ('r', 'r', 'g'), ('r', 'r', 'b'), ('r', 'g', 'g'), ('r', 'g', 'b'), ('r', 'b', 'b'), ('g', 'g', 'g'), ('g', 'g', 'b'), ('g', 'b', 'b'), ('b', 'b', 'b')] ",
        "num_ids": 1807,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4 # 2, 3, 5, 7",
        "num_ids": 1290,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(2, 5) == (5, 2) ",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1,2,3),(4,5,6)) == (4,5,6)",
        "num_ids": 1501,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    i = 1\n    count = 0\n    primes = []\n    \n    # iterate until we find n primes\n    while count < n:\n        # check if i is prime\n        if is_prime(i):\n            # add i to list of primes\n            primes.append(i)\n            count += 1\n        i += 1\n        \n    # return the nth prime\n    return primes[n-1]\n\n\ndef is_prime(num):\n    '''\n    Check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert newman_prime(1) == 2 # first newman-shanks-williams prime number",
        "num_ids": 2128,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n",
        "test": "assert division_elements((2, 4, 8), (1, 2, 4)) == (2, 2, 2)",
        "num_ids": 1371,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = []\n    second_part = []\n    for i in range(len(list1)):\n        if i < L:\n            first_part.append(list1[i])\n        else:\n            second_part.append(list1[i])\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 1169,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age\n",
        "test": "assert dog_age(1) == 7",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Split a list for every nth element, returning a list of the resulting lists.\n    \n    Parameters:\n    S (list): A list of elements to be split.\n    step (int): The number of elements to include in each sublist.\n    \n    Returns:\n    list: A list of sublists.\n    \n    Example:\n    >>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3)\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    \"\"\"\n    result = []\n    sublist = []\n    for i, element in enumerate(S):\n        sublist.append(element)\n        if (i + 1) % step == 0:\n            result.append(sublist)\n            sublist = []\n    if sublist:\n        result.append(sublist)\n    return result",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]] ",
        "num_ids": 1693,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral_area = 6 * l * l\n    return lateral_area\n",
        "test": "assert lateralsurface_cube(1) == 6 ",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 1\n    stars = ''\n    for i in range(1, n+1):\n        stars += '* '\n        if i % (2*count) == 0:\n            stars += '\\n'\n            count += 1\n    return stars.rstrip()\n",
        "test": "assert find_star_num(1) == \"*\"",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character and returns its ASCII value.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0",
        "num_ids": 1083,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    count = 0\n    i = 2\n    while count < n:\n        sum += i ** 5\n        count += 1\n        i += 2\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 896,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 991,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_tup)\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 1284,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += math.comb(n, i) * (i//2)\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(2) == 1",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(1,0) == 0 ",
        "num_ids": 1053,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dict_filter(d, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in d.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert dict_filter({'a': 5, 'b': 3, 'c': 7}, 5) == {'a': 5, 'c': 7}",
        "num_ids": 1237,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup.index(test_tup[i]) < i:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements((1, 2, 3, 4, 5, 1, 2, 3, 4)) == 4 ",
        "num_ids": 1122,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Finds the nth decagonal number.\n    \n    Args:\n        n (int): The index of the decagonal number to find.\n    \n    Returns:\n        int: The nth decagonal number.\n    \"\"\"\n    return n * (2 * n - 1)  # Formula to calculate decagonal numbers\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n        else:\n            return False\n    return True\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer n as input and checks whether the frequency of each digit in n is less than or equal to the digit itself.\n    \"\"\"\n    # convert the integer to a string to count its digits\n    n_str = str(n)\n    # create a dictionary to count the frequency of each digit\n    freq = {}\n    for digit in n_str:\n        freq[digit] = freq.get(digit, 0) + 1\n    # check if each digit's frequency is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n    return True\n",
        "test": "assert validate(123) == True",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_element(lst, elem):\n    '''\n    Checks whether all items in a list are equal to the given element.\n    \n    Args:\n    lst (list): The list to check.\n    elem (any): The element to compare to.\n    \n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise.\n    '''\n    \n    # Check that the list has at least one element\n    if len(lst) == 0:\n        return False\n    \n    # Check that all elements in the list are equal to the given element\n    for item in lst:\n        if item != elem:\n            return False\n    \n    # If we get here, all elements in the list are equal to the given element\n    return True\n",
        "test": "assert check_element([1, 1, 1, 1], 1) == True",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2}|b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('abbbbb') == True",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Repeat the given array k times to form the modified array\n    modified_array = a * k\n    # Find the maximum sum subarray using Kadane's algorithm\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in modified_array:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 8, 3) == 7 # given example",
        "num_ids": 2217,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_length(list_of_lists):\n    \"\"\"\n    Returns the list with the maximum length in a list of lists.\n    If multiple lists have the same maximum length, returns the first one.\n    \"\"\"\n    max_list = []\n    max_len = 0\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([]) == []",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0] * k for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n            if j < k-1:\n                dp[i][j] += dp[i-1][j+1]\n    return sum(dp[n-1])\n",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 1784,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient\n",
        "test": "assert find(8,3) == 2",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Find the third side of a right angled triangle.\n    '''\n    a = w  # assume that the legs are w and h\n    b = h\n    c = math.sqrt(a**2 + b**2)  # use the Pythagorean theorem to find c\n    return c\n",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 759,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize sum of divisors\n    sum_div = 0\n    # iterate over all numbers from 1 to number\n    for i in range(1, number+1):\n        # if i is a divisor of number, add it to sum_div\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n",
        "test": "assert sum_div(10) == 18",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n\n    # Base case: if the array has only one element, it has no inversions\n    if n == 1:\n        return 0\n\n    # Divide the array into two halves\n    mid = n // 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n\n    # Recursively count inversions in each half\n    left_inv_count = get_Inv_Count(left_arr)\n    right_inv_count = get_Inv_Count(right_arr)\n\n    # Merge the two halves and count inversions while merging\n    i = j = 0\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] < right_arr[j]:\n            i += 1\n        else:\n            j += 1\n            inv_count += len(left_arr) - i\n\n    # Add the inversions in the remaining elements to the total count\n    inv_count += left_inv_count + right_inv_count\n\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0 # should return 0 inversions for a sorted array",
        "num_ids": 1991,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([1, [2, 3], 4]) == [1, 2, 3, 4]",
        "num_ids": 1374,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n    \n    # initialize a default dictionary to store the aggregates\n    agg_dict = defaultdict(int)\n    \n    # loop through the list of tuples and update the aggregates in the dictionary\n    for tup in stdata:\n        agg_dict[tup[0]] += tup[1]\n    \n    # find the maximum aggregate from the dictionary\n    max_agg = max(agg_dict.values())\n    \n    # return the maximum aggregate\n    return max_agg\n",
        "test": "assert max_aggregate([(\"A\", 1), (\"B\", 2), (\"A\", 1)]) == 2",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Counts the number of binary sequences of length 2n such that the sum of the first n bits is equal to the sum of the last n bits.\n    \"\"\"\n    # Initialize a counter variable to keep track of the number of valid sequences\n    count = 0\n    \n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**(2*n)):\n        # Convert the integer i to a binary string of length 2n and split it into two equal-length substrings of length n each\n        binary_str = bin(i)[2:].zfill(2*n)\n        first_n_bits = binary_str[:n]\n        last_n_bits = binary_str[n:]\n        \n        # Check if the first n bits and the last n bits have the same sum\n        if sum(int(bit) for bit in first_n_bits) == sum(int(bit) for bit in last_n_bits):\n            # If they do, increment the counter\n            count += 1\n    \n    # Return the count of valid sequences\n    return count\n",
        "test": "assert count_binary_seq(0) == 1 ",
        "num_ids": 1234,
        "indeed": true
    },
    {
        "number": 301,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "test": "assert dict_depth({1: 2, 2: {3: 4}, 3: {4: {5: 6}}}) == 3",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            index = index - ranges[i][0]\n            return arr[i][index]\n    return None\n",
        "test": "assert find_Element([1,2,3,4,5], 2, 3, 1) == 2",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p') # Compile a regular expression to match words starting with 'p'\n    matches = [] # Initialize an empty list to store the matches\n    for word in words:\n        if pattern.match(word): # If the word matches the pattern\n            matches.append(word) # Add the word to the list of matches\n    if len(matches) >= 2: # If there are at least two matches\n        return matches[0], matches[1] # Return the first two matches\n    else: # If there are fewer than two matches\n        return None, None # Return None for both words\n",
        "test": "assert start_withp(['apple', 'pear', 'peach']) == ('pear', 'peach')",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum variable\n    max_sum = float('-inf')\n\n    # Create a list to store the sums for each index\n    sums = [0] * (n + 1)\n\n    # Iterate through the list\n    for i in range(1, n + 1):\n        # If the current element is greater than the kth element, then we can include it in the subsequence\n        if a[k - 1] < a[i - 1]:\n            sums[i] = max(sums[i - 1], sums[i - 2] + a[i - 1])\n\n            # Update the maximum sum if the current sum is greater\n            if sums[i] > max_sum:\n                max_sum = sums[i]\n\n    # Return the maximum sum up to the index i (not including the kth element)\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([1, 10, 2, 3, 4], 5, 0, 5) == 10",
        "num_ids": 2191,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Return a new tuple containing the elements from index m to n-1\n    in the input tuple.\n    \"\"\"\n    # create a new empty tuple\n    result = ()\n    \n    # iterate over the indices from m to n-1\n    for i in range(m, n):\n        # append the i-th element of the input tuple to the result tuple\n        result += (tuplex[i],)\n    \n    return result\n",
        "test": "assert colon_tuplex(('a', 'b', 'c', 'd', 'e'), 0, 5) == ('a', 'b', 'c', 'd', 'e') # check if it returns the whole tuple when m=0 and n=len(tuplex)",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 1) == [18]",
        "num_ids": 1409,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(3, 5) == 5",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\") # test with a string containing all alphabets",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Finding the leftmost unset bit\n    return n | (n + 1)\n",
        "test": "assert set_left_most_unset_bit(0b0000) == 0b0001 ",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi * r ** 2 * h) / 3\n    return volume\n",
        "test": "assert volume_cone(0, 0) == 0",
        "num_ids": 816,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # initialize a variable to store the highest power of 2\n    max_power = 0\n    \n    # loop through the numbers 1 to n\n    for i in range(1, n+1):\n        # check if the current number is a power of 2\n        if i & (i-1) == 0:\n            # if it is a power of 2, update the max_power variable\n            max_power = i\n            \n    # return the max_power variable\n    return max_power\n",
        "test": "assert highest_Power_of_2(16) == 16",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the n'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev1, prev2 = 2, 1\n        for i in range(2, n+1):\n            curr = prev1 + prev2\n            prev1, prev2 = prev2, curr\n        return prev2\n",
        "test": "assert find_lucas(0) == 2 ",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Applies a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(element) for element in list_]",
        "test": "assert add_string([1,2,3], \"{0:.2f}\") == ['1.00', '2.00', '3.00']",
        "num_ids": 927,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 1635,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation\n    f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1, \"Test case 1 failed\"",
        "num_ids": 990,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = []\n    for lst in input_list:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1, 2], [3, 4], [5, 6, 7]]) == [5, 6, 7]",
        "num_ids": 958,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to keep track of character counts\n    char_counts = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is not in the dictionary yet, add it with a count of 1\n        if char not in char_counts:\n            char_counts[char] = 1\n        # otherwise, increment the count for that character\n        else:\n            char_counts[char] += 1\n    \n    # loop through the string again to find the first non-repeated character\n    for char in str1:\n        # if the count for this character is 1, return it as the first non-repeated character\n        if char_counts[char] == 1:\n            return char\n    \n    # if no non-repeated characters were found, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"aabbcdef\") == \"c\"",
        "num_ids": 1224,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char('aa') == True",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    # sort the numbers in ascending order\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # find the median by checking the length of the list and returning the middle value\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    \n    return median\n",
        "test": "assert median_numbers(1, 2, 3) == 2, \"The median of 1, 2, 3 should be 2\"",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Given a list of numbers, this function computes the sum of digits of each number in the list.\n    \"\"\"\n    sums = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sums.append(digit_sum)\n    return sums\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24] ",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    result = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
        "test": "assert bitwise_xor((1, 0, 1), (1, 1, 0)) == (0, 1, 1)  # (1,0,1) XOR (1,1,0) = (0,1,1)",
        "num_ids": 1430,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    # Create an empty dictionary to store unique tuples and their frequency\n    freq_dict = {}\n    \n    # Iterate over the list and create a tuple of the current element and the next element\n    for i in range(len(test_list) - 1):\n        # Create a tuple of the current and next element\n        current_tuple = (test_list[i], test_list[i+1])\n        \n        # Check if the current tuple is already present in the dictionary\n        if current_tuple in freq_dict:\n            # If it is present, increment the frequency count by 1\n            freq_dict[current_tuple] += 1\n        else:\n            # If it is not present, add the current tuple to the dictionary with a frequency count of 1\n            freq_dict[current_tuple] = 1\n    \n    # Return the number of unique tuples in the list\n    return len(freq_dict)\n",
        "test": "assert extract_freq([(1, 2), (3, 4), (5, 6), (7, 8), (1, 2)]) == 4",
        "num_ids": 1534,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples((1, 2, 3), (4, 5)) == (5, 7)",
        "num_ids": 1351,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a Python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(2, 5) == 2",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1,2,3,4,5),3) # returns True",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "test": "assert find_Parity(0) == 'even' # should return 'even'",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string so that we can manipulate its digits\n    num_str = str(n)\n    # Convert the string to a list of digits so that we can rearrange them\n    digits = [int(d) for d in num_str]\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Join the sorted digits back to a string and convert it back to an integer\n    next_bigger = int(''.join(str(d) for d in digits))\n    # Return the next bigger number\n    return next_bigger\n",
        "test": "assert rearrange_bigger(0) == 0",
        "num_ids": 1649,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            pair = (nums1[i] + nums2[j], nums1[i], nums2[j])\n            if len(heap) < k:\n                heapq.heappush(heap, pair)\n            else:\n                if pair < heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, pair)\n    return [(pair[1], pair[2]) for pair in heap]\n",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 0) == []",
        "num_ids": 2789,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if min_product is None or product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 24 # expected output is 24",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1, len(listval)):\n        if isinstance(listval[i], (int, float)):\n            if listval[i] < min_value:\n                min_value = listval[i]\n    return min_value\n",
        "test": "assert min_val([1,2,3,4,5]) == 1",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def snake_to_camel(word):\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])\n",
        "test": "assert snake_to_camel(\"the_stealth_warrior\") == \"theStealthWarrior\"",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for tup in list1:\n        if n < len(tup):\n            return tup[n]\n    return None\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 3) == None",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # convert both lists to sets for faster lookup\n    set1 = set(list1)\n    set2 = set(list2)\n    # check if any value in set2 is in set1\n    return any(x in set1 for x in set2)\n",
        "test": "assert overlapping([1, 2, 3], [4, 5, 6]) == False ",
        "num_ids": 885,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    # return the product of first two elements\n    return arr[0] * arr[1]\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20 ",
        "num_ids": 1146,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elements = set()\n    for tup in Input:\n        first_elements.add(tup[0])\n    common_elements = []\n    for elt in first_elements:\n        count = 0\n        for tup in Input:\n            if tup[0] == elt:\n                count += 1\n        if count > 1:\n            common_elements.append(elt)\n    return common_elements\n",
        "test": "assert group_tuples([]) == []",
        "num_ids": 1725,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Find_Max(lst):\n    '''\n    Write a Python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max(['hello', 'world', 'python', 'programming']) == 'programming' # max element is 'programming' and length is 11",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # round every number in the list\n    rounded_list = [round(num) for num in list1]\n    \n    # calculate the sum of the rounded numbers\n    total_sum = sum(rounded_list)\n    \n    # multiply the sum by the length of the list and return the result\n    return total_sum * len(list1)\n",
        "test": "assert round_and_sum([1,2,3]) == 18 ",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum\n",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 972,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    result = \"\"\n    for elem in test_tup:\n        result += elem + delimiter\n    return result[:-1]\n",
        "test": "assert concatenate_tuple((\"Hello\", \"world\", \"!\")), \"Hello!world!\" ",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear(('abcde', 'fghi', 'jklmno')) == ('e', 'i', 'o')",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1,2],[3,4],[2,3],[2,1]],2) == 3",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    # initialize an empty list to store odd numbers\n    odd_nums = []\n    \n    # iterate through the input list\n    for num in nums:\n        # if the number is odd, append it to the odd_nums list\n        if num % 2 != 0:\n            odd_nums.append(num)\n    \n    # return the list of odd numbers\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5] ",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        new_date = f\"{day}-{month}-{year}\"\n        return new_date\n    else:\n        return None\n",
        "test": "assert change_date_format('2021-10-31') == '31-10-2021'",
        "num_ids": 1249,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([4, 1, 3, 2]) == [1, 2, 3, 4]",
        "num_ids": 1325,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n",
        "test": "assert and_tuples((True, False, True), (False, True, False)) == (False, False, False)",
        "num_ids": 1011,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -1 * b/2 * a\n    return directrix\n",
        "test": "assert parabola_directrix(1, 2, 3) == -1  # Example usage of the function with given parameters. ",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1,2,3], [4,5,6]) == False",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    median = area / height\n    return median\n",
        "test": "assert median_trapezium(1, 1, 1) == 1.0 ",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False\n",
        "test": "assert check_greater([10,20,30,40,50], 40) == True",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = 'a[b]+'\n    return bool(re.search(pattern, text))\n",
        "test": "assert text_match_one(\"ab\") == True",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 532,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def neg_nos(list1):\n    '''\n    Returns a new list containing only the negative numbers from the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1,2,3,-4,-5]) == [-4,-5]",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for i in str1:\n        if str1.count(i) % 2 == 0:\n            result += i\n    return result\n",
        "test": "assert remove_odd('') == '' ",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][::-1], test_list[j][::-1]) == (test_list[j], test_list[i]):\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2), (2,3), (3,4)]) == 0, \"no bidirectional pairs\"",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def multiple_to_single(L):\n    '''\n    Join a list of multiple integers into a single integer.\n    '''\n    # Convert the list of integers to a string and join them with an empty separator\n    result = ''.join(str(n) for n in L)\n    # Convert the resulting string to an integer\n    return int(result)\n",
        "test": "assert multiple_to_single([1,2,3]) == 123",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Using regex to find all the adverbs in the given text\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    \n    # If no adverbs are found, return None\n    if not adverbs:\n        return None\n    \n    # Find the positions of the adverbs in the given text\n    positions = []\n    for adverb in adverbs:\n        position = text.find(adverb)\n        positions.append(position)\n    \n    # Return the first adverb and its position in the given text\n    return adverbs[0], positions[0]\n",
        "test": "assert find_adverb_position(\"The brown fox jumps over the dog.\") == None ",
        "num_ids": 1476,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area\n",
        "test": "assert surfacearea_cube(3) == 54, \"The surface area of a cube with side length 3 is not 54.\"",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1 # since all numbers are positive",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_neg(list1):\n    largest_neg_num = None\n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None or num > largest_neg_num:\n                largest_neg_num = num\n    return largest_neg_num\n",
        "test": "assert largest_neg([5, 10, -3, 2]) == -3 ",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        result.append(t[:K])\n    return result",
        "test": "assert trim_tuple([(1,2,3,4,5), (6,7,8,9,10)], 3) == [(1, 2, 3), (6, 7, 8)]",
        "num_ids": 1680,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "test": "assert index_multiplication((2, 3, 4), (5, 6, 7)) == (10, 18, 28)",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function counts the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    result = {}\n    for item in lst:\n        result[item] = count_dict[item]\n    return result\n",
        "test": "assert count_Occurrence(('a', 'b', 'c'), ['a', 'b']) == Counter({'a': 1, 'b': 1})",
        "num_ids": 1489,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125] ",
        "num_ids": 860,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize variables\n    sum = 0\n    i = 0\n    \n    # loop through the first n perrin numbers and add them to the sum\n    while i < n:\n        sum += perrin(i)\n        i += 1\n    \n    return sum\n\ndef perrin(n):\n    '''\n    Function to calculate the nth perrin number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return perrin(n//2) + 1\n    else:\n        return 2*perrin(n//2) + 1",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted = []\n    for string in str_list:\n        if len(string) == size:\n            extracted.append(string)\n    return extracted\n",
        "test": "assert extract_string(['foo', 'bar', 'baz'], 0) == []",
        "num_ids": 933,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2\n",
        "test": "assert remove_whitespaces(\"Hello world\") == \"Helloworld\"",
        "num_ids": 729,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function returns the loss amount on a sale if the given amount has loss else returns 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(1000, 1000) == 0",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i*n//i % 2 == 0:\n                sum += i*n//i\n            if (n//i) % 2 == 0:\n                sum += n//i\n    return sum",
        "test": "assert sumofFactors(0) == 0, \"Incorrect sum of factors of 0\"",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'  # regex pattern to match words containing 'z'\n    matches = re.findall(pattern, text)  # find all matches in text\n    return matches\n",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Create a dictionary to store the number of days in each month\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    # Check if the given month number is in the dictionary\n    if monthnum2 in month_days:\n        # If the given month number is in the dictionary, check if it has 31 days\n        if month_days[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == 1, \"The month number 1 should contain 31 days\"",
        "num_ids": 1343,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"]",
        "num_ids": 1067,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = len(lst)\n    min_lst = None\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_lst = lst[i:j]\n            if len(sub_lst) < min_len:\n                min_len = len(sub_lst)\n                min_lst = sub_lst\n    return min_lst\n",
        "test": "assert Find_Min([1,2,3,4,5]) == [1]",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert rectangle_area(5, 10) == 50",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result",
        "test": "assert remove_uppercase('hello world') == 'hello world'",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7]",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"This is a test string\") != 5",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations of the elements in the input list.\n    \n    Args:\n    list1 (list): List of elements\n    \n    Returns:\n    list: List of all possible combinations of the elements in the input list\n    \"\"\"\n    from itertools import combinations\n    # create a list of all possible combinations of the elements in the input list\n    comb = list(combinations(list1, r=len(list1)))\n    # create a list to store all possible combinations\n    comb_list = []\n    # loop through each combination and append it to comb_list\n    for i in range(len(comb)):\n        comb_list.append(list(comb[i]))\n    # return the list of all possible combinations\n    return comb_list ",
        "test": "assert combinations_list([1]) == [[1]]",
        "num_ids": 1216,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_subarray_product(arr):\n    # Initialize variables\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the current element is positive, multiply it with the max product\n        # to increase the product and update the min product\n        if arr[i] > 0:\n            max_product = max(arr[i], max_product * arr[i])\n            min_product = min(arr[i], min_product * arr[i])\n        # If the current element is negative, multiply it with the min product\n        # to decrease the product and update the max product\n        else:\n            max_product = max(arr[i], max_product * arr[i])\n            min_product = min(arr[i], min_product * arr[i])\n        # Update the result\n        result = max(result, max_product)\n\n    return result\n",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 1717,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    else:\n        values = list(dict.values())\n        return all(values[0] == value for value in values[1:])\n",
        "test": "assert check_value({1: 2, 3: 2, 4: 2}, 2) == True",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n",
        "test": "assert drop_empty({'a': 1, 'b': None, 'c': [], 'd': '', 'e': {}, 'f': ()}).get('a') == 1  # should return 1",
        "num_ids": 848,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_product(arr):\n    max_product = 0\n    if len(arr) == 0:\n        return 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product([1, 2, 3]) == 6",
        "num_ids": 1302,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def add_pairwise(test_tup):\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result\n",
        "test": "assert add_pairwise((1, 1, 1, 1)) == (2, 2, 2, 1) # should return (2, 2, 2, 1)",
        "num_ids": 1276,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([2, 4, 6], 3) == 0",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Check if the length of the list is 1 or less\n    if len(l) <= 1:\n        return False\n\n    # Sort the list in ascending order\n    l.sort()\n\n    # Check if the list contains consecutive numbers\n    for i in range(len(l) - 1):\n        if l[i + 1] - l[i] != 1:\n            return False\n    \n    # If all elements are consecutive, return True\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3]) == True",
        "num_ids": 872,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return [tuple(sorted(t)) for t in intersection]\n",
        "test": "assert tuple_intersection([(1,2),(3,4)], [(3,4),(5,6)]) == [(3,4)]",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of a character in a string with a new character.\n    '''\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char(\"hello world\", \"o\", \"0\") == \"hell0 w0rld\"",
        "num_ids": 794,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict\n",
        "test": "assert sort_counter(Counter({'a': 3, 'b': 1, 'c': 2})) == Counter({'b': 1, 'c': 2, 'a': 3})",
        "num_ids": 1336,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # sort the array in ascending order\n    nums.sort()\n    # return the sum of the first and last elements\n    return nums[0] + nums[-1]",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6 # Since the sum of smallest and largest number in the array is 6",
        "num_ids": 1269,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_lower(string):\n    return string.lower() ",
        "test": "assert is_lower(\"HELLO WORLD\") == \"hello world\"",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return re.sub(pattern, '', str1)",
        "test": "assert remove_lowercase('') == ''",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def first_digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(100) == 1",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n        \n    return sum_of_cubes - sum_of_natural_numbers\n",
        "test": "assert difference(0) == 0, \"Error in finding the difference of 0 numbers\"",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Odd_Pair(A, N):\n    # initialize a count of odd-length pairs\n    count = 0\n    # iterate over all pairs of elements in A\n    for i in range(N):\n        for j in range(i+1, N):\n            # compute the xor of the pair\n            xor = A[i] ^ A[j]\n            # check if the xor is odd\n            if xor % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1,3,5,7,9],5) == 0, \"Incorrect output\"",
        "num_ids": 1071,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert toggle_string(\"hello\") == \"HELLO\"",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n    for i in range(max(len(n1_digits), len(n2_digits))):\n        if i < len(n1_digits) and i < len(n2_digits):\n            distance += abs(n1_digits[i] - n2_digits[i])\n        elif i < len(n1_digits):\n            distance += n1_digits[i]\n        else:\n            distance += n2_digits[i]\n    return distance\n",
        "test": "assert digit_distance_nums(1000, 2000) == 1",
        "num_ids": 1647,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_sub_array_sum(a, size):\n    # Initialize the maximum sublist sum and the current sublist sum\n    max_sum = a[0]\n    curr_sum = a[0]\n    \n    # Iterate over the list and update the maximum sublist sum and the current sublist sum\n    for i in range(1, size):\n        curr_sum = max(curr_sum + a[i], a[i])\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum\n",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15",
        "num_ids": 1424,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list\n",
        "test": "assert union_elements((1,2,3), (2,3,4)) == sorted([1, 2, 3, 4])",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len\n",
        "test": "assert Find_Max_Length([[1, 2], [3, 4], [5, 6]]) == 2",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert extract_values(\"There are no quotation marks here.\") == []",
        "num_ids": 918,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10 # should return 10",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o'] ",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total\n",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 18,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True ",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True # test the function with a sorted list",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n",
        "test": "assert empty_list(3) == [ {}, {}, {} ] # check if it creates a list of 3 empty dictionaries",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "test": "assert sort_sublists([['hello', 'world'], ['apple', 'banana', 'orange']]) == [['hello', 'world'], ['apple', 'banana', 'orange']]",
        "num_ids": 1135,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([]) == [] # test case 3",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Calculates the surface area of a cylinder.\n\n    Parameters:\n        r (float): The radius of the cylinder.\n        h (float): The height of the cylinder.\n\n    Returns:\n        float: The surface area of the cylinder.\n    '''\n\n    # Calculate the top and bottom surface areas\n    top_bottom_area = 2 * 3.14 * r * r\n\n    # Calculate the side surface areas\n    side_area = 2 * 3.14 * r * h\n\n    # Add the top and bottom surface areas to the side surface areas\n    surface_area = top_bottom_area + 2 * side_area\n\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(0,1) == 0, \"The surface area of a cylinder is incorrect.\"",
        "num_ids": 1301,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3],[1,2]) == True",
        "num_ids": 1113,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Base case\n    if n == 0:\n        return 1\n    \n    # Reduce the number to the last digit\n    n %= 10\n    \n    # Iterate from n-1 to 1\n    for i in range(n-1, 0, -1):\n        n *= i\n        \n        # Reduce the number to the last digit\n        n %= 10\n        \n    return n\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        return \"The lists are not of the same length.\"\n    else:\n        interleaved_list = []\n        for i in range(len(list1)):\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[i])\n            interleaved_list.append(list3[i])\n        return interleaved_list\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 1329,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    # Create a set of common elements\n    common_elements = set(test_tup1) & set(test_tup2)\n\n    # Create a list of dissimilar elements\n    dissimilar_elements = []\n    for element in test_tup1 + test_tup2:\n        if element not in common_elements:\n            dissimilar_elements.append(element)\n\n    return tuple(dissimilar_elements)\n",
        "test": "assert find_dissimilar((1, 2, 3, 4, 5), (1, 2, 3, 6, 7)) == (4, 5, 6, 7)",
        "num_ids": 1499,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if type(item) == tuple:\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert even_ele((1,2,3,(4,5,6,7),8), lambda x: x % 2 == 0) == (2, (4, 6), 8) ",
        "num_ids": 1166,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the slant height\n    h = (b ** 2 + s ** 2) ** 0.5\n    # calculate the surface area\n    area = 2 * b * s + 2 * b * b + 2 * b * h\n    return area\n",
        "test": "assert surface_Area(0,1) == 0.0, \"Incorrect surface area calculation\"",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True ",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    for match in matches:\n        word = match.group(0)\n        start = match.start()\n        end = match.end()\n        print(f\"Adverb found: {word}, positions: {start}-{end}\")\n",
        "test": "assert find_adverbs(\"The car drove slowly and quickly\") == ([\"slowly\"], [8])",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # create a max heap of size n\n    max_heap = []\n    for item in items:\n        # push item onto heap\n        heapq.heappush(max_heap, item)\n        # check if heap size exceeds n\n        if len(max_heap) > n:\n            # remove the smallest item from the heap\n            heapq.heappop(max_heap)\n    # return the items in descending order of price\n    return sorted(max_heap, reverse=True)\n",
        "test": "assert expensive_items([(1, 5), (2, 3), (3, 2), (4, 6), (5, 4)], 0) == []",
        "num_ids": 1765,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    first_part.extend(second_part)\n    return first_part\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5, 6, 7, 8], 0) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 1231,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    # find the smallest and largest values in the list\n    smallest = min(nums)\n    largest = max(nums)\n    \n    # return the difference between the two values\n    return largest - smallest\n",
        "test": "assert big_diff([1,2,3,4,5]) == 4",
        "num_ids": 876,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if int(i ** 0.5)**2 == i:\n            result.append(i)\n    return result\n",
        "test": "assert perfect_squares(10, 1) == []",
        "num_ids": 1923,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates to rectangular coordinates.\n    \"\"\"\n    rect = cmath.rect(r, theta)\n    return rect.real, rect.imag",
        "test": "assert polar_rect(1, 0) == (1, 0)",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    if len(newList) < 2:\n        print(\"List must have at least two elements\")\n        return newList\n    \n    first_element = newList[0]\n    last_element = newList[-1]\n    \n    newList[0] = last_element\n    newList[-1] = first_element\n    \n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]  # expected output [5, 2, 3, 4, 1]",
        "num_ids": 1071,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Calculates the binomial coefficient C(n,k) using the multiplicative formula.\n    \"\"\"\n    result = 1\n    for i in range(min(k, n-k)):\n        result *= n - i\n        result //= i + 1\n    return result\n\ndef sum_product_of_binomial_coefficients(n):\n    \"\"\"\n    Calculates the sum of the product of consecutive binomial co-efficients up to C(n, n/2).\n    \"\"\"\n    sum = 0\n    for k in range(n//2 + 1):\n        sum += binomial_Coeff(n, k) * binomial_Coeff(n, k+1)\n    return sum\n\nprint(sum_product_of_binomial_coefficients(5)) # Output: 15\nprint(sum_product_of_binomial_coefficients(10)) # Output: 410\n",
        "test": "assert binomial_Coeff(5,3) == 10 #Test case 1",
        "num_ids": 1197,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    octets = ip.split('.')\n    new_octets = []\n    for octet in octets:\n        if octet == '0':\n            new_octets.append('0')\n        else:\n            new_octets.append(str(int(octet)))\n    return '.'.join(new_octets)\n",
        "test": "assert removezero_ip(\"192.168.010.001\") == \"192.168.10.1\"",
        "num_ids": 1281,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    if len(even) == 0 or len(odd) == 0:\n        return None\n    else:\n        return even[0] - odd[0]\n",
        "test": "assert diff_even_odd([1, 3, 5, 7, 9]) == None ",
        "num_ids": 1404,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = str1[::-1]\n    str2 = str2[::-1]\n    n = len(str1)\n    m = len(str2)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = i\n    for j in range(m + 1):\n        dp[0][j] = j\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j])\n    return dp[n][m]",
        "test": "assert min_Swaps('10101011','10101011') == 0, \"Incorrect number of swaps\"",
        "num_ids": 1683,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        size = sys.getsizeof(tup)\n        total_size += size\n    return total_size\n",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return min(arr1[i], arr2[j])\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return min(arr1[i], arr2[j])\n            k -= 1\n            j += 1\n    while i < len(arr1):\n        if k == 1:\n            return arr1[i]\n        k -= 1\n        i += 1\n    while j < len(arr2):\n        if k == 1:\n            return arr2[j]\n        k -= 1\n        j += 1\n",
        "test": "assert find_kth([1, 3, 5], [2, 4, 6], 1) == 1",
        "num_ids": 1927,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def armstrong_number(number):\n    # initialize sum variable to 0\n    sum = 0\n\n    # find the number of digits in the given number\n    length = len(str(number))\n\n    # separate each digit of the number and add it to the sum\n    for digit in str(number):\n        sum += int(digit) ** length\n\n    # check if the sum is equal to the given number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 960,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum / number\n    return sum, avg\n",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 768,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_Even(n):\n    '''\n    Write a Python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(4) == True, \"Error: is_Even(4) should be True\"",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a Python function to find the first repeated character in a given string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import itertools\n\ndef get_ludic(n):\n    '''\n    Returns a list of all lucid numbers smaller than or equal to n.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        # convert number to string and list of digits\n        str_i = str(i)\n        digits = [int(d) for d in str_i]\n        # generate all permutations of digits\n        perms = set([''.join(p) for p in itertools.permutations(str_i)])\n        # check if each permutation is also a palindrome\n        for perm in perms:\n            if perm == perm[::-1] and int(perm) == i:\n                lucids.append(i)\n    return lucids\n",
        "test": "assert get_ludic(0) == [], \"Error: get_ludic(0) returns incorrect result\"",
        "num_ids": 3017,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # split string into list of words\n    reversed_words = words[::-1] # reverse the list of words\n    reversed_string = ' '.join(reversed_words) # join the reversed words with spaces\n    return reversed_string\n",
        "test": "assert reverse_words('hello world') == 'world hello' ",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            return False\n    \n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"hello world\", \".*\") == (\"hello world\", 0, 11)",
        "num_ids": 1196,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(0)\n        for j in range(i):\n            bell_numbers[i] += bell_numbers[j]*bell_numbers[i-j-1]\n    return bell_numbers[n]\n",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    # create a new list to store the elements\n    new_list = []\n    \n    # loop through the original list and add the elements to the new list\n    for i in range(len(list1)):\n        if i != L-1:\n            new_list.append(list1[i])\n    \n    # return the new list\n    return new_list\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 1210,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = None\n    for row in test_list:\n        if len(row) < N:\n            # Skip rows that don't have enough columns to get the Nth element\n            continue\n        value = row[N-1]\n        if max_value is None or value > max_value:\n            max_value = value\n    return max_value\n",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == None",
        "num_ids": 1396,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1,2],[3,4],[5,6],[7,8]]) == [[1,3,5,7],[2,4,6,8]]",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][1]\n    return cumulative_sum\n",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 6, 10, 15, 21, 28, 36, 45]",
        "num_ids": 1190,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        result.append(sum(tup)/len(tup))\n    return result\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [2.0, 5.0, 8.0] ",
        "num_ids": 1508,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must be of the same length\")\n\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n\n    return tuple(result)",
        "test": "assert tuple_modulo((2, 4, 6), (3, 5, 7)) == (2, 4, 6) # test case 1",
        "num_ids": 1394,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def min_Jumps(steps, d):\n    if d == 1:\n        return 1\n    if d == 0:\n        return 0\n    if steps == 0:\n        return -1\n    if steps < d:\n        return -1\n    if steps == d:\n        return 1\n\n    jump1 = min_Jumps(steps - 1, d - 1)\n    jump2 = min_Jumps(steps - 1, d)\n    jump3 = min_Jumps(steps - 1, d + 1)\n\n    return min(jump1, jump2, jump3) + 1",
        "test": "assert min_Jumps(1, 1) == 1",
        "num_ids": 1309,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i]/nums2[i])\n    return res\n",
        "test": "assert div_list([2, 4, 6], [2, 2, 2]) == [1, 2, 3] # Test case 1",
        "num_ids": 1300,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty string to store non-numeric characters\n    non_num = \"\"\n    # Initialize an empty string to store numeric characters\n    num = \"\"\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a digit, add it to the numeric string\n        if char.isdigit():\n            num += char\n        # Else, add it to the non-numeric string\n        else:\n            non_num += char\n    \n    # Return the concatenated strings\n    return non_num + num\n",
        "test": "assert move_num(\"a1b2c3\") == \"abc123\"",
        "num_ids": 1159,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def largest_subset(a):\n    # create a dictionary to store the size of the largest subset for each element in the list\n    subsets = {}\n    for num in a:\n        subsets[num] = 1\n    \n    # for each pair of numbers, check if they are divisible and update the largest subset size for the larger number\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0:\n                subsets[a[j]] = max(subsets[a[j]], subsets[a[i]]+1)\n    \n    # find the size of the largest subset for the whole list\n    max_subset = 0\n    for num in a:\n        max_subset = max(max_subset, subsets[num])\n    \n    return max_subset\n",
        "test": "assert largest_subset([2, 4, 6, 8, 10, 12]) == 3, \"largest_subset([2, 4, 6, 8, 10, 12]) should return 3\"",
        "num_ids": 1876,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2-1] + arr2[n//2-1])/2\n    else:\n        return arr1[n//2]\n",
        "test": "assert get_median([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 5) == 3",
        "num_ids": 1927,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    \n    # Create an empty list to store the results\n    result = []\n    \n    # Loop over each number in the list\n    for num in nums:\n        # Compute the n-th power of the number and append it to the result list\n        result.append(num ** n)\n    \n    # Return the result list\n    return result\n",
        "test": "assert nth_nums([1,2,3], 2) == [1,4,9] # check for correct output for list [1,2,3] and n = 2",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper('HELLO') == 'HELLO'",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 907,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r**2\n    return area",
        "test": "assert triangle_area(0) == 0, \"The area of the largest triangle for a radius of 0 is 0\"",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i] != i+1:\n            return i+1\n    return end+1\n",
        "test": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 11",
        "num_ids": 1320,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of numbers as input and returns two lists, one containing only the even numbers and the other containing only the odd numbers.\n    '''\n    even_lst = []\n    odd_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n        else:\n            odd_lst.append(num)\n    return even_lst, odd_lst\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == ([2, 4], [1, 3, 5]) ",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 630,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    \n    # List to store all adjacent coordinates\n    adj_list = []\n    \n    # Base cases\n    if len(ele) != 2:\n        return \"Invalid input\"\n        \n    if ele[0] < 0 or ele[1] < 0:\n        return \"Invalid input\"\n        \n    if sub:\n        if ele in sub:\n            return adj_list\n            \n    # Iterate over all possible adjacent coordinates\n    for i in range(ele[0]-1, ele[0]+2):\n        for j in range(ele[1]-1, ele[1]+2):\n            # Check if adjacent coordinate is valid and not in sub list\n            if 0 <= i < 2 and 0 <= j < 2 and (i, j) != ele and not sub or (i, j) in sub:\n                adj_list.append((i, j))\n                \n    return adj_list\n",
        "test": "assert adjac((1,2), [(1,1),(1,3),(2,2)]) == [(1,1),(1,3),(2,2)] # expected output [(1,1),(1,3),(2,2)]",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with spaces\n    text = text.replace('_', ' ')\n    return text\n",
        "test": "assert replace_spaces('hello_world') == 'hello world'",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    non_zero_list = []\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n    return non_zero_list + zero_list\n",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1237,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    xor_sum = 0\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            xor_sum ^= (arr[i] ^ arr[j])\n            \n    return xor_sum\n",
        "test": "assert pair_xor_Sum([0, 0, 0, 0, 0], 5) == 0",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "test": "assert heap_sort([]) == []",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n    \"\"\"\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False",
        "test": "assert noprofit_noloss(10,15) == False, \"Expected False, but got True\"",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wc)\n",
        "test": "assert wind_chill(40, -20) == 24, \"Wind chill should be 24 for velocity 40 and temperature -20\"",
        "num_ids": 1175,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam([\"Sarah\", \"Mark\", \"Ben\", \"Alex\", \"Emily\"]) == 17",
        "num_ids": 1138,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)\n",
        "test": "assert remove_parenthesis(\"Hello, (this) is a (test) string\") == \"Hello,  is a  string\"",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Returns the nth nonagonal number.\n    \"\"\"\n    # Initialize the sum of the first n triangular numbers\n    triangular_sum = 0\n    # Loop through the first n triangular numbers and add them to the sum\n    for i in range(1, n+1):\n        triangular_sum += i * (i + 1) // 2\n    # Calculate the square root of the sum of the first n triangular numbers\n    sqrt_triangular_sum = triangular_sum ** 0.5\n    # Check if the square root is an integer and return the nonagonal number\n    if sqrt_triangular_sum.is_integer():\n        return int(sqrt_triangular_sum)\n    # Otherwise, return None\n    else:\n        return None\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Using regex to match the pattern\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle(\"hello\") == False",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    start = 0\n    end = k\n    while start < end:\n        input[start], input[end-1] = input[end-1], input[start]\n        start += 1\n        end -= 1\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 0) == [1,2,3,4,5] # Test for reversing no elements of the array ",
        "num_ids": 1549,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a list to store the tuple and dictionary\n    result = list(test_tup)\n    \n    # Add the dictionary to the result list\n    result.append(test_dict)\n    \n    # Convert the result list to a tuple\n    final_result = tuple(result)\n    \n    # Return the final result\n    return final_result\n",
        "test": "assert add_dict_to_tuple((\"a\", 1), {\"b\": 2}) == (\"a\", 1, {\"b\": 2})",
        "num_ids": 1348,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[N-1][N-1] / (N*N)\n",
        "test": "assert maxAverageOfPath([[1]]) == 1, \"Incorrect output for maxAverageOfPath([[1]])\"",
        "num_ids": 2568,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students\n",
        "test": "assert filter_data({'Alice':(1.60, 50), 'Bob':(1.75, 65), 'Charlie':(1.70, 60)}, 1.70, 55) == {'Bob':(1.75, 65)}",
        "num_ids": 1120,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [3, 2, 1]) == 1",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so we can iterate over its digits\n    base_str = str(base)\n    # Initialize a variable to store the sum of the digits\n    total = 0\n    # Iterate over the digits of the base, converting each one back to an integer and raising it to the power\n    for digit in base_str:\n        total += int(digit) ** power\n    # Return the total sum of the digits raised to the power\n    return total\n",
        "test": "assert power_base_sum(100, 1) == 0+1+0+0+0+0+0+0+0+0+0+0+0",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Using regex to find values between quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n\n    # Returning the matches as a list\n    return matches\n",
        "test": "assert extract_quotation('The quick brown \"fox jumps\" over the \"lazy\" dog.') == ['fox jumps', 'lazy']",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # create an empty tuple to store the result\n    result_tup = ()\n    \n    # iterate through the input tuple and multiply adjacent elements\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    \n    return result_tup\n",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12)",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_nums = []\n    for key, group in groupby(nums):\n        new_nums.append(key)\n    return new_nums\n",
        "test": "assert consecutive_duplicates([1,2,2,3,3,3,4,4,4,4,5]) == [1,2,3,4,5]",
        "num_ids": 1421,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_area = math.pi * r * slant_height\n\n    return lateral_area\n",
        "test": "assert lateralsurface_cone(2.5,5) == 4*math.sqrt(2*2.5**2 + 5**2)",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 732,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    # use regular expression to match spaces, commas or dots and replace with a colon\n    text = re.sub(r'[ ,.]', ':', text)\n    \n    return text\n",
        "test": "assert replace_specialchar('The quick brown fox jumps over the lazy dog.') == 'The:quick:brown:fox:jumps:over:the:lazy:dog:'",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 2, 3, 4, 5, 5, 6], 2) == 1",
        "num_ids": 1739,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    \n    for i in range(n):\n        temp = 1\n        for j in range(i, n):\n            temp *= arr[j]\n            result += temp\n            \n    return result\n",
        "test": "assert sum_Of_Subarray_Prod([-2,0,2]) == 0, \"Test case 4 failed\"",
        "num_ids": 1772,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    mask = ~(1 << (len(bin(n)) - 3)) & (1 << len(bin(n)) - 1) - 1\n    return n ^ mask\n",
        "test": "assert set_middle_bits(0b00000001) == 0b00000011, \"Incorrect output\"",
        "num_ids": 1905,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)",
        "test": "assert left_insertion([1,2,3,4], 0) == 0  # insertion at index 0",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str(\"Apple\") == True ",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (1 / (1 - 2**(-n+1)))\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef find_Index(n):\n    i = 1\n    count = 0\n    while True:\n        t = i * (i + 1) // 2\n        t_str = str(t)\n        if len(t_str) == n:\n            count += 1\n            if count == 1:\n                first_index = i\n        elif len(t_str) > n:\n            break\n        i += 1\n    return first_index\n",
        "test": "assert find_Index(2) == 4",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n\n    # Iterate over the tuple, adding adjacent elements to the dictionary\n    for i in range(len(test_tup) // 2):\n        result_dict[test_tup[2 * i]] = test_tup[2 * i + 1]\n\n    return result_dict\n",
        "test": "assert tuple_to_dict(('a', 'b')) == {'a': 'b'}",
        "num_ids": 1313,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert the string to set to remove duplicates\n    set_s = set(s)\n    # if length of set is 1, then all characters are same\n    if len(set_s) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 822,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the altitude of each triangle from the base (side)\n    alt_1 = math.sqrt(3) * side / 2\n    alt_2 = math.sqrt(3) * side / 2\n    alt_3 = math.sqrt(3) * side / 2\n\n    # Calculate the area of each triangle using the altitude and base (side)\n    area_1 = 0.5 * side * alt_1\n    area_2 = 0.5 * side * alt_2\n    area_3 = 0.5 * side * alt_3\n\n    # Sum up the areas of all three triangles to get the area of the tetrahedron\n    area_tetrahedron = area_1 + area_2 + area_3\n\n    return area_tetrahedron\n",
        "test": "assert area_tetrahedron(12) == 48.0, \"Test case 4 failed\" ",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    m = m % n\n    return lst[-m:] + lst[:-m]\n",
        "test": "assert rotate_right([1], 1) == [1]",
        "num_ids": 1071,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False # all values are present",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for i in range(startnum, endnum+1):\n        str_num = str(i)\n        divisible = True\n        for digit in str_num:\n            if i % int(digit) != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(i)\n    return result\n",
        "test": "assert divisible_by_digits(1, 10000) == 128",
        "num_ids": 1952,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a / 360) * math.pi\n",
        "test": "assert sector_area(4, 361) == None",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    maxLength = 0\n    index = 0\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                    if L[i][j][k] > maxLength:\n                        maxLength = L[i][j][k]\n                        index = i\n                else:\n                    L[i][j][k] = 0\n    return X[index-maxLength:index] ",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AXGTXAYB\") != \"AGGTAB\"",
        "num_ids": 3188,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'([A-Z][a-z]+)')\n    return pattern.sub(r'\\1 ', str1)\n",
        "test": "assert capital_words_spaces(\"THISisAnExample\") == \"THIS is An Example\" ",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sorts a list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "test": "assert sort_numeric_strings(['10', '3', '2', '5']) == ['2', '3', '5', '10']",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1, 2), (3, 4)], (5, 6)) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i < len(arr):\n        left = 2*i + 1\n        right = 2*i + 2\n        if left < len(arr) and arr[i] > arr[left]:\n            return False\n        if right < len(arr) and arr[i] > arr[right]:\n            return False\n        return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n    return True\n\ndef check_min_heap(arr):\n    '''\n    This function takes an array as input and returns True if it represents a min heap, otherwise False.\n    '''\n    return check_min_heap_helper(arr, 0)\n",
        "test": "assert check_min_heap_helper([4, 10, 3, 5, 12], 0) == False # test case 2",
        "num_ids": 1677,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        jacobsthal = 2\n        for i in range(3, n+1):\n            jacobsthal = 2 * jacobsthal - 1\n        return jacobsthal ",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1416,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    return sorted(test_list, key=lambda x: x[1])[:K]\n",
        "test": "assert min_k([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]",
        "num_ids": 1849,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5]) == [] ",
        "num_ids": 1522,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = min(numbers)\n        numbers.remove(smallest)\n        return min(numbers)\n",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a(b)+\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"abbb\") == True",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    n = len(test_list)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] > test_list[j]:\n                count += 1\n                \n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        # Convert the sublist to a tuple and use it as a key for the dictionary\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists:\n            # If the sublist is already in the dictionary, increment its count\n            sublists[sublist_tuple] += 1\n        else:\n            # If the sublist is not in the dictionary yet, add it with a count of 1\n            sublists[sublist_tuple] = 1\n    return sublists",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1655,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        decimal_parts = num.split(\".\")\n        if len(decimal_parts) == 1:\n            return False\n        else:\n            return len(decimal_parts[1]) <= 2\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal(\"3.14\") == True",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Returns True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    # Count the occurrences of each element in the list\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Check if there is only one distinct element in the list\n    if len(counts) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1]) == True",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort() # Sort the array in ascending order\n    min_diff = abs(arr[1] - arr[0]) # Initialize the minimum difference to the difference between the first two elements\n    for i in range(2, n): # Iterate over the remaining elements\n        diff = abs(arr[i] - arr[i-1]) # Calculate the difference between the current element and the previous element\n        if diff < min_diff: # If the difference is less than the minimum difference, update the minimum difference\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 3, 15, 11, 2], 5) == 1, \"Incorrect minimum difference found\"",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr('12345') == 5",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_polite(n):\n    # Calculate the sum of first n proper divisors of n\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                divisor_sum += i\n            else:\n                divisor_sum += i + n // i\n    # Check if n is a polite number\n    if n == divisor_sum:\n        return True\n    else:\n        return False",
        "test": "assert is_polite(1) == 1",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n",
        "test": "assert pair_wise([1,2,3,4]) == [(1,2), (2,3), (3,4)]",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_pairs_count(arr, sum):\n    pairs = []\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs.append((arr[i], arr[j]))\n                pairs_count += 1\n    return pairs_count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 5) == 2 # there are two pairs with sum 5: (1, 4) and (2, 3)",
        "num_ids": 1372,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1, 2, 3], [1, 2, 3]) == []",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while n > 0:\n        sum += count**4\n        count += 2\n        n -= 1\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1  # expected output = 1^4",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "test": "assert check_expression('()[]{}') == True",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into individual words\n    words = test_str.split()\n    # Remove all words with length k\n    filtered_words = [word for word in words if len(word) != K]\n    # Join the filtered words to form the final string\n    result = ' '.join(filtered_words)\n    return result\n",
        "test": "assert remove_length(\"Hello world\", 4) == \"Hello world\"",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append(match.span())\n    if positions:\n        return positions\n    else:\n        return None\n",
        "test": "assert occurance_substring(\"hello world\", \"world\") == [(6, 11)]",
        "num_ids": 1059,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1,3,5,7]) == True",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Counts the number of characters in a given string that have vowels as their neighbors.\n\n    :param test_str: The string to be searched.\n    :return: The number of characters that have vowels as their neighbors.\n    \"\"\"\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels('') == 0, \"count_vowels('') should be 0\"",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a Python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    return sum(set(arr))\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1210,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    packed_list = []\n    for key, group in groupby(list1):\n        packed_list.append(list(group))\n    return packed_list\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 1451,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts",
        "test": "assert unique_sublists([[1, 2], [2, 3], [1, 2], [4, 5], [4, 5]]) == {(1, 2): 2, (2, 3): 1, (4, 5): 2} ",
        "num_ids": 1346,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # get all possible combinations of tuples from the given list\n    combos = combinations(test_list, 2)\n    \n    # create an empty dictionary to store the combinations of sums\n    sum_dict = {}\n    \n    # iterate over each combination of tuples\n    for combo in combos:\n        # get the sum of the two tuples\n        combo_sum = sum(combo)\n        \n        # if the sum is already in the dictionary, append the current combo to its list\n        if combo_sum in sum_dict:\n            sum_dict[combo_sum].append(combo)\n        # otherwise, create a new list with the current combo as its only element\n        else:\n            sum_dict[combo_sum] = [combo]\n    \n    # return the dictionary of combinations of sums\n    return sum_dict\n",
        "test": "assert find_combinations([(1, 2), (3, 4), (5, 6)]) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 6), (3, 4, 5), (3, 4, 6), (5, 6)] ",
        "num_ids": 3605,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    if divisor_count == 0:\n        divisor_count = 1\n    return divisor_count % 2 == 0\n",
        "test": "assert count_divisors(0) == False # should return False",
        "num_ids": 1095,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1):\n            for k in range(j+1, n+1):\n                subarray = arr[j:k]\n                if len(subarray) % 2 == 1:\n                    total_sum += sum(subarray)\n    return total_sum\n",
        "test": "assert odd_length_sum([1]) == 1, \"Incorrect output\"",
        "num_ids": 1041,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert the red, green and blue values to floats\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # Calculate the minimum and maximum values of r, g, and b\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the difference between max and min values\n    delta = max_value - min_value\n\n    # Calculate the hue value\n    if delta == 0:\n        hue = 0\n    elif max_value == r:\n        hue = ((g - b) / delta) % 6\n    elif max_value == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    # Calculate the saturation value\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_value\n\n    # Calculate the value value\n    value = max_value\n\n    # Convert the hue, saturation, and value values to the range of 0 to 360, 0 to 1, and 0 to 1\n    hue = int(hue * 60)\n    saturation = int(saturation * 100) / 100.0\n    value = int(value * 100) / 100.0\n\n    return hue, saturation, value\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 2099,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def mul_even_odd(list1):\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    return even_num * odd_num\n",
        "test": "assert mul_even_odd([1, 2, 3, 4]) == 12, \"Testcase 2 failed\"",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # remove the parentheses and split the string by comma\n    str_list = test_str.strip('()').split(',')\n    # convert each element of the list to integer and store it in a tuple\n    int_tuple = tuple(int(x) for x in str_list)\n    return int_tuple\n",
        "test": "assert tuple_str_int(\"(1,2,3)\") == (1, 2, 3)",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\n",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 2) == 2",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbbb\")",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_list + [test_str]\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "test": "assert new_tuple([1, 2, 3], \"hello\") == (1, 2, 3, \"hello\")",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([1,2,4,3,5]) == False",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) != tuple:\n            new_tup.append(item)\n    return tuple(new_tup)\n",
        "test": "assert remove_nested((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5) ",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1, 2], [3, 4]]) == 2",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of x in arr. If x is not in arr, returns -1.\n    \"\"\"\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1\n",
        "test": "assert last([1, 2, 3, 4, 5], 1) == 0  # should return 0",
        "num_ids": 1618,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_starta_endb('acd') == False",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n",
        "test": "assert sum_odd(5) == 9",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15, \"Incorrect sum\"",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def left_rotate(n, d):\n    '''\n    This function takes in a number n and an integer d, and returns the left rotated number by d bits.\n    '''\n\n    # Check if d is greater than 32 or not\n    if d > 32:\n        d = d % 32\n\n    # Convert the number to binary string\n    binary_str = bin(n)[2:].zfill(32)\n\n    # Rotate the binary string by d bits to the left\n    rotated_str = binary_str[d:] + binary_str[:d]\n\n    # Convert the rotated string back to integer\n    rotated_num = int(rotated_str, 2)\n\n    return rotated_num\n",
        "test": "assert left_rotate(0, 2) == 0, \"Error: left_rotate(0, 2) should return 0\"",
        "num_ids": 1138,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    elif x != y and y != z and x != z:\n        count = 0\n    \n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 818,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_rotation(arr):\n    if len(arr) == 0:\n        return 0\n\n    # find the index of smallest element in the array using binary search\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        else:\n            end = mid\n\n    # count the number of rotations\n    index_of_smallest = end\n    if index_of_smallest == 0:\n        return 0\n    else:\n        return index_of_smallest",
        "test": "assert count_rotation([0, 1, 2, 3, 4, 5, 6, 7]) == 0, \"Incorrect output for [0, 1, 2, 3, 4, 5, 6, 7]\"",
        "num_ids": 1677,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_perfect_square(1) == True, \"is_perfect_square(1) should be True\"",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([1, 2, 3, 4]) == True",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9] # expected output [6, 7, 8, 9]",
        "num_ids": 1382,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    \n    max_run = max(max_run, current_run)\n    \n    return max_run",
        "test": "assert max_run_uppercase('') == 0 # empty string should return 0",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1",
        "num_ids": 830,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n",
        "test": "assert check_K((\"a\", \"b\", \"c\"), \"d\") == False",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((1, 2, 3), (1, 3, 2)) == False",
        "num_ids": 1048,
        "indeed": true
    }
]