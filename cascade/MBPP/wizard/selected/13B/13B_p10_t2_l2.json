[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n",
        "test": "assert similar_elements([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 1469,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(1) == True",
        "num_ids": 1144,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([1,2,3,4,5,6,7,8,9],5) == [9,8,7,6,5] # n=5",
        "num_ids": 2048,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Power_Of_Two(x):\n    # Check if the number is a power of 2 by checking if it is divisible by 2 but not by 4.\n    return (x & (x - 1)) == 0 and x != 0\n",
        "test": "assert is_Power_Of_Two(4) == True",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"Python is awesome\") == [\"Python\", \"awesome\"]",
        "num_ids": 1310,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares",
        "test": "assert square_nums([1, 2, 3]) == [1, 4, 9] # check if the function returns [1, 4, 9] for input [1, 2, 3]",
        "num_ids": 1277,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_Rotations(s):\n    if not s:\n        return 0\n    s1 = s + s\n    i = 0\n    while s1[i] != s[0]:\n        i += 1\n    return i // len(s)\n",
        "test": "assert find_Rotations(\"\") == 0 ",
        "num_ids": 2271,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def remove_Occ(s, ch):\n    if ch not in s:  # If ch is not present in s\n        return s\n\n    # To remove first occurrence of ch\n    first_index = s.find(ch)\n    if first_index == -1:  # If ch is not found in s\n        return s\n    elif first_index == 0:  # If ch is found at the beginning of s\n        s = s[1:]\n    else:\n        s = s[:first_index] + s[first_index + 1:]\n\n    # To remove last occurrence of ch\n    last_index = s.rfind(ch)\n    if last_index == -1:  # If ch is not found in s\n        return s\n    elif last_index == len(s) - 1:  # If ch is found at the end of s\n        s = s[:-1]\n    else:\n        s = s[:last_index] + s[last_index + 1:]\n\n    return s\n",
        "test": "assert remove_Occ('hello', 'o') == 'hell'",
        "num_ids": 2015,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # First, calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Then, sort the rows based on their sum\n    sorted_rows = [row for _, row in sorted(zip(row_sums, M))]\n    # Finally, return the sorted matrix\n    return sorted_rows\n",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 2526,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(0, 0, 0) == 0",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"lowercase_underscore\") == True",
        "num_ids": 1371,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(4) == 16  # Check for a square with side length 4",
        "num_ids": 830,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string1)\n    list2 = list(string2)\n    result = []\n    for i in list1:\n        if i not in list2:\n            result.append(i)\n    return ''.join(result)",
        "test": "assert str_to_list(\"hello\", \"el\") == \"ho\" ",
        "num_ids": 1812,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # Create an empty dictionary\n    unique_dict = {}\n    \n    # Loop through the array of integers\n    for num in arraynums:\n        # If the number is not in the dictionary, add it as a key with a value of True\n        if num not in unique_dict:\n            unique_dict[num] = True\n        # If the number is already in the dictionary, return True (duplicate found)\n        else:\n            return True\n    \n    # If no duplicates are found, return False\n    return False\n",
        "test": "assert test_duplicate([1,2,3]) == False  # No duplicates",
        "num_ids": 1693,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 27:\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(108) == False",
        "num_ids": 1520,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rev(num):\n    # Convert the number to a string and reverse it\n    rev_num = int(str(num)[::-1])\n    \n    # Check if the number is one less than twice its reverse\n    if num == rev_num*2 - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(123) == False, \"rev(123) should return False\"",
        "num_ids": 1352,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)  # sort the digits in descending order\n    max_num = int(\"\".join(map(str, arr)))  # convert the digits to a string and join them\n    return max_num",
        "test": "assert find_Max_Num([1,2,3,4,5]) == 54321, \"Incorrect result for [1,2,3,4,5]\"",
        "num_ids": 1493,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    \"\"\"\n    if x == 0 or y == 0:\n        return False\n    elif x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(2,-3) == True",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_octagonal(n):\n    '''\n    Returns True if the given number n is an octagonal number, False otherwise.\n    '''\n    # Check if the given number is a perfect square\n    if not (int(n**0.5)**2 == n):\n        return False\n    \n    # Calculate the nth octagonal number\n    oct_num = 0\n    k = 0\n    while oct_num < n:\n        oct_num += k * (2 * k - 1)\n        if oct_num == n:\n            return True\n        k += 1\n    \n    return False",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1603,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == j-i+1:\n                count += 1\n    return count",
        "test": "assert count_Substrings(\"\") == 0",
        "num_ids": 2670,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1, \"smallest_num([1, 2, 3, 4, 5]) should return 1\"",
        "num_ids": 1194,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def max_difference(test_list):\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1940,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(10, 20), (15, 30), (20, 10)]) == [(20, 10), (10, 20), (15, 30)] # test sorting based on second value of tuple",
        "num_ids": 1720,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total_sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum ",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6  # expected output: 6",
        "num_ids": 1622,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count",
        "test": "assert pos_count([1, 2, 3, -4, -5]) == 3",
        "num_ids": 1016,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def bell_number(n):\n    '''\n    Returns the n-th Bell number.\n\n    The Bell number B(n) is the number of ways to partition a set of n elements.\n    '''\n    if n <= 1:\n        return 1\n    bell = [1, 1]\n    for i in range(2, n+1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n    return bell[n]\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Monotonic(A):\n    '''\n    Check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True  # If the array has less than two elements, it is monotonic.\n    \n    # Check if the array is increasing or decreasing.\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        elif A[i] < A[i + 1]:\n            decreasing = False\n    \n    return increasing or decreasing\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True # Increasing sequence",
        "num_ids": 1953,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1,2,3], [2,3]) == True",
        "num_ids": 1388,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all the tuples in the input list have equal length\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_equal_tuple([(1,2,3), (4,5,6), (7,8,9)]) == True",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using Comb Sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums",
        "test": "assert comb_sort([3, 1, 4, 1, 5, 9, 2, 6, 5]) == [1, 1, 2, 3, 4, 5, 5, 6, 9] ",
        "num_ids": 2358,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**(1/2))+1):\n        for j in range(int(n**(1/2))+1):\n            if i*i-j*j==n or j*j-i*i==n:\n                return True\n    return False",
        "test": "assert dif_Square(1) == True",
        "num_ids": 1576,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert is_samepatterns(['r', 'o', 'y', 'g', 'b'], ['r', 'y', 'g', 'b', 'r']) == False",
        "num_ids": 2179,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6)], 1) == [(1, 2, 3), (4, 5, 6)]",
        "num_ids": 1927,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(11) == True, \"11 should be divisible by 11\"",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks if the length of the word is odd or not.\n    If the length is odd, it returns True, otherwise, it returns False.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert word_len('apple') == True",
        "num_ids": 1023,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    for i in range(n+1):\n        t += i\n    return t*(t+1)//2\n",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Calculates and returns the volume of a sphere with radius r.\n    '''\n    return (4/3) * math.pi * r**3",
        "test": "assert volume_sphere(3) == 113.09733552923254 ",
        "num_ids": 1015,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def get_Char(strr):\n    total = 0\n    for char in strr:\n        total += ord(char)\n    result = total % 26\n    return chr(result + 97)  # 97 is the ASCII value of 'a'\n",
        "test": "assert get_Char('abcd') == 'e'",
        "num_ids": 1443,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman-Conway sequence.\n    '''\n    if n == 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        sequence = [0, 1]\n        for i in range(2, n+1):\n            sequence.append(sequence[sequence[-1]] + sequence[i-sequence[-1]-1])\n        return sequence[n]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 1746,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculate the surface area of a sphere.\n    '''\n    # Calculate the surface area of the sphere\n    area = 4 * math.pi * r ** 2\n    return area",
        "test": "assert surfacearea_sphere(1) == 4*math.pi",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # create a new empty dictionary to hold the merged values\n    merged_dict = {}\n\n    # loop through each dictionary and merge the values into merged_dict\n    for d in [dict1, dict2, dict3]:\n        for key, value in d.items():\n            merged_dict[key] = value\n\n    # return the merged dictionary\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 2281,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    # Create an empty dictionary to store the frequencies of each element\n    freq_dict = {}\n    \n    # Loop through the list and count the frequency of each element\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    # Return the frequency dictionary\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 2, 1, 3, 4]) == {1: 2, 2: 2, 3: 2, 4: 1} ",
        "num_ids": 1608,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    found = False\n    num = N\n    while not found:\n        num -= 1\n        if num == 0:\n            return None\n        if num < N:\n            found = True\n    return num\n",
        "test": "assert closest_num(15) == 14",
        "num_ids": 1248,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log([\"cat\", \"dog\", \"elephant\"]) == 8, \"Incorrect length returned for 'elephant'\"",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \"Hello\") == False",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Returns True if the given number is \"undulating\", i.e.,\n    if it increases by 1 in each consecutive pair of digits and decreases by 1 in each\n    consecutive pair of digits after that.\n    Returns False otherwise.\n    \"\"\"\n    # Convert the number to a string and iterate over its digits\n    digits = str(n)\n    for i in range(len(digits)-1):\n        # Check if the current pair of digits has the expected behavior\n        diff = int(digits[i+1]) - int(digits[i])\n        if (i < len(digits)-2 and diff == 1 and int(digits[i+2]) - int(digits[i+1]) == -1) \\\n           or (i >= len(digits)-2 and diff == -1):\n            # If so, continue to the next pair of digits\n            continue\n        else:\n            # If not, return False\n            return False\n    # If all pairs of digits have the expected behavior, return True\n    return True\n",
        "test": "assert is_undulating(1234) == False ",
        "num_ids": 1854,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2,3) == 8, \"Test failed for base 2 and exponent 3\"",
        "num_ids": 907,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of each tuple using itemgetter\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 6), (7, 8)]) == 1",
        "num_ids": 1844,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sub_list in lst:\n        min_len = min(min_len, len(sub_list))\n    return min_len\n",
        "test": "assert Find_Min_Length([[1,2],[3,4,5],[6,7]]) == 2 # Expected output: 2",
        "num_ids": 1570,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def divisor(n):\n    '''\n    Returns the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "test": "assert divisor(24) == 8",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "test": "assert frequency_lists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 2320,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)\n",
        "test": "assert multiply_num([1,2,3]) == 2",
        "num_ids": 1216,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the input number to a string\n    num_str = str(num)\n    \n    # check if the input number is already a palindrome\n    if num_str == num_str[::-1]:\n        # if the input number is already a palindrome, add 1 and check if the result is still a palindrome\n        while True:\n            num += 1\n            num_str = str(num)\n            if num_str == num_str[::-1]:\n                return num\n    else:\n        # if the input number is not a palindrome, remove the last digit and add it to the beginning\n        num_str = num_str[:-1] + num_str[-1]\n        \n        # check if the resulting number is a palindrome\n        if num_str == num_str[::-1]:\n            return int(num_str)\n        else:\n            # if the resulting number is not a palindrome, add 1 and check if the result is still a palindrome\n            num_str = num_str[:-1] + num_str[-1]\n            num = int(num_str)\n            while True:\n                num += 1\n                num_str = str(num)\n                if num_str == num_str[::-1]:\n                    return num\n",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 2437,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid k value\"\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 5) == 5",
        "num_ids": 1225,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    parts = word.split('_')\n    # Capitalize the first letter of each part except the first one\n    camel = parts[0] + ''.join(part.capitalize() for part in parts[1:])\n    return camel\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import numpy as np\n\ndef eulerian_num(n, m):\n    # create the matrix\n    A = np.zeros((n+1, n+1))\n    A[0, :n] = 1\n    A[1:, 0] = 1\n    A[1:, 1:n+1] = np.eye(n)\n    \n    # compute the matrix exponential\n    B = np.linalg.matrix_power(A, m)\n    \n    # extract the desired element\n    return B[0, 0]",
        "test": "assert eulerian_num(0,0) == 1",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "test": "assert sort_sublists([['c', 'a', 'b'], ['d', 'e', 'f']]) == [['a', 'b', 'c'], ['d', 'e', 'f']]",
        "num_ids": 1794,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count(lst):\n    \"\"\"\n    Count the number of True boolean values in the given list.\n    \n    Args:\n    lst (list): a list of boolean values\n    \n    Returns:\n    int: the number of True boolean values in the list\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count",
        "test": "assert count([True, False, True, True, False]) == 3 ",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 18,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    return tuple(test_list + list(test_tup))\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 1571,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        min_val = heapq.heappop(num1) if num1[0] < num2[0] else heapq.heappop(num2)\n        min_val = min_val if min_val < num3[0] else heapq.heappop(num3)\n        merged_list.append(min_val)\n\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n\n    while num3:\n        merged_list.append(heapq.heappop(num3))\n\n    return merged_list",
        "test": "assert merge_sorted_list([1], [2], [3]) == [1, 2, 3]",
        "num_ids": 4328,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    binary_list = [int(digit) for digit in s]\n\n    # Initialize a counter for odd values\n    odd_count = 0\n\n    # Rotate the binary string n times and count the odd values\n    for i in range(n):\n        # Rotate the binary string by one position to the right\n        binary_list = binary_list[-1:] + binary_list[:-1]\n\n        # Add the count of odd values in the rotated binary string to the total count\n        odd_count += sum([1 for bit in binary_list if bit % 2 == 1])\n\n    return odd_count\n",
        "test": "assert odd_Equivalent('11010', 0) == 0",
        "num_ids": 1894,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist[0]:\n        if all(i in sublist for sublist in nestedlist):\n            common.append(i)\n    return common\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [4, 5, 6]]) == []",
        "num_ids": 1765,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True, \"Error: check_integer should return True for integer\"",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "test": "assert empty_dit([{'key': 'value'}, {}]) == False",
        "num_ids": 1236,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple of integers into a list\n    lst = list(nums)\n    # Initialize the result as an empty string\n    result = ''\n    # Loop through the list of integers and convert each one to a string\n    for num in lst:\n        result += str(num)\n    # Convert the result string to an integer and return it\n    return int(result)\n",
        "test": "assert tuple_to_int((1,2,3)) == 123 ",
        "num_ids": 1437,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # iterate over each element in the list\n    for i in range(len(test_list)):\n        # if the element is a list itself, call the function recursively\n        if isinstance(test_list[i], list):\n            list_to_float(test_list[i])\n        # if the element is a string that can be converted to a float, convert it\n        elif isinstance(test_list[i], str) and test_list[i].replace('.', '', 1).isdigit():\n            test_list[i] = float(test_list[i])\n    # return the modified list\n    return test_list\n",
        "test": "assert list_to_float([[1, 2, '3'], [4.0, '5', 6]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]",
        "num_ids": 2143,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def string_to_list(string):\n    '''\n    This function takes a string as input and returns a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def search(arr):\n    # Loop through the array, and check for the element that appears only once\n    for i in range(len(arr)-2):\n        if arr[i] != arr[i+1] and arr[i+1] != arr[i+2]:\n            return arr[i+1]\n",
        "test": "assert search([1, 1, 1, 1, 1]) == None # None since all elements are repeated",
        "num_ids": 1888,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize the maximum absolute product to zero\n    max_product = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Extract the first and second numbers from the current tuple\n        a, b = list1[i]\n        \n        # Iterate through the remaining tuples in the list\n        for j in range(i+1, len(list1)):\n            # Extract the first and second numbers from the current tuple\n            c, d = list1[j]\n\n            # Calculate the absolute product between the pairs of numbers\n            product = abs(a*b*c*d)\n\n            # Update the maximum absolute product if the current product is greater\n            if product > max_product:\n                max_product = product\n\n    # Return the maximum absolute product\n    return max_product\n",
        "test": "assert max_product_tuple([(-1, -2), (3, 4)]) == 36",
        "num_ids": 2255,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(2, limit+1):\n        divisor_sum = 0\n        for divisor in range(1, num):\n            if num % divisor == 0:\n                divisor_sum += divisor\n        if num == divisor_sum:\n            continue\n        elif num == divisor_sum + 1:\n            continue\n        elif num == divisor_sum + num:\n            amicable_sum += num\n    return amicable_sum\n",
        "test": "assert amicable_numbers_sum(5000) == 3031653",
        "num_ids": 2394,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Get the complex number\n    z = complex(a, b)\n    # Find the angle using cmath library\n    angle = cmath.phase(z)\n    return angle\n",
        "test": "assert angle_complex(2, 3) == cmath.phase(complex(2, 3))",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_length(string):\n    max_diff = 0\n    count_0 = count_1 = 0\n    for char in string:\n        if char == '0':\n            count_0 += 1\n            count_1 = 0\n        else:\n            count_1 += 1\n            count_0 = 0\n        max_diff = max(max_diff, count_1 - count_0)\n    return max_diff\n",
        "test": "assert find_length(\"\") == 0",
        "num_ids": 2662,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a Python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors_sum = 0\n    for i in range(1, min(a, b)+1):\n        if a % i == 0 and b % i == 0:\n            divisors_sum += i\n    return divisors_sum\n",
        "test": "assert sum(0, 0) == 0, \"Incorrect sum\"",
        "num_ids": 1709,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6 ",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(3, ['cat', 'dog', 'elephant']) == ['elephant']",
        "num_ids": 1419,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Calculate the sum of the first row\n    sum_first_row = sum(my_matrix[0])\n\n    # Calculate the sum of the first column\n    sum_first_col = 0\n    for i in range(rows):\n        sum_first_col += my_matrix[i][0]\n\n    # Calculate the sum of the diagonals\n    sum_diag1 = sum([my_matrix[i][i] for i in range(rows)])\n    sum_diag2 = sum([my_matrix[i][cols-1-i] for i in range(rows)])\n\n    # Check if all rows, columns, and diagonals have the same sum\n    if sum_first_row != sum_first_col != sum_diag1 != sum_diag2:\n        return False\n\n    # Check if all elements are distinct\n    nums = set()\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] in nums:\n                return False\n            nums.add(my_matrix[i][j])\n\n    # If all checks pass, return True\n    return True\n",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [9, 8, 7]]) == False",
        "num_ids": 3801,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create an empty dictionary to store the counts of each item\n    counts = defaultdict(int)\n\n    # Iterate through the list and update the count of each item\n    for item in nums:\n        counts[item] += 1\n\n    # Find the item with the maximum count\n    max_item = None\n    max_count = 0\n    for item, count in counts.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 3, 3, 2, 1, 3]) == 3",
        "num_ids": 2146,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowels_list.append(str1[i])\n    vowels_list = vowels_list[::-1]\n    j = 0\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            result += vowels_list[j]\n            j += 1\n        else:\n            result += str1[i]\n    return result\n",
        "test": "assert reverse_vowels(\"\") == \"\", \"Incorrect output for input ''\"",
        "num_ids": 2296,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert tup_string(()) == \"()\"",
        "num_ids": 1041,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativesum = 0\n    for num in nums:\n        if num < 0:\n            negativesum += num\n    return negativesum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1390,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n    ratio = num_zeroes / (num_zeroes + num_non_zeroes)\n    return ratio\n",
        "test": "assert zero_count([1,2,3,4,5]) == 0 ",
        "num_ids": 1953,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        while n > 1:\n            if n % 2 == 0:\n                n = n // 2\n            else:\n                return False\n        return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(7) == False",
        "num_ids": 1664,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 1078,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for element in test_list:\n        if isinstance(element, list):\n            result = result.union(extract_singly(element))\n        elif isinstance(element, int):\n            result.add(element)\n    return result\n",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 1794,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n    \n    Parameters:\n    nums (list): A list of integers to be sorted.\n    \n    Returns:\n    list: The sorted list.\n    \"\"\"\n    n = len(nums)\n    for i in range(n, 0, -1):\n        # Find the maximum element in the unsorted part of the list\n        max_index = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Reverse the maximum element and all the elements before it\n        nums[:max_index+1] = reversed(nums[:max_index+1])\n        \n        # Reverse the entire list\n        nums[:i] = reversed(nums[:i])\n    \n    return nums",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 2765,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 1593,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1] - arr[0]\n",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4 ",
        "num_ids": 1757,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if a == 0:\n            if n == 0:\n                return 1, 0\n            else:\n                return None\n        else:\n            return None\n    else:\n        x = n // b\n        y = (n - a*x) // b\n        if a*x + b*y == n:\n            return x, y\n        else:\n            return None\n",
        "test": "assert find_solution(1, 1, 0) == (0, 0)",
        "num_ids": 2990,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "test": "assert remove_elements([1, 2, 3, 4], [5, 6]) == [1, 2, 3, 4]",
        "num_ids": 1648,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of the series n + (n-2) + (n-4) + ... + 0.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < n // 2:\n        sum += n - 2 * i\n        i += 1\n    return sum\n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 1465,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    apothem = l / 2 / tan(pi / s)\n    area = l * apothem / 2\n    return area\n",
        "test": "assert area_polygon(8, 6) == 24 # testing with a hexagon",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # initialize variables\n    sum1 = 0\n    sum2 = 0\n    \n    # calculate sum of divisors of n\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum1 += i\n    \n    # calculate sum of divisors of n-1\n    for j in range(1, n):\n        if n-1 % j == 0:\n            sum2 += j\n    \n    # compare sums of divisors\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(40) == False # Expected output: False",
        "num_ids": 2084,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(97+i) or str1[i].lower() == chr(65+i):\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"Python\") == 0",
        "num_ids": 1424,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4]) == 2 # 1^4 and 2^3 are even pairs",
        "num_ids": 1421,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def next_power_of_2(n):\n    if n == 0:\n        return 1\n    \n    # start with a binary search range of [1, n]\n    left = 1\n    right = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # check if mid is a power of 2 and greater than or equal to n\n        if mid & (mid - 1) == 0 and mid >= n:\n            return mid\n        \n        # if mid is not a power of 2, we need a smaller power of 2\n        # so we move the right endpoint to mid-1\n        elif mid & (mid - 1) != 0:\n            right = mid - 1\n        \n        # otherwise, we need a larger power of 2\n        else:\n            left = mid + 1\n",
        "test": "assert next_power_of_2(0) == 1 ",
        "num_ids": 1352,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1, 2, 3, 4, 5], 3) == 1, \"Incorrect frequency count\"",
        "num_ids": 1123,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # check if indices are within the bounds of the list\n    if m < 0 or n >= len(list1) or m > n:\n        return \"Invalid range\"\n    \n    # calculate the sum of numbers in the range\n    total = sum(list1[m:n+1])\n    \n    return total\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9",
        "num_ids": 1417,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter",
        "test": "assert perimeter_pentagon(10) == 50*math.sqrt(5+2*math.sqrt(5))",
        "num_ids": 1139,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] == 'std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count\n",
        "test": "assert count_occurance('std') == 1",
        "num_ids": 1159,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to hold the data type of the first element in the tuple\n    first_element_type = type(test_tuple[0])\n    # loop through the tuple and check if all elements have the same data type as the first element\n    for element in test_tuple:\n        if type(element) != first_element_type:\n            return False\n    # if all elements have the same data type, return True\n    return True\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 1477,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2] > x:\n        i = n//2-1\n        while i >= 0 and arr[i] == x:\n            i -= 1\n        if i < 0:\n            return True\n        else:\n            return False\n    elif arr[n//2] < x:\n        i = n//2+1\n        while i < n and arr[i] == x:\n            i += 1\n        if i == n:\n            return True\n        else:\n            return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 6) == False, \"Test 2 failed\"",
        "num_ids": 2161,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Removes the characters which have odd index values of a given string.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n    return new_string\n",
        "test": "assert odd_values_string(\"hello\") == \"hlo\" # should remove \"l\" from \"hello\" because its index is odd",
        "num_ids": 1122,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num\n",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 1228,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = ~(~0 << (r - l + 1))\n    return (n & mask) == mask\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b11110000, 4, 8) == False",
        "num_ids": 1735,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def re_arrange_array(arr, n):\n    i = 0\n    j = n\n\n    while i < j:\n        if arr[i] < 0:\n            i += 1\n        elif arr[j] >= 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n\n    return arr\n",
        "test": "assert re_arrange_array([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]",
        "num_ids": 3097,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank(\"hello world\", \"#\") == \"hello#world\"",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([1,2,3,4,5],2) == [5,4], \"larg_nnum([1,2,3,4,5],2) should return [5,4]\"",
        "num_ids": 1690,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    surface_area = 2 * math.pi * r * h\n    return surface_area\n",
        "test": "assert lateralsuface_cylinder(0,1) == 0, \"Error: lateralsuface_cylinder does not return the correct value\"",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert volume_cube(1) == 1",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a Python function to set all even bits of a given number.\n    '''\n    mask = 0xAAAAAAAA\n    return n | (n & mask)\n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 2135,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2)]) == {(1, 2): 2, (3, 4): 1}",
        "num_ids": 2114,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] != \"\":\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings('') == 0, \"Test case 1 failed\"",
        "num_ids": 1078,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def get_total_number_of_sequences(m, n):\n    # If n is less than or equal to 1, there is only one possible sequence\n    if n <= 1:\n        return 1\n    \n    # Initialize an array to store the number of possible sequences for each value of the last element\n    dp = [0] * (m + 1)\n    \n    # Base case: there is only one possible sequence that ends with 1\n    dp[1] = 1\n    \n    # Iterate through each value of the last element from 2 to m\n    for i in range(2, m + 1):\n        # Initialize the number of possible sequences to 0\n        count = 0\n        \n        # Iterate through each value of the second to last element from 1 to i - 2\n        for j in range(1, i - 1):\n            # If the second to last element is greater than or equal to twice the last element and less than or equal to m,\n            # add the number of possible sequences ending with the second to last element to the count\n            if j * 2 <= i <= j * m:\n                count += dp[j]\n        \n        # Add the count to the dp array for the current value of the last element\n        dp[i] = count\n    \n    # Return the number of possible sequences that end with m\n    return dp[m]\n",
        "test": "assert get_total_number_of_sequences(5, 1) == 1, \"Test case 1 failed\"",
        "num_ids": 2361,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1:] = list2\n    \n    # Return the modified first list\n    return list1\n",
        "test": "assert replace_list([1,2,3],[4,5]) == [1,2,4,5]",
        "num_ids": 1543,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello world\") == 11",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N = N + 1\n        if int(math.sqrt(N)) ** 2 == N:\n            return N\n",
        "test": "assert next_Perfect_Square(12) == 16",
        "num_ids": 1230,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = float('-inf')\n    for i in range(n-1):\n        if arr[i+1] < arr[i]:\n            # find the max increasing subsequence before i+1\n            max_increasing = float('-inf')\n            for j in range(i+1):\n                if arr[j] > max_increasing:\n                    max_increasing = arr[j]\n            # find the max decreasing subsequence after i+1\n            max_decreasing = float('-inf')\n            for k in range(i+1, n):\n                if arr[k] > max_decreasing:\n                    max_decreasing = arr[k]\n            # add the two max subsequences and update the max_sum if the sum is greater\n            current_sum = max_increasing + max_decreasing\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n",
        "test": "assert max_sum([1, 11, 2, 4, 5, 2, 1]) == 16, \"max_sum([1, 11, 2, 4, 5, 2, 1]) should return 16\"",
        "num_ids": 3251,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    elif number == 0 or number == 1:\n        return number\n    else:\n        x = number\n        y = (x + 1) / 2\n        while abs(x - y) >= 0.0001:\n            x = y\n            y = (x + number / x) / 2\n        return round(y, 4)\n",
        "test": "assert babylonian_squareroot(1) == 1",
        "num_ids": 1633,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    # All characters are palindromic substrings of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for palindromic substrings of length 2\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n\n    # Check for palindromic substrings of length 3 or more\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if s[i] == s[j] and dp[i + 1][j - 1] > 0:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]",
        "test": "assert lps(\"bbbab\") == 4 ",
        "num_ids": 2146,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 1093,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 1730,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5), 2) == 1, \"count_X function is not working correctly\"",
        "num_ids": 1099,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Given a list and an element, this function inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3] ",
        "num_ids": 1324,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a complex number as input and returns its polar coordinates.\n    '''\n    # Convert complex number to polar coordinates\n    polar_coordinates = cmath.polar(numbers)\n    \n    # Extract the magnitude and phase angle from the polar coordinates\n    magnitude = polar_coordinates[0]\n    phase_angle = polar_coordinates[1]\n    \n    # Return the polar coordinates in the required format\n    return (magnitude, phase_angle)\n",
        "test": "assert convert(0+0j) == (0, 0)",
        "num_ids": 1427,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5, \"Incorrect count\"",
        "num_ids": 1088,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 2409,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a Python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return len(primes)",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 1920,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 883,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_list.append(test_tup1[i])\n        else:\n            max_list.append(test_tup2[i])\n    return tuple(max_list)\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)  # when both tuples are equal",
        "num_ids": 2085,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Returns the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize a list to store primes found so far\n    primes = []\n    \n    # Initialize variables for the loop\n    k = 1\n    i = 5\n    \n    while len(primes) < n:\n        # Check if i is prime\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n        \n        # If i is prime, add it to the list and increment k\n        if is_prime:\n            primes.append(i)\n            k += 1\n            \n        # Increment i and repeat\n        i += 2\n    \n    return primes[-1]\n",
        "test": "assert newman_prime(1) == 5",
        "num_ids": 4868,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            result += (None,)\n        else:\n            result += (test_tup1[i] / test_tup2[i],)\n    return result\n",
        "test": "assert division_elements((10, 20, 30), (2, 4, 6)) == (5, 5, 5)",
        "num_ids": 1893,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n",
        "test": "assert split_two_parts([1,2,3,4,5],2) == ([1,2], [3,4,5]) # test case 1",
        "num_ids": 1950,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age\n",
        "test": "assert dog_age(1) == 7",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Split a list S for every nth element, returning a list of the resulting lists.\n\n    :param S: A list of elements\n    :param step: An integer indicating the step size\n    :return: A list of lists\n    \"\"\"\n    result = []\n    sublist = []\n    for i, element in enumerate(S):\n        sublist.append(element)\n        if (i + 1) % step == 0:\n            result.append(sublist)\n            sublist = []\n    if sublist:\n        result.append(sublist)\n    return result",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 4) == [[1,2,3,4],[5,6,7,8],[9]]",
        "num_ids": 2145,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    return surface_area\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i\n        i += 2\n    return sum\n",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1234,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    \"\"\"\n    # initialize variables\n    i = 1\n    count = 0\n    \n    # loop until we find the n'th star number\n    while count < n:\n        # print the star pattern\n        print(\" \" * i, end=\"\")\n        print(\"*\" * (2 * i - 1))\n        \n        # increment the count\n        count += 1\n        \n        # increment the number of spaces\n        i += 1\n        \n    # return the n'th star number\n    return count\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1412,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # initialize sum variable to 0\n    sum_even = 0\n\n    # iterate over the list\n    for i in range(len(arr)):\n        # check if the number at the current index is even\n        if arr[i] % 2 == 0:\n            # check if the index is even\n            if i % 2 == 0:\n                # add the even number to the sum\n                sum_even += arr[i]\n\n    # return the sum of even numbers at even positions of the list\n    return sum_even\n",
        "test": "assert sum_even_and_even_index([1,3,5,7,9]) == 0",
        "num_ids": 1610,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1344,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([]) == [], \"Empty list should return empty list.\"",
        "num_ids": 1559,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((1,2,3),(4,5,6)) == (-3,-3,-3)",
        "num_ids": 1740,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    i = 0\n    while i <= n:\n        coeff = (math.comb(n, i))\n        if coeff % 2 == 0:\n            sum += coeff\n        i += 1\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(2) == 2",
        "num_ids": 1599,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r**2 * h\n    return vol\n",
        "test": "assert volume_cylinder(1,1) == 3.14159, \"Volume is incorrect for cylinder with radius 1 and height 1\"",
        "num_ids": 1360,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dict_filter(dictionary, n):\n    '''\n    Takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dictionary.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({'a': 5, 'b': 3, 'c': 7, 'd': 2}, 4) == {'a': 5, 'c': 7}",
        "num_ids": 1748,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[0]:\n            break\n        count += 1\n    return count\n",
        "test": "assert count_first_elements((2,3,4,5,1)) == 4",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        num = 1\n        for i in range(2, n+1):\n            num += i*(3*i-1)\n        return num",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1121,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    position = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            position = i\n            break\n    return (found, position)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 5) == (True, 4)",
        "num_ids": 1639,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1, 2, 3]) == True",
        "num_ids": 1390,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3, -3, -3]",
        "num_ids": 1465,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def validate(n):\n    '''\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True\n",
        "test": "assert validate(9876543210) == False # should return False",
        "num_ids": 1752,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    Returns True if all items in the list are equal to the given element,\n    False otherwise.\n    \"\"\"\n    return all(x == element for x in lst)\n",
        "test": "assert check_element([1,1,1,1],1) == True ",
        "num_ids": 1096,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2}|b{3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three(\"aabb\") == True",
        "num_ids": 1220,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create a new array by repeating the given array k times\n    new_array = a * k\n\n    # Initialize variables to store the maximum sum and current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate through the new array and calculate the maximum sum\n    for i in range(n):\n        curr_sum += new_array[i]\n        max_sum = max(max_sum, curr_sum)\n\n        # If the current sum becomes negative, reset it to 0\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -5], 5, 2) == -1, \"Test Case 2 Failed\"",
        "num_ids": 3211,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0  # if n is 0, the sum of squares of even natural numbers is 0",
        "num_ids": 1141,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    max_length = 0\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([]) == []",
        "num_ids": 1775,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_no_of_ways(n, k):\n    # Base cases\n    if n == 0 or k == 1:\n        return 1\n    if n == 1 or k == 2:\n        return k\n    \n    # Recursive case\n    dp = [0] * k\n    dp[0] = 1\n    for i in range(1, n):\n        temp = [0] * k\n        for j in range(k):\n            for m in range(k):\n                if j != m:\n                    temp[j] += dp[m]\n        dp = temp\n    \n    return sum(dp)\n",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 2646,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find(n,m):\n    '''\n    Write a Python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(10, 3) == 3 # Expected output: 3",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)\n",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    max_val = listval[0]\n    for val in listval:\n        if type(val) == str:\n            try:\n                val = float(val)\n            except ValueError:\n                continue\n        if val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1436,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_div(12) == 28 # 12 has divisors 1, 2, 3, 4, 6, 12",
        "num_ids": 1332,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_Inv_Count(arr):\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] > arr[j]):\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0 # no inversions in this array",
        "num_ids": 2023,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert flatten_list([1, 2, [3, 4], [5, [6, 7]], 8]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 1911,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the sum of values for each key\n    sums = defaultdict(int)\n    \n    # iterate over the list of tuples\n    for key, value in stdata:\n        # add the value to the sum for the given key\n        sums[key] += value\n    \n    # find the maximum aggregate by finding the key with the highest sum\n    max_key = max(sums, key=sums.get)\n    \n    # return the maximum aggregate\n    return sums[max_key]\n",
        "test": "assert max_aggregate([(1, 2), (2, 4), (3, 6)]) == 6, \"max_aggregate([(1, 2), (2, 4), (3, 6)]) should return 6\"",
        "num_ids": 2276,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # create a 2D list to store dp values\n    dp = [[0 for i in range(2)] for j in range(2)]\n\n    # base case\n    dp[0][0] = 1\n\n    # fill the dp table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(2):\n            dp[i][j] = dp[i-1][0] + dp[i-1][1]\n\n    # calculate the count of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits\n    count = dp[n][0] + dp[n][1]\n\n    return count\n",
        "test": "assert count_binary_seq(0) == 1 # Test case for n=0",
        "num_ids": 2069,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depths = [dict_depth(v) for v in d.values()]\n        return 1 + max(depths, default=0)\n    else:\n        return 0\n",
        "test": "assert dict_depth({'a': 1, 'b': {'c': 2}}) == 2",
        "num_ids": 1200,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Calculate the starting index after rotation\n    start_index = index + rotations % len(arr)\n    \n    # Check if the starting index is within the range of the array\n    if start_index < len(arr):\n        return arr[start_index]\n    \n    # If the starting index is outside the range of the array,\n    # find the range to which the starting index belongs to and return the corresponding element\n    for r in ranges:\n        if start_index >= r[0] and start_index <= r[1]:\n            return arr[start_index - r[0]]\n",
        "test": "assert find_Element([1,2,3,4,5], 0, 0, 0) == 1",
        "num_ids": 2252,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if re.match('^p', word):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result\n",
        "test": "assert start_withp(['pig', 'poke', 'pot', 'puppet']) == ['pig', 'poke']",
        "num_ids": 1633,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0 or index >= n:\n        return 0\n    elif k == index + 1:\n        return a[index]\n    else:\n        include_element = a[index]\n        exclude_element = max_sum_increasing_subseq(a, n, index-1, k)\n        return max(include_element + exclude_element, exclude_element)\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 1) == 10  # Test Case 1",
        "num_ids": 4010,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns a colon of a tuple.\n    \n    Parameters:\n    tuplex (tuple): A tuple to extract a colon from.\n    m (int): The index of the starting element of the colon.\n    n (int): The index of the ending element of the colon.\n    \n    Returns:\n    tuple: A tuple containing the extracted colon.\n    '''\n    \n    # Create a deep copy of the original tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Remove the elements outside the colon\n    if m > 0:\n        new_tuplex = new_tuplex[m:]\n    if n < len(tuplex):\n        new_tuplex = new_tuplex[:n]\n    \n    return new_tuplex\n",
        "test": "assert colon_tuplex((1,2,3,4,5),0,4) == (1,2,3,4)",
        "num_ids": 1754,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([1, 2, 3, 4], [5, 6, 7, 8], 3) == [35, 32, 40]",
        "num_ids": 2090,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(5, 10) == 10, \"maximum(5, 10) should return 10\"",
        "num_ids": 778,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n | (n & (n-1)) + 1\n",
        "test": "assert set_left_most_unset_bit(0b1111) == 0b1111, \"Test 2 failed\"",
        "num_ids": 1332,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(1,1) == math.pi * 1 ** 2 * 1 / 3 ",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n",
        "test": "assert highest_Power_of_2(16) == 16",
        "num_ids": 1187,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "test": "assert add_string([1, 2, 3], \"{}\") == [\"1\", \"2\", \"3\"]",
        "num_ids": 1332,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 2453,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Find the maximum sum possible using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # base case: if n is less than or equal to 1, return n\n    if n <= 1:\n        return n\n    # compute the maximum sum using the given equation\n    max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n    return max_sum\n",
        "test": "assert get_max_sum(1) == 1, \"get_max_sum(1) should be 1\"",
        "num_ids": 1941,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = []\n    for lst in input_list:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1,2,3], [4,5,6,7], [8], [9,10]]) == [4,5,6,7]",
        "num_ids": 1402,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 1356,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a Python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Iterate through the string and return the first character that appears only once\n    for char in str1:\n        if freq[char] == 1:\n            return char\n",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 2040,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"aa\") == True  # Should return True as the string starts and ends with the same character \"a\"",
        "num_ids": 1107,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return b\n        elif b > c:\n            return c\n        else:\n            return b\n    elif a > b:\n        if b > c:\n            return b\n        elif b < c:\n            return c\n        else:\n            return b\n    else:\n        if a == b == c:\n            return a\n        elif a == b:\n            return a\n        else:\n            return a\n",
        "test": "assert median_numbers(1, 2, 3) == 2",
        "num_ids": 1532,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    \n    # initialize an empty list to store the sums of digits of each number\n    sums = []\n    \n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string to get the digits\n        digits = str(num)\n        \n        # initialize a variable to store the sum of the digits\n        digit_sum = 0\n        \n        # loop through each digit in the string\n        for digit in digits:\n            # add the digit to the sum\n            digit_sum += int(digit)\n        \n        # add the sum of the digits for this number to the list\n        sums.append(digit_sum)\n    \n    # return the list of sums\n    return sums\n",
        "test": "assert sum_of_digits([12, 34, 56]) == [3, 7, 11]",
        "num_ids": 1913,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    if len(test_tup1) > len(test_tup2):\n        result_tup += test_tup1[len(test_tup2):]\n    elif len(test_tup2) > len(test_tup1):\n        result_tup += test_tup2[len(test_tup1):]\n    return result_tup\n",
        "test": "assert bitwise_xor((0, 0, 1, 1), (0, 1, 0, 1)) == (0, 1, 1, 0)",
        "num_ids": 2146,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(sorted(t)) for t in test_list))\n",
        "test": "assert extract_freq([(1, 2), (2, 3), (1, 2), (4, 5)]) != 2",
        "num_ids": 2059,
        "indeed": true
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(row))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples((-1, -2, -3), (-4, -5, -6)) == (-5, -7, -9)",
        "num_ids": 2019,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a Python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(0,1) == 0",
        "num_ids": 816,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex(('a','b','c'),'a') == True",
        "num_ids": 1075,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Finds the parity of a given number.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "test": "assert find_Parity(2) == \"Even\"",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def rearrange_bigger(n):\n    # convert n into a string of digits\n    digits = str(n)\n\n    # sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # remove any adjacent duplicates\n    i = 0\n    while i < len(sorted_digits) - 1:\n        if sorted_digits[i] == sorted_digits[i+1]:\n            sorted_digits.pop(i+1)\n        else:\n            i += 1\n\n    # convert the sorted digits back into an integer\n    result = int(''.join(sorted_digits))\n\n    return result\n",
        "test": "assert rearrange_bigger(1234) == 4321",
        "num_ids": 1934,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            pair = (nums1[i], nums2[j])\n            pairs.append(pair)\n    \n    heapq.heapify(pairs)\n    \n    result = []\n    for i in range(k):\n        if len(pairs) == 0:\n            break\n        result.append(heapq.heappop(pairs))\n    \n    return result\n",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 1) == [(1, 2)]",
        "num_ids": 3255,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def min_product_tuple(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1, 2), (2, 3), (3, 4)]) == 12  # expected product of (1, 2) and (2, 3)",
        "num_ids": 2180,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    min_val = listval[0]\n    \n    for val in listval:\n        if type(val) == str:\n            continue\n        elif val < min_val:\n            min_val = val\n            \n    return min_val\n",
        "test": "assert min_val([1.5, 2.5, 3.5]) == 1.5",
        "num_ids": 1410,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Split the snake case string into a list of words\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word except the first one\n    for i in range(1, len(words)):\n        words[i] = words[i].capitalize()\n    \n    # Join the words back into a camel case string\n    camel_case = ''.join(words)\n    \n    # Remove any leading or trailing whitespace characters\n    camel_case = camel_case.strip()\n    \n    # Replace any remaining underscores with whitespace\n    camel_case = re.sub('_', ' ', camel_case)\n    \n    return camel_case\n",
        "test": "assert snake_to_camel(\"\") == \"\"",
        "num_ids": 1684,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_odd(l):\n    '''\n    Remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n",
        "test": "assert remove_odd([1,2,3,4,5]) == [2, 4] # Remove odd numbers from the list [1,2,3,4,5]",
        "num_ids": 1203,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Initialize an empty list to store the nth elements from the tuples in the list\n    nth_elements = []\n\n    # Loop through the list of tuples and extract the nth element from each tuple\n    for tuple in list1:\n        nth_elements.append(tuple[n])\n\n    return nth_elements\n",
        "test": "assert extract_nth_element([(1,2,3),(4,5,6)],1) == 2",
        "num_ids": 1379,
        "indeed": true
    },
    {
        "number": 414,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks if any value in list1 exists in list2.\n    Returns True if there is a match, False otherwise.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 1387,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    arr.sort()\n    n = len(arr)\n\n    # Case 1: When all elements are negative\n    if arr[0] < 0 and arr[n-1] < 0:\n        max_product = arr[n-1] * arr[n-2]\n\n    # Case 2: When there is at least one positive element\n    else:\n        max_product1 = arr[n-1] * arr[n-2]\n        max_product2 = arr[0] * arr[1]\n        max_product = max(max_product1, max_product2)\n\n    return max_product\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20 ",
        "num_ids": 1955,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dictionary = {}\n    for tup in Input:\n        if tup[0] in dictionary:\n            dictionary[tup[0]].append(tup[1])\n        else:\n            dictionary[tup[0]] = [tup[1]]\n    result = []\n    for key in dictionary:\n        result.append((key, dictionary[key]))\n    return result\n",
        "test": "assert group_tuples([(1, 2), (1, 3), (1, 4)]) == [(1, [2, 3, 4])] ",
        "num_ids": 2266,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element",
        "test": "assert Find_Max(['cat', 'dog', 'elephant']) == 'elephant'",
        "num_ids": 1262,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def round_and_sum(list1):\n    '''\n    Rounds every number in the given list, adds them up, and multiplies by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    return total * len(list1)\n",
        "test": "assert round_and_sum([1.4, 2.5, 3.6]) == 3 * (round(1.4) + round(2.5) + round(3.6))",
        "num_ids": 1621,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i) + \"|\"\n    return result[:-1]\n",
        "test": "assert concatenate_tuple((1.1, 2.2, 3.3)) == '1.12.23.3' ",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes/n\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1221,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear((\"abc\", \"defg\", \"hijkl\")) == (\"c\", \"g\", \"l\") ",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 1) == 0",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 != 0]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1196,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'^(\\d{4})-(\\d{2})-(\\d{2})$'\n    match = re.match(pattern, dt)\n\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format\"\n",
        "test": "assert change_date_format('2021-06-15') == '15-06-2021'",
        "num_ids": 2177,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([5, 2, 8, 3, 1]) == [1, 2, 3, 5, 8]",
        "num_ids": 2259,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(x and y for x, y in zip(test_tup1, test_tup2))\n    return result_tup\n",
        "test": "assert and_tuples((True, False, True), (True, True, False)) == (True, False, False) ",
        "num_ids": 1620,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a != 0:\n        directrix = -b/2/a\n    else:\n        directrix = None\n    return directrix\n",
        "test": "assert parabola_directrix(a=1, b=2, c=3) == -1  # check for case a = 1, b = 2, c = 3 ",
        "num_ids": 1631,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return bool(set1.intersection(set2))\n",
        "test": "assert common_element([1,2,3],[4,5,6]) == False # false because no common element",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_area = 0.5 * (base1 + base2) * height\n    median = trapezium_area / height\n    return median\n",
        "test": "assert median_trapezium(1,2,3) == 1.5",
        "num_ids": 1555,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            return True\n    return False\n",
        "test": "assert check_greater([1,2,3], 4) == True # should return True since 4 is greater than any element in the array",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"ab\") == True",
        "num_ids": 999,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10\n",
        "test": "assert last_Digit(10) == 0 ",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1,2,3,-4,-5]) == [-4,-5] # check if the function returns the correct list of negative numbers",
        "num_ids": 1170,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            str2 += str1[i]\n    return str2\n",
        "test": "assert remove_odd(\"Hello World\") == \"HloWrd\"",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5)]) == 0  # No bidirectional pairs",
        "num_ids": 1997,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the integers in the list\n    result = ''\n\n    # Iterate through each integer in the list\n    for num in L:\n        # Convert the integer to a string and add it to the result string\n        result += str(num)\n\n    # Convert the result string to an integer and return it\n    return int(result)\n",
        "test": "assert multiple_to_single([1, 2, 3, 4]) == 1234",
        "num_ids": 1334,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r\"\\b\\w*ly\\b\"\n    adverb_list = re.findall(adverb_pattern, text)\n    positions = []\n    for adverb in adverb_list:\n        position = re.search(adverb, text).start()\n        positions.append(position)\n    return adverb_list, positions\n",
        "test": "assert find_adverb_position(\"The cat is jumping.\") == ([], []) # expected output: ([], [])",
        "num_ids": 2035,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area\n",
        "test": "assert surfacearea_cube(1) == 6 ",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / total_count\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0",
        "num_ids": 1549,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def largest_neg(list1):\n    largest_neg = float('-inf')  # initialize the largest negative number to negative infinity\n    for num in list1:\n        if num < 0 and num > largest_neg:  # if the number is negative and greater than the current largest negative\n            largest_neg = num  # update the largest negative\n    return largest_neg",
        "test": "assert largest_neg([-5, -10, -3, -1, -2, 0]) == -1  # should return -1 ",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for t in test_list:\n        trimmed_list.append(t[:K])\n    return trimmed_list\n",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == [(1, 2), (4, 5), (7, 8)]",
        "num_ids": 2189,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 1898,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    common_count = tup_count & lst_count\n    return common_count\n",
        "test": "assert count_Occurrence(('a', 'b', 'c'), ['a', 'b']) == Counter({'a': 1, 'b': 1})",
        "num_ids": 1996,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 1429,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        sum += 2 ** count\n        count += 1\n    return sum\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a new list of strings with the specified size.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) == size:\n            result.append(string)\n    return result\n",
        "test": "assert extract_string([], 0) == []",
        "num_ids": 1254,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Replace all whitespace characters with empty string\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n",
        "test": "assert remove_whitespaces('Hello, world!') == 'Hello,world!'",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 90) == 10",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n",
        "test": "assert sumofFactors(0) == 0, \"Error: sumofFactors(0) is not equal to 0\"",
        "num_ids": 1378,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches",
        "test": "assert text_match_wordz('There are many programming languages like Java, C++, and Python.') == []",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True",
        "num_ids": 1682,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list(['apple', 'banana', 'cherry']) == ['elppa', 'ananab', 'yrrehc']",
        "num_ids": 1486,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) < min_length:\n                min_length = len(lst[i:j])\n                min_sublist = lst[i:j]\n    return min_sublist\n",
        "test": "assert Find_Min([]) == [], \"Find_Min() should return an empty list for an empty list input\"",
        "num_ids": 1730,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(5, 10) == 50",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z]+\\b', '', str1)",
        "test": "assert remove_uppercase(\"HELLO world\") == \" world\"",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def Extract(lst):\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def upper_ctr(str):\n    '''\n    Write a Python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello, World!\") == 2",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 140,
        "answer": "from itertools import combinations\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    # Get all possible combinations of the given list\n    comb = []\n    for i in range(1, len(list1)+1):\n        for c in combinations(list1, i):\n            comb.append(list(c))\n    \n    # Return the list of all possible combinations\n    return comb\n",
        "test": "assert combinations_list([]) == [], \"combinations_list([])\"",
        "num_ids": 1683,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n        \n    return result\n",
        "test": "assert max_subarray_product([1, -2, -3, 4]) == 24 # [1, -2, -3, 4]",
        "num_ids": 2292,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    # Create an empty set to store the unique values\n    unique_values = set()\n    \n    # Iterate over all the values in the dictionary\n    for value in dict.values():\n        # Add the value to the set\n        unique_values.add(value)\n    \n    # Check if the length of the set is equal to 1, which means all values are the same\n    if len(unique_values) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True ",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1523,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            # start a new subsequence\n            max_ending_here = arr[i]\n        else:\n            # continue the current subsequence\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120 # expected output: 120",
        "num_ids": 2419,
        "indeed": true
    },
    {
        "number": 470,
        "max_answer_num": 15,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns the pairwise addition of its neighboring elements.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1,2,3,4,5)) == (3,5,7,9), \"Function should add the pairwise elements and return a tuple\"",
        "num_ids": 1472,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1,2,3,4,5], 3) == 0",
        "num_ids": 1244,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and checks whether it contains consecutive numbers or not.\n\n    :param l: list of integers\n    :return: boolean value indicating whether the list contains consecutive numbers or not\n    \"\"\"\n    l.sort()  # Sorting the list in ascending order\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] == 1:  # Checking if the difference between consecutive elements is 1\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1,2,3]) == True",
        "num_ids": 1405,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert both lists to sets and then back to lists to remove duplicates\n    test_set1 = list(set(test_list1))\n    test_set2 = list(set(test_list2))\n    \n    # Initialize an empty list to store the intersection tuples\n    intersection_tuples = []\n    \n    # Loop through the tuples in the first set\n    for tup1 in test_set1:\n        # Create a set of the elements in the tuple for easier comparison\n        set1 = set(tup1)\n        \n        # Loop through the tuples in the second set\n        for tup2 in test_set2:\n            # Create a set of the elements in the tuple for easier comparison\n            set2 = set(tup2)\n            \n            # Check if the two tuples have the same elements in any order\n            if set1 == set2:\n                # If they do, add the tuple to the intersection list\n                intersection_tuples.append(tup1)\n                break\n                \n    return intersection_tuples\n",
        "test": "assert tuple_intersection([(1,2),(2,3),(4,5)], [(2,3),(4,5),(6,7)]) == [(2,3),(4,5)] # test case 1",
        "num_ids": 2337,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n",
        "test": "assert replace_char('hello world', 'x', 'O') == 'hello world'",
        "num_ids": 1488,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict\n",
        "test": "assert sort_counter({'a': 3, 'b': 2, 'c': 1}) == {'c': 1, 'b': 2, 'a': 3} ",
        "num_ids": 1517,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    # find the smallest and largest value in the array\n    smallest = min(nums)\n    largest = max(nums)\n    \n    # calculate the sum of the two values\n    sum = smallest + largest\n    \n    # return the sum\n    return sum\n",
        "test": "assert big_sum([-1,-2,0,1,2]) == 0",
        "num_ids": 1403,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # split the string into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # keep only words with uppercase letters\n    words = [word for word in words if any(letter.isupper() for letter in word)]\n    # join the words back into a string\n    return ' '.join(words)\n",
        "test": "assert remove_lowercase('Hello World') == 'Hello World'",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def first_Digit(n):\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in lst if x%2!=0]\n",
        "test": "assert Split([1,2,3,4,5,6,7,8,9]) == [1, 3, 5, 7, 9] # test odd numbers",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = n * (n + 1) * (2 * n + 1) // 6\n    \n    # Return the difference between the sums\n    return sum_cubes - sum_n\n",
        "test": "assert difference(0) == 0, \"difference should return 0 for n=0\"",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Odd_Pair(A, N):\n    pairs_count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                pairs_count += 1\n    return pairs_count\n",
        "test": "assert find_Odd_Pair([1,2,3,4],4) == 4",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n",
        "test": "assert toggle_string('Hello, World!') == 'hELLO, wORLD!'",
        "num_ids": 1073,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert the input numbers to strings\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # initialize the sum of per-digit differences to 0\n    diff_sum = 0\n    \n    # loop over the digits in the two numbers and add the absolute difference to the sum\n    for i in range(max(len(str_n1), len(str_n2))):\n        digit_n1 = int(str_n1[-1]) if i < len(str_n1) else 0\n        digit_n2 = int(str_n2[-1]) if i < len(str_n2) else 0\n        diff_sum += abs(digit_n1 - digit_n2)\n        str_n1 = str_n1[:-1]\n        str_n2 = str_n2[:-1]\n    \n    return diff_sum\n",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 2280,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15 ",
        "num_ids": 2157,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    sorted_union = sorted(list(union_set))\n    return sorted_union",
        "test": "assert union_elements(('a', 'b', 'c'), ('c', 'd', 'e')) != sorted(('a', 'b', 'c', 'd', 'f')) # should return False",
        "num_ids": 1726,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Returns the length of the longest sublist in the given list.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for item in lst:\n        if type(item) == list:\n            if len(item) > max_length:\n                max_length = len(item)\n            current_length += len(item)\n        else:\n            current_length = 0\n    return max_length\n",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 1466,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert extract_values('He said \"Hello, World!\"') == ['Hello, World!']",
        "num_ids": 993,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10",
        "num_ids": 1240,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word) # Using list() to split the string into characters and return a list of characters\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 1169,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def issort_list(list1):\n    '''\n    Checks whether a specified list is sorted or not.\n    '''\n    # Check if the list has at least two elements\n    if len(list1) < 2:\n        return True\n    # Compare adjacent elements in the list\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1,2,3,4,5]) == True",
        "num_ids": 1293,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "test": "assert empty_list(0) == [], \"Test failed for empty_list(0)\"",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "test": "assert sort_sublists([[\"c\", \"b\", \"a\"], [\"d\", \"e\", \"f\"]]) == [[\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]] # Test case 1",
        "num_ids": 1768,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([]) == []",
        "num_ids": 1713,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1,2,3]) == 6, \"Error in unique_product([1,2,3])\"",
        "num_ids": 1317,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h + 2 * 3.14 * r ** 2\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(0, 0) == 0",
        "num_ids": 1490,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether a list B is a sublist of list A or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    else:\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False\n",
        "test": "assert is_Sub_Array([1,2,3],[3,1]) == False ",
        "num_ids": 1587,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1680,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 1996,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_elements.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            dissimilar_elements.append(j)\n    return dissimilar_elements\n",
        "test": "assert find_dissimilar((1, 2, 3), (2, 3, 4)) == (1,)",
        "num_ids": 2143,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for item in test_tuple:\n        if type(item) == tuple:\n            new_tuple += even_ele(item, even_fnc)\n        else:\n            if even_fnc(item):\n                new_tuple += (item,)\n    return new_tuple",
        "test": "assert even_ele((1,2,3,4,5,'a',(1,2,3,4),(5,6,7,'b')), lambda x: isinstance(x, str)) == ('a', 'b') ",
        "num_ids": 2545,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    slant_height = (b**2 + s**2)**0.5\n    area_base = b**2\n    area_slant = 0.5 * b * slant_height\n    surface_area = 2 * area_base + 4 * area_slant\n    return surface_area\n",
        "test": "assert surface_Area(4,3) == 72",
        "num_ids": 1610,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True, \"Empty dictionary is not being recognized\"",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def catalan_number(num):\n    if num < 0:\n        return \"Invalid input\"\n    elif num == 0:\n        return 1\n    else:\n        res = 0\n        for i in range(num):\n            res += catalan_number(i)*catalan_number(num-i-1)\n        return res\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1225,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Use regular expression to find adverbs ending with ly\n    pattern = r'\\b\\w+ly\\b'\n    adverbs = re.findall(pattern, text)\n    \n    # If there are no adverbs ending with ly, return None\n    if not adverbs:\n        return None\n    \n    # Find the positions of the first adverb ending with ly\n    first_adverb = adverbs[0]\n    position = text.find(first_adverb)\n    \n    return first_adverb, position\n",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == None",
        "num_ids": 2022,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # Create a heap of the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            # If the item is more expensive than the smallest item in the heap,\n            # replace the smallest item with the new item\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    # Return the n most expensive items in descending order\n    return sorted(heap, reverse=True)\n",
        "test": "assert expensive_items([('apple', 1.0), ('banana', 2.0), ('cherry', 3.0), ('date', 4.0), ('elderberry', 5.0)], 3) == [('elderberry', 5.0), ('date', 4.0), ('cherry', 3.0)]",
        "num_ids": 3056,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    second_part.extend(first_part)\n    return second_part\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 1639,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 1000,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = max(nums) - min(nums)\n    return diff\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1148,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Finds all perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for i in range(a, b+1):\n        if int(i**0.5)**2 == i:\n            squares.append(i)\n    return squares\n",
        "test": "assert perfect_squares(10, 1) == []",
        "num_ids": 1572,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_coord = cmath.rect(r, theta)\n    x = round(rect_coord.real, 2)\n    y = round(rect_coord.imag, 2)\n    return (x, y)\n",
        "test": "assert polar_rect(1,0) == (1,0)",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1628,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def binomial_Coeff(n,k):\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n\ndef sum_of_products(n):\n    # initialize variables\n    sum = 0\n    k = 1\n    \n    # calculate sum of products\n    while k <= n:\n        for i in range(k, n+1):\n            prod = 1\n            for j in range(i-k+1, i+1):\n                prod *= binomial_Coeff(j, k-1)\n            sum += prod\n        k += 1\n    \n    # return sum of products\n    return sum\n",
        "test": "assert binomial_Coeff(0,0) == 1 ",
        "num_ids": 2176,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_pattern = re.compile(r'^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))$')\n    if not ip_pattern.match(ip):\n        raise ValueError('Invalid IP address')\n    octets = ip.split('.')\n    octets = [str(int(octet)) for octet in octets]\n    return '.'.join(octets)\n",
        "test": "assert removezero_ip('255.255.255.255') == '255.255.255.255'",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n    \n    if even_num is None or odd_num is None:\n        return 0\n    \n    return abs(even_num - odd_num)\n",
        "test": "assert diff_even_odd([2,4,6,8,1,3,5,7]) == 1, \"Test case 2 failed\"",
        "num_ids": 2407,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    x = list(str1)\n    y = list(str2)\n    swap_count = 0\n\n    while x and y:\n        if x[0] != y[0]:\n            swap_count += 1\n            temp = x.pop(0)\n            x.append(temp)\n        else:\n            x.pop(0)\n            y.pop(0)\n\n    return swap_count\n",
        "test": "assert min_Swaps(\"100110\",\"001110\") == 2  # Example input 1",
        "num_ids": 3256,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)",
        "test": "assert tuple_size(()) == sys.getsizeof(()) ",
        "num_ids": 1188,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def find_kth(arr1, arr2, k):\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return min(arr1[i], arr2[j])\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return min(arr1[i], arr2[j])\n            k -= 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j:][k-1]\n    if j == len(arr2):\n        return arr1[i:][k-1]\n",
        "test": "assert find_kth([1, 3, 5], [2, 4, 6], 4) == 4",
        "num_ids": 2859,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initializing sum and original number\n    sum = 0\n    original_number = number\n    \n    # Calculating the sum of the digits raised to the power of the number of digits\n    while number > 0:\n        digit = number % 10\n        sum += digit ** len(str(original_number))\n        number //= 10\n        \n    # If the original number is equal to the sum, it is an armstrong number\n    if original_number == sum:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True # 153 is an Armstrong number",
        "num_ids": 1821,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum/n\n    return sum, average\n",
        "test": "assert sum_average(5) == (15, 3), \"Error in sum_average function\"",
        "num_ids": 1218,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Even(n):\n    \"\"\"\n    Returns True if the given number is even, False otherwise.\n    \"\"\"\n    return n % 2 == 0\n",
        "test": "assert is_Even(2) == True, \"Error: is_Even(2) should return True\"",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    # Create a dictionary to keep track of the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first character with frequency greater than 1\n    for char in str1:\n        if freq[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 1539,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Define a function to check if a number is ludic\n    def is_ludic(num):\n        # Convert the number to a string and reverse it\n        rev_num = str(num)[::-1]\n        # Check if the reversed number is equal to the original number\n        if str(num) == rev_num:\n            return True\n        else:\n            return False\n    \n    # Generate a list of all numbers from 1 to n\n    numbers = list(range(1, n+1))\n    # Filter the list to only include ludic numbers\n    ludics = list(filter(is_ludic, numbers))\n    return ludics\n",
        "test": "assert get_ludic(0) == []",
        "num_ids": 2494,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse the order of words\n    words = words[::-1]\n    \n    # Join the reversed words back into a string\n    result = \" \".join(words)\n    \n    return result\n",
        "test": "assert reverse_words(\"hello world\") == \"world hello\"",
        "num_ids": 1083,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True # 2 is a prime number",
        "num_ids": 1194,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 891,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        start, end = match.span()\n        return match.group(), start, end\n    else:\n        return None\n",
        "test": "assert find_literals(\"Hello, world!\", r\"world\") == (\"world\", 7, 12), \"find_literals test 1 failed\"",
        "num_ids": 1770,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth Bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        bell_sum = 0\n        for i in range(n):\n            bell_sum += bell_Number(i) * bell_Number(n-i-1)\n        return bell_sum\n",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 1197,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i != L-1:\n            new_list.append(list1[i])\n    return new_list\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 1671,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val\n",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 9",
        "num_ids": 1983,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 1638,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n        result.append(cum_sum)\n    return result\n",
        "test": "assert cummulative_sum([1, 2, 3]) == [1, 3, 6]",
        "num_ids": 1679,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6))) == [2, 5]",
        "num_ids": 1802,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod_tuple = ()\n    for i in range(len(test_tup1)):\n        mod_tuple += (test_tup1[i] % test_tup2[i],)\n    return mod_tuple\n",
        "test": "assert tuple_modulo((100, 200, 300), (5, 10, 15)) == (0, 0, 0)",
        "num_ids": 1957,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps == 0 or d == 0:\n        return 0\n    elif d > steps:\n        return -1\n    else:\n        jumps = 0\n        while steps > d:\n            steps -= d\n            jumps += 1\n        return jumps\n",
        "test": "assert min_Jumps(steps=5, d=2) == 2",
        "num_ids": 1716,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] != 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            result.append(float('inf'))\n    return result\n",
        "test": "assert div_list([1, 2, 3], [4, 5, 6]) == [0.25, 0.4, 0.5] ",
        "num_ids": 1545,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create an empty string to hold the numbers\n    num_str = ''\n    # create an empty string to hold the non-numbers\n    other_str = ''\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number, add it to the num_str\n        if char.isdigit():\n            num_str += char\n        # otherwise, add it to the other_str\n        else:\n            other_str += char\n    # return the concatenation of the other_str and num_str\n    return other_str + num_str\n",
        "test": "assert move_num(\"abcd\") == \"abcd\"",
        "num_ids": 1744,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [0] * n\n    dp[0] = 1\n    max_len = 0\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n        max_len = max(max_len, dp[i])\n    return max_len\n",
        "test": "assert largest_subset([1, 2, 3]) == 2  # should return the size of the largest subset",
        "num_ids": 2224,
        "indeed": true
    },
    {
        "number": 622,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def get_median(arr1, arr2, n):\n    if n%2==0:\n        median1 = (arr1[n//2-1]+arr1[n//2])/2\n        median2 = (arr2[n//2-1]+arr2[n//2])/2\n        median = (median1+median2)/2\n    else:\n        median = (arr1[n//2]+arr2[n//2])/2\n    return median\n",
        "test": "assert get_median([1, 2, 3, 4, 5], [5, 6, 7, 8, 9], 5) == 5, \"Test case 1 failed\"",
        "num_ids": 2474,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([2, 3, 4], 2) == [4, 9, 16] # test for a list of positive integers and n=2",
        "num_ids": 1353,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"HELLO\") == \"HELLO\"",
        "num_ids": 824,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    # Save the first and last elements of the list\n    first_elem = newList[0]\n    last_elem = newList[-1]\n    \n    # Replace the first element with the last element\n    newList[0] = last_elem\n    \n    # Replace the last element with the first element\n    newList[-1] = first_elem\n    \n    # Return the modified list\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1543,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r ** 2\n    return area\n",
        "test": "assert triangle_area(0) == 0",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    for i in range(start, end):\n        if array[i] > array[i-1] and array[i] - array[i-1] > 1:\n            return array[i-1] + 1\n    return array[end-1] + 1\n",
        "test": "assert find_First_Missing([0,1,2,3,4,5,6,7,8,9]) == 10",
        "num_ids": 2299,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    return string.replace(\" \", \"%20\")\n",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst\n",
        "test": "assert Split([1,2,3,4,5,6]) == [2,4,6] ",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def adjac(ele, sub = []):\n    # create a list of adjacent coordinates\n    adj = []\n    \n    # get the row and column of the given coordinate\n    row, col = ele\n    \n    # check the adjacent coordinates in the grid\n    for i in range(row-1, row+2):\n        for j in range(col-1, col+2):\n            # skip the current coordinate\n            if (i, j) == ele:\n                continue\n            \n            # check if the coordinate is within the grid\n            if i >= 0 and i < 8 and j >= 0 and j < 8:\n                adj.append((i, j))\n    \n    return adj",
        "test": "assert adjac((1,1)) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)]",
        "num_ids": 2384,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_', ' ')\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create two empty lists to hold non-zero and zero elements\n    non_zero = []\n    zero = []\n\n    # iterate through the list and append non-zero elements to non_zero list and zero elements to zero list\n    for num in num_list:\n        if num != 0:\n            non_zero.append(num)\n        else:\n            zero.append(num)\n\n    # combine non_zero list and zero list\n    return non_zero + zero\n",
        "test": "assert move_zero([1, 2, 0, 0, 3, 0, 4]) == [1, 2, 3, 4, 0, 0, 0]",
        "num_ids": 2006,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            res = res ^ arr[i] ^ arr[j]\n    return res\n",
        "test": "assert pair_xor_Sum([1,1,1,1],4) == 0 # expected output: 0",
        "num_ids": 1839,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 130,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(iterable))]\n",
        "test": "assert heap_sort([4, 1, 3, 2, 16, 9, 10, 14, 8, 7]) == [1, 2, 3, 4, 7, 8, 9, 10, 14, 16] ",
        "num_ids": 1521,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(10,20) == False",
        "num_ids": 1213,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index\n    wc_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n\n    # Round the wind chill index to the nearest integer\n    wc_index_rounded = round(wc_index)\n\n    return wc_index_rounded",
        "test": "assert wind_chill(5, 10) == 10 ",
        "num_ids": 1773,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names\n    that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['John', 'Sarah', 'Mike']) == 13, \"Sample name function failed\" # Test with a list containing only names with uppercase letters",
        "num_ids": 1429,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is in between them from a string.\n    '''\n    # Using regular expressions to find and replace parenthesis and what is in between them\n    pattern = r'\\(.*?\\)'\n    items = re.sub(pattern, '', items)\n    return items",
        "test": "assert remove_parenthesis(\"Hello (world)\") == \"Hello \"",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Set a counter variable to keep track of the number of nonagonal numbers found so far\n    count = 0\n    # Set a starting value for the nonagonal number\n    num = 1\n    # Keep adding 1 to the starting value until we've found n nonagonal numbers\n    while count < n:\n        # Increment the counter for each nonagonal number we find\n        count += 1\n        # Multiply the starting value by the sum of the first n integers (1 + 2 + ... + n) to get the next nonagonal number\n        num *= (n * (n + 1)) // 2\n    # Return the nth nonagonal number\n    return num\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    match = re.search(pattern, text.lower())\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle(\"This is a test\") == False",
        "num_ids": 1487,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    input[:k] = input[:k][::-1]\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 2) == [2, 1, 3, 4, 5]",
        "num_ids": 1814,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 4, 'b': 5}) != (1, 2, 3)",
        "num_ids": 1491,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    n = len(cost)\n    max_avg = float('-inf')\n    path = []\n    for i in range(n):\n        for j in range(n):\n            total_cost = 0\n            num_cells = 0\n            for k in range(i, n):\n                for l in range(j, n):\n                    total_cost += cost[k][l]\n                    num_cells += 1\n                    avg = total_cost / num_cells\n                    if avg > max_avg:\n                        max_avg = avg\n                        path = [(k, l) for k in range(i, n) for l in range(j, n)]\n    return max_avg, path\n",
        "test": "assert maxAverageOfPath(cost) == expected_result, \"Incorrect result\" ",
        "num_ids": 3764,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    \n    return filtered_students\n",
        "test": "assert filter_data({'Alice': (1.6, 50), 'Bob': (1.7, 60), 'Charlie': (1.5, 40)}, 1.6, 50) == {'Bob': (1.7, 60)} ",
        "num_ids": 2537,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 4]) == 2, \"Expected 2, got {}\".format(count_same_pair([1, 2, 3], [1, 2, 4]))",
        "num_ids": 1723,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base = str(base)\n    for digit in base:\n        sum += int(digit) ** power\n    return sum\n",
        "test": "assert power_base_sum(5, 2) == 25, \"Expected 25 but got a different value\"",
        "num_ids": 1797,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    matches = pattern.findall(text1)\n    return matches\n",
        "test": "assert extract_quotation('The \"quick brown fox\" jumps over the \"lazy dog\"') == ['quick brown fox', 'lazy dog']",
        "num_ids": 1223,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((1,2,3,4,5)) == (2,6,12,20)",
        "num_ids": 1790,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]",
        "num_ids": 1624,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            result.append(key)\n    return result\n",
        "test": "assert consecutive_duplicates([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1858,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * h\n    return lateral_area\n",
        "test": "assert lateralsurface_cone(0, 0) == 0, \"Test case 2 failed\"",
        "num_ids": 1465,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # use regular expressions to match spaces, commas, and dots\n    pattern = re.compile(r\"[\\s.,]+\")\n    # replace all matches with a colon\n    new_text = pattern.sub(\":\", text)\n    return new_text\n",
        "test": "assert replace_specialchar(\"Spaces in this sentence.\") == \"Spaces:in:this:sentence:\"",
        "num_ids": 1205,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_first_occurrence(A, x):\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            # found x, now search to the left to find first occurrence\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif A[mid] < x:\n            # x is in the right half\n            left = mid + 1\n        else:\n            # x is in the left half\n            right = mid - 1\n\n    # x is not in A\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 5, 6, 7], 4) == 3, \"Error: find_first_occurrence is incorrect.\"",
        "num_ids": 2623,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        temp = 1\n        for j in range(i,n):\n            temp *= arr[j]\n            res += temp\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([]) == 0, \"Incorrect result for []\"",
        "num_ids": 2527,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def set_middle_bits(n):\n    # Convert the number to binary format\n    binary_string = bin(n)[2:]\n    \n    # Check the length of the binary string\n    if len(binary_string) < 3:\n        return n\n    \n    # Toggle all bits except the first and the last bit\n    for i in range(1, len(binary_string) - 1):\n        if binary_string[i] == '0':\n            binary_string = binary_string[:i] + '1' + binary_string[i+1:]\n        else:\n            binary_string = binary_string[:i] + '0' + binary_string[i+1:]\n    \n    # Convert the binary string back to decimal format and return the result\n    return int(binary_string, 2)\n",
        "test": "assert set_middle_bits(0) == 0, \"Incorrect result for set_middle_bits(0)\" # expected result: 0",
        "num_ids": 1927,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index",
        "test": "assert left_insertion([1,2,3,4,5], 3) == 2 ",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    match = re.match(regex, string)\n\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert check_str(\"Aeiou\") == True",
        "num_ids": 1231,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def geometric_sum(n):\n    '''\n    Calculates the geometric sum of n-1 using recursion.\n    \n    Args:\n    n (int): The value of n.\n    \n    Returns:\n    float: The geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/2**(n-1) + geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initialize variables\n    count = 0\n    index = 0\n    triangular_number = 0\n\n    # loop through triangular numbers until we find one with n digits\n    while count < n:\n        index += 1\n        triangular_number = (count + 1) * (index + 1) // 2\n        count = len(str(triangular_number))\n\n    # return the index of the smallest triangular number with n digits\n    return index\n",
        "test": "assert find_Index(0) == 0",
        "num_ids": 1420,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    \n    # Initialize an empty dictionary\n    result_dict = {}\n    \n    # Loop through the tuple, starting from the first element and up to the second-last element\n    for i in range(len(test_tup) - 1):\n        # Add each adjacent pair to the dictionary as a key-value pair\n        result_dict[test_tup[i]] = test_tup[i + 1]\n    \n    # Return the resulting dictionary\n    return result_dict\n",
        "test": "assert tuple_to_dict(()) == {}  # empty tuple",
        "num_ids": 1869,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, and False otherwise.\n    '''\n    # Check if the length of the string is 0\n    if len(s) == 0:\n        return True\n    # Check if all characters in the string are the same\n    for i in range(1, len(s)):\n        if s[i] != s[0]:\n            return False\n    return True",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 1303,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculates the area of a tetrahedron.\n\n    Args:\n    side: The length of one edge of the tetrahedron.\n\n    Returns:\n    The area of the tetrahedron.\n    '''\n\n    # Calculate the height of the tetrahedron using Heron's formula\n    height = math.sqrt(side**2 * (side**2 - 2 * side) / 4)\n\n    # Calculate the area of the base of the tetrahedron\n    base_area = math.sqrt(3) / 4 * side**2\n\n    # Calculate the area of the tetrahedron using the formula A = (B/2) * h\n    tetrahedron_area = base_area * height / 2\n\n    return tetrahedron_area\n",
        "test": "assert area_tetrahedron(2) == 8 ",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    if m > n:\n        m = m % n\n    if m == 0:\n        return list\n    else:\n        return list[-m:]+list[:-m]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3] # rotate right by 2 items",
        "num_ids": 2094,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3, 4)) == False",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    def check_divisible(num):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if num % digit != 0:\n                return False\n        return True\n\n    result = []\n    for i in range(startnum, endnum + 1):\n        if check_divisible(i):\n            result.append(i)\n    return result\n",
        "test": "assert divisible_by_digits(100, 200) == [110, 120, 130, 140, 150, 160, 170, 180, 190]",
        "num_ids": 3371,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Calculates the area of a sector using the formula: A = r^2 * (a/360) * (2 * pi)\n    :param r: radius of the sector\n    :param a: angle of the sector (in degrees)\n    :return: the area of the sector, or None if a > 360\n    '''\n    if a > 360:\n        return None\n    return r**2 * (a/360) * (2 * math.pi)",
        "test": "assert sector_area(4,370) == None  # angle is greater than 360 degrees, expect None",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Initialize a 3D table to store the lengths of LCSs\n    table = [[[0 for _ in range(len(Z)+1)] for _ in range(len(Y)+1)] for _ in range(len(X)+1)]\n    # Fill the table using dynamic programming\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    table[i][j][k] = 1 + table[i-1][j-1][k-1]\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n    # Backtrack to find the LCS\n    lcs = []\n    i, j, k = len(X), len(Y), len(Z)\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] > table[i][j-1][k] and table[i-1][j][k] > table[i][j][k-1]:\n            i -= 1\n        elif table[i][j-1][k] > table[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    lcs.reverse()\n    return ''.join(lcs)\n",
        "test": "assert lcs_of_three(\"ABCDEF\", \"GHIFJK\", \"LMNOPQ\") == \"\"",
        "num_ids": 4584,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'[A-Z][a-z]*'\n    result = re.findall(pattern, str1)\n    return ' '.join(result)\n",
        "test": "assert capital_words_spaces('') == ''",
        "num_ids": 1356,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)\n",
        "test": "assert sort_numeric_strings([\"10\", \"2\", \"7\", \"5\", \"3\"]) == [\"2\", \"3\", \"5\", \"7\", \"10\"]  # example 1",
        "num_ids": 1701,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, (4, 5, 6)]",
        "num_ids": 1265,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # Base case\n    if i == 0:\n        return True\n\n    # Check if the parent is less than the current element\n    if arr[i] < arr[int((i-1)/2)]:\n        return False\n\n    # Recursive call to check for remaining elements\n    return check_min_heap_helper(arr, int((i-1)/2))\n\n\ndef check_min_heap(arr):\n    '''\n    This function will call the above helper function and check if the array is a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)\n",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5], 0) == True",
        "num_ids": 2972,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 1, 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c\n",
        "test": "assert jacobsthal_num(1) == 1",
        "num_ids": 1644,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_records = []\n    for i in range(K):\n        min_record = min(test_list, key=lambda x: x[0])\n        min_records.append(min_record)\n        test_list.remove(min_record)\n    return min_records",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 3) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 2294,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5]) == [] ",
        "num_ids": 2071,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def second_smallest(numbers):\n    '''\n    Find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    # initialize smallest and second smallest to the first two elements\n    smallest = min(numbers[0], numbers[1])\n    second_smallest = max(numbers[0], numbers[1])\n    \n    # loop through the rest of the list, updating smallest and second smallest as needed\n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    \n    return second_smallest\n",
        "test": "assert second_smallest([1, 2, 3]) == 2",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = re.compile(r'a+b+')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"abc\")",
        "num_ids": 1166,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 1665,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    \n    # Iterate over each element in the list\n    for i in range(len(list1)):\n        # Convert the element to a tuple\n        tup = tuple(list1[i])\n        \n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[tup] += 1\n            \n    # Return the dictionary of counts\n    return count_dict\n",
        "test": "assert unique_sublists([[1, 2], [3, 4], [1, 2], [5, 6]]) == {(1, 2): 2, (3, 4): 1, (5, 6): 1}",
        "num_ids": 2319,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "test": "assert is_decimal('1.23') == True",
        "num_ids": 1157,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_arr = set(arr)\n    if len(set_arr) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([2, 2, 3, 3, 4]) == False",
        "num_ids": 1376,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(6) == True",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(2, n):\n        diff = abs(arr[i] - arr[i-1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([3, 5, 2, 8, 1], 5) == 1 ",
        "num_ids": 1814,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"hello\") == 0",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_num = 1\n    count = 1\n    while count < n:\n        polite_num += 1\n        polite_num = math.floor(math.log2(polite_num))\n        count += 1\n    return polite_num",
        "test": "assert is_polite(1) == 1 ",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1,2,3,4,5]) == [(1,2), (2,3), (3,4), (4,5)] ",
        "num_ids": 1307,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def get_pairs_count(arr, sum):\n    pairs = 0\n    # Create a dictionary to store the counts of each element in the array\n    count_dict = {}\n    for num in arr:\n        count_dict[num] = count_dict.get(num, 0) + 1\n    # Iterate through the array again, subtracting each element from the target sum\n    for num in arr:\n        if count_dict.get(sum - num, 0) > 0:\n            pairs += 1\n            # If the number is equal to half the target sum, we don't count it again\n            if num == sum // 2 and count_dict[num] > 1:\n                pairs -= 1\n            count_dict[num] -= 1\n            count_dict[sum - num] -= 1\n    return pairs // 2  # Divide by 2 to avoid counting each pair twice\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 8) == 1",
        "num_ids": 1712,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1,2,3],[1,2,3]) == [], \"Incorrect Difference\"",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    odd = 1\n    for i in range(n):\n        total += odd ** 4\n        odd += 2\n    return total\n",
        "test": "assert odd_num_sum(1) == 1, \"Error: odd_num_sum(1) is incorrect.\"",
        "num_ids": 1233,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack\n",
        "test": "assert check_expression(\"()\") == True",
        "num_ids": 2239,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert remove_length(\"Hello world\", 5) == \"\"",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    occurrences = []\n    for match in matches:\n        occurrences.append(match.span())\n    if len(occurrences) == 0:\n        return None\n    else:\n        return occurrences\n",
        "test": "assert occurance_substring(\"hello world\", \"z\") is None",
        "num_ids": 1488,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 3, 4, 6]) == False",
        "num_ids": 1292,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_vowels(test_str):\n    '''\n    Counts the number of characters that have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"abcd\") == 0 # No vowels with neighbors",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_sum(arr):\n    unique_arr = list(set(arr))\n    sum_unique = sum(unique_arr)\n    return sum_unique\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15 # all elements are unique",
        "num_ids": 1864,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result\n",
        "test": "assert pack_consecutive_duplicates([1, 1, 2, 2, 2, 3, 3, 3, 3]) == [[1, 1], [2, 2, 2], [3, 3, 3, 3]] ",
        "num_ids": 2230,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def unique_sublists(list1):\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_dict:\n            sublist_dict[sublist_tuple] = 1\n        else:\n            sublist_dict[sublist_tuple] += 1\n    return sublist_dict\n",
        "test": "assert unique_sublists([[1, 2], [3, 4], [1, 2]]) == {(1, 2): 2, (3, 4): 1}",
        "num_ids": 2284,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    target_sum = int(input(\"Enter the target sum: \"))\n    result = []\n    \n    for i in range(1, len(test_list) + 1):\n        comb = combinations(test_list, i)\n        for c in comb:\n            if sum(c) == target_sum:\n                result.append(c)\n    \n    return result\n",
        "test": "assert find_combinations([(1,2,3), (2,3,4), (3,4,5), (4,5,6), (5,6,7)]) == [(2, 3), (3, 2), (5, 3), (6, 3), (3, 5), (4, 5), (5, 4), (4, 7), (5, 7), (6, 7), (3, 5), (4, 5), (5, 4), (4, 7), (5, 7), (6, 7)] ",
        "num_ids": 4259,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0\n",
        "test": "assert count_divisors(24) == True, \"Incorrect Result\"",
        "num_ids": 1413,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    # Initialize the sum of all odd length subarrays\n    sum_odd = 0\n    \n    # Traverse through each element of the array\n    for i in range(n):\n        # Initialize the length of the subarray as 1\n        length = 1\n        # Initialize the sum of the subarray as the value of the current element\n        subarray_sum = arr[i]\n        \n        # Traverse through the remaining elements of the array\n        for j in range(i+1, n):\n            # Increment the length of the subarray by 1\n            length += 1\n            # Increment the sum of the subarray by the value of the next element\n            subarray_sum += arr[j]\n            \n            # Check if the length of the subarray is odd\n            if length % 2 != 0:\n                # Add the sum of the subarray to the sum of all odd length subarrays\n                sum_odd += subarray_sum\n                \n    return sum_odd\n",
        "test": "assert odd_length_sum([]) == 0 # edge case: empty array",
        "num_ids": 1816,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def rgb_to_hsv(r, g, b):\n    # initialize variables\n    r, g, b = r/255.0, g/255.0, b/255.0\n    h, s, v = 0, 0, 0\n    \n    # get the maximum and minimum values of r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # calculate the v (value)\n    v = max_val\n    \n    # calculate the s (saturation)\n    if max_val == 0:\n        s = 0\n    else:\n        s = 1 - (min_val/max_val)\n    \n    # calculate the h (hue)\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g-b)/(max_val-min_val)\n    elif max_val == g:\n        h = 2 + (b-r)/(max_val-min_val)\n    else:\n        h = 4 + (r-g)/(max_val-min_val)\n    \n    # convert h to degrees\n    h = h * 60\n    \n    # return hsv color as a tuple\n    return (h, s, v)\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) # black",
        "num_ids": 4182,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def mul_even_odd(lst):\n    even = []\n    odd = []\n    for num in lst:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even[0] * odd[0]\n",
        "test": "assert mul_even_odd([1, 2, 3, 4, 5, 6, 7]) == 14",
        "num_ids": 2153,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the parentheses and split the string into a list of strings\n    string_list = test_str.strip(\"()\").split(\",\")\n    # Convert each string in the list to an integer and store in a tuple\n    int_tuple = tuple(int(num) for num in string_list)\n    # Return the integer tuple\n    return int_tuple\n",
        "test": "assert tuple_str_int('(1, 2, 3)') == (1, 2, 3) ",
        "num_ids": 1515,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    \n    index = bisect.bisect_right(a, x)\n    \n    return index\n",
        "test": "assert right_insertion([1, 3, 5, 7], 4) == 2",
        "num_ids": 1465,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three('abbbb') == True",
        "num_ids": 1147,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])",
        "test": "assert new_tuple(test_list=[], test_str='') == ('',)",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([1, 2, 3, 4, 5]) == False",
        "num_ids": 1377,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) != tuple:\n            new_tup.append(item)\n    return tuple(new_tup)\n",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 1489,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function counts the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of x in arr, or -1 if it does not appear.\n    Assumes that arr is sorted in ascending order.\n    \"\"\"\n    # Find the first occurrence of x in arr using binary search\n    first = binary_search_first(arr, x)\n    \n    # If x does not appear, return -1\n    if first == -1:\n        return -1\n    \n    # Find the last occurrence of x in arr using binary search\n    last = binary_search_last(arr, x, first)\n    \n    return last\n\n\ndef binary_search_first(arr, x):\n    \"\"\"\n    Returns the first position of x in arr, or -1 if it does not appear.\n    Assumes that arr is sorted in ascending order.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            # Found the first occurrence of x in arr\n            if mid == 0 or arr[mid-1] != x:\n                return mid\n            else:\n                right = mid - 1\n    \n    # x does not appear in arr\n    return -1\n\n\ndef binary_search_last(arr, x, first):\n    \"\"\"\n    Returns the last position of x in arr, given that x appears at least once in arr.\n    Assumes that arr is sorted in ascending order.\n    \"\"\"\n    left = first\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            # Found the last occurrence of x in arr\n            if mid == len(arr) - 1 or arr[mid+1] != x:\n                return mid\n            else:\n                left = mid + 1\n    \n    # This should never happen\n    return -1\n",
        "test": "assert last([1, 2, 3, 4, 4, 5], 6) == -1",
        "num_ids": 2964,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb(\"acb\") == True",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6 ",
        "num_ids": 1135,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize the sum variable to zero\n    total = 0\n    # Loop over all odd numbers between 1 and n\n    for i in range(1, n+1, 2):\n        # Add each odd number to the total\n        total += i\n    # Return the sum of all odd numbers\n    return total\n",
        "test": "assert sum_odd(5) == 9",
        "num_ids": 1243,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "test": "assert _sum([1,2,3,4,5]) == 15",
        "num_ids": 1078,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def left_rotate(n, d):\n    # First, we need to shift the bits of the number left by d bits\n    shifted_bits = n << d\n    # Then, we need to remove the bits that were shifted out of the left side of the number\n    mask = (1 << d) - 1\n    bits_removed = n >> (32 - d)\n    # Finally, we need to combine the shifted bits and the bits removed\n    return (shifted_bits | bits_removed)\n",
        "test": "assert left_rotate(0, 1) == 0 # check if left_rotate(0, 1) returns 0",
        "num_ids": 1840,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello world!\") == \"Helloworld!\"",
        "num_ids": 939,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or y == z or x == z:\n        count = 2\n    elif x != y and y != z and x != z:\n        count = 0\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 1298,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def count_rotation(arr):\n    # Initialize the pivot as the last element\n    pivot = arr[-1]\n    # Initialize the index of pivot as the last index\n    pivot_index = len(arr) - 1\n    # Initialize the minimum index as the first index\n    min_index = 0\n    \n    # Iterate through the array from the pivot index to the first index\n    for i in range(pivot_index, 0, -1):\n        # If the current element is greater than the pivot element, then it's the correct position\n        if arr[i] > pivot:\n            # Return the index of the pivot element plus one, which is the number of rotations required\n            return i+1\n        # If the current element is less than the pivot element, then we need to shift the pivot element one position to the right\n        elif arr[i] < pivot:\n            # Swap the pivot element with the current element\n            arr[pivot_index], arr[i] = arr[i], arr[pivot_index]\n            # Update the pivot index\n            pivot_index = i\n            # Update the minimum index if the current element is less than the minimum element\n            if arr[i] < arr[min_index]:\n                min_index = i\n    \n    # If we haven't found the correct position of the pivot element, then the array is already sorted\n    return 0\n",
        "test": "assert count_rotation([4, 5, 7, 9, 10, 11, 12, 14, 15]) == 0",
        "num_ids": 2554,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # The perfect square of a number is less than or equal to the number itself\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_perfect_square(1) == True",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 4, 6]) == True",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            result = lst\n    return result\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]) == [6, 7, 8, 9]  # expected output: [6, 7, 8, 9]",
        "num_ids": 2090,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n",
        "test": "assert max_run_uppercase(\"HELLO\") == 5",
        "num_ids": 1714,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1203,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((1, 2, 3, 4, 5), 3) == True",
        "num_ids": 1100,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((2, 4, 6), (1, 3, 7)) == False",
        "num_ids": 1587,
        "indeed": true
    }
]