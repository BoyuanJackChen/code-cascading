[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n",
        "test": "assert similar_elements((1, 2, 3, 4, 5), (5, 6, 7, 8, 9)) == (5,)",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(9) == True",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for _ in range(n)]\n",
        "test": "assert heap_queue_largest([1,2,3,4,5],1) == [5]",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # If x is zero, it is not a power of two\n    if x == 0:\n        return False\n    \n    # If x is a power of two, the count of set bits will be only one\n    count_set_bits = 0\n    while x > 0:\n        count_set_bits += x & 1\n        x >>= 1\n        \n    return count_set_bits == 1\n",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Using regex to find all words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text.lower())\n    \n    return words\n",
        "test": "assert find_char_long('The quick brown fox jumps over the lazy dog') == ['quick', 'brown', 'jumps', 'lazy'] ",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    square_list = []\n    for num in nums:\n        square_list.append(num ** 2)\n    return square_list",
        "test": "assert square_nums([1,2,3,4,5]) == [1,4,9,16,25] # check if square_nums returns correct squares of elements in list",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rotations = 0\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            rotations = i\n            break\n    return rotations\n",
        "test": "assert find_Rotations('abcde') == 0",
        "num_ids": 632,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_Occ(s, ch):\n    # remove first occurrence of ch\n    s = s.replace(ch, '', 1)\n    # remove last occurrence of ch\n    s = s.replace(ch, '', 1)\n    return s\n",
        "test": "assert remove_Occ(\"hello world\", \"l\") == \"heo world\"",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    sorted_indices = sorted(range(len(row_sums)), key=lambda i: row_sums[i])\n    sorted_matrix = [[M[i][j] for j in range(len(M[0]))] for i in sorted_indices]\n    return sorted_matrix",
        "test": "assert sort_matrix([[1, 2], [2, 1]]) == [[1, 2], [2, 1]] ",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(6,8,10) == 240",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    match = pattern.search(text)\n    return bool(match)\n",
        "test": "assert text_lowercase_underscore(\"lower_case\") == True",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = ''\n    for i in string1:\n        if i not in string2:\n            result += i\n    return result\n",
        "test": "assert str_to_list(\"hello world\", \"llo\") == \"he wrd\"",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create an empty set to store unique values\n    unique_values = set()\n    \n    # iterate over the array and add each value to the set\n    for value in arraynums:\n        if value in unique_values:\n            # if the value is already in the set, it's a duplicate\n            return True\n        else:\n            # if the value is not in the set, add it\n            unique_values.add(value)\n    \n    # if we've reached this point, there are no duplicates\n    return False",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False # test for no duplicates",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(25) == False # expected output: True",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    reverse_num = int(num_str[::-1])\n    result = num + 1\n    if result == 2 * reverse_num:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(123) == False # expected output: False",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for digit in arr:\n        max_num = max_num * 10 + digit\n    return max_num\n",
        "test": "assert find_Max_Num([0, 0, 0, 0, 0]) == 0",
        "num_ids": 878,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a Python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(1, -1) == True",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_octagonal(n): \n    '''\n    Finds the nth octagonal number.\n    '''\n    count = 0\n    oct_num = 0\n    while count < n:\n        oct_num += 1\n        if 1 + (1 + 6 * oct_num)**0.5 == int(1 + (1 + 6 * oct_num)**0.5):\n            count += 1\n    return oct_num ",
        "test": "assert is_octagonal(2) == 8",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = defaultdict(int)\n    mod = 10**9+7\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            sum = 0\n            for k in s[i:j+1]:\n                sum += ord(k)-ord('0')\n            if sum==(j-i+1):\n                count[s[i:j+1]] += 1\n    return sum(count.values()) % mod\n",
        "test": "assert count_Substrings(\"22222\") == 6",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_num(xs):\n    '''\n    Returns the smallest number in a list of numbers.\n    '''\n    if not xs:\n        return None\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[j] - test_list[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 5, 3, 2]) == 4",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples as input and returns a sorted list of tuples based on the second element of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(5, 50), (4, 60), (3, 70), (2, 80), (1, 90)]) == [(5, 50), (4, 60), (3, 70), (2, 80), (1, 90)]",
        "num_ids": 1023,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total",
        "test": "assert recursive_list_sum([1, 2, 3, [4, 5, [6, 7]]]) == 28, \"Incorrect sum returned.\"",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pos_count(lst):\n    '''\n    Returns the number of positive integers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([-1, 0, 1, 2, 3]) == 3",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def bell_number(n):\n    memo = {}\n    def bell(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n in memo:\n            return memo[n]\n        memo[n] = bell(n-1) + bell(n-2)\n        return memo[n]\n    return bell(n)\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        elif A[i] < A[i+1]:\n            decreasing = False\n            \n    return increasing or decreasing\n",
        "test": "assert is_Monotonic([1, 2, 3]) == True, \"should be True\"",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1, 2, 3], [2, 3]) == True",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for t in Input:\n        if len(t) != length:\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1,2),(2,3)]) == True",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    while gap > 1:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n            \n    return nums\n",
        "test": "assert comb_sort([-3, 0, 1, 2, 3]) == [-3, 0, 1, 2, 3]",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dif_Square(n):\n    '''\n    Check if a number can be represented as the difference of two squares.\n    '''\n    # Check if the number is a perfect square\n    for i in range(int(n ** 0.5) + 1):\n        if i ** 2 == n:\n            return True\n    \n    # Check if the number can be represented as the difference of two squares\n    for i in range(int(n ** 0.5) + 1):\n        for j in range(int(n ** 0.5) + 1):\n            if i ** 2 - j ** 2 == n:\n                return True\n    \n    # If neither condition is met, return False\n    return False\n",
        "test": "assert dif_Square(25) == True, \"dif_Square(25) should return True\"",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns([\"red\", \"blue\", \"green\", \"yellow\"], [\"blue\", \"red\", \"green\", \"yellow\"]) == False, \"Error in is_samepatterns\"",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1, 3, 5), (2, 4, 6), (7, 10, 15)], 1) == [(1, 3, 5), (2, 4, 6), (7, 10, 15)]",
        "num_ids": 1026,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_Diff(n):\n    '''\n    Returns True if a number is divisible by 11, False otherwise.\n    '''\n    return n % 11 == 0\n",
        "test": "assert is_Diff(11) == True, \"is_Diff(11) should return True\"",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 != 0\n",
        "test": "assert word_len('hello') == True",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tetrahedral_number(n):\n    return (n * (n * n + 1)) // 2",
        "test": "assert tetrahedral_number(1) == 1 ",
        "num_ids": 1204,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n",
        "test": "assert volume_sphere(3) == 113.09733552923254 ",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_Char(strr):\n    # Calculate the sum of the ASCII values of all characters in the string\n    total_sum = sum(ord(char) for char in strr)\n\n    # Calculate the result modulo 26\n    result = total_sum % 26\n\n    # Convert the result to a character\n    char = chr(result + ord('A'))\n\n    return char\n",
        "test": "assert get_Char(\"Python\") == \"S\"",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sequence(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n    \"\"\"\n    if n == 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1, 1]\n        for i in range(3, n+1):\n            seq.append(seq[seq[-1]] + seq[i - seq[-1]])\n        return seq[n]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n",
        "test": "assert surfacearea_sphere(1) == 4*math.pi ",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    return (n * (2*n - 1))\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.defaultdict(dict)\n    for d in (dict1, dict2, dict3):\n        for k, v in d.items():\n            if isinstance(v, dict):\n                merged_dict[k].update(v)\n            else:\n                merged_dict[k] = v\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6} ",
        "num_ids": 861,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 2, 1, 1, 2, 3, 4]) == {1: 3, 2: 3, 3: 2, 4: 1} ",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def closest_num(N):\n    \"\"\"\n    Find the closest smaller number than N.\n    \"\"\"\n    for i in range(N-1, -1, -1):\n        if i < N:\n            return i\n",
        "test": "assert closest_num(2) == 1 # check if the function works for small numbers",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['elephant', 'lion', 'tiger', 'zebra']) == 8",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring('hello world', 'Hello') == False",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Convert the number to a string and split it into individual digits\n    digits = [int(d) for d in str(n)]\n\n    # Check if the number of digits is even\n    if len(digits) % 2 != 0:\n        return False\n\n    # Initialize the index to keep track of where we are in the list\n    index = 0\n\n    # Loop through the digits and compare adjacent pairs\n    while index < len(digits) - 1:\n        # If the current digit is less than or equal to the next digit, add 1 to the index\n        if digits[index] <= digits[index + 1]:\n            index += 1\n        # If the current digit is greater than the next digit, subtract 1 from the index\n        else:\n            index -= 1\n            break\n\n    # Check if we've reached the end of the list\n    if index == len(digits) - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert is_undulating(12) == True",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert power(2,3) == 8 ",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key=itemgetter(1))\n    return min_value[0]\n",
        "test": "assert index_minimum([(1, 5), (2, 3), (3, 4), (4, 1), (5, 2)]) == 4 ",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for inner_list in lst:\n        min_length = min(min_length, len(inner_list))\n    return min_length\n",
        "test": "assert Find_Min_Length([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == 2",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 24,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = []\n    for sublist in list1:\n        for item in sublist:\n            flat_list.append(item)\n    \n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    \n    return freq_dict\n",
        "test": "assert frequency_lists([[1,2,3],[4,5,6],[7,8,9]]) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1}",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "test": "assert multiply_num([1]) == 1",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer,\n    returned as an integer.\n    \"\"\"\n    num += 1\n    while not is_palindrome(str(num)):\n        num += 1\n    return num\n\ndef is_palindrome(s):\n    \"\"\"\n    Helper function to check if a given string is a palindrome.\n    \"\"\"\n    return s == s[::-1]\n",
        "test": "assert next_smallest_palindrome(123) == 131 # 131 is the next smallest palindrome of 123",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    :param arr: a list of integers\n    :param k: an integer representing the index of the desired element (1-based indexing)\n    :return: the kth element in the array\n    \"\"\"\n\n    # check if the array is empty\n    if len(arr) == 0:\n        return None\n\n    # check if k is valid (1 <= k <= len(arr))\n    if k < 1 or k > len(arr):\n        return None\n\n    # return the kth element\n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.capitalize() for word in words[1:])\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Find the Eulerian number a(n, m).\n    \"\"\"\n    if n < m:\n        return eulerian_num(m, n)\n    if m == 0 or m == n:\n        return 1\n    else:\n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m)\n",
        "test": "assert eulerian_num(0, 0) == 1",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"orange\"], [\"dog\", \"cat\"], [\"fish\", \"shark\"]]) == [[\"apple\", \"banana\", \"orange\"], [\"cat\", \"dog\"], [\"fish\", \"shark\"]]",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True]) == 2, \"Incorrect count\"",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n",
        "test": "assert add_lists([], (1, 2, 3)) == (1, 2, 3)",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    heap = []\n    i1 = 0\n    i2 = 0\n    i3 = 0\n    \n    # Add the first elements of each list to the heap\n    if num1:\n        heapq.heappush(heap, (num1[0], 1))\n    if num2:\n        heapq.heappush(heap, (num2[0], 2))\n    if num3:\n        heapq.heappush(heap, (num3[0], 3))\n    \n    # Create the merged list\n    merged_list = []\n    while heap:\n        # Get the smallest element from the heap\n        smallest_element, list_index = heapq.heappop(heap)\n        merged_list.append(smallest_element)\n        \n        # Add the next element from the same list to the heap\n        if list_index == 1 and i1 < len(num1) - 1:\n            i1 += 1\n            heapq.heappush(heap, (num1[i1], 1))\n        elif list_index == 2 and i2 < len(num2) - 1:\n            i2 += 1\n            heapq.heappush(heap, (num2[i2], 2))\n        elif list_index == 3 and i3 < len(num3) - 1:\n            i3 += 1\n            heapq.heappush(heap, (num3[i3], 3))\n    \n    return merged_list\n",
        "test": "assert merge_sorted_list([1], [2], [3]) == [1, 2, 3]",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a Python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        binary = int(s, 2)\n        count += bin(binary).count('1') % 2\n        s = s[-1] + s[:-1]\n    return count\n",
        "test": "assert odd_Equivalent(\"0000\", 1) == 0 ",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Finds the common elements in given nested lists.\n    Returns a list of all common elements.\n    \"\"\"\n    if not nestedlist:\n        return []\n    common = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common &= set(lst)\n    return list(common)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict1 in list1:\n        if dict1:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}, {}, {\"key\": \"value\", \"key2\": \"value2\"}]) == False",
        "num_ids": 368,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_str = ''\n    for num in nums:\n        num_str += str(num)\n    return int(num_str)\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result.append(list_to_float(item))\n        else:\n            try:\n                float_item = float(item)\n                result.append(float_item)\n            except:\n                result.append(item)\n    return result\n",
        "test": "assert list_to_float([1, 2, 3, \"4.0\", \"5.0\", 6, \"7\", \"8.5\", 9.5]) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.5, 9.5] ",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"Hello, world!\") == [\"Hello,\", \"world!\"]",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def search(arr):\n    if arr[0] != arr[-1]:\n        for i in range(1, len(arr)-1):\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n    else:\n        return arr[0]\n",
        "test": "assert search([1, 1, 1, 1, 2, 3, 3, 4]) == 2 ",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product\n",
        "test": "assert max_product_tuple([(0, 1), (0, -1), (-1, 1)]) == 0",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    \n    for i in range(2, limit+1):\n        divisor_sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                divisor_sum += j\n        \n        if i == divisor_sum and divisor_sum != i:\n            amicable_sum += i\n    \n    return amicable_sum\n",
        "test": "assert amicable_numbers_sum(10) == 0",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    return angle\n",
        "test": "assert angle_complex(0+0j) == None",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_length(string):\n    max_diff = 0\n    count_0 = count_1 = 0\n    for c in string:\n        if c == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n    return max_diff\n",
        "test": "assert find_length('111010011') == 3 ",
        "num_ids": 663,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors_sum += i\n    return divisors_sum\n",
        "test": "assert sum(1, 1) == 1",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n",
        "test": "assert long_words(4, [\"cat\", \"dog\", \"elephant\", \"giraffe\"]) == [\"elephant\", \"giraffe\"]",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    if n == 0 or n != len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of diagonal elements\n    diag1 = 0\n    diag2 = 0\n    for i in range(n):\n        diag1 += my_matrix[i][i]\n        diag2 += my_matrix[i][n-i-1]\n    \n    # Calculate the sum of rows and columns\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum != col_sum:\n            return False\n    \n    # Check if all the elements in the matrix are same\n    magic_sum = my_matrix[0][0] + my_matrix[0][1] + my_matrix[0][2]\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] != magic_sum:\n                return False\n    \n    # Check if the sum of diagonal elements is equal to the sum of rows and columns\n    if diag1 != diag2 or diag1 != magic_sum:\n        return False\n    \n    return True\n",
        "test": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 9]]) == False",
        "num_ids": 1403,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Finds the item with maximum frequency in a given list.\n    \"\"\"\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 8, 9]) == 4 ",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n    return ''.join(str1)\n",
        "test": "assert reverse_vowels(\"aeiou\") == \"uoiea\"",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert tup_string((1,2,3)) == \"(1, 2, 3)\"",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = [num for num in nums if num < 0]\n    return sum(negatives)\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num != 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    \n    if zero_count == 0:\n        return 0\n    else:\n        return non_zero_count / zero_count",
        "test": "assert zero_count(array('i', [1, 2, 3, 4, 5])) == 0.0",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    \n    # check if n can be represented as a sum of non-zero powers of 2\n    for i in range(31):\n        if n & (1 << i) != 0:\n            n -= 1 << i\n            if n == 0:\n                return True\n            elif n == 1:\n                return False\n    \n    # if n is still not zero, it can't be represented as a sum of non-zero powers of 2\n    return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(0) == True, \"Error: 0 should be True\"",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # use the math module to calculate the circumference\n    return 2 * math.pi * r\n",
        "test": "assert circle_circumference(0) == 0, \"circle_circumference(0) should be 0\"",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if type(item) == list:\n            for subitem in item:\n                flat_list.append(subitem)\n        else:\n            flat_list.append(item)\n    return set(flat_list)",
        "test": "assert extract_singly([[1, 2, 3], [4, 5], [6]]) == set([1, 2, 3, 4, 5, 6])",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    while n > 1:\n        max_index = nums.index(max(nums[:n]))\n        if max_index != n-1:\n            nums = flip(nums, max_index+1)\n            nums = flip(nums, n)\n        n -= 1\n    return nums\n\ndef flip(nums, k):\n    '''\n    Flip a list of elements.\n    '''\n    for i in range(k//2):\n        nums[i], nums[k-i-1] = nums[k-i-1], nums[i]\n    return nums\n",
        "test": "assert pancake_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_lists(Input):\n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4, \"Incorrect result for max_Abs_Diff([1, 2, 3, 4, 5])\"",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    gcd, x, y = extended_euclid(a, b)\n    if n % gcd != 0:\n        return None\n    else:\n        x *= n // gcd\n        y *= n // gcd\n        return x, y\n\n\ndef extended_euclid(a, b):\n    '''\n    Compute the gcd of a and b using the extended Euclidean algorithm.\n    Return the gcd, x, and y such that ax + by = gcd.\n    '''\n    if a == 0:\n        return b, 0, 1\n    else:\n        gcd, x, y = extended_euclid(b % a, a)\n        return gcd, y - (b // a) * x, x\n",
        "test": "assert find_solution(2, 4, 7) == None",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of (n - 2*i) from i=0 to n // 2.\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2*i\n    return sum\n",
        "test": "assert sum_series(0) == 0, \"sum_series(0) incorrect\"",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    theta = (180/s)\n    area = (l**2) * ((tan(theta/2))**2)\n    return area\n",
        "test": "assert area_polygon(15, 20) == 150 ",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum1 += i\n    for j in range(1, n+1):\n        if (n+1) % j == 0:\n            sum2 += j\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(40) == False, \"div_sum(40) should return False\"",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(ord('a') + i%26):\n            count += 1\n    return count\n",
        "test": "assert count_char_position('') == 0",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_even_pair(A):\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1,2,3,4]) == 2",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1, 2, 3, 4, 5], 3) == 1",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter\n",
        "test": "assert perimeter_pentagon(0) == 0",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] == 'std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count\n",
        "test": "assert count_occurance(\"std\") == 1",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) < 2:\n        return True\n    else:\n        first_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i]) != first_type:\n                return False\n        return True\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 615,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # First, check if the element is present in the array\n    if x not in arr:\n        return False\n    \n    # If it is present, determine its frequency\n    count = arr.count(x)\n    \n    # Check if the frequency is greater than n/2\n    if count > n/2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4], 6, 2) == False",
        "num_ids": 758,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Set_Bits(n):\n    # convert the number to binary and count the number of 1's\n    binary = bin(n)[2:]\n    count = 0\n    for bit in binary:\n        if bit == '1':\n            count += 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1 << (r-l+1)) - 1\n    return (n & mask) == 0\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b111111111,2,7) == False ",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def re_arrange_array(arr, n):\n    # Find the index of the last negative element\n    last_negative = -1\n    for i in range(n):\n        if arr[i] < 0:\n            last_negative = i\n    \n    # Move negative elements to the beginning of the array\n    j = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n            \n    # Reverse the order of the negative elements\n    for i in range(last_negative+1):\n        arr[i], arr[last_negative-i] = arr[last_negative-i], arr[i]\n    \n    return arr\n",
        "test": "assert re_arrange_array([-1, -2, -3, 4, 5], 3) == [-1, -2, -3, 4, 5]",
        "num_ids": 1027,
        "indeed": true
    },
    {
        "number": 230,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Replace all blank spaces in the given string with the given character.\n    \"\"\"\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank(\"hello world\", \"-\") == \"hello-world\"",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return sorted(heap, reverse=True)\n",
        "test": "assert larg_nnum([1], 1) == [1] # check if the function returns the correct output for a list with only one element",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Calculates the lateral surface area of a cylinder with radius r and height h.\n    '''\n    return 2 * 3.14 * r * h\n",
        "test": "assert lateralsuface_cylinder(0, 1) == 0, \"Incorrect result for lateralsuface_cylinder(0, 1)\"",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Calculates the volume of a cube with side length l.\n    \"\"\"\n    return l**3",
        "test": "assert volume_cube(2) == 8",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    \n    # Convert binary string to list of characters\n    binary_list = list(binary_str)\n    \n    # Iterate through the list and set even bits to 1\n    for i in range(len(binary_list)):\n        if i % 2 == 0:\n            binary_list[i] = '1'\n    \n    # Convert the list of characters back to binary string\n    new_binary_str = ''.join(binary_list)\n    \n    # Convert the binary string back to integer\n    new_number = int(new_binary_str, 2)\n    \n    return new_number\n",
        "test": "assert even_bit_set_number(10) == 10, \"Test 1 Failed\"",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # use Counter to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    return dict(counter)",
        "test": "assert check_occurences([(1, 2), (2, 3), (1, 2), (2, 3), (3, 4)]) == {(1, 2): 2, (2, 3): 2, (3, 4): 1} ",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_of_substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] != \"\":\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(1, m//2 + 1):\n        count += get_total_number_of_sequences(i, n-1)\n    return count\n",
        "test": "assert get_total_number_of_sequences(10, 1) == 1",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of the first list with the elements of the second list.\n\n    Args:\n    list1: The list to be modified.\n    list2: The list to be used to replace the last element of the first list.\n\n    Returns:\n    The modified list.\n    \"\"\"\n    if not list1:\n        return list2\n    elif not list2:\n        return list1\n    else:\n        list1[-1] = list2[0]\n        list1.extend(list2[1:])\n        return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 4, 5, 6]",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac('hello') == 5, \"count_charac('hello') should be 5\"",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return math.pow(int(root)+1, 2)\n    else:\n        return math.pow(int(root)+1, 2)",
        "test": "assert next_Perfect_Square(25) == 36",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    \n    # initialize dp array\n    dp = [0] * n\n    \n    # base case: the first element is always a part of a bitonic subsequence\n    dp[0] = arr[0]\n    \n    # fill dp array from left to right\n    for i in range(1, n):\n        # if the current element is greater than the previous element, we can add it to the subsequence\n        if arr[i] > arr[i-1]:\n            dp[i] = max(dp[i-1]+arr[i], arr[i])\n        # if the current element is less than or equal to the previous element, we need to start a new subsequence\n        else:\n            dp[i] = arr[i]\n    \n    # find the maximum sum of a bitonic subsequence from the dp array\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, dp[i])\n    \n    return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 4, 5, 4, 3, 2, 1, 0]) == 10",
        "num_ids": 1069,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Number should be non-negative\")\n\n    if number == 0:\n        return 0\n\n    guess = number\n    prev_guess = 0\n\n    while abs(guess - prev_guess) > 1e-10:\n        prev_guess = guess\n        guess = (guess + number / guess) / 2\n\n    return guess\n",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    \n    return dp[0][n-1]\n",
        "test": "assert lps(\"babad\") == 3",
        "num_ids": 783,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 546,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5), 3) == 1",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts the given element before each element in the list and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes in a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        polar_coords.append(cmath.polar(num))\n    return polar_coords\n",
        "test": "assert convert(0+1j) == (1, math.pi/2)",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n",
        "test": "assert count_integer([1,2,3,4,5]) == 5",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 24,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition)\n    of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4 ",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create a new tuple with the maximum values of each position\n    result = tuple(max(x, y) for x, y in zip(test_tup1, test_tup2))\n    return result\n",
        "test": "assert maximize_elements((1,2,3), (4,5,6)) == (4,5,6)",
        "num_ids": 763,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [2]\n    num = 3\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 2\n    return primes[-1]\n",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup\n",
        "test": "assert division_elements((2, 4, 6), (1, 2, 3)) == (2, 2, 2) ",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years\n",
        "test": "assert dog_age(1) == 7",
        "num_ids": 302,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    temp = []\n    count = 0\n    for i in S:\n        count += 1\n        temp.append(i)\n        if count % step == 0:\n            result.append(temp)\n            temp = []\n    if temp:\n        result.append(temp)\n    return result\n",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 1089,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Calculate the lateral surface area of a cube given its side length.\n    '''\n    surface = 6 * l * l\n    return surface\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_Sum(n):\n    '''\n    Write a Python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while n > 0:\n        sum += i**2\n        i += 2\n        n -= 1\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Finds the n'th star number\n    :param n: int\n    :return: int\n    \"\"\"\n    count = 1\n    while True:\n        star_num = 2*count-1\n        if count >= n:\n            return star_num\n        count += 1\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_even_and_even_index(arr):\n    # initialize sum to 0\n    total_sum = 0\n    # loop through even indexes of the list\n    for i in range(0, len(arr), 2):\n        # check if the element at the even index is even\n        if arr[i] % 2 == 0:\n            # add the element to the sum\n            total_sum += arr[i]\n    # return the total sum\n    return total_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        even_num = 2 * i\n        power = even_num ** 5\n        total += power\n    return total\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1,2), (4,5), (7,8)]) == [2, 5, 8] # expected output: [2, 5, 8]",
        "num_ids": 778,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup\n",
        "test": "assert substract_elements((1, 2, 3, 4), (5, 6, 7, 8)) == (-4, -4, -4, -4)",
        "num_ids": 820,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += math.comb(n, i) * (-1)**i\n    \n    return sum // 2\n",
        "test": "assert even_binomial_Coeff_Sum(0) == 0 ",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h\n",
        "test": "assert volume_cylinder(0,5) == 0, \"Test failed for volume_cylinder(0,5)\"",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 3) == {'c': 3, 'd': 4} ",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                count += 1\n    return count\n",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == 0",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += i*(i*(3*i-1))/2\n    return decagonal_num\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 529,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2), \"Error: sequential_search does not work correctly\"",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    # Convert the list to a set to remove duplicates, and then compare its length to the original list\n    if len(test_list) != len(set(test_list)):\n        return False\n    else:\n        return True\n",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def validate(n):\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if int(digit) < freq[digit]:\n            return False\n    return True\n",
        "test": "assert validate(12345) == True",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in lst)\n",
        "test": "assert check_element([1, 1, 1, 1, 1], 1) == True",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"a(b{2,3})\"\n    result = re.search(pattern, text)\n    return bool(result)\n",
        "test": "assert text_match_two_three('aabb') == True, \"text_match_two_three('aabb') should return True\"",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new array by repeating the given array k times\n    repeated_array = []\n    for i in range(k):\n        repeated_array += a\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the new array and find the max subarray sum\n    for i in range(n):\n        current_sum += repeated_array[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 1) == 15 # expected output: 15",
        "num_ids": 1377,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 1\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1],[2],[3,4,5]]) == [3,4,5]",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_no_of_ways(n, k):\n    MOD = 10**9 + 7\n    \n    # Initialize dp array with size (n + 1) x (k + 1)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    # Base cases\n    for i in range(1, k + 1):\n        dp[1][i] = 1\n    \n    # Iterate through each post and each color\n    for i in range(2, n + 1):\n        for j in range(1, k + 1):\n            # The current post can have the same color as the previous post\n            dp[i][j] += dp[i - 1][j]\n            \n            # The current post can have a different color than the previous post\n            for l in range(1, k + 1):\n                if j != l:\n                    dp[i][j] += dp[i - 1][l]\n                    \n            # Modulo the final answer to prevent overflow\n            dp[i][j] = dp[i][j] % MOD\n    \n    # The final answer will be stored in dp[n][1]\n    return dp[n][1]",
        "test": "assert count_no_of_ways(2, 2) == 2",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find(n, m):\n    '''\n    Write a Python function to find the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient\n",
        "test": "assert find(4, 2) == 2",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c\n",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert sum_div(12) == 28 # 12 has divisors 1,2,3,4,6,12",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0  # expected output: 0",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert flatten_list([1, [2, 3], 4]) == [1, 2, 3, 4]",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the count of each element\n    count_dict = defaultdict(int)\n\n    # iterate through the list of tuples\n    for item in stdata:\n        # increment the count of the first element in the tuple\n        count_dict[item[0]] += 1\n        # increment the count of the second element in the tuple\n        count_dict[item[1]] += 1\n\n    # iterate through the dictionary and find the maximum aggregate\n    max_aggregate = 0\n    for key, value in count_dict.items():\n        if value > max_aggregate:\n            max_aggregate = value\n\n    # return the maximum aggregate\n    return max_aggregate\n",
        "test": "assert max_aggregate([(1,2), (3,4), (5,6)]) <= 11 # max aggregate should be less than or equal to 11",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_binary_seq(n):\n    # Initialize the count to zero\n    count = 0\n    \n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**(2*n)):\n        # Convert the integer i to a binary string of length 2n\n        binary_str = bin(i)[2:].zfill(2*n)\n        \n        # Check if the first n bits and last n bits have the same sum\n        if sum(int(binary_str[i]) for i in range(n)) == sum(int(binary_str[i]) for i in range(n, 2*n)):\n            # If so, increment the count\n            count += 1\n    \n    # Return the count\n    return count\n",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 965,
        "indeed": true
    },
    {
        "number": 301,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Returns the maximum depth of a dictionary\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    \n    depth = 1\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v)+1)\n        elif isinstance(v, list):\n            depth = max(depth, list_depth(v)+1)\n        elif isinstance(v, tuple):\n            depth = max(depth, tuple_depth(v)+1)\n        else:\n            depth = max(depth, 1)\n    \n    return depth\n",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    for i in range(rotations):\n        temp = arr[0]\n        for j in range(n-1):\n            arr[j] = arr[j+1]\n        arr[n-1] = temp\n    \n    return arr[index]\n",
        "test": "assert find_Element([1,2,3,4,5], 0, 0, 0) == 1",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.search(\"^p\", word):\n            p_words.append(word)\n    if len(p_words) > 1:\n        return p_words[0], p_words[1]\n    else:\n        return None, None",
        "test": "assert start_withp(['python', 'ruby', 'perl']) == ('python', 'perl') ",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create a list to store the maximum sum of increasing subsequence up to i and including i\n    max_sum = [0] * n\n\n    # Initialize the maximum sum of increasing subsequence up to i=0 as the first element of the list\n    max_sum[0] = a[0]\n\n    # Iterate over the list starting from index 1\n    for i in range(1, n):\n        # Initialize the maximum sum of increasing subsequence up to i=1 as the second element of the list\n        if i == 1:\n            max_sum[i] = max(a[0], a[1])\n\n        # Calculate the maximum sum of increasing subsequence up to i and including i by checking if the previous maximum sum is greater than the current element plus the value of the i+kth element\n        elif max_sum[i-1] > a[i-1]+a[index+k-1]:\n            max_sum[i] = max_sum[i-1]\n\n        # If the previous maximum sum is not greater than the current element plus the value of the i+kth element, update the maximum sum to include the current element\n        else:\n            max_sum[i] = a[i-1]+a[index+k-1]\n\n    return max_sum[n-1]\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 2) == 9 ",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # make a deep copy of the tuple to avoid modifying the original tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # if n is negative, convert it to positive index\n    if n < 0:\n        n += len(new_tuplex)\n    \n    # if m is negative, convert it to positive index\n    if m < 0:\n        m += len(new_tuplex)\n    \n    # if m is not given, set it to 0\n    if m is None:\n        m = 0\n    \n    # if n is not given, set it to the end of the tuple\n    if n is None:\n        n = len(new_tuplex)\n    \n    # return the colon of the tuple\n    return new_tuplex[m:n]\n",
        "test": "assert colon_tuplex((1,2,3,4), -1, 0) == () # expecting () as output",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists,\n    selecting one factor from each list.\n    \"\"\"\n    # Create a list of tuples, where each tuple contains one factor from each list\n    products = [(a, b) for a in nums1 for b in nums2]\n    \n    # Sort the list of products in descending order by product value\n    products.sort(key=lambda x: x[0]*x[1], reverse=True)\n    \n    # Return the specified number of largest products\n    return products[:N]\n",
        "test": "assert large_product([1,2,3], [4,5,6], 0) == [] # expected output: []",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(5, 10) == 10",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # get the leftmost unset bit\n    unset_bit = (n & -n) \n\n    # set the leftmost unset bit\n    return n | unset_bit\n",
        "test": "assert set_left_most_unset_bit(0b00011101) == 0b100011101",
        "num_ids": 646,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * r ** 2 * h) / 3\n",
        "test": "assert volume_cone(0,10) == 0",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i = i * 2\n    return i // 2\n",
        "test": "assert highest_Power_of_2(12) == 8 ",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the n'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_string(list_, string):\n    '''\n    Apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list\n",
        "test": "assert add_string(['1', '2', '3'], '{}') == ['1', '2', '3']",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {}\n        dictionary[l1[i]][l2[i]] = l3[i]\n    return dictionary\n",
        "test": "assert convert_list_dictionary([], ['a', 'b'], ['x', 'y']) == {}",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = []\n    for lst in input_list:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1,2,3], [4,5,6,7], [8], [9,10]]) == [4, 5, 6, 7]",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store character count\n    char_count = {}\n    # iterate over each character in the string\n    for char in str1:\n        # if character is already in dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # otherwise, add it to the dictionary with count 1\n        else:\n            char_count[char] = 1\n    # iterate over each character in the string again\n    for char in str1:\n        # if character count is 1, return it\n        if char_count[char] == 1:\n            return char\n",
        "test": "assert first_non_repeating_character('hello') == 'h'",
        "num_ids": 753,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_char('a')",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median value.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert median_numbers(1, 2, 3) == 2",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n    return result\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24] ",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = []\n    for i in range(len(test_tup1)):\n        xor_result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(xor_result)\n",
        "test": "assert bitwise_xor((0,1,0,1), (1,0,1,0)) == (1,1,1,1) # expected output: (1, 1, 1, 1)",
        "num_ids": 1107,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)\n",
        "test": "assert extract_freq([(1,2), (2,3), (1,2), (3,4), (4,5), (4,5)]) > 3",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        inner_tup = ()\n        for j in range(len(test_tup1[i])):\n            inner_tup += (test_tup1[i][j] + test_tup2[i][j], )\n        result_tup += (inner_tup, )\n    return result_tup\n",
        "test": "assert add_nested_tuples((1, (2, 3)), (4, (5, 6))) != (1, (8, 9))",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(1,2) == 1, \"minimum(1,2) should return 1\"",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1, 2, 3), 2) == True",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"",
        "test": "assert find_Parity(3) == \"odd\", \"find_Parity(3) should return odd\"",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = sorted(str(n), reverse=True)\n    return int(''.join(digits))",
        "test": "assert rearrange_bigger(1) == 1, \"Incorrect output for rearrange_bigger(1)\"",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array\n    and one element from the second array.\n    \"\"\"\n    if not nums1 or not nums2:\n        return []\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1, num2))\n    pairs.sort()\n    return pairs[:k]\n",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 0) == []",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1,2), (2,3), (3,4), (4,5), (5,6)]) == 12, \"min_product_tuple([(1,2), (2,3), (3,4), (4,5), (5,6)]) should return 12\"",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if type(val) == str:\n            continue\n        elif val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert min_val([1, 2, 3]) == 1",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n\n    words = word.split('_')\n    return ''.join(words[:1] + [word.capitalize() for word in words[1:]])\n",
        "test": "assert snake_to_camel('') == ''",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    for tup in list1:\n        if len(tup) >= n:\n            return tup[n-1]\n    return None\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 3) == 4",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1, 2, 3], [2, 3, 4]) == True",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max1 = max2 = -float('inf')\n    min1 = min2 = float('inf')\n\n    # Find the maximum and minimum values in the array\n    for i in range(n):\n        if arr[i] > max1:\n            max1 = arr[i]\n        if arr[i] < min1:\n            min1 = arr[i]\n\n    # Find the second maximum and minimum values in the array\n    for i in range(n):\n        if arr[i] != max1 and arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] != min1 and arr[i] < min2:\n            min2 = arr[i]\n\n    # Return the product of the maximum and minimum values\n    return max1 * max2 if max1 * max2 > max1 * min2 else max1 * min2\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20, \"Incorrect result\"",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def group_tuples(input_list):\n    '''\n    Find common first element in given list of tuples.\n    '''\n    # Create a dictionary to store the count of each first element\n    first_element_count = {}\n    # Loop through the input list and count the occurrences of each first element\n    for tup in input_list:\n        if tup[0] not in first_element_count:\n            first_element_count[tup[0]] = 1\n        else:\n            first_element_count[tup[0]] += 1\n    # Find the common first elements by iterating over the dictionary and returning the keys that have a count greater than 1\n    common_first_elements = [key for key, value in first_element_count.items() if value > 1]\n    return common_first_elements\n",
        "test": "assert group_tuples([(1, 13), (2, 14), (1, 15)]) == [(1, [13, 15]), (2, [14])]",
        "num_ids": 1144,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Returns the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n",
        "test": "assert Find_Max(['a','bb','ccc','dddd','eeeee']) == 'eeeee'  # check for max element in a list of strings",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(num) for num in list1])\n    return total_sum * len(list1)",
        "test": "assert round_and_sum([1.0, 2.0, 3.0, 4.0, 5.0]) == 15.0",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Returns the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum\n",
        "test": "assert cube_Sum(0) == 0 # when n is 0, the function should return 0. ",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i)\n    return result\n",
        "test": "assert concatenate_tuple((\"test\",)) == \"test\"",
        "num_ids": 691,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # Calculate the sum of cubes of first n natural numbers using the formula:\n    # sum = (n * (n+1) / 2) ^ (1/3)\n    sum = (n * (n+1) / 2) ** (1/3)\n    \n    # Calculate the average of the sum\n    average = sum / n\n    \n    # Return the average\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1, \"Test case failed for n=1\"",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Extracts the last character of each string in a tuple and returns them as a tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear(('hello', 'world', 'python')) == ('o', 'd', 'n')",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 1) == 0",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Returns a list of only odd numbers from the given list of numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5] ",
        "num_ids": 514,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Use regular expression to match the date pattern\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None\n",
        "test": "assert change_date_format('2021-07-01') == '01-07-2021'",
        "num_ids": 783,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([4, 1, 3, 2]) == [1, 2, 3, 4] ",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] & test_tup2[i],)\n    return result_tuple\n",
        "test": "assert and_tuples((True, True, False), (False, True, True)) == (False, True, False)",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the vertex of the parabola\n    vertex_x = -b / (2 * a)\n    vertex_y = c - (a * vertex_x ** 2)\n    \n    # Find the distance from the vertex to the focus\n    focus_x = vertex_x + (-a * vertex_x)\n    focus_y = vertex_y\n    focus_dist = ((vertex_x - focus_x) ** 2 + (vertex_y - focus_y) ** 2) ** 0.5\n    \n    # Calculate the directrix\n    directrix = vertex_y + 2 * focus_dist\n    \n    return directrix\n",
        "test": "assert parabola_directrix(-1, 0, 3) == 3  # should return 3",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common_element(list1, list2):\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    base_sum = base1 + base2\n    median = (base1 + base2 + 2 * height) / 4\n    return median\n",
        "test": "assert median_trapezium(1, 3, 1) == 2",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element <= number:\n            return False\n    return True\n",
        "test": "assert check_greater([1,2,3], 2) == False ",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a+b\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"a\") == False",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit\n",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1, 2, -3, 4, -5]) == [-3, -5]",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if str1[i] in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd('') == '' ",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2), (2,3), (3,4), (4,5), (5,6)]) == 0, \"Error in count_bidirectional\" ",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def multiple_to_single(L):\n    '''\n    Joins a list of integers into a single integer.\n    '''\n    # joining the list of integers into a single integer\n    result = int(\"\".join(map(str, L)))\n    return result\n",
        "test": "assert multiple_to_single([1,2,3,4,5]) == 12345, \"Error in multiple_to_single function\" ",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b\\w+ly\\b'\n\n    # Find all the adverbs in the sentence using the pattern\n    adverbs = re.findall(pattern, text)\n\n    # If no adverbs are found, return None\n    if not adverbs:\n        return None\n\n    # Find the position of the first adverb in the sentence\n    position = text.find(adverbs[0])\n\n    # Return a tuple containing the first adverb and its position\n    return (adverbs[0], position)\n",
        "test": "assert find_adverb_position(\"The quick brown fox jumped over the lazy dog.\") == (0, 1)",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = None\n    for num in list1:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    return largest_neg\n",
        "test": "assert largest_neg([-5, -3, -7, -1, -2]) == -1 # pass ",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        if len(t) > K:\n            result.append(t[:K])\n        else:\n            result.append(t)\n    return result\n",
        "test": "assert trim_tuple([(1,2,3,4,5), (6,7,8,9,10), (11,12,13,14,15)], 3) == [(1,2,3), (6,7,8), (11,12,13)]",
        "num_ids": 1063,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index-wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "test": "assert index_multiplication((2, 3, 4), (5, 6, 7)) == (10, 18, 28)",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for item in lst:\n        if item in count:\n            result[item] = count[item]\n    return result\n",
        "test": "assert count_Occurrence((1, 2, 3), [1, 2, 3]) == Counter({1: 1, 2: 1, 3: 1})",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Given a list of numbers, return a new list containing the cube of each number.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n",
        "test": "assert cube_nums([1,2,3]) == [1,8,27]",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    if n < 1:\n        return 0\n    \n    total = 0\n    for i in range(1, n+1):\n        total += i\n    \n    return total\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_string(lst, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    \n    Args:\n        lst: a list of strings\n        size: the length of each extracted string\n    \n    Returns:\n        A new list of strings containing only the extracted substrings.\n    '''\n    result = []\n    for s in lst:\n        if len(s) >= size:\n            result.append(s[:size])\n    return result\n",
        "test": "assert extract_string([\"foo\", \"bar\", \"baz\"], 3) == [\"foo\", \"bar\", \"baz\"] ",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expressions to remove all whitespaces from the string\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n",
        "test": "assert remove_whitespaces('hello world') == 'helloworld'",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(100,50) == 50 ",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if (n//i) % 2 == 0 and i != n//i:\n                sum += n//i\n        i += 1\n    return sum\n",
        "test": "assert sumofFactors(0) == 0 ",
        "num_ids": 586,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found.\"\n",
        "test": "assert text_match_wordz(\"This is a test for zebra\") == \"zebra\"",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(4) == False",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"]",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Find_Min(lst):\n    '''\n    Returns the sublist of lst having minimum length.\n    If there are multiple such sublists, returns the first one found.\n    '''\n    if not lst:  # empty list\n        return []\n    min_len = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if lst[i:j] < min_sublist:\n                min_len = j - i\n                min_sublist = lst[i:j]\n    return min_sublist\n",
        "test": "assert Find_Min([1]) == [1]",
        "num_ids": 786,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(5, 7) == 35",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    return re.sub(pattern, '', str1)\n",
        "test": "assert remove_uppercase('HELLO') == '' # should remove all uppercase letters",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    comb_list = []\n    for i in range(1, len(list1)+1):\n        comb_list.extend(list(combinations(list1, i)))\n    return comb_list\n",
        "test": "assert combinations_list([]) == []  # empty list",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        max_so_far = max(max_so_far, max_product)\n        \n    return max_so_far\n",
        "test": "assert max_subarray_product([1, 2, 3, 4]) == 24, \"Incorrect output for [1, 2, 3, 4]\"",
        "num_ids": 1042,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    first_value = next(iter(dict.values()))\n    for value in dict.values():\n        if value != first_value:\n            return False\n    return True\n",
        "test": "assert check_value({\"a\": 1, \"b\": 2, \"c\": 1}, 1) is False ",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}\n",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_product(arr):\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr)\n    else:\n        max_product_so_far = max(arr[0], arr[1])\n        min_product_so_far = min(arr[0], arr[1])\n\n        for i in range(2, len(arr)):\n            if arr[i] < 0:\n                max_product_so_far, min_product_so_far = min_product_so_far * arr[i], max_product_so_far * arr[i]\n            else:\n                max_product_so_far = max(max_product_so_far * arr[i], arr[i])\n                min_product_so_far = min(min_product_so_far * arr[i], arr[i])\n\n        return max_product_so_far",
        "test": "assert max_product([1,2,3]) == 6, \"Incorrect max product for [1,2,3]\"",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_pairwise(test_tup):\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n",
        "test": "assert add_pairwise((1, 2, 3, 4, 5)) == (3, 5, 7)  # pairwise addition of (1, 2) and (2, 3) and (3, 4) should be (3, 5, 7)",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product\n",
        "test": "assert find_remainder([9, 8, 7], 1) == 0",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # initialize variables\n    count = 0\n    length = len(l)\n    \n    # loop through the list\n    for i in range(length):\n        # check if the current number is consecutive to the previous number\n        if i > 0 and l[i] - l[i-1] == 1:\n            count += 1\n    \n    # check if there are at least two consecutive numbers\n    if count >= 2:\n        return True\n    else:\n        return False\n",
        "test": "assert check_Consecutive([1, 2, 3]) == True",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                intersection_list.append(tup1)\n    return intersection_list\n",
        "test": "assert tuple_intersection([(1, 2), (2, 3), (3, 4)], [(2, 3), (3, 4), (4, 5)]) == [(2, 3), (3, 4)]",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str\n",
        "test": "assert replace_char('hello world', 'o', '0') == 'hell0 w0rld'",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = Counter(dict1)\n    sorted_dict = dict(sorted(dict2.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert sort_counter({'a': 1, 'b': 2, 'c': 3}) == Counter({'c': 3, 'b': 2, 'a': 1})",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        nums.sort()\n        return nums[0] + nums[-1]\n",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6, \"Test case 1 failed\"",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HeLLo\") == \"hello\"",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Create a regular expression pattern that matches any lowercase letter\n    pattern = re.compile('[a-z]+')\n    # Replace all occurrences of the pattern in the string with an empty string\n    return pattern.sub('', str1)\n",
        "test": "assert remove_lowercase('') == ''",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def first_digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(101) == 1",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns only the odd ones.\n    '''\n    odd_list = []\n    for num in lst:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5] # Test with a list of odd integers",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def difference(n):\n    # Calculate the sum of the first n natural numbers using the formula for the arithmetic series\n    sum_natural_numbers = n * (n + 1) // 2\n    \n    # Calculate the sum of cubes of the first n natural numbers using a loop\n    sum_cubes = 0\n    for i in range(1, n + 1):\n        sum_cubes += i ** 3\n    \n    # Return the difference between the two sums\n    return sum_cubes - sum_natural_numbers\n",
        "test": "assert difference(1) == 0",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1,1,1,1],4) == 0",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n",
        "test": "assert toggle_string(\"hello world\") == \"HELLO WORLD\"",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str(n1), str(n2)))\n",
        "test": "assert digit_distance_nums(0, 0) == 0, \"Incorrect output\"",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8], 8) == 36",
        "num_ids": 792,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set from the first tuple\n    set1 = set(test_tup1)\n    # Create a set from the second tuple\n    set2 = set(test_tup2)\n    # Find the union of the two sets\n    union_set = set1.union(set2)\n    # Convert the union set back to a list and sort it\n    sorted_list = sorted(list(union_set))\n    # Return the sorted list\n    return sorted_list\n",
        "test": "assert union_elements((1, 2, 3), (3, 4, 5)) == sorted((1, 2, 3, 4, 5)), \"Union test failed\" ",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        length = 0\n        for j in range(i, len(lst)):\n            length += 1\n            if length > max_length:\n                max_length = length\n    return max_length\n",
        "test": "assert Find_Max_Length([[1,2],[3,4],[5,6,7]]) == 3",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    matches = pattern.findall(text)\n    return matches ",
        "test": "assert extract_values('\"hello\" \"world\"') == ['hello', 'world']",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3, 4, 5], 5) == 10",
        "num_ids": 567,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer into a string and iterate through each character\n    sum = 0\n    for digit in str(n):\n        # Convert the character back to an integer and add it to the sum\n        sum += int(digit)\n    return sum",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def issort_list(list1):\n    '''\n    Check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "test": "assert sort_sublists([[], [\"cat\", \"dog\"], []]) == [[], [\"cat\", \"dog\"], []]",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([]) == []",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\n",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 2*3.14*r*r\n",
        "test": "assert surfacearea_cylinder(0, 0) == 0  # expected surface area of a cylinder with radius 0 and height 0",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1, 2, 3], [1, 2]) == True",
        "num_ids": 542,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit in the factorial of n.\n    \"\"\"\n    # Initialize a variable to store the factorial\n    factorial = 1\n    \n    # Loop through all the integers from 1 to n and multiply them to get the factorial\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Return the last digit in the factorial using modulus operator\n    return factorial % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 792,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            result.append(test_tup1[i])\n            result.append(test_tup2[i])\n    return result\n",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3, 4)) == ((4, None),), \"Dissimilar elements expected\"",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function takes a nested tuple as input and returns a tuple with even elements only.\n\n    :param test_tuple: A nested tuple containing integers and strings.\n    :param even_fnc: A function that takes an integer as input and returns True if the integer is even, else False.\n    :return: A tuple containing only even elements from the input tuple.\n    \"\"\"\n\n    even_elements = []\n\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            # If the element is a nested tuple, recursively call the function with the nested tuple as input.\n            even_elements.extend(even_ele(element, even_fnc))\n        else:\n            # If the element is not a tuple, check if it's even using the given function and append it to the list of even elements if it is.\n            if even_fnc(element):\n                even_elements.append(element)\n\n    return tuple(even_elements)\n",
        "test": "assert even_ele((1, 2, 3, 4, 5, (6, 7, 8, 9), (10, 11, 12), 13, 14), lambda x: x % 2 == 0) == (2, 4, (6, 8), (10, 12)) ",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a Python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = (b ** 2 + b ** 2) / 2 + b * s\n    return area\n",
        "test": "assert surface_Area(25, 30) == 375",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True # test empty dictionary",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        res = 0\n        for i in range(num):\n            res += catalan_number(i) * catalan_number(num - i - 1)\n        return res",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # create a regex pattern to match adverbs ending with ly\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    # find all the adverbs in the text\n    adverbs = re.findall(pattern, text)\n    # check if there are any adverbs in the text\n    if not adverbs:\n        return None\n    # find the first adverb in the list\n    first_adverb = adverbs[0]\n    # find the position of the first adverb in the text\n    position = text.find(first_adverb)\n    return first_adverb, position\n",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the lazy dog.\") == None",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    # Create a list of tuples where the first element is the price and the second element is the item name\n    item_list = [(item[0], item[1]) for item in items]\n    \n    # Use heapq to get the n most expensive items\n    n_most_expensive = heapq.nlargest(n, item_list)\n    \n    # Create a list of the most expensive items\n    most_expensive = [item[1] for item in n_most_expensive]\n    \n    return most_expensive\n",
        "test": "assert expensive_items([(1,10),(2,20),(3,30),(4,40),(5,50),(6,60)],0) == [], \"The expensive items are not correct\" ",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5] # This should be True",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 0\n    else:\n        return max(nums) - min(nums)\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = 0\n    while i*i <= b:\n        if i*i >= a:\n            squares.append(i*i)\n        i += 1\n    return squares\n",
        "test": "assert perfect_squares(2, 10) == [4, 9]",
        "num_ids": 1603,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.polar(complex(x, y))[0]\n    theta = cmath.polar(complex(x, y))[1]\n    rect_x = r * math.cos(theta)\n    rect_y = r * math.sin(theta)\n    return rect_x, rect_y\n",
        "test": "assert polar_rect(2, 3*cmath.pi/2) == -2",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
        "test": "assert binomial_Coeff(5,3) == 10",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octets = ip.split('.')\n    new_octets = []\n    for octet in octets:\n        if octet == '0':\n            new_octets.append('0')\n        elif octet[0] == '0':\n            new_octets.append(str(int(octet)))\n        else:\n            new_octets.append(octet)\n    return '.'.join(new_octets)\n",
        "test": "assert removezero_ip('255.255.255.255') == '255.255.255.255'",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if even_num is None and num % 2 == 0:\n            even_num = num\n        elif odd_num is None and num % 2 != 0:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return abs(even_num - odd_num)\n",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1 # first even: 2, first odd: 1, so the function should return 1 ",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the input strings to lists of integers\n    bin1 = list(map(int, str1))\n    bin2 = list(map(int, str2))\n    \n    # Initialize two pointers, one at the beginning of each list\n    i, j = 0, 0\n    \n    # Initialize a counter for swaps\n    swaps = 0\n    \n    # Iterate through the lists while i and j are within range\n    while i < len(bin1) and j < len(bin2):\n        \n        # If the two bits are not equal, increment the swap counter\n        if bin1[i] != bin2[j]:\n            swaps += 1\n        \n        # Move the pointers to the next position\n        i += 1\n        j += 1\n        \n    # If one of the lists has been fully traversed, increment the swap counter for the remaining elements\n    swaps += abs(len(bin1) - len(bin2))\n    \n    return swaps\n",
        "test": "assert min_Swaps(\"1000\",\"1111\") == 3, \"min_Swaps('1000','1111') should return 3\"",
        "num_ids": 1480,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        if isinstance(item, tuple):\n            size += tuple_size(item)\n        else:\n            size += sys.getsizeof(item)\n    return size\n",
        "test": "assert tuple_size(()) == 0 ",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_kth(arr1, arr2, k):\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = j = 0\n    \n    while k > 0:\n        if i == n1:\n            return arr2[j]\n        if j == n2:\n            return arr1[i]\n        \n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n        \n        k -= 1",
        "test": "assert find_kth([1, 2, 3, 4], [5, 6, 7, 8], 7) == 5",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Find the length of the number\n    length = len(str(number))\n    # Find the sum of the digits raised to the power of length\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    # If the sum is equal to the original number, then it is an Armstrong number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True, \"153 is not an Armstrong number\"",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum/number\n    return sum, avg\n",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even, otherwise returns False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(0) == True",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return str1[i]\n    return None\n",
        "test": "assert first_repeated_char('hello') == 'l'",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludics.append(i)\n    return ludics\n\ndef is_lucid(num):\n    '''\n    Check if a number is lucid or not.\n    '''\n    num_str = str(num)\n    num_set = set(num_str)\n    for digit in num_set:\n        if num_str.count(digit) != 1:\n            return False\n    return True",
        "test": "assert get_ludic(0) == []",
        "num_ids": 2028,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string = \" \".join(reversed_words)\n    return reversed_string\n",
        "test": "assert reverse_words('hello world') == 'world hello'",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians\n",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern.\n    The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return match.group(), start, end\n    else:\n        return None\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog', 'fox') == ('fox', 16, 19)",
        "num_ids": 699,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bell_Number(n):\n    bell = [0] * (n + 1)\n    bell[0] = bell[1] = 1\n    for i in range(2, n + 1):\n        bell[i] = bell[i-1] + bell[i-2] * (i - 1)\n    return bell[n]\n",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Given a list and an index L, returns a new list with the same elements as the original list,\n    but with the element at index L removed.\n    '''\n    return list1[:L] + list1[L+1:]\n",
        "test": "assert remove_kth_element([], 1) == []",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_of_nth(test_list, N):\n    # Create a list of the Nth column from each row\n    nth_list = [row[N-1] for row in test_list]\n    # Return the max value of the Nth column\n    return max(nth_list)",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 7",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1,2], [3,4], [5,6]]) == [[1,3,5], [2,4,6]]",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a list to store the cumulative sum of the values in the test_list\n    cumulative_sum = []\n    \n    # iterate over the test_list and add each value to the cumulative_sum list\n    for i in range(len(test_list)):\n        if i == 0:\n            cumulative_sum.append(test_list[i])\n        else:\n            cumulative_sum.append(cumulative_sum[-1] + test_list[i])\n    \n    return cumulative_sum\n",
        "test": "assert cummulative_sum([1, 2, 3]) == [1, 3, 6]",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list",
        "test": "assert average_tuple(((1,2,3),(4,5,6))) == [2.0, 5.0]",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tuple = []\n    for i in range(len(test_tup1)):\n        result_tuple.append(test_tup1[i] % test_tup2[i])\n    return tuple(result_tuple)\n",
        "test": "assert tuple_modulo((2, 4, 6), (3, 5, 7)) == (2, 4, 6)",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if steps == 0:\n        return -1\n    if steps < d:\n        return -1\n    if d == 1:\n        return 1\n    if steps == d:\n        return 1\n    if steps > d:\n        return min_Jumps(steps-d, d)+1\n    else:\n        return -1 ",
        "test": "assert min_Jumps(1000, 100) == 10",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divide two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1) != len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    \n    # Create an empty list to store the results\n    result = []\n    \n    # Iterate through the two lists, dividing corresponding elements and appending to the result list\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result\n",
        "test": "assert div_list([1,2,3],[4,5,6]) == [0.25, 0.4, 0.5] ",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    num_str = \"\"\n    alpha_str = \"\"\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, add it to the num_str variable\n        if char.isdigit():\n            num_str += char\n        # If the character is not a number, add it to the alpha_str variable\n        else:\n            alpha_str += char\n    \n    # Return the concatenation of the two strings in the desired format\n    return alpha_str + num_str\n",
        "test": "assert move_num(\"123\") == \"123\"",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_subset(a):\n    dp = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n",
        "test": "assert largest_subset([1, 2, 4, 8]) == 4  # all pairs are divisible",
        "num_ids": 1205,
        "indeed": true
    },
    {
        "number": 622,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # if both arrays are empty, return None\n    if n == 0:\n        return None\n\n    # if both arrays have same length, return the average of the middle elements\n    if n % 2 == 0:\n        return (arr1[n // 2 - 1] + arr2[n // 2 - 1]) / 2\n    else:\n        # if n is odd, return the middle element of the longer array\n        if n > 1:\n            if arr1[n // 2] < arr2[n // 2]:\n                return arr1[n // 2]\n            else:\n                return arr2[n // 2]\n        else:\n            return arr1[0]\n",
        "test": "assert get_median([1, 3, 5], [1, 3, 5], 3) == 3",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n",
        "test": "assert nth_nums([1,2,3], 3) == [1, 8, 27]",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper('HELLO WORLD') == 'HELLO WORLD'",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Returns the area of the largest triangle that can be inscribed in a semicircle with radius r.\n    \"\"\"\n    h = math.sqrt(r**2 - (r/2)**2)\n    area = 0.5 * r * h\n    return area\n",
        "test": "assert triangle_area(4) == 8",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if i != array[i]:\n            return i\n    \n    return end\n",
        "test": "assert find_First_Missing([1,3,5,7,9,11,13,15,17,19], 3) == 10",
        "num_ids": 738,
        "indeed": true
    },
    {
        "number": 628,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def split_list(lst):\n    '''\n    This function takes a list of numbers and returns two new lists: one with the even numbers and one with the odd numbers.\n    '''\n    even_list = []\n    odd_list = []\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    \n    return even_list, odd_list\n",
        "test": "assert Split([2]) == [2]",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub:\n        adj = [coord for coord in adj if coord in sub]\n    return adj\n",
        "test": "assert adjac((1,2,3), [(1,2,2)]) == [(1,3,3), (1,1,3), (2,2,3), (0,2,3), (1,2,5), (1,2,1)] ",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_', ' ')\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    non_zeroes = []\n    \n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            non_zeroes.append(num)\n            \n    return non_zeroes + zeroes\n",
        "test": "assert move_zero([0,1,2,0,4,0,6]) == [1,2,4,6,0,0,0] # expected output",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pair_xor_Sum(arr,n) : \n    # Initialize a variable to store the sum of xor of all pairs\n    result = 0\n    \n    # Traverse through all pairs of numbers in the array\n    for i in range(n-1):\n        for j in range(i+1,n):\n            # XOR the current pair of numbers and add it to the result\n            result = result ^ arr[i] ^ arr[j]\n            \n    # Return the sum of xor of all pairs of numbers\n    return result\n",
        "test": "assert pair_xor_Sum([0, 0, 0], 3) == 0",
        "num_ids": 686,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert heap_sort([1, 3, 2, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check if the sale amount has no profit and no loss.\n    \"\"\"\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(10, 10) # True",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + 0.6215*t - 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n    return math.ceil(wci)",
        "test": "assert wind_chill(70, -10) == 0 ",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['alice', 'bob', 'eve']) == 0",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)\n",
        "test": "assert remove_parenthesis(\"Hello, world!\") == \"Hello, world!\" # No parentheses, should return the same string",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Find the nth nonagonal number.\n    \"\"\"\n    # Using the formula n^2(3n-1)/2, find the nth nonagonal number.\n    nonagonal_num = (n**2 * (3*n - 1)) // 2\n    return nonagonal_num\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Check if a string contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\bz\\b'\n    match = re.search(pattern, text)\n    return bool(match)\n",
        "test": "assert text_match_wordz_middle(\"Zebra\") == False",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        k = len(input)\n    \n    input[:k] = input[:k][::-1]\n    return input\n",
        "test": "assert reverse_Array_Upto_K([], 0) == []",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple(('a', 1, 2), {'b': 3, 'c': 4}) == ('a', 1, 2, {'b': 3, 'c': 4}) # test the function with a tuple and a dictionary",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = float('-inf')\n    for i in range(n):\n        for j in range(n):\n            temp_avg = maxAverageHelper(cost, i, j, set())\n            if temp_avg > max_avg:\n                max_avg = temp_avg\n    return max_avg\n\n\ndef maxAverageHelper(cost, i, j, visited):\n    n = len(cost)\n    if i < 0 or i >= n or j < 0 or j >= n or (i, j) in visited:\n        return 0\n    if i == n - 1 and j == n - 1:\n        return cost[i][j]\n    visited.add((i, j))\n    right_avg = maxAverageHelper(cost, i, j + 1, visited)\n    down_avg = maxAverageHelper(cost, i + 1, j, visited)\n    visited.remove((i, j))\n    return cost[i][j] + max(right_avg, down_avg)\n",
        "test": "assert maxAverageOfPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 14.0, \"Test Case 4 Failed\"",
        "num_ids": 1717,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students\n",
        "test": "assert filter_data({'Alice':(1.7, 60), 'Bob':(1.8, 70), 'Charlie':(1.6, 50)}, 1.65, 55) == {'Bob': (1.8, 70)} ",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 5",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and iterate over its digits\n    base_str = str(base)\n    digit_sum = 0\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the digit_sum\n        digit_sum += int(digit) ** power\n    \n    return digit_sum\n",
        "test": "assert power_base_sum(7, 1) == 7",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n",
        "test": "assert extract_quotation('hello \"world\"') == \"world\"",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((1, 2, 3)) == (2, 6)",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.extend([key]*len(list(group)))\n    return result\n",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * r * h\n    return lateral_surface\n",
        "test": "assert lateralsurface_cone(0,0) == 0, \"Error: lateralsurface_cone(0,0) != 0\"",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Using regular expression to find all occurrences of spaces, commas, or dots\n    pattern = re.compile(r'[ ,.]')\n    # Replace all occurrences with a colon\n    result = re.sub(pattern, ':', text)\n    return result\n",
        "test": "assert replace_specialchar(\"\") == \"\"",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    # initialize variables\n    low = 0\n    high = len(A) - 1\n    \n    # use binary search to find the index\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            # found the number, check if it's the first occurrence\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            else:\n                # keep searching to the left\n                high = mid - 1\n        elif A[mid] < x:\n            # the number is in the right half of the array\n            low = mid + 1\n        else:\n            # the number is in the left half of the array\n            high = mid - 1\n    \n    # the number was not found in the array\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            res += prod\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([0, 0, 0]) == 0",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Get the binary representation of the number\n    binary_num = bin(n)[2:]\n    \n    # Initialize a variable to store the toggled binary number\n    toggled_binary = \"\"\n    \n    # Loop through the binary representation of the number and toggle the middle bits\n    for i in range(1, len(binary_num)-1):\n        if binary_num[i] == \"0\":\n            toggled_binary += \"1\"\n        else:\n            toggled_binary += \"0\"\n    \n    # Add the first and last bit of the original number to the toggled binary number\n    toggled_binary = binary_num[0] + toggled_binary + binary_num[-1]\n    \n    # Convert the toggled binary number back to decimal and return it\n    return int(toggled_binary, 2)\n",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    elif a[i-1] == x:\n        return i-1\n    else:\n        return i\n",
        "test": "assert left_insertion([1, 3, 5, 7], 4) == 2 ",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))",
        "test": "assert check_str(\"Apple\") == True",
        "num_ids": 377,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (0.5 ** (n - 1)) * geometric_sum(n - 1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef find_Index(n):\n    # initializing variables\n    index = 1\n    triangular_number = 0\n    \n    # finding the smallest triangular number with n digits\n    while True:\n        triangular_number += index\n        if len(str(triangular_number)) == n:\n            return index\n        index += 1\n",
        "test": "assert find_Index(1) == 1, \"find_Index(1) should return 1\"",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n",
        "test": "assert tuple_to_dict((1, 2, 3, 4)) == {1: 2, 3: 4}",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        return all(c == s[0] for c in s)\n",
        "test": "assert all_Characters_Same('aaa') == True",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    height = (side ** 2 - 3 * (side / 2) ** 2) / (2 * (side / 2))\n    area = 4 * (side ** 2) * math.sqrt(3) / 3\n    return area, height\n",
        "test": "assert area_tetrahedron(6) == 150.4402 ",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    return lst[-m%len(lst):] + lst[:-m%len(lst)]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3)) is False",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(100000, 1000000) == [246800, 357911] # expected output: [246800, 357911]",
        "num_ids": 1807,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2) * (a/360) * math.pi\n        return area\n",
        "test": "assert sector_area(1, 360) == 1 * math.pi, \"Incorrect value for sector_area\"",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0 for j in range(o+1)] for i in range(n+1)] for k in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][o]\n",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"ACDFR\") != \"AXBC\" ",
        "num_ids": 1249,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'([A-Z][a-z]+)'\n    result = re.sub(pattern, r'\\1 ', str1)\n    return result",
        "test": "assert capital_words_spaces('12345') == '12345'",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sorts a list of strings of numbers numerically\n    '''\n    return sorted(nums_str, key=float)\n",
        "test": "assert sort_numeric_strings(['12', '56', '78', '34']) == ['12', '34', '56', '78'] ",
        "num_ids": 696,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, (4, 5, 6)]",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    This function checks if the given array is a min heap or not.\n    It does this by comparing the value at index i with its children\n    (if they exist)\n    \"\"\"\n    # If there is no element at index i, return True\n    if i >= len(arr):\n        return True\n\n    # Get the left and right child indices\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n\n    # If the value at index i is greater than its children (if they exist), return False\n    if left_child < len(arr) and arr[left_child] < arr[i]:\n        return False\n    if right_child < len(arr) and arr[right_child] < arr[i]:\n        return False\n\n    # Recursively check the left and right children\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    This function is the public function that calls check_min_heap_helper\n    with an initial index of 0\n    \"\"\"\n    return check_min_heap_helper(arr, 0)\n",
        "test": "assert check_min_heap_helper([16, 4, 10, 14, 7, 9, 3, 2, 8, 1], 0) == False ",
        "num_ids": 1007,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal = [0, 1]\n        for i in range(2, n+1):\n            jacobsthal.append(jacobsthal[i-1] + 2*jacobsthal[i-2])\n        return jacobsthal[n]\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort()\n    return test_list[:K]",
        "test": "assert min_k([(2,3), (1,2), (3,4), (5,6)], 3) == [(1,2), (2,3), (3,4)]",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists.\n    The function should return a list.\n    '''\n\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [3, 4, 5]) == []",
        "num_ids": 877,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif smallest < num < second_smallest:\n            second_smallest = num\n    return second_smallest\n",
        "test": "assert second_smallest([2, 3, 5, 1, 6, 7, 8]) == 2",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b){1,}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one(\"ab\") == True",
        "num_ids": 389,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_reverse_pairs(test_list):\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store counts\n    counts = {}\n    \n    # loop over every element in the list\n    for sublist in list1:\n        # convert the sublist to a tuple and use it as a key for the counts dictionary\n        key = tuple(sublist)\n        \n        # if the key is already in the dictionary, increment its value by 1\n        if key in counts:\n            counts[key] += 1\n        # otherwise, add the key to the dictionary with a value of 1\n        else:\n            counts[key] = 1\n    \n    # return the counts dictionary\n    return counts\n",
        "test": "assert unique_sublists([[1,2,3], [2,3,4], [1,2,3]]) == {(1, 2, 3): 2, (2, 3, 4): 1}",
        "num_ids": 951,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal('3.14') == True, 'Expected True'",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1, 2, 3, 4]) == False # should return False if there is more than one distinct element in the list",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # create a list of months with 30 days\n    months_30 = [4, 6, 9, 11]\n    # check if the given month number is in the list of months with 30 days\n    if monthnum3 in months_30:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([3, 5, 8, 12], 4) == 2",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_ctr(str):\n    '''\n    Write a Python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_number = []\n    for i in range(n):\n        if i == 0:\n            polite_number.append(1)\n            continue\n        if i == 1:\n            polite_number.append(2)\n            continue\n        polite_number.append(polite_number[i-1]+polite_number[i-2])\n    return polite_number[n-1]\n",
        "test": "assert is_polite(1) == 1",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3]) == [(1, 2), (2, 3)] ",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to 'sum'. The function gets as input a list of numbers and the sum,\n    \"\"\"\n    pairs_count = 0\n    num_set = set()\n    \n    for num in arr:\n        complement = sum - num\n        if complement in num_set:\n            pairs_count += 1\n        num_set.add(num)\n    \n    return pairs_count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 12) == 0",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list that contains only the elements that are present in the first list but not in the second list.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff\n",
        "test": "assert Diff([1, 2, 3], []) == [1, 2, 3]",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    \n    # Initialize variables\n    sum = 0\n    count = 1\n    \n    # Loop through the first n odd natural numbers\n    while count <= n:\n        sum += count**4\n        count += 2\n    \n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 ",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "test": "assert check_expression(\"((a+b)*c)-d\") == True",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = [word for word in words if len(word) != K]\n    return \" \".join(new_words)\n",
        "test": "assert remove_length(\"remove_length function\", 5) == \"remove_length function\"",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Returns None if there is no match.\n    '''\n    # Find all the occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Initialize an empty dictionary to store the results\n    results = {}\n    \n    # Loop through the matches and add them to the results dictionary\n    for match in matches:\n        if match.group() not in results:\n            results[match.group()] = {'count': 0, 'positions': []}\n        results[match.group()]['count'] += 1\n        results[match.group()]['positions'].append(match.start())\n    \n    # If there are no matches, return None\n    if not results:\n        return None\n    \n    return results\n",
        "test": "assert occurance_substring(\"hello world\", \"World\") == None",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == True",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i-1].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"hello\") == 0 # No vowels have vowels as neighbors",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # loop through each element in the list and count the occurrence of each element\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n    \n    # loop through the count_dict and add the keys with count 1 to a new list\n    non_repeated_elements = [key for key, value in count_dict.items() if value == 1]\n    \n    # calculate the sum of the non-repeated elements in the list\n    sum_of_non_repeated_elements = sum(non_repeated_elements)\n    \n    return sum_of_non_repeated_elements\n",
        "test": "assert find_sum([1, 2, 3]) == 6",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "test": "assert pack_consecutive_duplicates([1, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5]) == [[1], [2, 2, 2], [3, 3, 3], [4, 4], [5, 5]] ",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        tup = tuple(sublist)\n        if tup in sublist_dict:\n            sublist_dict[tup] += 1\n        else:\n            sublist_dict[tup] = 1\n    return sublist_dict\n",
        "test": "assert unique_sublists([[1, 2], [2, 3], [1, 2], [2, 3], [3, 4], [1, 2]]) != {(1, 2): 3, (2, 3): 3, (3, 4): 1}",
        "num_ids": 968,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def find_combination_sums(nums):\n        '''\n        A helper function to find all possible combinations of sums.\n        '''\n        result = set()\n        for i in range(1, len(nums) + 1):\n            for comb in combinations(nums, i):\n                if sum(comb) not in result:\n                    result.add(sum(comb))\n        return result\n\n    # Find all possible combinations of sums for each tuple in the test_list\n    combination_sums = [find_combination_sums(tup) for tup in test_list]\n\n    # Find the intersection of all possible combination sums\n    intersection = set.intersection(*combination_sums)\n\n    return intersection",
        "test": "assert find_combinations([(1, 2, 3), (1, 4), (2, 3)]) == {(1, 2, 3): 6, (1, 4): 5, (2, 3): 5} ",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count",
        "test": "assert count_divisors(7) == 2 # 1, 7",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if (j - i) % 2 == 1:\n                for k in range(i, j):\n                    ans += arr[k]\n    return ans\n",
        "test": "assert odd_length_sum([2, 3, 4, 5]) == 0, \"Incorrect output for odd_length_sum([2, 3, 4, 5])\"",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax-cmin\n    if cmax==cmin:\n        h = 0\n    elif cmax==r:\n        h = (60*((g-b)/diff) + 360) % 360\n    elif cmax==g:\n        h = (60*((b-r)/diff) + 120) % 360\n    else:\n        h = (60*((r-g)/diff) + 240) % 360\n    if cmax==0:\n        s = 0\n    else:\n        s = (diff/cmax)*100\n    v = cmax*100\n    return (round(h, 2), round(s, 2), round(v, 2))\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1211,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_num = None\n    odd_num = None\n\n    # loop through the list and find the first even and odd number\n    for num in list1:\n        if even_num is None and num % 2 == 0:\n            even_num = num\n        elif odd_num is None and num % 2 != 0:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n\n    # if no even or odd number is found, return None\n    if even_num is None or odd_num is None:\n        return None\n\n    # multiply the even and odd number and return the result\n    result = even_num * odd_num\n    return result\n",
        "test": "assert mul_even_odd([1,3,5,7]) == None, \"Error: Incorrect result for [1,3,5,7]\"",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, str):\n        raise TypeError(\"Input must be a string\")\n    if not test_str.startswith(\"(\") or not test_str.endswith(\")\"):\n        raise ValueError(\"Input must be a tuple string\")\n    \n    # Remove the parentheses and split the string by comma\n    temp = test_str[1:-1].split(\",\")\n    \n    # Convert each string in the list to integer and append to a new list\n    result = []\n    for element in temp:\n        try:\n            result.append(int(element.strip()))\n        except ValueError:\n            raise ValueError(\"Input must be a tuple of integers\")\n    \n    return tuple(result)\n",
        "test": "assert tuple_str_int('(1,2,3)') == (1,2,3) ",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i < len(a) and a[i] == x:\n        i += 1\n    return i\n",
        "test": "assert right_insertion([1, 2, 3, 4], 2.5) == 2",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = r'a(b{3})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbbbbb\") == True",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 27,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # create a new tuple with the elements from the list and the string\n    new_tup = tuple(test_list) + (test_str,)\n    return new_tup\n",
        "test": "assert new_tuple([1, 2, 3], \"hello\") == (1, 2, 3, \"hello\") ",
        "num_ids": 471,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8]) == True",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert remove_nested((1, 2, 3, 4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count\n",
        "test": "assert count_list([[1, 2], [3, 4], [5, 6]]) == 3",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of element x in sorted array arr.\n    \"\"\"\n    low, high = 0, len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            # check if the element is at the rightmost position\n            if mid == len(arr) - 1 or arr[mid + 1] != x:\n                return mid\n            else:\n                low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return -1 # if element not found in array\n",
        "test": "assert last([1, 2, 3, 4, 5], 5) == 4",
        "num_ids": 753,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_starta_endb(\"aabb\") == True",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n",
        "test": "assert return_sum({1:2, 3:4}) == 6, \"The function is not returning the correct sum of the dictionary values\" ",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    # Initialize the sum to 0\n    s = 0\n    \n    # Loop through all odd numbers between l and r (inclusive)\n    for i in range(l, r+1, 2):\n        s += i\n    \n    return s\n",
        "test": "assert sum_odd(0) == 0 # should return 0, as there are no odd numbers within the range of 0 to 0",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "test": "assert _sum([1,2,3]) == 6",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def left_rotate(n, d):\n    # Convert the number to binary and pad it with 0's to make it a 32-bit number\n    bin_n = bin(n)[2:].zfill(32)\n    \n    # Rotate the bits to the left by d positions\n    rotated_bin_n = bin_n[d:] + bin_n[:d]\n    \n    # Convert the rotated binary number back to decimal\n    rotated_n = int(rotated_bin_n, 2)\n    \n    return rotated_n\n",
        "test": "assert left_rotate(1, 1) == 2",
        "num_ids": 823,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)",
        "test": "assert remove_all_spaces(\"Hello, world!\") == \"Hello,world!\"",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 2, 3) == 0",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n            \n    # Find the index of the minimum element\n    min_index = 0\n    for i in range(n):\n        if arr[i] == min_element:\n            min_index = i\n            break\n    \n    # Count the number of rotations\n    return min_index\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0 ",
        "num_ids": 1042,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    i = 1\n    while i*i <= n:\n        if i*i == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_perfect_square(1) == True",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 4, 3]) == True",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')  # initialize max_sum to negative infinity\n    max_list = []  # initialize max_list as an empty list\n    for lst in lists:  # iterate over all lists in the input list of lists\n        lst_sum = sum(lst)  # compute the sum of elements in the current list\n        if lst_sum > max_sum:  # if the sum of the current list is greater than max_sum\n            max_sum = lst_sum  # update max_sum to the sum of the current list\n            max_list = lst  # update max_list to the current list\n    return max_list",
        "test": "assert max_sum_list([[1],[2,3],[4,5,6]]) == [4,5,6]",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            if current_count > max_count:\n                max_count = current_count\n        else:\n            current_count = 0\n    return max_count\n",
        "test": "assert max_run_uppercase(\"\") == 0, \"Empty string\"",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function checks if the given tuple contains the given integer K or not.\n    If K is found in the tuple, the function returns True.\n    Otherwise, the function returns False.\n\n    Parameters:\n        test_tup (tuple): A tuple of integers.\n        K (integer): An integer to search in the tuple.\n\n    Returns:\n        bool: True if K is found in the tuple, False otherwise.\n    \"\"\"\n    for num in test_tup:\n        if num == K:\n            return True\n    return False\n",
        "test": "assert check_K((1, 2, 3), 2) == True",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result\n",
        "test": "assert check_smaller((1, 2, 3), (1, 2, 3)) == False",
        "num_ids": 619,
        "indeed": true
    }
]