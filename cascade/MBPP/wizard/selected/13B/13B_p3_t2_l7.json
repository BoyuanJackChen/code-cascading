[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = set(test_tup1) & set(test_tup2)\n    return shared\n",
        "test": "assert similar_elements((1,2,3,4,5),(6,7,8,9,10)) == ()",
        "num_ids": 367
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(2) == False",
        "num_ids": 468
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of the first n numbers in the list\n    min_heap = nums[:n]\n    hq.heapify(min_heap)\n    \n    # iterate over the remaining numbers in the list\n    for num in nums[n:]:\n        # if the current number is larger than the smallest number in the min-heap,\n        # replace the smallest number with the current number and re-heapify\n        if num > min_heap[0]:\n            hq.heappop(min_heap)\n            hq.heappush(min_heap, num)\n    \n    # return the min-heap in descending order\n    return sorted(min_heap, reverse=True)\n",
        "test": "assert heap_queue_largest([3, 7, 9, 1, 5], 2) == [9, 7]",
        "num_ids": 672
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x <= 0:\n        return False\n    \n    power = 1\n    while (power*2) <= x:\n        power = power*2\n    \n    return power == x or power*2 == x\n",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 423
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to find all words that are at least 4 characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = pattern.findall(text)\n    \n    return matches\n",
        "test": "assert find_char_long(\"Hello world! This is a test.\") == [\"Hello\", \"world\", \"This\", \"test\"]",
        "num_ids": 393
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "test": "assert square_nums([1,2,3,4,5]) == [1,4,9,16,25] ",
        "num_ids": 334
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    if n == 0:\n        return 0\n    s1 = s + s\n    i = 0\n    j = 0\n    while i < n and j < 2 * n:\n        if s[i] == s1[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return j // n - 1\n",
        "test": "assert find_Rotations(\"\") == 0 # Edge case: empty string",
        "num_ids": 677
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', 1)\n        return s\n    else:\n        return s\n",
        "test": "assert remove_Occ('hello world', 'o') == 'hell wrld'",
        "num_ids": 449
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    row_sums = [sum(row) for row in M]\n    sorted_rows = sorted(enumerate(row_sums), key=lambda x: x[1])\n    sorted_M = [[0 for j in range(n)] for i in range(n)]\n    for i, (idx, _) in enumerate(sorted_rows):\n        sorted_M[i] = M[idx]\n    return sorted_M\n",
        "test": "assert sort_matrix([[1, 2], [3, 4]]) == [[1, 2], [3, 4]] # example case 2",
        "num_ids": 663
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism\n    and returns its volume.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(10, 10, 10) == 1000",
        "num_ids": 288
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r\"[a-z]+_[a-z]+\"\n    return bool(re.search(regex, text))\n",
        "test": "assert text_lowercase_underscore('hello_world') == True",
        "num_ids": 371
    },
    {
        "number": 17,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square with side length a.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 271
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list to store the characters in the first string\n    char_list = [0] * NO_OF_CHARS\n    \n    # Iterate over the first string and add each character to the list\n    for i in string:\n        char_list[ord(i)] = 1\n    \n    # Create a new string to store the characters not present in the second string\n    new_string = \"\"\n    \n    # Iterate over the second string and add each character to the new string if it's not in the first string\n    for i in string_two:\n        if char_list[ord(i)] == 0:\n            new_string += i\n    \n    return new_string\n",
        "test": "assert str_to_list('hello world', 'h') == ['e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']",
        "num_ids": 664
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # Create an empty dictionary to store the unique elements of the array\n    unique = {}\n    \n    # Loop through each element of the array\n    for num in arraynums:\n        \n        # If the element is already in the unique dictionary, return True as there is a duplicate\n        if num in unique:\n            return True\n        \n        # Otherwise, add the element to the unique dictionary\n        else:\n            unique[num] = True\n    \n    # If no duplicates are found, return False\n    return False\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 554
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_woodall(x):\n    '''\n    Checks if the given number is a Woodall number or not.\n    '''\n    \n    # Check if the given number is a positive integer\n    if not isinstance(x, int) or x < 1:\n        return False\n    \n    # Initialize variables to keep track of the sum of factors\n    sum_factors = 1\n    factor = 2\n    \n    # Iterate through all factors of x and add them up to find the sum of factors\n    while factor * factor <= x:\n        if x % factor == 0:\n            sum_factors += factor\n            if factor != x // factor:\n                sum_factors += x // factor\n        factor += 1\n    \n    # Check if the sum of factors is equal to x\n    if sum_factors == x:\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(4) == False",
        "num_ids": 487
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    reversed_num = int(num_str[::-1])\n    return num == reversed_num * 2 + 1\n",
        "test": "assert rev(123) == False",
        "num_ids": 467
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function finds the largest number that can be formed from the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)  # sorting the array in reverse order to find the maximum number\n    max_num = \"\"\n    for digit in arr:\n        max_num += str(digit)\n    return int(max_num)  # converting the maximum number to an integer",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 54321, \"Error: find_Max_Num([1, 2, 3, 4, 5]) should return 54321\"",
        "num_ids": 650
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def opposite_Signs(x,y):\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(0, 1) == False",
        "num_ids": 318
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    while True:\n        oct_num = i * (i * 2 - 1)\n        if oct_num == n:\n            return True\n        elif oct_num > n:\n            return False\n        else:\n            i += 1\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 334
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = defaultdict(int)\n    \n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            if sum_of_digits == len(substring):\n                count += 1\n    \n    return count\n",
        "test": "assert count_Substrings(\"1234\") == 1",
        "num_ids": 602
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert smallest_num([5, 2, 8, 3, 1]) == 1",
        "num_ids": 369
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    max_diff = 0\n    min_val = test_list[0]\n    for val in test_list:\n        if val < min_val:\n            min_val = val\n        else:\n            diff = val - min_val\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4 ",
        "num_ids": 497
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([('Maths', 85), ('Science', 75), ('English', 90)]) == [('Maths', 85), ('English', 90), ('Science', 75)] # should return a sorted list of tuples based on the second value of each tuple. ",
        "num_ids": 415
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 421
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5, \"incorrect count\"",
        "num_ids": 337
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_number(n):\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-1-j]\n    return bell[n]\n",
        "test": "assert bell_number(1) == 1",
        "num_ids": 480
    },
    {
        "number": 68,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n\n    increasing = A[0] <= A[1]\n    for i in range(2, len(A)):\n        if increasing:\n            if A[i] < A[i-1]:\n                return False\n        else:\n            if A[i] > A[i-1]:\n                return False\n\n    return True\n",
        "test": "assert is_Monotonic([1, 1, 1, 1, 1]) == True",
        "num_ids": 630
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1,2,3,4,5], [2,3]) == True",
        "num_ids": 462
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all tuples in the list have equal length and False otherwise.\n    '''\n    if len(Input) == 0:\n        return False\n    else:\n        length = len(Input[0])\n        for i in range(1, len(Input)):\n            if len(Input[i]) != length:\n                return False\n        return True\n",
        "test": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True",
        "num_ids": 522
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    :param nums: List of elements to be sorted.\n    :return: Sorted list of elements.\n    \"\"\"\n\n    gap = len(nums)\n    shrink = 1.3\n\n    while gap > 1:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n    return nums\n",
        "test": "assert comb_sort([]) == []",
        "num_ids": 778
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5)+1):\n        if (n-i**2)**0.5 == int((n-i**2)**0.5):\n            return True\n    return False",
        "test": "assert dif_Square(15) == False, \"Error in function dif_Square(15)\"",
        "num_ids": 446
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    \n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        else:\n            return False\n    \n    return True\n",
        "test": "assert is_samepatterns([1,2,3,4,5], [1,2,3,4,5]) == True",
        "num_ids": 490
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]",
        "num_ids": 747
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    # calculate the sum of digits\n    sum = 0\n    for digit in str(n):\n        sum += int(digit)\n    \n    # if the sum is divisible by 11, the number is divisible by 11\n    if sum % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(22) == False",
        "num_ids": 357
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def word_len(s):\n    '''\n    This function checks whether the length of the word is odd or not.\n    If the length of the word is odd, it returns True. Otherwise, it returns False.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert word_len(\"hello\") == True #should return True since the length of \"hello\" is 5, an odd number.",
        "num_ids": 351
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    t = 0\n    for i in range(n+1):\n        t += i ** 3\n    return t\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 205
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume",
        "test": "assert volume_sphere(3) == 113.09733552923254 ",
        "num_ids": 280
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    ascii_sum = sum(ord(c) for c in strr) % 26\n    return chr(ascii_sum + 65)\n",
        "test": "assert get_Char(\"world\") == \"w\"",
        "num_ids": 443
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        sequence = [0, 1]\n        for i in range(2, n+1):\n            sequence.append(sequence[sequence[-1]] + sequence[i-sequence[-2]])\n        return sequence[-1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 386
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n",
        "test": "assert surfacearea_sphere(5) == 314.1592653589793 ",
        "num_ids": 330
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 349
    },
    {
        "number": 87,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({'a':1,'b':2},{'c':3,'d':4},{'e':5,'f':6}) == {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6} ",
        "num_ids": 597
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    \n    # create a dictionary to store the frequency count of each element\n    freq_dict = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its count\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[element] = 1\n            \n    # return the dictionary of frequency counts\n    return freq_dict\n",
        "test": "assert freq_count([1,2,3,4,5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 635
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(N, 0, -1):\n        if i < N:\n            return i\n",
        "test": "assert closest_num(7) == 6",
        "num_ids": 288
    },
    {
        "number": 90,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a Python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6 # passing test case",
        "num_ids": 319
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n",
        "test": "assert find_substring(\"hello world\", \"world\") == True",
        "num_ids": 272
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # convert the number to string and store it in a list\n    digits = [int(d) for d in str(n)]\n    \n    # loop through the digits and check if the adjacent digits are equal\n    for i in range(len(digits) - 1):\n        if digits[i] == digits[i+1]:\n            return True\n    \n    # if no adjacent digits are equal, return False\n    return False\n",
        "test": "assert is_undulating(12) == False",
        "num_ids": 668
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result\n",
        "test": "assert power(2, 3) == 8",
        "num_ids": 231
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list in ascending order of the second element\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(1, 2), (3, 1), (2, 3), (4, 1), (5, 0)]) == (5, 0) ",
        "num_ids": 524
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize min_length to None\n    min_length = None\n    # loop through the list of lists\n    for sublist in lst:\n        # if min_length is None, set it to the length of the current sublist\n        if min_length is None:\n            min_length = len(sublist)\n        # otherwise, compare the length of the current sublist to min_length\n        elif len(sublist) < min_length:\n            min_length = len(sublist)\n    # return the minimum length\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3],[4,5],[6,7,8,9]]) == 2 # expected output: 2",
        "num_ids": 515
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 279
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "test": "assert frequency_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1} ",
        "num_ids": 736
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n",
        "test": "assert multiply_num([0, 1, 2]) == 0.0, \"Error in multiply_num\"",
        "num_ids": 359
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent,\n    represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary if binary else '0'\n",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 352
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # convert the input integer to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # check if the reversed number is equal to the input number\n    if num_str == str(num):\n        # if yes, we need to add a 1 to the end\n        num += 1\n\n    # convert the modified number to a string and reverse it again\n    new_num_str = str(num)[::-1]\n\n    # convert the string back to an integer and return it\n    return int(new_num_str)",
        "test": "assert next_smallest_palindrome(122) == 133 # input is even length",
        "num_ids": 730
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Returns the kth element in the given array using 1-based indexing.\n\n    :param arr: The array to search in.\n    :param k: The position of the element to find, using 1-based indexing.\n    :return: The kth element in the array.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be between 1 and the length of the array\")\n    return arr[k-1]",
        "test": "assert kth_element([1, 2, 3, 4, 5], 3) == 3",
        "num_ids": 397
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 463
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def eulerian_num(n, m):\n    # Initialize the first element of the series\n    a = 1\n    # Initialize the second element of the series\n    b = n\n    # Initialize the third element of the series\n    c = n * m\n    # Initialize the fourth element of the series\n    d = n * m * (n - 1)\n    # Initialize the fifth element of the series\n    e = n * m * (n - 1) * (m - 1)\n    \n    # Loop through the series until a(n, m) is found\n    while d > 0:\n        a = b\n        b = c\n        c = d\n        d = e\n        e = d * (n - 1) * (m - 1)\n    \n    return a\n",
        "test": "assert eulerian_num(0, 0) == 1",
        "num_ids": 477
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop over each sublist in the input list\n    for i in range(len(input_list)):\n        # Sort the current sublist using the sort() method\n        input_list[i].sort()\n    \n    # Return the sorted input list\n    return input_list\n",
        "test": "assert sort_sublists([['a', 'c', 'b'], ['z', 'y', 'x']]) == [['a', 'b', 'c'], ['x', 'y', 'z']] ",
        "num_ids": 646
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, True]) == 3 # expected output: 3",
        "num_ids": 297
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup",
        "test": "assert add_lists([], ()) == ()",
        "num_ids": 434
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] <= num2[0] <= num3[0]:\n            merged.append(heapq.heappop(num1))\n        elif num2[0] <= num1[0] <= num3[0]:\n            merged.append(heapq.heappop(num2))\n        else:\n            merged.append(heapq.heappop(num3))\n    \n    while len(num1) > 0:\n        merged.append(heapq.heappop(num1))\n    \n    while len(num2) > 0:\n        merged.append(heapq.heappop(num2))\n    \n    while len(num3) > 0:\n        merged.append(heapq.heappop(num3))\n    \n    return merged\n",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 1110
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert binary string to integer\n    num = int(s, 2)\n    \n    # Initialize variables to store the count of odd numbers\n    count = 0\n    \n    # Loop through the number of rotations\n    for i in range(n):\n        # Rotate the binary string by 1 bit\n        num = (num << 1) | (num >> (len(s) - 1))\n        \n        # Check if the rotated number is odd or not\n        if num % 2 == 1:\n            count += 1\n    \n    return count\n",
        "test": "assert odd_Equivalent('1100111', 2) == 2",
        "num_ids": 628
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Find the common elements in given nested lists.\n    \"\"\"\n    common = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common &= set(lst)\n    return list(common)\n",
        "test": "assert common_in_nested_lists([[], [], []]) == [] ",
        "num_ids": 497
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"42\") == True",
        "num_ids": 238
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n",
        "test": "assert empty_dit([{},{},{}]) == True # All dictionaries are empty",
        "num_ids": 291
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Check if the input is a tuple\n    if isinstance(nums, tuple):\n        # Convert the tuple into a list\n        nums_list = list(nums)\n        # Reverse the list\n        nums_list.reverse()\n        # Convert the list into a single integer\n        result = 0\n        for i in range(len(nums_list)):\n            result += nums_list[i] * (10 ** i)\n        return result\n    else:\n        # If the input is not a tuple, return an error message\n        return \"Error: Input is not a tuple.\"\n",
        "test": "assert tuple_to_int((1,2,3)) == 123",
        "num_ids": 497
    },
    {
        "number": 117,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    # iterate through the list and check if each element is a list\n    for i in range(len(test_list)):\n        # if the element is a list, call the function recursively on the sublist\n        if type(test_list[i]) == list:\n            test_list[i] = list_to_float(test_list[i])\n        # if the element is a string, try to convert it to a float\n        elif type(test_list[i]) == str:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                pass\n    \n    # return the modified list\n    return test_list\n",
        "test": "assert list_to_float([1, 2, 3]) == [1.0, 2.0, 3.0]",
        "num_ids": 695
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 263
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    \n    # Iterate through the array and count occurrences of each element\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # Find the element that appears only once\n    for num, count in counts.items():\n        if count == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None\n",
        "test": "assert search([1, 1, 2, 3, 3, 4, 4, 5, 5]) == 2",
        "num_ids": 671
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if abs(product) > abs(max_product):\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(-1, -2), (3, 4), (5, 6)]) == 30 ",
        "num_ids": 706
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(2, limit+1):\n        divisor_sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                divisor_sum += j\n        if divisor_sum != i and i == divisor_sum:\n            sum_amicable += i\n    return sum_amicable\n",
        "test": "assert amicable_numbers_sum(20) == 106",
        "num_ids": 764
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    return angle\n",
        "test": "assert angle_complex(0, 0) == 0",
        "num_ids": 316
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_length(string):\n    max_diff = 0\n    ones = 0\n    zeros = 0\n    for char in string:\n        if char == '0':\n            zeros += 1\n            max_diff = max(max_diff, zeros - ones)\n        else:\n            ones += 1\n            max_diff = max(max_diff, ones - zeros)\n    return max_diff\n",
        "test": "assert find_length(\"00110011\") == 2  # expected output: 2",
        "num_ids": 449
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_a = []\n    divisors_b = []\n    for i in range(1, a+1):\n        if a % i == 0:\n            divisors_a.append(i)\n    for i in range(1, b+1):\n        if b % i == 0:\n            divisors_b.append(i)\n    common_divisors = set(divisors_a).intersection(divisors_b)\n    return sum(common_divisors)\n",
        "test": "assert sum(6,9) == 15 ",
        "num_ids": 475
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6 # expected output is 6",
        "num_ids": 221
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(5, \"short long\") == \"long\"",
        "num_ids": 372
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    total_sum = sum(my_matrix[0])\n    diag_sum = sum(my_matrix[i][i] for i in range(n))\n    anti_diag_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    \n    for row in my_matrix:\n        if sum(row) != total_sum:\n            return False\n    \n    for col in range(n):\n        if sum(my_matrix[i][col] for i in range(n)) != total_sum:\n            return False\n    \n    if diag_sum != total_sum or anti_diag_sum != total_sum:\n        return False\n    \n    return True",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == False, \"Magic square test failed for the given matrix\"",
        "num_ids": 1055
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the highest frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 3, 4, 5]) == 1 ",
        "num_ids": 590
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n\n    while i < j:\n        if str1[i] in vowels and str1[j] in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n        elif str1[i] not in vowels:\n            i += 1\n        else:\n            j -= 1\n\n    return \"\".join(str1)\n",
        "test": "assert reverse_vowels(\"hello\") == \"holle\"",
        "num_ids": 643
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert tup_string((1, 2, 3)) == \"(1, 2, 3)\"",
        "num_ids": 333
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0 ",
        "num_ids": 451
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 218
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count\n",
        "test": "assert zero_count(array('i', [1, 2, 3, 4, 5])) == 0 ",
        "num_ids": 619
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0 or n == 1:\n            return False\n        n = n // 2\n    return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == False  # 10 != 2^a + 2^b",
        "num_ids": 490
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Calculates the circumference of a circle with radius r.\n    \"\"\"\n    # Calculate the circumference of the circle\n    circumference = 2 * 3.14159 * r\n    # Return the circumference of the circle\n    return circumference\n",
        "test": "assert circle_circumference(1) == 2 * 3.14159, \"The circumference of a unit circle is not equal to 2 * pi\"",
        "num_ids": 370
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result\n",
        "test": "assert extract_singly([[1,2,3],[4,5],[6]]) == {1, 2, 3, 4, 5, 6}",
        "num_ids": 533
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    while n > 1:\n        max_index = nums.index(max(nums[:n]))\n        nums = pancake_reverse(nums, max_index + 1)\n        nums = pancake_reverse(nums, n)\n        n -= 1\n    return nums\n\ndef pancake_reverse(nums, k):\n    '''\n    Reverse the order of the first k elements of a list.\n    '''\n    for i in range(k//2):\n        nums[i], nums[k-i-1] = nums[k-i-1], nums[i]\n    return nums\n",
        "test": "assert pancake_sort([5, 3, 1, 4, 2]) == [1, 2, 3, 4, 5] ",
        "num_ids": 815
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3 ",
        "num_ids": 439
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "test": "assert find_lists((1,2,3,4,5,['a','b','c'])) == 2",
        "num_ids": 294
    },
    {
        "number": 145,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    min_val = arr[0]\n    max_val = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n        diff = max_val - min_val\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 731
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    x = n // b\n    y = (n - a*x) / b\n    return (x, y)\n",
        "test": "assert find_solution(1, 1, 1) == (1, 0)",
        "num_ids": 800
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]",
        "num_ids": 411
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    for i in range(n//2+1):\n        sum += n - 2*i\n    return sum\n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 426
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l) / 2\n    perimeter = s * l\n    angle = (180 / s)\n    height = l / tan(angle * (pi/180))\n    \n    return area + (height * l)\n",
        "test": "assert area_polygon(10, 5) == 25.0 # test case 2",
        "num_ids": 486
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum_1 = 0\n    div_sum_2 = 0\n    \n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum_1 += i\n            \n    for j in range(1, n+1):\n        if (n+1) % j == 0:\n            div_sum_2 += j\n            \n    if div_sum_1 == div_sum_2:\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(15) == False ",
        "num_ids": 753
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_char_position(str1):\n    # convert the string to lowercase to make the search case-insensitive\n    str1 = str1.lower()\n    # initialize a dictionary to store the count of characters at each position\n    char_count = {}\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # get the character at the current position\n        char = str1[i]\n        # check if the character is in the dictionary\n        if char in char_count:\n            # if the character is already in the dictionary, increment its count\n            char_count[char] += 1\n        else:\n            # if the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n    # loop through the dictionary and count the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for char, value in char_count.items():\n        # get the position of the character in the English alphabet\n        pos = ord(char) - 96\n        # check if the position of the character matches its count in the string\n        if value == pos:\n            count += 1\n    # return the final count\n    return count\n",
        "test": "assert count_char_position('The quick brown fox jumps over the lazy dog') == 5",
        "num_ids": 580
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count",
        "test": "assert find_even_pair([1, 2, 3, 4]) == 2",
        "num_ids": 433
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 325
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1, 2, 3, 2, 1], 2) == 2",
        "num_ids": 302
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5, 6], 1, 3) == 9",
        "num_ids": 425
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Calculates the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a",
        "test": "assert perimeter_pentagon(7) == 7 * math.sqrt(49 + 21 * math.sqrt(7))",
        "num_ids": 447
    },
    {
        "number": 172,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] == 'std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count\n",
        "test": "assert count_occurance(\"This is a std string\") == 1",
        "num_ids": 405
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) == 0:\n        return True\n    else:\n        data_type = type(test_tuple[0])\n        for element in test_tuple:\n            if type(element) != data_type:\n                return False\n        return True\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 422
    },
    {
        "number": 223,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 6) == False",
        "num_ids": 554
    },
    {
        "number": 224,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(1) == 1",
        "num_ids": 213
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n",
        "test": "assert odd_values_string('abcdefg') == 'aceg' ",
        "num_ids": 271
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1,2,3) == 1, \"min_of_three() failed\"",
        "num_ids": 406
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    \n    # Check if l is greater than r\n    if l > r:\n        return False\n    \n    # Left shift 1 by l and right shift 1 by r-1, and then XOR with n\n    mask = (1 << l) ^ (1 << r-1)\n    \n    # If the result is not 0, then all bits are not unset in the given range\n    if mask & n != 0:\n        return False\n    \n    # If all bits are unset in the given range, then return True\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10, 1, 3) == False",
        "num_ids": 701
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n\n    Parameters:\n        arr (list): The input array\n        n (int): The number of elements to re-arrange\n\n    Returns:\n        A new list with the re-arranged elements\n    \"\"\"\n    i = 0\n    j = n - 1\n\n    while i < j:\n        if arr[i] < 0 and arr[j] >= 0:\n            i += 1\n        elif arr[i] >= 0 and arr[j] < 0:\n            j -= 1\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n\n    return arr[:n]\n",
        "test": "assert re_arrange_array([-1, -2, 3, 4, 5], 3) == [-1, -2, 3, 4, 5]",
        "num_ids": 713
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == \" \":\n            new_str += char\n        else:\n            new_str += i\n    return new_str\n",
        "test": "assert replace_blank(\"hello world\", \"-\") == \"hello-world\"",
        "num_ids": 314
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([3,2,1,5,4], 2) == [5, 4]",
        "num_ids": 437
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area\n",
        "test": "assert lateralsuface_cylinder(0, 5) == 0, \"Error in calculating lateral surface area\"",
        "num_ids": 430
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 229
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a Python function to set all even bits of a given number.\n    \"\"\"\n    # Use bitwise AND to set all even bits to 1\n    return n | (n & -n)\n",
        "test": "assert even_bit_set_number(0) == 0, \"Test failed for even_bit_set_number(0)\"",
        "num_ids": 364
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    tuple_counter = Counter(test_list)\n    return dict(tuple_counter)\n",
        "test": "assert check_occurences([(1,2), (2,3), (3,4), (1,2), (5,6), (1,2), (2,3)]) == {(1, 2): 3, (2, 3): 2, (3, 4): 1, (5, 6): 1} ",
        "num_ids": 459
    },
    {
        "number": 238,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            sub = str[i:j]\n            if sub:\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 319
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize a list to store the number of sequences for each element in the sequence\n    dp = [1] * (m+1)\n    \n    # Loop through all the possible elements in the sequence\n    for i in range(2, n+1):\n        # Initialize a variable to store the number of sequences for this element\n        count = 0\n        \n        # Loop through all possible values for this element\n        for j in range(1, m+1):\n            # Check if the value is greater than or equal to twice the previous element and less than or equal to m\n            if j >= 2*i-1 and j <= m:\n                # Add the number of sequences for the previous element to the count\n                count += dp[j-1]\n        \n        # Update the count for this element in the list\n        dp[i] = count\n    \n    # Return the total number of sequences\n    return dp[n]\n",
        "test": "assert get_total_number_of_sequences(5, 3) == 1, \"get_total_number_of_sequences(5, 3) should return 1\"",
        "num_ids": 922
    },
    {
        "number": 240,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of list1 with the elements of list2.\n    \"\"\"\n    # First, check if the length of list2 is longer than the length of list1.\n    if len(list2) > len(list1):\n        print(\"Error: list2 is longer than list1.\")\n        return\n    \n    # If the length of list2 is not longer than the length of list1, replace the last element of list1 with the elements of list2.\n    for i in range(len(list2)):\n        list1[-1] = list2[i]\n    \n    # Return the modified list1.\n    return list1\n",
        "test": "assert replace_list([1,2,3,4], [5]) == [1,2,3,5]",
        "num_ids": 435
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello\") == 5",
        "num_ids": 290
    },
    {
        "number": 244,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square_root = math.sqrt(N)\n    next_square = math.ceil(square_root)\n    return next_square ** 2",
        "test": "assert next_Perfect_Square(10) == 16",
        "num_ids": 190
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_left = [0]*n\n    max_right = [0]*n\n\n    max_left[0] = arr[0]\n    max_right[n-1] = arr[n-1]\n\n    for i in range(1, n):\n        max_left[i] = max(max_left[i-1] + arr[i], arr[i])\n\n    for i in range(n-2, -1, -1):\n        max_right[i] = max(max_right[i+1] + arr[i], arr[i])\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, max_left[i] + max_right[i])\n\n    return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 2, 1, 2]) == 6 ",
        "num_ids": 884
    },
    {
        "number": 246,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Square root of a negative number is not defined\")\n    \n    guess = number / 2\n    while abs(guess**2 - number) > 1e-10:\n        guess = (guess + number / guess) / 2\n    \n    return guess\n",
        "test": "assert babylonian_squareroot(9) == 3",
        "num_ids": 492
    },
    {
        "number": 247,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "test": "assert lps(\"abdbca\") == 5, \"Incorrect result for 'abdbca'\"",
        "num_ids": 828
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    if n <= 0:\n        return 0\n    else:\n        return 1 + 1/2 + 1/3 + ... + 1/n",
        "test": "assert harmonic_sum(2) == 1.5",
        "num_ids": 278
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Parameters\n    ----------\n    array_nums1 : list of int\n        The first array of numbers.\n    array_nums2 : list of int\n        The second array of numbers.\n\n    Returns\n    -------\n    list of int\n        The intersection of the two arrays as a list of integers.\n    \"\"\"\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))\n",
        "test": "assert intersection_array([1,2,3,4,5],[2,4,6]) == [2,4]",
        "num_ids": 496
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3,4,5,6,7,8,9,10), 1) == 1",
        "num_ids": 374
    },
    {
        "number": 251,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the given element before each element in the list and returns the resulting list.\n    \"\"\"\n    new_lst = []\n    for item in lst:\n        new_lst.append(element)\n        new_lst.append(item)\n    return new_lst\n",
        "test": "assert insert_element([1,2,3], 0) == [0,1,0,2,0,3]",
        "num_ids": 350
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coords.append((r, theta))\n    return polar_coords\n",
        "test": "assert convert(-4-3j) == (5, 3*math.pi/4)",
        "num_ids": 410
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer(['a', 'b', 'c']) == 0, \"Incorrect count\"",
        "num_ids": 307
    },
    {
        "number": 255,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    combinations = combinations_with_replacement(l, n)\n    result = list(combinations)\n    return result\n",
        "test": "assert combinations_colors(['red', 'blue', 'yellow'], 2) == [('red', 'red'), ('red', 'blue'), ('red', 'yellow'), ('blue', 'blue'), ('blue', 'yellow'), ('yellow', 'yellow')] ",
        "num_ids": 621
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(0) == 0, \"Incorrect result for count_Primes_nums(0)\"",
        "num_ids": 477
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(5, 10) == (10, 5)",
        "num_ids": 267
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1,2,3),(4,5,6)) == (4,5,6)",
        "num_ids": 644
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sieve_of_atkin(limit):\n    # Initialize sieve and primes\n    P = [2, 3]\n    sieve = [False] * (limit + 1)\n    sieve[0], sieve[1] = True, True\n\n    # Sieve of Atkin\n    x, y = 0, 0\n    for x in range(1, int(limit**0.5) + 1):\n        for y in range(1, int(limit**0.5) + 1):\n            n = (4*x*x) + (y*y)\n            if n <= limit and (n % 12 == 1 or n % 12 == 5):\n                sieve[n] = not sieve[n]\n\n            n = (3*x*x) + (y*y)\n            if n <= limit and n % 12 == 7:\n                sieve[n] = not sieve[n]\n\n            n = (3*x*x) - (y*y)\n            if x > y and n <= limit and n % 12 == 11:\n                sieve[n] = not sieve[n]\n\n    # Final sweep\n    for n in range(5, int(limit**0.5) + 1):\n        if sieve[n]:\n            for k in range(n*n, limit + 1, n*n):\n                sieve[k] = False\n\n    # Collect primes\n    for p in range(5, limit + 1):\n        if sieve[p]:\n            P.append(p)\n\n    return P\n\n\ndef newman_prime(n):\n    limit = 1000000 # Adjust this limit based on desired precision\n    primes = sieve_of_atkin(limit)\n    return primes[n - 1]\n",
        "test": "assert newman_prime(2) == 11",
        "num_ids": 811
    },
    {
        "number": 261,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n",
        "test": "assert division_elements((1, 2, 3), (2, 4, 6)) == (0.5, 0.5, 0.5)",
        "num_ids": 610
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1,2,3,4,5,6],3) == ([1,2,3], [4,5,6])",
        "num_ids": 522
    },
    {
        "number": 264,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    d_age = h_age * 7\n    return d_age\n",
        "test": "assert dog_age(1) == 7",
        "num_ids": 201
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    sublist = []\n    for i in range(len(S)):\n        sublist.append(S[i])\n        if (i+1) % step == 0:\n            result.append(sublist)\n            sublist = []\n    if sublist:\n        result.append(sublist)\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 705
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 265
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while n > 0:\n        sum += i*i\n        i += 2\n        n -= 1\n    return sum\n",
        "test": "assert square_Sum(1) == 1 # Should return 1, since the sum of the squares of the first 1 odd natural number is 1*1 = 1",
        "num_ids": 390
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Finds the nth star number.\n    \"\"\"\n    # initialize variables\n    stars = \"\"\n    count = 0\n    \n    # loop until we have n stars\n    while count < n:\n        # add a star to the string\n        stars += \"* \"\n        # increment the count\n        count += 1\n    \n    # remove the extra space at the end\n    stars = stars.strip()\n    \n    # return the stars\n    return stars\n",
        "test": "assert find_star_num(1) == '*'",
        "num_ids": 512
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 200
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n    return sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7]) == 0 # no even number at even index",
        "num_ids": 500
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**5\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 413
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result",
        "test": "assert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]",
        "num_ids": 465
    },
    {
        "number": 273,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 535
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    k = 0\n    while k <= n:\n        if k % 2 == 0:\n            C = math.comb(n, k)\n            sum += C\n        k += 1\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(1) == 1, \"Test case failed\"",
        "num_ids": 379
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(0,5) == 0",
        "num_ids": 350
    },
    {
        "number": 277,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def dict_filter(d, n):\n    '''\n    This function takes in a dictionary and an integer n as parameters.\n    It returns a new dictionary that contains only the entries from the input dictionary where the value is greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in d.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert dict_filter({'a': 10, 'b': 5, 'c': 15, 'd': 20}, 10) == {'a': 10, 'c': 15, 'd': 20} ",
        "num_ids": 557
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count\n",
        "test": "assert count_first_elements((1, 2, 3, 2, 4, 5, 6, 2, 7, 8, 9, 0)) == 0 # tuple element not found",
        "num_ids": 536
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    # Use the formula for nth decagonal number: D_n = n*(3n-1)/2\n    decagonal_num = n*(3*n - 1)/2\n    \n    return decagonal_num\n",
        "test": "assert is_num_decagonal(1) == 1 ",
        "num_ids": 338
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index\n",
        "test": "assert sequential_search([1, 3, 5, 7, 9], 3) == (True, 1)",
        "num_ids": 483
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    \n    # Loop through the list and add each element to the set\n    for elem in test_list:\n        unique_set.add(elem)\n    \n    # If the length of the set is equal to the length of the list, \n    # then all elements are unique\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 428
    },
    {
        "number": 282,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtracts two lists element-wise.\n    '''\n    # create an empty list to store the result\n    result = []\n    \n    # loop through the two input lists and subtract their elements\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]",
        "num_ids": 531
    },
    {
        "number": 283,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n):\n    # Convert integer to a string\n    n_str = str(n)\n\n    # Create a dictionary to store the frequency of each digit\n    digit_freq = {}\n\n    # Iterate through each digit in the string\n    for digit in n_str:\n        # If the digit is not already in the dictionary, add it with a frequency of 1\n        if digit not in digit_freq:\n            digit_freq[digit] = 1\n        # Otherwise, increment the frequency of the digit\n        else:\n            digit_freq[digit] += 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digit_freq:\n        if digit_freq[digit] > int(digit):\n            return False\n\n    # If all the digits pass the validation, return True\n    return True",
        "test": "assert validate(12345) == True # should return True",
        "num_ids": 619
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in lst:\n        if i != element:\n            return False\n    return True\n",
        "test": "assert check_element([1, 1, 1], 1) == True",
        "num_ids": 317
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2}|b{3})'\n    match = re.search(pattern, text)\n    return bool(match)\n",
        "test": "assert text_match_two_three('abbb') is True",
        "num_ids": 349
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize the original array\n    original_array = a\n\n    # Repeat the array k times\n    for i in range(k-1):\n        a += original_array\n\n    # Find the maximum sub-array sum in the new array\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        current_sum = max(current_sum, 0)\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 8, 3) == 7 # expected output: 7 (The largest sum of a contiguous subarray in the modified array is [4, -1, -2, 1, 5, -3, -2, -3, 4, -1, -2, 1, 5, -3, -2, -3, 4, -1, -2, 1, 5, -3] which has a sum of 7)",
        "num_ids": 974
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i ** 2\n        i += 2\n    return sum\n",
        "test": "assert square_Sum(0) == 0, \"Error: square_Sum(0) should return 0\"",
        "num_ids": 354
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = list1[0]\n    for lst in list1:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[], [1], [1, 2], [1, 2, 3]]) == [1, 2, 3]",
        "num_ids": 507
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * k for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i - 1][j - 1]\n            if j < k - 1:\n                dp[i][j] += dp[i - 1][j + 1]\n    return sum(dp[n - 1])",
        "test": "assert count_no_of_ways(4, 3) == 12",
        "num_ids": 652
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n, m):\n    '''\n    Write a Python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(6,2) == 3 # 3 is the quotient of 6 divided by 2",
        "num_ids": 247
    },
    {
        "number": 293,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c\n",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 331
    },
    {
        "number": 294,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if type(listval[i]) == int or type(listval[i]) == float:\n            if listval[i] > maxval:\n                maxval = listval[i]\n    return maxval\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 449
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n",
        "test": "assert sum_div(10) == 18",
        "num_ids": 353
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function counts the number of inversions in an array.\n    '''\n    n = len(arr)\n    temp = [0] * n\n    return merge_sort(arr, temp, 0, n-1)\n\ndef merge_sort(arr, temp, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort(arr, temp, left, mid)\n        inv_count += merge_sort(arr, temp, mid + 1, right)\n        inv_count += merge(arr, temp, left, mid, right)\n    return inv_count\n\ndef merge(arr, temp, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            i += 1\n        else:\n            temp[k] = arr[j]\n            j += 1\n            inv_count += (mid - i + 1)\n        k += 1\n\n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n\n    for i in range(left, right+1):\n        arr[i] = temp[i]\n\n    return inv_count ",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 959
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert flatten_list([1, [2, 3], [4, 5, [6, 7], 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]",
        "num_ids": 544
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the sum of values for each key\n    aggregates = defaultdict(int)\n    # iterate through the list of tuples\n    for key, value in stdata:\n        # add the value to the aggregate for the given key\n        aggregates[key] += value\n    # find the maximum aggregate\n    max_agg = max(aggregates.values())\n    # find the keys with the maximum aggregate\n    max_keys = [k for k, v in aggregates.items() if v == max_agg]\n    # return a tuple containing the maximum aggregate and the corresponding keys\n    return (max_agg, max_keys)\n",
        "test": "assert max_aggregate([(1,2), (3,4), (4,5), (5,6)]) == (5,6)",
        "num_ids": 636
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize variables to store the count of binary sequences\n    count = 0\n    \n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**(2*n)):\n        # Convert the binary number to a string to split it into first n bits and last n bits\n        binary_string = format(i, '0{}b'.format(2*n))\n        # Split the binary string into first n bits and last n bits\n        first_n_bits, last_n_bits = binary_string[:n], binary_string[n:]\n        \n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if sum(int(bit) for bit in first_n_bits) == sum(int(bit) for bit in last_n_bits):\n            # If they are equal, increment the count of binary sequences\n            count += 1\n    \n    return count\n",
        "test": "assert count_binary_seq(0) == 1, \"Incorrect output for count_binary_seq(0)\"",
        "num_ids": 663
    },
    {
        "number": 301,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    else:\n        depths = []\n        for value in d.values():\n            if isinstance(value, dict):\n                depths.append(dict_depth(value) + 1)\n        if depths:\n            return max(depths)\n        else:\n            return 1\n",
        "test": "assert dict_depth({1: 2, 3: {4: 5}}) == 2",
        "num_ids": 397
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # First, check if the index is valid\n    if index < 0 or index >= len(arr):\n        return None\n    \n    # Then, find the number of rotations for each range\n    for i in range(len(ranges)):\n        if index < ranges[i]:\n            rotations_per_range = rotations % len(arr)\n            break\n        else:\n            rotations_per_range = 0\n            index -= ranges[i]\n    \n    # Finally, find the element at the given index after rotations\n    index = (index + rotations_per_range) % len(arr)\n    return arr[index]",
        "test": "assert find_Element([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 0, 0) == 1, \"Incorrect output for index 0, rotation 0\"",
        "num_ids": 756
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n    return p_words[:2]\n",
        "test": "assert start_withp(['apple', 'pear', 'peach', 'pineapple']) == ['pear', 'peach'] ",
        "num_ids": 443
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0 or k < 0:\n        return 0\n    if index == 0 or k == 0:\n        return a[0]\n    if index == 1 and k == 1:\n        return max(a[0], a[1])\n    if index == 1 and k > 1:\n        return a[1]\n\n    incl = a[index]\n    if k == index + 1:\n        excl = max_sum_increasing_subseq(a, n, index - 1, k)\n    else:\n        excl = max_sum_increasing_subseq(a, n, index - 1, k)\n\n    return max(incl + excl, incl, excl)\n",
        "test": "assert max_sum_increasing_subseq([1, 10, 2, 3, 4], 5, 3, 2) == 15",
        "num_ids": 1146
    },
    {
        "number": 307,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = deepcopy(tuplex)\n    \n    if m < 0:\n        m = len(tuplex) + m\n    if n < 0:\n        n = len(tuplex) + n\n    \n    colon = colon[m:n]\n    \n    return colon\n",
        "test": "assert colon_tuplex((1, 2, 3, 4, 5, 6, 7), 3, 7) == (4, 5, 6, 7) ",
        "num_ids": 531
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    \n    products.sort(reverse=True)\n    \n    return products[:N]",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 3) == [30, 20, 18]",
        "num_ids": 539
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(4,7) == 7",
        "num_ids": 218
    },
    {
        "number": 310,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_tuple(str1):\n    '''\n    Converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"abc\") == (\"a\", \"b\", \"c\")",
        "num_ids": 242
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n + 1)\n",
        "test": "assert set_left_most_unset_bit(0) == 1",
        "num_ids": 308
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * r**2 * h) / 3\n",
        "test": "assert volume_cone(3,4) == math.pi*3**2*4/3 ",
        "num_ids": 341
    },
    {
        "number": 388,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i = i * 2\n    return i // 2\n",
        "test": "assert highest_Power_of_2(7) == 4",
        "num_ids": 376
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 320
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result\n",
        "test": "assert add_string([1, 2, 3], \"{}\") == ['1', '2', '3']",
        "num_ids": 371
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n",
        "test": "assert convert_list_dictionary(['a', 'b'], [1, 2], ['x', 'y'], ['c', 'd']) == {'a': {'1': {'c': 'x'}}, 'b': {'2': {'d': 'y'}}}",
        "num_ids": 597
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5), n)",
        "test": "assert get_max_sum(1) == 1 ",
        "num_ids": 526
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = input_list[0]\n    max_length = len(max_list)\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_list = input_list[i]\n            max_length = len(max_list)\n    return max_list\n",
        "test": "assert max_length_list([[1, 2], [3, 4, 5], [6]]) == [3, 4, 5]",
        "num_ids": 497
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    \n    # If the length of the tuple is equal to the length of the set, then there are no duplicates\n    if len(test_tup) == len(unique_set):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1,2,3)) == True",
        "num_ids": 443
    },
    {
        "number": 395,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Finds the first non-repeating character in a given string.\n    \"\"\"\n    # Count the occurrences of each character in the string\n    counts = {}\n    for char in str1:\n        counts[char] = counts.get(char, 0) + 1\n    \n    # Find the first character that occurs only once\n    for char in str1:\n        if counts[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n",
        "test": "assert first_non_repeating_character('abcd') == 'a'",
        "num_ids": 687
    },
    {
        "number": 396,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('abab') == False",
        "num_ids": 347
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 270
    },
    {
        "number": 398,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sums = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        digit_sums.append(digit_sum)\n    return digit_sums",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24] # expected output: [6, 15, 24]",
        "num_ids": 540
    },
    {
        "number": 399,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)",
        "test": "assert bitwise_xor((0,0,0,0), (0,0,0,0)) == (0,0,0,0)",
        "num_ids": 708
    },
    {
        "number": 400,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([(1,2), (2,3), (2,3), (3,4), (3,4), (4,5)]) == 4 ",
        "num_ids": 541
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup1[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_result))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)",
        "num_ids": 617
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Find the minimum of two numbers.\n\n    Args:\n        a (int or float): First number.\n        b (int or float): Second number.\n\n    Returns:\n        int or float: The smaller of the two numbers.\n    \"\"\"\n    return a if a < b else b",
        "test": "assert minimum(0, 0) == 0 # edge case: a == b",
        "num_ids": 266
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1, 2, 3), 2) == True ",
        "num_ids": 300
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Returns True if the parity of the given number is odd, False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(5) == True",
        "num_ids": 283
    },
    {
        "number": 407,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Find the first pair of adjacent digits that can be swapped to create a bigger number\n    for i in range(len(digits) - 1):\n        if digits[i] < digits[i + 1]:\n            # Swap the digits and break out of the loop\n            digits[i], digits[i + 1] = digits[i + 1], digits[i]\n            break\n\n    # Convert the sorted and swapped digits back to a number\n    result = int(''.join([str(d) for d in digits]))\n\n    return result\n",
        "test": "assert rearrange_bigger(1234) == 4321",
        "num_ids": 933
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append((nums1[i] + nums2[j], i, j))\n    \n    pairs.sort(key=lambda x: x[0])\n    \n    result = []\n    for pair in pairs[:k]:\n        result.append((nums1[pair[1]], nums2[pair[2]]))\n    \n    return result\n",
        "test": "assert k_smallest_pairs([1, 2, 3], [4, 5, 6], 3) == [(1, 4), (1, 5), (2, 4)]",
        "num_ids": 1143
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] + list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1, 2), (-3, 4), (5, -6)]) == 12",
        "num_ids": 681
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minimum = listval[0]\n    for i in range(len(listval)):\n        if type(listval[i]) == int or type(listval[i]) == float:\n            if listval[i] < minimum:\n                minimum = listval[i]\n    return minimum\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 421
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word_list = word.split('_')\n    return word_list[0] + ''.join(word.capitalize() for word in word_list[1:])\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 505
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "test": "assert remove_odd([1,2,3,4,5]) == [2, 4] # remove odd numbers from the list [1, 2, 3, 4, 5]",
        "num_ids": 319
    },
    {
        "number": 413,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if n in list1[i]:\n            return list1[i][n]\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == 2 ",
        "num_ids": 388
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[2,3,4]) == True",
        "num_ids": 419
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n < 2:\n        return None\n\n    max_product = arr[0] * arr[1]\n    min1 = max(arr[0], arr[1])\n    min2 = min(arr[0], arr[1])\n\n    for i in range(2, n):\n        if arr[i] > 0:\n            max_product = max(max_product, arr[i] * min1)\n            min1 = max(min1, arr[i])\n        else:\n            max_product = max(max_product, arr[i] * min2)\n            min2 = min(min2, arr[i])\n\n    return max_product\n",
        "test": "assert max_Product([1,2,3,4,5]) == 20 ",
        "num_ids": 611
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for item in Input:\n        if item[0] in result:\n            result[item[0]].append(item[1])\n        else:\n            result[item[0]] = [item[1]]\n    return result\n",
        "test": "assert group_tuples([(2, 3), (1, 4), (2, 5)]) == [(1, [4]), (2, [3, 5])]",
        "num_ids": 713
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n",
        "test": "assert Find_Max(['cat', 'dog', 'elephant']) == 'elephant' ",
        "num_ids": 409
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        total += round(list1[i])\n    print(total * len(list1))\n",
        "test": "assert round_and_sum([3.14159, 2.71828, 1.41421]) == 15.0, \"Incorrect result for round_and_sum\"",
        "num_ids": 535
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def cube_sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i ** 3\n    return sum\n",
        "test": "assert cube_Sum(2) == 9, \"Test case 2 failed\"",
        "num_ids": 309
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup, delimiter=\"_\"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    concatenated_string = concatenated_string[:-1]\n    return concatenated_string\n",
        "test": "assert concatenate_tuple((1, 2, 3)) == \"1_2_3\"",
        "num_ids": 411
    },
    {
        "number": 422,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    return sum_of_cubes/n\n",
        "test": "assert find_Average_Of_Cube(1) == 1 ",
        "num_ids": 486
    },
    {
        "number": 424,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear((\"hello\", \"world\", \"python\")) == (\"o\", \"d\", \"n\")",
        "num_ids": 396
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([1,2,3,4,5], 2) == 1",
        "num_ids": 441
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # empty list to store odd numbers\n    odd_nums = []\n    # loop through the list of numbers\n    for num in nums:\n        # if the number is odd, append it to the odd_nums list\n        if num % 2 != 0:\n            odd_nums.append(num)\n    # return the odd numbers list\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9] ",
        "num_ids": 461
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return None\n",
        "test": "assert change_date_format(\"2021-07-01\") == \"01-07-2021\"",
        "num_ids": 593
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given array using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([5, 3, 8, 1, 7]) == [1, 3, 5, 7, 8] # test case 1",
        "num_ids": 703
    },
    {
        "number": 429,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return result\n",
        "test": "assert and_tuples((True, True, False), (True, False, True)) == (True, False, False) # test case 1",
        "num_ids": 449
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = -1 * (b / (2 * a))\n    return directrix\n",
        "test": "assert parabola_directrix(1, 2, 3) == -1",
        "num_ids": 334
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False  # No common elements",
        "num_ids": 396
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    return (base1 + base2) / 2\n",
        "test": "assert median_trapezium(12, 16, 20) == 14",
        "num_ids": 405
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # initialize a flag to indicate whether the number is greater than all elements in the array\n    is_greater = True\n    \n    # loop through the elements in the array\n    for elem in arr:\n        # if the number is less than or equal to the current element, set the flag to False\n        if number <= elem:\n            is_greater = False\n            break\n    \n    # return the flag indicating whether the number is greater than all elements in the array\n    return is_greater\n",
        "test": "assert check_greater([1, 2, 3], 4) is True",
        "num_ids": 412
    },
    {
        "number": 434,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"ab\")",
        "num_ids": 337
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(10) == 0",
        "num_ids": 206
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1, 2, -3, 4, -5]) == [-3, -5] # check if the function returns correct values when negative numbers are present in the list",
        "num_ids": 436
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str\n",
        "test": "assert remove_odd(\"Python is awesome\") == \"Pythn s  wsm\"",
        "num_ids": 293
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list and (test_list[j], test_list[i]) in test_list:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2), (2,3), (3,4), (4,5)]) == 0, \"Incorrect count of bidirectional tuple pairs.\"",
        "num_ids": 625
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = ''\n    for i in L:\n        num += str(i)\n    return int(num)\n",
        "test": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345",
        "num_ids": 331
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Find the first adverb and their positions in a given sentence.\n    '''\n    # regular expression to match adverbs (not case sensitive)\n    adverb_pattern = re.compile(r'\\b[a-z]*ly\\b', re.IGNORECASE)\n    # find all adverbs in the text\n    adverbs = adverb_pattern.findall(text)\n    if not adverbs:\n        # no adverb found\n        return None\n    else:\n        # find the first adverb\n        first_adverb = adverbs[0]\n        # find its position(s) in the text\n        positions = [m.start() for m in re.finditer(first_adverb, text)]\n        return first_adverb, positions\n",
        "test": "assert find_adverb_position(\"The dog is very tired.\") == [('very', 8)]",
        "num_ids": 640
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n",
        "test": "assert surfacearea_cube(3) == 54, \"Incorrect surface area for a cube of size 3\"",
        "num_ids": 266
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n            \n    return float(pos_count) / len(nums)\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0",
        "num_ids": 470
    },
    {
        "number": 443,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number from the list.\n    If there is no negative number in the list, the function returns None.\n    \"\"\"\n    largest_neg_num = None\n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None or num > largest_neg_num:\n                largest_neg_num = num\n    return largest_neg_num\n",
        "test": "assert largest_neg([-1, -5, -2, -4, -3]) == -1 ",
        "num_ids": 428
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[:K])\n    return result\n",
        "test": "assert trim_tuple([(1,2,3), (4,5,6)], 2) == [(1,2), (4,5)] # expected output: [(1,2), (4,5)]",
        "num_ids": 564
    },
    {
        "number": 445,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "test": "assert index_multiplication((2, 4, 6), (3, 6, 9)) != (6, 24, 55)",
        "num_ids": 499
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n\n    result = {}\n\n    for key in tup_count.keys():\n        if key in lst_count.keys():\n            result[key] = lst_count[key]\n\n    return result\n",
        "test": "assert count_Occurrence((1, 2, 3), [1, 2, 3, 4, 5]) == Counter({1: 1, 2: 1, 3: 1})",
        "num_ids": 649
    },
    {
        "number": 447,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125] # expected output should be [1, 8, 27, 64, 125]",
        "num_ids": 468
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    num = 1\n    count = 1\n    while count <= n:\n        sum += num\n        temp = num\n        num = 0\n        while temp != 0:\n            num += temp % 10\n            temp //= 10\n        count += 1\n    return sum\n",
        "test": "assert cal_sum(0) == 0 ",
        "num_ids": 458
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer as input.\n    It returns a new list containing strings of specified size from the input list.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result\n",
        "test": "assert extract_string(\"world\", 5) == \"world\"",
        "num_ids": 398
    },
    {
        "number": 451,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n",
        "test": "assert remove_whitespaces(\"Hello, World!\") == \"Hello,World!\"",
        "num_ids": 326
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(1000,800) == 200",
        "num_ids": 379
    },
    {
        "number": 453,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef sumofFactors(n):\n    sum = 0\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            if i > sum and i <= n/i:\n                sum += i\n            if n/i > i and n/i <= n:\n                sum += n/i\n        i += 1\n    return sum\n",
        "test": "assert sumofFactors(20) == 1+2+4+5+10",
        "num_ids": 415
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches\n",
        "test": "assert text_match_wordz('She sells seashells by the seashore.') == ['She', 'sells', 'seashells', 'by', 'the', 'seashore.']",
        "num_ids": 409
    },
    {
        "number": 455,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    # List of months with 31 days\n    month_31 = [1, 3, 5, 7, 8, 10, 12]\n    \n    # Check if the given month number is in the list of months with 31 days\n    if monthnum2 in month_31:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(2) == False",
        "num_ids": 436
    },
    {
        "number": 456,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 460
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([]) == [], \"Empty list should return empty list\"",
        "num_ids": 517
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert rectangle_area(5, 7) == 35 # should return 35 as area of rectangle with length 5 and breadth 7 is 35",
        "num_ids": 263
    },
    {
        "number": 459,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Use regular expressions to match uppercase substrings\n    pattern = r'\\b[A-Z]+\\b'\n    return re.sub(pattern, '', str1)",
        "test": "assert remove_uppercase(\"hello world\") == \"hello world\"",
        "num_ids": 302
    },
    {
        "number": 460,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7] # expected output should be [1,4,7]",
        "num_ids": 412
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"This is a test string.\") == 1 ",
        "num_ids": 234
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    result = []\n    for i in range(1, len(list1)+1):\n        result.extend(list(combinations(list1, i)))\n    return result\n",
        "test": "assert combinations_list([1, 2, 3]) == [(1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]",
        "num_ids": 578
    },
    {
        "number": 463,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize variables\n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, n):\n        # If the current element is positive, update max_product and min_product\n        if arr[i] > 0:\n            max_product = max(arr[i], max_product * arr[i])\n            min_product = min(arr[i], min_product * arr[i])\n        else:\n            # If the current element is negative, swap max_product and min_product\n            temp = max_product\n            max_product = max(arr[i], min_product * arr[i])\n            min_product = min(arr[i], temp * arr[i])\n            \n        # Update max_so_far\n        max_so_far = max(max_so_far, max_product)\n        \n    return max_so_far\n",
        "test": "assert max_subarray_product([1, -2, -3, 4]) == 24",
        "num_ids": 802
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_value(my_dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    \n    if len(my_dict) < n:\n        return False\n    else:\n        first_value = list(my_dict.values())[0]\n        for value in my_dict.values():\n            if value != first_value:\n                return False\n        return True\n",
        "test": "assert check_value({1: 1, 2: 1, 3: 1}, 1) == True",
        "num_ids": 418
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert drop_empty({'a': 1, 'b': 2, 'c': '', 'd': None, 'e': {}}) == {'a': 1, 'b': 2}",
        "num_ids": 479
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n",
        "test": "assert max_product([1, 2, 3, 4]) == 24",
        "num_ids": 955
    },
    {
        "number": 470,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1,2,3)) == (3,5)",
        "num_ids": 445
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n",
        "test": "assert find_remainder([2, 3], 5) == 1 ",
        "num_ids": 325
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1,2,3]) == True",
        "num_ids": 373
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if set(tuple1) == set(tuple2):\n                intersection_list.append(tuple1)\n    return intersection_list\n",
        "test": "assert tuple_intersection([(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10), (11, 12)]) == []",
        "num_ids": 639
    },
    {
        "number": 474,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2\n",
        "test": "assert replace_char('hello', 'l', 'z') == 'hezzo'",
        "num_ids": 338
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict\n",
        "test": "assert sort_counter({'a': 2, 'b': 3, 'c': 1, 'd': 4}) == {'b': 3, 'd': 4, 'a': 2, 'c': 1} ",
        "num_ids": 521
    },
    {
        "number": 476,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Calculate the sum of the largest and smallest value in a given array.\n\n    Parameters:\n    nums (list): A list of integers\n\n    Returns:\n    int: The sum of the largest and smallest value in the array.\n    \"\"\"\n\n    # Find the largest and smallest value in the array\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Calculate the sum of the largest and smallest value\n    result = largest + smallest\n\n    return result\n",
        "test": "assert big_sum([1,2,3,4,5]) == 6",
        "num_ids": 445
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a Python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 264
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    result = re.sub(pattern, '', str1)\n    return result",
        "test": "assert remove_lowercase(\"HelloWorld\") == \"HelloWorld\"",
        "num_ids": 324
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    Write a Python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(123) == 1",
        "num_ids": 249
    },
    {
        "number": 554,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 369
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def difference(n):\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers\n",
        "test": "assert difference(0) == 0 ",
        "num_ids": 385
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([4,5],2) == 1",
        "num_ids": 424
    },
    {
        "number": 557,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result\n",
        "test": "assert toggle_string('Hello World') == 'hELLO wORLD'",
        "num_ids": 380
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Returns the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert integers to strings and reverse them\n    str_n1 = str(n1)[::-1]\n    str_n2 = str(n2)[::-1]\n    \n    # iterate over the digits of the two numbers and calculate the absolute difference\n    distance_sum = 0\n    for i in range(max(len(str_n1), len(str_n2))):\n        if i < len(str_n1):\n            d1 = int(str_n1[i])\n        else:\n            d1 = 0\n        if i < len(str_n2):\n            d2 = int(str_n2[i])\n        else:\n            d2 = 0\n        distance_sum += abs(d1 - d2)\n    \n    return distance_sum\n",
        "test": "assert digit_distance_nums(123,123) == 0, \"Incorrect output for digit_distance_nums(123,123)\"",
        "num_ids": 883
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "test": "assert max_sub_array_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9], 9) == -1 # expected output: -1",
        "num_ids": 601
    },
    {
        "number": 560,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1).union(test_tup2)\n    return sorted(list(union))\n",
        "test": "assert union_elements((1, 2, 3), (3, 4, 5)) == sorted((1, 2, 3, 4, 5)) ",
        "num_ids": 694
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length\n",
        "test": "assert Find_Max_Length([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]) == 5",
        "num_ids": 419
    },
    {
        "number": 563,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert extract_values(\"This is a sample text without any quotes.\") == [] ",
        "num_ids": 369
    },
    {
        "number": 564,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10",
        "num_ids": 366
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 230
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n % 10) + sum_digits(n // 10)",
        "test": "assert sum_digits(123) == 6 # Test case 1",
        "num_ids": 339
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted_list = sorted(list1)\n    if sorted_list == list1:\n        return True\n    else:\n        return False ",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 346
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length",
        "test": "assert empty_list(3) == [ {}, {}, {} ] ",
        "num_ids": 247
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n",
        "test": "assert sort_sublists([['c', 'a', 'b'], ['d', 'e', 'f']]) == [['a', 'b', 'c'], ['d', 'e', 'f']]",
        "num_ids": 481
    },
    {
        "number": 572,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a Python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n",
        "test": "assert two_unique_nums([1,2,3,2,1,4,5,6,5]) == [1,2,3,4,5,6]",
        "num_ids": 494
    },
    {
        "number": 573,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 2, 1]) == 6 ",
        "num_ids": 364
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    # Calculate the surface area\n    surface_area = 2 * 3.14 * r * (r + h)\n    \n    # Return the surface area\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(1, 2) == 12.57, \"Incorrect surface area calculation\"",
        "num_ids": 515
    },
    {
        "number": 576,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3],[1,2]) == True",
        "num_ids": 422
    },
    {
        "number": 577,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        return None\n    else:\n        return n % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 375
    },
    {
        "number": 578,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    \n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 656
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar.append(item)\n    for item in test_tup2:\n        if item not in test_tup1:\n            dissimilar.append(item)\n    return dissimilar\n",
        "test": "assert find_dissimilar((1, 2, 3), (4, 2, 3)) == (1, 4) # should return (1, 4)",
        "num_ids": 600
    },
    {
        "number": 580,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            even_list.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            even_list.append(i)\n    return tuple(even_list)\n",
        "test": "assert even_ele((1,2,3,4,(5,6),7,8), lambda x: x % 2 == 0) == (2,4,(6,),8) ",
        "num_ids": 600
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surface_Area(b, s):\n    '''\n    Calculates the surface area of a square pyramid with given base edge and height.\n    '''\n    area = b ** 2 + (b * s) + (b * s) + (s * s)\n    return area\n",
        "test": "assert surface_Area(12, 7) == 168",
        "num_ids": 430
    },
    {
        "number": 582,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True # empty dictionary",
        "num_ids": 233
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    else:\n        res = 0\n        for i in range(num):\n            res += catalan_number(i) * catalan_number(num-i-1)\n        return res\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 377
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern for finding adverbs ending with ly\n    pattern = r'\\w+ly'\n    # Find all the adverbs in the text that end with ly\n    adverbs = re.findall(pattern, text.lower())\n    # If there are no adverbs ending with ly, return None\n    if not adverbs:\n        return None\n    # Find the first adverb that ends with ly in the text\n    first_adverb = adverbs[0]\n    # Find the position of the first adverb that ends with ly in the text\n    position = text.lower().find(first_adverb)\n    return first_adverb, position\n",
        "test": "assert find_adverbs(\"The man arrived safely.\") == (\"safely\", 16)",
        "num_ids": 758
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    # create a min heap with the first n items in the dataset\n    min_heap = items[:n]\n    heapq.heapify(min_heap)\n    \n    # iterate over the remaining items in the dataset\n    for item in items[n:]:\n        # if the current item is more expensive than the smallest item in the heap\n        if item > min_heap[0]:\n            # remove the smallest item from the heap and add the current item\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n    \n    return min_heap\n",
        "test": "assert expensive_items([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 1) == [1000]",
        "num_ids": 740
    },
    {
        "number": 586,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    second_part.extend(first_part)\n    return second_part\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 497
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3, 4]) == (1, 2, 3, 4)",
        "num_ids": 260
    },
    {
        "number": 588,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    # get the minimum and maximum values from the list\n    minimum = min(nums)\n    maximum = max(nums)\n    \n    # calculate the difference between maximum and minimum values\n    diff = maximum - minimum\n    \n    # return the difference\n    return diff\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4, \"Incorrect output\"",
        "num_ids": 454
    },
    {
        "number": 589,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = 1\n    while i**2 <= b:\n        if i**2 >= a:\n            squares.append(i**2)\n        i += 1\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 424
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect = cmath.rect(x, y)\n    return rect.real, rect.imag",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 286
    },
    {
        "number": 591,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 469
    },
    {
        "number": 592,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Computes the binomial coefficient C(n, k).\n    '''\n    if k == 0 or k == n:\n        return 1\n    if k == 1 or k == n - 1:\n        return n\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n\ndef sum_product_binomial_coefficients(n):\n    '''\n    Computes the sum of the product of consecutive binomial coefficients.\n    '''\n    result = 0\n    for k in range(n):\n        result += binomial_Coeff(n, k) * binomial_Coeff(n, k + 1)\n    return result\n",
        "test": "assert binomial_Coeff(0,0) == 1",
        "num_ids": 696
    },
    {
        "number": 593,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    # use regular expressions to match the pattern of an IP address\n    pattern = re.compile(r'^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$')\n    match = pattern.match(ip)\n    if not match:\n        raise ValueError(f'Invalid IP address: {ip}')\n    # remove leading zeroes from each octet\n    octets = [match.group(i).lstrip('0') or '0' for i in range(1, 5)]\n    return '.'.join(octets)\n",
        "test": "assert removezero_ip('123.045.067.089') == '123.45.67.89'",
        "num_ids": 612
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables to keep track of the first even and first odd numbers\n    first_even = None\n    first_odd = None\n    \n    # Iterate through the list and find the first even and odd numbers\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 == 1:\n            first_odd = num\n        \n        # If we've found both even and odd numbers, break out of the loop\n        if first_even is not None and first_odd is not None:\n            break\n    \n    # If both even and odd numbers were found, return their difference\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    \n    # If only one of the numbers was found, return None\n    elif first_even is not None:\n        return None\n    elif first_odd is not None:\n        return None\n    \n    # If no even or odd numbers were found, return 0\n    else:\n        return 0\n",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1, \"Incorrect output for [1, 2, 3, 4, 5]\"",
        "num_ids": 851
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    xor_arr = [int(str1[i])^int(str2[i]) for i in range(n)]\n    ones_count = xor_arr.count(1)\n    \n    if ones_count % 2 != 0:\n        return -1\n    \n    return ones_count // 2\n",
        "test": "assert min_Swaps(\"1000\", \"1110\") == 1 ",
        "num_ids": 782
    },
    {
        "number": 596,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size\n",
        "test": "assert tuple_size(()) == 0 ",
        "num_ids": 442
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    # Initialize pointers for both arrays\n    i, j = 0, 0\n    # Initialize a variable to store the kth element\n    kth = float('inf')\n    # Loop until we find the kth element or one of the arrays is completely traversed\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            # If the current element of arr1 is less than arr2, then we move to the next element of arr1\n            i += 1\n        else:\n            # If the current element of arr2 is less than arr1, then we move to the next element of arr2\n            j += 1\n        # If we have found k elements, we return the kth element\n        if k == 1:\n            kth = min(kth, arr1[i-1], arr2[j-1])\n            return kth\n        # Decrement k by 1 as we have found one more element\n        k -= 1\n    # If one of the arrays is completely traversed, we can traverse the remaining array to find the kth element\n    while i < n1:\n        if k == 1:\n            kth = min(kth, arr1[i])\n            return kth\n        i += 1\n        k -= 1\n    while j < n2:\n        if k == 1:\n            kth = min(kth, arr2[j])\n            return kth\n        j += 1\n        k -= 1\n    # If the kth element is not found, then we return -1\n    return -1\n",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 1) == 1",
        "num_ids": 1045
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string to get the length of the number\n    num_str = str(number)\n    length = len(num_str)\n\n    # Initialize sum of cubes of each digit of the number\n    sum_cubes = 0\n\n    # Calculate the sum of cubes of each digit of the number\n    for digit in num_str:\n        sum_cubes += int(digit) ** length\n\n    # Check if the number is armstrong or not\n    if sum_cubes == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True ",
        "num_ids": 530
    },
    {
        "number": 599,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n",
        "test": "assert sum_average(10) == (55, 5.5)  # expected output: (55, 5.5)",
        "num_ids": 419
    },
    {
        "number": 600,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(1) == False",
        "num_ids": 265
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the count of characters in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, it is a repeated character\n        if char in char_count:\n            return char\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # If no repeated characters are found, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 478
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Create a list to store the lucid numbers\n    lucid_numbers = []\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a lucid number\n        if str(i) == str(i)[::-1] and str(i) == ''.join(sorted(str(i))):\n            # If it is, add it to the list of lucid numbers\n            lucid_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return lucid_numbers\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 963
    },
    {
        "number": 604,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_list = s.split()\n    reversed_s_list = s_list[::-1]\n    return ' '.join(reversed_s_list)\n",
        "test": "assert reverse_words(\"Hello world\") == \"world Hello\" ",
        "num_ids": 345
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num/2)+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True, \"prime_num(2) should be True\"",
        "num_ids": 518
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 257
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern.\n    The function should return the matching substring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert find_literals(\"Hello, world!\", r\"\\w+\") == (\"Hello\", 0, 5) ",
        "num_ids": 447
    },
    {
        "number": 608,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function returns the nth Bell number.\n    \"\"\"\n    bell = [0] * (n+1)\n    bell[0] = 1\n    for i in range(1, n+1):\n        bell[i] = bell[i-1] + bell[i-1] * bell[i-1]\n    return bell[n]\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 418
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Given a list and an integer L, return a new list with the same elements as the original list,\n    but the Lth element removed. If L is larger than the length of the list, do nothing.\n    \"\"\"\n    if L <= 0 or L > len(list1):\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 571
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val\n",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 8",
        "num_ids": 633
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def merge(lst):\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 488
    },
    {
        "number": 614,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    cumulative_sum = []\n    for value in test_list:\n        total += value\n        cumulative_sum.append(total)\n    return cumulative_sum\n",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
        "num_ids": 547
    },
    {
        "number": 615,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((10,), (20,), (30,))) == [10.0, 20.0, 30.0]",
        "num_ids": 516
    },
    {
        "number": 616,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result\n",
        "test": "assert tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)",
        "num_ids": 404
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d):\n    if steps == 0:\n        return 0\n    if steps == 1:\n        return d\n    if d == 0:\n        return 1\n\n    jumps = 0\n    max_dist = steps\n    while max_dist >= 0:\n        jumps += 1\n        max_dist -= d\n        if max_dist == 0:\n            return jumps\n        elif max_dist < 0:\n            max_dist += max_dist\n            jumps -= 1\n    return None  # should never get here",
        "test": "assert min_Jumps(5, 1) == 5",
        "num_ids": 614
    },
    {
        "number": 618,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divide two lists element-wise and return the result.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            result.append(float('inf'))\n        else:\n            result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([2, 4, 6], [1, 2, 3]) == [2, 2, 2]",
        "num_ids": 488
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize empty lists for strings with numbers and without numbers\n    nums = []\n    others = []\n    # loop through each character in the input string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # if it is, add it to the nums list\n            nums.append(char)\n        else:\n            # otherwise, add it to the others list\n            others.append(char)\n    # join the nums and others lists into new strings\n    num_str = ''.join(nums)\n    other_str = ''.join(others)\n    # return the new string with numbers at the end\n    return other_str + num_str\n",
        "test": "assert move_num('Hello, World! 123') == 'Hello, World! 123'",
        "num_ids": 617
    },
    {
        "number": 620,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    n = len(a)\n    # Create a dp table to store the maximum size of subset for each index\n    dp = [1] * n\n    # Initialize the first two elements\n    if a[0] % a[1] == 0 or a[1] % a[0] == 0:\n        dp[1] = 2\n    # Fill the dp table using the following recurrence relation:\n    # dp[i] = max(dp[j] + 1, dp[i]) if a[j] and a[i] are divisible\n    for i in range(2, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[j] + 1, dp[i])\n    # Return the maximum size of subset\n    return max(dp)\n",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6]) == 3 # [1, 2, 4], [1, 2, 6], [2, 4, 6]",
        "num_ids": 795
    },
    {
        "number": 622,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2-1] + arr2[n//2])/2\n    else:\n        return (arr1[n//2] + arr2[n//2])/2\n",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 3) == 3.5",
        "num_ids": 1104
    },
    {
        "number": 623,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Computes the n-th power of each number in a list.\n    \n    Parameters:\n    ----------\n    nums : list of numbers\n        A list of numbers.\n    n : int\n        The exponent to which each number should be raised.\n        \n    Returns:\n    -------\n    list of numbers\n        A list of numbers with the n-th power of each number in the input list.\n    \"\"\"\n    return [num ** n for num in nums]\n",
        "test": "assert nth_nums([2, 3, 4], 2) == [4, 9, 16] # test case 1",
        "num_ids": 482
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper('HELLO') == 'HELLO'",
        "num_ids": 229
    },
    {
        "number": 625,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 553
    },
    {
        "number": 626,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area\n",
        "test": "assert triangle_area(0) == 0",
        "num_ids": 431
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i] != i:\n            return i\n\n    return end\n",
        "test": "assert find_First_Missing([1,2,3,4,5,6,7,8,10], start=0, end=None) == 9, \"Incorrect output\"",
        "num_ids": 547
    },
    {
        "number": 628,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 265
    },
    {
        "number": 629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def split(lst):\n    '''\n    Returns two lists: one with even numbers and one with odd numbers.\n    '''\n    evens = []\n    odds = []\n    for num in lst:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return evens, odds\n",
        "test": "assert Split([0,1,2,3,4,5]) == [0,2,4]",
        "num_ids": 444
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    This function takes a tuple as input and returns all the adjacent coordinates of the input tuple.\n    \n    Args:\n    ele: A tuple of two integers representing the coordinates of a point.\n    \n    Returns:\n    A list of tuples containing all the adjacent coordinates of the input tuple.\n    '''\n    adjacent = []\n    x, y = ele\n    # Checking for coordinates within the grid\n    if 0 <= x < 4 and 0 <= y < 4:\n        # Checking for adjacent coordinates in the grid\n        adjacent.append((x+1, y))\n        adjacent.append((x-1, y))\n        adjacent.append((x, y+1))\n        adjacent.append((x, y-1))\n    return adjacent\n",
        "test": "assert adjac((1,1)) == [(0,0),(0,1),(0,2),(1,0),(1,2),(2,1)]",
        "num_ids": 639
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 248
    },
    {
        "number": 632,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    # create a new list to store non-zero elements\n    non_zero_list = []\n    \n    # iterate over the original list\n    for num in num_list:\n        # if the element is non-zero, append it to the non_zero_list\n        if num != 0:\n            non_zero_list.append(num)\n    \n    # append all the zeroes to the end of the non_zero_list\n    for i in range(num_list.count(0)):\n        non_zero_list.append(0)\n    \n    # return the non_zero_list\n    return non_zero_list\n",
        "test": "assert move_zero([0, 1, 0, 3, 12, 0, 7]) == [1, 3, 12, 7, 0, 0, 0] ",
        "num_ids": 728
    },
    {
        "number": 633,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n",
        "test": "assert pair_xor_Sum([0,0,1,1],4) == 0 # test for example input [0,0,1,1]",
        "num_ids": 475
    },
    {
        "number": 635,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert heap_sort([]) == [] ",
        "num_ids": 411
    },
    {
        "number": 637,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100,50) == False # profit is greater than zero",
        "num_ids": 347
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return int(round(wc))\n",
        "test": "assert wind_chill(35, -5) == 25 ",
        "num_ids": 539
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['Alice', 'Bob', 'carol']) == 8",
        "num_ids": 462
    },
    {
        "number": 640,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items\n",
        "test": "assert remove_parenthesis(\"(hello) world\") == \" world\"",
        "num_ids": 379
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Return the nth nonagonal number.\n    \"\"\"\n    # The formula to calculate the nth nonagonal number is:\n    #   n^2(3n-1)/2\n    # We use the math module to perform the division\n    return n * n * (3 * n - 1) // 2\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 458
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    return matches != []\n",
        "test": "assert text_match_wordz_middle(\"hello\") == False",
        "num_ids": 406
    },
    {
        "number": 644,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Reverses the elements of an array up to the given position k.\n    '''\n    input[:k] = input[:k][::-1]\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5],2) == [2,1,3,4,5]",
        "num_ids": 572
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple.\n    The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert add_dict_to_tuple(('a', 1), {'b': 2}) == ('a', 1, {'b': 2})",
        "num_ids": 495
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    return dp[n-1][n-1] / (n * n)\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 6.0",
        "num_ids": 1401
    },
    {
        "number": 722,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n",
        "test": "assert filter_data({'Alice':(165,60), 'Bob':(172,70), 'Charlie':(160,55)}, 170, 55) == {'Bob':(172,70)}",
        "num_ids": 774
    },
    {
        "number": 723,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 453
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_power = base**power\n    for digit in str(base_power):\n        sum += int(digit)\n    return sum\n",
        "test": "assert power_base_sum(4, 3) == 134",
        "num_ids": 469
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # using regular expression to find all values between quotation marks\n    matches = re.findall(r'\"(.*?)\"', text1)\n    return matches\n",
        "test": "assert extract_quotation('\"hello world\"') == \"hello world\"",
        "num_ids": 326
    },
    {
        "number": 726,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((2,3,4,5)) == (6,12,20)",
        "num_ids": 548
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 479
    },
    {
        "number": 730,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [x[0] for x in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 6, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 442
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area\n",
        "test": "assert lateralsurface_cone(0,0) == 0 ",
        "num_ids": 305
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'\\s|,|\\.'\n    replacement = ':'\n    return re.sub(pattern, replacement, text)\n",
        "test": "assert replace_specialchar(\"hello world\") == \"hello:world\"",
        "num_ids": 248
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] != x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 2) == 1",
        "num_ids": 713
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = 0\n\n    # Calculate product of all elements in the array\n    prod = 1\n    for i in arr:\n        prod *= i\n\n    # Calculate product of all possible subarrays\n    for i in range(n):\n        res += arr[i] * prod // arr[i]\n\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([-1, -2, -3, -4, -5]) == 540, \"Incorrect result for sum_Of_Subarray_Prod([-1, -2, -3, -4, -5])\"",
        "num_ids": 822
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a Python function to toggle bits of the number except the first and last bits.\n    '''\n    # Convert the input integer to binary and store it in a string\n    binary_str = bin(n)[2:]\n    \n    # Toggle all bits except the first and last bit\n    for i in range(1, len(binary_str) - 1):\n        if binary_str[i] == '1':\n            binary_str = binary_str[:i] + '0' + binary_str[i+1:]\n        else:\n            binary_str = binary_str[:i] + '1' + binary_str[i+1:]\n    \n    # Convert the binary string back to integer and return it\n    return int(binary_str, 2)\n",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 585
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        i += 1\n    return i\n",
        "test": "assert left_insertion([1, 3, 4, 5, 6], 2) == 1, \"Incorrect insertion point for 2\"",
        "num_ids": 394
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string))",
        "test": "assert check_str('Apple') == True, 'The string should start with a vowel'",
        "num_ids": 378
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (1 / 2 ** (n - 1)) + geometric_sum(n - 1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 275
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    # We need to find the smallest triangular number with n digits. To do this, we can start by finding the smallest triangular number with n+1 digits and then subtracting 1 until we get a number with n digits.\n    # The smallest triangular number with n+1 digits is the sum of the first n+1 natural numbers, which is n * (n+1) / 2.\n    # We can calculate the index of this triangular number as follows:\n    index = int((n * (n+1)) / 2)\n    # If the triangular number with n+1 digits has n digits, we can return the index:\n    if len(str(index)) == n+1:\n        return index\n    # Otherwise, we need to subtract 1 from the triangular number until we get a number with n digits.\n    while len(str(index)) > n:\n        index -= 1\n    # Once we have found the smallest triangular number with n digits, we can return its index:\n    return index\n",
        "test": "assert find_Index(0) == 0",
        "num_ids": 578
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict\n",
        "test": "assert tuple_to_dict((1, 2, 3, 4)) == {1: 2, 3: 4}",
        "num_ids": 481
    },
    {
        "number": 741,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 371
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    height = (side ** 2 - (side / 2) ** 2) ** 0.5\n    base_area = (side / 2) ** 2 * math.sin(math.radians(108))\n    return base_area * height\n",
        "test": "assert area_tetrahedron(4) == 6",
        "num_ids": 518
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotates a list by m items to the right.\n    \"\"\"\n    n = len(lst)\n    if n == 0:\n        return []\n    m = m % n  # to handle m > n\n    return lst[-m:] + lst[:-m]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 457
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n",
        "test": "assert check_none((1,2,3)) == False # tuple with no None values",
        "num_ids": 319
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def divisible_by_all_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if num % digit != 0:\n                return False\n        return True\n    \n    result = []\n    for num in range(startnum, endnum+1):\n        if divisible_by_all_digits(num):\n            result.append(num)\n    return result ",
        "test": "assert divisible_by_digits(100, 200) == [111, 121, 131, 141, 151, 161, 171, 181, 191, 200]",
        "num_ids": 840
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*(a/360)*(math.pi)\n",
        "test": "assert sector_area(1, 270) == (math.pi/2)  # test for an angle of 270 degrees",
        "num_ids": 493
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common suffixes of substrings\n    L = [[[0] * (o + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = 1 + L[i - 1][j - 1][k - 1]\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # Find the length of the longest common subsequence in X, Y and Z\n    result = 0\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if L[i][j][k] > result:\n                    result = L[i][j][k]\n\n    # Backtrack to find the longest common subsequence\n    lcs = []\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] > L[i][j - 1][k] and L[i - 1][j][k] > L[i][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] > L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    lcs.reverse()\n    return ''.join(lcs)",
        "test": "assert lcs_of_three(\"abcde\", \"pqabcdf\", \"123abc\") == \"abc\"",
        "num_ids": 1678
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to match all words starting with capital letters\n    pattern = r'[A-Z]\\w+'\n    matches = re.findall(pattern, str1)\n\n    # Add spaces between matched words\n    result = ''\n    for match in matches:\n        result += ' ' + match\n\n    return result.strip()\n",
        "test": "assert capital_words_spaces(\"JavaScriptIsGreat\") == \"JavaScript Is Great\"",
        "num_ids": 551
    },
    {
        "number": 749,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    # Converting each string in the list to an integer and sorting them numerically\n    nums_int = sorted(list(map(int, nums_str)))\n    \n    # Converting each integer back to a string and returning the sorted list\n    return list(map(str, nums_int))\n",
        "test": "assert sort_numeric_strings(['1', '3', '2']) == ['1', '2', '3']",
        "num_ids": 547
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, (4, 5, 6)]",
        "num_ids": 353
    },
    {
        "number": 751,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) // 2 - 1:\n        return True\n    if arr[i] > arr[2*i+1]:\n        return False\n    if arr[i] > arr[2*i+2]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n",
        "test": "assert check_min_heap_helper([4, 10, 9, 5, 1], 0) == False, \"Incorrect output for [4, 10, 9, 5, 1]\"",
        "num_ids": 816
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num(n-2) + 2*jacobsthal_num(n-1) - 1\n",
        "test": "assert jacobsthal_num(0) == 0 ",
        "num_ids": 667
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]",
        "test": "assert min_k([(1,2), (3,4), (5,6), (7,8), (9,10)], 3) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 657
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists.\n    The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1,2,3],[4,5,6],[7,8,9]) == [] # should return [] if there are no common elements",
        "num_ids": 662
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        first_min = second_min = float('inf')\n        for num in numbers:\n            if num < first_min:\n                second_min = first_min\n                first_min = num\n            elif num < second_min and num != first_min:\n                second_min = num\n        if second_min == float('inf'):\n            return None\n        else:\n            return second_min\n",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 480
    },
    {
        "number": 756,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r\"a[b]+\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n\ntext = \"The quick brown fox jumps over the lazy dog.\"\nif text_match_zero_one(text):\n    print(\"Match found!\")\nelse:\n    print(\"Match not found.\")",
        "test": "assert text_match_zero_one(\"ab\") == True",
        "num_ids": 414
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 514
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for sublist in list1:\n        t = tuple(sublist)\n        if t in counts:\n            counts[t] += 1\n        else:\n            counts[t] = 1\n    return counts\n",
        "test": "assert unique_sublists([[1,2], [2,3], [1,2]]) == {(1, 2): 2, (2, 3): 1}",
        "num_ids": 580
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return len(num.split('.')[1]) <= 2\n    except:\n        return False\n",
        "test": "assert is_decimal('1.23') == True",
        "num_ids": 349
    },
    {
        "number": 760,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1, 2, 3]) == False",
        "num_ids": 426
    },
    {
        "number": 762,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(1) == False",
        "num_ids": 395
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([10, 9, 8, 7, 6], 5) == 1",
        "num_ids": 611
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"12345\") == 5 # correct output: 5",
        "num_ids": 301
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Finds the nth polite number.\n    \"\"\"\n    polite_num = 1\n    count = 0\n    while count < n:\n        count += 1\n        # Check if polite_num is polite\n        if sum(proper_divisors(polite_num)) == polite_num:\n            count -= 1\n        # Increment polite_num\n        polite_num += 1\n    return polite_num - 1\n\n\ndef proper_divisors(n):\n    \"\"\"\n    Returns a list of proper divisors of n.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                divisors.append(i)\n            else:\n                divisors.append(i)\n                divisors.append(n // i)\n    return divisors\n",
        "test": "assert is_polite(2) == 1",
        "num_ids": 723
    },
    {
        "number": 766,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)] ",
        "num_ids": 393
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 4 # should be 4 pairs with sum 10",
        "num_ids": 583
    },
    {
        "number": 769,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Convert the lists to sets to get the unique elements in each list\n    set1 = set(li1)\n    set2 = set(li2)\n\n    # Find the difference between the sets using set difference\n    diff_set = set1.difference(set2)\n\n    # Convert the set back to a list and return it\n    return list(diff_set)\n",
        "test": "assert Diff([1,2,3],[2,3,4]) == [1] ",
        "num_ids": 415
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    sum = 0\n    count = 0\n    i = 1\n    while count < n:\n        sum += i**4\n        count += 1\n        i += 2\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 ",
        "num_ids": 329
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0",
        "test": "assert check_expression(\"\") == True, \"Empty expression should be balanced\"",
        "num_ids": 612
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert remove_length(\"Hello world\", 5) == \"Hello world\"",
        "num_ids": 377
    },
    {
        "number": 773,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    positions = [(match.start(), match.end()) for match in matches]\n    return positions if positions else None\n",
        "test": "assert occurance_substring(\"hello world\", \"worlds\") is None",
        "num_ids": 425
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == True",
        "num_ids": 392
    },
    {
        "number": 776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"abcbcb\") == 2",
        "num_ids": 586
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for element in arr:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n\n    # Calculate the sum of non-repeated elements\n    sum = 0\n    for element in arr:\n        if freq[element] == 1:\n            sum += element\n\n    return sum\n",
        "test": "assert find_sum([1, 2, 3]) == 6, \"Test case 1 failed\" ",
        "num_ids": 405
    },
    {
        "number": 778,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    packed_list = []\n    for key, group in groupby(list1):\n        packed_list.append(list(group))\n    return packed_list\n",
        "test": "assert pack_consecutive_duplicates([1, 1, 2, 2, 3, 3]) == [[1, 1], [2, 2], [3, 3]]",
        "num_ids": 555
    },
    {
        "number": 779,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_dict[tuple(sublist)] = sublist_dict.get(tuple(sublist), 0) + 1\n    return sublist_dict\n",
        "test": "assert unique_sublists([[1,2],[3,4],[2,3],[1,2]]) == {(1, 2): 2, (2, 3): 1, (3, 4): 1} ",
        "num_ids": 720
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    k = 2\n    result = []\n    for i in range(1, k+1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == n:\n                result.append(comb)\n    return result",
        "test": "assert find_combinations([(1, 1), (2, 2), (3, 3), (4, 4)]) == [(1, 1, 2, 2), (1, 1, 3, 3), (1, 1, 4, 4), (2, 2, 3, 3), (2, 2, 4, 4), (3, 3, 4, 4)] ",
        "num_ids": 1493
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n/2)+1):\n        if n % i == 0:\n            count += 2\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert count_divisors(1) == 1 ",
        "num_ids": 547
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            total_sum += sum(arr[i:j])\n\n    return total_sum\n",
        "test": "assert odd_length_sum([1, 2, 3]) == 12 # odd_length_sum([1, 2, 3]) should return 12",
        "num_ids": 483
    },
    {
        "number": 783,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax-cmin\n\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = (60 * ((g-b)/diff) + 360) % 360\n    elif cmax == g:\n        h = (60 * ((b-r)/diff) + 120) % 360\n    elif cmax == b:\n        h = (60 * ((r-g)/diff) + 240) % 360\n\n    if cmax == 0:\n        s = 0\n    else:\n        s = (diff/cmax)*100\n\n    v = cmax*100\n\n    return (h, s, v)",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0), \"Error: Black is not (0,0,0)\"",
        "num_ids": 1070
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n    \n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None\n",
        "test": "assert mul_even_odd([1,3,5,7]) == 35",
        "num_ids": 646
    },
    {
        "number": 785,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the brackets from the string and split the string into a list of strings\n    lst = test_str[1:-1].split(',')\n    # Convert each string in the list to an integer and append it to a new list\n    result = []\n    for item in lst:\n        result.append(int(item))\n    # Return the new list as a tuple\n    return tuple(result)\n",
        "test": "assert tuple_str_int(\"(1,2,3)\") == (1,2,3)",
        "num_ids": 621
    },
    {
        "number": 786,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\n",
        "test": "assert right_insertion([1, 3, 5, 7], 4) == 2 # correct index is 2",
        "num_ids": 419
    },
    {
        "number": 787,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b){3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbbb\") == True",
        "num_ids": 327
    },
    {
        "number": 788,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Concatenate the list and the string with a comma separator\n    combined_str = ','.join([str(item) for item in test_list] + [test_str])\n    # Split the combined string into a list of strings\n    new_list = combined_str.split(',')\n    # Convert the list of strings into a tuple\n    new_tuple = tuple(new_list)\n    # Return the new tuple\n    return new_tuple\n",
        "test": "assert new_tuple([], \"world\") == (\"world\",)",
        "num_ids": 434
    },
    {
        "number": 790,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8]) == True # all even indices have even numbers",
        "num_ids": 354
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Removes tuples from the given tuple.\n    \"\"\"\n    result = []\n\n    for item in test_tup:\n        if type(item) == tuple:\n            for nested_item in item:\n                result.append(nested_item)\n        else:\n            result.append(item)\n\n    return tuple(result)",
        "test": "assert remove_nested((1, 2, 3)) == (1, 2, 3)",
        "num_ids": 466
    },
    {
        "number": 792,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1, 2], [3, 4]]) == 2",
        "num_ids": 307
    },
    {
        "number": 793,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            # Check if the element is in the middle of the array\n            if mid == len(arr) - 1 or arr[mid+1] != x:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1\n",
        "test": "assert last([1,2,3,4,5,6,7], 7) == 6 ",
        "num_ids": 752
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_starta_endb(\"a string with a at the start and b at the end\") == True",
        "num_ids": 395
    },
    {
        "number": 796,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dictionary:\n        sum += dictionary[key]\n    return sum\n",
        "test": "assert return_sum({1:2, 3:4}) == 6, \"Sum of items in dictionary should be 6\"",
        "num_ids": 328
    },
    {
        "number": 797,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through all odd numbers within the range\n    for i in range(1, n+1, 2):\n        sum += i\n    \n    # Return the sum of all odd numbers within the range\n    return sum\n",
        "test": "assert sum_odd(3) == 4",
        "num_ids": 354
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "test": "assert _sum([1, 2, 3]) == 6",
        "num_ids": 251
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # convert the number to binary string\n    binary = bin(n)[2:].zfill(32)\n\n    # rotate the bits by d bits to the left\n    rotated_binary = binary[d:] + binary[:d]\n\n    # convert the rotated binary string back to decimal\n    rotated_decimal = int(rotated_binary, 2)\n\n    return rotated_decimal\n",
        "test": "assert left_rotate(15, 1) == 30",
        "num_ids": 591
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"\") == \"\"",
        "num_ids": 239
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 438
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    low = 0\n    high = n-1\n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        mid = (low + high) // 2\n        next = (mid + 1) % n\n        prev = (mid + n - 1) % n\n        if arr[mid] <= arr[next] and arr[mid] <= arr[prev]:\n            return mid\n        elif arr[mid] > arr[next]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 805
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 353
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 4, 6]) == True ",
        "num_ids": 275
    },
    {
        "number": 805,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = None\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            result = l\n    return result\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9] # expected output: [6, 7, 8, 9]",
        "num_ids": 587
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    \n    return max(max_run, current_run)\n",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 473
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # iterate over the list of numbers\n    for num in nums:\n        # check if the current number is odd\n        if num % 2 == 1:\n            # if it is, return it\n            return num\n    # if no odd numbers are found, return None\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 387
    },
    {
        "number": 808,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((1, 2, 3), 2) == True",
        "num_ids": 380
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n\n    return True",
        "test": "assert check_smaller((1,2,3), (1,1,4)) == False",
        "num_ids": 520
    }
]