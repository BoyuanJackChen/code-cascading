[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements\n",
        "test": "assert similar_elements([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]",
        "num_ids": 1558,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_not_prime(n):\n    '''\n    Returns True if the input number is not prime, False otherwise.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(1) == True",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([1,2,3,4,5,6,7,8,9], 1) == [9] # Test case 2",
        "num_ids": 2226,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # First, check if x is a power of 2\n    if x == 0:\n        return False\n    if x & (x-1) == 0:\n        return True\n    # If it's not a power of 2, check if it differs from the next power of 2 by 1 bit\n    next_power = x\n    while next_power > 0:\n        next_power = next_power & (next_power - 1)\n    return x == next_power * 2\n",
        "test": "assert is_Power_Of_Two(1) == True, \"is_Power_Of_Two should return True for 1\"",
        "num_ids": 1422,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regex to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    \n    # Return the list of words\n    return words\n",
        "test": "assert find_char_long('') == [], \"empty string test\"",
        "num_ids": 1326,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert square_nums([1,2,3,4,5]) == [1,4,9,16,25]",
        "num_ids": 1261,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_Rotations(str):\n    if not str: # if string is empty\n        return 0\n    else:\n        n = len(str)\n        temp_str = str + str # concatenate string with itself\n        min_rotations = n # initialize minimum rotations to length of string\n        for i in range(n):\n            if temp_str.startswith(str, i): # check if substring matches the original string\n                min_rotations = min(min_rotations, i) # update minimum rotations\n        return min_rotations\n",
        "test": "assert find_Rotations(\"\") == 0",
        "num_ids": 2211,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # removing first occurrence\n    if ch in s:\n        s = s.replace(ch, '', 1)\n    # removing last occurrence\n    if ch in s:\n        s = s[:s.rfind(ch)] + s[s.rfind(ch)+1:]\n    return s\n",
        "test": "assert remove_Occ(\"Hello World\", \"o\") == \"Hell Wrld\" # test case 1",
        "num_ids": 1912,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def sort_matrix(M):\n    # calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # sort the rows by their sum in ascending order\n    sorted_M = [row for _, row in sorted(zip(row_sums, M))]\n\n    return sorted_M\n",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 2156,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume",
        "test": "assert find_Volume(6,8,10) == 240",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters\n    joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 1247,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(4) == 16, \"The perimeter of a square with side length 4 should be 16\"",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str_list = list(string)\n    return str_list",
        "test": "assert str_to_list('Python is fun') == ['P', 'y', 't', 'h', 'o', 'n', ' ', 'i', 's', ' ', 'f', 'u', 'n']",
        "num_ids": 1589,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1, 2, 3]) == False",
        "num_ids": 1497,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is a Woodall number or not.\n    A Woodall number is a positive integer that can be expressed as the sum of the first n odd numbers.\n    \"\"\"\n    if x < 1:\n        return False\n    \n    # calculate the n-th odd number\n    n = 1\n    odd = 1\n    while odd < x:\n        n += 1\n        odd = n*2 - 1\n    \n    # check if the sum of the first n odd numbers equals x\n    sum_odd = n*(n+1)\n    return sum_odd == x\n",
        "test": "assert is_woodall(10) == False #Test case 1: Checking if the number is not woodball",
        "num_ids": 1530,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to string and reverse it\n    str_num = str(num)\n    rev_num = str_num[::-1]\n    # convert the reversed number back to integer\n    rev_int = int(rev_num)\n    # check if the number is one less than twice its reverse\n    if num - 2*rev_int == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(12345) == False",
        "num_ids": 1374,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    result = []\n    for digit in arr:\n        if digit == 0:\n            continue\n        result.append(digit)\n        if len(result) == len(arr):\n            return int(''.join(map(str, result)))\n    return 0\n",
        "test": "assert find_Max_Num([5, 5, 5, 5, 5]) == 55555",
        "num_ids": 1557,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(1,-2) == True # should return True",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Define a function to generate octagonal numbers\n    def generate_octagonal(n):\n        return n * (2 * n - 1)\n    \n    # Find the first octagonal number and keep track of the count\n    oct_count = 1\n    oct_num = 1\n    \n    # Loop through the octagonal numbers until we reach the nth octagonal number\n    while oct_count <= n:\n        oct_num += 1\n        if generate_octagonal(oct_num) > oct_num:\n            oct_count += 1\n    \n    # Return the nth octagonal number\n    return oct_num - 1\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 1512,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    count = 0\n    d = defaultdict(int)\n    \n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(d) for d in substring if d.isdigit())\n            \n            if digit_sum == len(substring):\n                count += 1\n                \n                if substring in d:\n                    d[substring] += 1\n                else:\n                    d[substring] = 1\n    \n    return count\n",
        "test": "assert count_Substrings(\"1234\") == 1",
        "num_ids": 2913,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1206,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4 ",
        "num_ids": 1796,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([('Maths', 90), ('English', 70), ('Science', 80), ('Social', 60)]) == [('Social', 60), ('English', 70), ('Science', 80), ('Maths', 90)] ",
        "num_ids": 1639,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total_sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum\n",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1657,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([-1,-2,-3,-4,-5]) == 0",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize a list to store Bell numbers\n    bell_numbers = [1]\n    # loop to calculate Bell numbers up to n\n    for i in range(1, n+1):\n        bell_numbers.append(sum(bell_numbers[:i]))\n    # initialize a list to store the number of ways to partition the set of Bell numbers\n    ways_to_partition = [1]\n    # loop to calculate the number of ways to partition the set of Bell numbers up to n\n    for i in range(1, n+1):\n        ways_to_partition.append(sum(ways_to_partition[:i]) * bell_numbers[i])\n    return ways_to_partition[n]\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1797,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 0 or n == 1:\n        return True\n    if A[0] < A[1]:\n        for i in range(2, n):\n            if A[i] < A[i-1]:\n                return False\n    elif A[0] > A[1]:\n        for i in range(2, n):\n            if A[i] > A[i-1]:\n                return False\n    else:\n        return True\n    return True\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 2153,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1, 2, 3, 4], [2, 3]) == True",
        "num_ids": 1390,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    first_tuple = Input[0]\n    for tuple_ in Input:\n        if len(tuple_) != len(first_tuple):\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1, 2), (3, 4), (5, 6)]) == True, \"Test case 1 failed\"",
        "num_ids": 1602,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums\n",
        "test": "assert comb_sort([5, 2, 9, 1, 5]) == [1, 2, 5, 5, 9] # check if the function returns a sorted list of elements when provided with a list of integers in the correct order.",
        "num_ids": 2494,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5)+1):\n        for j in range(int(n**0.5)+1):\n            if i**2-j**2==n or i**2-j**2==-n:\n                return True\n    return False\n",
        "test": "assert dif_Square(30) == False",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns(['R', 'G', 'B'], ['R', 'G', 'B']) == True",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(10, 20, 30), (15, 30, 45), (20, 40, 60)], 10) == [(10, 20, 30), (20, 40, 60)] ",
        "num_ids": 1978,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(11) == True, \"is_Diff(11) should return True\"",
        "num_ids": 1033,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the string is odd, and False otherwise.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert word_len('hello') == True # test odd length word",
        "num_ids": 896,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    # Initialize variables\n    tetrahedral = 0\n    i = 1\n    \n    # Loop until the nth tetrahedral number is found\n    while tetrahedral < n:\n        tetrahedral = i * (i + 1) * (i + 2) // 6\n        i += 1\n        \n    return tetrahedral\n",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * 1**3",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def get_Char(strr):\n    # Convert the string to uppercase to avoid issues with case sensitivity\n    strr = strr.upper()\n    \n    # Initialize the sum of ASCII values to zero\n    total = 0\n    \n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the total\n        total += ord(char)\n    \n    # Calculate the modulo 26 of the total\n    modulo = total % 26\n    \n    # Return the corresponding character in the alphabet\n    return chr(modulo + 65)\n",
        "test": "assert get_Char(\"world\") == \"z\"",
        "num_ids": 1812,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def sequence(n):\n    # Define the initial values of the Newman-Conway sequence\n    newman_conway = [0, 1, 1]\n    \n    # If n is 0, return 0\n    if n == 0:\n        return 0\n    \n    # If n is 1 or 2, return the corresponding value from the sequence\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    \n    # Calculate the next values of the sequence recursively\n    for i in range(3, n+1):\n        newman_conway.append(newman_conway[newman_conway[i-1]] + newman_conway[i-newman_conway[i-1]])\n    \n    return newman_conway[n]\n",
        "test": "assert sequence(1) == 1 # 1st number in the sequence is 1",
        "num_ids": 1734,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n",
        "test": "assert surfacearea_sphere(0) == 0 ",
        "num_ids": 1171,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({'a':1}, {}, {'c':3}) == {'a':1, 'c':3}",
        "num_ids": 2112,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Using the Counter function from the collections module to count the frequency of each element in the list\n    freq = collections.Counter(list1)\n    return freq\n",
        "test": "assert freq_count([1, 2, 3, 2, 1, 4, 3]) == {1: 2, 2: 2, 3: 2, 4: 1} ",
        "num_ids": 1798,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N - 1\n    while closest >= 0:\n        if closest ** 2 < N ** 2:\n            break\n        closest -= 1\n    return closest\n",
        "test": "assert closest_num(10) == 9",
        "num_ids": 1187,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word in the list.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6",
        "num_ids": 1323,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring('hello world', 'earth') == False",
        "num_ids": 982,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check if the given number is undulating or not.\n    \"\"\"\n    # Convert the number to a string and iterate over the characters\n    for i in range(1, len(str(n))):\n        # Check if the digits are increasing or decreasing\n        if str(n)[i] > str(n)[i-1]:\n            decreasing = False\n            if not decreasing:\n                return True\n        elif str(n)[i] < str(n)[i-1]:\n            increasing = False\n            if not increasing:\n                return True\n    # If the digits are not alternating, the number is not undulating\n    return False\n",
        "test": "assert is_undulating(12345) == True",
        "num_ids": 1911,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert power(2, 3) == 8, \"Error: power(2, 3) != 8\" ",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if len(test_list) == 0:\n        return None\n    elif len(test_list) == 1:\n        return test_list[0][0]\n    else:\n        sorted_list = sorted(test_list, key=itemgetter(1))\n        return sorted_list[0][0]\n",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 6), (7, 8)]) == 1",
        "num_ids": 1907,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2],[3,4],[5,6]]) == 2, \"Error in Find_Min_Length\"",
        "num_ids": 1500,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def divisor(n):\n    \"\"\"\n    Returns the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(12) == 6, \"divisor(12) should be 6\"",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create an empty dictionary\n    freq_dict = {}\n\n    # Iterate through the flattened list\n    for item in flat_list:\n        # If the item is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the item is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict",
        "test": "assert frequency_lists([[1,2,3], [4,5,6]]) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1}",
        "num_ids": 2268,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    #multiply all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    #divide the product with the length of the list\n    length = len(numbers)\n    average = product / length\n    \n    #return the average\n    return average\n",
        "test": "assert multiply_num([1, 2, 3]) == 2 # should return 2",
        "num_ids": 1216,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def next_smallest_palindrome(num):\n    num = int(num)\n    num += 1\n    while not str(num).isdigit() or str(num) != str(num)[::-1]:\n        num += 1\n    return int(num)\n",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 2868,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1103,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into parts\n    parts = word.split('_')\n    # Convert the first part to lowercase\n    parts[0] = parts[0].lower()\n    # Convert the rest of the parts to titlecase\n    parts[1:] = [part.title() for part in parts[1:]]\n    # Join the parts into a single string\n    camel_case_word = ''.join(parts)\n    # Return the camel case word\n    return camel_case_word\n",
        "test": "assert snake_to_camel('') == '', 'Empty string should return empty string'",
        "num_ids": 1533,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def eulerian_num(n, m):\n    if n == 0 and m == 0:\n        return 1\n    elif n > 0 and m > 0:\n        return eulerian_num(n-1, m-1) + eulerian_num(n-1, m) + eulerian_num(n, m-1)\n    else:\n        return 0\n",
        "test": "assert eulerian_num(0, 0) == 1",
        "num_ids": 1504,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # create an empty list to store the sorted sublists\n    sorted_list = []\n    # iterate over each sublist in the input_list\n    for sublist in input_list:\n        # sort the sublist in ascending order\n        sorted_sublist = sorted(sublist)\n        # append the sorted sublist to the sorted_list\n        sorted_list.append(sorted_sublist)\n    # return the sorted_list\n    return sorted_list\n",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'mouse']]) == [['apple', 'banana', 'cherry'], ['cat', 'dog', 'mouse']]",
        "num_ids": 1793,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count(lst):\n    '''\n    Write a Python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, True]) == 3 # test case 1",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3) ",
        "num_ids": 1453,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a list of tuples (num, list_index) for each number in the three lists\n    num1_tuples = [(num, 1) for num in num1]\n    num2_tuples = [(num, 2) for num in num2]\n    num3_tuples = [(num, 3) for num in num3]\n    \n    # create a single list of tuples by concatenating the three lists\n    num_list = num1_tuples + num2_tuples + num3_tuples\n    \n    # use heapq.merge to merge the list of tuples into a single sorted list of tuples\n    merged_list = list(heapq.merge(num_list))\n    \n    # create a final sorted list by extracting the numbers from the merged list\n    sorted_list = [num for num, list_index in merged_list]\n    \n    return sorted_list\n",
        "test": "assert merge_sorted_list([1], [2], [3]) == [1, 2, 3]",
        "num_ids": 3794,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a Python function to find the number of numbers with an odd value\n    when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        binary_str = s + s[0]\n        s = binary_str[1:]\n    for i in range(len(s)):\n        if int(s[i]) % 2 != 0:\n            count += 1\n    return count\n",
        "test": "assert odd_Equivalent(\"11110\", 1) == 4",
        "num_ids": 1875,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for item in nestedlist[0]:\n        if all(item in sublist for sublist in nestedlist):\n            common.append(item)\n    return common\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5], [6, 7, 8]]) == []",
        "num_ids": 1883,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer('123') == True",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 19,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    is_empty = True\n    for item in list1:\n        if item:\n            is_empty = False\n            break\n    return is_empty\n",
        "test": "assert empty_dit([{'a': 1}, {'b': 2}]) == False",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_str = \"\"\n    for num in nums:\n        num_str += str(num)\n    return int(num_str)\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 1233,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        else:\n            try:\n                float(item)\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n    return result\n",
        "test": "assert list_to_float([[1,2,3],[4.5,6.7,8.9],[\"10\",\"11\",\"12.5\"]]) == [[1.0, 2.0, 3.0], [4.5, 6.7, 8.9], [10.0, 11.0, 12.5]]",
        "num_ids": 2153,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list('hello world') == ['hello', 'world']",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def search(arr):\n    for i in range(len(arr)):\n        if i == 0 or i == len(arr) - 1:\n            continue\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]\n    return None\n",
        "test": "assert search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == None, \"Search function is not working correctly.\" ",
        "num_ids": 2108,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product",
        "test": "assert max_product_tuple([(-1, 2), (3, -4), (5, -6)]) == 30",
        "num_ids": 2033,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total_sum = 0\n    for i in range(2, limit+1):\n        divisors_sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                divisors_sum += j\n        if i == divisors_sum and divisors_sum != i:\n            total_sum += i\n    return total_sum\n",
        "test": "assert amicable_numbers_sum(100) == 31626 ",
        "num_ids": 2584,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = complex(a,b)\n    angle = cmath.phase(complex_num)\n    return angle\n",
        "test": "assert angle_complex(1,1) == 0.7853981633974483",
        "num_ids": 1131,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def find_length(string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n    return max_diff\n",
        "test": "assert find_length('00111') == 2  # sub-string '11' has 1 1 and 1 0",
        "num_ids": 1834,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors_sum += i\n    return divisors_sum\n",
        "test": "assert sum(6,12) == 6",
        "num_ids": 1708,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n",
        "test": "assert long_words(5, \"This is a test\") == []",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    \n    # Checking whether the matrix is a square matrix or not\n    for i in range(n):\n        if len(my_matrix[i]) != n:\n            return False\n    \n    # Sum of the first row\n    magic_sum = sum(my_matrix[0])\n    \n    # Checking whether all rows and columns have the same sum\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum:\n            return False\n        \n        temp_sum = 0\n        for j in range(n):\n            temp_sum += my_matrix[i][j]\n            \n        if temp_sum != magic_sum:\n            return False\n    \n    # Checking the diagonals\n    temp_sum = 0\n    for i in range(n):\n        temp_sum += my_matrix[i][i]\n    \n    if temp_sum != magic_sum:\n        return False\n    \n    temp_sum = 0\n    for i in range(n):\n        temp_sum += my_matrix[i][n-i-1]\n    \n    if temp_sum != magic_sum:\n        return False\n    \n    return True\n",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False",
        "num_ids": 3741,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    \n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 3, 4, 5]) == 1",
        "num_ids": 2080,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    left, right = 0, len(str1) - 1\n    \n    while left < right:\n        if str1[left] not in vowels:\n            left += 1\n        elif str1[right] not in vowels:\n            right -= 1\n        else:\n            str1[left], str1[right] = str1[right], str1[left]\n            left += 1\n            right -= 1\n            \n    return ''.join(str1)\n",
        "test": "assert reverse_vowels(\"\") == \"\"",
        "num_ids": 2095,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)\n",
        "test": "assert tup_string((1,2,3)) == \"(1, 2, 3)\"",
        "num_ids": 1109,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_negativenum(nums):\n    '''\n    Calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n",
        "test": "assert sum_negativenum([1, 2, -3, 4, -5]) == -8",
        "num_ids": 1410,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    ratio = zero_count / (zero_count + non_zero_count)\n    return ratio\n",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1902,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    \n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            return False\n        \n    return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    return 2 * pi * r\n",
        "test": "assert circle_circumference(0) == 0, \"Circumference is incorrect\"",
        "num_ids": 1137,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Flatten a list of lists into a single set of numbers.\n    \"\"\"\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result\n",
        "test": "assert extract_singly([[1,2,3],[4,5,6],[7,8,9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 1795,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n    \"\"\"\n    n = len(nums)\n    \n    for i in range(n, 1, -1):\n        # Find the maximum element in the unsorted part of the list\n        max_index = nums.index(max(nums[:i]))\n        \n        # Reverse the maximum element to the front\n        nums[:max_index+1] = reversed(nums[:max_index+1])\n        \n        # Reverse the entire list\n        nums[:i] = reversed(nums[:i])\n    \n    return nums\n",
        "test": "assert pancake_sort([1, 2, 3]) == [1, 2, 3] ",
        "num_ids": 2463,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3 ",
        "num_ids": 1575,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_lists(Input):\n    '''\n    This function returns the number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0, \"Expected 0 lists, but got a different number.\"",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 2129,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        if a == 0:\n            return None\n        else:\n            return (n / a, 0)\n    else:\n        x = (n - b) / a\n        y = (n - a) / b\n        if x.is_integer() and y.is_integer():\n            return (int(x), int(y))\n        else:\n            return None\n",
        "test": "assert find_solution(1, 0, 1) == (1, 0)",
        "num_ids": 2642,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n",
        "test": "assert remove_elements([1,2,3,4], [2]) == [1,3,4]",
        "num_ids": 1343,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4) ... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while i <= n // 2:\n        sum += n - 2 * i\n        i += 1\n    return sum\n",
        "test": "assert sum_series(0) == 0, \"sum_series(0) should be 0\"",
        "num_ids": 1099,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l ** 2) / (4 * tan(pi / s))\n    return area\n",
        "test": "assert area_polygon(6, 6) == 21.0",
        "num_ids": 1549,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                sum1 += i\n            else:\n                sum1 += i + n // i\n    for j in range(1, int(math.sqrt(n)) + 1):\n        if n + 1 % j == 0:\n            if j * j == n + 1:\n                sum2 += j\n            else:\n                sum2 += j + (n + 1) // j\n    return sum1 == sum2\n",
        "test": "assert div_sum(12) == div_sum(28)",
        "num_ids": 2143,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i+97):  # 'a' has ASCII code 97\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"AbCdE\") == 5",
        "num_ids": 1757,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4]) == 2",
        "num_ids": 1350,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n & (n-1) == 0:\n        return n\n    else:\n        return 1 << (n-1).bit_length()\n",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def frequency(a, x):\n    '''\n    Counts the number of occurrences of x in list a.\n    '''\n    count = 0\n    for element in a:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10], 5) == 1",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "test": "assert sum_range_list([1,2,3,4,5], 1, 3) == 9 # expected output: 9",
        "num_ids": 1568,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a\n",
        "test": "assert perimeter_pentagon(8) == 8 * 5, \"Incorrect perimeter calculation for a pentagon with side length 8\"",
        "num_ids": 1417,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_occurance(s):\n    count = 0\n    n = len(s)\n    i = 0\n    while i < n-2:\n        if s[i:i+3] == 'std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count\n",
        "test": "assert count_occurance('This is a std string') == 1 ",
        "num_ids": 1231,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item) != data_type:\n            return False\n    return True\n",
        "test": "assert check_type((1, 2, 3)) is True",
        "num_ids": 1226,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_majority(arr, n, x):\n    # check if x is present in arr\n    if x in arr:\n        # count the frequency of x in arr\n        count = arr.count(x)\n        # check if the count of x is greater than or equal to n/2\n        if count >= n/2:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 3) == False",
        "num_ids": 2400,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 823,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "test": "assert odd_values_string('') == '' # test odd_values_string with an empty string",
        "num_ids": 1101,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 1125,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all bits are unset in the given range or not.\n    \"\"\"\n    if r < l:\n        return False\n    mask = ~((1 << (r - l + 1)) - 1)\n    return (n & mask) == 0",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b11101111,2,5) == False, \"Incorrect result\"",
        "num_ids": 2246,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # separate negative and positive elements\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    # concatenate the negative and positive elements, preserving order\n    result = negatives + positives\n    # add the remaining elements of the original array\n    result += arr[n:]\n    # return the re-arranged array\n    return result\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 2701,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','{}'.format(char))\n",
        "test": "assert replace_blank('hello world', '-') == 'hello-world'",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min heap of size n\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n",
        "test": "assert larg_nnum([1, 1, 1, 1, 1], 3) == [1, 1, 1] ",
        "num_ids": 1868,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def lateralsuface_cylinder(r,h):\n    \"\"\"\n    This function finds the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): The radius of the cylinder.\n    h (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n\n    # Calculate the lateral surface area using the formula 2*pi*r*h\n    surface_area = 2 * math.pi * r * h\n\n    return surface_area\n",
        "test": "assert lateralsuface_cylinder(0,1) == 0, \"Incorrect output\"",
        "num_ids": 1599,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n",
        "test": "assert volume_cube(2) == 8  # check if volume is correct for length 2",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n >> 1)\n",
        "test": "assert even_bit_set_number(0) == 0, \"Test case 1 failed\"",
        "num_ids": 3510,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    tuple_count = Counter(test_list)\n    return dict(tuple_count)\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6)]) == {(1, 2): 2, (3, 4): 2, (5, 6): 2}",
        "num_ids": 2266,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] != '':\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"abc\") == 6 ",
        "num_ids": 1127,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 0:\n        return 1  # there is only one empty sequence\n    if n == 1:\n        return m  # there are m possible sequences of length 1\n    if n > 1 and m < 2:\n        return 0  # there are no possible sequences if m < 2\n    \n    # initialize the table to store the counts of sequences of different lengths\n    counts = [0] * (m+1)\n    counts[1] = m  # there are m possible sequences of length 1\n    \n    for i in range(2, n+1):\n        # compute the counts for sequences of length i\n        for j in range(1, m+1):\n            counts[j] = 0  # reset the count for this j\n            for k in range(1, j//2+1):\n                counts[j] += counts[k]  # add all counts for sequences of length i-1 that end with k\n                \n            counts[j] += counts[j//2]  # add counts for sequences of length i-1 that end with j/2\n            \n    return counts[m]  # return the count for the longest sequence of length n\n",
        "test": "assert get_total_number_of_sequences(5, 5) == 0",
        "num_ids": 2247,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "test": "assert replace_list([1,2,3], [4,5,6]) == [1,2,4,5,6]",
        "num_ids": 1447,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac('') == 0",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # Find the square root of the given number\n    sqrt_N = int(math.sqrt(N))\n    \n    # Check if the square root is an integer or not\n    if sqrt_N ** 2 == N:\n        # If the square root is an integer, then the next perfect square is (sqrt_N+1)^2\n        next_perfect_square = (sqrt_N+1)**2\n    else:\n        # If the square root is not an integer, then the next perfect square is (sqrt_N+1)^2\n        next_perfect_square = (sqrt_N+1)**2\n    \n    # Return the next perfect square\n    return next_perfect_square\n",
        "test": "assert next_Perfect_Square(12) == 16",
        "num_ids": 1463,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Find the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n    max_left = [0] * n\n    max_right = [0] * n\n\n    # Calculate the maximum subsequence sum on the left of each index\n    max_left[0] = arr[0]\n    for i in range(1, n):\n        max_left[i] = max(max_left[i-1] + arr[i], arr[i])\n\n    # Calculate the maximum subsequence sum on the right of each index\n    max_right[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        max_right[i] = max(max_right[i+1] + arr[i], arr[i])\n\n    # Calculate the maximum sum of a bitonic subsequence\n    max_sum = float('-inf')\n    for i in range(1, n-1):\n        if max_left[i-1] < max_right[i+1]:\n            max_sum = max(max_sum, max_left[i-1] + max_right[i+1])\n\n    return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 1]) == 5 ",
        "num_ids": 3591,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute square root of a number using the Babylonian method.\n    \n    Args:\n    number: A positive number for which the square root is to be computed.\n    \n    Returns:\n    An estimate of the square root of the number using the Babylonian method.\n    \"\"\"\n    \n    if number < 0:\n        raise ValueError(\"Number must be a positive real number.\")\n    \n    # Initial guess for square root\n    guess = number / 2\n    \n    # Continuously improve guess until desired accuracy is reached\n    while abs(guess**2 - number) > 1e-15:\n        guess = (guess + number / guess) / 2\n    \n    return guess\n",
        "test": "assert babylonian_squareroot(1) == 1",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "test": "assert lps('bbbab') == 4, \"lps('bbbab') should return 4\"",
        "num_ids": 2250,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return 1.0 / n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)\n",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 1501,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5), 3) == 1, \"Incorrect count for 3\"",
        "num_ids": 1129,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes a list and an element as input and inserts the element before each element in the list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result\n",
        "test": "assert insert_element([], 0) == []",
        "num_ids": 1306,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Convert complex numbers to polar coordinates.\n    '''\n    r = cmath.polar(numbers)[0]\n    theta = cmath.polar(numbers)[1]\n    return r, theta\n",
        "test": "assert convert(0+0j) == (0, 0)",
        "num_ids": 1397,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, \"four\", 5]) == 4",
        "num_ids": 1113,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return list(comb)\n",
        "test": "assert combinations_colors([1,2,3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)] ",
        "num_ids": 2404,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 1641,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(2, 4) == (4, 2)",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 2218,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef newman_prime(n):\n    '''\n    Find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    primes = []\n    candidate = 2\n    # Loop until we find the nth prime\n    while len(primes) < n:\n        # Check if candidate is prime\n        is_prime = True\n        for p in primes:\n            if p * p > candidate:\n                # We only need to check up to sqrt(candidate)\n                break\n            if candidate % p == 0:\n                is_prime = False\n                break\n        # If candidate is prime, add it to the list\n        if is_prime:\n            primes.append(candidate)\n        # Increment candidate by 1\n        candidate += 1\n    # Return the nth prime number\n    return primes[-1]",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 2674,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both tuples are of same length\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples are not of same length\"\n    \n    # Perform division operation element-wise and return the result as a tuple\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    \n    return result\n",
        "test": "assert division_elements((2, 4, 6), (1, 2, 3)) == (2.0, 2.0, 2.0)",
        "num_ids": 1858,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part of the list is L,\n    and returns the resulting lists in a tuple.\n\n    Args:\n        list1 (list): The list to split\n        L (int): The length of the first part of the list\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n    \"\"\"\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])",
        "num_ids": 2011,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7",
        "test": "assert dog_age(1) == 7",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    i = 0\n    while i < len(S):\n        res.append(S[i:i+step])\n        i += step\n    return res\n",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 2270,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l\n",
        "test": "assert lateralsurface_cube(1) == 6, \"Error in lateralsurface_cube function\" ",
        "num_ids": 1030,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count * count\n        count += 2\n    return sum",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1203,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    \"\"\"\n    if n <= 0:\n        return None\n    star_num = \"\"\n    for i in range(n):\n        star_num += \"*\"\n    return star_num\n",
        "test": "assert find_star_num(1) == \"*\"",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value(\"a\") == 97 ",
        "num_ids": 755,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the list\n    for i in range(0, len(arr), 2):\n        # check if the element at the current index is even\n        if arr[i] % 2 == 0:\n            # add it to the sum\n            sum += arr[i]\n    # return the sum\n    return sum\n",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1755,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1,2),(3,4),(5,6)]) == [2, 4, 6] # test with another list of tuples ",
        "num_ids": 1531,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    result = tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n    return result",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 1926,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    # Initialize sum to 0\n    sum = 0\n    # Loop through even index values of n\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        # Add it to the sum\n        sum += coeff\n    # Return the sum\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(1) == 1, \"Test case failed for even_binomial_Coeff_Sum(1)\"",
        "num_ids": 1485,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the volume.\n    '''\n    return 3.14 * r**2 * h\n",
        "test": "assert volume_cylinder(0,0) == 0, \"volume_cylinder(0,0) returns wrong value\"",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filter the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict\n",
        "test": "assert dict_filter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}, 3) == {\"c\": 3, \"d\": 4, \"e\": 5}",
        "num_ids": 1933,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += i\n            break\n    return count\n",
        "test": "assert count_first_elements((1,2,3,4,5,1)) == 0",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 0\n    i = 1\n    while decagonal_num < n:\n        decagonal_num = i * (3 * i - 1) // 2\n        i += 1\n    return decagonal_num\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            pos = i\n            break\n    return (found, pos)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1661,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = set(test_list)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1, 2, 3]) == True",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]",
        "num_ids": 1515,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def validate(n):\n    \"\"\"\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    # Convert the integer to a string and iterate over each character\n    for digit in str(n):\n        # If the digit is not already in the dictionary, add it with a count of 1\n        if digit not in freq:\n            freq[digit] = 1\n        # If the digit is already in the dictionary, increment its count\n        else:\n            freq[digit] += 1\n    # Iterate over the dictionary and check if the count of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if int(digit) < count:\n            return False\n    # If all counts are less than or equal to the digit itself, return True\n    return True\n",
        "test": "assert validate(112233) == False",
        "num_ids": 1875,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in lst:\n        if i != element:\n            return False\n    return True\n",
        "test": "assert check_element([1,1,1],1)==True",
        "num_ids": 1158,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2}|b{3})')\n    match = pattern.search(text)\n    return bool(match)\n",
        "test": "assert text_match_two_three(\"abbbb\") == True",
        "num_ids": 1296,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Calculate the length of the modified array\n    new_n = n * k\n\n    # Initialize the variables for Kadane's algorithm\n    max_so_far = 0\n    max_ending_here = 0\n\n    # Initialize the variables for the original array\n    max_sum = 0\n    max_start = 0\n    max_end = 0\n    curr_sum = 0\n    start = 0\n\n    # Iterate through the modified array\n    for i in range(new_n):\n        # Update the variables for Kadane's algorithm\n        max_ending_here += a[i % n]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n        # Update the variables for the original array\n        curr_sum += a[i % n]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_start = start\n            max_end = i\n        if curr_sum < 0:\n            curr_sum = 0\n            start = i + 1\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 8, 3) == 7 # output: 7, expected output: 7",
        "num_ids": 2986,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    \n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0 # check if the function returns 0 for n=0",
        "num_ids": 1080,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_length(list_of_lists):\n    \"\"\"\n    Returns the list with the maximum length from a list of lists.\n    \"\"\"\n    max_list = []\n    max_len = 0\n    for lst in list_of_lists:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([]) == [], \"Error: max_length function is not working correctly.\" ",
        "num_ids": 1954,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D list to store the number of ways of painting each post with each color\n    dp = [[0 for _ in range(k)] for _ in range(n+1)]\n\n    # Base cases: 1. If there is only one post, then there is only one way to paint it with any color\n    for i in range(k):\n        dp[1][i] = 1\n\n    # Recursive case: For each post, we can paint it with any color. If the previous post is painted with the same color, then we cannot use that color again.\n    # Therefore, for each post and each color, we can calculate the number of ways as the sum of the number of ways of painting the previous post with any color except the current color\n    # and the number of ways of painting the previous previous post with any color (since we can use any color for the previous post).\n    for i in range(2, n+1):\n        for j in range(k):\n            # For the current post and the current color, we can paint it in two ways:\n            # 1. Using the current color for this post and using any color for the previous post\n            # 2. Using any color for this post and using any color for the previous post (since we can use any color for the previous post)\n            dp[i][j] = dp[i-1][j-1] + dp[i-2][j]\n            # If the previous post is not painted with the same color, then we can use any color for this post\n            dp[i][(j+1)%k] += dp[i-1][j]\n\n    # Return the total number of ways of painting the entire fence\n    return sum(dp[n])\n",
        "test": "assert count_no_of_ways(1, 1) == 1 ",
        "num_ids": 2907,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(8,3) == 2",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #calculate the hypotenuse of the right angled triangle using the pythagoras theorem\n    c=math.sqrt(w**2 + h**2)\n    return c ",
        "test": "assert otherside_rightangle(3,4) == 5 ",
        "num_ids": 1082,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if type(val) == int or type(val) == float:\n            if val > max_val:\n                max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1390,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n",
        "test": "assert sum_div(1) == 1, \"sum_div(1) should return 1\"",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 3902,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([[1, 2], [3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 1737,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the aggregate of each state\n    state_aggregate = defaultdict(int)\n\n    # iterate over the list of tuples and update the aggregate of each state\n    for state, value in stdata:\n        state_aggregate[state] += value\n\n    # find the maximum aggregate among the states\n    max_value = 0\n    for state in state_aggregate:\n        if state_aggregate[state] > max_value:\n            max_value = state_aggregate[state]\n\n    return max_value\n",
        "test": "assert max_aggregate([(-1, 2), (-2, 3), (0, 4)]) == 4",
        "num_ids": 2423,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Finds the count of all binary sequences of length 2n such that\n    the sum of the first n bits is equal to the sum of the last n bits.\n\n    :param n: An integer representing the length of the binary sequences.\n    :return: An integer representing the count of binary sequences that satisfy the condition.\n    \"\"\"\n    # Initialize the count and a dictionary to store the results.\n    count = 0\n    results = {}\n\n    # Iterate through all binary sequences of length 2n.\n    for i in range(2 ** (2 * n)):\n        # Convert the decimal representation to binary.\n        binary = bin(i)[2:].zfill(2 * n)\n\n        # Calculate the sum of the first n bits and the sum of the last n bits.\n        sum_first_n = sum(int(bit) for bit in binary[:n])\n        sum_last_n = sum(int(bit) for bit in binary[n:])\n\n        # If the sums are equal and the sequence is not already in the results dictionary, add it to the dictionary.\n        if sum_first_n == sum_last_n and binary not in results:\n            results[binary] = True\n            count += 1\n\n    return count\n",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 1929,
        "indeed": true
    },
    {
        "number": 301,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n        else:\n            depth = 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth\n",
        "test": "assert dict_depth({1: 2, 3: {4: 5}}) == 2",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    \n    # if the index is within the bounds of the original array\n    if index < n:\n        return arr[index]\n    \n    # if the index is not within the bounds of the original array\n    index -= n\n    \n    # find the range that contains the index\n    range_index = 0\n    while index >= ranges[range_index]:\n        index -= ranges[range_index]\n        range_index += 1\n    \n    # get the index within the range that contains the index\n    range_start = sum(ranges[:range_index])\n    range_size = ranges[range_index]\n    \n    # find the index within the rotated range\n    index = (index + rotations[range_index]) % range_size\n    \n    # return the element at the index\n    return arr[range_start + index]\n",
        "test": "assert find_Element([1,2,3,4,5,6,7,8,9], [2, 5, 7], [3, 0, 4], 1) == 2, \"Incorrect rotation at index 1\"",
        "num_ids": 2790,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Returns two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if re.search('^p', word, re.IGNORECASE):\n            result.append(word)\n            if len(result) == 2:\n                break\n    return result\n",
        "test": "assert start_withp(['peach', 'grape', 'kiwi', 'papaya']) == ['peach', 'papaya']",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # initialize variables\n    inc_subseq = [0] * n\n    for i in range(n):\n        inc_subseq[i] = a[i]\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j] and inc_subseq[i] < inc_subseq[j] + a[i]:\n                inc_subseq[i] = inc_subseq[j] + a[i]\n    # find the maximum sum up to i and including kth element\n    max_sum = 0\n    for i in range(index, k):\n        max_sum = max(max_sum, inc_subseq[i])\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([1, 10, 2, 3, 4, 5], 6, 2, 5) == 10, \"Incorrect result for max_sum_increasing_subseq([1, 10, 2, 3, 4, 5], 6, 2, 5)\"",
        "num_ids": 3566,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a deep copy of the tuple\n    result = deepcopy(tuplex)\n    \n    # get the colon of the tuple\n    result = result[m:n]\n    \n    return result\n",
        "test": "assert colon_tuplex((1,2,3,4,5,6,7,8,9,10), 5, 10) == (6,7,8,9,10)",
        "num_ids": 1634,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists,\n    selecting one factor from each list.\n    \"\"\"\n    \n    # Create a list to store the products\n    products = []\n    \n    # Loop through the first list\n    for i in range(len(nums1)):\n        # Loop through the second list\n        for j in range(len(nums2)):\n            # Calculate the product and append it to the list\n            products.append(nums1[i] * nums2[j])\n    \n    # Sort the list in descending order and return the N largest products\n    return sorted(products, reverse=True)[:N]\n",
        "test": "assert large_product([-10, 3, 5, 7], [2, -3, 4, -5], 3) == [-35, -10, 350] ",
        "num_ids": 2081,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(4, 5) == 5",
        "num_ids": 886,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)",
        "test": "assert string_to_tuple(\"abcd\") == (\"a\", \"b\", \"c\", \"d\")",
        "num_ids": 911,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the left most unset bit\n    mask = n & (n-1)\n    \n    # Invert the mask to set the left most unset bit\n    unset_bit = ~mask & (n + 1)\n    \n    return unset_bit\n",
        "test": "assert set_left_most_unset_bit(0b00000000) == 0b00000001 ",
        "num_ids": 1602,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(0,0) == 0, \"Invalid input.\"",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a Python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i *= 2\n    return i // 2\n",
        "test": "assert highest_Power_of_2(2) == 2",
        "num_ids": 1187,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 1074,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list\n",
        "test": "assert add_string([1, 2, 3], '{}') == ['1', '2', '3']",
        "num_ids": 1322,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 1915,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation\n    f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    max_sum = 0\n    for i in range(2, 6):\n        if n % i == 0:\n            max_sum += get_max_sum(n//i)\n    \n    return max(max_sum, n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1738,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = None\n    max_length = 0\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1,2],[3,4],[5,6,7]]) == [5,6,7]",
        "num_ids": 1401,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct(()) == True",
        "num_ids": 1147,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Find the first character with frequency 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n\n    # If no non-repeating character is found, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 1900,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('a') == True, \"Expected True\"",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result\n",
        "test": "assert sum_of_digits([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1746,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result_tup)\n",
        "test": "assert bitwise_xor((0,0,0),(0,0,0)) == (0,0,0)",
        "num_ids": 1974,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty dictionary to store the frequency of each tuple\n    freq = {}\n    \n    # Loop through each element in the list\n    for elem in test_list:\n        # Convert the element to a tuple and store it in the dictionary with a value of 1\n        if type(elem) == tuple:\n            freq[elem] = 1\n        # If the element is not a tuple, skip it\n        else:\n            continue\n        \n    # Return the length of the dictionary, which represents the number of unique tuples in the list\n    return len(freq)\n",
        "test": "assert extract_freq([(1, 2), (1, 3), (2, 3), (1, 2)]) == 3 # test for unique tuples",
        "num_ids": 1895,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        row_tuple = ()\n        for j in range(len(test_tup1[i])):\n            row_tuple += (test_tup1[i][j] + test_tup2[i][j],)\n        result += (row_tuple,)\n    return result",
        "test": "assert add_nested_tuples((-1, 2, -3), (4, -5, 6)) == (3, -3, 3)",
        "num_ids": 2026,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5, 7) == 5",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1, 2, 3), 2) == True",
        "num_ids": 1047,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_Parity(x):\n    '''\n    This function takes in an integer x and returns True if the parity of x is odd, and False otherwise.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_Parity(1) == True ",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    # sort the digits in descending order\n    digits.sort(reverse=True)\n    # find the first pair of adjacent digits that can be swapped\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            # swap the two digits\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            # sort the remaining digits in descending order\n            digits[i+1:] = sorted(digits[i+1:], reverse=True)\n            break\n    # convert the list of digits back to a number\n    result = int(''.join(str(d) for d in digits))\n    return result\n",
        "test": "assert rearrange_bigger(534) == 543 ",
        "num_ids": 2491,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # initialize a list to store the result\n    pairs = []\n    \n    # create a min heap of (nums1[0] + nums2[0], 0, 0)\n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    \n    # iterate for k times\n    for i in range(k):\n        # pop the smallest pair from the heap\n        _, index1, index2 = heapq.heappop(heap)\n        \n        # add the smallest pair to the result list\n        pairs.append((nums1[index1], nums2[index2]))\n        \n        # if the second element of the pair is not the last element of nums2, add the next smallest pair (nums1[index1] + nums2[index2+1], index1, index2+1)\n        if index2 + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[index1] + nums2[index2+1], index1, index2+1))\n        \n        # if the first element of the pair is not the last element of nums1, add the next smallest pair (nums1[index1+1] + nums2[index2], index1+1, index2)\n        if index1 + 1 < len(nums1):\n            heapq.heappush(heap, (nums1[index1+1] + nums2[index2], index1+1, index2))\n    \n    # return the result list\n    return pairs\n",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]",
        "num_ids": 3999,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(7, 8), (9, 10), (11, 12)]) == 72, \"Incorrect min_product_tuple result\"",
        "num_ids": 2102,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for val in listval:\n        if type(val) == int or type(val) == float:\n            if val < minval:\n                minval = val\n    return minval\n",
        "test": "assert min_val([-1,2,-3]) == -3",
        "num_ids": 1369,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'[a-z]+', word.lower())\n    return words[0] + ''.join(word.title() for word in words[1:])\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 1578,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i%2 == 0:\n            result.append(i)\n    return result\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 1140,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][n-1])\n    return result\n",
        "test": "assert extract_nth_element([('a',1),('b',2),('c',3)], 2) == 'b'",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[2,3,4]) # expected output: True",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_Product(arr):\n    # sort the array in descending order\n    arr.sort(reverse=True)\n    # find the two highest numbers\n    first = arr[0]\n    second = arr[1]\n    # multiply them together\n    result = first * second\n    return result\n",
        "test": "assert max_Product([1,2,3,4,5]) == 20, \"Incorrect result for [1,2,3,4,5]\"",
        "num_ids": 1988,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Create an empty dictionary to store the count of each element\n    count_dict = {}\n    \n    # Iterate over the input list of tuples\n    for tup in Input:\n        # Check if the first element of the tuple is already in the dictionary\n        if tup[0] in count_dict:\n            # If it is, increment the count by 1\n            count_dict[tup[0]] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            count_dict[tup[0]] = 1\n    \n    # Create an empty list to store the common first elements\n    common_list = []\n    \n    # Iterate over the dictionary and append the elements that have a count greater than 1\n    for key in count_dict:\n        if count_dict[key] > 1:\n            common_list.append(key)\n    \n    # Return the list of common first elements\n    return common_list\n",
        "test": "assert group_tuples([(1,2),(3,4),(5,6)]) == []",
        "num_ids": 2446,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_str = \"\"\n    for item in lst:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_str = item\n    return max_str\n",
        "test": "assert Find_Max([[1,2,3], [4,5,6,7], [8]]) == [4,5,6,7]",
        "num_ids": 1396,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def round_and_sum(list1):\n    \"\"\"\n    This function takes a list of numbers as input, rounds each number to the nearest integer, sums the rounded numbers and multiplies the sum by the length of the list.\n    \"\"\"\n    # rounding each number to the nearest integer and storing it in a new list\n    rounded_list = [round(num) for num in list1]\n\n    # calculating the sum of the rounded numbers\n    total_sum = sum(rounded_list)\n\n    # multiplying the sum by the length of the list and returning the result\n    return total_sum * len(list1)\n",
        "test": "assert round_and_sum([1.23, 4.56, 7.89]) == 1.0 * (round(1.23) + round(4.56) + round(7.89)) * 3 ",
        "num_ids": 1840,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum\n",
        "test": "assert cube_Sum(0) == 0, \"Cube Sum of 0 Even Natural Numbers should be 0\"",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element)\n    return concatenated_string\n",
        "test": "assert concatenate_tuple(('a', 'b', 'c')), 'abc' ",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    avg = sum / n\n    return avg\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return tuple(rear_elements)\n",
        "test": "assert extract_rear(('abc', 'defg', 'hijkl')), 'l'",
        "num_ids": 1404,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 0) == 0",
        "num_ids": 1236,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1239,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use regular expressions to match the date format\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        # Extract the year, month, and day from the match object\n        year, month, day = match.groups()\n        # Return the date in the desired format\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        # If the date is not in the expected format, return None\n        return None\n",
        "test": "assert change_date_format('2021-09-15') == '15-09-2021'",
        "num_ids": 2256,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([5, 3, 8, 6, 2]) == [2, 3, 5, 6, 8]",
        "num_ids": 2087,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(a and b for a, b in zip(test_tup1, test_tup2))\n    return result_tup\n",
        "test": "assert and_tuples((1, 0, 1), (1, 1, 0)) == (1, 0, 0)",
        "num_ids": 1674,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Find the directrix of a parabola.\n    '''\n    directrix = -1/a\n    return directrix\n",
        "test": "assert parabola_directrix(1, 2, 3) == -1 # expected output: -1",
        "num_ids": 1210,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set for list1 to improve lookup performance\n    set1 = set(list1)\n    \n    # iterate over list2 and check if each element is in set1\n    for elem in list2:\n        if elem in set1:\n            return True\n    \n    # if we reach this point, there are no common elements\n    return False\n",
        "test": "assert common_element([1,2,3], [4,5,6]) == False, \"Incorrect common element check\"",
        "num_ids": 1449,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Find the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Find the median length\n    median = 2 * area / (base1 + base2)\n\n    return median\n",
        "test": "assert median_trapezium(12, 8, 10) == 10",
        "num_ids": 2117,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i >= number:\n            return False\n    return True\n",
        "test": "assert check_greater([1,2,3,4,5], 6) == True, \"Error: check_greater() is not working correctly.\"",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"ab\")",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(10) == 0",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([-3, -2, 1, 2, 3]) == [-3, -2]",
        "num_ids": 1190,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str\n",
        "test": "assert remove_odd('') == '', \"empty string test failed\"",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]) or (test_list[i][0] == test_list[j][0] and test_list[i][1] == test_list[j][1]):\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2), (2,3), (3,1), (4,5)]) == 0",
        "num_ids": 1937,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiple_to_single(L):\n    # Initialize the result as an empty string\n    result = ''\n    \n    # Iterate through the list and concatenate each element to the result\n    for num in L:\n        result += str(num)\n    \n    # Convert the result from a string to an integer\n    result = int(result)\n    \n    # Return the final result\n    return result\n",
        "test": "assert multiple_to_single([0, 0, 0, 0]) == 0",
        "num_ids": 1334,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression to match adverbs\n    pattern = r'\\b[a-zA-Z]+\\b'\n    # Find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n    # Find the positions of the first adverb in the text\n    first_adverb_pos = text.find(adverbs[0])\n    # Return the first adverb and its position\n    return (adverbs[0], first_adverb_pos)\n",
        "test": "assert find_adverb_position(\"She swam quickly.\") == \"quickly\" and find_adverb_position(\"They ran quickly away.\") == \"quickly\" and find_adverb_position(\"They ran away quickly.\") == \"quickly\" and find_adverb_position(\"They ran away quickly.\") == \"quickly\" and find_adverb_position(\"She swam quickly, even though it was raining.\") == \"quickly\" ",
        "num_ids": 2385,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n",
        "test": "assert surfacearea_cube(2) == 24",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n",
        "test": "assert positive_count([-1, -2, -3, -4, -5]) == 0",
        "num_ids": 1720,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_neg = None\n    for num in list1:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    return largest_neg\n",
        "test": "assert largest_neg([-5, 10, -3, -7, -1]) == -1, \"Incorrect answer\"",
        "num_ids": 1446,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        if len(t) > K:\n            result.append(t[0:K])\n        else:\n            result.append(t)\n    return result\n",
        "test": "assert trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)], 2) == [(1, 2), (5, 6), (9, 10)]",
        "num_ids": 2254,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4,10,18) ",
        "num_ids": 1846,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    res = {}\n    for i in lst:\n        if i in count:\n            res[i] = count[i]\n    return res\n",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5), [1, 2, 3]) == Counter({1: 1, 2: 1, 3: 1}) ",
        "num_ids": 2124,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list\n",
        "test": "assert cube_nums([1,2,3]) == [1,8,27]",
        "num_ids": 1356,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of perrin numbers.\n    \"\"\"\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)",
        "test": "assert cal_sum(1) == 1 ",
        "num_ids": 2156,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def extract_string(lst, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for word in lst:\n        if len(word) == l:\n            result.append(word)\n    return result\n",
        "test": "assert extract_string([], 0) == []",
        "num_ids": 1336,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n",
        "test": "assert remove_whitespaces('Hello World!') == 'HelloWorld!'",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Calculate the loss amount on a sale if the given amount has loss, else return 0.\n    '''\n    loss_amount = actual_cost - sale_amount\n    if loss_amount < 0:\n        return 0\n    else:\n        return loss_amount\n",
        "test": "assert loss_amount(1000,1000) == 0, \"loss_amount not working for no loss\"",
        "num_ids": 1359,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a Python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum = sum + i\n            if n/i != i and (n/i) % 2 == 0:\n                sum = sum + n/i\n        i = i+1\n    return sum",
        "test": "assert sumofFactors(2) == 2 ",
        "num_ids": 1371,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = re.findall(r'\\b\\w*z\\w*\\b', text)\n    return words\n",
        "test": "assert text_match_wordz(\"I love zebras.\") == [\"zebras\"]",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(2) == False",
        "num_ids": 1802,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp'] # check the function with a list of strings",
        "num_ids": 1409,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([]) == []",
        "num_ids": 1516,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes the length and breadth of a rectangle as input and returns its area.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(5, 3) == 15",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_uppercase('hello world') == 'hello world'",
        "num_ids": 1174,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    extracted_list = []\n    for sublist in lst:\n        extracted_list.append(sublist[0])\n    return extracted_list\n",
        "test": "assert Extract([[1,2,3],[4,5,6]]) == [1, 4]",
        "num_ids": 1364,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Count the number of uppercase characters in a given string.\n\n    Args:\n        string (str): A string to count uppercase characters in.\n\n    Returns:\n        int: The number of uppercase characters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 140,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n\n    combinations = []\n    for i in range(1, len(list1)+1):\n        combinations += list(itertools.combinations(list1, i))\n\n    return combinations\n",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        max_so_far = max(max_so_far, max_product)\n    \n    return max_so_far\n",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0",
        "num_ids": 2271,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Create a set of all values in the dictionary\n    value_set = set(dict.values())\n\n    # If there is only one value in the set, then all values are the same\n    if len(value_set) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_value({'a': 1, 'b': 2}, 1) == False, \"Error: check_value is not working correctly\"",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def drop_empty(dict1):\n    new_dict = {k: v for k, v in dict1.items() if v}\n    return new_dict",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1236,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def max_product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        current_product = arr[i]\n        for j in range(i+1, len(arr)):\n            current_product *= arr[j]\n            max_product = max(max_product, current_product)\n    return max_product\n",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 2551,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n",
        "test": "assert add_pairwise((1, 1, 1, 1)) == (2, 2, 2)",
        "num_ids": 1532,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Finds the product of the array multiplication modulo n.\n\n    Args:\n    arr (list): List of integers\n    n (int): Integer modulo\n\n    Returns:\n    int: Remainder of the product of the array multiplication modulo n.\n    \"\"\"\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result\n",
        "test": "assert find_remainder([1, 2, 3, 4], 5) == 4, \"Test case 2 failed\"",
        "num_ids": 1145,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1,2,3]) == True",
        "num_ids": 1349,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                intersection.append(tup1)\n                break\n    return intersection\n",
        "test": "assert tuple_intersection([(1,2),(3,4)],[(3,4),(5,6)]) == [(3,4)] # expected output: [(3,4)]",
        "num_ids": 2126,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    Parameters:\n    str1 (str): The string to be modified.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the old character.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n    return str1.replace(ch, newch)",
        "test": "assert replace_char(\"hello world\", \"o\", \"0\") == \"hell0 w0rld\"",
        "num_ids": 1235,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(Counter(dict1).items(), key=lambda x: x[1], reverse=True))\n",
        "test": "assert sort_counter({'a': 3, 'b': 2, 'c': 1}) == {'c': 1, 'b': 2, 'a': 3} ",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    else:\n        largest = min(nums)\n        smallest = max(nums)\n        return largest + smallest\n",
        "test": "assert big_sum([1,2,3,4,5]) == 6 # sum of smallest and largest value in [1,2,3,4,5] is 1+5 = 6",
        "num_ids": 1582,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_lowercase('hello world') == ' '",
        "num_ids": 1234,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n = n // 10\n    return n",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5] # should return [1, 3, 5]",
        "num_ids": 1227,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def difference(n):\n    # Calculate the sum of the first n natural numbers\n    sum_of_first_n = n * (n + 1) // 2\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = n * (n + 1) * (2 * n + 1) // 6\n\n    # Calculate the difference between the two sums\n    diff = sum_of_cubes - sum_of_first_n\n\n    # Return the difference\n    return diff\n",
        "test": "assert difference(1) == 0",
        "num_ids": 1296,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Odd_Pair(A,N) :\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if bin(A[i]^A[j]).count('1') % 2 != 0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1,2,3], 3) == 2 # should return 2 since (1 XOR 2) and (2 XOR 3) are odd pairs",
        "num_ids": 1398,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n",
        "test": "assert toggle_string('Hello, World!') == 'hELLO, wORLD!'",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    diff = abs(n1 - n2)\n    sum_diff = 0\n    \n    while diff > 0:\n        # Extract the last digit of the difference\n        last_digit = diff % 10\n        \n        # Add the absolute value of the last digit to the sum\n        sum_diff += abs(last_digit)\n        \n        # Divide the difference by 10 to remove the last digit\n        diff //= 10\n    \n    return sum_diff\n",
        "test": "assert digit_distance_nums(0, 0) == 0",
        "num_ids": 2235,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n",
        "test": "assert max_sub_array_sum([1, -2, 3, 10, -4, 7, 2, -5], 8) == 18",
        "num_ids": 1911,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)",
        "test": "assert union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4) # should return (1, 2, 3, 4)",
        "num_ids": 1972,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 1636,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert extract_values(\"\") == []",
        "num_ids": 1157,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10, \"Incorrect result for [1,2,3,4,5]\"",
        "num_ids": 1399,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of its individual characters.\n    \"\"\"\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and iterate over its characters\n    total = 0\n    for char in str(n):\n        # Convert the character to an integer and add it to the total\n        total += int(char)\n    return total\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "test": "assert empty_list(3) == [ {}, {}, {} ]",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sort_sublists(list1):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['a','b','c'], ['d','e','f'], ['g','h','i']]) == [['a','b','c'], ['d','e','f'], ['g','h','i']]",
        "num_ids": 1818,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1,2,3,4,5,1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 1903,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 2, 4]) == 24 ",
        "num_ids": 1349,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(1,1) == 2 * 3.14 * 1 * 1 + 2 * 3.14 * 1 ",
        "num_ids": 1679,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3],[2,3]) == True",
        "num_ids": 1369,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # Use the property of the last digit of factorials\n        return last_Digit_Factorial(n//5) * last_Digit_Factorial(n%5) % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1530,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"All lists must be of the same length\")\n    return [x for tup in zip(list1, list2, list3) for x in tup]\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 2019,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    \n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n            \n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_elements.append(element)\n            \n    return dissimilar_elements",
        "test": "assert find_dissimilar((1, 2, 3, 4), (1, 2, 3, 5)) == (4, 5)",
        "num_ids": 2058,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 150,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    def is_even(num):\n        return num % 2 == 0\n    \n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif isinstance(item, int):\n            if even_fnc(item):\n                result.append(item)\n    return tuple(result)\n",
        "test": "assert even_ele((1,2,3,'four',5,6,7,'eight',9,10), lambda x: isinstance(x, int) and x % 2 == 0) == (2, 6, 10) ",
        "num_ids": 2255,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base_area = b**2\n    slant_height = b/2 * s\n    triangular_area = b**2 / 2\n    surface_area = base_area + 4 * triangular_area + 4 * slant_height\n    return surface_area\n",
        "test": "assert surface_Area(4,6) == 96.0, \"Error in surface_Area function\"",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def catalan_number(num):\n    if num == 0:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-i-1)\n        return result\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Regular expression pattern to match an adverb ending with \"ly\"\n    pattern = r\"\\w+ly\"\n\n    # Find all adverbs in the text that match the pattern\n    adverbs = re.findall(pattern, text)\n\n    # If there are no adverbs that match the pattern, return None\n    if not adverbs:\n        return None\n\n    # Find the position of the first adverb that matches the pattern\n    position = text.index(adverbs[0])\n\n    # Return a tuple containing the first adverb and its position\n    return (adverbs[0], position)\n",
        "test": "assert find_adverbs(\"The dog entered the pool.\") == None",
        "num_ids": 2073,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    min_heap = []\n    \n    # Iterate through the items\n    for item in items:\n        # Add the item to the min heap\n        heapq.heappush(min_heap, item)\n        \n        # If the min heap size is greater than n, remove the smallest item\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    \n    # Return the n most expensive items in descending order\n    return sorted(min_heap, reverse=True)\n",
        "test": "assert expensive_items([(1, \"a\"), (2, \"b\"), (3, \"c\"), (4, \"d\"), (5, \"e\"), (6, \"f\")], 1) == [(6, 'f')]",
        "num_ids": 2674,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    second_part.extend(first_part)\n    return second_part\n",
        "test": "assert split_Arr([], 0) == [] ",
        "num_ids": 1505,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Returns the difference between the largest and smallest values in a given list of numbers.\n    \n    Parameters:\n    nums (list): A list of numbers.\n    \n    Returns:\n    int: The difference between the largest and smallest values in the list.\n    \n    \"\"\"\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    return diff\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4, \"big_diff([1, 2, 3, 4, 5]) != 4\"",
        "num_ids": 1591,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for i in range(a, b+1):\n        sqrt_i = int(i ** 0.5)\n        if sqrt_i ** 2 == i:\n            squares.append(i)\n    return squares\n",
        "test": "assert perfect_squares(2, 11) == [4, 9]",
        "num_ids": 1585,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_coord = cmath.rect(r, theta)\n    x = round(rect_coord.real, 2)\n    y = round(rect_coord.imag, 2)\n    return x, y\n",
        "test": "assert polar_rect(1, 0) == (1, 0)",
        "num_ids": 987,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1529,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def binomial_Coeff(n, k):\n    # Calculate the value of Binomial Coefficient using the formula (n! / (k! * (n-k)!))\n    result = 1\n    for i in range(1, k+1):\n        result = result * (n - i + 1)\n        result = result / i\n    return result\n\ndef sum_of_products(n):\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    sum = 0\n    for i in range(1, n):\n        coeff1 = binomial_Coeff(n, i)\n        coeff2 = binomial_Coeff(n, i+1)\n        sum += coeff1 * coeff2\n    return sum",
        "test": "assert binomial_Coeff(0, 0) == 1  # base case",
        "num_ids": 1894,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    octets = ip.split('.')\n    result = []\n    for octet in octets:\n        if octet == '0':\n            result.append('0')\n        else:\n            result.append(str(int(octet)))\n    return '.'.join(result)\n",
        "test": "assert removezero_ip('1.0.0.0') == '1.0.0.0'",
        "num_ids": 2142,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables to store even and odd numbers\n    even_num = None\n    odd_num = None\n\n    # Loop through the list and find the first even and odd numbers\n    for num in list1:\n        if even_num is None and num % 2 == 0:\n            even_num = num\n        elif odd_num is None and num % 2 != 0:\n            odd_num = num\n\n        # If we have found both even and odd numbers, break out of the loop\n        if even_num is not None and odd_num is not None:\n            break\n\n    # If both even and odd numbers were found, calculate and return the difference\n    if even_num is not None and odd_num is not None:\n        return abs(even_num - odd_num)\n    else:\n        return None\n",
        "test": "assert diff_even_odd([1, 3, 5, 7, 9, 10]) == 9 # 10 - 1",
        "num_ids": 2724,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def min_Swaps(str1, str2):\n    # Convert strings to lists of integers\n    num1 = [int(x) for x in str1]\n    num2 = [int(x) for x in str2]\n    \n    # Initialize variables to keep track of swaps\n    swaps = 0\n    i = 0\n    j = len(num1) - 1\n    \n    # Iterate over the lists\n    while i <= j:\n        # If the two numbers are not equal, swap them\n        if num1[i] != num2[i]:\n            # Swap the numbers at indices i and j\n            num1[i], num1[j] = num1[j], num1[i]\n            swaps += 1\n            \n        i += 1\n        j -= 1\n    \n    return swaps\n",
        "test": "assert min_Swaps(\"1010\",\"0110\") == 2 ",
        "num_ids": 3247,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_kth(arr1, arr2, k):\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return min(arr1[i], arr2[j])\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return min(arr1[i], arr2[j])\n            k -= 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j+k-1]\n    elif j == len(arr2):\n        return arr1[i+k-1]\n",
        "test": "assert find_kth([1,3,5], [2,4,6], 1) == 1",
        "num_ids": 2559,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    # initialize sum variable to 0\n    sum = 0\n    # get the length of the number\n    length = len(str(number))\n    # find the sum of each digit raised to the power of length\n    for digit in str(number):\n        sum += int(digit) ** length\n    # check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(45) == False, \"45 is not an Armstrong number\"",
        "num_ids": 1729,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n",
        "test": "assert sum_average(10) == (55, 5.5) # expected output (1+2+3+...+10, 5.5)",
        "num_ids": 1289,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(0) == True",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store the count of each character\n    char_count = {}\n    \n    # iterate over each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, it's a repeated character\n        if char in char_count:\n            return char\n        # otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # if no repeated characters are found, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 1467,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        digits = [int(x) for x in str(i)]\n        reverse_digits = digits[::-1]\n        if digits == reverse_digits:\n            lucids.append(i)\n    return lucids\n",
        "test": "assert get_ludic(0) == []",
        "num_ids": 2659,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_list = s.split()\n    s_list_rev = s_list[::-1]\n    return ' '.join(s_list_rev)\n",
        "test": "assert reverse_words('hello world') == 'world hello'",
        "num_ids": 1157,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 1017,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern.\n    The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert find_literals(\"Hello, world!\", \"Hello\") == (\"Hello\", 0, 5) ",
        "num_ids": 1834,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Returns the nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    bell = [0] * (n+1)\n    bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 1308,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Remove the kth element from the given list and return the resulting list.\n    \"\"\"\n    return list1[:L-1] + list1[L:]\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5] # check that the kth element is removed",
        "num_ids": 1564,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of the n'th column.\n    \"\"\"\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val\n",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 9 # max of third column is 9 ",
        "num_ids": 2060,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def merge(lst):\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 1789,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    result_list = []\n    for item in test_list:\n        cum_sum += item\n        result_list.append(cum_sum)\n    return result_list\n",
        "test": "assert cummulative_sum([1, 2, 3]) == [1, 3, 6] # Passes the test case with expected output.",
        "num_ids": 1690,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the average values\n    average_list = []\n\n    # iterate through each tuple in the input tuple of tuples\n    for tup in nums:\n        # calculate the average of the current tuple\n        avg = sum(tup) / len(tup)\n\n        # add the average value to the list\n        average_list.append(avg)\n\n    # return the list of average values\n    return average_list\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [2.0, 5.0, 8.0]",
        "num_ids": 2002,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return \"Tuples should be of the same length\"\n    else:\n        result_tuple = tuple([test_tup1[i] % test_tup2[i] for i in range(len(test_tup1))])\n        return result_tuple",
        "test": "assert tuple_modulo((0, 0, 0), (1, 2, 3)) == (0, 0, 0)",
        "num_ids": 1921,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return 0\n    if steps == 0:\n        return float('inf')\n    if steps == 1 and d <= 1:\n        return 1\n    if steps == 1 and d > 1:\n        return float('inf')\n    return min(min_Jumps(steps - 1, d - 1), min_Jumps(steps - 1, d), min_Jumps(steps - 1, d + 1)) + 1\n",
        "test": "assert min_Jumps(1, 1) == 1 ",
        "num_ids": 2143,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1,2,3],[2,4,6]) == [0.5,0.5,0.5]",
        "num_ids": 1745,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    new_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            new_str += char\n    num_str = \"\".join(num_list)\n    new_str += num_str\n    return new_str\n",
        "test": "assert move_num('a1b2c3') == 'abc123'",
        "num_ids": 1767,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def largest_subset(a):\n    # create a set of pairs that are divisible\n    pairs = set()\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                pairs.add((a[i], a[j]))\n    \n    # find the largest subset of pairs that are divisible\n    max_subset_size = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            for k in range(j+1, len(a)):\n                if (a[i], a[j]) in pairs and (a[j], a[k]) in pairs and (a[i], a[k]) in pairs:\n                    max_subset_size = max(max_subset_size, 3)\n    \n    return max_subset_size\n",
        "test": "assert largest_subset([1,3,5,7,9]) == 3",
        "num_ids": 2343,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n%2==0:\n        median = (arr1[n//2-1] + arr2[n//2])/2\n        return median\n    else:\n        median = arr1[n//2]\n        return median\n",
        "test": "assert get_median([1,3,5], [2,4,6], 3) != 2",
        "num_ids": 2445,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4,5],2) == [1,4,9,16,25]",
        "num_ids": 1356,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"THIS IS A TEST STRING\") == \"THIS IS A TEST STRING\"",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1] ",
        "num_ids": 1471,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r**2\n    return area\n",
        "test": "assert triangle_area(0) == 0, \"Test failed for radius 0\"",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n    if end is None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if array[i] == i + 1:\n            continue\n        elif array[i] == i:\n            return i + 1\n        else:\n            return i + 1\n    \n    return end + 1\n",
        "test": "assert find_First_Missing([1,2,3,4,5,6,7,8,10]) == 9",
        "num_ids": 1875,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"Hello World\") == \"Hello%20World\"",
        "num_ids": 877,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 1437,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 2:\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if (i == 0 and j == 0) or (i == 1 and j == 1) or (i == -1 and j == 1) or (i == 1 and j == -1) or (i == -1 and j == -1):\n                    continue\n                sub.append((ele[0]+i, ele[1]+j))\n        return sub\n    else:\n        return None\n",
        "test": "assert adjac((1,1)) == [(0,1), (1,0), (1,2), (2,1)]",
        "num_ids": 2176,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_', ' ')\n",
        "test": "assert replace_spaces('hello_world') == 'hello world'",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    # Create an empty list to hold the non-zero elements\n    non_zero = []\n    \n    # Iterate over the original list and add non-zero elements to the new list\n    for num in num_list:\n        if num != 0:\n            non_zero.append(num)\n    \n    # Return the non-zero list with all the zeroes appended at the end\n    return non_zero + [0] * num_list.count(0)\n",
        "test": "assert move_zero([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] ",
        "num_ids": 2241,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # Initialize the sum to 0\n    xor_sum = 0\n    \n    # Loop through all pairs of numbers in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # XOR the pair of numbers and add to the sum\n            xor_sum += arr[i] ^ arr[j]\n    \n    # Return the sum of all xors\n    return xor_sum\n",
        "test": "assert pair_xor_Sum([], 0) == 0 ",
        "num_ids": 1706,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1210,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True",
        "num_ids": 1392,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wci)\n",
        "test": "assert wind_chill(50, -30) == 15, \"Incorrect wind chill index\"",
        "num_ids": 1930,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def sum_name_length(sample_names):\n    '''\n    This function takes a list of sample names and returns the sum of the lengths of the names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['Alice', 'Bob', 'David']) == 8 # returns 8 because all names are included in the sum",
        "num_ids": 1548,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n",
        "test": "assert remove_parenthesis(\"Hi there (general) public!\") == \"Hi there  public!\"",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n_nonagonal = (n * (n * n + 3 * n - 2)) / 2\n    return n_nonagonal\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = text.split()\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            return False\n        if re.search(r'z[^aeiou]', word):\n            return True\n    return False\n",
        "test": "assert text_match_wordz_middle(\"hello\") == False",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array elements upto k\n    input[:k] = input[:k][::-1]\n    \n    return input\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1]",
        "num_ids": 2082,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {\"a\": 4, \"b\": 5}) == (1, 2, 3, {\"a\": 4, \"b\": 5})",
        "num_ids": 1697,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            \n            if i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    total_cost = dp[n-1][n-1]\n    num_cells = n*n\n    avg = total_cost/num_cells\n    \n    return avg\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 12.5",
        "num_ids": 3938,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value,\n    - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n\n    return filtered_students\n",
        "test": "assert filter_data({'John': (1.78, 70), 'Mary': (1.62, 60), 'David': (1.85, 80)}, 1.7, 65) == {'John': (1.78, 70), 'David': (1.85, 80)}",
        "num_ids": 2686,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,2,3], [1,2,3]) == 3",
        "num_ids": 1595,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string to make it iterable\n    base_str = str(base)\n    \n    # Create an empty list to store the digits raised to the power\n    digits_powered = []\n    \n    # Iterate over each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and raise it to the power\n        digit_int = int(digit)\n        digit_powered = digit_int ** power\n        \n        # Append the powered digit to the list\n        digits_powered.append(digit_powered)\n    \n    # Calculate the sum of all digits in the list\n    total = sum(digits_powered)\n    \n    return total\n",
        "test": "assert power_base_sum(2, 2) == 4",
        "num_ids": 1772,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use regular expression to find all values between quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches\n",
        "test": "assert extract_quotation('Hello \"world\"') == 'world' ",
        "num_ids": 1194,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    return result_tup\n",
        "test": "assert multiply_elements((2,3,4,5)) == (6,12,20)",
        "num_ids": 1782,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1615,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list of numbers.\n\n    Args:\n        nums (list): The list of numbers.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n    '''\n    return [k for k, _ in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([1,1,1,1,1]) == [1]",
        "num_ids": 1820,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r * math.sqrt(r**2 + h**2)\n    return lateral_surface_area\n",
        "test": "assert lateralsurface_cone(3, 4) == math.pi * 3 * math.sqrt(3 ** 2 + 4 ** 2) ",
        "num_ids": 1528,
        "indeed": true
    },
    {
        "number": 732,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[ ,.]+'\n    replacement = ':'\n    result = re.sub(pattern, replacement, text)\n    return result\n",
        "test": "assert replace_specialchar(\"Hello world!\") == \"Hello:world!\" ",
        "num_ids": 1274,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize a variable to keep track of the index of the first occurrence\n    first_occurrence = -1\n\n    # loop through the array\n    for i in range(len(A)):\n        # if the current element equals the target element and the first occurrence has not been found yet\n        if A[i] == x and first_occurrence == -1:\n            first_occurrence = i\n        # if the current element is greater than the target element, we're done\n        elif A[i] > x:\n            break\n\n    return first_occurrence",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 5, 6], 4) == 3",
        "num_ids": 2631,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9+7\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            sub_prod = 1\n            for k in range(i,j):\n                sub_prod *= arr[k]\n            res += sub_prod\n            res %= mod\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([]) == 0, \"Incorrect result for []\"",
        "num_ids": 2570,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def set_middle_bits(n):\n    mask = 0xFFFFFFFE\n    return n ^ (n & mask)\n",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 2) == 1, \"Incorrect insertion point\"",
        "num_ids": 1366,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('Apple') == True",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (0.5 ** (n-1)) * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import math\n\ndef find_Index(n):\n    t = 0\n    i = 1\n    while True:\n        t += i\n        if len(str(t)) == n:\n            return i\n        i += 1\n",
        "test": "assert find_Index(1) == 1",
        "num_ids": 1588,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict\n",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 1824,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a Python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(set(s)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same(\"aaa\") == True ",
        "num_ids": 1390,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    height = (side ** 2 - side * math.sqrt(3)) / (2 * side)\n    base = side * math.sqrt(3) / 3\n    area = (base * height) / 2\n    return area\n",
        "test": "assert area_tetrahedron(2) == 6 ",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function rotates a given list to the right by m elements.\n    '''\n    n = len(lst)\n    m = m % n # To handle cases where m > n\n    \n    # Slicing the list and merging it back to get the desired output\n    return lst[-m:] + lst[:-m]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 1611,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_none((1, 2, None, 4, 5)) is True ",
        "num_ids": 1000,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def divisible_by_all_digits(num):\n        return all(num % d == 0 for d in range(1, 10))\n    return list(filter(divisible_by_all_digits, range(startnum, endnum + 1)))\n",
        "test": "assert divisible_by_digits(10, 20) == []",
        "num_ids": 3467,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2) * (a / 360) * math.pi\n        return area\n",
        "test": "assert sector_area(3, 180) == math.pi * (3 ** 2) / 2",
        "num_ids": 1534,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a 3D table to store lengths of longest common suffixes of subsequence\n    L = [[[0 for j in range(o+1)] for i in range(n+1)] for k in range(m+1)]\n\n    # Fill the table in bottom up manner by considering the three strings\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Find the length of the longest common subsequence using the table\n    index = L[m][n][o]\n\n    # Create a string to store the longest common subsequence\n    lcs = [\"\"] * (index+1)\n\n    # Fill the string in bottom up manner by considering the three strings and the table\n    i = m\n    j = n\n    k = o\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs[index] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return \"\".join(lcs[1:])\n",
        "test": "assert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"ACDFHR\") == \"ADH\"",
        "num_ids": 5036,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'[A-Z][a-z]*', str1)\n    result = ''\n    for word in words:\n        result += word + ' '\n    return result[:-1]\n",
        "test": "assert capital_words_spaces(\"HelloWorld\") == \"Hello World\"",
        "num_ids": 1709,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)\n",
        "test": "assert sort_numeric_strings([\"1\", \"5\", \"2\", \"10\", \"4\"]) == [\"1\", \"2\", \"4\", \"5\", \"10\"]  # Passes test case",
        "num_ids": 1517,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1,2),(3,4)],(5,6)) == [(1,2),(3,4),(5,6)]",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i < n:\n        left_child = 2*i + 1\n        right_child = 2*i + 2\n        if left_child < n and arr[left_child] < arr[i]:\n            return False\n        if right_child < n and arr[right_child] < arr[i]:\n            return False\n        return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, 0)\n",
        "test": "assert check_min_heap_helper([4, 10, 3, 5, 1], 1) == False # False case",
        "num_ids": 2487,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def jacobsthal_num(n):\n    # base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # initialize variables\n        jacobsthal = [0, 1]\n        i = 2\n        \n        # calculate the jacobsthal numbers using the formula\n        while i <= n:\n            jacobsthal.append(jacobsthal[-1] + jacobsthal[-2])\n            i += 1\n        \n        # return the nth jacobsthal number\n        return jacobsthal[n]\n",
        "test": "assert jacobsthal_num(0) == 0, \"Incorrect Jacobsthal number for 0.\"",
        "num_ids": 1588,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[0])\n    return test_list[:K]\n",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 3) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 2058,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # find the length of the shortest list\n    n = min(len(l1), len(l2), len(l3))\n    # initialize an empty list to store common elements\n    common_elements = []\n    # iterate over the shortest list\n    for i in range(n):\n        # check if the current element of all three lists is the same\n        if l1[i] == l2[i] == l3[i]:\n            # if they are, append the element to the common_elements list\n            common_elements.append(l1[i])\n    # return the list of common elements\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [3, 4, 5], [5, 6, 7]) == []  # expected output: []",
        "num_ids": 2227,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for n in numbers:\n        if n < smallest:\n            second_smallest = smallest\n            smallest = n\n        elif smallest < n < second_smallest:\n            second_smallest = n\n    return second_smallest",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2 ",
        "num_ids": 1281,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"ab\")",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] > test_list[j]:\n                count += 1\n                \n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0, \"Empty list\"",
        "num_ids": 1588,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each sublist in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple to make it hashable\n        t = tuple(sublist)\n        # If the tuple has already been seen, increment its count by 1\n        if t in counts:\n            counts[t] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            counts[t] = 1\n\n    return counts\n",
        "test": "assert unique_sublists([[1, 2], [1, 2], [2, 3], [2, 3], [1, 2, 3]]) == {(1, 2): 2, (2, 3): 2, (1, 2, 3): 1} ",
        "num_ids": 2412,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # check if the input is a string\n    if not isinstance(num, str):\n        return False\n    # check if the string represents a decimal number with a precision of 2\n    try:\n        float_num = float(num)\n        return len(num.split('.')[1]) <= 2\n    except (ValueError, IndexError):\n        return False\n",
        "test": "assert is_decimal(\"12.34\") == True, \"Error: is_decimal('12.34') should return True\"",
        "num_ids": 1137,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_list = []\n    for num in arr:\n        if num not in unique_list:\n            unique_list.append(num)\n    if len(unique_list) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1,1,1,1,1]) == True",
        "num_ids": 1469,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(1) == False, \"Check monthnumber 1\"",
        "num_ids": 1445,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = abs(arr[0] - arr[1])\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([3, 5, 2, 7], 4) == 1",
        "num_ids": 2102,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr('') == 0",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    p = 1\n    i = 1\n    while p < n:\n        p += math.factorial(i)\n        i += 1\n    return p\n",
        "test": "assert is_polite(1) == 1",
        "num_ids": 1555,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result\n",
        "test": "assert pair_wise([1,2,3,4]) == [(1,2), (2,3), (3,4)]",
        "num_ids": 1258,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 5) == 2  # expected output: 2",
        "num_ids": 1859,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Get the set difference between the two lists\n    diff_set = set(li1) - set(li2)\n    # Convert the set to a list and sort it\n    diff_list = sorted(list(diff_set))\n    return diff_list\n",
        "test": "assert Diff([1,2,3], [1,2,3]) == []",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    num = 1\n    for i in range(n):\n        sum += num**4\n        num += 2\n    return sum\n",
        "test": "assert odd_num_sum(0) == 0",
        "num_ids": 1119,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack or not is_matching_pair(stack[-1], char):\n                return False\n            stack.pop()\n    return len(stack) == 0\n\ndef is_matching_pair(open_bracket, close_bracket):\n    if open_bracket == '(' and close_bracket == ')':\n        return True\n    if open_bracket == '{' and close_bracket == '}':\n        return True\n    if open_bracket == '[' and close_bracket == ']':\n        return True\n    return False\n",
        "test": "assert check_expression(\"[(])\") == False, \"Test case 1 failed\"",
        "num_ids": 2066,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n\n    return ' '.join(result)",
        "test": "assert remove_length('remove_length is a function to remove all the words with k length in the given string', 5) == 'Python' ",
        "num_ids": 1350,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result if result else None\n",
        "test": "assert occurance_substring(\"hello world\", \"worlds\") == None # should return None",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 3, 2, 4]) == False",
        "num_ids": 1235,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i-1].lower() in vowels or test_str[i+1].lower() in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels('') == 0",
        "num_ids": 1558,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15  # expected output: 15 (1 + 2 + 3 + 4 + 5)",
        "num_ids": 1995,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "test": "assert pack_consecutive_duplicates([1,1,1,1,1]) == [[1,1,1,1,1]] ",
        "num_ids": 2298,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for sublist in list1:\n        # Convert the sublist to a tuple and use it as a key in the dictionary.\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in count:\n            count[sublist_tuple] += 1\n        else:\n            count[sublist_tuple] = 1\n    return count\n",
        "test": "assert unique_sublists([]) == {} ",
        "num_ids": 2437,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n\n    # Initialize the result list\n    result = []\n\n    # Iterate through the tuples in the list\n    for tup in test_list:\n\n        # Find all combinations of the tuple elements\n        comb = combinations(tup, 2)\n\n        # Iterate through the combinations\n        for c in comb:\n\n            # Calculate the sum of the combination\n            sum_c = sum(c)\n\n            # Check if the sum is in the tuple\n            if sum_c in tup:\n\n                # Add the combination to the result list\n                result.append(c)\n\n    return result\n",
        "test": "assert find_combinations([(1, 2, 3), (4, 5), (6, 7, 8)]) == [(1, 2, 3, 4, 5, 6, 7, 8)]",
        "num_ids": 3856,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            divisors.append(i)\n            if i != n//i:\n                divisors.append(n//i)\n    return len(divisors)%2 == 0\n",
        "test": "assert count_divisors(2) == 1 # 2 has 1 divisor",
        "num_ids": 1636,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            k = j - i + 1\n            if k % 2 != 0:\n                sum += sum(arr[i:j+1])\n    return sum\n",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 1546,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc)/maxc\n    rc = (maxc-r)/(maxc-minc)\n    gc = (maxc-g)/(maxc-minc)\n    bc = (maxc-b)/(maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0)*360.0\n    if h < 0:\n        h += 360\n    return h, s, v\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0) # Black",
        "num_ids": 3909,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Initialize even and odd numbers\n    even_num = 1\n    odd_num = 1\n    \n    # Iterate through the list\n    for num in list1:\n        # If number is even, multiply it with the even number\n        if num % 2 == 0:\n            even_num *= num\n        # If number is odd, multiply it with the odd number\n        else:\n            odd_num *= num\n    \n    # Return the product of even and odd number\n    return even_num * odd_num\n",
        "test": "assert mul_even_odd([2, 4, 6, 8]) == 384, \"Test case 2 failed\" # first even number is 2 and first odd number is 4 so the output should be 2*4 = 8 ",
        "num_ids": 2217,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the parentheses and split the string into a list of strings\n    test_list = test_str.strip('()').split(',')\n    # Convert the list of strings to a list of integers\n    test_int_list = [int(i.strip()) for i in test_list]\n    # Convert the list of integers to a tuple\n    test_int_tuple = tuple(test_int_list)\n    return test_int_tuple\n",
        "test": "assert tuple_str_int('(1, 2, 3)') == (1, 2, 3)",
        "num_ids": 1765,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    i = bisect.bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        i = bisect.bisect_right(a, x)\n    return i\n",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 6) == 5",
        "num_ids": 1386,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three('abbbbbbbb') is not None",
        "num_ids": 1196,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_list + [test_str]\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "test": "assert new_tuple([], \"world\") == (\"world\",)",
        "num_ids": 1300,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([1, 3, 5, 7]) == False",
        "num_ids": 1189,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        result = []\n        for item in test_tup:\n            if not isinstance(item, tuple):\n                result.append(item)\n        return tuple(result)\n    else:\n        return test_tup\n",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 1693,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6]]) == 2",
        "num_ids": 1119,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            index = i\n    return index\n",
        "test": "assert last([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 8",
        "num_ids": 2264,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb('acb') == True",
        "num_ids": 1193,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    result = 0\n    for i in range(n+1):\n        if i % 2 != 0:\n            result += i\n    return result\n",
        "test": "assert sum_odd(10) == 25, \"Incorrect output for sum_odd(10)\"",
        "num_ids": 1265,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number.\n    '''\n    # Get the left bits\n    left_bits = n << d\n\n    # Get the right bits\n    right_bits = n >> (32 - d)\n\n    # Combine the left and right bits\n    result = left_bits | right_bits\n\n    return result\n",
        "test": "assert left_rotate(12345, 0) == 12345 ",
        "num_ids": 2123,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Using regex to remove all whitespaces\n    text = re.sub('\\s+', '', text)\n    return text\n",
        "test": "assert remove_all_spaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    while arr[n-1] <= arr[0]:\n        count += 1\n        arr = arr[1:] + arr[:1]\n    return count\n",
        "test": "assert count_rotation([5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 0 # sorted array",
        "num_ids": 2562,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False",
        "test": "assert is_perfect_square(9) == True",
        "num_ids": 1404,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([1, 2]) == True",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf') # initialize max_sum to negative infinity\n    result = None # initialize result to None\n    for lst in lists: # iterate over each list in the input list of lists\n        lst_sum = sum(lst) # compute the sum of elements in the current list\n        if lst_sum > max_sum: # if the current sum is greater than the current max_sum\n            max_sum = lst_sum # update max_sum\n            result = lst # update result\n    return result # return the result list\n",
        "test": "assert max_sum_list([[1,2,3], [4,5], [6,7,8,9]]) == [6,7,8,9] ",
        "num_ids": 1783,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for i in test_str:\n        if i.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n",
        "test": "assert max_run_uppercase('') == 0, \"Empty string case\"",
        "num_ids": 1584,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_odd(nums):\n    '''\n    Returns the first odd number in the given list of numbers.\n    If no odd number is found, returns None.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1184,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n",
        "test": "assert check_K((1, 2, 3, 4), 3) == True",
        "num_ids": 1160,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n        \n    return True\n",
        "test": "assert check_smaller((6,5,4), (4,5,6)) is False",
        "num_ids": 1763,
        "indeed": true
    }
]