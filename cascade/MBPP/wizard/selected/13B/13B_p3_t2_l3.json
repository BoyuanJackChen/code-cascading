[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n",
        "test": "assert similar_elements([1, 2, 3, 4, 5], [2, 3, 4, 6, 7]) == [2, 3, 4]",
        "num_ids": 509
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False\n",
        "test": "assert is_not_prime(0) == True",
        "num_ids": 393
    },
    {
        "number": 4,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [hq.heappop(heap) for _ in range(len(heap))]\n",
        "test": "assert heap_queue_largest([3, 2, 1, 5, 6, 4], 1) == [6]",
        "num_ids": 698
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Check whether a number is a power of two or not.\n\n    :param x: the number to check\n    :return: True if x is a power of two, False otherwise\n    '''\n\n    # If the number is 0 or negative, it's not a power of two\n    if x <= 0:\n        return False\n\n    # Check if the number can be divided by 2 without a remainder\n    while x % 2 == 0:\n        x = x // 2\n\n    # If the number is 1, it's a power of two\n    if x == 1:\n        return True\n\n    # If the number is greater than 1, it's not a power of two\n    return False\n",
        "test": "assert is_Power_Of_Two(2) == True, \"2 is a power of 2\"",
        "num_ids": 465
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    # Create a regular expression pattern to find words with 4 or more characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Use re.findall() to find all matches in the input text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches\n",
        "test": "assert find_char_long(\"The quick brown fox jumps over the dog\") == []",
        "num_ids": 442
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result",
        "test": "assert square_nums([1,2,3]) == [1,4,9]",
        "num_ids": 395
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Rotations(s):\n    n = len(s)\n    temp = s + s\n    for i in range(n):\n        if temp.startswith(s, i):\n            return i\n    return -1\n",
        "test": "assert find_Rotations(\"hello world\") == 0, \"hello world should not have any rotation\"",
        "num_ids": 416
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # find the index of first occurrence of ch in the string\n    first_occurrence = s.find(ch)\n    \n    # find the index of last occurrence of ch in the string\n    last_occurrence = s.rfind(ch)\n    \n    # if ch is present only once in the string\n    if first_occurrence == last_occurrence:\n        # remove the first occurrence of ch\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n        \n    # if ch is present more than once in the string\n    else:\n        # remove the first occurrence of ch\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n        \n        # remove the last occurrence of ch\n        s = s[:last_occurrence] + s[last_occurrence+1:]\n        \n    return s\n",
        "test": "assert remove_Occ(\"python is fun\", \"n\") == \"pytho is fun\", \"Incorrect output for remove_Occ('python is fun', 'n')\"",
        "num_ids": 733
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    # Get the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Create a list of tuples (row_index, row_sum)\n    indexed_rows = list(enumerate(row_sums))\n    \n    # Sort the list of tuples by row_sum\n    indexed_rows.sort(key=lambda x: x[1])\n    \n    # Extract the sorted rows from the original matrix\n    sorted_rows = [M[index] for index, _ in indexed_rows]\n    \n    # Return the sorted matrix\n    return sorted_rows",
        "test": "assert sort_matrix([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]",
        "num_ids": 639
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(0, 0, 0) == 0",
        "num_ids": 296
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"this_is_a_test\") == True",
        "num_ids": 361
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 222
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Removes the characters present in the second string from the first string.\n    \"\"\"\n    result = \"\"\n    for char in string1:\n        if char not in string2:\n            result += char\n    return result",
        "test": "assert str_to_list('hello', 'lo') == ['he']",
        "num_ids": 620
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 339
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    woodall_sum = 0\n    while x > 0:\n        woodall_sum += x % 10\n        x //= 10\n    return woodall_sum == 13\n",
        "test": "assert is_woodall(4) == False",
        "num_ids": 418
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    str_num = str(num)\n    rev_num = int(str_num[::-1])\n    twice_rev = rev_num * 2\n    if num == twice_rev - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(12345) == False, \"Expected False but got True\"",
        "num_ids": 379
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a Python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    res = \"\"\n    for i in arr:\n        res += str(i)\n    return int(res)\n",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 54321, \"Incorrect output for find_Max_Num([1, 2, 3, 4, 5])\"",
        "num_ids": 530
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x * y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(5,-7) == True",
        "num_ids": 289
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_num = n * (2*n - 1)\n    return oct_num\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 449
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sum_dict = defaultdict(int)\n    count = 0\n    n = len(s)\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += int(s[j])\n            count += sum_dict[current_sum]\n            sum_dict[current_sum] += 1\n    return count\n",
        "test": "assert count_Substrings('123') == 1",
        "num_ids": 628
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 333
    },
    {
        "number": 63,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 521
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sort a list of tuples using the second value of each tuple.\n    '''\n    # Use the `sorted` function with the `key` parameter to specify that we want to sort by the second element of each tuple\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(\"English\", 80), (\"Maths\", 75), (\"Science\", 90)]) == [(\"Maths\", 75), (\"English\", 80), (\"Science\", 90)]",
        "num_ids": 517
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 434
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, -2, 3, -4, 5]) == 3 # output: 3 ",
        "num_ids": 338
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize a list to store Bell numbers\n    bell = [1, 1]\n    # Calculate Bell numbers up to n\n    for i in range(2, n+1):\n        bell.append(sum(bell[:i]))\n    # Initialize a list to store the partition numbers\n    partition = [1]\n    # Calculate partition numbers up to n\n    for i in range(1, n+1):\n        partition.append(sum(partition[:i])*bell[i])\n    # Return the partition number of n\n    return partition[n]\n",
        "test": "assert bell_number(1) == 1, \"Bell number for 1 should be 1\"",
        "num_ids": 415
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    inc = A[1] > A[0]\n    for i in range(2, len(A)):\n        if A[i] > A[i-1]:\n            if not inc:\n                return False\n        elif A[i] < A[i-1]:\n            if inc:\n                return False\n        else:\n            continue\n    return True\n",
        "test": "assert is_Monotonic([1,1,1,1,1]) == True # monotonic increasing array",
        "num_ids": 649
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function checks if the given list l contains the given sublist s.\n    \n    :param l: The list to search in\n    :param s: The sublist to search for\n    :return: True if s is a sublist of l, False otherwise\n    \"\"\"\n    \n    # Convert s to a set for faster membership testing\n    s = set(s)\n    \n    # Loop through all possible starting indices of s in l\n    for i in range(len(l) - len(s) + 1):\n        # Check if the sublist starting at index i matches s\n        if set(l[i:i+len(s)]) == s:\n            return True\n    \n    # If no sublist matches s, return False\n    return False\n",
        "test": "assert is_sublist([1, 2, 3], [3, 4]) == False",
        "num_ids": 514
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i]) != length:\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1,2,3),(4,5,6)]) == True",
        "num_ids": 396
    },
    {
        "number": 71,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted_arr = False\n\n    while not sorted_arr:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted_arr = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted_arr = False\n            i += 1\n\n    return nums\n",
        "test": "assert comb_sort([3, 1, 4, 1, 5, 9, 2, 6, 5]) == [1, 1, 2, 3, 4, 5, 5, 6, 9] ",
        "num_ids": 607
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    j = 0\n    while i*i < n:\n        i += 1\n        if i*i == n:\n            return True\n    i -= 1\n    while j*j < n:\n        j += 1\n        if j*j == n:\n            return True\n        if j*j - i*i == n:\n            return True\n    return False\n",
        "test": "assert dif_Square(2) == False, \"dif_Square(2) should return False\"",
        "num_ids": 475
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n\n    for i in range(len(patterns)):\n        if patterns[i] == 1 and colors[i] != colors[i-1] or \\\n           patterns[i] == 2 and colors[i] != colors[i+1]:\n            return False\n\n    return True\n",
        "test": "assert is_samepatterns(['yellow', 'green', 'red'], ['yellow', 'green', 'red']) == True",
        "num_ids": 512
    },
    {
        "number": 75,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6)], 1) == [(1, 2, 3), (4, 5, 6)]",
        "num_ids": 562
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(11) == True",
        "num_ids": 220
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def word_len(s):\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"\n",
        "test": "assert word_len(\"world\") == False  # should return False",
        "num_ids": 309
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n * n + 1)) // 2\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 299
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi",
        "num_ids": 255
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    # Convert the string to lowercase\n    strr = strr.lower()\n    # Calculate the sum of the ASCII values of all the characters of the string\n    ascii_sum = sum([ord(char) for char in strr])\n    # Calculate the result of the sum modulo 26\n    result = ascii_sum % 26\n    # Convert the result to ASCII character\n    char = chr(result + ord('a'))\n    return char\n",
        "test": "assert get_Char(\"abc\") == \"m\"",
        "num_ids": 365
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sequence(n):\n    if n == 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1]\n        for i in range(2, n+1):\n            seq.append(seq[seq[-1]] + seq[i-seq[-1]-1])\n        return seq[n-1]\n",
        "test": "assert sequence(1) == 1 # should return 1",
        "num_ids": 521
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi ",
        "num_ids": 288
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Returns the nth centered hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)",
        "test": "assert centered_hexagonal_number(1) == 1 ",
        "num_ids": 240
    },
    {
        "number": 87,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({'a':1, 'b':2}, {'c':3, 'd':4}, {'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6} ",
        "num_ids": 818
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list,\n    returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency counts\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for item in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict\n",
        "test": "assert freq_count([1,2,2,3,3,3,4,4,4,4]) == {1:1, 2:2, 3:3, 4:4}",
        "num_ids": 650
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n    \"\"\"\n    i = n - 1\n    while i >= 0:\n        if i % 2 == 0:\n            return i\n        i -= 1\n",
        "test": "assert closest_num(5) == 4",
        "num_ids": 269
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    \"\"\"\n    This function takes a list of words as input and returns the length of the longest word.\n\n    :param list1: List of words\n    :return: Length of the longest word\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len",
        "test": "assert len_log(['hello', 'world']) == 5",
        "num_ids": 406
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \"worlds\") == False",
        "num_ids": 306
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    '''\n    Check if the given number is undulating or not.\n    A number is called undulating if the number of digits in its square is equal to the original number.\n\n    :param n: The number to check\n    :return: True if the number is undulating, False otherwise\n    '''\n\n    # Convert the number to a string and get the length of the string\n    n_str = str(n)\n    n_len = len(n_str)\n\n    # Calculate the square of the number\n    square = n * n\n\n    # Convert the square to a string and get the length of the string\n    square_str = str(square)\n    square_len = len(square_str)\n\n    # Check if the number of digits in the square is equal to the original number\n    if square_len == n_len:\n        return True\n    else:\n        return False ",
        "test": "assert is_undulating(1) == True",
        "num_ids": 681
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2, 3) == 8, \"Error in power function\"",
        "num_ids": 268
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_second_value = float('inf')\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_second_value:\n            min_index = i\n            min_second_value = test_list[i][1]\n    return test_list[min_index][0]",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 6)]) == 1",
        "num_ids": 613
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3], [4,5], [6,7,8,9]]) == 2, \"Test case failed\"",
        "num_ids": 472
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a Python function to find the number of divisors of a given integer.\n    '''\n    divisors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors += 1\n    return divisors\n",
        "test": "assert divisor(1) == 1  # 1 has 1 divisor (1)",
        "num_ids": 380
    },
    {
        "number": 97,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "test": "assert frequency_lists([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3} ",
        "num_ids": 810
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n",
        "test": "assert multiply_num([1, 2, 3]) == 2 # expected output: 2.0",
        "num_ids": 379
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    '''\n    Convert a decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 352
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input number is already a palindrome\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return int(num_str) + 1\n\n    # If the number is not a palindrome, find the next smallest palindrome\n    next_num = num + 1\n    while True:\n        next_num_str = str(next_num)\n        if next_num_str == next_num_str[::-1]:\n            return next_num\n        next_num += 1",
        "test": "assert next_smallest_palindrome(5) == 6",
        "num_ids": 1150
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k must be between 1 and the length of the array\")\n    return sorted(arr)[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 380
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 434
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef eulerian_num(n, m):\n    return math.factorial(n + m) // (math.factorial(n) * math.factorial(m))\n",
        "test": "assert eulerian_num(0,0) == 1",
        "num_ids": 367
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_sublists(input_list):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    \n    # Iterate over each sublist in the input list\n    for i in range(len(input_list)):\n        # Sort the sublist using the built-in sorted() function\n        input_list[i] = sorted(input_list[i])\n    \n    # Return the sorted list\n    return input_list\n",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'bird']]) == [['apple', 'banana', 'cherry'], ['bird', 'cat', 'dog']]",
        "num_ids": 479
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True]) == 2, \"Failed to count True values in the list\"",
        "num_ids": 292
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for i in test_tup:\n        new_list.append(i + test_list)\n    return tuple(new_list)\n",
        "test": "assert add_lists([1], (2,)) == (1, 2) # test case 2",
        "num_ids": 533
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into one list\n    all_lists = num1 + num2 + num3\n\n    # Use heapq to merge all the lists into one sorted list\n    merged_list = []\n    heapq.heapify(all_lists)\n    while all_lists:\n        merged_list.append(heapq.heappop(all_lists))\n\n    return merged_list\n",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 835
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a string s and an integer n as input.\n    It returns the number of numbers with an odd value when rotating the binary string s n times.\n    \"\"\"\n    # Convert string s to a binary number\n    binary_number = int(s, 2)\n    \n    # Initialize a variable to keep track of the number of odd values\n    odd_count = 0\n    \n    # Rotate the binary number n times and check if the value is odd\n    for i in range(n):\n        if binary_number % 2 == 1:\n            odd_count += 1\n        binary_number = (binary_number * 2) % 10\n    \n    return odd_count\n",
        "test": "assert odd_Equivalent('0010101010', 2) == 0 # there are no numbers with an odd value when rotating '0010101010' 2 times",
        "num_ids": 651
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        common_elements.update(set(sublist))\n    return list(common_elements)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 534
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"5\") == True, \"Error in check_integer function: '5' should return True\"",
        "num_ids": 251
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}]) == True",
        "num_ids": 278
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result += nums[i] * (10**(len(nums)-i-1))\n    return result\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 343
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Create an empty list to store the converted values\n    converted_list = []\n\n    # Iterate through each sublist in the input list\n    for sublist in test_list:\n        # Create an empty sublist to store the converted values\n        converted_sublist = []\n\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # Try to convert the element to a float\n            try:\n                float_element = float(element)\n                # If the conversion was successful, add the float value to the converted sublist\n                converted_sublist.append(float_element)\n            except ValueError:\n                # If the conversion failed, add the original value to the converted sublist\n                converted_sublist.append(element)\n\n        # Add the converted sublist to the converted list\n        converted_list.append(converted_sublist)\n\n    return converted_list",
        "test": "assert list_to_float([['1.2', '3.4', '5.6', 7], [8, 9, '10.11', '12.13']]) == [[1.2, 3.4, 5.6, 7.0], [8.0, 9.0, 10.11, 12.13]] ",
        "num_ids": 867
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 251
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def search(arr):\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i-1]:\n            return arr[i]\n",
        "test": "assert search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == None",
        "num_ids": 480
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1] - list1[i][1]*list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(2, 3), (-1, 4), (-6, 5)]) == 24",
        "num_ids": 485
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Returns True if num is an amicable number, else False.\n    \"\"\"\n    div_sum = sum(divisors(num))\n    amicable_sum = sum(divisors(div_sum))\n    return amicable_sum == num and num != 1\n\ndef divisors(num):\n    \"\"\"\n    Returns a list of all divisors of a given number.\n    \"\"\"\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(2, limit + 1):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum\n",
        "test": "assert amicable_numbers_sum(1000) == 502847",
        "num_ids": 699
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    return cmath.phase(complex_num)",
        "test": "assert angle_complex(0,0) == 0",
        "num_ids": 359
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_length(string):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "test": "assert find_length('00010110') == 3",
        "num_ids": 544
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers\n\n    :param a: First number\n    :param b: Second number\n    :return: Sum of common divisors\n    \"\"\"\n    divisors_a = set()\n    divisors_b = set()\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors_a.add(i)\n    for i in range(1, b + 1):\n        if b % i == 0:\n            divisors_b.add(i)\n    return sum(divisors_a.intersection(divisors_b))\n",
        "test": "assert sum(6,8) == 14",
        "num_ids": 500
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 190
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(4, \"hello world python is awesome\") == [\"hello\", \"world\", \"python\", \"awesome\"]",
        "num_ids": 428
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def magic_square_test(my_matrix):\n    # calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n    # calculate the sum of the first column\n    col_sum = sum(my_matrix[j][0] for j in range(len(my_matrix)))\n    # check that all rows have the same sum\n    for i in range(1, len(my_matrix)):\n        if sum(my_matrix[i]) != row_sum:\n            return False\n        if sum(my_matrix[j][i] for j in range(len(my_matrix))) != col_sum:\n            return False\n    # check that all diagonals have the same sum\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != row_sum:\n        return False\n    if sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix))) != row_sum:\n        return False\n    # if all checks passed, the matrix is a magic square\n    return True\n",
        "test": "assert magic_square_test([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]) ",
        "num_ids": 967
    },
    {
        "number": 130,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for item in nums:\n        counts[item] += 1\n        if counts[item] > max_count:\n            max_count = counts[item]\n            max_item = item\n            \n    return max_item\n",
        "test": "assert max_occurrences([1,2,3,3,2,1,2,3,4,5]) == 2 ",
        "num_ids": 517
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    vowel_index = []\n    for i in range(len(str1)):\n        if str1_list[i] in vowels:\n            vowel_index.append(i)\n\n    for i in range(len(vowel_index)//2):\n        str1_list[vowel_index[i]], str1_list[vowel_index[-i-1]] = str1_list[vowel_index[-i-1]], str1_list[vowel_index[i]]\n\n    return ''.join(str1_list)",
        "test": "assert reverse_vowels('python') == 'python'",
        "num_ids": 617
    },
    {
        "number": 132,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)\n",
        "test": "assert tup_string((1,)) == \"1\"",
        "num_ids": 292
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 433
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 228
    },
    {
        "number": 137,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeros += 1\n    ratio = zeroes / non_zeros\n    return ratio",
        "test": "assert zero_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 0.1111111111111111111111111111111111111111",
        "num_ids": 689
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0 or n < 1:\n            return False\n        n = n // 2\n    return True",
        "test": "assert is_Sum_Of_Powers_Of_Two(15) == False",
        "num_ids": 480
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 354
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if type(item) == list:\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result\n",
        "test": "assert extract_singly([[1,2,3],[4,5,6]]) == {1, 2, 3, 4, 5, 6}",
        "num_ids": 532
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    \n    while n > 1:\n        max_idx = nums.index(max(nums[:n])) # find the maximum element in the unsorted part of the list\n        nums = pancake_reverse(nums, max_idx) # flip the maximum element to the beginning of the list\n        nums = pancake_reverse(nums, n-1) # flip the entire list to put the maximum element in its correct position\n        n -= 1\n    \n    return nums\n\ndef pancake_reverse(nums, k):\n    \"\"\"\n    Reverse the first k elements of the list in place\n    \"\"\"\n    nums[:k+1] = reversed(nums[:k+1])\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 751
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count",
        "test": "assert count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3, \"Should return 3\"",
        "num_ids": 486
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1,2,3, (4,5,6), (7,8,9))) == 2",
        "num_ids": 314
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[-1] - arr[0]\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 561
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if b == 0:\n        if a == 0:\n            if n == 0:\n                return (0, 0)\n            else:\n                return None\n        else:\n            return None\n    else:\n        x = n // b\n        y = (n - a * x) // b\n        if a * x + b * y == n:\n            return (x, y)\n        else:\n            return None\n",
        "test": "assert find_solution(2, 3, 5) == (1, 1)",
        "num_ids": 706
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]\n",
        "test": "assert remove_elements([1,2,3],[2]) == [1,3]",
        "num_ids": 360
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 396
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    angle = (s-2)*pi/s\n    area = 0.5*l**2/tan(angle/2)\n    return area\n",
        "test": "assert area_polygon(4, 4) == 8.0, \"Should be 8.0\"",
        "num_ids": 558
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(n):\n        sum = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                sum += i\n                if i != n // i and i != 1:\n                    sum += n // i\n        return sum\n    \n    for i in range(2, n):\n        if sum_divisors(i) == sum_divisors(n-i):\n            return True\n    \n    return False\n",
        "test": "assert div_sum(12) == True",
        "num_ids": 636
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Create a dictionary to store the count of each character at each position\n    counts = {}\n    \n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # Get the character at position i\n        char = str1[i]\n        # Check if it's in the dictionary\n        if char in counts:\n            # If it is, increment its count\n            counts[char] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            counts[char] = 1\n    \n    # Return the total count of characters that occur at the same position in the string as in the English alphabet\n    total_count = sum(counts.values())\n    return total_count\n",
        "test": "assert count_char_position(\"aA123\") == 0 ",
        "num_ids": 561
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4, 5]) == 2",
        "num_ids": 374
    },
    {
        "number": 167,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        power = 1\n        while power < n:\n            power *= 2\n        return power",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 367
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1, 2, 3, 4, 5], 3) == 1",
        "num_ids": 350
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 2, 4) == 12",
        "num_ids": 522
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "",
        "test": "assert perimeter_pentagon(6) == 6*(3 + math.sqrt(5)) # Test case 2",
        "num_ids": 193
    },
    {
        "number": 172,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] == 'std':\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert count_occurance('std') == 1",
        "num_ids": 370
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Check if tuple is empty\n    if len(test_tuple) == 0:\n        return True\n    \n    # Get the data type of the first element in the tuple\n    first_type = type(test_tuple[0])\n    \n    # Check if all the elements have the same data type as the first element\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    \n    # If all elements have the same data type, return True\n    return True\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 459
    },
    {
        "number": 223,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 2) == False ",
        "num_ids": 699
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 283
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n",
        "test": "assert odd_values_string('') == ''",
        "num_ids": 305
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    min_num = a\n    \n    if b < min_num:\n        min_num = b\n    \n    if c < min_num:\n        min_num = c\n    \n    return min_num\n",
        "test": "assert min_of_three(1, 2, 3) == 1 ",
        "num_ids": 324
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # check if l and r are valid indices\n    if l < 0 or l > r or r >= len(bin(n)):\n        return False\n\n    # check if all the bits in the given range are set to 1\n    return bin(n)[2:r+1].count('1') == r - l + 1\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(16, 2, 3) == False",
        "num_ids": 656
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    # Create two empty arrays, one for negative elements and one for positive elements\n    neg_arr = []\n    pos_arr = []\n\n    # Loop through the first n elements of the given array and separate negative and positive elements into their respective arrays\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n\n    # Concatenate the two arrays to get the final re-arranged array\n    final_arr = neg_arr + pos_arr\n\n    # Return the final array\n    return final_arr\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 977
    },
    {
        "number": 230,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1, char):\n    '''\n    Replace blank spaces in the string with the character and return the string.\n    '''\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"Hello world\", \"-\") == \"Hello-world\"",
        "num_ids": 270
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([10, 20, 30, 40, 50], 2) == [50, 40] # Test the function with a larger list and n=2",
        "num_ids": 574
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n",
        "test": "assert lateralsuface_cylinder(10,1) == 2 * math.pi * 10 # Check for the correct output when given values 10 and 1 for r and h respectively.",
        "num_ids": 506
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 204
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n & -n)\n",
        "test": "assert even_bit_set_number(0) == 0",
        "num_ids": 1339
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # Create an empty dictionary to store the occurrences of each tuple\n    occurrences = {}\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in occurrences:\n            occurrences[tup] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            occurrences[tup] = 1\n    \n    # Return the dictionary of occurrences\n    return occurrences\n",
        "test": "assert check_occurences([(1, 2), (2, 3), (1, 2), (2, 3), (1, 2)]) == Counter({(1, 2): 3, (2, 3): 2})",
        "num_ids": 1049
    },
    {
        "number": 238,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j] != '':\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"abc\") == 6, \"Incorrect number of substrings\"",
        "num_ids": 336
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    dp = [1] * (n + 1)\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            dp[i] += dp[j]\n    return dp[n]\n",
        "test": "assert get_total_number_of_sequences(5,1) == 1",
        "num_ids": 618
    },
    {
        "number": 240,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return []\n    elif len(list2) > 1:\n        list1[-1:] = list2[:-1]\n        return list1 + list2[-1:]\n    else:\n        list1[-1:] = list2\n        return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 4, 5, 6]",
        "num_ids": 514
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac('hello') == 5",
        "num_ids": 272
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Finds the next perfect square greater than a given number.\n    \"\"\"\n    # Find the square root of the given number\n    sqrt_N = math.sqrt(N)\n    \n    # Round up to the nearest integer\n    sqrt_N_ceil = math.ceil(sqrt_N)\n    \n    # Square the rounded-up integer to get the next perfect square\n    next_square = (sqrt_N_ceil+1) ** 2\n    \n    return next_square\n",
        "test": "assert next_Perfect_Square(1) == 4",
        "num_ids": 546
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Find the maximum sum of a bitonic subsequence for the given array.\n\n    :param arr: List of integers\n    :return: Maximum sum of a bitonic subsequence\n    \"\"\"\n\n    # Initialize variables for the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Check if the array is increasing\n    increasing = True\n\n    # Loop through the array and update the maximum sum and current sum\n    for i in range(len(arr)):\n        # If the array is decreasing, update the current sum and calculate the maximum sum\n        if increasing and arr[i] < arr[i-1]:\n            max_sum = max(max_sum, current_sum)\n            current_sum = 0\n            increasing = False\n        # Add the current element to the current sum\n        current_sum += arr[i]\n\n    # Calculate the maximum sum if the array is increasing only\n    if increasing:\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n",
        "test": "assert max_sum([1,2,3,4,5,4,3,2,1]) == 15, \"Incorrect max_sum for [1,2,3,4,5,4,3,2,1]\"",
        "num_ids": 1009
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Square root of negative number is undefined.\")\n    guess = number\n    while abs(guess*guess - number) > 0.000001:\n        guess = (guess + number/guess) / 2\n    return guess\n",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 526
    },
    {
        "number": 247,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(s):\n    n = len(s)\n    # Create a table to store lengths of longest palindromic subsequences of substrings\n    dp = [[0] * n for _ in range(n)]\n    # All substrings of length 1 are palindromes, so their lengths are 1\n    for i in range(n):\n        dp[i][i] = 1\n    # Fill the table in a bottom-up manner\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    # Return the length of the longest palindromic subsequence in the string\n    return dp[0][n-1]\n",
        "test": "assert lps(\"racecar\") == 7 # should return 7 for \"racecar\"",
        "num_ids": 857
    },
    {
        "number": 248,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1",
        "num_ids": 298
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert intersection_array([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 509
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5), 3) == 1 ",
        "num_ids": 285
    },
    {
        "number": 251,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([1,2,3], 0) == [0,1,0,2,0,3]",
        "num_ids": 418
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function converts complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        r = cmath.polar(num)[0]\n        theta = cmath.polar(num)[1]\n        print(f\"{num} in polar form is: r={r:.2f}, \u03b8={theta:.2f}\")\n",
        "test": "assert convert(-3+5j) == (8, -pi/2)",
        "num_ids": 381
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 'a', 'b']) == 3",
        "num_ids": 287
    },
    {
        "number": 255,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 769
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 726
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1, 2) == (2, 1)",
        "num_ids": 239
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 630
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def nth_prime(n):\n        \"\"\"\n        Find the nth prime number.\n        \"\"\"\n        primes = [2]\n        p = 3\n        while len(primes) < n:\n            for prime in primes:\n                if p % prime == 0:\n                    break\n            else:\n                primes.append(p)\n            p += 2\n        return primes[n-1]\n\n    def newman_shanks_williams(n, k=1):\n        \"\"\"\n        Compute the nth newman\u2013shanks\u2013williams prime number.\n        \"\"\"\n        if n == 1:\n            return 5\n        elif n == 2:\n            return 11\n        elif n == 3:\n            return 23\n        elif n == 4:\n            return 47\n\n        m = k * (k - 1)\n        p = nth_prime(n-4) + 1\n        while True:\n            if p % m == 1:\n                return p\n            p += 2\n\n    if n > 4:\n        k = 1\n        while True:\n            p = newman_shanks_williams(n, k)\n            if nth_prime(k*(k-1)) < p:\n                return p\n            k += 1\n    else:\n        return newman_shanks_williams(n)\n",
        "test": "assert newman_prime(1) == 5",
        "num_ids": 856
    },
    {
        "number": 261,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            result_tup += (0,)\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup\n",
        "test": "assert division_elements((2, 4, 8), (2, 2, 2)) == (1.0, 2.0, 4.0) ",
        "num_ids": 561
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_part1 = []\n    list1_part2 = []\n    for i in range(L):\n        list1_part1.append(list1[i])\n    for i in range(L, len(list1)):\n        list1_part2.append(list1[i])\n    return (list1_part1, list1_part2)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])",
        "num_ids": 655
    },
    {
        "number": 264,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Calculate a dog's age in dog's years.\n    '''\n    # Human years to dog years conversion\n    DOG_YEARS_FACTOR = 7\n    \n    # Calculate dog's age in dog's years\n    d_age = h_age * DOG_YEARS_FACTOR\n    \n    # Return dog's age in dog's years\n    return d_age\n",
        "test": "assert dog_age(1) == 7",
        "num_ids": 385
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    sublist = []\n    count = 0\n    for element in S:\n        sublist.append(element)\n        count += 1\n        if count == step:\n            result.append(sublist)\n            sublist = []\n            count = 0\n    if sublist:\n        result.append(sublist)\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 739
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 295
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count*count\n        count += 2\n    return sum\n",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 389
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    # initialize variables\n    current_num = 1\n    count = 0\n    # loop until the count reaches n\n    while count < n:\n        # get the next number in the sequence\n        next_num = current_num + 1\n        # check if the next number is a star number\n        if is_star_num(next_num):\n            # increment the count\n            count += 1\n            # update the current number to the next star number\n            current_num = next_num\n    # return the n'th star number\n    return current_num\n\ndef is_star_num(num):\n    '''\n    Check if a number is a star number.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # loop through each digit in the string\n    for i in range(len(num_str)):\n        # get the digit and the number of occurrences\n        digit = int(num_str[i])\n        count = num_str.count(str(digit))\n        # check if the digit appears more than once in the number\n        if count > 1:\n            return False\n    # if all digits appear only once, the number is a star number\n    return True\n",
        "test": "assert find_star_num(2) == \" **\"",
        "num_ids": 669
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97 #checks if the ascii value of 'a' is 97",
        "num_ids": 229
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Initialize the sum to zero\n    sum = 0\n    # Loop over the list indices\n    for i in range(0, len(arr), 2):\n        # If the number at the even index is even, add it to the sum\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    # Return the sum\n    return sum\n",
        "test": "assert sum_even_and_even_index([2, 4, 6, 8, 10]) == 18",
        "num_ids": 529
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate over the first n even numbers (i.e., the even numbers from 2 to 2n)\n    for i in range(2, 2*n+1, 2):\n        # Add i raised to the fifth power to the sum\n        sum += i**5\n    \n    # Return the sum\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 402
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n",
        "test": "assert rear_extract([(1,2),(3,4)]) == [2, 4]",
        "num_ids": 419
    },
    {
        "number": 273,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 626
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 335
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(0,5) == 0 ",
        "num_ids": 352
    },
    {
        "number": 277,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_filter(dict, n):\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3) == {'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 542
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == 0",
        "num_ids": 496
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    i = 1\n    while i <= n:\n        decagonal += i * (3 * i - 1) // 2\n        if i == n:\n            return decagonal\n        i += 1\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 283
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 552
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 410
    },
    {
        "number": 282,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]",
        "num_ids": 397
    },
    {
        "number": 283,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n):\n    \"\"\"\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \n    Args:\n    n (int): The integer to be validated.\n    \n    Returns:\n    bool: True if the validation passes, False otherwise.\n    \"\"\"\n    # Convert the integer to a string and count the occurrences of each digit\n    counts = {}\n    for digit in str(n):\n        if digit in counts:\n            counts[digit] += 1\n        else:\n            counts[digit] = 1\n    \n    # Check if the count of each digit is less than or equal to the digit itself\n    for digit, count in counts.items():\n        if int(digit) < count:\n            return False\n    return True",
        "test": "assert validate(12345) == True",
        "num_ids": 566
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in lst:\n        if i != element:\n            return False\n    return True\n",
        "test": "assert check_element([1, 1, 1, 1, 1], 1) == True",
        "num_ids": 327
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three(\"abb\") == True",
        "num_ids": 367
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # create a new array by repeating the given array k times\n    new_array = a * k\n    \n    # find the maximum sum subarray in the new array\n    max_sum = 0\n    max_sum_so_far = 0\n    for i in range(n):\n        max_sum_so_far += new_array[i]\n        if max_sum_so_far < 0:\n            max_sum_so_far = 0\n        if max_sum_so_far > max_sum:\n            max_sum = max_sum_so_far\n    \n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 8, 2) == 7, \"Test Case 2 Failed\"",
        "num_ids": 934
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 242
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    max_length = 0\n    \n    for l in list1:\n        if len(l) > max_length:\n            max_list = [l]\n            max_length = len(l)\n        elif len(l) == max_length:\n            max_list.append(l)\n    \n    return max_list\n",
        "test": "assert max_length([[1, 2], [3, 4, 5], [6], [7, 8, 9, 10]]) == [7, 8, 9, 10] ",
        "num_ids": 602
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k\n    elif n == 2:\n        return k*k\n    else:\n        dp = [0]*k\n        for i in range(k):\n            dp[i] = 1\n        dp[0] = k\n        dp[1] = k*k\n        for i in range(2, n):\n            new_dp = [0]*k\n            for j in range(k):\n                for m in range(k):\n                    if m != j:\n                        new_dp[j] += dp[m]\n            dp = new_dp\n        return sum(dp)\n",
        "test": "assert count_no_of_ways(3, 2) == 6",
        "num_ids": 1030
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n, m):\n    '''\n    Returns the quotient of two numbers, rounded down to the nearest integer.\n    '''\n    return n // m\n",
        "test": "assert find(3, 4) == 0",
        "num_ids": 216
    },
    {
        "number": 293,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Find the third side of a right-angled triangle given the lengths of two sides.\n    '''\n    return math.sqrt(w**2 + h**2)",
        "test": "assert otherside_rightangle(3,4) == 5, \"Incorrect result for otherside_rightangle(3,4)\"",
        "num_ids": 344
    },
    {
        "number": 294,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if type(val) == int or type(val) == float:\n            if val > max_val:\n                max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5 # test with a list of integers",
        "num_ids": 433
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_div(0) == 0, \"sum_div(0) should return 0\"",
        "num_ids": 373
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    temp = [0] * n\n    return merge_sort(arr, temp, 0, n-1)\n\ndef merge_sort(arr, temp, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort(arr, temp, left, mid)\n        inv_count += merge_sort(arr, temp, mid+1, right)\n        inv_count += merge(arr, temp, left, mid, right)\n    return inv_count\n\ndef merge(arr, temp, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n        else:\n            temp[k] = arr[j]\n            inv_count += (mid - i + 1)\n            k += 1\n            j += 1\n    while i <= mid:\n        temp[k] = arr[i]\n        k += 1\n        i += 1\n    while j <= right:\n        temp[k] = arr[j]\n        k += 1\n        j += 1\n    for i in range(left, right+1):\n        arr[i] = temp[i]\n    return inv_count\n",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 908
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([1, [2, 3, [4, 5, 6], 7], 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 515
    },
    {
        "number": 299,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the counts of each item\n    count_dict = defaultdict(int)\n    \n    # Iterate through the list of tuples and update the count_dict\n    for item, count in stdata:\n        count_dict[item] += count\n        \n    # Find the maximum aggregate by finding the sum of the counts for each item\n    max_aggregate = sum(count_dict.values())\n    \n    return max_aggregate\n",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)]) != 10 ",
        "num_ids": 580
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    def count_helper(n, start):\n        \"\"\"\n        Helper function to count the number of binary sequences of length 2n that meet the condition.\n        \"\"\"\n        if n == 0:\n            return 1\n        count = 0\n        if start == 0:\n            count += count_helper(n - 1, 1)\n        elif start == 1:\n            count += count_helper(n - 1, 0)\n        return count\n    \n    return count_helper(n, 0)\n",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 604
    },
    {
        "number": 301,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(v) for v in d.values()])\n    else:\n        return 0\n",
        "test": "assert dict_depth({'a':1}) == 1",
        "num_ids": 391
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    rotations = rotations % n # number of rotations will be always less than len(arr)\n    \n    # reverse the array from 0 to rotations-1\n    arr[:rotations] = reversed(arr[:rotations])\n    \n    # reverse the array from rotations to n-1\n    arr[rotations:] = reversed(arr[rotations:])\n    \n    # reverse the entire array to get the element at index i\n    arr = reversed(arr)\n    \n    # convert the array to a list and return the element at index i\n    return list(arr)[index]\n",
        "test": "assert find_Element([1,2,3,4,5], 0, 0, 0) == 1 ",
        "num_ids": 648
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    p_words = []\n    for word in words:\n        if re.match(pattern, word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words\n    return None\n",
        "test": "assert start_withp(['peach', 'orange', 'pineapple']) == ['peach', 'pineapple']",
        "num_ids": 620
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize a list to store the maximum sum of increasing subsequence ending at each index\n    max_sum = [0] * n\n    \n    # Initialize the maximum sum to the first element of the array\n    max_sum[0] = a[0]\n    \n    # Loop through the array from the second element to the kth element\n    for i in range(1, k):\n        # Initialize the maximum sum for the i-th element to be the i-th element itself\n        max_sum[i] = a[i]\n        \n        # Loop through the array from the first element to the i-th element to find the maximum sum of increasing subsequence\n        # ending at the i-th element\n        for j in range(i):\n            # If the j-th element is less than the i-th element and the sum of maximum sum of increasing subsequence\n            # ending at the j-th element and the i-th element is greater than the current maximum sum for the i-th element,\n            # update the maximum sum for the i-th element\n            if a[j] < a[i] and max_sum[j] + a[i] > max_sum[i]:\n                max_sum[i] = max_sum[j] + a[i]\n                \n    # Loop through the array from the kth element to the n-th element to find the maximum sum of increasing subsequence\n    # including the kth element\n    for i in range(k, n):\n        # Initialize the maximum sum for the i-th element to be the i-th element itself\n        max_sum[i] = a[i]\n        \n        # Loop through the array from the kth element to the i-th element to find the maximum sum of increasing subsequence\n        # ending at the i-th element\n        for j in range(k, i):\n            # If the j-th element is less than the i-th element and the sum of maximum sum of increasing subsequence\n            # ending at the j-th element and the i-th element is greater than the current maximum sum for the i-th element,\n            # update the maximum sum for the i-th element\n            if a[j] < a[i] and max_sum[j] + a[i] > max_sum[i]:\n                max_sum[i] = max_sum[j] + a[i]\n    \n    # Return the maximum sum of increasing subsequence ending at the n-th element\n    return max_sum[n-1]\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 5) == 15 # Test case 1",
        "num_ids": 1220
    },
    {
        "number": 307,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Returns a colon of a tuple.\n    '''\n    if m < 1 or n > len(tuplex) or m > n:\n        return \"Invalid input!\"\n    else:\n        new_tuplex = deepcopy(tuplex)\n        if m == 1:\n            new_tuplex = new_tuplex[:n]\n        elif n == len(tuplex):\n            new_tuplex = new_tuplex[m-1:]\n        else:\n            new_tuplex = new_tuplex[m-1:n]\n        return new_tuplex\n",
        "test": "assert colon_tuplex((1, 2, 3), 1, 3) == (1, 2, 3)",
        "num_ids": 562
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        max_product = float('-inf')\n        for num1 in nums1:\n            for num2 in nums2:\n                product = num1 * num2\n                if product > max_product:\n                    max_product = product\n        products.append(max_product)\n        nums1.remove(max_product // nums2[0])\n        nums2.remove(max_product // nums1[0])\n    return products\n",
        "test": "assert large_product([-1, 2, 3], [4, -5, 6], 3) == [3, 2, 18]  # three largest products are -1*4, 2*6 and 3*(-5)",
        "num_ids": 804
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a, b):\n    '''\n    Returns the maximum of two numbers\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(2, 3) == 3",
        "num_ids": 216
    },
    {
        "number": 310,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def string_to_tuple(str1):\n    '''\n    Convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\") ",
        "num_ids": 206
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n | (n + 1)) + 1\n",
        "test": "assert set_left_most_unset_bit(0b1010101) == 0b1011000",
        "num_ids": 513
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (math.pi / 3) * h * (r ** 2)\n    return volume\n",
        "test": "assert volume_cone(0,0) == 0",
        "num_ids": 330
    },
    {
        "number": 388,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        i *= 2\n    return i // 2\n",
        "test": "assert highest_Power_of_2(6) == 4",
        "num_ids": 311
    },
    {
        "number": 389,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the n'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)",
        "test": "assert find_lucas(1) == 1",
        "num_ids": 347
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]\n",
        "test": "assert add_string([], \"Hello, {}\") == []",
        "num_ids": 346
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n",
        "test": "assert convert_list_dictionary([1, 2], ['a', 'b'], ['foo', 'bar']) == {'a': {'1': 'foo', '2': 'bar'}, 'b': {'1': 'foo', '2': 'bar'}} ",
        "num_ids": 514
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1, \"Error: get_max_sum(1)\"",
        "num_ids": 461
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = []\n    max_length = 0\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1, 2], [3, 4, 5], [6]]) == [3, 4, 5] # expecting [3, 4, 5]",
        "num_ids": 435
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert check_distinct((1,2,3,4,5)) == True",
        "num_ids": 285
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store character counts\n    counts = {}\n    # iterate through the string and count each character\n    for char in str1:\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    # find the first character with a count of 1\n    for char in str1:\n        if counts[char] == 1:\n            return char\n    # if all characters are repeated, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"aabbcdd\") == \"c\"",
        "num_ids": 623
    },
    {
        "number": 396,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('a') == True",
        "num_ids": 353
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 344
    },
    {
        "number": 398,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(d) for d in str(num)]\n        sum_digits = sum(digits)\n        result.append(sum_digits)\n    return result\n",
        "test": "assert sum_of_digits([123, 456]) == [6, 15]",
        "num_ids": 551
    },
    {
        "number": 399,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    result_tup = tuple()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    \n    return result_tup\n",
        "test": "assert bitwise_xor((1, 0, 1), (0, 1, 1)) == (1, 1, 0)",
        "num_ids": 637
    },
    {
        "number": 400,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if len(item) == 2:\n            if item[0] not in freq_dict:\n                freq_dict[item[0]] = {}\n            if item[1] not in freq_dict[item[0]]:\n                freq_dict[item[0]][item[1]] = 1\n            else:\n                freq_dict[item[0]][item[1]] += 1\n        else:\n            print(\"Invalid item:\", item)\n    return len(freq_dict)\n",
        "test": "assert extract_freq([(1,2),(2,3),(1,2)]) == 2 ",
        "num_ids": 626
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples((10,20,30),(40,50,60)) == (50,70,90)",
        "num_ids": 596
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(2, 3) == 2, \"minimum of 2 and 3 should be 2\"",
        "num_ids": 260
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1, 2, 3), 2) == True",
        "num_ids": 288
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "test": "assert find_Parity(1) == False",
        "num_ids": 250
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    n_list = list(n)\n    n_list.sort(reverse=True)\n    while True:\n        if ''.join(n_list) > n:\n            return int(''.join(n_list))\n        n_list.pop()\n        n_list.sort(reverse=True)\n",
        "test": "assert rearrange_bigger(123) == 321 ",
        "num_ids": 966
    },
    {
        "number": 408,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(pairs, (nums1[i] + nums2[j], i, j))\n    return [(nums1[pairs[i][1]], nums2[pairs[i][2]]) for i in range(k)]\n",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)] ",
        "num_ids": 902
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == 2",
        "num_ids": 642
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert min_val([1,2,3,4,5]) == 1",
        "num_ids": 431
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.title() for word in words[1:])",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 510
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8] # Test case 1",
        "num_ids": 344
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n    \"\"\"\n    return [t[n] for t in list1]\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == 2",
        "num_ids": 469
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False # No values overlap",
        "num_ids": 333
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # Calculate the product of the two largest elements in the array\n    highest_product = arr[0] * arr[1]\n    \n    # Calculate the product of the two smallest elements in the array\n    lowest_product = arr[-1] * arr[-2]\n    \n    # Return the higher of the two products\n    return max(highest_product, lowest_product)\n",
        "test": "assert max_Product([1,2,3,4,5]) == 20  # highest product is 5 * 5 = 25",
        "num_ids": 573
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def group_tuples(Input):\n    '''\n    Given a list of tuples, group the tuples that have the same first element.\n    Return a list of lists, where each sublist contains all tuples that have the same first element.\n    '''\n    # Create an empty dictionary to store the groups of tuples\n    groups = {}\n    # Iterate over the tuples in the input list\n    for tup in Input:\n        # Get the first element of the tuple\n        first_elem = tup[0]\n        # If the first element is not yet a key in the dictionary, add it with an empty list as value\n        if first_elem not in groups:\n            groups[first_elem] = []\n        # Append the current tuple to the group of tuples that have the same first element\n        groups[first_elem].append(tup)\n    # Return a list of lists, where each sublist contains all tuples that have the same first element\n    return list(groups.values())\n",
        "test": "assert group_tuples([(1, 2, 3), (1, 4, 5), (6, 1, 8)]) == [1, 6] ",
        "num_ids": 741
    },
    {
        "number": 418,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max(['a','b','cde','f']) == 'cde'",
        "num_ids": 398
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for i in list1:\n        total_sum += round(i)\n    print(total_sum * len(list1))\n",
        "test": "assert round_and_sum([5.9, 6.3, 7.1, 8.5]) == 40",
        "num_ids": 412
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize sum variable\n    sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the current number\n        cube = i ** 3\n        # Add the cube to the sum variable\n        sum += cube\n\n    # Return the sum of the cubes of the first n even natural numbers\n    return sum\n",
        "test": "assert cube_Sum(0) == 0, \"Error: cube_Sum(0) should return 0\"",
        "num_ids": 438
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += element\n    return concatenated_string\n",
        "test": "assert concatenate_tuple(('a', 'b', 'c', 'd', 'e')) == 'abcde'",
        "num_ids": 414
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 521
    },
    {
        "number": 424,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    This function takes a tuple of strings as input and returns a tuple of strings that only contains the last character of each string in the original tuple.\n    '''\n    result = ()\n    for string in test_tuple:\n        result += (string[-1],)\n    return result\n",
        "test": "assert extract_rear((\"123\", \"456\", \"789\")) == (\"3\", \"6\", \"9\")",
        "num_ids": 424
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 1) == 0",
        "num_ids": 318
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 371
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return None\n",
        "test": "assert change_date_format('2022-01-31') == '31-01-2022' ",
        "num_ids": 692
    },
    {
        "number": 428,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n\n        for i in range(gap, n):\n\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list\n",
        "test": "assert shell_sort([5,3,8,6,7]) == [3, 5, 6, 7, 8] # should return [3, 5, 6, 7, 8]",
        "num_ids": 792
    },
    {
        "number": 429,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result",
        "test": "assert and_tuples((True, False), (True, True)) == (True, False)",
        "num_ids": 445
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The parabola does not exist\"\n    else:\n        directrix = (-b) / (2 * a)\n        return directrix\n",
        "test": "assert parabola_directrix(a=1, b=2, c=3) == -1",
        "num_ids": 524
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 347
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base = (base1 + base2) / 2\n    area = ((base1 + base2) / 2) * height\n    median = area / height\n    return median\n",
        "test": "assert median_trapezium(4, 6, 8) == 5",
        "num_ids": 449
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "test": "assert check_greater([4, 5, 6], 3) == True",
        "num_ids": 380
    },
    {
        "number": 434,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"a\") == False",
        "num_ids": 316
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 226
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negatives = []\n    for num in list1:\n        if num < 0:\n            negatives.append(num)\n    return negatives\n",
        "test": "assert neg_nos([1, 2, 3, -4, 5, -6]) == [-4, -6]  # test with positive and negative numbers",
        "num_ids": 374
    },
    {
        "number": 437,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd('Hello World') == 'HloWrd'",
        "num_ids": 416
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list and (test_list[j][0], test_list[i][0]) in test_list:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (2, 3), (3, 4)]) == 0",
        "num_ids": 553
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result*10 + i\n    return result\n",
        "test": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345",
        "num_ids": 337
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Regular expression pattern for adverbs\n    pattern = r'\\b(?:about|across|after|again|against|along|amid|among|apart|around|as|at|away|back|before|behind|below|beneath|beside|between|beyond|but|by|concerning|despite|down|due|during|except|for|from|in|inside|into|like|near|of|off|on|onto|out|outside|over|past|regarding|round|since|through|throughout|till|to|toward|towards|under|underneath|until|up|upon|with|within|without)\\b'\n\n    # Find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # Find the first adverb and its position\n    first_adverb = adverbs[0] if adverbs else None\n    if first_adverb:\n        first_adverb_position = text.index(first_adverb)\n    else:\n        first_adverb_position = None\n\n    return first_adverb, first_adverb_position\n",
        "test": "assert find_adverb_position(\"The door opened slowly.\") == [('slowly', 15)]",
        "num_ids": 806
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area\n",
        "test": "assert surfacearea_cube(3) == 54",
        "num_ids": 257
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    ratio = positive_count / total_count\n    return ratio",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0, \"Error: positive_count([1, 2, 3, 4, 5]) != 1.0\"",
        "num_ids": 549
    },
    {
        "number": 443,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    largest_neg_num = None\n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None or num > largest_neg_num:\n                largest_neg_num = num\n    return largest_neg_num\n",
        "test": "assert largest_neg([-5, -3, -7, -1]) == -1, \"largest_neg([-5, -3, -7, -1]) should return -1\"",
        "num_ids": 455
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        else:\n            result.append(tup)\n    return result\n",
        "test": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)], 0) == [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]",
        "num_ids": 674
    },
    {
        "number": 445,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result_tup = tuple(i*j for i,j in zip(test_tup1, test_tup2))\n        return result_tup\n    else:\n        return \"Tuples are not of same length\"\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18) ",
        "num_ids": 517
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n    return count",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5), [1, 6]) == Counter({1: 1}) ",
        "num_ids": 754
    },
    {
        "number": 447,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 352
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of pernicious numbers.\n    '''\n    sum_of_pernicious = 0\n    \n    for i in range(1, n+1):\n        binary_i = bin(i)[2:] # Convert decimal to binary and remove the '0b' prefix\n        count_ones = binary_i.count('1')\n        \n        if count_ones % 2 != 0: # If the count of ones is odd, add the number to sum\n            sum_of_pernicious += i\n    \n    return sum_of_pernicious",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 402
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_string(lst, size):\n    \"\"\"\n    Extracts strings of the given size from a list of strings.\n    \n    Args:\n        lst: A list of strings.\n        size: The size of the strings to extract.\n        \n    Returns:\n        A list of strings with the specified size.\n        \n    Example:\n        >>> extract_string(['hello', 'world', 'python'], 3)\n        ['lo', 'ld', 'tho']\n    \"\"\"\n    return [s[i:i+size] for s in lst for i in range(len(s)-size+1)]\n",
        "test": "assert extract_string([], 1) == []",
        "num_ids": 437
    },
    {
        "number": 451,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces from the given string\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 371
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(1000, 1000) == 0, \"Incorrect loss amount\"",
        "num_ids": 359
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i*i == n or (n//i) % 2 == 0:\n                sum += i\n            if n//i != i and (n//i) % 2 == 0:\n                sum += n//i\n    return sum\n",
        "test": "assert sumofFactors(15) == 0 ",
        "num_ids": 481
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert text_match_wordz(\"Python is a high-level programming language.\") == \"Python is a high-level programming language.\"",
        "num_ids": 407
    },
    {
        "number": 455,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True",
        "num_ids": 387
    },
    {
        "number": 456,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp']",
        "num_ids": 436
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    min_len = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if lst[i:j] == []:\n                continue\n            if len(lst[i:j]) < min_len:\n                min_len = len(lst[i:j])\n                min_sublist = lst[i:j]\n    return min_sublist\n",
        "test": "assert Find_Min([1,2,3,4]) == 1",
        "num_ids": 486
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(5, 10) == 50",
        "num_ids": 233
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z]+\\b'\n    return re.sub(pattern, '', str1)\n",
        "test": "assert remove_uppercase(\"Hello World\") == \"Hello World\"",
        "num_ids": 263
    },
    {
        "number": 460,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7] ",
        "num_ids": 403
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2",
        "num_ids": 276
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n\n    # create a list of all possible combinations of the elements of list1\n    combinations = []\n    for i in range(1, len(list1)+1):\n        combinations.extend(itertools.combinations(list1, i))\n\n    # return the list of all possible combinations of the elements of list1\n    return combinations\n",
        "test": "assert combinations_list([]) == []",
        "num_ids": 421
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n        \n    return result\n",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6 ",
        "num_ids": 687
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_value(my_dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    value = my_dict[list(my_dict.keys())[0]]\n    for i in range(1, n):\n        if value != my_dict[list(my_dict.keys())[i]]:\n            return False\n    return True\n",
        "test": "assert check_value({\"a\": 1, \"b\": 1, \"c\": 1}, 1) == True",
        "num_ids": 450
    },
    {
        "number": 465,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # create an empty dictionary\n    new_dict = {}\n\n    # iterate over the key-value pairs in the original dictionary\n    for key, value in dict1.items():\n        # check if the value is not an empty string, list, tuple, or set\n        if value and not (isinstance(value, str) and value.isspace()) and not (isinstance(value, (list, tuple, set)) and len(value) == 0):\n            # add the key-value pair to the new dictionary if it is not empty\n            new_dict[key] = value\n\n    return new_dict\n",
        "test": "assert drop_empty({'a': 1, 'b': [], 'c': '', 'd': (), 'e': {}}) == {'a': 1} ",
        "num_ids": 465
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_product(arr):\n    # Initialize variables for maximum and minimum products\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Iterate through the array\n    for num in arr:\n        # If the current number is greater than the maximum product, update both max_product and min_product\n        if num > max_product:\n            min_product = max_product\n            max_product = num\n        # If the current number is less than or equal to the maximum product, update the min_product\n        elif num <= max_product:\n            min_product = num\n\n    # Return the maximum product formed by multiplying the maximum and minimum products\n    return max_product * min_product",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 20 ",
        "num_ids": 647
    },
    {
        "number": 470,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (3, 5, 7)",
        "num_ids": 421
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n",
        "test": "assert find_remainder([2, 3, 4, 5], 5) == 0 # expected output is 0",
        "num_ids": 326
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3]) == True",
        "num_ids": 320
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_list = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if set(tuple1).intersection(set(tuple2)):\n                result_list.append(tuple(sorted(set(tuple1).intersection(set(tuple2)))))\n    return result_list",
        "test": "assert tuple_intersection([(1, 2), (3, 4), (5, 6)], [(3, 4), (1, 2), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 654
    },
    {
        "number": 474,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n",
        "test": "assert replace_char(\"hello\", \"o\", \"0\") == \"hell0\" ",
        "num_ids": 415
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({'a': 2, 'b': 1, 'c': 3}) == Counter({'a': 2, 'c': 3, 'b': 1}) ",
        "num_ids": 473
    },
    {
        "number": 476,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    '''\n    Write a Python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # Calculate the sum of the largest and smallest values\n    total = largest + smallest\n    \n    return total\n",
        "test": "assert big_sum([5, 4, 3, 2, 1]) == 6 ",
        "num_ids": 528
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 215
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    result = pattern.sub('', str1)\n    return result\n",
        "test": "assert remove_lowercase(\"Hello World\") == \"Hello World\"",
        "num_ids": 302
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(1234) == 1",
        "num_ids": 223
    },
    {
        "number": 554,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(lst):\n    '''\n    Returns a new list containing only the odd numbers from the input list.\n    '''\n    return [num for num in lst if num % 2 != 0]\n",
        "test": "assert Split([1,2,3,4,5]) == [1, 3, 5]",
        "num_ids": 366
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of the cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n    # Calculate and return the difference\n    return sum_of_cubes - sum_of_numbers\n",
        "test": "assert difference(1) == 0",
        "num_ids": 464
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if bin(A[i] ^ A[j]).count('1') % 2 != 0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1, 2, 3, 5, 7], 5) == 1 # odd xor pairs",
        "num_ids": 446
    },
    {
        "number": 557,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])\n",
        "test": "assert toggle_string('Hello World') == 'hELLO wORLD'",
        "num_ids": 397
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert n1 and n2 to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Initialize a variable to store the sum of per-digit differences\n    sum_diff = 0\n    \n    # Loop through the digits of n1 and n2\n    for i in range(max(len(n1_str), len(n2_str))):\n        # Get the ith digit of n1 and n2 (or 0 if it doesn't exist)\n        n1_digit = int(n1_str[i]) if i < len(n1_str) else 0\n        n2_digit = int(n2_str[i]) if i < len(n2_str) else 0\n        \n        # Compute the absolute difference between the digits and add it to the sum\n        diff = abs(n1_digit - n2_digit)\n        sum_diff += diff\n        \n    # Return the sum of per-digit differences\n    return sum_diff\n",
        "test": "assert digit_distance_nums(0, 9) == 9 # expected output: 9",
        "num_ids": 764
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6 ",
        "num_ids": 658
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1 + test_tup2)\n    return sorted(union)\n",
        "test": "assert union_elements((1, 2, 3, 4, 5), (4, 5, 6, 7, 8)) == sorted([1, 2, 3, 4, 5, 6, 7, 8]) ",
        "num_ids": 578
    },
    {
        "number": 562,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n    return max_len\n",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 392
    },
    {
        "number": 563,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.+?)\\\"')\n    return pattern.findall(text)\n",
        "test": "assert extract_values('hello \"world\"') == [\"world\"]",
        "num_ids": 316
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a Python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3, 4, 5], 5) == 10",
        "num_ids": 432
    },
    {
        "number": 565,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 203
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    n_str = str(n)\n    # Initialize the sum to zero\n    sum = 0\n    # Loop through each digit in the string\n    for digit in n_str:\n        # Add the digit to the sum\n        sum += int(digit)\n    # Return the sum\n    return sum\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 368
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list has at least two elements\n    if len(list1) < 2:\n        return True\n    \n    # check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    # if no element is out of order, the list is sorted\n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True, \"List is not sorted\"",
        "num_ids": 418
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst",
        "test": "assert empty_list(0) == []",
        "num_ids": 291
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'mouse']]) == [['apple', 'banana', 'cherry'], ['cat', 'dog', 'mouse']]",
        "num_ids": 550
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and returns a new list containing only the unique numbers from all the sublists.\n    '''\n    unique_nums = set()\n    for sublist in nums:\n        for num in sublist:\n            unique_nums.add(num)\n    return list(unique_nums)\n",
        "test": "assert two_unique_nums([1,1,2,2,3,3]) == [1,2,3] # remove duplicates",
        "num_ids": 496
    },
    {
        "number": 573,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    '''\n    Write a Python function to calculate the product of unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 340
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * (r + h)\n    \n    # Return the surface area\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(0.5,0.1) == 1.28, \"Error: surfacearea_cylinder(0.5,0.1) should be 1.28\"",
        "num_ids": 503
    },
    {
        "number": 576,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3], [1,2,3]) == True",
        "num_ids": 439
    },
    {
        "number": 577,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n < 0:\n        return \"Invalid input\"\n    else:\n        # using the property of last digit of a factorial\n        # the last digit is always 0 or 1 or -1\n        # if the given number is even, the last digit is 0\n        # if the given number is odd, the last digit is 1\n        # if the given number is negative and odd, the last digit is -1\n        if n % 2 == 0:\n            return 0\n        else:\n            return 1",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 574
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 568
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_elements.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            dissimilar_elements.append(j)\n    return dissimilar_elements\n",
        "test": "assert find_dissimilar((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 618
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_item = even_ele(item, even_fnc)\n            if even_item:\n                result.append(even_item)\n        elif even_fnc(item):\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert even_ele((1, 2, (3, 4, (5, 6), 7), 8), lambda x: x%3==0) == (1, 2, (3, 4, (5, 6), 7), 8) # Test case 2: keeping all elements",
        "num_ids": 696
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    slant_height = (b**2 + s**2)**0.5\n    area_base = b**2\n    area_slant = s * b\n    area_face = b**2\n    area_total = area_base + 2*area_slant + 4*area_face\n    return area_total\n",
        "test": "assert surface_Area(6, 5) == 150  # Test case 2: Base edge = 6, height = 5",
        "num_ids": 495
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True, \"Dictionary is not empty\"",
        "num_ids": 275
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(num):\n            catalan += catalan_number(i) * catalan_number(num - i - 1)\n        return catalan\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 355
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regex pattern for adverbs ending with ly\n    pattern = r'\\b\\w+ly\\b'\n    # Find all adverbs that match the pattern\n    adverbs = re.findall(pattern, text)\n    # If no adverbs are found, return None\n    if not adverbs:\n        return None\n    # Find the positions of the first adverb that matches the pattern\n    pos = text.find(adverbs[0])\n    # Return the adverb and its position\n    return adverbs[0], pos\n",
        "test": "assert find_adverbs(\"The movie was not as good as expected.\") == None",
        "num_ids": 540
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Creating a list of tuples where each tuple contains (item, price)\n    item_price = [(item[0], item[1]) for item in items]\n    \n    # Using the heapq module to find the n most expensive items by creating a min heap of n size and then adding the remaining items to the heap\n    min_heap = heapq.nsmallest(n, item_price, key=lambda x: x[1])\n    \n    # Creating a list of the most expensive items from the min heap\n    expensive_items = [item[0] for item in min_heap]\n    \n    return expensive_items\n",
        "test": "assert expensive_items([(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60)], 2) == [(6, 60), (5, 50)]",
        "num_ids": 875
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    new_list = second_part + first_part\n    return new_list\n",
        "test": "assert split_Arr([1,2,3,4,5,6], 3) == [4,5,6,1,2,3]",
        "num_ids": 451
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 238
    },
    {
        "number": 588,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Returns the difference between the largest and smallest value in a list of numbers.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) - min(nums)\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 391
    },
    {
        "number": 589,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if (int(i**0.5))**2 == i:\n            result.append(i)\n    return result\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9] ",
        "num_ids": 453
    },
    {
        "number": 590,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return rect_x, rect_y",
        "test": "assert polar_rect(1, 0) == (1, 0)",
        "num_ids": 371
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    # Get the first and last elements of the list\n    first_element = newList[0]\n    last_element = newList[-1]\n    \n    # Swap the first and last elements\n    newList[0] = last_element\n    newList[-1] = first_element\n    \n    return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 466
    },
    {
        "number": 592,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)",
        "test": "assert binomial_Coeff(5,3) == 10 ",
        "num_ids": 461
    },
    {
        "number": 593,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip = ''\n    for i in ip_list:\n        new_ip += str(int(i)) + '.'\n    return new_ip[:-1]",
        "test": "assert removezero_ip(\"192.168.010.001\") == \"192.168.10.1\"",
        "num_ids": 532
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_numbers = [num for num in list1 if num % 2 == 0]\n    odd_numbers = [num for num in list1 if num % 2 != 0]\n    if even_numbers:\n        first_even = even_numbers[0]\n    else:\n        first_even = None\n    if odd_numbers:\n        first_odd = odd_numbers[0]\n    else:\n        first_odd = None\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return None\n",
        "test": "assert diff_even_odd([1, 3, 5, 7, 9]) == None",
        "num_ids": 641
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the input strings to lists of bits\n    list1 = [int(bit) for bit in str1]\n    list2 = [int(bit) for bit in str2]\n    \n    # Initialize the count of swaps and the number of bits to swap\n    swap_count = 0\n    bits_to_swap = len(list1)\n    \n    # Compare the two lists and count the number of swaps required\n    while bits_to_swap > 0:\n        if list1[0] != list2[0]:\n            swap_count += 1\n        list1.pop(0)\n        list2.pop(0)\n        bits_to_swap -= 1\n    \n    return swap_count\n",
        "test": "assert min_Swaps('1001','1011') == 1",
        "num_ids": 703
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    size = sys.getsizeof(tuple_list)\n    \n    for item in tuple_list:\n        size += sys.getsizeof(item)\n\n    return size\n",
        "test": "assert tuple_size((1,)) == sys.getsizeof((1,))",
        "num_ids": 404
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while k > 0:\n        if i == len(arr1):\n            return arr2[j]\n        if j == len(arr2):\n            return arr1[i]\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n        k -= 1\n    return min(arr1[i-1], arr2[j-1])\n",
        "test": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 1) == 1",
        "num_ids": 822
    },
    {
        "number": 598,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # initialize sum\n    sum = 0\n    # find the length of the number\n    length = len(str(number))\n    # convert the number to a string\n    num = str(number)\n    # iterate through each digit of the number and add its cube to the sum\n    for digit in num:\n        sum += int(digit) ** length\n    # return True if the sum is equal to the original number, otherwise return False\n    return sum == number\n",
        "test": "assert armstrong_number(153) == True # 1^3 + 5^3 + 3^3 = 153",
        "num_ids": 645
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n",
        "test": "assert sum_average(10) == (55, 5.5) ",
        "num_ids": 357
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(4) == True",
        "num_ids": 242
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the characters and their frequency\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Find the first character that occurs more than once\n    for char in str1:\n        if char_freq[char] > 1:\n            return char\n    \n    # If no repeated character was found, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 415
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        # Check if number is already a lucid number\n        if len(str(i)) != len(set(str(i))):\n            continue\n        # Check if number is the reverse of its reverse\n        if str(i) != str(i)[::-1]:\n            continue\n        # Check if number is palindrome\n        if str(i) != str(i)[::1]:\n            continue\n        # Check if number is mirror number\n        if str(i) != str(i)[::-1][::1]:\n            continue\n        # Add number to list of lucid numbers\n        lucid_numbers.append(i)\n    return lucid_numbers\n",
        "test": "assert get_ludic(0) == [] ",
        "num_ids": 796
    },
    {
        "number": 604,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    # Split the input string into a list of words\n    words = s.split()\n\n    # Reverse the order of the words in the list\n    words = words[::-1]\n\n    # Join the reversed words into a single string, separated by spaces\n    result = ' '.join(words)\n\n    return result",
        "test": "assert reverse_words(\"Hello world\") == \"world Hello\"",
        "num_ids": 346
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 318
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 247
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert find_literals(\"Hello, world!\", r\"\\w+\") == (\"Hello\", 0, 5)",
        "num_ids": 527
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth Bell number.\n    \"\"\"\n    bell = [0]*(n+1)\n    bell[0] = 1\n    for i in range(1,n+1):\n        bell[i] = bell[i-1] + bell[i-1]*(i-1)\n    return bell[n]\n",
        "test": "assert bell_Number(1) == 1 # bell number for n=1 should be 1",
        "num_ids": 409
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    del list2[L-1]\n    return list2\n",
        "test": "assert remove_kth_element([], 2) == []",
        "num_ids": 452
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of the n'th column.\n    \"\"\"\n    max_val = float('-inf')  # initialize the max value to negative infinity\n    for row in test_list:\n        if len(row) > N:\n            max_val = max(max_val, row[N])\n    return max_val\n",
        "test": "assert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 2) == 9 # returns the max of the 2nd column (3,5,7)",
        "num_ids": 600
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def merge(lst):\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 465
    },
    {
        "number": 614,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Given a tuple list, this function computes the cumulative sum of all values.\n    '''\n    # Create an empty list to store the cumulative sum\n    cumulative_sum = []\n    # Initialize the sum to 0\n    current_sum = 0\n    # Iterate over the elements of the tuple list\n    for i in range(len(test_list)):\n        # Add the current value to the current sum\n        current_sum += test_list[i]\n        # Append the current sum to the cumulative sum list\n        cumulative_sum.append(current_sum)\n    # Return the cumulative sum list\n    return cumulative_sum\n",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15] ",
        "num_ids": 557
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    \n    # Initialize an empty list to store the average values for each tuple\n    avg_list = []\n    \n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the sum of elements in the tuple\n        tup_sum = sum(tup)\n        \n        # Calculate the length of the tuple\n        tup_len = len(tup)\n        \n        # Calculate the average value for the tuple\n        tup_avg = tup_sum / tup_len\n        \n        # Append the average value to the avg_list\n        avg_list.append(tup_avg)\n    \n    # Return the avg_list\n    return avg_list\n",
        "test": "assert average_tuple(((1,2,3),(4,5,6))) == [2,5] ",
        "num_ids": 601
    },
    {
        "number": 616,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    # Check if the lengths of the tuples are equal\n    if len(test_tup1) != len(test_tup2):\n        return None\n    \n    # Create an empty list to store the results of the modulo operation\n    result = []\n    \n    # Perform the element wise modulo operation and append the results to the result list\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    \n    # Return the result list as a tuple\n    return tuple(result)\n",
        "test": "assert tuple_modulo((2, 4, 6), (3, 5, 7)) == (2, 4, 6)",
        "num_ids": 720
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    i = 0\n    jumps = 0\n    while i < steps:\n        j = min(steps, d)\n        i += j\n        jumps += 1\n        if i >= d:\n            return jumps\n    return -1  # no possible solution",
        "test": "assert min_Jumps(4, 3) == 1",
        "num_ids": 624
    },
    {
        "number": 618,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([2, 4, 6], [1, 2, 3]) == [2.0, 2.0, 2.0]",
        "num_ids": 452
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    result = \"\"\n    num_str = \"\"\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            result += char\n    return result + num_str",
        "test": "assert move_num('hello123world') == 'helloworld123'",
        "num_ids": 420
    },
    {
        "number": 620,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    n = len(a)\n    if n < 2:\n        return n\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n",
        "test": "assert largest_subset([1,3,5,7]) == 2",
        "num_ids": 514
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # If the length of arrays is even\n        median = (arr1[n // 2 - 1] + arr2[n // 2 - 1]) / 2\n    else:\n        # If the length of arrays is odd\n        median = (arr1[n // 2] + arr2[n // 2]) / 2\n    return median\n",
        "test": "assert get_median([1,2,3,4,5], [5,4,3,2,1], 5) == 3, \"Test case 1 failed\"",
        "num_ids": 806
    },
    {
        "number": 623,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3], 2) == [1, 4, 9]",
        "num_ids": 379
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    return string.isupper()\n",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 268
    },
    {
        "number": 625,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1] ",
        "num_ids": 483
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Returns the area of the largest triangle that can be inscribed in a semicircle\n    with a given radius r.\n    '''\n    # Calculate the radius of the incircle\n    in_radius = math.sqrt(r**2 - (r/2)**2)\n    # Calculate the area of the triangle\n    area = 0.5 * in_radius * r\n    return area",
        "test": "assert triangle_area(1) == math.sqrt(3)/4, \"Error: triangle_area function is incorrect for radius 1\"",
        "num_ids": 491
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if i != array[i]:\n            return i\n    \n    return end\n",
        "test": "assert find_First_Missing([1, 2, 3, 4, 6, 7]) == 5",
        "num_ids": 497
    },
    {
        "number": 628,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # Split the string into a list of words\n    words = string.split()\n    # Join the list of words using '%20' as the separator\n    return '%20'.join(words)\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 294
    },
    {
        "number": 629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def split(lst):\n    '''\n    This function takes a list of numbers as input and returns two lists:\n    one containing even numbers and the other containing odd numbers.\n    '''\n    even = []\n    odd = []\n    for num in lst:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even, odd\n",
        "test": "assert Split([5,3,2,8,6]) == [2,6]",
        "num_ids": 381
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) != 2:\n        return \"Invalid Input\"\n    adj = []\n    x,y = ele[0], ele[1]\n    for i in range(x-1,x+2):\n        for j in range(y-1,y+2):\n            if (i,j) != (x,y) and (i,j) not in sub:\n                adj.append((i,j))\n    return adj\n",
        "test": "assert adjac((1, 1)) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)]",
        "num_ids": 820
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 261
    },
    {
        "number": 632,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_list = []\n    non_zero_list = []\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n    return non_zero_list + zero_list",
        "test": "assert move_zero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "num_ids": 730
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum",
        "test": "assert pair_xor_Sum([], 0) == 0",
        "num_ids": 476
    },
    {
        "number": 635,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for _ in range(len(heap))]\n",
        "test": "assert heap_sort([3,2,1,5,4]) == [1,2,3,4,5] # check if the function can sort a simple list in ascending order",
        "num_ids": 490
    },
    {
        "number": 637,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(10, 15) == False",
        "num_ids": 366
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates wind chill index rounded to the nearest integer given wind velocity (km/h) and temperature (Celsius).\n    '''\n    # convert velocity to m/s\n    v_ms = v * 1000 / 3600\n    # calculate wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v_ms, 0.16)\n    # round to nearest integer\n    wc_rounded = round(wc)\n    return wc_rounded\n",
        "test": "assert wind_chill(15, -5) == 12 # check wind chill index for a velocity of 15 km/h and a temperature of -5 degrees celsius",
        "num_ids": 581
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['Alice', 'Bob', 'carol', 'dave', 'eve']) == 8",
        "num_ids": 536
    },
    {
        "number": 640,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)",
        "test": "assert remove_parenthesis(\"hello (world)\") == \"hello \"",
        "num_ids": 310
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    while True:\n        nonagonal = i*(2*i - 1)\n        if n == nonagonal:\n            return nonagonal\n        elif n < nonagonal:\n            return False\n        else:\n            i += 1\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 328
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expressions to match any word that contains 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    return bool(match)",
        "test": "assert text_match_wordz_middle('hello world') == False ",
        "num_ids": 395
    },
    {
        "number": 644,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    return input\n",
        "test": "assert reverse_Array_Upto_K([3, 2, 1, 4, 5], 0) == [3, 2, 1, 4, 5]",
        "num_ids": 543
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    return tuple(test_tup)\n",
        "test": "assert add_dict_to_tuple((\"apple\", \"banana\", \"cherry\"), {\"fruit\": \"apple\", \"vegetable\": \"carrot\"}) == (\"apple\", \"banana\", \"cherry\", {\"fruit\": \"apple\", \"vegetable\": \"carrot\"}) ",
        "num_ids": 664
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = max(cost[i][j] + dp[i-1][j], cost[i][j] + dp[i][j-1])\n    \n    return dp[N-1][N-1] / (N*N)\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 5.5",
        "num_ids": 1192
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n",
        "test": "assert filter_data({'Alice': (170, 50), 'Bob': (160, 60), 'Charlie': (180, 80)}, 170, 60) == {'Charlie': (180, 80)} ",
        "num_ids": 569
    },
    {
        "number": 723,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 478
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to string\n    base_str = str(base)\n    # Convert power to string\n    power_str = str(power)\n    # Convert base and power to lists of digits\n    base_digits = [int(digit) for digit in base_str]\n    power_digits = [int(digit) for digit in power_str]\n    # Initialize the sum variable\n    sum_digits = 0\n    # Calculate the power of each digit in the base\n    for digit in base_digits:\n        power_digit = digit ** power\n        # Convert power_digit to a list of digits\n        power_digit_digits = [int(digit) for digit in str(power_digit)]\n        # Add the digits in the power_digit to the sum\n        for digit in power_digit_digits:\n            sum_digits += digit\n    # Return the sum of all digits of the base to the specified power\n    return sum_digits\n",
        "test": "assert power_base_sum(123, 2) == 15129",
        "num_ids": 596
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    matches = re.findall(r'\"(.*?)\"', text1)\n    return matches\n",
        "test": "assert extract_quotation('\"hello world\"') == \"hello world\"",
        "num_ids": 259
    },
    {
        "number": 726,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup)-1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    return result_tup\n",
        "test": "assert multiply_elements((1,2,3)) == (2,6)",
        "num_ids": 557
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 454
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.extend([key] * len(list(group)))\n    return result\n",
        "test": "assert consecutive_duplicates([1, 1, 1, 2, 3, 4, 4, 4, 5, 5, 5, 6, 7, 7, 8, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "num_ids": 576
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius r and height h.\n    \"\"\"\n    l = math.sqrt(r**2 + h**2)\n    area = math.pi * r * l\n    return area",
        "test": "assert lateralsurface_cone(4,6) == 84.3268416669341058",
        "num_ids": 436
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r\"[\\s.,]+\"\n    result = re.sub(pattern, \":\", text)\n    return result\n",
        "test": "assert replace_specialchar(\"Hello, world!\") == \"Hello:world!\"",
        "num_ids": 350
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    # initialize the left and right endpoints of the search range\n    left = 0\n    right = len(A) - 1\n    \n    # binary search\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # if the middle element is equal to x, we need to check if it's the first occurrence\n        if A[mid] == x:\n            # check if the previous element is not equal to x\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            else:\n                # otherwise, move the left endpoint to the right\n                left = mid + 1\n        # if the middle element is greater than x, the x must be in the left half\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    # x is not in the array\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 836
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prods = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            sum_prods += prod\n    return sum_prods\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3,4,5]) == 120, \"Incorrect output\" ",
        "num_ids": 632
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a Python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Finding the length of the binary representation of the number\n    length = len(bin(n)[2:])\n\n    # Finding the mask to toggle the bits of the number\n    mask = ~(((1 << length) - 1) << 1) & ((1 << length) - 1)\n\n    # Toggling the bits of the number using the mask\n    result = n ^ mask\n\n    return result\n",
        "test": "assert set_middle_bits(0b1010) == 0b1011 # 0b1010 -> 0b1011",
        "num_ids": 487
    },
    {
        "number": 736,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif a[index - 1] == x:\n        return index - 1\n    else:\n        return index\n",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 463
    },
    {
        "number": 737,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('world') == False",
        "num_ids": 291
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (0.5)**(n-1) * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 228
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    i = 1\n    count = 0\n    while True:\n        count += i\n        if len(str(count)) == n:\n            return i\n        i += 1\n",
        "test": "assert find_Index(1) == 1",
        "num_ids": 327
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict1 = {}\n    for i in range(0, len(test_tup), 2):\n        dict1[test_tup[i]] = test_tup[i+1]\n    return dict1\n",
        "test": "assert tuple_to_dict((1, 2, 3, 4)) == {1: 2, 3: 4} ",
        "num_ids": 611
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a set to remove duplicate characters\n    unique_chars = set(s)\n    # If the length of the set is 1, then all characters are same\n    if len(unique_chars) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same('aaa') == True",
        "num_ids": 418
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) * side ** 2 / 4\n",
        "test": "assert area_tetrahedron(5) == math.sqrt(3) * 5**2 / 6, \"Test case 2 failed\" ",
        "num_ids": 464
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(lst)\n    m = m % n\n    \n    # Reverse the list\n    lst = lst[::-1]\n    \n    # Reverse the first m elements of the reversed list\n    lst[:m] = lst[:m][::-1]\n    \n    # Reverse the remaining elements of the reversed list\n    lst[m:] = lst[m:][::-1]\n    \n    return lst",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 583
    },
    {
        "number": 744,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False",
        "num_ids": 295
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        digits = list(str(num))\n        for digit in digits:\n            if num % int(digit) != 0:\n                return False\n        return True\n    \n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible(num):\n            result.append(num)\n    \n    return result\n",
        "test": "assert divisible_by_digits(100, 200) == [100, 110, 120, 130, 140, 150, 160, 170, 180, 190]",
        "num_ids": 830
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a / 360) * math.pi\n",
        "test": "assert sector_area(3, 180) == (3 ** 2) * math.pi/2",
        "num_ids": 452
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common suffixes of substrings.\n    L = [[[0] * (o+1) for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table in bottom-up manner.\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # The length of the longest common subsequence is stored in L[m][n][o].\n    return L[m][n][o]\n",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"TXTXGYA\") == \"GTXAY\" ",
        "num_ids": 1409
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'([A-Z][a-z]+)'\n    return re.sub(pattern, r'\\1 ', str1)\n",
        "test": "assert capital_words_spaces(\"PythonIsFun\") == \"Python Is Fun\"",
        "num_ids": 474
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=int)\n    return nums_str\n",
        "test": "assert sort_numeric_strings(['12', '45', '7', '9', '34']) == ['7', '9', '12', '34', '45'] # correct output for ascending order",
        "num_ids": 368
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1, 2, 3)], (4, 5, 6)) == [(1, 2, 3), (4, 5, 6)] ",
        "num_ids": 359
    },
    {
        "number": 751,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Check if the index is within the bounds of the array\n    if i < len(arr):\n        # Check if the left and right child of the current node are also min heaps\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n\n        if left_child < len(arr) and arr[left_child] < arr[i]:\n            return False\n\n        if right_child < len(arr) and arr[right_child] < arr[i]:\n            return False\n\n        # Recursively check the left and right subtrees\n        return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n    \n    # If the index is out of bounds, return True\n    return True",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5], 0) == True # test case 1",
        "num_ids": 940
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 561
    },
    {
        "number": 753,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)], 3) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 630
    },
    {
        "number": 754,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists.\n    The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) == []",
        "num_ids": 565
    },
    {
        "number": 755,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    first_min = second_min = float('inf')\n    for num in numbers:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif first_min < num < second_min:\n            second_min = num\n    \n    return second_min\n",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 487
    },
    {
        "number": 756,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one('ab') == True ",
        "num_ids": 281
    },
    {
        "number": 757,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    n = len(test_list)\n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] > test_list[j]:\n                count += 1\n    \n    return count",
        "test": "assert count_reverse_pairs([]) == 0, \"Test case 1 failed\"",
        "num_ids": 435
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count\n",
        "test": "assert unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 4], [2, 3], [4, 5]]) == {(1, 2, 3): 2, (1, 2, 4): 1, (2, 3): 1, (4, 5): 1} ",
        "num_ids": 712
    },
    {
        "number": 759,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal('3.14') == True",
        "num_ids": 432
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    # Convert the list to a set to remove duplicates\n    arr_set = set(arr)\n    \n    # If the length of the set is 1, then all elements in the list are the same\n    if len(arr_set) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([2,2,2]) == True",
        "num_ids": 386
    },
    {
        "number": 762,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    '''\n    # Create a list of months with 30 days\n    thirty_days = [4, 6, 9, 11]\n    # Check if the given month number is in the list of months with 30 days\n    if monthnum3 in thirty_days:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(1) == False, \"Month 1 should not contain 30 days\"",
        "num_ids": 481
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_min_diff(arr, n):\n    arr.sort() # Sorting the array in ascending order\n    min_diff = float('inf') # Initializing the minimum difference to infinity\n    \n    # Traversing through the sorted array and finding the minimum difference between any two elements\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff # Returning the minimum difference\n",
        "test": "assert find_min_diff([3, 5, 9, 12, 15], 5) == 2 # correct result should be 2 as the difference between 9 and 12 is 2",
        "num_ids": 613
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr('12345') == 5",
        "num_ids": 266
    },
    {
        "number": 765,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number.\n    \"\"\"\n\n    # Initialize a variable to store the sum of divisors\n    sum_of_divisors = 0\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Initialize a variable to store the sum of divisors of i\n        divisor_sum = 1  # 1 is always a divisor\n\n        # Loop through all divisors of i\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                divisor_sum += j\n                if i // j != j:  # If j is not a perfect square\n                    divisor_sum += i // j\n\n        # Add the sum of divisors of i to the sum of divisors of all numbers from 1 to n\n        sum_of_divisors += divisor_sum\n\n    # Return the nth polite number\n    return sum_of_divisors\n",
        "test": "assert is_polite(1) == 1",
        "num_ids": 666
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result\n",
        "test": "assert pair_wise([1,2,3,4,5]) == [(1,2),(2,3),(3,4),(4,5)]",
        "num_ids": 409
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    pairs = {}\n    for num in arr:\n        if num in pairs:\n            pairs[num] += 1\n        else:\n            pairs[num] = 1\n    for num in pairs:\n        if (sum - num) in pairs:\n            count += pairs[num] * pairs[sum - num]\n    count //= 2\n    return count\n",
        "test": "assert get_pairs_count([2, 4, 6, 8], 6) == 1 # one pair with sum 6: 2 + 4",
        "num_ids": 629
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1, li2):\n    '''\n    Returns a list containing the elements of li1 that are not present in li2.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1,2,3,4,5], [2,3,4]) == [1,5]",
        "num_ids": 359
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total_sum = 0\n    count = 0\n    \n    while count < n:\n        total_sum += (2*count + 1) ** 4\n        count += 1\n    \n    return total_sum\n",
        "test": "assert odd_num_sum(0) == 0",
        "num_ids": 328
    },
    {
        "number": 771,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if not (current_char == \"(\" and char == \")\") and not (current_char == \"{\" and char == \"}\") and not (current_char == \"[\" and char == \"]\"):\n                return False\n    if not stack:\n        return True\n    return False\n",
        "test": "assert check_expression('()') == True",
        "num_ids": 580
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\n",
        "test": "assert remove_length(\"Python is awesome\", 4) == \"Python is awe\"",
        "num_ids": 361
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append(match.start())\n    if positions:\n        return positions\n    else:\n        return None\n",
        "test": "assert occurance_substring(\"Hello World\", \"world\") == None",
        "num_ids": 530
    },
    {
        "number": 775,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 3, 4, 6]) == False",
        "num_ids": 356
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"abcd\") == 0",
        "num_ids": 501
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    unique_sum = sum(unique_elements)\n    return unique_sum\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 500
    },
    {
        "number": 778,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # Create a list of tuples where each tuple contains an element and its count of consecutive duplicates\n    list2 = [(k, len(list(g))) for k, g in groupby(list1)]\n    \n    # Create a new list containing sublists of consecutive duplicates\n    result = []\n    for item in list2:\n        if item[1] > 1:\n            result.append([item[0]] * item[1])\n        else:\n            result.append([item[0]])\n            \n    return result\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 681
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Counts the number of occurrences of each unique sublist in a list.\n\n    :param list1: A list of sublists.\n    :return: A dictionary where each key is a unique sublist as a tuple, and the value is the number of times it appears in the input list.\n    \"\"\"\n    counts = {}\n    for sublist in list1:\n        # Convert the sublist to a tuple so it can be used as a key in the dictionary\n        key = tuple(sublist)\n        if key in counts:\n            counts[key] += 1\n        else:\n            counts[key] = 1\n    return counts\n",
        "test": "assert unique_sublists([[1,2],[2,3],[1,2]]) == {(1, 2): 2, (2, 3): 1}, \"incorrect output\" ",
        "num_ids": 659
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == 10:\n                result.append(comb)\n    return result\n",
        "test": "assert find_combinations([(1,2),(3,4),(5,6)]) == [(1, 2, 3, 4, 5, 6), (1, 2, 3, 5, 6), (1, 2, 4, 5, 6), (3, 4, 5, 6)] ",
        "num_ids": 827
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Returns True if the count of divisors of n is even, False otherwise.\n    \"\"\"\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    return divisor_count % 2 == 0\n",
        "test": "assert count_divisors(12) == True, \"Incorrect output\"",
        "num_ids": 557
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    res = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if (j-i) % 2 != 0:\n                for k in range(i, j):\n                    res += arr[k]\n\n    return res\n",
        "test": "assert odd_length_sum([1, 2, 3, 4]) == 0",
        "num_ids": 567
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Convert RGB color to HSV color.\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    diff = cmax-cmin\n\n    if cmax == cmin:\n        h = 0\n    elif cmax == r:\n        h = (60*((g-b)/diff) + 360) % 360\n    elif cmax == g:\n        h = (60*((b-r)/diff) + 120) % 360\n    elif cmax == b:\n        h = (60*((r-g)/diff) + 240) % 360\n\n    if cmax == 0:\n        s = 0\n    else:\n        s = (diff/cmax)*100\n\n    v = cmax*100\n\n    return h, s, v\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) ",
        "num_ids": 1023
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2 != 0:\n            odd_num = num\n            break\n    \n    return even_num * odd_num\n",
        "test": "assert mul_even_odd([1, 3, 5, 7, 9]) == 0, \"Incorrect product for the given list\"",
        "num_ids": 573
    },
    {
        "number": 785,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the parentheses from the input string\n    test_str = test_str.replace('(', '').replace(')', '')\n    # Split the string into individual elements\n    elements = test_str.split(',')\n    # Convert the individual elements from string to integer\n    int_elements = [int(element.strip()) for element in elements]\n    # Convert the integer list to a tuple\n    int_tuple = tuple(int_elements)\n    return int_tuple\n",
        "test": "assert tuple_str_int(\"(1,2,3)\") == (1,2,3)",
        "num_ids": 572
    },
    {
        "number": 786,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "test": "assert right_insertion([1, 3, 5, 7], 2) == 1",
        "num_ids": 391
    },
    {
        "number": 787,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    return bool(re.search(pattern, text))",
        "test": "assert text_match_three(\"abbbb\")",
        "num_ids": 320
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # converting the list to tuple\n    test_list_tuple = tuple(test_list)\n    # concatenating the tuple with the string\n    result = test_list_tuple + (test_str,)\n    # returning the result\n    return result\n",
        "test": "assert new_tuple([1, 2, 3], \"test\") == (1, 2, 3, \"test\") ",
        "num_ids": 388
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([1,3,5]) == False",
        "num_ids": 381
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if type(item) != tuple:\n            flat_list.append(item)\n        else:\n            flat_list += remove_nested(item)\n    return tuple(flat_list)\n",
        "test": "assert remove_nested(((1, 2), 3, (4, 5), 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 454
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list of lists and returns the count of lists inside it.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1], [2], [3]]) == 3",
        "num_ids": 332
    },
    {
        "number": 793,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element as input and returns the last position of the element in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return result\n",
        "test": "assert last([1,3,5,7,9], 1) == 0 ",
        "num_ids": 673
    },
    {
        "number": 794,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything,\n    ending in 'b'.\n    '''\n\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return \"No match found\"",
        "test": "assert text_starta_endb(\"acb\") == \"acb\"",
        "num_ids": 369
    },
    {
        "number": 796,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(d):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    # Initialize sum to zero\n    total = 0\n    \n    # Iterate over all key-value pairs in the dictionary\n    for key, value in d.items():\n        # Add the value to the total sum\n        total += value\n    \n    # Return the total sum\n    return total\n",
        "test": "assert return_sum({'a':1, 'b':2, 'c':3}) == 6",
        "num_ids": 397
    },
    {
        "number": 797,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum = 0\n    for num in range(l, r+1):\n        if num % 2 == 1:\n            sum += num\n    return sum\n",
        "test": "assert sum_odd(10) == 25",
        "num_ids": 287
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15 # expected output: 15",
        "num_ids": 322
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    mask = (1 << 32) - 1\n    while d < 0:\n        d += 32\n    while d > 32:\n        d -= 32\n    return ((n << d) & mask) | (n >> (32-d))\n",
        "test": "assert left_rotate(10, 0) == 10",
        "num_ids": 399
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"This is a test\") == \"Thisisatest\"",
        "num_ids": 274
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 3\n    elif x == y or x == z or y == z:\n        count += 2\n    elif x != y and y != z:\n        count += 0\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 409
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Function to count the number of rotations required to generate a sorted array.\n\n    :param arr: List of integers\n    :return: Number of rotations required to generate a sorted array\n    \"\"\"\n\n    # Initialize variables\n    n = len(arr)\n    start = 0\n    end = n-1\n\n    # Check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n\n    # Find the pivot point\n    while arr[start] <= arr[end]:\n        if end - start == 1:\n            return end\n        mid = (start + end) // 2\n        if arr[mid] >= arr[start]:\n            start = mid\n        elif arr[mid] <= arr[end]:\n            end = mid\n\n    # Return the pivot point\n    return end\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5, 6, 7, 9, 10]) == 0 # expected output: 0",
        "num_ids": 701
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_perfect_square(1) == True, \"Testcase failed for 1\"",
        "num_ids": 448
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n",
        "test": "assert is_product_even([1,2,3,4,5]) == True",
        "num_ids": 299
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 620
    },
    {
        "number": 806,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n",
        "test": "assert max_run_uppercase(\"AbCdEf\") == 1 # only one run of uppercase",
        "num_ids": 468
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 330
    },
    {
        "number": 808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n",
        "test": "assert check_K((\"apple\", \"banana\", \"cherry\"), 2) == False",
        "num_ids": 325
    },
    {
        "number": 809,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples are not of the same length.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    \n    return True\n",
        "test": "assert check_smaller((1, 2, 3), (4, 5, 6)) == False ",
        "num_ids": 538
    }
]