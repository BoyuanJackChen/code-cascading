[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared:\n            shared.append(element)\n    return shared\n",
        "test": "assert similar_elements([1,2,3],[2,3,4]) == [2, 3]",
        "num_ids": 700,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(1) == True",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Use heapq to create a min-heap of size n\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                hq.heappop(heap)\n                hq.heappush(heap, num)\n\n    # Return the heap in descending order\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([1,2,3,4,5], 2) == [5, 4]",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # convert x to binary representation\n    binary_rep = bin(x)[2:]\n    # count number of 1s in binary representation\n    count_ones = 0\n    for bit in binary_rep:\n        if bit == '1':\n            count_ones += 1\n    # check if there is only one 1 in the binary representation\n    if count_ones == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long('Python is fun') == ['Python']",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert square_nums([1, 2, 3]) == [1, 4, 9]",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    # Get the length of the string\n    n = len(str)\n    # Check if the string is empty or has only one character\n    if n <= 1:\n        return 0\n    # Check if the string is a palindrome\n    if str == str[::-1]:\n        return 0\n    # Find the rotations of the string\n    rotations = []\n    for i in range(n):\n        rotation = str[i:] + str[:i]\n        rotations.append(rotation)\n    # Find the minimum number of rotations required to get the same string\n    min_rotations = n\n    for rotation in rotations:\n        if rotation == str:\n            return 1\n        elif rotation == rotation[::-1]:\n            return 2\n        elif rotation == rotation[::-2]:\n            return 3\n        elif rotation == rotation[::-3]:\n            return 4\n        elif rotation == rotation[::-4]:\n            return 5\n        elif rotation == rotation[::-5]:\n            return 6\n        elif rotation == rotation[::-6]:\n            return 7\n        elif rotation == rotation[::-7]:\n            return 8\n        elif rotation == rotation[::-8]:\n            return 9\n        else:\n            min_rotations = min(min_rotations, len(rotation))\n    return min_rotations\n",
        "test": "assert find_Rotations(\"\") == 0 # empty string",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a Python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n\n    first_occurrence = s.index(ch)\n    last_occurrence = s.rindex(ch)\n\n    if first_occurrence == last_occurrence:\n        s = s[:first_occurrence] + s[first_occurrence+1:]\n    else:\n        s = s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n\n    return s\n",
        "test": "assert remove_Occ(\"hello world\", \"l\") == \"helo word\"",
        "num_ids": 944,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    # Sort the matrix based on the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n    return sorted_matrix\n",
        "test": "assert sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 1203,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function takes in the length, base, and height of a triangular prism.\n    It then calculates and returns the volume of the triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume",
        "test": "assert find_Volume(1,2,3) == 1 # Test case 2",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(4) == 16, \"The perimeter of a square with side length 4 should be 16\"",
        "num_ids": 470,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop through each character in the first string\n    for char in string1:\n        # Check if the character is not present in the second string\n        if char not in string2:\n            # Add the character to the result list\n            result.append(char)\n    \n    # Convert the result list to a string and return it\n    return ''.join(result)",
        "test": "assert str_to_list(\"hello world\", \"llo\") == \"he wrd\"",
        "num_ids": 988,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) != len(set(arraynums))\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 12 == 1 or x % 12 == 4 or x % 12 == 7:\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(10) == False",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert number to string and reverse it\n    str_num = str(num)\n    rev_str_num = str_num[::-1]\n\n    # Convert reversed string back to integer\n    rev_num = int(rev_str_num)\n\n    # Check if num + 1 is twice rev_num\n    return num + 1 == 2 * rev_num",
        "test": "assert rev(345) == False, \"rev(345) should return False\"",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 54321 # expected output: 54321",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y >= 0 or x >= 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(1, -2) == True",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Calculate the nth octagonal number using the formula n^2(3n-2) \n    octagonal_num = n ** 2 * (3 * n - 2)\n    return octagonal_num\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    \n    # Create a default dictionary to store the count of substrings with a specific sum of digits\n    digit_sum_count = defaultdict(int)\n    \n    # Calculate the sum of digits for all substrings of the given string\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            digit_sum_count[digit_sum] += 1\n    \n    # Count the number of substrings with the same sum of digits as their length\n    for key, value in digit_sum_count.items():\n        if key == len(str(key)):\n            count += value\n    \n    return count\n",
        "test": "assert count_Substrings(\"\") == 0, \"count_Substrings failed for empty string\"",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def smallest_num(xs):\n    '''\n    Returns the smallest number in a list of numbers\n    '''\n    if len(xs) == 0:\n        return None\n    \n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    \n    return smallest\n",
        "test": "assert smallest_num([5,3,9,1,8]) == 1",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([2, 4, 6, 8]) == 6",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([(10, 20), (15, 10), (20, 25)]) == [(15, 10), (10, 20), (20, 25)] # test if it sorts the list of tuples by the second value of each tuple in descending order. ",
        "num_ids": 876,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Flatten a list and return the sum of all its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 532,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bell_number(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(n//2+1):\n            count += bell_number(i) * bell_number(n-i)\n        return count\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Monotonic(A):\n    if all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True # increasing array",
        "num_ids": 1001,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sublist_found = False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            sublist_found = True\n            break\n    return sublist_found\n",
        "test": "assert is_sublist([1, 2, 3], [1, 2]) == True",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    for tup in Input:\n        if len(tup) != len(Input[0]):\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    \n    while gap > 1:\n        gap = max(1, int(gap / 1.3))\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n    \n    return nums\n",
        "test": "assert comb_sort([3, 1, 4, 1, 5, 9, 2, 6, 5]) == [1, 1, 2, 3, 4, 5, 5, 6, 9] # example input and output",
        "num_ids": 1147,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Initialize a list to store the squares of numbers from 0 to n\n    squares = [i**2 for i in range(n+1)]\n    \n    # Loop through the list of squares and check if there are any two squares whose difference is n\n    for i in range(len(squares)):\n        for j in range(i+1, len(squares)):\n            if squares[i] - squares[j] == n or squares[j] - squares[i] == n:\n                return True\n    \n    # If no two squares have a difference of n, return False\n    return False\n",
        "test": "assert dif_Square(1) == True",
        "num_ids": 767,
        "indeed": true
    },
    {
        "number": 74,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether the given colors follow the sequence given in the patterns array.\n\n    :param colors: a list of strings representing colors\n    :param patterns: a list of strings representing patterns\n    :return: a boolean indicating whether the colors follow the patterns\n    \"\"\"\n    if len(colors) != len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i] != patterns[i % len(patterns)]:\n            return False\n\n    return True",
        "test": "assert is_samepatterns(['R', 'G', 'B', 'R', 'G', 'B'], ['R', 'G', 'B', 'R', 'G', 'B']) == True",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6)], 3) == []",
        "num_ids": 1089,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(11) == True # test whether 11 is divisible by 11",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len(\"Hello\") == True",
        "num_ids": 470,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = 0\n    for i in range(1, n+1):\n        tetrahedral += i\n        for j in range(1, i):\n            tetrahedral += j\n    return tetrahedral\n",
        "test": "assert tetrahedral_number(0) == 0",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume",
        "test": "assert volume_sphere(0) == 0.0",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # convert the string to lowercase\n    strr = strr.lower()\n    # initialize the sum of ASCII values\n    sum_ascii = 0\n    # iterate through the characters in the string\n    for char in strr:\n        # add the ASCII value of the character to the sum\n        sum_ascii += ord(char)\n    # take the sum modulo 26\n    result = sum_ascii % 26\n    # convert the result to an ASCII character\n    return chr(97 + result)\n",
        "test": "assert get_Char(\"hello\") == \"m\"",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the Newman-Conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence_str = input(\"Enter the sequence up to the nth term: \")\n        sequence_list = list(map(int, sequence_str.split()))\n        while len(sequence_list) < n:\n            next_num = sequence_list[-1] + sequence_list[-2] - sequence_list[-3]\n            sequence_list.append(next_num)\n        return sequence_list[n-1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area\n",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi, \"Surface area of sphere is not correct\"",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Compute the nth centered hexagonal number.\n\n    Args:\n        n (int): the index of the centered hexagonal number to compute.\n\n    Returns:\n        int: the nth centered hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 2, 1, 3, 2]) == {1: 2, 2: 3, 3: 2} ",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_num = -1\n    for i in range(N):\n        if i < N and N - i < N - closest_num:\n            closest_num = i\n    return closest_num\n",
        "test": "assert closest_num(2) == 1",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'cherry']) == 6",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"Hello world\", \"World\") == False",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Check if the number of digits is odd\n    if len(num_str) % 2 == 1:\n        return False\n    \n    # Convert the string to a list of integers\n    num_list = [int(digit) for digit in num_str]\n    \n    # Iterate over the list and check if all adjacent pairs have different parity\n    for i in range(len(num_list) // 2):\n        if num_list[2*i] % 2 == num_list[2*i+1] % 2:\n            return False\n    \n    return True\n",
        "test": "assert is_undulating(12) == True, \"12 is undulating\"",
        "num_ids": 811,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b\n",
        "test": "assert power(2, 3) == 8 # test for 2^3",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if not test_list:\n        return None\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]\n",
        "test": "assert index_minimum([(1,2),(3,4),(5,4)]) == 1 ",
        "num_ids": 939,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Returns the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1 # 1 has only 1 divisor, which is 1",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # iterate through each element in the flattened list\n    for element in list1:\n        # if the element is already in the dictionary, increment its count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[element] = 1\n    \n    # return the frequency dictionary\n    return freq_dict\n",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "test": "assert multiply_num([0, 0, 0]) == 0 ",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == \"1\", \"Error: decimal_to_binary(1) should return '1'\"",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of a specified integer.\n    \"\"\"\n    num = int(num)\n    if num < 1:\n        return 1\n    digits = []\n    while num > 0:\n        digits.append(num % 10)\n        num //= 10\n    n = len(digits)\n    is_even = (n % 2 == 0)\n    for i in range(n // 2 - 1, -1, -1):\n        if digits[i] < digits[n - 1 - i]:\n            for j in range(i + 1, n // 2 + (not is_even)):\n                if digits[j] > digits[i]:\n                    digits[i], digits[j] = digits[j], digits[i]\n                    break\n            else:\n                digits[i + 1:n // 2 + (not is_even)] = digits[i:n // 2 - i]\n                    \n            break\n    else:\n        digits[0] += 1\n        \n    palindrome = 0\n    for digit in digits:\n        palindrome = palindrome * 10 + digit\n    return palindrome\n",
        "test": "assert next_smallest_palindrome(1) == 2",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k <= 0 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(word.capitalize() for word in words[1:])\n",
        "test": "assert snake_to_camel('') == ''",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def eulerian_num(n, m):\n    if n == 0 and m == 0:\n        return 1\n    elif n == 1 and m == 0:\n        return 1\n    elif n == 0 and m == 1:\n        return 1\n    elif n > 0 and m == 0:\n        return eulerian_num(n-1, 1)\n    elif n == 0 and m > 0:\n        return eulerian_num(1, m-1)\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n",
        "test": "assert eulerian_num(0, 0) == 1",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n",
        "test": "assert sort_sublists([['hello', 'world'], ['how', 'are', 'you']]) == [['hello', 'world'], ['are', 'how', 'you']] # should return [['hello', 'world'], ['are', 'how', 'you']]",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def count(lst):\n    '''\n    Write a Python function to count true Booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, True, True]) == 4 ",
        "num_ids": 470,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n",
        "test": "assert add_lists([], ()) == ()",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if num1[0] < num2[0]:\n            if num1[0] < num3[0]:\n                merged_list.append(num1[0])\n                heapq.heappop(num1)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n        else:\n            if num2[0] < num3[0]:\n                merged_list.append(num2[0])\n                heapq.heappop(num2)\n            else:\n                merged_list.append(num3[0])\n                heapq.heappop(num3)\n    \n    while num1:\n        merged_list.append(num1[0])\n        heapq.heappop(num1)\n    \n    while num2:\n        merged_list.append(num2[0])\n        heapq.heappop(num2)\n    \n    while num3:\n        merged_list.append(num3[0])\n        heapq.heappop(num3)\n    \n    return merged_list\n",
        "test": "assert merge_sorted_list([1,5],[2,6],[3,7]) == [1,2,3,5,6,7]",
        "num_ids": 1913,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        if int(s, 2) % 2 != 0:\n            count += 1\n    return count\n",
        "test": "assert odd_Equivalent('000', 3) == 0",
        "num_ids": 995,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set from the first list\n    first_set = set(nestedlist[0])\n    \n    # loop through the remaining lists and find the intersection with the first set\n    for l in nestedlist[1:]:\n        first_set = first_set.intersection(l)\n    \n    # return the common elements as a list\n    return list(first_set)\n",
        "test": "assert common_in_nested_lists([[1,2,3],[1,2,3],[1,2,3]]) == [1,2,3] # returns all common elements ",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"42\") == True",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i]) > 0:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}, {}]) == True",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Get the length of the tuple\n    length = len(nums)\n    \n    # Initialize the result variable with the first element of the tuple\n    result = nums[0]\n    \n    # Iterate through the tuple starting from the second element\n    for i in range(1, length):\n        # Multiply the result by 10 and add the current element\n        result = result * 10 + nums[i]\n    \n    # Return the final result\n    return result\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        sub_result = []\n        for element in sublist:\n            try:\n                sub_result.append(float(element))\n            except ValueError:\n                sub_result.append(element)\n        result.append(sub_result)\n    return result\n",
        "test": "assert list_to_float([[1, \"2\", 3.0, \"4\", 5]]) == [[1.0, 2.0, 3.0, 4.0, 5.0]]",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character and return the list of substrings\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 455,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def search(arr):\n    for i in range(len(arr) - 2):\n        if arr[i] != arr[i+1] and arr[i+1] != arr[i+2]:\n            return arr[i+1]",
        "test": "assert search([1, 1, 2, 3, 3, 4, 4, 8]) != 1",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][0]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][0])\n            if abs(list1[i][1]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][1]*list1[j][1])\n    return max_product\n",
        "test": "assert max_product_tuple([(1, 2), (3, 4), (5, 6)]) == 24",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def amicable_numbers_sum(limit):\n    # Create a list to store the amicable numbers\n    amicable_numbers = []\n    \n    # Loop through all numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # Calculate the sum of the proper divisors of i (excluding i itself)\n        divisor_sum = sum(j for j in range(1, i) if i % j == 0)\n        \n        # Calculate the sum of the proper divisors of divisor_sum (excluding divisor_sum itself)\n        divisor_sum_of_divisor_sum = sum(k for k in range(1, divisor_sum) if divisor_sum % k == 0)\n        \n        # If i and divisor_sum_of_divisor_sum are equal, add i to the list of amicable numbers\n        if i == divisor_sum_of_divisor_sum:\n            amicable_numbers.append(i)\n    \n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers)\n",
        "test": "assert amicable_numbers_sum(5000) == 2350645  # test case 2",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two real numbers, a and b, and returns the angle in radians of the complex number a+bi.\n    '''\n    \n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    \n    return angle\n",
        "test": "assert angle_complex(0, 0) == 0",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n    count_zeros = 0\n    count_ones = 0\n\n    # Iterate through the string\n    for char in string:\n        # If the character is a 0, increment the count of zeros\n        if char == '0':\n            count_zeros += 1\n        # If the character is a 1, increment the count of ones\n        elif char == '1':\n            count_ones += 1\n        # Calculate the difference between the count of zeros and ones\n        diff = abs(count_zeros - count_ones)\n        # If the difference is greater than the current maximum difference, update it\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n",
        "test": "assert find_length(\"110011001\") == 2",
        "num_ids": 988,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0:\n            divisors.append(i)\n    for j in range(1, b+1):\n        if b % j == 0:\n            if j in divisors:\n                divisors.remove(j)\n    return sum(divisors)\n",
        "test": "assert sum(10, 20) == 10, \"sum(10, 20) should be 10\"",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "test": "assert long_words(5, [\"cat\", \"dog\", \"elephant\", \"snake\", \"lion\", \"tiger\"]) == [\"elephant\", \"snake\", \"tiger\"]",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Calculate the sum of the first row\n    magic_sum = sum(my_matrix[0])\n    # Check if all rows have the same sum\n    for i in range(1, n):\n        if sum(my_matrix[i]) != magic_sum:\n            return False\n    # Check if all columns have the same sum\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += my_matrix[i][j]\n        if column_sum != magic_sum:\n            return False\n    # Check if the diagonals have the same sum\n    diagonal1_sum = 0\n    diagonal2_sum = 0\n    for i in range(n):\n        diagonal1_sum += my_matrix[i][i]\n        diagonal2_sum += my_matrix[i][n-i-1]\n    if diagonal1_sum != magic_sum or diagonal2_sum != magic_sum:\n        return False\n    # If all checks pass, the matrix is a magic square\n    return True\n",
        "test": "assert magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]]) == True",
        "num_ids": 1963,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Using a defaultdict to store the count of each element in the list\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_count = 0\n    max_item = None\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1026,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return \"\".join(s)",
        "test": "assert reverse_vowels(\"leetcode\") == \"leotcede\"",
        "num_ids": 1033,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(map(str, tup1))",
        "test": "assert tup_string((1, 2, 3)) == \"1,2,3\"",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 352,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n",
        "test": "assert zero_count(array('i', [1, 2, 3, 0, 4, 5, 0, 6, 0])) == 0.5 ",
        "num_ids": 1003,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the input number to binary form\n    binary_str = bin(n)[2:]\n\n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers = 0\n\n    # Iterate over the binary string and calculate the sum of powers of 2\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1':\n            sum_of_powers += 2**(len(binary_str)-i-1)\n\n    # Return True if the sum of powers is equal to the input number\n    return sum_of_powers == n\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(12) == True",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "test": "assert circle_circumference(0) == 0, \"Incorrect value\"",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def extract_singly(test_list):\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)\n",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    \n    # Traverse through all array elements\n    for i in range(n):\n        \n        # Find the maximum element in remaining unsorted array\n        max_idx = get_max_idx(nums, i, n)\n        \n        # Reverse the maximum element to the start of the array\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        \n        # Reverse the entire array\n        nums[:] = reversed(nums[:])\n        \n    return nums\n    \ndef get_max_idx(nums, start, end):\n    '''\n    Find the index of the maximum element in a given range of array elements.\n    '''\n    max_idx = start\n    \n    for j in range(start+1, end):\n        if nums[j] > nums[max_idx]:\n            max_idx = j\n            \n    return max_idx\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3 ",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1, 2, 3)) == 0",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 0:\n        return None\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4, \"Test case 1 failed\"",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    def extended_gcd(a, b):\n        '''\n        Helper function that computes the gcd and Bezout's coefficients of two integers using the extended Euclidean algorithm.\n        '''\n        if b == 0:\n            return (a, 1, 0)\n        else:\n            d, x, y = extended_gcd(b, a % b)\n            return (d, y, x - (a // b) * y)\n\n    def solve(a, b, n):\n        '''\n        Helper function that computes the solution of ax + by = n using Bezout's coefficients.\n        '''\n        d, x, y = extended_gcd(a, b)\n        if n % d != 0:\n            return None\n        else:\n            return (x * (n // d), y * (n // d))\n\n    return solve(a, b, n)\n",
        "test": "assert find_solution(1, 2, 2) == (-1, 1)",
        "num_ids": 1704,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [6, 7]) == [1, 2, 3, 4, 5]",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum\n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 670,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    theta = (s-2)*pi/s\n    area = (l**2)/4 * tan(theta/2)\n    return area\n",
        "test": "assert area_polygon(8, 6) == 24",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def div_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same as the sum of the divisors of n+1.\n    Otherwise, it returns False.\n    \"\"\"\n    def sum_divisors(num):\n        \"\"\"\n        This function takes an integer num as input and returns the sum of its divisors.\n        \"\"\"\n        divisor_sum = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                if num // i == i:\n                    divisor_sum += i\n                else:\n                    divisor_sum += i\n                    divisor_sum += num // i\n        return divisor_sum\n\n    return sum_divisors(n) == sum_divisors(n+1) ",
        "test": "assert div_sum(40) == False",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i+97):\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"AbcDe\") == 5 ",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([0, 1, 2, 3]) == 2 # [0, 2] and [1, 3]",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # If n is zero, return 1\n    if n == 0:\n        return 1\n    \n    # Find the highest set bit (largest power of 2 factor) in n\n    highest_bit = 0\n    while (n & (1 << highest_bit) != 0):\n        highest_bit += 1\n    \n    # Return the next power of 2 greater than or equal to n\n    return 1 << highest_bit\n",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5], 3) == 1",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1,2,3,4,5], 0, 2) == 6",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter\n",
        "test": "assert perimeter_pentagon(10) == 10 * 5, \"The perimeter of a pentagon with side length 10 is incorrect\"",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] == 'std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count\n",
        "test": "assert count_occurance(\"This is a std string\") == 1",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        data_type = type(test_tuple[0])\n        for i in range(1, len(test_tuple)):\n            if type(test_tuple[i]) != data_type:\n                return False\n        return True\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 745,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_majority(arr, n, x):\n    # first, check if x is present in arr\n    if x not in arr:\n        return False\n    \n    # calculate the index of the last occurrence of x in arr\n    last_index = len(arr) - 1 - arr[::-1].index(x)\n    \n    # check if x occurs more than n/2 times in arr\n    if arr.count(x) > n//2:\n        return True\n    \n    # check if x is the majority element\n    # we can do this by checking if there are at least n/2 - 1 elements between\n    # the first and last occurrence of x in arr, inclusive\n    return arr.count(x) > (n - last_index - 1) // 2\n",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 6) == False",
        "num_ids": 1275,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Returns the minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)",
        "test": "assert min_of_three(3,5,2) == 2",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    mask = (1 << r) - (1 << l-1)\n    return n & mask == mask\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b1111111111111111111111111, 5, 8) == True, \"Incorrect result\"",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def re_arrange_array(arr, n):\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    neg.sort(reverse=True)\n    pos.sort()\n    arr[0:n] = neg + pos\n    return arr\n",
        "test": "assert re_arrange_array([1, -2, -3, 4, 5], 3) == [-2, -3, 1, 4, 5] # test negative elements",
        "num_ids": 1447,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            new_str += char\n        else:\n            new_str += str1[i]\n    return new_str\n",
        "test": "assert replace_blank(\"hello world\", \"_\") == \"hello_world\"",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    min_heap = list1[:n]\n    heapq.heapify(min_heap)\n\n    # iterate through the remaining items in the list\n    for item in list1[n:]:\n        # if the current item is larger than the smallest item in the heap\n        if item > min_heap[0]:\n            # remove the smallest item from the heap\n            heapq.heappop(min_heap)\n            # add the current item to the heap\n            heapq.heappush(min_heap, item)\n\n    # return a list of the n largest items in descending order\n    return sorted(min_heap, reverse=True)\n",
        "test": "assert larg_nnum([5,2,8,4,3],2) == [8, 5] ",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * 3.14 * r * h\n    return lateral_area\n",
        "test": "assert lateralsuface_cylinder(0, 3) == 0, \"Incorrect value for lateralsurface_cylinder with r=0 and h=3\" ",
        "num_ids": 861,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n & -n)\n",
        "test": "assert even_bit_set_number(0b00000000) == 0b00000000",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # Create a Counter object from the list of tuples\n    count = Counter(test_list)\n    \n    # Convert the Counter object to a dictionary and return it\n    return dict(count)\n",
        "test": "assert check_occurences([(1, 2), (2, 1), (1, 2), (1, 2), (2, 1)]) == {(1, 2): 3, (2, 1): 2} ",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j] != '':\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 573,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize an empty list to store all possible sequences\n    sequences = []\n    # Start with the base case of a sequence with only one element\n    sequences.append([m])\n    # Loop through all possible lengths of sequences\n    for i in range(1, n):\n        # Initialize an empty list to store all sequences of length i+1\n        new_sequences = []\n        # Loop through all existing sequences of length i\n        for seq in sequences:\n            # Calculate the minimum and maximum values for the next element\n            min_val = seq[-1] * 2\n            max_val = m\n            # If the minimum value is greater than the maximum, there are no valid options\n            if min_val > max_val:\n                continue\n            # Loop through all possible values for the next element\n            for j in range(min_val, max_val+1):\n                # Create a new sequence by appending the next element\n                new_seq = seq.copy()\n                new_seq.append(j)\n                # Append the new sequence to the list of all sequences\n                new_sequences.append(new_seq)\n        # Update the list of all sequences with the new sequences\n        sequences.extend(new_sequences)\n    # Return the total number of sequences found\n    return len(sequences)\n",
        "test": "assert get_total_number_of_sequences(10, 3) == 1",
        "num_ids": 1266,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < 1 or len(list2) < 1:\n        print(\"Error: both lists must have at least one element\")\n        return None\n\n    list1[-1] = list2[0]\n    for i in range(1, len(list2)):\n        list1.append(list2[i])\n\n    return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5]) == [1, 2, 4, 5]",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"Hello, world!\") == 13",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N += 1\n        if math.sqrt(N) == int(math.sqrt(N)):\n            return N\n",
        "test": "assert next_Perfect_Square(12) == 16",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_sum(arr):\n    # Initialize two variables to keep track of the maximum sum found so far\n    max_sum_so_far = 0\n    max_sum_ending_here = 0\n    \n    # Iterate over the array from left to right\n    for i in range(len(arr)):\n        # If the current element is greater than the previous element, add it to the current maximum sum\n        if arr[i] > arr[i-1]:\n            max_sum_ending_here += arr[i]\n        # If the current element is less than the previous element, update the maximum sum found so far\n        else:\n            max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n            max_sum_ending_here = 0\n    \n    # Update the maximum sum found so far one last time\n    max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n    \n    # Return the maximum sum found\n    return max_sum_so_far\n",
        "test": "assert max_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 0",
        "num_ids": 1694,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize variables\n    guess = number\n    prev_guess = 0\n    diff = 1\n    \n    # Loop until the difference between guesses is less than 0.00001\n    while diff > 0.00001:\n        # Calculate new guess\n        guess = (guess + number/guess) / 2\n        \n        # Calculate the difference between the new and previous guess\n        diff = abs(guess - prev_guess)\n        \n        # Update the previous guess\n        prev_guess = guess\n    \n    # Return the square root\n    return guess\n",
        "test": "assert babylonian_squareroot(1) == 1 ",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def lps(str): \n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_length = 1\n    for i in range(n):\n        dp[i][i] = 1\n        if i < n - 1 and str[i] == str[i + 1]:\n            dp[i][i + 1] = 2\n            max_length = 2\n    \n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j] and dp[i + 1][j - 1] != 0:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n            max_length = max(max_length, dp[i][j])\n    \n    return max_length\n",
        "test": "assert lps(\"bbbab\") == 4, \"lps('bbbab') should return 4\"",
        "num_ids": 1400,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert intersection_array([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == [2, 4]",
        "num_ids": 792,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_X(tup, x):\n    '''\n    This function counts the number of times an element occurs in a tuple.\n    \n    Parameters:\n        tup (tuple): The tuple to search for the element in.\n        x (object): The element to search for in the tuple.\n    \n    Returns:\n        int: The number of times x occurs in tup.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3,4,5), 5) == 1",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Given a list and an element, insert the element before each element in the list and return the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3] # expected output [0, 1, 0, 2, 0, 3]",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        r = cmath.polar(number)[0]\n        theta = cmath.polar(number)[1]\n        print(f\"{number} = {r} * e^(j{theta})\")",
        "test": "assert convert(-1+2j) == (2.23606797749979, 2.107342529918564)",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1,2,3,4,5]) == 5",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors(['R','G','B'], 2) == [('R', 'R'), ('R', 'G'), ('R', 'B'), ('G', 'G'), ('G', 'B'), ('B', 'B')]",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1,2) == (2, 1)",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import random\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sieve_of_pseudo_random_primes(n, k):\n    primes = []\n    q = n - k\n    for i in range(2, n + 1):\n        if i >= q and not primes or i == q + primes[-1]:\n            if is_prime(i):\n                primes.append(i)\n        else:\n            j = 0\n            composite = i\n            while composite < n:\n                composite = primes[j] * (i - primes[j] + 1) + primes[j] - 1\n                j += 1\n            if j == len(primes) or primes[j] > composite:\n                primes.append(composite)\n                while composite < n:\n                    composite = primes[j] * (composite - primes[j] + 1) + primes[j] - 1\n                    primes.append(composite)\n    return primes\n\ndef newman_prime(n):\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    k = 1\n    while True:\n        primes = sieve_of_pseudo_random_primes(n, k)\n        if len(primes) == n:\n            return primes[-1]\n        k += 1",
        "test": "assert newman_prime(2) == 11",
        "num_ids": 2191,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the tuples is the same\n    if len(test_tup1) != len(test_tup2):\n        return None\n    \n    # Perform the division element-wise and store the result in a new tuple\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(None)\n    \n    # Return the result tuple\n    return tuple(result)\n",
        "test": "assert division_elements((10, 20, 30), (4, 5, 6)) == (2.5, 4, 5)",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    list2 = list1[L:]\n    list1 = list1[:L]\n    return (list1, list2)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == ([1, 2, 3, 4, 5], [6, 7, 8, 9])",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_ratio = 7 # 1 human year = 7 dog years\n    d_age = h_age * age_ratio\n    return d_age\n",
        "test": "assert dog_age(1) == 7",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    sublist = []\n    for i, element in enumerate(S):\n        sublist.append(element)\n        if (i+1) % step == 0:\n            result.append(sublist)\n            sublist = []\n    if sublist:\n        result.append(sublist)\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while n > 0:\n        sum += i ** 2\n        i += 2\n        n -= 1\n    return sum\n",
        "test": "assert square_Sum(10) == 220",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_star_num(n):\n    '''\n    Returns the nth star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + ' *'\n",
        "test": "assert find_star_num(1) == \"*\"",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 403,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    # initialize sum to 0\n    sum = 0\n    # loop through the list\n    for i in range(len(arr)):\n        # if the element at i is even and i is even, add to sum\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    # return the sum\n    return sum\n",
        "test": "assert sum_even_and_even_index([2, 4, 6, 8, 10]) == 18",
        "num_ids": 789,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 2\n    while n > 0:\n        sum += i ** 5\n        n -= 1\n        i += 2\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n",
        "test": "assert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9] ",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((2, 4, 6), (1, 2, 3)) == (1, 2, 3)",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1):\n        sum += math.comb(n, i) * (i//2)\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the volume.\n    '''\n    return 3.14159*(r**2)*h\n",
        "test": "assert volume_cylinder(0, 5) == 0, \"Volume is incorrect\"",
        "num_ids": 553,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def dict_filter(my_dict, n):\n    \"\"\"\n    Filter a dictionary to only include entries with values greater than or equal to n.\n\n    :param my_dict: Dictionary to be filtered.\n    :param n: Integer threshold.\n    :return: Filtered dictionary.\n    \"\"\"\n    filtered_dict = {k: v for k, v in my_dict.items() if v >= n}\n    return filtered_dict\n",
        "test": "assert dict_filter({\"a\": 5, \"b\": 3, \"c\": 7}, 5) == {\"a\": 5, \"c\": 7}",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count\n",
        "test": "assert count_first_elements((1,2,3,4,5)) == 0",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    i = 1\n    while i <= n:\n        decagonal = i * (3 * i - 1) // 2\n        if decagonal == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1500,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2), \"sequential_search function returns incorrect result for [1, 2, 3, 4, 5], 3\"",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_elements = set(test_list)\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True, \"Error: all_unique([1, 2, 3, 4, 5]) should return True.\"",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Subtract two lists element-wise.\n    '''\n    # Check if the lengths of the two lists are equal\n    if len(nums1) != len(nums2):\n        return \"Lists must have the same length\"\n\n    # Subtract the two lists element-wise\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n\n    return result\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]",
        "num_ids": 815,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def validate(n):\n    '''\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert integer to string\n    n_str = str(n)\n    # create a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in n_str:\n        freq[digit] = freq.get(digit, 0) + 1\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if int(digit) < count:\n            return False\n    return True\n",
        "test": "assert validate(12345) == True",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_element(lst, elem):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == elem for item in lst)\n",
        "test": "assert check_element([1, 1, 1], 1) == True, \"Error: check_element([1, 1, 1], 1) should be True\"",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('abbb') == True",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a new array 'b' by repeating 'a' 'k' times\n    b = a * k\n    # find the maximum sub-array sum in 'b'\n    max_sum = max_sub_array_sum(b, len(b))\n    return max_sum\n\n\ndef max_sub_array_sum(a, n):\n    '''\n    Returns the maximum sum of a contiguous sub-array in the given array 'a' of size 'n'.\n    '''\n    max_sum = a[0]\n    max_ending_here = a[0]\n    for i in range(1, n):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_sum = max(max_sum, max_ending_here)\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 8, 4) == 7 # for [-2, -3, 4, -1, -2, 1, 5, -3] * 4",
        "num_ids": 1715,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for lst in list1:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a list to store the number of ways for each color\n    ways = [0] * k\n    # Initialize a list to store the number of ways for each color and a previous color\n    prev_ways = [0] * k\n    \n    # Base cases\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    \n    # Compute the number of ways for each color for the first 2 posts\n    for i in range(k):\n        prev_ways[i] = 1\n    \n    # Compute the number of ways for each color for the remaining posts\n    for i in range(2, n):\n        for j in range(k):\n            ways[j] = 0\n            for l in range(k):\n                if l == j:\n                    ways[j] += prev_ways[l]\n                else:\n                    ways[j] += prev_ways[l] * k\n        prev_ways = ways[:]\n        \n    # Return the sum of the number of ways for each color\n    return sum(ways)\n",
        "test": "assert count_no_of_ways(1, 2) == 2",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find(n, m):\n    '''\n    Find the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient\n",
        "test": "assert find(5, 2) == 2",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    if w == 0 or h == 0:\n        return \"Invalid input\"\n    elif w == h:\n        return \"No third side\"\n    else:\n        side_c = math.sqrt(w**2 + h**2)\n        return side_c\n",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 607,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for value in listval:\n        if isinstance(value, (int, float)):\n            if value > max_value:\n                max_value = value\n    return max_value\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5 ",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)",
        "test": "assert sum_div(0) == 0  # 0 has no divisors",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n                global inv_count\n                inv_count += len(left_half) - i\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n\ndef get_Inv_Count(arr):\n    global inv_count\n    inv_count = 0\n    merge_sort(arr)\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1782,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([1, 2, [3, 4, [5, 6]], 7]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for tup in stdata:\n        aggregate = sum(tup)\n        if aggregate > max_agg:\n            max_agg = aggregate\n    return max_agg",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6)]) == 11",
        "num_ids": 1147,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_binary_seq(n):\n    def count(m):\n        if m == 0:\n            return 1\n        return count(m-1) + count(m-1) + count(m-2)\n    return count(n//2)\n",
        "test": "assert count_binary_seq(0) == 1 ",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0\n",
        "test": "assert dict_depth({\"a\": 1, \"b\": {\"c\": 2}}) == 2",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    for i in range(len(arr)):\n        if index >= ranges[i] and index < ranges[i+1]:\n            index = index - ranges[i] + ranges[i+1] - 1\n            return arr[index]\n",
        "test": "assert find_Element([1, 2, 3, 4, 5, 6, 7], [0, 0, 1, 2, 3], [0, 0, 0, 0, 0], 0) == 1",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Create a regular expression pattern to match words starting with 'p'\n    pattern = re.compile(r'^p\\w*')\n    \n    # Filter the list of words using the pattern\n    p_words = list(filter(pattern.match, words))\n    \n    # Return the first two words from the filtered list\n    return p_words[:2]\n",
        "test": "assert start_withp(['python', 'programming', 'practice', 'poem']) == ['python', 'programming'] ",
        "num_ids": 908,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n\n    # Initialize a list to store the maximum sum of increasing subsequence ending at each index\n    max_sum = [0] * (n+1)\n\n    # Set the maximum sum of increasing subsequence ending at index 0 to be the first element of the list\n    max_sum[0] = a[0]\n\n    # Iterate over the list starting from the second element\n    for i in range(1, n):\n\n        # Set the maximum sum of increasing subsequence ending at index i to be the maximum of either the current element or the maximum sum of increasing subsequence ending at the previous index plus the current element\n        max_sum[i] = max(max_sum[i-1] + a[i], a[i])\n\n    # Initialize a variable to store the maximum sum of increasing subsequence from prefix until i-th index\n    max_sum_prefix = 0\n\n    # Iterate over the list starting from the first element up to i-th index\n    for j in range(i):\n\n        # If the current element is greater than the kth element, update the maximum sum of increasing subsequence from prefix until i-th index\n        if a[j] < a[k-1]:\n            max_sum_prefix = max(max_sum_prefix, a[j])\n\n    # Return the sum of maximum sum of increasing subsequence from prefix until i-th index and maximum sum of increasing subsequence ending at the kth index\n    return max_sum_prefix + max_sum[k-1]\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 3) == 8, \"Test case 2 failed\"",
        "num_ids": 1802,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n]\n",
        "test": "assert colon_tuplex(('a','b','c','d','e','f','g','h'),2,6) == ('c','d','e','f')",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([2, 3, 4], [5, 6, 7], 2) == 210 ",
        "num_ids": 1028,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(5, 8) == 8",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n + 1)    \n",
        "test": "assert set_left_most_unset_bit(0b0000) == 0b0001",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * r**2 * h) / 3\n",
        "test": "assert volume_cone(0,0) == 0 ",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a Python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2\n    highest_power = 0\n    \n    # Iterate through the range of powers of 2 until we reach n\n    for i in range(1, n+1):\n        # If i is a power of 2 and less than or equal to n, update the highest_power variable\n        if i & (i-1) == 0 and i <= n:\n            highest_power = i\n            \n    # Return the highest power of 2\n    return highest_power\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the n'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2, \"find_lucas(0) should return 2\"",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list\n",
        "test": "assert add_string([1, 2, 3], '{}') == ['1', '2', '3']",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "test": "assert convert_list_dictionary([\"apple\", \"banana\", \"cherry\"], [\"orange\", \"grape\", \"kiwi\"], [\"pear\", \"mango\", \"pineapple\"]) == {'apple': {'orange': {'pear': {}}, 'grape': {'mango': {}}, 'kiwi': {'pineapple': {}}}}  # This is the expected output of the function for the given input lists. ",
        "num_ids": 1134,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_max_sum(n):\n    if n < 5:\n        return n\n    \n    max_sum = max(get_max_sum(n // 2), get_max_sum(n // 3), get_max_sum(n // 4), get_max_sum(n // 5))\n    return max_sum",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = []\n    max_length = 0\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[], [1], [2, 3]]) == [2, 3]",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    # Create an empty set\n    unique_set = set()\n    \n    # Iterate through the tuple and add each element to the set\n    for item in test_tup:\n        unique_set.add(item)\n    \n    # Check if the length of the set is the same as the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # find the first character with frequency 1 in the string\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    # if no non-repeating character found, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 957,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Check if the string matches the regular expression\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('aa') == True",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # create a list containing the three numbers\n    numbers = [a, b, c]\n    # sort the list in ascending order\n    numbers.sort()\n    # return the middle number\n    return numbers[1]\n",
        "test": "assert median_numbers(1, 2, 3) == 2",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sums = []\n    for num in nums:\n        digit_sum = 0\n        while num != 0:\n            digit_sum += num % 10\n            num //= 10\n        sums.append(digit_sum)\n    return sums\n",
        "test": "assert sum_of_digits([12, 34, 56]) == [3, 7, 11]",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Convert the tuples to lists\n    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    \n    # Iterate through the lists and perform bitwise xor operation on each corresponding element\n    result_list = []\n    for i in range(len(tup1)):\n        result_list.append(tup1[i] ^ tup2[i])\n    \n    # Convert the result list back to a tuple\n    result_tup = tuple(result_list)\n    \n    return result_tup\n",
        "test": "assert bitwise_xor((0, 1, 0, 1), (1, 0, 1, 0)) == (1, 1, 1, 1) # check if the bitwise xor of two tuples is correct ",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) in freq_dict:\n            freq_dict[tuple(item)] += 1\n        else:\n            freq_dict[tuple(item)] = 1\n    return len(freq_dict)\n",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tuple = tuple()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            result_tuple += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            result_tuple += (test_tup1[i] + test_tup2[i],)\n    return result_tuple\n",
        "test": "assert add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9) # checks if the function is returning the correct output for given input",
        "num_ids": 1087,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(4, 7) == 4",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function checks whether a given element exists within a tuple or not.\n    If the element is present, the function returns True, else it returns False.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1,2,3), 2) == True",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "test": "assert find_Parity(2) == False, \"find_Parity(2) should be False\"",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    n = list(str(n))\n    n.sort(reverse=True)\n    return int(''.join(n))\n",
        "test": "assert rearrange_bigger(4321) == 4321",
        "num_ids": 1173,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # create a min heap of size k\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            # add the current pair to the heap\n            pair = (nums1[i] + nums2[j], nums1[i], nums2[j])\n            if len(heap) < k:\n                heapq.heappush(heap, pair)\n            else:\n                # if the heap is full and the current pair is smaller than the current top pair,\n                # remove the current top pair and add the current pair to the heap\n                if pair < heap[0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, pair)\n    # return the k pairs in the heap in sorted order\n    return sorted([(num1, num2) for _, num1, num2 in heap])\n",
        "test": "assert k_smallest_pairs([1, 2, 3], [4, 5, 6], 2) == [(1, 4), (1, 5)]",
        "num_ids": 1631,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(2,3), (4,5), (6,7)]) == 2*3*4*5",
        "num_ids": 1026,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if isinstance(val, (int, float)) and val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert min_val([1, 2, 3]) == 1",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the snake case string into words using regex\n    words = re.findall(r'[a-z]+', word)\n\n    # Convert each word to camel case and combine all words\n    camel_case = words[0].lower()\n    for w in words[1:]:\n        camel_case += w.capitalize()\n    \n    return camel_case\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n",
        "test": "assert remove_odd([1,2,3,4,5]) == [2,4]",
        "num_ids": 607,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    for i in range(len(list1)):\n        if n == i:\n            return list1[i]\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 0) == (1, 2)",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def overlapping(list1, list2):\n    '''\n    Returns True if any value in list1 also appears in list2, False otherwise.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[2,3,4]) == True # Overlapping elements in both lists",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_Product(arr):\n    '''\n    Write a Python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = 0\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return max1*max2\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20, \"Incorrect output for [1, 2, 3, 4, 5]\"",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    count = {}\n    for i in Input:\n        if i[0] in count:\n            count[i[0]] += 1\n        else:\n            count[i[0]] = 1\n    \n    common_elements = [k for k,v in count.items() if v > 1]\n    \n    return common_elements\n",
        "test": "assert group_tuples([(1, 2, 3), (1, 4, 5), (6, 7, 8)]) == [1]",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max(['cat', 'elephant', 'rat']) == 'elephant'",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    return total * len(list1)\n",
        "test": "assert round_and_sum([1.2, 3.45, 6.789]) == 3.0 * (round(1.2) + round(3.45) + round(6.789))",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    # loop through the even numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add the cube of the current number to the sum\n        sum += i**3\n    return sum",
        "test": "assert cube_Sum(1) == 1",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for i in test_tup:\n        result += str(i)\n    return result\n",
        "test": "assert concatenate_tuple(('hello', 'world')) == 'helloworld'",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum / n\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return tuple(rear_elements)\n",
        "test": "assert extract_rear((\"123\", \"456\", \"789\")) == (\"3\", \"6\", \"9\")",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 1) == 0",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 != 0, nums))",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5] ",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return \"Invalid date format\"\n",
        "test": "assert change_date_format('2021-05-05') == '05-05-2021' ",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([4, 1, 2, 8, 5]) == [1, 2, 4, 5, 8]",
        "num_ids": 1118,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise AND tuples from the given two tuples.\n    \"\"\"\n    result_tup = tuple(a and b for a, b in zip(test_tup1, test_tup2))\n    return result_tup\n",
        "test": "assert and_tuples((True, False, True), (True, True, False)) == (True, False, False)",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Find the directrix of a parabola given the coefficients a, b, and c.\n    '''\n    # Find the vertex of the parabola\n    x_vertex = -b / (2 * a)\n    y_vertex = c - (a * x_vertex ** 2)\n    \n    # Find the directrix\n    directrix = -x_vertex / a\n    \n    return directrix\n",
        "test": "assert parabola_directrix(2, 2, -3) == -1 # if a=2, b=2, c=-3, then the directrix is -1",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1,2,3], [4,5,6]) == False # no common element",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    This function takes three parameters, the two bases and the height of a trapezium,\n    and calculates the median length of the trapezium.\n    \"\"\"\n    area = (base1 + base2) / 2 * height\n    median = (2 * area) / (base1 + base2)\n    return median\n",
        "test": "assert median_trapezium(4,6,3) == 4.5",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False\n",
        "test": "assert check_greater([1,2,3], 5) == True",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one('ab')",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1,2,-3,4,-5]) == [-3,-5]",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"12345\") == \"\"",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j] or test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2), (2,3), (3,4), (4,5), (5,6)]) == 0",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in L))\n",
        "test": "assert multiple_to_single([1,2,3]) == 123",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # find all adverbs in the sentence using regex\n    adverb_list = re.findall(r'\\b\\w*ly\\b', text)\n\n    # check if there are any adverbs in the sentence\n    if adverb_list:\n        # find the position of the first adverb in the sentence\n        position = text.find(adverb_list[0])\n        # print the position and the adverb\n        print(\"The position of the first adverb is:\", position)\n        print(\"The adverb is:\", adverb_list[0])\n    else:\n        # print message if no adverbs are found in the sentence\n        print(\"No adverbs found in the sentence.\")\n",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog.\") == [(1, \"quick\")]",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n",
        "test": "assert surfacearea_cube(2) == 24",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n\n    total_count = pos_count + neg_count + zero_count\n    pos_ratio = pos_count / total_count\n\n    return pos_ratio\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > largest_neg:\n                largest_neg = num\n    return largest_neg\n",
        "test": "assert largest_neg([1, -2, 3, -4, 5]) == -2 # expected output: -2",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[:K])\n    return trimmed_list\n",
        "test": "assert trim_tuple([(1,2,3,4,5,6,7,8,9,10), (5,6,7,8,9,10,11,12,13,14), (1,2,3,4,5,6,7,8,9)], 5) == [(1, 2, 3, 4, 5), (5, 6, 7, 8, 9), (1, 2, 3, 4, 5)] ",
        "num_ids": 1037,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "test": "assert index_multiplication((2, 4, 6), (3, 2, 1)) == (6, 8, 6)",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    result_dict = {}\n    for item in lst:\n        if item in count_dict:\n            result_dict[item] = count_dict[item]\n    return result_dict\n",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,2,3,4,5]) == Counter({1: 1, 2: 1, 3: 1, 4: 1, 5: 1})",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cube_list = []\n    for num in nums:\n        cube_list.append(num ** 3)\n    return cube_list",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    \n    if n <= 0:\n        return 0\n    \n    sum = 1\n    \n    # initialize variables for loop\n    prev = 1\n    curr = 1\n    \n    for i in range(2, n+1):\n        # calculate next number in the sequence\n        next = prev + curr\n        # update variables for next iteration\n        prev = curr\n        curr = next\n        # add current number to sum\n        sum += curr\n        \n    return sum\n",
        "test": "assert cal_sum(1) == 1",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_string(lst, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:size] for s in lst]\n",
        "test": "assert extract_string([], 2) == []",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2\n",
        "test": "assert remove_whitespaces(\"This is a test string\") == \"Thisisateststring\"",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 75) == 25",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef sumofFactors(n):\n    sum = 0\n    i = 1\n    while i <= n/2:\n        if n%i == 0:\n            sum += i\n        i += 1\n    return sum",
        "test": "assert sumofFactors(12) == 1+2+3+4+6 # should return 16",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert text_match_wordz(\"Hello\") == []",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return False\n    elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == 1 ",
        "num_ids": 796,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_list = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_list = sublist\n    return min_list\n",
        "test": "assert Find_Min([]) == []",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes two parameters: length and breadth of a rectangle and returns its area.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(5, 6) == 30  # Check if the area of a rectangle is 30",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_uppercase('hello WORLD') == 'hello WORLD'",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1, 4, 7]",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr('Hello World!') == 2",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    # Convert the list to a set to remove duplicates\n    set1 = set(list1)\n    \n    # Create an empty list to hold all combinations\n    combinations = []\n    \n    # Loop through each element of the set\n    for elem in set1:\n        # Create a new list and add the current element to it\n        new_list = [elem]\n        \n        # Loop through each remaining element of the set\n        for other_elem in set1 - {elem}:\n            # Add each combination of the current element and the remaining elements\n            new_list.append(other_elem)\n            combinations.append(new_list[:])\n            \n            # Add the current element to each combination of the remaining elements\n            new_list.append(elem)\n            combinations.append(new_list[:])\n            new_list.pop()\n            \n    return combinations\n",
        "test": "assert combinations_list([1, 2, 3]) == [[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]] ",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        max_so_far = max(max_so_far, max_product)\n    \n    return max_so_far\n",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6 ",
        "num_ids": 1166,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_value(dict, n):\n    '''\n    Check if all values in a dictionary are the same.\n    \n    Args:\n    dict (dict): The dictionary to check.\n    n (int): The number of values to check.\n    \n    Returns:\n    bool: True if all values are the same, False otherwise.\n    '''\n    \n    # Get the first value in the dictionary\n    first_value = list(dict.values())[0]\n    \n    # Check if all values in the dictionary are the same as the first value\n    for value in list(dict.values())[1:]:\n        if value != first_value:\n            return False\n    \n    # All values are the same\n    return True\n",
        "test": "assert check_value({1: 2, 3: 2}, 2) == True",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result_dict = {k: v for k, v in dict1.items() if v}\n    return result_dict\n",
        "test": "assert drop_empty({'a': 1, 'b': 2, 'c': ''}) == {'a': 1, 'b': 2}",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            max_product = max(max_product, product)\n    return max_product\n",
        "test": "assert max_product([-1, 2, 3, 4, 5]) == 20",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    new_tup = ()\n    for i in range(len(test_tup) - 1):\n        new_tup += (test_tup[i] + test_tup[i+1],)\n    return new_tup\n",
        "test": "assert add_pairwise((1, 2, 3, 4, 5)) == (3, 5, 7, 9)",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n",
        "test": "assert find_remainder([2, 3, 4], 5) == 4, \"Test case 1 failed\"",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                intersection.append(tup1)\n                break\n    return intersection\n",
        "test": "assert tuple_intersection(((1, 2), (2, 3), (3, 4)), ((2, 1), (3, 2), (4, 3))) != ((1, 2), (2, 3), (3, 4))",
        "num_ids": 1048,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str",
        "test": "assert replace_char('hello world', 'l', 'L') == 'heLLo worLd'",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert sort_counter({'a': 1, 'b': 2, 'c': 3}) == {'c': 3, 'b': 2, 'a': 1}",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    nums.sort()\n    smallest = nums[0]\n    largest = nums[-1]\n    \n    return smallest + largest\n",
        "test": "assert big_sum([1,2,3,4,5]) == 6",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower('HELLO WORLD') == 'hello world'",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Using regular expression to find all lowercase substrings and replace them with empty string\n    pattern = re.compile(r'[a-z]+')\n    result = re.sub(pattern, '', str1)\n    return result\n",
        "test": "assert remove_lowercase(\"Hello world\") == \"Hello world\"",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 479,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def first_digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n = n // 10\n    return n\n",
        "test": "assert first_Digit(0) == 0 # check if it returns 0 for 0",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def Split(lst):\n    '''\n    Returns a list containing only the odd integers from the input list.\n    '''\n    result = []\n    for num in lst:\n        if num % 2 != 0:\n            result.append(num)\n    return result\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n\n    return sum_of_cubes - sum_of_numbers\n",
        "test": "assert difference(0) == 0, \"Test failed for n = 0\"",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1,3,5,7,9],5) == 0, \"Test case failed\"",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()\n",
        "test": "assert toggle_string('Hello, World!') == 'hELLO, wORLD!'",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # find the minimum length of the two strings\n    min_len = min(len(n1_str), len(n2_str))\n\n    # iterate through the digits of the two strings and calculate the per-digit difference\n    for i in range(min_len):\n        diff = abs(int(n1_str[i]) - int(n2_str[i]))\n        sum_diff += diff\n\n    # add the difference between the remaining digits of the longer string\n    if len(n1_str) > len(n2_str):\n        for i in range(min_len, len(n1_str)):\n            diff = abs(int(n1_str[i]) - 0)\n            sum_diff += diff\n    elif len(n2_str) > len(n1_str):\n        for i in range(min_len, len(n2_str)):\n            diff = abs(int(n2_str[i]) - 0)\n            sum_diff += diff\n\n    return sum_diff\n",
        "test": "assert digit_distance_nums(987, 654) == 9, \"Incorrect result for digit_distance_nums(987, 654)\"",
        "num_ids": 1181,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far",
        "test": "assert max_sub_array_sum([1, 2, 3, -10, 5, 6, -2], 7) == 11",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    # Convert the set back to a tuple and sort it\n    result_tup = tuple(sorted(unique_set))\n    return result_tup\n",
        "test": "assert union_elements((1, 2, 3), (3, 4, 5)) != (1, 2, 3, 4) # check if the union of tuples (1, 2, 3) and (3, 4, 5) is not (1, 2, 3, 4)",
        "num_ids": 1145,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Returns the length of the longest sublist in a list.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        sublist = lst[i]\n        if type(sublist) == list:\n            sublist_len = len(sublist)\n            if sublist_len > max_len:\n                max_len = sublist_len\n    return max_len\n",
        "test": "assert Find_Max_Length([[1,2,3],[4,5],[6,7,8,9],[10],[11,12,13,14,15]]) == 5",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"(.*?)\"', text)\n    return values\n",
        "test": "assert extract_values('') == []",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"] ",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum\n",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n",
        "test": "assert sort_sublists([[\"zebra\", \"cat\", \"dog\"], [\"apple\", \"banana\", \"orange\"]]) == [[\"cat\", \"dog\", \"zebra\"], [\"apple\", \"banana\", \"orange\"]]",
        "num_ids": 738,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    result = []\n    for lst in nums:\n        for num in lst:\n            if num not in seen:\n                seen.add(num)\n                result.append(num)\n    return result\n",
        "test": "assert two_unique_nums([1, 1, 1, 2, 2, 3]) == [1, 2, 3] # True",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120 ",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    side_area = 2 * 3.14 * r * h\n    top_area = 3.14 * r ** 2\n    bottom_area = 3.14 * r ** 2\n    total_area = 2 * side_area + top_area + bottom_area\n    return total_area\n",
        "test": "assert surfacearea_cylinder(1, 2) == 12.56637061435917",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Checks whether a list B is sublist of another list A or not.\n    '''\n    n1 = len(A)\n    n2 = len(B)\n    \n    # Base cases\n    if n2 > n1:\n        return False\n    \n    # Traverse through the A and check if B is present or not\n    for i in range(n1-n2+1):\n        j = 0\n        while j < n2:\n            if A[i+j] != B[j]:\n                break\n            j += 1\n        \n        if j == n2:\n            return True\n    \n    return False\n",
        "test": "assert is_Sub_Array([1,2,3],[1,2]) == True, \"Error: is_Sub_Array([1,2,3],[1,2]) should return True\"",
        "num_ids": 809,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last_Digit_Factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Convert both tuples into sets to find the dissimilar elements\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the symmetric difference between two sets\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Return the dissimilar elements as a tuple\n    return tuple(dissimilar_elements)\n",
        "test": "assert find_dissimilar((1, 2, 3, 4), (2, 3, 4, 5)) == (1, 5)",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 580,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif isinstance(item, int):\n            if even_fnc(item):\n                new_tuple.append(item)\n    return tuple(new_tuple)\n",
        "test": "assert even_ele((1, 2, 3, 4, 5, 6), lambda x: isinstance(x, int) and x%2==0) == (2, 4, 6)",
        "num_ids": 1140,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base_area = b**2\n    slant_height = (b**2 + s**2) / (2*b)\n    side_area = 4 * (base_area/4)\n    triangular_area = 2*(b**2)/2\n    surface_area = (base_area + side_area + triangular_area)\n    return surface_area\n",
        "test": "assert surface_Area(1,1) == 1*1 + 4*1/2  # should be 2.5",
        "num_ids": 942,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    '''\n    Returns the nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    result = 0\n    for i in range(num):\n        result += catalan_number(i)*catalan_number(num-i-1)\n    return result\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern for adverbs ending with ly\n    pattern = r'\\b\\w+ly\\b'\n    # Use the re.search() method to find the first occurrence of the pattern in the text\n    match = re.search(pattern, text)\n    \n    if match:\n        # If a match is found, return the adverb and its position in the text\n        return match.group(), match.start()\n    else:\n        # If no match is found, return None\n        return None\n",
        "test": "assert find_adverbs(\"The dog barked loudly.\") == (['loudly'], [4])",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap to store the n most expensive items\n    heap = []\n    \n    # Iterate through the items and add them to the heap\n    for item in items:\n        # If the heap has less than n elements, add the item\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        # If the heap has n elements, check if the current item is more expensive\n        # than the smallest item in the heap and replace it if it is\n        else:\n            smallest = heap[0]\n            if item > smallest:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    # Return the n most expensive items in descending order\n    return sorted(heap, reverse=True)\n",
        "test": "assert expensive_items([('item1', 10), ('item2', 15), ('item3', 5), ('item4', 20), ('item5', 25)], 1) == [('item5', 25)]",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        return l[n:] + l[:n]\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 3) == [4, 5, 1, 2, 3]",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) - min(nums)\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4, \"Incorrect output\"",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math\n\ndef perfect_squares(a, b):\n    \"\"\"\n    Find all perfect squares between two given numbers.\n    \n    Parameters:\n    a (int): The lower bound of the search range.\n    b (int): The upper bound of the search range.\n    \n    Returns:\n    list: A list of all perfect squares between a and b (inclusive).\n    \"\"\"\n    result = []\n    for i in range(a, b+1):\n        sqrt_i = int(math.sqrt(i))\n        if sqrt_i**2 == i:\n            result.append(i)\n    return result",
        "test": "assert perfect_squares(1,10) == [1,4,9] # test case 1",
        "num_ids": 922,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_x = r * cmath.cos(theta)\n    rect_y = r * cmath.sin(theta)\n    return rect_x, rect_y\n",
        "test": "assert polar_rect(0,0) == (0,0)",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def binomial_Coeff(n, k):\n    # Calculate the co-efficient of k and n-k using the formula\n    # C(n, k) = C(n, n-k)\n    coeff = 1\n    if k > n-k:\n        k = n-k\n    # Calculate the co-efficient using the formula\n    # C(n, k) = (n!)/((k!)*(n-k)!)  where n! = (n*(n-1)*(n-2)*...*1)\n    for i in range(n-k):\n        coeff *= n-i\n        coeff /= i+1\n    return coeff\n\n\ndef sum_product_consecutive_binomial_coefficients(n):\n    # Initialize the sum and the previous binomial co-efficient\n    sum_coeff = 0\n    prev_coeff = 1\n    # Loop through all the values of k from 1 to n\n    for k in range(1, n+1):\n        # Calculate the current binomial co-efficient\n        curr_coeff = binomial_Coeff(n, k)\n        # Calculate the sum of the product of the previous and current binomial co-efficients\n        sum_coeff += prev_coeff * curr_coeff\n        # Update the previous binomial co-efficient\n        prev_coeff = curr_coeff\n    return sum_coeff\n",
        "test": "assert binomial_Coeff(0,0) == 1 ",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_parts = ip.split('.')\n    new_ip = ''\n    for part in ip_parts:\n        new_ip += str(int(part)) + '.'\n    return new_ip[:-1]\n",
        "test": "assert removezero_ip('192.168.001.002') == '192.168.1.2'",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return abs(even_num - odd_num)\n",
        "test": "assert diff_even_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1194,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # Convert the input strings into lists of digits\n    list1 = [int(d) for d in str1]\n    list2 = [int(d) for d in str2]\n\n    # Initialize two counters for the number of swaps required to get to str1 and str2 respectively\n    swaps_to_str1 = 0\n    swaps_to_str2 = 0\n\n    # Iterate through the two lists and count the number of swaps required to get to str1 and str2\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            # If the current digit is not already at the correct position, increment the swap counter for the target string\n            if list1[i] == 1 and list2[i] == 0:\n                swaps_to_str1 += 1\n            elif list1[i] == 0 and list2[i] == 1:\n                swaps_to_str2 += 1\n\n            # Swap the current digit with the one at the correct position\n            list1[i], list2[i] = list2[i], list1[i]\n\n    # Return the minimum number of swaps required\n    return min(swaps_to_str1, swaps_to_str2)\n",
        "test": "assert min_Swaps(\"1010\",\"0101\") == 2",
        "num_ids": 1589,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "test": "assert tuple_size(()) == sys.getsizeof(())",
        "num_ids": 1405,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_kth(arr1, arr2, k):\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 > n2:\n        return find_kth(arr2, arr1, k)\n    if n1 == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k // 2, n1)\n    j = k - i\n    if arr1[i-1] < arr2[j-1]:\n        return find_kth(arr1[i:], arr2, j)\n    else:\n        return find_kth(arr1, arr2[j:], i)\n",
        "test": "assert find_kth([1, 3, 5], [2, 4, 6], 1) == 1 # checks if the function returns the correct value when the kth element is in the first array ",
        "num_ids": 1360,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #initialize sum variable\n    sum = 0\n    temp = number\n    #find the number of digits in the number\n    length = len(str(number))\n    #loop through each digit and add its cube to the sum\n    for i in range(length):\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n    #if the sum is equal to the original number, it is an armstrong number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 937,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return (sum, average)\n",
        "test": "assert sum_average(5) == (15, 3)  # expected output should be (15, 3) ",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(0) == True",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\ndef is_lucid(num):\n    '''\n    Check if a number is a lucid number or not.\n    '''\n    num_str = str(num)\n    if len(num_str) == 1:\n        return True\n    num_set = set(num_str)\n    for i in range(1, len(num_str)):\n        if i not in num_set:\n            return False\n    for i in range(1, len(num_str)):\n        if int(num_str[i:]) not in num_set:\n            return False\n    return True\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1785,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of words\n    words = words[::-1]\n    # Join the reversed words with spaces\n    reversed_string = \" \".join(words)\n    # Return the reversed string\n    return reversed_string\n",
        "test": "assert reverse_words(\"hello world\") == \"world hello\"",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True # Test for the smallest prime number (2)",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians\n",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"The quick brown fox jumps over the lazy dog\", r'\\w+') == ('The', 0, 3)",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell = [1, 1]\n        for i in range(2, n+1):\n            bell.append(0)\n            for j in range(i):\n                bell[i] += bell[j]*bell[i-j-1]\n        return bell[n]\n",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # removing the kth element from the list\n    list1.pop(L-1)\n    return list1\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 723,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = float('-inf')\n    for row in test_list:\n        if row[N] > max_value:\n            max_value = row[N]\n    return max_value\n",
        "test": "assert max_of_nth([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 3) == 12",
        "num_ids": 1004,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst1 = []\n    lst2 = []\n    for sublist in lst:\n        lst1.append(sublist[0])\n        lst2.append(sublist[1])\n    return [lst1, lst2]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]] ",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    # Initialize the cumulative sum variable\n    cum_sum = 0\n    \n    # Create an empty list to store the cumulative sum\n    cumulative_sum_list = []\n    \n    # Loop through the tuple list and find the cumulative sum of all the values\n    for i in test_list:\n        cum_sum += i\n        cumulative_sum_list.append(cum_sum)\n    \n    return cumulative_sum_list\n",
        "test": "assert cummulative_sum([1,2,3]) == [1, 3, 6] ",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg_list.append(sum(tup)/len(tup))\n    return avg_list\n",
        "test": "assert average_tuple(((1,2,3),(4,5,6))) == [2,5]",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n",
        "test": "assert tuple_modulo((2, 4, 6), (3, 5, 7)) == (2, 4, 6) ",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def min_Jumps(steps, d):\n    i = 0\n    jumps = 0\n    while i < steps:\n        if i + d >= steps:\n            return jumps + 1\n        max_jump = min(steps - i, d)\n        for j in range(1, max_jump+1):\n            if i + j >= steps:\n                return jumps + 1\n            if (i + j) % d == 0:\n                i += j\n                jumps += 1\n                break\n    return -1\n",
        "test": "assert min_Jumps(20, 10) == 2 ",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1,2,3],[4,5,6]) == [0.25, 0.4, 0.5]",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create an empty list to store the numbers\n    nums = []\n    \n    # Create an empty list to store the non-numbers\n    not_nums = []\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is a number, add it to the nums list\n        if char.isdigit():\n            nums.append(char)\n        # Otherwise, add it to the not_nums list\n        else:\n            not_nums.append(char)\n    \n    # Join the two lists with an empty string in between\n    return ''.join(not_nums) + ''.join(nums)\n",
        "test": "assert move_num(\"1a2bc3\") == \"abc123\" ",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0]*n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\n",
        "test": "assert largest_subset([1,2,4,5,6]) == 3",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 1:\n        return get_median_odd(arr1, arr2, n)\n    else:\n        return get_median_even(arr1, arr2, n)\n\ndef get_median_odd(arr1, arr2, n):\n    '''\n    Helper function to find median of two sorted lists of same size (when n is odd).\n    '''\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return arr1[i-1] if i == n else arr2[j-1]\n\ndef get_median_even(arr1, arr2, n):\n    '''\n    Helper function to find median of two sorted lists of same size (when n is even).\n    '''\n    i = j = 0\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return (arr1[i] + arr2[j])/2\n    return (arr1[i-1] + arr2[j])/2 if i == n else (arr1[i] + arr2[j-1])/2\n",
        "test": "assert get_median([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5 ",
        "num_ids": 1792,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([2, 3, 4], 2) == [4, 9, 16] ",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = string.upper()\n    return upper_string\n",
        "test": "assert is_upper(\"HELLO\") == \"HELLO\"",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the semi-circle area\n    semi_area = math.pi * r * r\n    \n    # calculate the area of a right triangle with a 45 degree angle\n    right_triangle_area = r * r / 2\n    \n    # calculate the area of the largest possible triangle\n    largest_triangle_area = (semi_area - right_triangle_area) / 2\n    \n    return largest_triangle_area\n",
        "test": "assert triangle_area(0) == 0",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if array[i] != i+1 and array[i] > 0 and array[i] <= end-start+1:\n            return array[i]-1\n    \n    return end-start+1\n",
        "test": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 11",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for num in lst:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n",
        "test": "assert Split([1,2,3,4,5,6]) == [2,4,6]",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj_list = []\n    for i in range(len(sub)):\n        if sub[i][0] == ele[0] + 1 or sub[i][0] == ele[0] - 1 or sub[i][1] == ele[1] + 1 or sub[i][1] == ele[1] - 1:\n            adj_list.append(sub[i])\n    return adj_list",
        "test": "assert adjac((1, 1), [(0, 1), (1, 0), (1, 2), (2, 1)]) == [(0, 1), (1, 0), (1, 2), (2, 1)], \"adjac test 1\"",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create two lists to store non-zero and zero elements separately\n    non_zero_list = []\n    zero_list = []\n    \n    # loop through the input list and add non-zero elements to non_zero_list and zero elements to zero_list\n    for num in num_list:\n        if num != 0:\n            non_zero_list.append(num)\n        else:\n            zero_list.append(num)\n    \n    # concatenate the non_zero_list and zero_list to get the final list\n    final_list = non_zero_list + zero_list\n    \n    return final_list\n",
        "test": "assert move_zero([0, 1, 2, 0, 3, 4, 0]) == [1, 2, 3, 4, 0, 0, 0] ",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum ",
        "test": "assert pair_xor_Sum([1, 1, 1, 1], 4) == 0, \"Test case 2 failed\"",
        "num_ids": 767,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert heap_sort([1]) == [1]",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes in the actual cost and sale amount of an item.\n    It checks whether the sale amount is less than or equal to the actual cost, and returns True if it is, False otherwise.\n    If the sale amount is greater than the actual cost, it returns False.\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True",
        "num_ids": 685,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return int(math.ceil(wc))\n",
        "test": "assert wind_chill(30, -10) == 22, \"Wind chill for 30 km/h and -10\u00b0C is 22.\"",
        "num_ids": 1054,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_of_lengths = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_of_lengths += len(name)\n    return sum_of_lengths\n",
        "test": "assert sample_nam(['alice', 'bob', 'charlie']) == 0",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\(.*?\\)', '', items)\n",
        "test": "assert remove_parenthesis(\"This is a (test).\") == \"This is a .\"",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize a variable to keep track of the sum of squares of the integers from 1 to n\n    sum_of_squares = 0\n    \n    # Loop through integers from 1 to n and add their squares to the sum\n    for i in range(1, n+1):\n        sum_of_squares += i**2\n    \n    # Calculate the nth nonagonal number\n    nonagonal_number = (n**3) + (n**2) - sum_of_squares\n    \n    # Return the nth nonagonal number\n    return nonagonal_number\n",
        "test": "assert is_nonagonal(1) == 1, \"The first nonagonal number is 1\"",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w*z\\w*\\b', text)\n    if words:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle('example') == False",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize variables\n    left = 0\n    right = k - 1\n\n    # reverse array elements from left to right index k-1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    \n    return input\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9] # do not reverse anything",
        "num_ids": 1032,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple(('apple', 'banana', 'orange'), {'fruit': 'apple', 'vegetable': 'carrot'}) != ('apple', 'banana', 'orange', {'fruit': 'banana', 'vegetable': 'carrot'})",
        "num_ids": 861,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = cost[0][0]\n\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j - 1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i - 1][j]\n            else:\n                dp[i][j] = max(cost[i][j] + dp[i - 1][j], cost[i][j] + dp[i][j - 1])\n\n    return dp[n - 1][n - 1] / ((n * n) - 1)",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == 2.0",
        "num_ids": 2377,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def filter_data(students, h, w):\n    '''\n    Filter students with height and weight above the minimum.\n    \n    Args:\n        students (dict): Dictionary with student names as keys and tuples of float (student_height, student_weight) as values.\n        h (float): Minimal height.\n        w (float): Minimal weight.\n    \n    Returns:\n        A dictionary with student names as keys and tuples of float (student_height, student_weight) as values.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n",
        "test": "assert filter_data({'Alice':(1.75, 50), 'Bob':(1.8, 70), 'Charlie':(1.6, 60)}, 1.7, 55) == {'Bob': (1.8, 70)}, \"Incorrect result for filter_data\" ",
        "num_ids": 1352,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base into a string to calculate the sum of digits\n    base_str = str(base)\n    \n    # Calculate the sum of digits raised to the power\n    sum_of_digits = sum([int(digit) ** power for digit in base_str])\n    \n    return sum_of_digits\n",
        "test": "assert power_base_sum(10, 2) == 1, \"power_base_sum(10, 2) should return 1\"",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n",
        "test": "assert extract_quotation('\"123\"') == \"123\"",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((2, 3, 4)) == (6, 12)",
        "num_ids": 822,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Check if the input lists have the same length\n    if len(lst1) != len(lst2):\n        raise ValueError('Input lists must have the same length.')\n    \n    # Initialize an empty list to store the sums\n    result = []\n    \n    # Iterate over the input lists and compute the sums\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n        \n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        result.extend([k]*len(list(g)))\n    return result\n",
        "test": "assert consecutive_duplicates([1,1,1,1,1,2,3,3,4,4,5,5,5]) == [1,2,3,4,5] ",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * h\n    return lateral_area",
        "test": "assert lateralsurface_cone(1, 1) == 3.141592653589793, \"Incorrect area\"",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r\"[ ,.]\"\n    replacement = \":\"\n    new_text = re.sub(pattern, replacement, text)\n    return new_text\n",
        "test": "assert replace_specialchar(\"This is a sentence with spaces.\") == \"This:is:a:sentence:with:spaces:\"",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # initialize left and right pointers\n    left = 0\n    right = len(A) - 1\n\n    # loop until left pointer is less than or equal to right pointer\n    while left <= right:\n        # calculate middle index\n        mid = (left + right) // 2\n\n        # if middle element is equal to x, return middle index\n        if A[mid] == x:\n            # move right pointer to left of middle index to find first occurrence\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n\n        # if middle element is greater than x, discard right half of array\n        elif A[mid] > x:\n            right = mid - 1\n\n        # if middle element is less than x, discard left half of array\n        else:\n            left = mid + 1\n\n    # if x is not found, return -1\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 5], 4) == 3, \"Incorrect output\"",
        "num_ids": 1472,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of products of all possible sublists of that list.\n    \"\"\"\n    n = len(arr)\n    res = 0\n\n    # Iterate over each sublist of the given list\n    for i in range(n):\n        for j in range(i, n):\n            # Calculate the product of the current sublist\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n\n            # Add the product to the result\n            res += prod\n\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([-1, -2, -3, -4, -5]) == -216",
        "num_ids": 1312,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def set_middle_bits(n):\n    # Flip the bits of the number except the first and last bits\n    first_bit = n & 1  # Get the first bit\n    last_bit = n & 1 << 31 >> 31  # Get the last bit\n    middle_bits = n & ~(1 << 0) & ~(1 << 31)  # Flip the bits in the middle\n    \n    # Set the first and last bits to their original values\n    result = middle_bits | (first_bit << 0) | (last_bit << 31)\n    \n    return result\n",
        "test": "assert set_middle_bits(33) == 45 #0010001 -> 0010111",
        "num_ids": 1138,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    :param a: list of integers\n    :param x: integer value to insert into the list\n    :return: index of the left insertion point for x in a\n    \"\"\"\n    # use bisect_left to find the left insertion point for x\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 2) == 1",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str(\"Apple\") == True",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def geometric_sum(n):\n    '''\n    Calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/(1-0.5) + geometric_sum(n-1)*0.5\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize variables\n    index = 1\n    triangular_number = 0\n    digits = 1\n\n    # Loop through triangular numbers until the required number of digits is obtained\n    while digits < n:\n        index += 1\n        triangular_number = int(index * (index + 1) / 2)\n        digits = len(str(triangular_number))\n\n    return index\n",
        "test": "assert find_Index(1) == 1 ",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict\n",
        "test": "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to set to remove duplicates\n    s_set = set(s)\n    # If the length of the set is 1, then all the characters are the same\n    if len(s_set) == 1:\n        return True\n    # Otherwise, all the characters are not the same\n    else:\n        return False",
        "test": "assert all_Characters_Same(\"abc\") == False",
        "num_ids": 648,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    # Calculate the angle between two adjacent faces of the tetrahedron\n    alpha = math.acos((math.pow(side, 2) - (1/3) * math.pow(side, 4)) / (2 * (1/3) * side**2))\n\n    # Calculate the area of the tetrahedron\n    area = (math.pow(side, 2) * math.sin(alpha))\n\n    return area\n",
        "test": "assert area_tetrahedron(2) == 8",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[n-m:] + list[:n-m]\n    return list\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5] ",
        "num_ids": 990,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3)) == False, \"Error in check_none function with tuple (1, 2, 3)\" ",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        is_divisible = True\n        for digit in digits:\n            if num % digit != 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(100, 200) == [120, 180] # expected output [120, 180] ",
        "num_ids": 1927,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return r ** 2 * (a * math.pi / 360)\n",
        "test": "assert sector_area(10, 180) == math.pi * 100",
        "num_ids": 736,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common suffixes of substrings.\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill the table in a dynamic programming manner.\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Find the length of the longest common subsequence.\n    return L[m][n][o]\n",
        "test": "assert lcs_of_three('AGGTAB', 'GXTXAYB', 'TXTLKPYB') == 'GTAB', \"Incorrect result for lcs_of_three('AGGTAB', 'GXTXAYB', 'TXTLKPYB')\"",
        "num_ids": 2048,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Using regex to find words starting with capital letters\n    words = re.findall(r'[A-Z][a-z]*', str1)\n\n    # Join the words with spaces and return the result\n    return ' '.join(words)\n",
        "test": "assert capital_words_spaces('') == ''",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_numeric_strings(nums_str):\n    return sorted(nums_str, key=int)",
        "test": "assert sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1, 2), (3, 4)], (5, 6)) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n    if left_child < n and arr[left_child] < arr[i]:\n        return False\n    if right_child < n and arr[right_child] < arr[i]:\n        return False\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Main function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n",
        "test": "assert check_min_heap_helper([1,2,3,4,5],0) == True",
        "num_ids": 1517,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal = [0, 1]\n        for i in range(2, n+1):\n            jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n        return jacobsthal[n]\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    \n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Return the first k records of the sorted list\n    return test_list[:K]\n",
        "test": "assert min_k([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)], 3) == [(1, 2, 3), (2, 3, 4), (3, 4, 5)]",
        "num_ids": 1191,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [] ",
        "num_ids": 1038,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = min(numbers)\n        numbers.remove(smallest)\n        second_smallest = min(numbers)\n        return second_smallest\n",
        "test": "assert second_smallest([1,2,3,4,5]) == 2",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"ab\") == True",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        tup = tuple(sublist)\n        if tup in sublist_counts:\n            sublist_counts[tup] += 1\n        else:\n            sublist_counts[tup] = 1\n    return sublist_counts\n",
        "test": "assert unique_sublists([[1,2,3], [2,3,4], [1,2,3]]) == {(1, 2, 3): 2, (2, 3, 4): 1}",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except:\n        return False\n",
        "test": "assert is_decimal(\"12.34\")",
        "num_ids": 586,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_list = list(set(arr))\n    if len(unique_list) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([2, 2, 2, 2]) == True",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not.\n    Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in (4, 6, 9, 11):\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1,5,3,19,18,25],6) == 1",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr('12345') == 5",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n    else:\n        a = 1\n        for i in range(2, n + 1):\n            a = (a * (2 * i - 1) * math.factorial(i - 1)) / (math.factorial(i) * (i - 1))\n        return int(a)",
        "test": "assert is_polite(1) == 1 # check if 1st polite number is 1",
        "num_ids": 1390,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([]) == []",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 5) == 2 # since there are two pairs (2, 3) and (3, 2) with a sum of 5",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([1, 2, 3], [2, 3, 4]) == [1]",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i**4\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 # Checking for n=1",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    # create a queue for the opening brackets\n    opening_brackets_queue = deque()\n    \n    # iterate through each character in the expression\n    for char in exp:\n        # if the character is an opening bracket, add it to the queue\n        if char in ['(', '[', '{']:\n            opening_brackets_queue.append(char)\n        # if the character is a closing bracket, check if it matches the last opening bracket in the queue\n        elif char in [')', ']', '}']:\n            if not opening_brackets_queue:\n                return False  # no opening bracket to match with\n            last_opening_bracket = opening_brackets_queue.pop()\n            # check if the brackets match\n            if ((last_opening_bracket == '(' and char != ')') or\n                (last_opening_bracket == '[' and char != ']') or\n                (last_opening_bracket == '{' and char != '}')):\n                return False  # brackets don't match\n    \n    # if the queue is empty, the expression is balanced\n    if not opening_brackets_queue:\n        return True\n    else:\n        return False  # queue is not empty, expression is not balanced\n",
        "test": "assert check_expression('()') == True",
        "num_ids": 1029,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() # split the string into words\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert remove_length(\"Hello world\", 2) == \"Hello world\"",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    occurrences = []\n    for match in re.finditer(pattern, text):\n        start_pos = match.start()\n        end_pos = match.end()\n        occurrence = text[start_pos:end_pos]\n        occurrences.append((occurrence, start_pos, end_pos))\n    if not occurrences:\n        return None\n    return occurrences",
        "test": "assert occurance_substring('hello world', 'hello') == [(0, 5)], \"Incorrect match\"",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def odd_position(nums):\n    '''\n    Checks whether every odd index contains odd numbers of a given list.\n\n    :param nums: A list of integers\n    :return: True if every odd index contains odd numbers, False otherwise\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 3, 5, 7, 9]) is True",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i-1] in vowels or test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"\") == 0 ",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    :param arr: A list of integers\n    :return: The sum of unique integers in the list\n    \"\"\"\n    unique_elements = set(arr)\n    return sum(unique_elements)",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    packed_list = []\n\n    for key, group in groupby(list1):\n        sublist = list(group)\n        packed_list.append(sublist)\n\n    return packed_list\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the count\n    count_dict = {}\n\n    # loop through the original list\n    for sublist in list1:\n        # convert the sublist to a tuple to make it immutable and hashable\n        sublist_tuple = tuple(sublist)\n\n        # check if the tuple is already in the dictionary\n        if sublist_tuple in count_dict:\n            # if it is, increment the count by 1\n            count_dict[sublist_tuple] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            count_dict[sublist_tuple] = 1\n\n    # return the count dictionary\n    return count_dict\n",
        "test": "assert unique_sublists([[1, 2], [2, 1], [1, 2], [3, 4], [4, 3]]) == {(1, 2): 2, (2, 1): 1, (3, 4): 1, (4, 3): 1} ",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Define the target sum\n    target_sum = 10\n\n    # Find all combinations of tuples that add up to the target sum\n    result = []\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            if sum(comb) == target_sum:\n                result.append(comb)\n\n    return result",
        "test": "assert find_combinations([(2, 3), (5, 6), (7, 8)]) == [(5, 2), (5, 3), (6, 2), (6, 3), (7, 2), (7, 3), (8, 2), (8, 3)]",
        "num_ids": 2783,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n//i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n\ndef is_even(n):\n    return count_divisors(n) % 2 == 0\n\nprint(is_even(12)) # True\nprint(is_even(13)) # False\n",
        "test": "assert count_divisors(2) == 2 ",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    # initialize a 2D array to store the prefix sums\n    prefix_sums = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # compute the prefix sums\n    for i in range(n):\n        for j in range(i, n):\n            prefix_sums[i][j] = prefix_sums[i][j-1] + arr[j]\n    \n    # initialize a variable to store the sum of odd length subarrays\n    result = 0\n    \n    # loop through all possible subarrays\n    for i in range(n):\n        for j in range(i, n):\n            # check if the length of the subarray is odd\n            if (j - i + 1) % 2 == 1:\n                # compute the sum of the subarray\n                subarray_sum = prefix_sums[i][j] - prefix_sums[i][i-1] if i > 0 else prefix_sums[i][j]\n                result += subarray_sum\n    \n    return result\n",
        "test": "assert odd_length_sum([-1, -2, -3, -4, -5]) == -25, \"Incorrect output for odd_length_sum([-1, -2, -3, -4, -5])\"",
        "num_ids": 1160,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    diff = cmax-cmin\n    if cmax==cmin:\n        h = 0\n    elif cmax==r:\n        h = (60*((g-b)/diff) + 360) % 360\n    elif cmax==g:\n        h = (60*((b-r)/diff) + 120) % 360\n    elif cmax==b:\n        h = (60*((r-g)/diff) + 240) % 360\n    s = 0 if cmax==0 else diff/cmax\n    v = cmax\n    return h, s, v\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1807,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def mul_even_odd(lst):\n    even = []\n    odd = []\n    for num in lst:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even[0] * odd[0]",
        "test": "assert mul_even_odd([0,1,2,3,4,5]) == 0 # no odd numbers, so the output should be 0",
        "num_ids": 1010,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Removing the parentheses and splitting the string into a list of strings\n    test_list = test_str.strip('()').split(',')\n    # Converting the list of strings into a list of integers\n    test_int_list = [int(i.strip()) for i in test_list]\n    # Converting the list of integers into a tuple\n    test_int_tuple = tuple(test_int_list)\n    return test_int_tuple\n",
        "test": "assert tuple_str_int(\"(1,2,3)\") == (1, 2, 3)",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "test": "assert right_insertion([1, 3, 4, 5, 7], 6) == 4",
        "num_ids": 622,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbb\") == True",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    my_tuple = (test_str,) + tuple(test_list)\n    return my_tuple\n",
        "test": "assert new_tuple([\"apple\", \"banana\", \"cherry\"], \"xyz\") == (\"apple\", \"banana\", \"cherry\", \"x\", \"y\", \"z\") ",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_position(nums):\n    \"\"\"\n    Checks whether every even index contains even numbers of a given list.\n\n    :param nums: A list of numbers\n    :return: True if every even index contains even numbers, False otherwise\n    \"\"\"\n\n    # Loop through the list with a step of 2 (only even indices)\n    for i in range(0, len(nums), 2):\n        # Check if the current number at the even index is even\n        if nums[i] % 2 != 0:\n            # If not, return False\n            return False\n\n    # If all even indices contain even numbers, return True\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8]) == True ",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) != tuple:\n            new_tup.append(item)\n    return tuple(new_tup)\n",
        "test": "assert remove_nested((1,2,3)) == (1,2,3)",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1,2],[3,4],[5,6]]) == 3, \"Error in count_list function\" ",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # check if the element is present in the array\n    if x in arr:\n        # find the index of the first occurrence of the element in the array\n        first_occurrence = arr.index(x)\n        # iterate from the first occurrence and find the last occurrence of the element\n        for i in range(first_occurrence+1, len(arr)):\n            if arr[i] != x:\n                # return the index of the previous element if we find a different element\n                return i-1\n        # if the element is present till the end of the array, then return the last index\n        return len(arr)-1\n    else:\n        # if the element is not present in the array, return -1\n        return -1\n",
        "test": "assert last([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 1196,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb(\"abc\") == True, \"Text 'abc' should match pattern.\"",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    total = 0\n    for item in dict:\n        total += dict[item]\n    \n    return total\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6, \"The sum of all items in the dictionary is incorrect\" ",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two integer inputs l and r, and returns the sum of all odd natural numbers within the range [l, r] (inclusive).\n    \"\"\"\n    # Initialize a variable to store the sum\n    sum = 0\n    \n    # Loop through all odd numbers within the range [l, r]\n    for i in range(l, r+1):\n        # Check if the number is odd\n        if i % 2 != 0:\n            # Add the odd number to the sum\n            sum += i\n    \n    # Return the sum\n    return sum\n",
        "test": "assert sum_odd(10) == 25",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def _sum(arr):\n    '''\n    Write a Python function to find the sum of an array.\n    '''\n    # Initialize the sum to zero\n    total = 0\n    \n    # Iterate through the array and add each element to the total\n    for num in arr:\n        total += num\n    \n    # Return the total sum\n    return total\n",
        "test": "assert _sum([1,2,3,4,5]) == 15",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate the bits of the given number to the left by d bits.\n    \"\"\"\n    mask = (1 << 32) - 1\n    return ((n << d) & mask) | (n >> (32 - d))\n",
        "test": "assert left_rotate(0b10101010, 0) == 0b10101010 ",
        "num_ids": 762,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello world\") == \"Helloworld\" ",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1,1,1) == 3",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    pivot = 0\n    for i in range(n):\n        if arr[i] < arr[pivot]:\n            pivot = i\n    return pivot\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0, \"Test failed for [1, 2, 3, 4, 5]\" ",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while(i*i <= n):\n        if(i*i == n):\n            return True\n        i += 1\n    return False ",
        "test": "assert is_perfect_square(1) == True",
        "num_ids": 566,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([2, 3, 4]) == True",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    for l in lists:\n        list_sum = sum(l)\n        if list_sum > max_sum:\n            max_sum = list_sum\n            max_list = l\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    return max(max_run, current_run)\n",
        "test": "assert max_run_uppercase(\"HELLOwORLD\") == 5 # Expected output: 5 (since HELLO is the longest uppercase string)",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def first_odd(nums):\n    '''\n    Write a Python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1,2,3,4,5,6,7,8,9]) == 1",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((\"apple\", \"banana\", \"orange\", \"grape\"), \"cherry\") == False",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((1,2,3), (1,3,2)) == False",
        "num_ids": 867,
        "indeed": true
    }
]