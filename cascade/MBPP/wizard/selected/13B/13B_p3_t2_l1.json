[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in shared:\n            shared.append(elem)\n    return shared\n",
        "test": "assert similar_elements([1,2,3], [1,4,3]) == [1, 3]",
        "num_ids": 515
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function returns True if the input number is not a prime number, otherwise it returns False.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(7) == False ",
        "num_ids": 339
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Returns the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap of size n\n    heap = []\n    for num in nums:\n        # If the heap has less than n elements, add the number to the heap\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        # If the heap already has n elements, and the number is larger than the smallest element in the heap,\n        # replace the smallest element with the number\n        elif num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n    # Return the sorted heap (in descending order)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([3, 2, 1, 5, 6, 4], 3) == [6, 5, 4]",
        "num_ids": 682
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    # If x is zero, return False\n    if x == 0:\n        return False\n    \n    # Check if x is a power of two by comparing x with x-1\n    if x != 0 and x & (x-1) == 0:\n        return True\n    \n    # If x is not a power of two, return False\n    return False\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 444
    },
    {
        "number": 7,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"This is a test sentence with some long words in it\") == ['sentence', 'long', 'words'] ",
        "num_ids": 367
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "test": "assert square_nums([1,2,3,4,5]) == [1,4,9,16,25] ",
        "num_ids": 352
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Rotations(str):\n    '''\n    Write a Python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Reverse the string and concatenate it with the original string\n    # This will ensure that the first part of the string is a substring of the second part\n    new_str = str[::-1] + str\n    # Find the index of the first occurrence of the original string in the reversed and concatenated string\n    index = new_str.find(str)\n    # If the original string is not found, return -1 (not possible)\n    if index == -1:\n        return -1\n    # If the original string is found, return the number of rotations required\n    return index // len(str)\n",
        "test": "assert find_Rotations('test') == 1, \"Expected 1 rotation\"",
        "num_ids": 715
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = 0\n    result = \"\"\n    for i in s:\n        if i != ch:\n            result += i\n        else:\n            count += 1\n            if count == 1:\n                continue\n            elif count == len(s) - 1:\n                break\n    return result\n",
        "test": "assert remove_Occ('hello', 'l') == 'heo'",
        "num_ids": 495
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = [sum(row) for row in M]\n    sorted_rows = [row for _, row in sorted(zip(row_sums, M))]\n    return sorted_rows",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]] # matrix is already sorted",
        "num_ids": 634
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume\n",
        "test": "assert find_Volume(1,2,3) == 2",
        "num_ids": 344
    },
    {
        "number": 16,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 385
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 260
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    for i in string:\n        if i not in list1:\n            list1.append(i)\n    return list1\n",
        "test": "assert str_to_list('') == []",
        "num_ids": 559
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Convert the array to a set to remove duplicates\n    unique_nums = set(arraynums)\n    # If the length of the original array is different from the length of the set, there are duplicates\n    if len(arraynums) != len(unique_nums):\n        return True\n    else:\n        return False\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 531
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(3) == False # since 3 is not a multiple of 4",
        "num_ids": 488
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # reverse the given number\n    reverse = int(str(num)[::-1])\n    \n    # check if the given number is one less than twice its reverse\n    if num == reverse + 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(123) == False ",
        "num_ids": 365
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Initialize the result string\n    result = \"\"\n    # Loop through the array and concatenate the digits\n    for i in range(n):\n        result += str(arr[i])\n    # Return the result\n    return int(result)\n",
        "test": "assert find_Max_Num([1, 2, 3, 4]) == 4321 ",
        "num_ids": 552
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(1, -1) is True",
        "num_ids": 320
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if the given number is an octagonal number.\n    \"\"\"\n    oct_num = n * (2 * n - 1)\n    return oct_num == n\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 366
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # initialize a dictionary to store the count of substrings with sum of digits equal to length\n    count_dict = defaultdict(int)\n    \n    # iterate through the string s and count the number of substrings with sum of digits equal to length\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count_dict[substring] += 1\n    \n    # return the total count of substrings with sum of digits equal to length\n    return sum(count_dict.values())\n",
        "test": "assert count_Substrings(\"\") == 0",
        "num_ids": 814
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "test": "assert smallest_num([1,2,3,4,5]) == 1",
        "num_ids": 319
    },
    {
        "number": 63,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = test_list[1] - test_list[0]\n    min_val = test_list[0]\n    \n    for num in test_list:\n        diff = num - min_val\n        if diff > max_diff:\n            max_diff = diff\n        if num < min_val:\n            min_val = num\n    \n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4, \"Expected output 4\"",
        "num_ids": 543
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "test": "assert subject_marks([('Computer Science', 92), ('Maths', 88), ('Physics', 85), ('Chemistry', 89)]) == [('Maths', 88), ('Computer Science', 92), ('Chemistry', 89), ('Physics', 85)]",
        "num_ids": 547
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if data_list is not a list, return it as is\n    if not isinstance(data_list, list):\n        return data_list\n    # recursive case: if data_list is a list, flatten it and sum its elements\n    else:\n        total = 0\n        for item in data_list:\n            total += recursive_list_sum(item)\n        return total\n",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 533
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([-1,-2,-3,-4,-5]) == 0  # correct",
        "num_ids": 307
    },
    {
        "number": 67,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        bell = [0] * (n+1)\n        bell[0] = 1\n        bell[1] = 1\n        for i in range(2, n+1):\n            bell[i] = 0\n            for j in range(i):\n                bell[i] += bell[j] * bell[i-j]\n        return bell[n]\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 410
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return (A[0] <= A[1]) or (A[0] >= A[1])\n    else:\n        if A[0] <= A[1]:\n            return all(A[i] <= A[i+1] for i in range(n-1))\n        else:\n            return all(A[i] >= A[i+1] for i in range(n-1))\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True, \"The array [1, 2, 3, 4, 5] is not monotonic\"",
        "num_ids": 643
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(s)\n    for i in range(len(l)-n+1):\n        if l[i:i+n] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1,2,3],[1,2]) == True ",
        "num_ids": 435
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    result = True\n    first_tuple_length = len(Input[0])\n    for t in Input:\n        if len(t) != first_tuple_length:\n            result = False\n            break\n    return result\n",
        "test": "assert find_equal_tuple([(1,2,3), (4,5,6), (7,8,9)]) == True",
        "num_ids": 433
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Sorts a list of elements using the comb sort algorithm.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i+gap]:\n                swap(i, i+gap)\n                sorted = False\n            i += 1\n\n    return nums\n",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] # test case for already sorted list",
        "num_ids": 701
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(int(n ** 0.5) + 1):\n        for j in range(int(n ** 0.5) + 1):\n            if i ** 2 - j ** 2 == n:\n                return True\n    return False\n",
        "test": "assert dif_Square(1) == True",
        "num_ids": 387
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether the given colors follow the sequence given in patterns array.\n    \"\"\"\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns(['red', 'blue', 'green', 'yellow', 'purple'], ['1', '2', '3', '4', '5', '6']) == False",
        "num_ids": 599
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result\n",
        "test": "assert find_tuples([(1,2,3), (4,5,6), (7,8,9)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]",
        "num_ids": 576
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(22) == True # Test case 1: Should return True",
        "num_ids": 265
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the string is odd, else it returns False.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert word_len(\"hello\") == True # should return True",
        "num_ids": 272
    },
    {
        "number": 80,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    return (n*(n+1)*(n+2))//6\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 435
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * 1**3",
        "num_ids": 304
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    # Convert the string to uppercase and remove any spaces\n    strr = strr.upper().replace(' ', '')\n    # Calculate the sum of the ASCII values of all characters in the string\n    total = sum(ord(char) for char in strr)\n    # Calculate the character made by adding the total modulo 26\n    char_num = total % 26\n    # Convert the character number to a character and return it\n    return chr(char_num + 65)\n",
        "test": "assert get_Char('python') == 'm' # python mod 26 = 16 + 21 + 14 + 20 + 8 + 13 mod 26 = 85 mod 26 = 1",
        "num_ids": 496
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sequence(n):\n    if n == 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1 1\"\n    else:\n        sequence_list = [0, 1, 1]\n        for i in range(3, n+1):\n            new_element = sequence_list[i-1] + sequence_list[i-sequence_list[i-1]]\n            sequence_list.append(new_element)\n        return \" \".join(str(x) for x in sequence_list[1:])\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 516
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Calculates and returns the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_sphere(5) == 314.1592653589793",
        "num_ids": 317
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 214
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for k, v in dict1.items():\n        merged_dict[k] = v\n    for k, v in dict2.items():\n        merged_dict[k] = v\n    for k, v in dict3.items():\n        merged_dict[k] = v\n    return merged_dict",
        "test": "assert merge_dictionaries_three({'a':1},{'b':2},{'c':3}) == {'a':1,'b':2,'c':3}",
        "num_ids": 634
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency count of each element in the list\n    freq_dict = {}\n    \n    # Iterate through each element in the list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[elem] = 1\n    \n    # Return the dictionary of frequency counts\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 2, 1, 3, 4]) == {1: 2, 2: 2, 3: 2, 4: 1} ",
        "num_ids": 496
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    num = 0\n    while N > num:\n        num += 1\n    return num\n",
        "test": "assert closest_num(7) == 6, \"Incorrect output for closest_num(7)\"",
        "num_ids": 341
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['hello', 'world', 'this', 'is', 'a', 'test']) == 5",
        "num_ids": 357
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n",
        "test": "assert find_substring(\"Hello world\", \"world!\") == False",
        "num_ids": 311
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Checks whether the given number is undulating or not.\n\n    A number is said to be undulating if it can be expressed as the sum of a strictly increasing sequence of integers and a strictly decreasing sequence of integers. For example, 10 can be expressed as 1 + 2 + 3 + 6 + 7, where the sequence {1, 2, 3} is strictly increasing and the sequence {6, 7} is strictly decreasing.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    # Helper function to check if a sequence is strictly increasing\n    def is_increasing(seq):\n        return all(seq[i] < seq[i+1] for i in range(len(seq)-1))\n\n    # Helper function to check if a sequence is strictly decreasing\n    def is_decreasing(seq):\n        return all(seq[i] > seq[i+1] for i in range(len(seq)-1))\n\n    # Find all possible ways to split n into two sequences\n    for i in range(1, n):\n        seq1 = [j for j in range(1, i+1)]\n        seq2 = [j for j in range(i+1, n+1)]\n\n        # Check if the two sequences are strictly increasing and strictly decreasing\n        if is_increasing(seq1) and is_decreasing(seq2):\n            return True\n\n    # If no valid sequence is found, return False\n    return False",
        "test": "assert is_undulating(1) == False",
        "num_ids": 696
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert power(2, 3) == 8, \"Error: 2^3 is not 8\"",
        "num_ids": 289
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list, key=itemgetter(1))\n    return minimum[0]\n",
        "test": "assert index_minimum([(1,2),(3,4),(5,6)]) == 1",
        "num_ids": 529
    },
    {
        "number": 95,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1, 2], [3, 4, 5], [6]]) == 1",
        "num_ids": 488
    },
    {
        "number": 96,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count",
        "test": "assert divisor(1) == 1, \"Incorrect number of divisors for 1\"",
        "num_ids": 405
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # Create an empty dictionary to store the frequencies\n    freq_dict = {}\n    \n    # Flatten the list of lists using nested loops\n    for sublist in list1:\n        for item in sublist:\n            # If the item is already in the dictionary, increment its count\n            if item in freq_dict:\n                freq_dict[item] += 1\n            # Otherwise, add the item to the dictionary with a count of 1\n            else:\n                freq_dict[item] = 1\n    \n    return freq_dict\n",
        "test": "assert frequency_lists([[1,2,3],[4,5,6],[7,8,9]]) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1} ",
        "num_ids": 776
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "test": "assert multiply_num([1, 2, 3]) == 2, \"Function returns incorrect result\" ",
        "num_ids": 341
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 331
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while not is_palindrome(str(num)):\n        num = num + 1\n    return num\n\ndef is_palindrome(s):\n    '''\n    Helper function to check if a string is a palindrome.\n    '''\n    return s == s[::-1]\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 2:\n        print(\"Usage: python next_smallest_palindrome.py <number>\")\n    else:\n        number = int(sys.argv[1])\n        print(\"Next smallest palindrome of\", number, \"is:\", next_smallest_palindrome(number))\n",
        "test": "assert next_smallest_palindrome(121) == 131 # 121 is already a palindrome",
        "num_ids": 780
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1 # check the correctness of kth_element when k=1",
        "num_ids": 351
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    # split the word by underscore\n    parts = word.split('_')\n    # capitalize the first letter of each part\n    parts = [part.capitalize() for part in parts]\n    # join the parts with no separator\n    result = ''.join(parts)\n    # return the first letter lowercased\n    return result[0].lower() + result[1:]\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 452
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Find the Eulerian number a(n, m) using the formula:\n    a(n, m) = ((m + n - 1) * (m + n - 2) * ... * (m + 1)) / (n! * (m - n)!).\n    \n    Parameters:\n        n (int): The first parameter.\n        m (int): The second parameter.\n    \n    Returns:\n        int: The Eulerian number a(n, m).\n    \"\"\"\n    if n == m:\n        return 1\n    numerator = 1\n    denominator = 1\n    for i in range(m, m - n, -1):\n        numerator *= i\n    for i in range(1, n + 1):\n        denominator *= i\n    return numerator // denominator",
        "test": "assert eulerian_num(0, 0) == 1",
        "num_ids": 510
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate over each sublist in the input list\n    for i in range(len(input_list)):\n        # Sort the sublist in place using the sort() method\n        input_list[i].sort()\n    \n    # Return the sorted input list\n    return input_list\n",
        "test": "assert sort_sublists([[\"hello\", \"world\", \"python\"], [\"apple\", \"banana\", \"cherry\"]]) == [[\"hello\", \"python\", \"world\"], [\"apple\", \"banana\", \"cherry\"]]",
        "num_ids": 595
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, True, False]) == 3 ",
        "num_ids": 291
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n",
        "test": "assert add_lists([4, 5], (6, 7, 8)) == (4, 5, 6, 7, 8)",
        "num_ids": 416
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        min_num = heapq.heappop(num1)\n        if min_num < heapq.heappop(num2):\n            heapq.heappush(num2, min_num)\n            min_num = heapq.heappop(num2)\n        if min_num < heapq.heappop(num3):\n            heapq.heappush(num3, min_num)\n            min_num = heapq.heappop(num3)\n        merged.append(min_num)\n\n    while len(num2) > 0:\n        merged.append(heapq.heappop(num2))\n\n    while len(num3) > 0:\n        merged.append(heapq.heappop(num3))\n\n    return merged\n",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 1066
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        if int(s, 2) % 2 != 0:\n            count += 1\n    return count\n",
        "test": "assert odd_Equivalent('000', 0) == 0",
        "num_ids": 378
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common = common.intersection(set(sublist))\n    return list(common)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]",
        "num_ids": 458
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True, \"check_integer should return True for valid integers\"",
        "num_ids": 248
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for i in range(len(list1)):\n        if not list1[i]:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}, {}, {\"a\": 1}]) == False ",
        "num_ids": 284
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums_list = list(nums)\n    result = 0\n    for num in nums_list:\n        result = result*10 + num\n    return result\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 413
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            list_to_float(test_list[i])\n        else:\n            try:\n                float(test_list[i])\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([[1, 2.0, '3', 4.5, '5', '6.0'], [1, '2', 3.0, '4.5', 5, 6]]) == [[1.0, 2.0, 3.0, 4.5, 5.0, 6.0], [1.0, 2.0, 3.0, 4.5, 5.0, 6.0]]",
        "num_ids": 690
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 262
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def search(arr):\n    for i in range(len(arr) - 2):\n        if arr[i] != arr[i+1] and arr[i+1] != arr[i+2]:\n            return arr[i+1]\n    return None\n",
        "test": "assert search([1, 1, 2, 2, 3, 3, 4, 4]) is None",
        "num_ids": 565
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            abs_product = abs(product)\n            if abs_product > max_product:\n                max_product = abs_product\n    return max_product\n",
        "test": "assert max_product_tuple([(1, 2), (-3, 4), (5, -6), (-7, 8)]) == 48 ",
        "num_ids": 653
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(2, limit+1):\n        divisors_sum = 0\n        for divisor in range(1, num):\n            if num % divisor == 0:\n                divisors_sum += divisor\n        if divisors_sum == num:\n            amicable_numbers.append(num)\n        if num == divisors_sum:\n            amicable_numbers.append(divisors_sum)\n    return sum(amicable_numbers)\n",
        "test": "assert amicable_numbers_sum(20) == 100, \"Incorrect sum for limit 20\"",
        "num_ids": 652
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    return angle\n",
        "test": "assert angle_complex(0, 0) == 0",
        "num_ids": 306
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_length(string):\n    max_diff = 0\n    zeros = 0\n    ones = 0\n    max_zeros = 0\n    max_ones = 0\n    for char in string:\n        if char == '0':\n            zeros += 1\n        else:\n            ones += 1\n        diff = abs(zeros - ones)\n        if diff > max_diff:\n            max_diff = diff\n            max_zeros = zeros\n            max_ones = ones\n    return max_diff",
        "test": "assert find_length(\"00001111\") == 4 # should return 4",
        "num_ids": 578
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors_sum = 0\n    for i in range(1, a+1):\n        if a%i == 0:\n            if b%i == 0:\n                divisors_sum += i\n    return divisors_sum\n",
        "test": "assert sum(10,20) == 10 # should return 2+4+5=11",
        "num_ids": 586
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2,3) == 6",
        "num_ids": 186
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_list = []\n    for word in str.split():\n        if len(word) > n:\n            long_list.append(word)\n    return long_list\n",
        "test": "assert long_words(5, \"I am a python developer\") == [\"python\", \"developer\"]",
        "num_ids": 335
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Checks if a matrix is a magic square\n    '''\n    # First, check if the matrix is square (all rows have the same length)\n    if not all(len(row) == len(my_matrix) for row in my_matrix):\n        return False\n    \n    # Create a list of the sums of the elements in each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))]\n    diag1_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag2_sum = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n    \n    # Check if all row sums are the same\n    if len(set(row_sums)) != 1:\n        return False\n    \n    # Check if all column sums are the same\n    if len(set(col_sums)) != 1:\n        return False\n    \n    # Check if both diagonals have the same sum\n    if diag1_sum != diag2_sum:\n        return False\n    \n    return True\n",
        "test": "assert magic_square_test([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]) ",
        "num_ids": 1247
    },
    {
        "number": 130,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to keep track of the frequency of each item in the list\n    frequency = defaultdict(int)\n    \n    # Iterate through the list and update the frequency dictionary\n    for num in nums:\n        frequency[num] += 1\n        \n    # Find the maximum frequency and the corresponding item\n    max_freq = 0\n    max_item = None\n    for item, freq in frequency.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n            \n    return max_item\n",
        "test": "assert max_occurrences([1,2,3,2,1,4,5,6,4,2,7,8,9,8,7,6,5,4,3,2,1]) == 2 ",
        "num_ids": 736
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)\n    left, right = 0, len(s) - 1\n\n    while left < right:\n        if s[left] not in vowels:\n            left += 1\n        elif s[right] not in vowels:\n            right -= 1\n        else:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n\n    return ''.join(s)",
        "test": "assert reverse_vowels(\"hello\") == \"holle\"",
        "num_ids": 555
    },
    {
        "number": 132,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert tup_string((1, 2, 3)) == \"(1, 2, 3)\"",
        "num_ids": 318
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert sum_negativenum([1, 2, -3, 4, -5]) == -8 ",
        "num_ids": 384
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2*n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 223
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n    if num_non_zeroes == 0:\n        return 0\n    return num_zeroes / num_non_zeroes\n",
        "test": "assert zero_count(array('i', [0, 1, 2, 3, 4, 5])) == 0.2",
        "num_ids": 551
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    elif n & 1 == 0:\n        return is_Sum_Of_Powers_Of_Two(n>>1)\n    else:\n        return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(0) == False",
        "num_ids": 466
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "test": "assert circle_circumference(0) == 0  # check if the circumference is correct for radius 0",
        "num_ids": 307
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for element in sublist:\n            result.add(element)\n    return result\n",
        "test": "assert extract_singly([[1, 2, 3], [4, 5], [6]]) == {1, 2, 3, 4, 5, 6}",
        "num_ids": 541
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    while n > 1:\n        max_index = nums.index(max(nums[:n]))\n        nums = pancake_reverse(nums, max_index + 1)\n        nums = pancake_reverse(nums, n)\n        n -= 1\n    return nums\n\ndef pancake_reverse(nums, k):\n    '''\n    Reverse the first k elements of the list\n    '''\n    start = 0\n    while start < k:\n        nums[start], nums[k-1] = nums[k-1], nums[start]\n        start += 1\n        k -= 1\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 658
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Count number of items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 475
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "test": "assert find_lists((1, 2, 3)) == 0",
        "num_ids": 308
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum absolute difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n    max_diff = abs(arr[1] - arr[0])\n    min_val = min(arr[0], arr[1])\n    max_val = max(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        cur_diff = abs(arr[i] - max_val)\n        if cur_diff > max_diff:\n            max_diff = cur_diff\n        cur_diff = abs(arr[i] - min_val)\n        if cur_diff > max_diff:\n            max_diff = cur_diff\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 5, 2, 8, 4]) == 7",
        "num_ids": 647
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    if b == 0:\n        return None\n    \n    x = n // b\n    y = (n - a * x) // b\n    \n    if a * x + b * y == n:\n        return (x, y)\n    else:\n        return None\n",
        "test": "assert find_solution(2, 3, 5) == (1, 1)",
        "num_ids": 724
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [element for element in list1 if element not in list2]\n",
        "test": "assert remove_elements([1, 2, 3, 4], [2, 3]) == [1, 4]",
        "num_ids": 388
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2*i\n    return total\n",
        "test": "assert sum_series(1) == 1 ",
        "num_ids": 417
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area",
        "test": "assert area_polygon(2, 4) == 4.0",
        "num_ids": 372
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_of_divisors(num):\n        '''\n        A helper function to calculate the sum of divisors of a number.\n        '''\n        sum = 0\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if num // i == i:\n                    sum += i\n                else:\n                    sum += i + num // i\n        return sum\n    \n    # Find the divisor sum of n and n+1\n    n_sum = sum_of_divisors(n)\n    n_plus_1_sum = sum_of_divisors(n+1)\n    \n    # Check if the sums are equal\n    if n_sum == n_plus_1_sum:\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(496) == False # Expected output: False",
        "num_ids": 680
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i+97):\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"abcde\") == 5, \"Incorrect function output\"",
        "num_ids": 572
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4]) == 2",
        "num_ids": 376
    },
    {
        "number": 167,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n & (n-1) == 0:\n        return n\n    else:\n        x = 1\n        while x < n:\n            x <<= 1\n        return x\n",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 424
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10],1) == 1",
        "num_ids": 339
    },
    {
        "number": 170,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9",
        "num_ids": 386
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n",
        "test": "assert perimeter_pentagon(7) == 21.0 # Test case 2",
        "num_ids": 390
    },
    {
        "number": 172,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s)-2:\n        if s[i:i+3] == 'std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count\n",
        "test": "assert count_occurance('this is a test string') == 0",
        "num_ids": 342
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n",
        "test": "assert check_type((1, 2, 3, 4)) is True",
        "num_ids": 398
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    # Check if x is present in arr\n    if x in arr:\n        # Find the frequency of x in arr\n        count = 0\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        # Check if the frequency of x is greater than n/2\n        if count > n/2:\n            return True\n    # If x is not present in arr or its frequency is less than or equal to n/2, then it is not a majority element\n    return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 3) == False",
        "num_ids": 662
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(12) == 2 # 12 has 2 set bits (10000 and 100)",
        "num_ids": 286
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_values_string(s):\n    '''\n    Remove characters with odd index values from the given string.\n    '''\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 == 0:\n            result += s[i]\n    return result\n",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 263
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num\n",
        "test": "assert min_of_three(1, 2, 3) == 1, \"min_of_three(1, 2, 3) should return 1\"",
        "num_ids": 389
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Convert the range to a binary string\n    n_bin = format(n, 'b')\n    # Convert the range to binary as well\n    l_bin = format(l, 'b')\n    r_bin = format(r, 'b')\n    # Find the length of the binary strings\n    n_len = len(n_bin)\n    l_len = len(l_bin)\n    r_len = len(r_bin)\n    # If any of the strings are shorter than the others, pad them with zeros\n    if l_len < n_len:\n        l_bin = '0' * (n_len - l_len) + l_bin\n    if r_len < n_len:\n        r_bin = '0' * (n_len - r_len) + r_bin\n    # Extract the range from the binary string\n    range_bin = n_bin[l:r+1]\n    # Check if all bits are set in the range\n    all_bits_set = True\n    for bit in range_bin:\n        if bit == '0':\n            all_bits_set = False\n            break\n    return all_bits_set",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b000, 0, 0) == False",
        "num_ids": 889
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers: one at the beginning of the array (i=0) and one at the end of the first n elements (j=n-1)\n    i = 0\n    j = n-1\n    \n    # Iterate through the array, moving the negative elements to the left and positive ones to the right\n    while i <= j:\n        if arr[i] < 0:\n            i += 1\n        elif arr[j] >= 0:\n            j -= 1\n        else:\n            # Swap the elements at i and j\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n            \n    # Return the modified array\n    return arr\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 750
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1\n",
        "test": "assert replace_blank(\"hello world\", \"_\") == \"hello_world\" # Test case 1",
        "num_ids": 309
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n\n    # Use heapq to get the n largest items from the list\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([5, 4, 3, 2, 1], 3) == [5, 4, 3]",
        "num_ids": 595
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h",
        "test": "assert lateralsuface_cylinder(5, 10) == 314, \"The result of the function is incorrect.\"",
        "num_ids": 491
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(1) == 1",
        "num_ids": 208
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function sets all even bits of a given number.\n    '''\n    mask = 0xAAAAAAAA # This mask has all even bits set to 1\n    return n & mask\n",
        "test": "assert even_bit_set_number(0) == 0, \"Error: even_bit_set_number(0)\"",
        "num_ids": 523
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert check_occurences([(1, 2), (1, 2), (2, 3), (2, 3), (1, 2)]) == {(1, 2): 3, (2, 3): 2} ",
        "num_ids": 713
    },
    {
        "number": 238,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] != '':\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 322
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    \n    count = 0\n    for i in range(1, m//2 + 1):\n        count += get_total_number_of_sequences(i, n-1)\n    \n    return count\n",
        "test": "assert get_total_number_of_sequences(5, 2) == 2",
        "num_ids": 642
    },
    {
        "number": 240,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "test": "assert replace_list([1,2,3], [4,5]) == [1,2,4,5]",
        "num_ids": 415
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello\") == 5, \"count_charac('hello') should return 5\"",
        "num_ids": 273
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    next_sqrt = math.ceil(sqrt_N)\n    return next_sqrt ** 2\n",
        "test": "assert next_Perfect_Square(15) == 16",
        "num_ids": 366
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # find the index of the maximum element in the array\n    max_idx = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_idx]:\n            max_idx = i\n\n    # divide the array into two subarrays around the maximum element\n    left = arr[:max_idx+1]\n    right = arr[max_idx:]\n\n    # find the maximum sum of a bitonic subsequence for each subarray\n    max_left = max_sum_bitonic(left)\n    max_right = max_sum_bitonic(right)\n\n    return max(max_left, max_right)\n\ndef max_sum_bitonic(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # find the index of the maximum element in the array\n    max_idx = 0\n    for i in range(1, n):\n        if arr[i] > arr[max_idx]:\n            max_idx = i\n\n    # check if the array is already increasing or decreasing\n    if max_idx == 0:\n        # the array is already increasing, so return the sum of all elements\n        return sum(arr)\n    elif max_idx == n-1:\n        # the array is already decreasing, so return the sum of all elements\n        return sum(arr)\n    else:\n        # divide the array into two subarrays around the maximum element\n        left = arr[:max_idx+1]\n        right = arr[max_idx:]\n\n        # find the maximum sum of a bitonic subsequence for each subarray\n        max_left = max_sum_bitonic(left)\n        max_right = max_sum_bitonic(right)\n\n        return max(max_left, max_right)\n",
        "test": "assert max_sum([1, 2, 3, 10, 12, 11, 4, 5, 6]) == 39",
        "num_ids": 1377
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative number\")\n    \n    guess = number / 2\n    while abs(guess**2 - number) > 0.00001:\n        guess = (guess + number / guess) / 2\n    \n    return guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 417
    },
    {
        "number": 247,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n",
        "test": "assert lps('cbbd') == 2",
        "num_ids": 562
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n\nn = int(input(\"Enter a positive integer: \"))\nwhile n < 1:\n    n = int(input(\"Invalid input. Enter a positive integer: \"))\n\nresult = harmonic_sum(n)\nprint(\"The harmonic sum of\", n, \"is\", result)\n",
        "test": "assert harmonic_sum(2) == 1 + 1/2",
        "num_ids": 393
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1, 2, 3, 4], [2, 3, 4, 5]) == [2, 3, 4]",
        "num_ids": 474
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3,1,2), 1) == 2",
        "num_ids": 343
    },
    {
        "number": 251,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3] ",
        "num_ids": 411
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real, imag = numbers.real, numbers.imag\n    magnitude = cmath.sqrt(real ** 2 + imag ** 2)\n    phase = cmath.phase(numbers)\n    return magnitude, phase\n",
        "test": "assert convert(0+0j) == (0, 0) ",
        "num_ids": 421
    },
    {
        "number": 253,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2.5, 'three', 4]) == 2 ",
        "num_ids": 323
    },
    {
        "number": 255,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors(['r', 'g', 'b'], 2) == [('r', 'r'), ('r', 'g'), ('r', 'b'), ('g', 'g'), ('g', 'b'), ('b', 'b')]",
        "num_ids": 688
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 577
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1, 2) == (2, 1)",
        "num_ids": 263
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1,2,3), (4,5,6)) == (4,5,6)",
        "num_ids": 563
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    # start with the first prime number\n    i = 2\n    # keep track of the number of primes found so far\n    count = 0\n    # loop until we've found n primes\n    while count < n:\n        # check if i is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        # increment i to the next integer\n        i += 1\n    # return the nth prime number\n    return i-1\n",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 563
    },
    {
        "number": 261,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n",
        "test": "assert division_elements((2,4,6),(4,2,3)) == (0.5,2.0,2.0)",
        "num_ids": 543
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])",
        "num_ids": 648
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age\n",
        "test": "assert dog_age(1) == 7",
        "num_ids": 374
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    sublist = []\n    for i in range(len(S)):\n        sublist.append(S[i])\n        if (i + 1) % step == 0:\n            result.append(sublist)\n            sublist = []\n    if sublist:\n        result.append(sublist)\n    return result\n",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 757
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    return area\n",
        "test": "assert lateralsurface_cube(6) == 24, \"Incorrect lateral surface area\"",
        "num_ids": 342
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    sum = 0\n    count = 1\n    while count <= n:\n        sum += count ** 2\n        count += 2\n    return sum\n",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 359
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = ''\n    count = 0\n    i = 1\n    \n    while count < n:\n        for j in range(i):\n            star_num += '*'\n        star_num += '\\n'\n        count += i\n        i += 1\n        \n    return star_num\n",
        "test": "assert find_star_num(2) == 12, \"Incorrect result for find_star_num(2)\"",
        "num_ids": 536
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 198
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n",
        "test": "assert sum_even_and_even_index([0,1,2,3,4]) == 0, \"Test case 2 failed\"",
        "num_ids": 509
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # Add the fifth power of the even number to the total sum\n            total += i**5\n    \n    return total\n",
        "test": "assert even_Power_Sum(0) == 0, \"Test failed for n = 0\"",
        "num_ids": 513
    },
    {
        "number": 272,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for t in test_list:\n        result.append(t[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9] ",
        "num_ids": 371
    },
    {
        "number": 273,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 533
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            result += int(math.comb(n, i))\n    return result\n",
        "test": "assert even_binomial_Coeff_Sum(0) == 1",
        "num_ids": 342
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Calculate the volume of a cylinder.\n    \n    Args:\n    r: The radius of the cylinder.\n    h: The height of the cylinder.\n    \n    Returns:\n    The volume of the cylinder.\n    '''\n    vol = 3.14159 * r**2 * h\n    return vol\n",
        "test": "assert volume_cylinder(1,2) == 2*3.14159*1**2",
        "num_ids": 362
    },
    {
        "number": 277,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_filter(d, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in d.items() if v >= n}\n    return filtered_dict\n",
        "test": "assert dict_filter({1: 2, 3: 4, 5: 6, 7: 8, 9: 10}, 5) == {5: 6, 7: 8, 9: 10}",
        "num_ids": 544
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif i > 0 and test_tup[i] == test_tup[i-1]:\n            continue\n        else:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements((1, 2, 3, 2, 5)) == 0",
        "num_ids": 480
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return (n * (n * 3 - 1)) // 2\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 353
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 379
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique_elements = set(test_list)\n    return len(unique_elements) == len(test_list)\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 384
    },
    {
        "number": 282,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]",
        "num_ids": 438
    },
    {
        "number": 283,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    str_n = str(n)\n\n    # Loop through each digit in the string\n    for digit in str_n:\n        # Count the frequency of the digit in the string\n        count = str_n.count(digit)\n\n        # Check if the frequency is less than or equal to the digit itself\n        if count > int(digit):\n            return False\n\n    # If all digits pass the test, return True\n    return True",
        "test": "assert validate(123) == True",
        "num_ids": 573
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, elem):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item != elem:\n            return False\n    return True\n",
        "test": "assert check_element([1,1,1,1,1], 1) == True",
        "num_ids": 372
    },
    {
        "number": 285,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2}|b{3})')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three(\"ab\") == False",
        "num_ids": 375
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # find the maximum sub-array sum in the original array\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum + a[i], a[i])\n\n    # calculate the maximum sub-array sum in the repeated array\n    repeated_max_sum = max_sum * k\n\n    # find the maximum sum of a contiguous array in the repeated array\n    repeated_max_sub_array_sum = 0\n    for i in range(k):\n        max_sum = 0\n        current_sum = 0\n        for j in range(i, i+n):\n            current_sum += a[j % n]\n            max_sum = max(max_sum, current_sum)\n        repeated_max_sub_array_sum = max(repeated_max_sub_array_sum, max_sum)\n\n    return repeated_max_sub_array_sum\n",
        "test": "assert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 8, 3) == 7 ",
        "num_ids": 881
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0: # check if the number is even\n            sum += i**2 # add square of the even number to the sum\n    return sum\n",
        "test": "assert square_Sum(0) == 0, \"Input 0, output is incorrect\"",
        "num_ids": 345
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = list1[0]\n    for lst in list1:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 548
    },
    {
        "number": 291,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    modulo = 10**9 + 7\n    dp = [[0 for _ in range(k)] for _ in range(n)]\n    dp[0] = [1] * k\n    dp[1] = [k] * k\n    for i in range(2, n):\n        for j in range(k):\n            dp[i][j] = sum(dp[i-1][j2] for j2 in range(k) if j2 != j)\n    return sum(dp[n-1]) % modulo",
        "test": "assert count_no_of_ways(1, 2) == 2",
        "num_ids": 709
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n, m):\n    '''\n    Returns the quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient",
        "test": "assert find(2, 5) == 0",
        "num_ids": 216
    },
    {
        "number": 293,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the square of the hypotenuse (third side)\n    hypotenuse_squared = w ** 2 + h ** 2\n\n    # Calculate the square root of the hypotenuse (third side)\n    hypotenuse = math.sqrt(hypotenuse_squared)\n\n    return hypotenuse\n",
        "test": "assert otherside_rightangle(3,4) == 5 # check if otherside_rightangle(3,4) returns 5",
        "num_ids": 512
    },
    {
        "number": 294,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for val in listval:\n        if type(val) == str:\n            try:\n                val = float(val)\n            except ValueError:\n                continue\n        if val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3]) == 3",
        "num_ids": 448
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n",
        "test": "assert sum_div(10) == 18, \"sum_div(10) should be 18\"",
        "num_ids": 400
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1048
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list += flatten_list(item)\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([1, [2, 3], [4, [5, 6, [7, 8]]], 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 513
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize an empty dictionary to store the aggregate value for each symbol\n    aggregate_dict = defaultdict(int)\n\n    # Loop through each tuple in the input list\n    for tup in stdata:\n        # Add the quantity to the aggregate value for the corresponding symbol\n        aggregate_dict[tup[0]] += tup[1]\n\n    # Find the maximum aggregate value and its corresponding symbol\n    max_aggregate_value = max(aggregate_dict.values())\n    max_aggregate_symbol = [k for k, v in aggregate_dict.items() if v == max_aggregate_value][0]\n\n    # Return the maximum aggregate value and its corresponding symbol as a tuple\n    return (max_aggregate_symbol, max_aggregate_value)\n",
        "test": "assert max_aggregate([('A', 10), ('B', 20), ('C', 30)]) == 60",
        "num_ids": 600
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    dp = [[0 for j in range(2)] for i in range(2)]\n    dp[0][0] = 1\n    for i in range(1, 2*n+1):\n        dp.append([0]*2)\n        for j in range(2):\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j+1]\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    return dp[2*n][0]",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 575
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Calculate the maximum depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n        else:\n            depth = 1\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth\n",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 360
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # define the range\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            # find the rotation\n            for j in range(rotations[i]):\n                index -= ranges[i][1] - ranges[i][0] + 1\n            # return the element at the index\n            return arr[index]\n",
        "test": "assert find_Element([1,2,3,4,5], [2, 3, 2], 2) == 4",
        "num_ids": 611
    },
    {
        "number": 305,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    This function takes a list of words as input and returns two words starting with letter 'p'.\n    \"\"\"\n    # Initialize empty lists to store words starting with 'p'\n    p_words = []\n    p_words_2 = []\n    \n    # Loop through the list of words and check if the word starts with 'p'\n    for word in words:\n        if re.match(\"^p\", word.lower()):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    \n    # If there are less than two words starting with 'p', add random words to make up to two\n    if len(p_words) < 2:\n        i = 0\n        while len(p_words) < 2:\n            if i >= len(words):\n                break\n            if words[i].lower()[0] != 'p':\n                p_words_2.append(words[i])\n            i += 1\n    \n    # Combine the two lists and return as a tuple\n    return p_words + p_words_2[:2 - len(p_words)]\n",
        "test": "assert start_withp(['python', 'ruby', 'java', 'php', 'perl']) == ['python', 'php']",
        "num_ids": 736
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    \"\"\"\n    dp = [0] * (n + 1)\n    dp[0] = a[0]\n\n    for i in range(1, n):\n        dp[i] = max(dp[j] for j in range(i) if a[i] > a[j]) + a[i]\n\n    return max(dp)\n",
        "test": "assert max_sum_increasing_subseq([1, 10, 2, 3, 4, 5], 6, 3, 5) == 15 ",
        "num_ids": 947
    },
    {
        "number": 307,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tup = deepcopy(tuplex) # create a deep copy of the original tuple\n    if m == 0:\n        m = 1 # set default value for m if it's not provided\n    if n == len(tup):\n        n = n + 1 # set default value for n if it's not provided\n    colon = tup[m-1:n] # get the slice of the tuple from index m-1 to n-1\n    return colon\n",
        "test": "assert colon_tuplex((1,2,3,4,5),0,2) == (1,2) # check for correct output",
        "num_ids": 532
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    :param nums1: list of integers\n    :param nums2: list of integers\n    :param N: number of largest products to find\n    :return: a list of the N largest products\n    \"\"\"\n    # Find the largest products by iterating over both lists and multiplying each pair\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n\n    # Sort the products in descending order and return the first N\n    return sorted(products, reverse=True)[:N]",
        "test": "assert large_product([-2, 3, 5, 7], [-1, 2, 3], 2) == 14",
        "num_ids": 661
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(5, 3) == 5",
        "num_ids": 272
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"abc\") == (\"a\", \"b\", \"c\")",
        "num_ids": 306
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n & -n) + 1\n",
        "test": "assert set_left_most_unset_bit(10) == 11 # test the function with an input of 10",
        "num_ids": 605
    },
    {
        "number": 312,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cone(2,6) == math.pi * (2**2) * 6 / 3",
        "num_ids": 341
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a Python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power",
        "test": "assert highest_Power_of_2(1) == 1 ",
        "num_ids": 329
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 299
    },
    {
        "number": 390,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list\n",
        "test": "assert add_string([1, 2, 3], '{}') == ['1', '2', '3']",
        "num_ids": 412
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        if l1[i] not in result:\n            result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result\n",
        "test": "assert convert_list_dictionary([1, 2, 3], [4, 5, 6], ['a', 'b', 'c']) == {'1': {'4': {'a': None}, '5': {'b': None}, '6': {'c': None}}, '2': {'4': {'a': None}, '5': {'b': None}, '6': {'c': None}}, '3': {'4': {'a': None}, '5': {'b': None}, '6': {'c': None}}}",
        "num_ids": 699
    },
    {
        "number": 392,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        f2 = get_max_sum(n//2)\n        f3 = get_max_sum(n//3)\n        f4 = get_max_sum(n//4)\n        f5 = get_max_sum(n//5)\n        return max(f2 + f3 + f4 + f5, n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 565
    },
    {
        "number": 393,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n    return [lst for lst in input_list if len(lst) == max_length]\n",
        "test": "assert max_length_list([]) == []",
        "num_ids": 408
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 324
    },
    {
        "number": 395,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Returns the first non-repeating character in a given string.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character that occurs only once in the string\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no such character is found, return None\n    return None\n",
        "test": "assert first_non_repeating_character('hello world') == 'h'",
        "num_ids": 574
    },
    {
        "number": 396,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"aabc\") == False, \"Incorrect output\" ",
        "num_ids": 314
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    # Define a list of the three numbers\n    numbers = [a, b, c]\n    \n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Find the median\n    if len(numbers) % 2 == 0:\n        # If there are an even number of elements, average the two middle numbers\n        median = (numbers[1] + numbers[2]) / 2\n    else:\n        # If there are an odd number of elements, the middle number is the median\n        median = numbers[1]\n    \n    return median\n",
        "test": "assert median_numbers(1, 2, 3) == 2",
        "num_ids": 468
    },
    {
        "number": 398,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sums = []\n    for num in nums:\n        sum_num = 0\n        while num > 0:\n            digit = num % 10\n            sum_num += digit\n            num //= 10\n        sums.append(sum_num)\n    return sums\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24] ",
        "num_ids": 497
    },
    {
        "number": 399,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
        "test": "assert bitwise_xor((0,0,0,0,0,1,0), (1,1,1,1,1,0,1)) == (1,1,1,1,1,1,1)",
        "num_ids": 623
    },
    {
        "number": 400,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([(1, 2), (2, 3), (1, 2)]) == 2  # expected output 2",
        "num_ids": 532
    },
    {
        "number": 401,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = ()\n        for j in range(len(test_tup1[i])):\n            temp += (test_tup1[i][j] + test_tup2[i][j],)\n        result.append(temp)\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12)) # nested tuples addition",
        "num_ids": 646
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(2, 5) == 2, \"minimum of 2 and 5 should be 2\"",
        "num_ids": 253
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1,2,3),2) == True",
        "num_ids": 300
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    '''\n    Returns True if the parity of a given number is odd, False otherwise.\n    '''\n    # check if the number is even or odd by checking if the remainder of division by 2 is 0 or 1\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert find_Parity(0) == 0 # parity of 0 is even",
        "num_ids": 304
    },
    {
        "number": 407,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string to access each digit\n    num_str = str(n)\n    \n    # convert the string to a list to manipulate the digits\n    num_list = list(num_str)\n    \n    # sort the list in descending order\n    num_list.sort(reverse=True)\n    \n    # join the sorted list to form the new number\n    new_num = ''.join(num_list)\n    \n    # return the new number\n    return int(new_num)\n",
        "test": "assert rearrange_bigger(1234) == 4321",
        "num_ids": 557
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            pair = (nums1[i], nums2[j])\n            pairs.append(pair)\n            k -= 1\n            if k == 0:\n                break\n        if k == 0:\n            break\n    pairs.sort()\n    return pairs[:k]",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 2) == [(1, 2), (1, 4), (1, 6), (7, 2), (7, 4), (11, 6)] ",
        "num_ids": 1089
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1] - list1[j][0] * list1[i][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1,2),(3,4),(5,6)]) == 12, \"Incorrect result for min_product_tuple([(1,2),(3,4),(5,6)])\"",
        "num_ids": 686
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None:\n            min_val = val\n        elif type(val) == type(min_val):\n            if val < min_val:\n                min_val = val\n    return min_val\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 386
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    # split the snake case string into a list of words\n    words = word.split('_')\n    # convert the first word to lowercase and the rest to titlecase\n    camel_case = words[0].lower() + ''.join(w.title() for w in words[1:])\n    return camel_case\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 440
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and removes all odd numbers from it.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 319
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for tup in list1:\n        result.append(tup[n-1])\n    return result\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == 4",
        "num_ids": 426
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[3,4,5]) == True",
        "num_ids": 425
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_Product([-10, 10, 2, 3, 4, 5]) == 50 ",
        "num_ids": 515
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a dictionary containing the common first elements in the tuples.\n    '''\n    result = {}\n    for t in Input:\n        if t[0] not in result:\n            result[t[0]] = []\n        result[t[0]].append(t)\n    return result\n",
        "test": "assert group_tuples([('apple', 'fruit'), ('orange', 'fruit'), ('banana', 'fruit'), ('carrot', 'vegetable'), ('broccoli', 'vegetable')]) == [('apple', 'orange', 'banana'), ('carrot', 'broccoli')] ",
        "num_ids": 636
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max(['apple', 'banana', 'orange']) == 'banana'",
        "num_ids": 390
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n",
        "test": "assert round_and_sum([5.9, 6.3, 7.1]) == 24, \"Error in round_and_sum\"",
        "num_ids": 584
    },
    {
        "number": 420,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(5) == 225",
        "num_ids": 336
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    result = delimiter.join(str(x) for x in test_tup)\n    return result\n",
        "test": "assert concatenate_tuple((1, 2, 3, 4)) == '1234'",
        "num_ids": 408
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum/n\n",
        "test": "assert find_Average_Of_Cube(1) == 1 # check for edge case n=1",
        "num_ids": 373
    },
    {
        "number": 424,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear((\"hello\", \"world\", \"python\")) == (\"o\", \"d\", \"n\") ",
        "num_ids": 403
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count",
        "test": "assert count_element_in_list([], 1) == 0",
        "num_ids": 288
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2 != 0:\n            odd_nums.append(num)\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5] # Passed",
        "num_ids": 399
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year, month, day = match.groups()\n        return f\"{day}-{month}-{year}\"\n    else:\n        return None\n",
        "test": "assert change_date_format('2021-01-01') == '01-01-2021'",
        "num_ids": 578
    },
    {
        "number": 428,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]",
        "num_ids": 621
    },
    {
        "number": 429,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result\n",
        "test": "assert and_tuples((True, False), (True, True)) == (True, False)",
        "num_ids": 450
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Find the directrix of a parabola.\n    '''\n    directrix = -1 * (b / (2 * a))\n    return directrix\n",
        "test": "assert parabola_directrix(2, 0, 0) == 0",
        "num_ids": 307
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 340
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # calculate the lengths of the two parallel sides\n    parallel1 = base1\n    parallel2 = base2\n    \n    # calculate the length of the diagonal\n    diagonal = (parallel1 + parallel2) / 2 * height\n    \n    # calculate the length of the median\n    median = diagonal / 2\n    \n    return median\n",
        "test": "assert median_trapezium(10,12,4) == 11",
        "num_ids": 461
    },
    {
        "number": 433,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 5) == False",
        "num_ids": 338
    },
    {
        "number": 434,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"ab\") == True",
        "num_ids": 338
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(10) == 0",
        "num_ids": 235
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [-2, -4]",
        "num_ids": 376
    },
    {
        "number": 437,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result\n",
        "test": "assert remove_odd(\"123abc456def\") == \"abcd\" ",
        "num_ids": 293
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list and (test_list[j][0], test_list[i][0]) in test_list:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (2, 1), (3, 4)]) == 1",
        "num_ids": 608
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    # Convert the list of integers to a single string\n    num_str = ''.join(str(i) for i in L)\n    # Convert the string to an integer\n    num = int(num_str)\n    return num\n",
        "test": "assert multiple_to_single([1, 2, 3, 4, 5]) == 12345",
        "num_ids": 383
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b\\w*ly\\b'\n    match = re.search(adverb_pattern, text, re.IGNORECASE)\n    if match:\n        adverb = match.group()\n        position = match.start()\n        return adverb, position\n    else:\n        return None, None",
        "test": "assert find_adverb_position(\"She was quickly running away from the pursuing dog.\") == (2, 7) ",
        "num_ids": 657
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * (l ** 2)\n    return area\n",
        "test": "assert surfacearea_cube(2) == 24",
        "num_ids": 286
    },
    {
        "number": 442,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    pos_count = 0\n    neg_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n\n    if pos_count == 0:\n        return 0\n    else:\n        return pos_count / (pos_count + neg_count)",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0 # 5/5 = 1.0",
        "num_ids": 530
    },
    {
        "number": 443,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    # initialize the largest negative number to None\n    largest_neg = None\n\n    # loop through the list\n    for num in list1:\n        # check if the number is negative\n        if num < 0:\n            # if it's negative and greater than the current largest negative number\n            if largest_neg is None or num > largest_neg:\n                # update the largest negative number\n                largest_neg = num\n\n    # return the largest negative number or None if no negative numbers were found\n    return largest_neg\n",
        "test": "assert largest_neg([-5, -2, -10, -7]) == -2  # Should return -2 ",
        "num_ids": 410
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        result.append(t[:K])\n    return result\n",
        "test": "assert trim_tuple([(1,2,3,4,5),(6,7,8,9,10),(11,12,13,14,15)], 2) == [(1, 2), (6, 7), (11, 12)]",
        "num_ids": 668
    },
    {
        "number": 445,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18) ",
        "num_ids": 508
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    result_dict = {}\n    for item in lst:\n        if item in count_dict:\n            result_dict[item] = count_dict[item]\n    return result_dict\n",
        "test": "assert count_Occurrence(('a', 'b', 'c'), ['a', 'b', 'c']) == Counter({'a': 1, 'b': 1, 'c': 1})",
        "num_ids": 618
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Initialize an empty list to store the cubes of elements in the input list\n    cubes = []\n    \n    # Iterate over the input list\n    for num in nums:\n        # Calculate the cube of the current element\n        cube = num ** 3\n        \n        # Append the cube to the list of cubes\n        cubes.append(cube)\n    \n    # Return the list of cubes\n    return cubes\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27] # expected output [1, 8, 27]",
        "num_ids": 446
    },
    {
        "number": 448,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cal_sum(n):\n    # Initialize the sum variable\n    sum = 0\n    # Initialize the current number variable\n    current_num = 1\n    # Loop through each number in the sequence\n    for i in range(1, n+1):\n        # Calculate the next number in the sequence\n        next_num = current_num + 2**(i-1)\n        # Add the current number to the sum\n        sum += current_num\n        # Set the current number to the next number in the sequence\n        current_num = next_num\n    # Return the sum of the sequence\n    return sum\n",
        "test": "assert cal_sum(1) == 1 # test the edge case of 1",
        "num_ids": 432
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str:\n        if len(s) == l:\n            result.append(s)\n    return result\n",
        "test": "assert extract_string(['A', 'B', 'C', 'D', 'E'], 4) == ['A', 'B', 'C', 'D']",
        "num_ids": 371
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces('hello world') == 'helloworld'",
        "num_ids": 295
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Returns the loss amount on a sale, if the given amount has loss. Otherwise, returns 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 80) == 20 # Test if the loss amount is calculated correctly",
        "num_ids": 381
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a Python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n",
        "test": "assert sumofFactors(1) == 0 # no even factors",
        "num_ids": 383
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    words = re.findall(r'\\b\\w*z\\w*\\b', text.lower())\n    return words\n",
        "test": "assert text_match_wordz(\"Python is a high-level programming language\") == \"Python\"",
        "num_ids": 360
    },
    {
        "number": 455,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return True\n",
        "test": "assert check_monthnumb_number(1) == True",
        "num_ids": 456
    },
    {
        "number": 456,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list\n",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow'] # test case 1",
        "num_ids": 425
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    min_length = len(lst)\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) < min_length:\n                min_length = len(lst[i:j])\n                min_sublist = lst[i:j]\n    return min_sublist\n",
        "test": "assert Find_Min([1]) == [1]",
        "num_ids": 401
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l,b):\n    '''\n    This function takes two parameters, length and breadth of a rectangle.\n    It returns the area of the rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(5, 10) == 50 # Test case 1",
        "num_ids": 251
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_uppercase(\"Python is awesome!\") == \"Python is awesome!\"",
        "num_ids": 326
    },
    {
        "number": 460,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 386
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr('Hello World') == 2, 'Upper case count should be 2'",
        "num_ids": 274
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a list of all possible combinations\n    of its elements. Each combination is represented as a tuple.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(tuple(lst[i:j]))\n    return result\n",
        "test": "assert combinations_list([]) == [] ",
        "num_ids": 411
    },
    {
        "number": 463,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 0\n    min_product = 0\n    result = float('-inf')\n    n = len(arr)\n    \n    for i in range(n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(max_product*arr[i], arr[i])\n        min_product = min(min_product*arr[i], arr[i])\n        result = max(result, max_product)\n    \n    return result\n",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0 # array contains only negative elements",
        "num_ids": 776
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    for i in range(len(values)-1):\n        if values[i] != values[i+1]:\n            return False\n    return True\n",
        "test": "assert check_value({1: 1, 2: 1, 3: 1}, 1) == True ",
        "num_ids": 415
    },
    {
        "number": 465,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert drop_empty({'a': 1, 'b': None, 'c': [], 'd': {}}) == {'a': 1} ",
        "num_ids": 348
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < min_product:\n            min_product = arr[i]\n        else:\n            max_product = max(max_product * arr[i], min_product * arr[i])\n    \n    return max_product\n",
        "test": "assert max_product([1, 2, 3, 4]) == 24",
        "num_ids": 629
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (3, 5, 7)",
        "num_ids": 460
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3], 10) == 6, \"Incorrect remainder\" # should return 6",
        "num_ids": 343
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!=1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1,2,3]) == True, \"Consecutive numbers test failed\"",
        "num_ids": 470
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the list of tuples to a set of tuples, which removes duplicates and sorts the elements within each tuple\n    set1 = set(tuple(sorted(t)) for t in test_list1)\n    set2 = set(tuple(sorted(t)) for t in test_list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection back to a list of tuples and return it\n    return list(intersection)\n",
        "test": "assert tuple_intersection( (1,2,3),(3,2,1) ) == (1,2,3)",
        "num_ids": 570
    },
    {
        "number": 474,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str\n",
        "test": "assert replace_char(\"hello world\", \"o\", \"x\") == \"hellx wxrld\"",
        "num_ids": 402
    },
    {
        "number": 475,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert sort_counter({'a': 1, 'b': 2, 'c': 3}) == Counter({'c': 3, 'b': 2, 'a': 1})",
        "num_ids": 499
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # sort the array in ascending order\n    nums.sort()\n    # return the sum of the first and last elements\n    return nums[0] + nums[-1]\n",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6, \"Test case 1 failed\"",
        "num_ids": 445
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 204
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_lowercase(\"Hello World\") == \"H W\"",
        "num_ids": 360
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    # Find the first digit of the number\n    first_digit = n // 10**(len(str(n))-1)\n    \n    # Return the first digit\n    return first_digit\n",
        "test": "assert first_Digit(123) == 1",
        "num_ids": 273
    },
    {
        "number": 554,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Split(lst):\n    '''\n    Returns a new list containing only the odd integers from the given list.\n    '''\n    return [x for x in lst if x % 2 != 0]\n",
        "test": "assert Split([1,2,3,4,5]) == [1, 3, 5]  # Check if the function returns the odd integers correctly. ",
        "num_ids": 358
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def difference(n):\n    # calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    \n    # calculate the sum of the first n natural numbers\n    sum_of_numbers = n*(n+1)//2\n    \n    # return the difference between the two sums\n    return sum_of_cubes - sum_of_numbers\n",
        "test": "assert difference(0) == 0, \"Error in calculating the difference for n=0\"",
        "num_ids": 419
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 != 0:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1, 3, 5, 7, 9], 5) == 0 ",
        "num_ids": 406
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n",
        "test": "assert toggle_string('hello') == 'HELLO'",
        "num_ids": 376
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Returns the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert integers to strings to work with digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Initialize sum of differences to 0\n    diff_sum = 0\n    \n    # Iterate through each digit of n1 and n2 and calculate the difference\n    for i in range(max(len(n1_str), len(n2_str))):\n        # Get the digit at the current position for n1\n        n1_digit = int(n1_str[i:i+1]) if i < len(n1_str) else 0\n        \n        # Get the digit at the current position for n2\n        n2_digit = int(n2_str[i:i+1]) if i < len(n2_str) else 0\n        \n        # Calculate the difference between the digits and add it to the sum\n        diff_sum += abs(n1_digit - n2_digit)\n    \n    return diff_sum\n",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 825
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    \n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far\n",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15 ",
        "num_ids": 638
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n",
        "test": "assert union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4) ",
        "num_ids": 498
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    return max_length\n",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 340
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    values = pattern.findall(text)\n    return values\n",
        "test": "assert extract_values('\"hello\" world \"Python\"') == ['hello', 'Python']",
        "num_ids": 319
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10 # 10 unordered pairs with different elements",
        "num_ids": 409
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o'] # check if the function returns a list of characters",
        "num_ids": 272
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n != 0:\n        sum += n % 10\n        n //= 10\n    return sum\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 293
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1,2,3,4,5]) == True",
        "num_ids": 368
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length\n",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 239
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n",
        "test": "assert sort_sublists([[\"banana\", \"apple\", \"grape\"], [\"zebra\", \"cat\", \"dog\"]]) == [[\"apple\", \"banana\", \"grape\"], [\"cat\", \"dog\", \"zebra\"]]  # case with two sublists",
        "num_ids": 597
    },
    {
        "number": 572,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Removes duplicate numbers from a given list of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1, 2, 2, 3, 3, 3]) == [1, 2, 3]  # test case 1",
        "num_ids": 538
    },
    {
        "number": 573,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 424
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: surface area of the cylinder\n    \"\"\"\n    surface_area = 2 * 3.14159 * r * (r + h)\n    return surface_area",
        "test": "assert surfacearea_cylinder(4, 1) == 62.83185307179586, \"Incorrect surface area for cylinder\"",
        "num_ids": 452
    },
    {
        "number": 576,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3],[1,2])==True, \"Test case 1 failed\"",
        "num_ids": 548
    },
    {
        "number": 577,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    # Check for invalid input\n    if n < 0:\n        return None\n    \n    # Compute the factorial iteratively\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    \n    # Compute the last digit of the factorial\n    last_digit = fact % 10\n    \n    return last_digit\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 481
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9] # example usage with expected output",
        "num_ids": 598
    },
    {
        "number": 579,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a tuple containing elements which are present in only one of the tuples.\n    '''\n    # Using set to find the union of two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Using set to find the intersection of two tuples\n    intersection_set = set(test_tup1) & set(test_tup2)\n    \n    # Using set to find the dissimilar elements in the two tuples\n    dissimilar_set = union_set - intersection_set\n    \n    return tuple(dissimilar_set)\n",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 4)) == (3, 4)",
        "num_ids": 597
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Returns a new tuple with only the even elements of the input tuple,\n    where the elements can be tuples themselves.\n    \"\"\"\n    result = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            result.append(even_ele(element, even_fnc))\n        else:\n            if even_fnc(element):\n                result.append(element)\n    return tuple(result)\n",
        "test": "assert even_ele((1, 2, (3, 4, 5), 6, (7, 8, 9, 10), 11), lambda x: x%2 == 0) == (2, (4, 6), (8, 10)) ",
        "num_ids": 852
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surface_Area(b,s):\n    # Calculating the slant height of the pyramid\n    h = (b ** 2 + s ** 2) ** 0.5\n    \n    # Calculating the surface area of the pyramid\n    area = 2 * (b ** 2 + h ** 2)\n    \n    return area\n",
        "test": "assert surface_Area(4,2) == 24",
        "num_ids": 475
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True, \"The dictionary is not empty\"",
        "num_ids": 259
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        res = 0\n        for i in range(num):\n            res += catalan_number(i) * catalan_number(num-i-1)\n        return res\n",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 435
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = r\"\\w+ly\\b\"\n    match = re.search(regex, text)\n    if match:\n        adverb = match.group(0)\n        position = match.start()\n        return adverb, position\n    else:\n        return None, None\n",
        "test": "assert find_adverbs(\"The quick brown fox jumps over the supernaturally lazy dog.\") == (\"supernaturally\", [13, 29])",
        "num_ids": 568
    },
    {
        "number": 585,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    # Create a max heap with n elements from the items list\n    max_heap = heapq.nlargest(n, items)\n    \n    # Return the max heap\n    return max_heap\n",
        "test": "assert expensive_items([(1, 2), (3, 4), (5, 6)], 2) == [(5, 6), (3, 4)] ",
        "num_ids": 550
    },
    {
        "number": 586,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return second_part + first_part\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 484
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3]) == (1,2,3) # testing the function with a list [1,2,3] and expecting a tuple (1,2,3)",
        "num_ids": 315
    },
    {
        "number": 588,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    # Calculate the maximum value in the list\n    max_value = max(nums)\n    \n    # Calculate the minimum value in the list\n    min_value = min(nums)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_value - min_value\n    \n    # Return the difference\n    return diff\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4, \"big_diff([1, 2, 3, 4, 5]) should return 4\"",
        "num_ids": 476
    },
    {
        "number": 589,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares_list = []\n    for i in range(a, b+1):\n        root = int(i ** 0.5)\n        if root * root == i:\n            perfect_squares_list.append(i)\n    return perfect_squares_list\n",
        "test": "assert perfect_squares(1,10) == [1,4,9]",
        "num_ids": 529
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return r * cmath.rect(1, theta)",
        "test": "assert polar_rect(0,0) == (0+0j)",
        "num_ids": 311
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List has less than 2 elements, cannot swap\")\n        return newList\n\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1] # test with list of integers",
        "num_ids": 478
    },
    {
        "number": 592,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k): \n    if k == 0 or k == n:\n        return 1\n    else:\n        return ((n-k+1) * binomial_Coeff(n,k-1))//k",
        "test": "assert binomial_Coeff(5,3) == 10",
        "num_ids": 400
    },
    {
        "number": 593,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    ip = re.sub(r'\\b0+(\\d)', r'\\1', ip)\n    return ip\n",
        "test": "assert removezero_ip(\"192.168.010.001\") == \"192.168.10.1\"",
        "num_ids": 468
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_numbers = [num for num in list1 if num % 2 == 0]\n    odd_numbers = [num for num in list1 if num % 2 != 0]\n    \n    if len(even_numbers) > 0 and len(odd_numbers) > 0:\n        return abs(even_numbers[0] - odd_numbers[0])\n    else:\n        return \"No difference possible.\"\n",
        "test": "assert diff_even_odd([1,2,3,4,5]) == 1 # test for even and odd numbers with same absolute difference",
        "num_ids": 597
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1, n2 = len(str1), len(str2)\n    if n1 != n2:\n        return \"Error: Length of strings should be same.\"\n    else:\n        count = 0\n        for i in range(n1):\n            if str1[i] != str2[i]:\n                count += 1\n        return count\n",
        "test": "assert min_Swaps(\"111\", \"000\") == 3 # expected output: 3",
        "num_ids": 745
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size\n",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 354
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 > n2:\n        return find_kth(arr2, arr1, k)\n    if n1 == 0:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k // 2, n1) - 1\n    j = k - i - 2\n    if arr1[i] < arr2[j]:\n        return find_kth(arr1[i+1:], arr2, k-i-1)\n    else:\n        return find_kth(arr1, arr2[j+1:], k-j-1)\n",
        "test": "assert find_kth([1, 3, 5], [2, 4, 6], 4) == 6",
        "num_ids": 834
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    # Find the sum of the cubes of each digit of the given number\n    sum = 0\n    n = number\n    while n > 0:\n        digit = n % 10\n        sum += digit ** 3\n        n = n // 10\n\n    # If the sum is equal to the original number, then it is an Armstrong number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 575
    },
    {
        "number": 599,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 327
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True",
        "num_ids": 267
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Returns the first repeated character in a given string.\n    If there are no repeated characters, returns None.\n    \"\"\"\n    # Use a dictionary to keep track of the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character that appears more than once\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    # If no characters appear more than once, return None\n    return None\n",
        "test": "assert first_repeated_char(\"abcdabc\") == \"a\"",
        "num_ids": 604
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        rev_i = int(str(i)[::-1])\n        if i == rev_i:\n            if i not in ludics:\n                ludics.append(i)\n    return ludics\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1306
    },
    {
        "number": 604,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of the words\n    words = words[::-1]\n    # Join the words back into a string\n    return ' '.join(words)\n",
        "test": "assert reverse_words(\"hello world\") == \"world hello\" ",
        "num_ids": 352
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num > 2:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 423
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 238
    },
    {
        "number": 607,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern.\n    The function should return the matching substring,\n    a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"This is a test string\", r\"is\") == (\"is\", 2, 4) ",
        "num_ids": 624
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Returns the nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        bell_n_minus_1 = bell_Number(n-1)\n        bell_sum = 0\n        for i in range(n):\n            bell_sum += bell_n_minus_1\n        return bell_sum\n",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 363
    },
    {
        "number": 610,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1) # remove the kth element from the list\n    return list1\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 489
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val\n",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 7 ",
        "num_ids": 520
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 475
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def cumulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum of all values in the tuple list\n    cumulative_list = []\n    \n    # Loop through each value in the tuple list and calculate the cumulative sum of all values\n    for i in range(len(test_list)):\n        if i == 0:\n            cumulative_list.append(test_list[i])\n        else:\n            cumulative_list.append(cumulative_list[i-1] + test_list[i])\n    \n    return cumulative_list\n",
        "test": "assert cummulative_sum([-1, 0, 1]) == [-1, -1, 0]",
        "num_ids": 504
    },
    {
        "number": 615,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        avg_list.append(avg)\n    return avg_list\n",
        "test": "assert average_tuple(((1,2,3), (4,5,6))) == [2, 5]",
        "num_ids": 552
    },
    {
        "number": 616,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup\n",
        "test": "assert tuple_modulo((2, 4, 6), (3, 5, 7)) == (2, 4, 6) ",
        "num_ids": 531
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif steps == 0 or steps < d:\n        return -1\n    else:\n        min_jumps = float('inf')\n        for i in range(1, d+1):\n            jumps = min_Jumps(steps-i, d-i)\n            if jumps != -1:\n                min_jumps = min(min_jumps, jumps+1)\n        return min_jumps\n",
        "test": "assert min_Jumps(10, 10) == 1 ",
        "num_ids": 600
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums1[i] == 0 or nums2[i] == 0:\n            result.append(None)\n        else:\n            result.append(nums1[i] / nums2[i])\n    return result",
        "test": "assert div_list([1,2,3,4,5],[2,2,2,2,2]) == [0.5,1,1.5,2,2.5]",
        "num_ids": 558
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    non_num_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            non_num_str += char\n    return non_num_str + num_str\n",
        "test": "assert move_num(\"a1b2c3d4e5\") == \"abcde12345\" ",
        "num_ids": 466
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    n = len(a)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n",
        "test": "assert largest_subset([1,2,3,4,5]) == 3",
        "num_ids": 816
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i, j = 0, 0\n    median = 0.0\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median = arr1[i]\n            i += 1\n        else:\n            median = arr2[j]\n            j += 1\n            \n    if i == n:\n        return median\n    else:\n        return arr2[j]\n",
        "test": "assert get_median([1,2,3,4,5], [6,7,8,9,10], 5) == 5",
        "num_ids": 840
    },
    {
        "number": 623,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3],2) == [1,4,9] # This is a test case to check if the function is returning the correct output for the input [1,2,3] and n=2.",
        "num_ids": 472
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "test": "assert is_upper('world') == 'WORLD'",
        "num_ids": 215
    },
    {
        "number": 625,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1] ",
        "num_ids": 386
    },
    {
        "number": 626,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = r ** 2 / 2 # Area of semicircle is 1/2 * r^2\n    return area\n",
        "test": "assert triangle_area(1) == 0.5",
        "num_ids": 525
    },
    {
        "number": 627,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    if end is None:\n        end = n\n    \n    for i in range(start, end):\n        if array[i] != i+1:\n            return i+1\n    \n    return end+1\n",
        "test": "assert find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 11",
        "num_ids": 491
    },
    {
        "number": 628,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"This is a test\") == \"This%20is%20a%20test\"",
        "num_ids": 295
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Split(numbers):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n",
        "test": "assert Split([1,2,3,4,5,6]) == [2,4,6]",
        "num_ids": 433
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub == []:\n        sub = [(0, 0)]\n    x, y = ele\n    adj = []\n    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n        nx, ny = x + dx, y + dy\n        if (nx, ny) not in sub:\n            adj.append((nx, ny))\n    return adj\n",
        "test": "assert adjac((1, 1)) == [(0, 0), (0, 1), (1, 0), (0, 2), (1, 2), (2, 1), (2, 2)]",
        "num_ids": 656
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 286
    },
    {
        "number": 632,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    non_zero_list = []\n    \n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n            \n    return non_zero_list + zero_list\n",
        "test": "assert move_zero([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 619
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum\n",
        "test": "assert pair_xor_Sum([1, 2, 3, 4], 4) == 4, \"Incorrect result for [1, 2, 3, 4]\"",
        "num_ids": 387
    },
    {
        "number": 635,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sorts the given list using heap sort.\n    '''\n    h = []\n    for item in iterable:\n        hq.heappush(h, item)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert heap_sort([5,3,1,4,2]) == [1,2,3,4,5] ",
        "num_ids": 365
    },
    {
        "number": 637,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(0,0) == True, \"noprofit_noloss(0,0) should return True\"",
        "num_ids": 394
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index and returns the result rounded to the nearest integer.\n    \n    Args:\n    v (float): The wind velocity in km/h.\n    t (float): The temperature in celsius.\n    \n    Returns:\n    int: The rounded wind chill index.\n    '''\n    \n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # Round the result to the nearest integer\n    wc = round(wc)\n    \n    return int(wc)\n",
        "test": "assert wind_chill(40, 0) == 10 # expected result: 10",
        "num_ids": 616
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum += len(name)\n    return sum\n",
        "test": "assert sample_nam(['John', 'james', 'Mike', 'mary']) == 8 ",
        "num_ids": 388
    },
    {
        "number": 640,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)\n",
        "test": "assert remove_parenthesis(\"(abc)def\") == \"def\"",
        "num_ids": 315
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef is_nonagonal(n):\n    \"\"\"\n    Returns the nth nonagonal number.\n    \"\"\"\n    return n * (2 * n - 1) + (n - 1) // 2\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 260
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n",
        "test": "assert text_match_wordz_middle('aaz') == True",
        "num_ids": 389
    },
    {
        "number": 644,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        k = n\n    input[:k] = input[:k][::-1]\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1]  # Reversing all the elements of array. ",
        "num_ids": 490
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    # Creating a new tuple by concatenating the original tuple and the dictionary\n    new_tup = test_tup + (test_dict,)\n    \n    # Returning the new tuple\n    return new_tup\n",
        "test": "assert add_dict_to_tuple((1,2,3), {'a': 1, 'b': 2}) == (1, 2, 3, {'a': 1, 'b': 2})",
        "num_ids": 500
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1] / ((n-1) + (n-1))\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.0",
        "num_ids": 1075
    },
    {
        "number": 722,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students",
        "test": "assert filter_data({\"Alice\": (1.80, 70), \"Bob\": (1.71, 65), \"Charlie\": (1.90, 80), \"David\": (1.65, 55)}, 1.85, 65) == {\"Charlie\": (1.90, 80)} ",
        "num_ids": 739
    },
    {
        "number": 723,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3  # All indices have the same value",
        "num_ids": 513
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to a string so we can iterate over its digits\n    base_str = str(base)\n    # Initialize sum to 0\n    total_sum = 0\n    # Iterate over each digit of the base string\n    for digit in base_str:\n        # Convert the digit back to an integer and raise it to the specified power\n        digit_power = int(digit) ** power\n        # Add the power of the digit to the total sum\n        total_sum += digit_power\n    # Return the total sum of all digits raised to the specified power\n    return total_sum\n",
        "test": "assert power_base_sum(456, 3) == 43",
        "num_ids": 465
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text1)\n    return matches\n",
        "test": "assert extract_quotation('This is a \"test\" of extract_quotation function.') == ['test']",
        "num_ids": 366
    },
    {
        "number": 726,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12)",
        "num_ids": 548
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists of numbers as input and returns a list where each element is the sum of the corresponding elements in the input lists.\n    \n    Parameters:\n        lst1 (list): A list of numbers.\n        lst2 (list): A list of numbers.\n    \n    Returns:\n        result (list): A list where each element is the sum of the corresponding elements in lst1 and lst2.\n    \n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]",
        "num_ids": 570
    },
    {
        "number": 730,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            result.append(key)\n    return result\n",
        "test": "assert consecutive_duplicates([1, 1, 2, 2, 2, 3, 3, 3]) == [1, 2, 3]",
        "num_ids": 593
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n    \n    # Calculate the lateral surface area of the cone using the formula \u03c0r(h + slant_height)\n    lateral_surface_area = math.pi * r * (h + slant_height)\n    \n    return lateral_surface_area\n",
        "test": "assert lateralsurface_cone(3, 4) == 12.56636",
        "num_ids": 463
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    \n    # Use regular expression to replace spaces, commas and dots with a colon\n    text = re.sub('[ ,.]', ':', text)\n    \n    # Return the modified text\n    return text\n",
        "test": "assert replace_specialchar('Python is awesome.') == 'Python:is:awesome:' ",
        "num_ids": 386
    },
    {
        "number": 733,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x < A[0] or x > A[-1]:\n        return -1\n    \n    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            # found the element, now look for its first occurrence\n            while mid > 0 and A[mid-1] == x:\n                mid -= 1\n            return mid\n        \n        elif A[mid] < x:\n            # element must be in the right half\n            low = mid + 1\n        \n        else:\n            # element must be in the left half\n            high = mid - 1\n    \n    # element not found\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 2, 2, 3, 4, 4, 5], 2) == 1 ",
        "num_ids": 878
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9+7\n    dp = [1]*(n+1)\n    result = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            dp[j] = (dp[j]*arr[i])%mod\n            result = (result + dp[j])%mod\n    \n    return result\n",
        "test": "assert sum_Of_Subarray_Prod([]) == 0, \"Incorrect result for []\"",
        "num_ids": 879
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def set_middle_bits(n):\n    # Get the binary representation of the number\n    binary_representation = bin(n)\n\n    # Convert the binary representation to a list of bits\n    bits = list(binary_representation[2:])\n\n    # Toggle the bits of the number except the first and last bit\n    for i in range(1, len(bits) - 1):\n        if bits[i] == '0':\n            bits[i] = '1'\n        else:\n            bits[i] = '0'\n\n    # Convert the list of bits back to a binary number\n    new_binary_number = int(''.join(bits), 2)\n\n    return new_binary_number",
        "test": "assert set_middle_bits(0) == 0, \"set_middle_bits(0) should return 0\" ",
        "num_ids": 635
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index != len(a) and a[index] == x:\n        return index\n    else:\n        return -1\n",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 3) == 2 # left insertion point for 3",
        "num_ids": 440
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('Apple') == True ",
        "num_ids": 369
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (1 / 2) ** (n - 1) * geometric_sum(n - 1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 274
    },
    {
        "number": 739,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    index = 0\n    i = 0\n    while True:\n        tn = i * (i + 1) // 2\n        num_digits = len(str(tn))\n        if num_digits == n:\n            return index\n        elif num_digits < n:\n            index += 1\n        else:\n            return index\n        i += 1",
        "test": "assert find_Index(2) == 2 # triangular number with two digits is 3",
        "num_ids": 460
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict\n",
        "test": "assert tuple_to_dict((1, 2, 3, 4)) == {1: 2, 3: 4}",
        "num_ids": 635
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # If the length of the string is 1, all the characters will be same by default\n    if len(s) == 1:\n        return True\n    # If the length of the string is greater than 1, we check if all characters are same or not\n    elif len(s) > 1:\n        # We iterate over the string and check if all characters are same or not\n        for i in range(len(s)):\n            if s[0] != s[i]:\n                return False\n        return True\n    # If the length of the string is 0, we return False by default\n    else:\n        return False\n",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 485
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    height = (side**2 - side**2/2)**0.5\n    area = 0.5 * side**2 * math.sin(math.acos((side**2 + height**2 - side**2) / (2 * side * height)))\n    return area\n",
        "test": "assert area_tetrahedron(8) == 24.0, \"Incorrect area for a tetrahedron with side length of 8\"",
        "num_ids": 827
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    This function takes a list and an integer m as input.\n    It rotates the list to the right direction by m elements.\n    '''\n    n = len(list)\n    m = m % n\n    return list[-m:] + list[:-m]\n",
        "test": "assert rotate_right([1,2,3,4,5], 2) == [4,5,1,2,3] # basic test case",
        "num_ids": 448
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1,2,3)) is False",
        "num_ids": 324
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(num)]\n        divisible = True\n        for digit in digits:\n            if num % digit != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(100, 200) == [100, 110, 120, 130, 140, 150, 160, 170, 180, 190], \"incorrect result for divisible_by_digits(100, 200)\"",
        "num_ids": 835
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (math.pi * r**2) * (a/360)\n",
        "test": "assert sector_area(1,180) == math.pi/2",
        "num_ids": 414
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    # Create a table to store lengths of longest common suffixes of substrings.\n    lcs = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    # Fill the table using dynamic programming approach.\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n    # Read the LCS from the table.\n    lcs_str = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs_str = X[i-1] + lcs_str\n            i -= 1\n            j -= 1\n            k -= 1\n        elif lcs[i-1][j][k] > lcs[i][j-1][k] and lcs[i-1][j][k] > lcs[i][j][k-1]:\n            i -= 1\n        elif lcs[i][j-1][k] > lcs[i-1][j][k] and lcs[i][j-1][k] > lcs[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs_str\n",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"XGTZBAC\") == \"GTZB\" ",
        "num_ids": 1541
    },
    {
        "number": 748,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regex to find all words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z]\\w*\\b')\n    matches = pattern.findall(str1)\n    \n    # Replace each match with the same match surrounded by spaces\n    for match in matches:\n        str1 = str1.replace(match, ' ' + match + ' ')\n        \n    # Remove any extra spaces\n    str1 = ' '.join(str1.split())\n    \n    return str1",
        "test": "assert capital_words_spaces('') == ''",
        "num_ids": 508
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "test": "assert sort_numeric_strings(['10', '1', '5', '20', '30']) == ['1', '5', '10', '20', '30']",
        "num_ids": 422
    },
    {
        "number": 750,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, (4, 5, 6)]",
        "num_ids": 373
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    # Base case\n    if i >= len(arr):\n        return True\n    \n    # Check if left child is less than parent\n    if (2*i + 1) < len(arr) and arr[2*i + 1] < arr[i]:\n        return False\n    \n    # Check if right child is less than parent\n    if (2*i + 2) < len(arr) and arr[2*i + 2] < arr[i]:\n        return False\n    \n    # Recursively check left and right child\n    return check_min_heap_helper(arr, 2*i + 1) and check_min_heap_helper(arr, 2*i + 2)\n    \n",
        "test": "assert check_min_heap_helper([4, 10, 3, 5, 1], 1) == False",
        "num_ids": 905
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num_list = [0, 1]\n        for i in range(2, n+1):\n            jacobsthal_num_list.append(jacobsthal_num_list[i-1] + 2 * jacobsthal_num_list[i-2])\n        return jacobsthal_num_list[n]\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 622
    },
    {
        "number": 753,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x:x[1])\n    result = []\n    for i in range(K):\n        result.append(test_list[i])\n    return result\n",
        "test": "assert min_k([(2, 3), (1, 2), (3, 4), (4, 5), (5, 6)], 3) == [(1, 2), (2, 3), (3, 4)] ",
        "num_ids": 797
    },
    {
        "number": 754,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
        "num_ids": 593
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Returns the second smallest number in a list.\n    \"\"\"\n    # Remove duplicates and sort the list in ascending order\n    unique_numbers = sorted(set(numbers))\n    # Return the second element of the sorted list\n    return unique_numbers[1]\n",
        "test": "assert second_smallest([1,2,3,4,5]) == 2 # smallest is 1, second smallest is 2",
        "num_ids": 427
    },
    {
        "number": 756,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"ab\") == True",
        "num_ids": 272
    },
    {
        "number": 757,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j] < test_list[i]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0, \"Test failed for empty list\"",
        "num_ids": 438
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def unique_sublists(lst):\n    # Create a dictionary to store the counts\n    counts = {}\n    \n    # Loop over each sublist in the original list\n    for sublst in lst:\n        # Convert the sublist to a tuple and use it as a key in the dictionary\n        tpl = tuple(sublst)\n        if tpl in counts:\n            # If the sublist is already in the dictionary, increment its count\n            counts[tpl] += 1\n        else:\n            # If the sublist is not in the dictionary, add it with a count of 1\n            counts[tpl] = 1\n    \n    return counts\n",
        "test": "assert unique_sublists([[1, 2], [2, 3], [1, 2], [4, 5]]) == {(1, 2): 2, (2, 3): 1, (4, 5): 1} ",
        "num_ids": 627
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if len(num.split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal('3.14') == True",
        "num_ids": 452
    },
    {
        "number": 760,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr)\n    return len(unique) == 1\n",
        "test": "assert unique_Element([1,2,3,4,5]) == False",
        "num_ids": 315
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Define a list of months with 30 days\n    months_30_days = [4, 6, 9, 11]\n    # Check if the given month number is in the list of months with 30 days\n    if monthnum3 in months_30_days:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True # April has 30 days",
        "num_ids": 429
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n\n    for i in range(2, n):\n        diff = abs(arr[i] - arr[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1, \"Test case 2 failed\"",
        "num_ids": 741
    },
    {
        "number": 764,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"12345\") == 5 ",
        "num_ids": 279
    },
    {
        "number": 765,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # Find the nth polite number\n    polite = 0\n    i = 1\n    while i <= n:\n        polite = polite + 1\n        for j in range(2, int(math.sqrt(polite))+1):\n            if polite % j == 0:\n                polite += j\n                j = 1\n        i += 1\n    \n    # Return the nth polite number\n    return polite\n",
        "test": "assert is_polite(1) == 1",
        "num_ids": 593
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 453
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n    The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n",
        "test": "assert get_pairs_count([1,2,3,4,5], 7) == 2 # test case 2",
        "num_ids": 714
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1, 2, 3], [2, 3, 4]) == [1]  # [1] is the difference between [1, 2, 3] and [2, 3, 4]",
        "num_ids": 385
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 # 1^4 = 1",
        "num_ids": 322
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    stack = deque()\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if not (current_char == \"(\" and char == \")\") \\\n               and not (current_char == \"{\" and char == \"}\") \\\n               and not (current_char == \"[\" and char == \"]\"):\n                return False\n    return len(stack) == 0",
        "test": "assert check_expression(\"()\") == True",
        "num_ids": 713
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert remove_length(\"Hello world\", 4) == \"Hello world\"",
        "num_ids": 377
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text, re.MULTILINE)\n    positions = [(match.start(), match.group()) for match in matches]\n    if positions:\n        return positions\n    else:\n        return None\n",
        "test": "assert occurance_substring('hello world', 'world') == [(6, 'world')]",
        "num_ids": 582
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Checks whether every odd index contains odd numbers of a given list.\n\n    :param nums: List of integers.\n    :return: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1,3,5,7]) == True",
        "num_ids": 397
    },
    {
        "number": 776,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count",
        "test": "assert count_vowels(\"aeiouaeiou\") == 0",
        "num_ids": 488
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a dictionary to store the frequency of elements in the list\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    \n    # Calculate the sum of non-repeated elements\n    sum = 0\n    for i in freq:\n        if freq[i] == 1:\n            sum += i\n    \n    return sum ",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 715
    },
    {
        "number": 778,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "test": "assert pack_consecutive_duplicates([1, 2, 2, 2, 3, 3, 4, 4, 5]) == [[1], [2, 2, 2], [3, 3], [4, 4], [5]] ",
        "num_ids": 669
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    # Convert all sublists to tuples and count their occurrences\n    count = {}\n    for sublist in list1:\n        tup = tuple(sublist)\n        if tup in count:\n            count[tup] += 1\n        else:\n            count[tup] = 1\n    return count\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 561
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    \"\"\"\n    # initialize an empty list to store the combinations of sums\n    result = []\n    \n    # loop through the length of the tuple list\n    for i in range(1, len(test_list)+1):\n        # find all the possible combinations of length i in the tuple list\n        comb = combinations(test_list, i)\n        \n        # loop through each combination\n        for j in comb:\n            # check if the sum of each tuple in the combination is equal to 10\n            if sum(j) == 10:\n                # if the sum is equal to 10, append the combination to the result list\n                result.append(j)\n    \n    # return the result list\n    return result\n",
        "test": "assert find_combinations([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [((1, 2), (3, 4, 5, 6, 7, 8, 9))]",
        "num_ids": 1035
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n\nprint(count_divisors(18)) # Output: 4\n",
        "test": "assert count_divisors(1) == 1  # 1 has only 1 divisor (1)",
        "num_ids": 472
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (k-i)%2!=0:\n                    total_sum += sum(arr[i:k])\n    return total_sum\n",
        "test": "assert odd_length_sum([1, 3, 5, 7, 9]) == 25, \"Incorrect sum for odd length subarrays\"",
        "num_ids": 419
    },
    {
        "number": 783,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Conversion formula from RGB to HSV\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r,g,b), min(r,g,b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = int(h * 60)\n    if h < 0:\n        h += 360\n    s = 0 if cmax == 0 else (delta / cmax) * 1000\n    v = cmax * 1000\n    return (h, s, v)\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1130
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even[0] * odd[0]\n",
        "test": "assert mul_even_odd([10, 20, 30, 40, 50, 60]) == 1000, \"Incorrect result for [10, 20, 30, 40, 50, 60]\"",
        "num_ids": 530
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the parentheses and split into a list of strings\n    items = test_str.strip('()').split(',')\n    # Convert each string to an integer and return as a tuple\n    return tuple(int(item.strip()) for item in items)\n",
        "test": "assert tuple_str_int(\"(1,2,3)\") == (1,2,3) # should return (1,2,3)",
        "num_ids": 514
    },
    {
        "number": 786,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "test": "assert right_insertion([1, 3, 4, 5, 7], 2) == 1 ",
        "num_ids": 364
    },
    {
        "number": 787,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})' # regular expression pattern to match 'a' followed by three 'b'\n    match = re.search(pattern, text) # use re.search to find a match in the text\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three('aabbb') == True ",
        "num_ids": 375
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple",
        "test": "assert new_tuple([1, 2, 3], 'a') == (1, 2, 3, 'a')",
        "num_ids": 305
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([1,2,3,4]) == False, \"Expected False, Got True\" # test case 1",
        "num_ids": 384
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i) == tuple:\n            result.extend(i)\n        else:\n            result.append(i)\n    return tuple(result)\n",
        "test": "assert remove_nested((1,2,3,4,5)) == (1,2,3,4,5)",
        "num_ids": 492
    },
    {
        "number": 792,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 329
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    :param arr: Sorted array.\n    :param x: Element to search.\n    :return: Last position of x in arr, or -1 if x is not in arr.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Continue search to the right\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result",
        "test": "assert last([1,2,3,4,5,6,7,8,9,10], 4) == 3",
        "num_ids": 664
    },
    {
        "number": 794,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb('ab') == True",
        "num_ids": 346
    },
    {
        "number": 796,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(d):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in d.values():\n        sum += item\n    return sum\n",
        "test": "assert return_sum({'a': 2, 'b': 3, 'c': 4}) == 9",
        "num_ids": 343
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            total += i\n    return total\n",
        "test": "assert sum_odd(10) == 25 # 1 + 3 + 5 + 7 + 9 = 25",
        "num_ids": 403
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    # Initialize a variable to store the sum\n    total_sum = 0\n    \n    # Loop through the array and add each element to the total_sum\n    for i in range(len(arr)):\n        total_sum += arr[i]\n    \n    # Return the total_sum\n    return total_sum\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 322
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    # Convert n to binary string\n    binary_string = format(n, '032b')\n\n    # Rotate left by d bits\n    rotated_string = binary_string[d:] + binary_string[:d]\n\n    # Convert rotated string back to integer\n    rotated_integer = int(rotated_string, 2)\n\n    return rotated_integer\n",
        "test": "assert left_rotate(10, 0) == 10",
        "num_ids": 483
    },
    {
        "number": 800,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all whitespaces from a string using regex.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"This is a test string\") == \"Thisisateststring\"",
        "num_ids": 290
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 1, 1) == 3 ",
        "num_ids": 446
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the minimum element in the array\n    for i in range(n):\n        if arr[i] < arr[n-1]:\n            return i\n    return -1 # If no rotation is needed\n",
        "test": "assert count_rotation([4, 5, 6, 7, 0, 1, 2]) == 4",
        "num_ids": 603
    },
    {
        "number": 803,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_perfect_square(1) == True",
        "num_ids": 352
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 3, 4]) == True # 2*3*4 = 24, which is even",
        "num_ids": 304
    },
    {
        "number": 805,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    max_list = []\n    max_sum = 0\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1,2,3], [4,5], [6,7,8]]) == [6,7,8] # since the sum of elements in [6,7,8] is the highest",
        "num_ids": 572
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run count\n        if char.isupper():\n            current_run += 1\n        # If the character is not uppercase, update the max run if necessary and reset the current run count\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    # Check the final run count and update the max run if necessary\n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run\n",
        "test": "assert max_run_uppercase('thequickbrownfoxjumpsoverthelazydog') == 0, \"max_run_uppercase('thequickbrownfoxjumpsoverthelazydog') failed\"",
        "num_ids": 616
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1",
        "num_ids": 373
    },
    {
        "number": 808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    found = False\n    for tup in test_tup:\n        if K in tup:\n            found = True\n            break\n    return found\n",
        "test": "assert check_K(('a', 'b', 'c', 'd', 'e'), 3) == True",
        "num_ids": 415
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((1,2,3),(0,1,2)) == True",
        "num_ids": 494
    }
]