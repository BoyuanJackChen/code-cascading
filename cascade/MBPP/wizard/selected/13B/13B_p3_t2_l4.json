[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared.append(i)\n    return shared\n",
        "test": "assert similar_elements([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 465
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False",
        "test": "assert is_not_prime(10) == True",
        "num_ids": 418
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([1,2,3,4,5],3) == [5,4,3] # expected output is [5,4,3]",
        "num_ids": 523
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    # convert the input number to binary\n    binary_x = bin(x)[2:]\n    # count the number of set bits in the binary representation of the input number\n    set_bits = sum(int(bit) for bit in binary_x)\n    # check if the number of set bits is equal to 1 or not\n    if set_bits == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 437
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"\") == [] ",
        "num_ids": 304
    },
    {
        "number": 8,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 339
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str:\n        return 0\n    \n    # Check if the string is a palindrome\n    if str == str[::-1]:\n        return 0\n    \n    # Find the length of the string and the first character\n    n = len(str)\n    first_char = str[0]\n    \n    # Find the index of the first occurrence of the first character in the reversed string\n    index = str.rfind(first_char)\n    \n    # If the index is -1, then the first character does not occur in the reversed string\n    if index == -1:\n        return -1\n    \n    # Calculate the number of rotations\n    rotations = (index + 1) % n\n    \n    # Return the rotations\n    return rotations\n",
        "test": "assert find_Rotations(\"hello\") == 1",
        "num_ids": 518
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # If the given string is empty or only has one character, return the string as it is.\n    if len(s) < 2:\n        return s\n\n    # Find the first and last occurrences of the given character in the string.\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n\n    # If the given character is not found in the string, return the original string as it is.\n    if first_occ == -1 or last_occ == -1:\n        return s\n\n    # If the given character is found only once in the string, remove it and return the modified string.\n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ+1:]\n\n    # Remove the first and last occurrences of the given character and return the modified string.\n    return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n",
        "test": "assert remove_Occ(\"hello\", \"l\") == \"heo\"",
        "num_ids": 633
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_matrix(M):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows based on their sum\n    sorted_M = [row for _, row in sorted(zip(row_sums, M))]\n    \n    return sorted_M\n",
        "test": "assert sort_matrix([[1,2],[3,4]]) == [[1,2],[3,4]] # test case 1",
        "num_ids": 547
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Volume(l,b,h):\n    \"\"\"\n    This function takes in the length, base and height of a triangular prism and returns the volume.\n    \"\"\"\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(10,5,2) == 50, \"Volume should be 50\"",
        "num_ids": 308
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return bool(pattern.search(text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 404
    },
    {
        "number": 17,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(4) == 16, \"The perimeter of a square with side length 4 should be 16\" ",
        "num_ids": 258
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def str_to_list(string1, string2):\n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Convert both strings to lists of characters\n    list1 = [char for char in string1]\n    list2 = [char for char in string2]\n    \n    # Iterate through the characters in the first list\n    for char in list1:\n        # Check if the character is not present in the second list\n        if char not in list2:\n            # If not, append it to the result list\n            result.append(char)\n    \n    # Convert the result list back to a string and return it\n    return ''.join(result)\n",
        "test": "assert str_to_list(\"hello world\", \" \") == \"helloworld\"",
        "num_ids": 744
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 545
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 0:\n        return False\n    \n    while x != 1:\n        if x % 2 == 0:\n            x //= 2\n        else:\n            x = x * 3 + 1\n        \n    return True\n",
        "test": "assert is_woodall(1) == False",
        "num_ids": 444
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    num_str = str(num)\n    reverse_num = int(num_str[::-1])\n    return num + 1 == 2 * reverse_num\n",
        "test": "assert rev(12345) == False ",
        "num_ids": 312
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest\n    number that can be formed with those digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
        "test": "assert find_Max_Num([1,2,3,4,5]) == 54321",
        "num_ids": 361
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes in two integers x and y and returns True if they have opposite signs, and False otherwise.\n    \"\"\"\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(5, 2) == False",
        "num_ids": 300
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # calculate the nth octagonal number using the formula: n^2 * (3n-2)\n    octagonal_number = n**2 * (3*n-2)\n    return octagonal_number\n",
        "test": "assert is_octagonal(1) == 1, \"1 is not an octagonal number\"",
        "num_ids": 485
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                count += 1\n    return count\n",
        "test": "assert count_Substrings(\"1234\") == 1  # only 1 substring with sum of digits = 4",
        "num_ids": 624
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 337
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        return None\n    \n    max_diff = float('-inf')\n    min_value = float('inf')\n    \n    for value in test_list:\n        if value < min_value:\n            min_value = value\n        elif value - min_value > max_diff:\n            max_diff = value - min_value\n    \n    return max_diff",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 566
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def subject_marks(subjectmarks):\n    return sorted(subjectmarks, key=lambda x: x[1])",
        "test": "assert subject_marks([(10, 90), (20, 80), (30, 70), (40, 60), (50, 50)]) == [(50, 50), (40, 60), (30, 70), (20, 80), (10, 90)] ",
        "num_ids": 510
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            sum += recursive_list_sum(item)\n        else:\n            sum += item\n    return sum\n",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 382
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5 # expected output: 5",
        "num_ids": 348
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number using the recursive formula:\n    B(n) = sum(k=0..n-1) B(k) * B(n-1-k)\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    result = 0\n    for k in range(n):\n        result += bell_number(k) * bell_number(n-1-k)\n    return result\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 414
    },
    {
        "number": 68,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n    if A[1] > A[0]:\n        # Increasing\n        for i in range(1, len(A)-1):\n            if A[i+1] < A[i]:\n                return False\n        return True\n    else:\n        # Decreasing\n        for i in range(1, len(A)-1):\n            if A[i+1] > A[i]:\n                return False\n        return True\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True # Increasing sequence",
        "num_ids": 572
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1,2,3,4,5], [2,3]) == True",
        "num_ids": 456
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = len(Input[0])\n    for t in Input:\n        if len(t) != count:\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1,2,3),(4,5,6),(7,8,9)]) == True",
        "num_ids": 480
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        # Update the gap\n        if gap > 1:\n            gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n\n        # Perform a comb bubble sort\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    return nums\n",
        "test": "assert comb_sort([]) == []  # check if empty list is returned",
        "num_ids": 701
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    while i*i <= n:\n        j = 0\n        while i*i + j*j <= n:\n            if i*i + j*j == n:\n                return True\n            j += 1\n        i += 1\n    return False\n",
        "test": "assert dif_Square(1) == True # 1 = 0^2 - 1^2",
        "num_ids": 509
    },
    {
        "number": 74,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns([1,2,3,4,5], [1,2,3,4,5]) == True",
        "num_ids": 573
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(2, 4, 6), (1, 2, 3)], 2) == [(2, 4, 6)]",
        "num_ids": 672
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Returns True if n is divisible by 11, False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(11) == True",
        "num_ids": 251
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and checks if the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"\n",
        "test": "assert word_len('python') == False, \"Error: word_len('python') should return False\"",
        "num_ids": 322
    },
    {
        "number": 80,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Returns the nth tetrahedral number.\n    \"\"\"\n    t = 0\n    for i in range(n + 1):\n        t += i * (i + 1) * (i + 2) // 6\n    return t\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 374
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi",
        "num_ids": 248
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    # convert all characters in the string to lowercase\n    strr = strr.lower()\n    # initialize the sum of ASCII values to 0\n    ascii_sum = 0\n    # loop through each character in the string\n    for char in strr:\n        # convert the character to its ASCII value and add it to the sum\n        ascii_sum += ord(char)\n    # take the modulo 26 of the sum\n    modulo_result = ascii_sum % 26\n    # add the result to the ASCII value of 'a' to get the final character\n    final_char = chr(ord('a') + modulo_result)\n    # return the final character as a string\n    return final_char\n",
        "test": "assert get_Char('ab') == 'm' ",
        "num_ids": 538
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Returns the nth term of the Newman Conway sequence.\n    \"\"\"\n    if n == 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1:\n        return 1\n    else:\n        sequence = [0, 1, 1]\n        for i in range(3, n + 1):\n            sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n        return sequence[n]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 478
    },
    {
        "number": 85,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area",
        "test": "assert surfacearea_sphere(1) == 4*math.pi # Test with radius 1",
        "num_ids": 372
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    hex_num = n * (2 * n - 1)\n    return hex_num",
        "test": "assert centered_hexagonal_number(1) == 1, \"Incorrect result for centered_hexagonal_number(1)\"",
        "num_ids": 255
    },
    {
        "number": 87,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n",
        "test": "assert merge_dictionaries_three({'a':1, 'b':2}, {'c':3, 'd':4}, {'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6} # test case 1",
        "num_ids": 645
    },
    {
        "number": 88,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n",
        "test": "assert freq_count([1,2,2,3,3,3]) == {1:1, 2:2, 3:3}",
        "num_ids": 554
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def closest_num(n):\n    '''\n    Finds the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(n-1, -1, -1):\n        if i < n and (not closest or closest - n > i - n):\n            closest = i\n    return closest\n",
        "test": "assert closest_num(20) == 19",
        "num_ids": 271
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6, \"The length of the longest word is incorrect.\"",
        "num_ids": 373
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n",
        "test": "assert find_substring('hello', 'world') == False",
        "num_ids": 321
    },
    {
        "number": 92,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    n = str(n)\n    for i in range(len(n)-1):\n        if n[i] > n[i+1]:\n            return False\n    return True\n",
        "test": "assert is_undulating(5) == True",
        "num_ids": 606
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b\n",
        "test": "assert power(2,3) == 8",
        "num_ids": 225
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(1, 2), (3, 1), (4, 3), (5, 4)]) == 3",
        "num_ids": 480
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3],[4,5,6,7],[8,9,10]]) == 3 # all lists have the same length",
        "num_ids": 409
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 277
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency\n",
        "test": "assert frequency_lists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1} ",
        "num_ids": 617
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "test": "assert multiply_num([10,20,30]) == 20.0 # expected output: 10*20*30/3 = 600/3 = 20.0",
        "num_ids": 393
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 309
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Find the number of digits in the input number\n    num_digits = len(str(num))\n\n    # If the input number is already a palindrome, add 1 to it to get the next smallest palindrome\n    if str(num) == str(num)[::-1]:\n        return num + 1\n\n    # Find the length of the left half of the palindrome\n    left_half_len = num_digits // 2\n\n    # Get the left half of the palindrome by truncating the input number to the left half\n    left_half = num // 10**(num_digits - left_half_len)\n\n    # If the left half is less than the right half, increment the left half by 1 and pad the right half with the left half\n    if left_half < 10**(num_digits - left_half_len) - 1:\n        left_half += 1\n        right_half = left_half\n    else:\n        left_half = 10**(num_digits - left_half_len)\n        right_half = 0\n\n    # Pad the left half with 0s to form the palindrome\n    palindrome = int(str(left_half) + str(right_half).zfill(left_half_len))\n\n    # If the palindrome is less than the input number, increment it by 1\n    if palindrome < num:\n        palindrome += 1\n\n    return palindrome\n",
        "test": "assert next_smallest_palindrome(131) == 222",
        "num_ids": 845
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1,2,3,4,5], 5) == 5",
        "num_ids": 332
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word by underscore and capitalize the first letter of each word\n    camel_case = ''.join(x.capitalize() for x in word.split('_'))\n    # Return the first letter in lowercase and the rest in uppercase\n    return camel_case[0].lower() + camel_case[1:]\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 494
    },
    {
        "number": 103,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def eulerian_num(n, m):\n    if n == 0:\n        return 1\n    elif m == 0:\n        return 1\n    else:\n        return (n + 1) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n, m - 1)",
        "test": "assert eulerian_num(0, 0) == 1, \"Incorrect result for eulerian_num(0, 0)\"",
        "num_ids": 401
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # Sort each sublist of strings in input_list\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n        \n    return input_list\n",
        "test": "assert sort_sublists([['d', 'a', 'b'], ['c', 'e', 'f'], ['g', 'h', 'i']]) == [['a', 'b', 'd'], ['c', 'e', 'f'], ['g', 'h', 'i']]  # correct output",
        "num_ids": 617
    },
    {
        "number": 105,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, True]) == 3 ",
        "num_ids": 248
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3)",
        "num_ids": 452
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Use heapq to merge the three lists into a single sorted list\n    merged_list = heapq.merge(num1, num2, num3)\n\n    # Return the merged list\n    return list(merged_list)\n",
        "test": "assert merge_sorted_list([], [], []) == []",
        "num_ids": 832
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Returns the number of numbers with an odd value when rotating a binary string n times.\n    \"\"\"\n    s = int(s, 2)  # convert string to binary number\n    m = len(s)  # length of binary string\n    count = 0  # initialize count of odd-equivalents\n    \n    for i in range(m):\n        rotated = s << i | s >> (m - i)  # rotate binary string i places\n        count += bin(rotated).count('1') % 2  # add number of 1's in rotated string (mod 2)\n    \n    return count\n",
        "test": "assert odd_Equivalent(\"10101010\", 2) == 4, \"Incorrect result\"",
        "num_ids": 439
    },
    {
        "number": 111,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements &= set(lst)\n    return list(common_elements)\n",
        "test": "assert common_in_nested_lists([[1,2,3],[4,5,6]]) == []",
        "num_ids": 457
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer('123') == True",
        "num_ids": 245
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not list1:\n        return True\n    for d in list1:\n        if d:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}, {'a': 1}]) == False",
        "num_ids": 285
    },
    {
        "number": 116,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result = result * 10 + nums[i]\n    return result\n",
        "test": "assert tuple_to_int((9, 9, 9)) == 999, \"Error: tuple_to_int is not working correctly\"",
        "num_ids": 403
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        else:\n            try:\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n    return result\n",
        "test": "assert list_to_float([1, 2, 3]) == [1.0, 2.0, 3.0] ",
        "num_ids": 620
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 266
    },
    {
        "number": 119,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def search(arr):\n    \"\"\"\n    Given a sorted array, find the element that appears only once.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return arr[0] if arr[0] != arr[1] else None\n\n    for i in range(0, len(arr) - 2):\n        if arr[i] != arr[i + 1] and arr[i + 1] != arr[i + 2]:\n            return arr[i + 1]\n        if arr[i] != arr[i + 1] and arr[i + 2] != arr[i + 3]:\n            return arr[i + 2]\n    return None",
        "test": "assert search([1, 1, 2, 3, 3, 4, 4, 8]) == 2",
        "num_ids": 715
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1] - list1[i][1]*list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2), (3,4), (5,6), (-2,3), (-4,5)]) != 12",
        "num_ids": 593
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers up to the given limit.\n    \"\"\"\n    # Initialize a set to store previously calculated amicable pairs\n    amicable_set = set()\n    # Initialize a variable to store the sum of amicable numbers\n    amicable_sum = 0\n    \n    # Iterate through all numbers up to the limit\n    for num in range(2, limit+1):\n        # Calculate the sum of proper divisors\n        sum_divisors = sum(divisor for divisor in range(1, num) if num % divisor == 0)\n        # Check if the sum of proper divisors equals the number itself\n        if sum_divisors == num:\n            # Check if the number is already in the set\n            if num in amicable_set:\n                # If it is, add it to the sum\n                amicable_sum += num\n            else:\n                # If not, calculate the sum of proper divisors of the sum of proper divisors\n                sum_divisors_sum = sum(divisor for divisor in range(1, sum_divisors) if sum_divisors % divisor == 0)\n                # Check if the sum of proper divisors of the sum of proper divisors equals the sum of proper divisors\n                if sum_divisors_sum == sum_divisors:\n                    # If it does, add both numbers to the set and add them to the sum\n                    amicable_set.add(num)\n                    amicable_set.add(sum_divisors)\n                    amicable_sum += num + sum_divisors\n    # Return the sum of amicable numbers\n    return amicable_sum",
        "test": "assert amicable_numbers_sum(1000) == 504159 ",
        "num_ids": 891
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = complex(a,b)\n    return cmath.phase(complex_num)\n",
        "test": "assert angle_complex(0, 0) == 0",
        "num_ids": 294
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_length(string):\n    # Initialize variables to track the maximum difference and the current difference\n    max_diff = 0\n    curr_diff = 0\n    \n    # Iterate over each character in the string\n    for i in range(len(string)):\n        # If the current character is a 0, decrement the current difference\n        if string[i] == '0':\n            curr_diff -= 1\n        # If the current character is a 1, increment the current difference\n        else:\n            curr_diff += 1\n        \n        # Update the maximum difference if the current difference is greater\n        if abs(curr_diff) > max_diff:\n            max_diff = abs(curr_diff)\n    \n    return max_diff\n",
        "test": "assert find_length('00110011') == 2",
        "num_ids": 834
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, a+1):\n        if a % i == 0:\n            if b % i == 0:\n                divisors_sum += i\n    return divisors_sum\n",
        "test": "assert sum(8, 12) == 16",
        "num_ids": 397
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 190
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def long_words(n, words_list):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words_list:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(5, ['hello', 'world', 'python']) == ['python']",
        "num_ids": 410
    },
    {
        "number": 129,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = 0\n    for i in range(n):\n        magic_sum += my_matrix[i][i]\n    \n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if row_sum != magic_sum or col_sum != magic_sum:\n            return False\n    \n    return True\n",
        "test": "assert magic_square_test([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 14, 1]]) == True",
        "num_ids": 960
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for item in nums:\n        freq[item] += 1\n        if freq[item] > max_freq:\n            max_freq = freq[item]\n            max_item = item\n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 3, 4, 5]) == 1",
        "num_ids": 614
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_vowels(s):\n    vowels = \"aeiouAEIOU\"\n    s = list(s)  # convert string to list of characters\n    left, right = 0, len(s) - 1  # initialize pointers\n    \n    while left < right:\n        # if both left and right pointers are vowels, swap them\n        if s[left] in vowels and s[right] in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        # if left pointer is vowel and right pointer is consonant, move left pointer to right\n        elif s[left] in vowels:\n            right -= 1\n        # if right pointer is vowel and left pointer is consonant, move right pointer to left\n        elif s[right] in vowels:\n            left += 1\n        # if both pointers are consonants, move both pointers\n        else:\n            left += 1\n            right -= 1\n    \n    return \"\".join(s)  # convert list back to string\n",
        "test": "assert reverse_vowels(\"hello\") == \"holle\"",
        "num_ids": 685
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    # Convert tuple to a string and return it\n    return str(tup1)\n",
        "test": "assert tup_string((\"a\", \"b\", \"c\")) == \"a,b,c\"",
        "num_ids": 275
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative\n",
        "test": "assert sum_negativenum([1, 2, 3, -4, 5]) == -4 # should return -4",
        "num_ids": 396
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1 ",
        "num_ids": 245
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    ratio = zeroes / (zeroes + non_zeroes)\n    return ratio\n",
        "test": "assert zero_count(array('i', [1, 2, 3, 4, 5])) == 0 ",
        "num_ids": 570
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    else:\n        binary_representation = bin(n)[2:]\n        return all(binary_representation.count(digit) <= 1 for digit in '1')\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == False",
        "num_ids": 443
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference\n",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 350
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for item in sublist:\n            result.add(item)\n    return result\n",
        "test": "assert extract_singly([[1, 2], [3, 4, 5], [6, 7]]) == {1, 2, 3, 4, 5, 6, 7}",
        "num_ids": 551
    },
    {
        "number": 141,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # Traverse through all array elements\n    for i in range(n):\n        # Find the maximum element in remaining\n        # unsorted array\n        max_idx = nums.index(max(nums[i:]))\n        # Reverse the maximum element to the beginning\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        # Reverse the entire array\n        nums[:n-i] = reversed(nums[:n-i])\n    return nums\n",
        "test": "assert pancake_sort([5, 3, 1, 4, 2]) == [1, 2, 3, 4, 5] # Expected output: [1, 2, 3, 4, 5]",
        "num_ids": 819
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3, \"All elements are the same in the same position\"",
        "num_ids": 512
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0",
        "num_ids": 328
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0]\n    min_val = min(arr)\n    max_val = max(arr)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n            elif diff == max_diff and arr[i] - min_val > max_val - arr[j]:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 573
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    else:\n        x = n // b\n        y = (n - a*x) // b\n        return (x, y)\n",
        "test": "assert find_solution(2, 3, 5) == (1, 1) # check if the solution is correct",
        "num_ids": 776
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Remove all elements from a given list that are present in another list.\n\n    Args:\n    list1: the list from which elements will be removed\n    list2: the list containing the elements to be removed\n\n    Returns:\n    A new list with the elements of `list1` that are not in `list2`\n    '''\n    return [element for element in list1 if element not in list2]\n",
        "test": "assert remove_elements([1,2,3,4,5], [2,4]) == [1,3,5]",
        "num_ids": 436
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2+1):\n        sum += n - 2*i\n    return sum\n",
        "test": "assert sum_series(10) == 30, \"Error: sum_series(10) should return 30\"",
        "num_ids": 439
    },
    {
        "number": 163,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area\n",
        "test": "assert area_polygon(6, 4) == 12.0, \"area_polygon(6, 4) should be 12.0\"",
        "num_ids": 446
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum_1 = 0\n    div_sum_2 = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            div_sum_1 += i\n    \n    for j in range(1, n+1):\n        if (n*2)%j == 0:\n            div_sum_2 += j\n    \n    if div_sum_1 == div_sum_2:\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(12) == False # 1+2+3+4+6 = 16, 1+2+3+6 = 12, but 1+2+3+4+6 is not equal to 1+2+3+6, so the function should return True",
        "num_ids": 785
    },
    {
        "number": 165,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i + 97):\n            count += 1\n    return count\n",
        "test": "assert count_char_position('The quick brown fox jumps over the lazy dog') == 10",
        "num_ids": 388
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4, 5, 6]) == 2, \"Even pairs found: 2\" ",
        "num_ids": 375
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 361
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,2,1], 2) == 2 ",
        "num_ids": 293
    },
    {
        "number": 170,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 471
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    P = 5 * a\n    return P\n",
        "test": "assert perimeter_pentagon(10) == 25.0",
        "num_ids": 296
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s) - 2:\n        if s[i:i+3] == 'std':\n            count += 1\n        i += 1\n    return count\n",
        "test": "assert count_occurance(\"This is a sample std string for testing.\") == 1",
        "num_ids": 381
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item) != data_type:\n            return False\n    return True\n",
        "test": "assert check_type((1, 2, 3)) == True, \"Error: check_type returned False for (1, 2, 3)\"",
        "num_ids": 559
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Binary search to find the first occurrence of x in arr\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    first = left\n    \n    # Binary search to find the last occurrence of x in arr\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] <= x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    last = right\n    \n    # Check if x is the majority element\n    if first <= last and last - first + 1 > n // 2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 6) == False",
        "num_ids": 926
    },
    {
        "number": 224,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 275
    },
    {
        "number": 226,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def odd_values_string(s):\n    \"\"\"\n    This function takes a string as input and returns a new string\n    with characters at odd index positions removed.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    # Iterate through the string character by character\n    for i in range(len(s)):\n        # Check if the character is at an odd index position\n        if i % 2 == 0:\n            # If it is, add it to the result string\n            result += s[i]\n    # Return the result string\n    return result",
        "test": "assert odd_values_string(\"world\") == \"wrd\" # test case 2",
        "num_ids": 459
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a\n    if b < minimum:\n        minimum = b\n    if c < minimum:\n        minimum = c\n    return minimum\n",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 369
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Shift bits to the left to check the range from l to r\n    mask = (1 << r) - (1 << l)\n    # Check if all bits in the range are set to 1\n    return (n & mask) == mask\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b1010101,3,5) == False",
        "num_ids": 553
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def re_arrange_array(arr, n):\n    # Separate negative and positive elements\n    negatives = [x for x in arr[:n] if x < 0]\n    positives = [x for x in arr[:n] if x >= 0]\n    # Concatenate negative and positive elements in the correct order\n    result = negatives + positives\n    # Fill the remaining positions with the original elements in the order they were in\n    for i in range(n, len(arr)):\n        result.append(arr[i])\n    # Return the re-arranged array\n    return result\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4, 5]",
        "num_ids": 827
    },
    {
        "number": 230,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank('hello world', '-') == 'hello-world'",
        "num_ids": 336
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, lst)\n",
        "test": "assert larg_nnum([1,2,3,4,5],2) == [5,4]",
        "num_ids": 494
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Calculate the lateral surface area of a cylinder.\n    \n    Args:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: lateral surface area of the cylinder\n    '''\n    \n    # calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * 3.14159 * r * h\n    \n    return lateral_surface_area\n",
        "test": "assert lateralsuface_cylinder(3, 7) == 138.72886587585430219285583 ",
        "num_ids": 500
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 245
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize the result variable\n    result = 0\n    \n    # Iterate over all bits of the number\n    for i in range(32):\n        # Check if the current bit is even\n        if i % 2 == 0:\n            # If yes, set the corresponding bit in the result\n            result |= (n & (1 << i))\n    \n    # Return the result\n    return result\n",
        "test": "assert even_bit_set_number(0) == 0, \"Expected 0, but got {0}\".format(even_bit_set_number(0))",
        "num_ids": 510
    },
    {
        "number": 237,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n",
        "test": "assert check_occurences([(1,2), (2,3), (1,2), (2,3), (1,2)]) == {(1, 2): 3, (2, 3): 2}",
        "num_ids": 591
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(string):\n    count = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if string[i:j] != \"\":\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings('abc') == 6",
        "num_ids": 328
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(2, m // 2 + 1):\n            count += get_total_number_of_sequences(i, n - 1)\n        return count\n",
        "test": "assert get_total_number_of_sequences(5,1) == 1",
        "num_ids": 503
    },
    {
        "number": 240,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2\n    return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 4, 5, 6]",
        "num_ids": 528
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello world\") == 11",
        "num_ids": 253
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the next integer square root of N\n    i_sqrt = int(math.sqrt(N))\n    # Increment the square root by 1 and square it\n    next_square = (i_sqrt + 1) ** 2\n    # Return the next perfect square\n    return next_square\n",
        "test": "assert next_Perfect_Square(9) == 16",
        "num_ids": 441
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = 0\n    i = 0\n    j = n - 1\n\n    while i < j:\n        if arr[i] <= arr[i + 1]:\n            i += 1\n        else:\n            max_sum += arr[i]\n            i += 1\n            j -= 1\n            while i < j and arr[i] <= arr[i + 1]:\n                i += 1\n            max_sum += arr[j]\n            j -= 1\n            while i < j and arr[j] <= arr[j - 1]:\n                j -= 1\n\n    return max_sum",
        "test": "assert max_sum([3, 4, 5, 6, 7]) == 25  # Bitonic subsequence [3, 4, 5, 6] has a sum of 25",
        "num_ids": 1077
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    elif number == 0 or number == 1:\n        return number\n    else:\n        x = number\n        y = (x + 1) / 2\n        while abs(x - y) >= 0.0001:\n            x = y\n            y = (x + number / x) / 2\n        return round(y, 10)\n",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 516
    },
    {
        "number": 247,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "test": "assert lps(\"cbbd\") == 2",
        "num_ids": 630
    },
    {
        "number": 248,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1.0",
        "num_ids": 303
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in result:\n            result.append(num)\n    return result\n",
        "test": "assert intersection_array([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 464
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5, 6, 7, 8, 9), 5) == 1, \"Incorrect count\"",
        "num_ids": 414
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts the given element before each element in the list.\n    \n    Args:\n        lst (list): A list of elements.\n        elem (object): An element to insert.\n        \n    Returns:\n        list: A new list with the element inserted before each element in the original list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([], 1) == []",
        "num_ids": 420
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes in a list of complex numbers and returns a list of tuples representing the polar coordinates of each complex number in the form (r, theta).\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coords.append((r, theta))\n    return polar_coords\n",
        "test": "assert convert(-3) == (3.0, 0)",
        "num_ids": 496
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 338
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors(['red', 'green', 'blue'], 2) == [('red', 'red'), ('red', 'green'), ('red', 'blue'), ('green', 'green'), ('green', 'blue'), ('blue', 'blue')] ",
        "num_ids": 550
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 456
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1,2) == (2,1) # Test case 1",
        "num_ids": 269
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1,2,3), (4,5,6)) == (4,5,6)",
        "num_ids": 720
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % i != 0 for i in range(2, int(num**0.5)+1)):\n            primes.append(num)\n        num += 1\n    return primes[-1]\n",
        "test": "assert newman_prime(1) == 2, \"Error in newman_prime(1)\"",
        "num_ids": 1404
    },
    {
        "number": 261,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result += (test_tup1[i] / test_tup2[i],)\n    else:\n        print(\"Tuples must have the same length!\")\n    return result\n",
        "test": "assert division_elements((2, 4, 8), (2, 2, 2)) == (1.0, 2.0, 4.0)",
        "num_ids": 734
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])",
        "num_ids": 615
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dog_age(human_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = human_age * 7\n    return dog_age\n",
        "test": "assert dog_age(5) == 5*7",
        "num_ids": 403
    },
    {
        "number": 265,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    sublist = []\n    for i, item in enumerate(S):\n        sublist.append(item)\n        if (i+1) % step == 0:\n            result.append(sublist)\n            sublist = []\n    if sublist:\n        result.append(sublist)\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]] # test the correctness of list_split with an example input",
        "num_ids": 596
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert lateralsurface_cube(3) == 18, \"Error: lateralsurface_cube(3) should be 18\"",
        "num_ids": 317
    },
    {
        "number": 267,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of the current number to the sum\n        sum_of_squares += i**2\n    # Return the sum of squares\n    return sum_of_squares\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 388
    },
    {
        "number": 268,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    stars = ''\n    count = 0\n    for i in range(n+1):\n        stars += '*'\n        print(stars)\n        count += 1\n        if count == n:\n            break\n",
        "test": "assert find_star_num(2) == 3",
        "num_ids": 459
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97 ",
        "num_ids": 199
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "test": "assert sum_even_and_even_index([1,2,3,4,5]) == 0, \"Incorrect sum for even numbers at even positions of the list [1,2,3,4,5]\"",
        "num_ids": 576
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    count = 0\n    \n    while count < n:\n        num = 2 * count\n        total += num ** 5\n        count += 1\n        \n    return total\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 338
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 492
    },
    {
        "number": 273,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 557
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    sum = 0\n    for k in range(n+1):\n        if math.comb(n, k) % 2 == 0:\n            sum += math.comb(n, k)\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(0) == 0",
        "num_ids": 502
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h\n",
        "test": "assert volume_cylinder(0,1) == 0, \"Volume should be 0\"",
        "num_ids": 332
    },
    {
        "number": 277,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_filter(d, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in d.items() if v >= n}\n    return filtered_dict\n",
        "test": "assert dict_filter({'a': 3, 'b': 1, 'c': 5}, 3) == {'a': 3, 'c': 5}",
        "num_ids": 575
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == 0",
        "num_ids": 443
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert is_num_decagonal(1) == 1 ",
        "num_ids": 297
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return found, index\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 502
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for i in test_list:\n        if i not in unique:\n            unique.append(i)\n    if len(unique) == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 443
    },
    {
        "number": 282,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1,2,3],[2,3,4]) == [-1,-1,-1]",
        "num_ids": 532
    },
    {
        "number": 283,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n):\n    n = str(n)\n    count = {}\n    for digit in n:\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n    for digit in count:\n        if count[digit] > int(digit):\n            return False\n    return True\n",
        "test": "assert validate(123) == True, \"validate(123) should return True\"",
        "num_ids": 547
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item != element:\n            return False\n    return True",
        "test": "assert check_element([1, 1, 1], 1) == True",
        "num_ids": 311
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('abbb') == True",
        "num_ids": 368
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    if k == 1:\n        return max_sub_array_sum(a, n)\n\n    # Create a new array by repeating the given array k times\n    new_array = []\n    for i in range(k):\n        new_array.extend(a)\n\n    # Find the maximum subarray sum in the new array\n    max_sum = max_sub_array_sum(new_array, len(new_array))\n\n    return max_sum\n\n\ndef max_sub_array_sum(a, n):\n    max_so_far = 0\n    max_ending_here = 0\n\n    for i in range(n):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n    return max_so_far\n",
        "test": "assert max_sub_array_sum_repeated([2, -3, 4, -5, 7], 5, 3) == 24 # k = 3, [2, -3, 4, -5, 7, 2, -3, 4, -5, 7, 2, -3, 4, -5, 7]",
        "num_ids": 1132
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i*i\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 321
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    max_len = 0\n    \n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n        elif len(lst) == max_len:\n            max_list.append(lst)\n    \n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 485
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    elif n == 2:\n        return k*k\n    else:\n        dp = [0] * k\n        dp[0] = 1\n        dp[1] = k\n        for i in range(2, n):\n            temp = [0] * k\n            for j in range(k):\n                if j == 0:\n                    temp[j] += dp[j+1]\n                elif j == k-1:\n                    temp[j] += dp[j-1]\n                else:\n                    temp[j] += dp[j-1] + dp[j+1]\n            dp = temp\n        return sum(dp)",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 872
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient\n",
        "test": "assert find(10, 3) == 3",
        "num_ids": 256
    },
    {
        "number": 293,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the square of the hypotenuse\n    c_squared = w**2 + h**2\n\n    # Calculate the third side using the Pythagorean theorem\n    c = math.sqrt(c_squared)\n\n    return c\n",
        "test": "assert otherside_rightangle(3,4) == 5 ",
        "num_ids": 345
    },
    {
        "number": 294,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if type(val) in [int, float]:\n            if val > max_val:\n                max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 445
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    # We start with the sum of 1 (which is always a divisor)\n    total = 1\n    # We iterate over all numbers from 2 to number-1 (inclusive)\n    for i in range(2, number):\n        # If i is a divisor of number, we add it to the total\n        if number % i == 0:\n            total += i\n    return total\n",
        "test": "assert sum_div(12) == 16",
        "num_ids": 396
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 764
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert flatten_list([1,2,[3,4,5],[6, [7,8,9], 10]]) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 476
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the aggregates for each key\n    aggregates = defaultdict(int)\n\n    # loop through each tuple in the list\n    for t in stdata:\n        # add the value to the aggregate for the key\n        aggregates[t[0]] += t[1]\n\n    # find the key with the maximum aggregate\n    max_key = max(aggregates, key=aggregates.get)\n\n    # return a tuple with the maximum key and its aggregate\n    return (max_key, aggregates[max_key])\n",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)]) == 15 ",
        "num_ids": 716
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if sum(map(int, binary[:n])) == sum(map(int, binary[n:])):\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(0) == 1, \"count_binary_seq(0) should return 1\"",
        "num_ids": 636
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 1\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth\n",
        "test": "assert dict_depth({}) == 1",
        "num_ids": 537
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # calculate the number of rotations required\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            index -= ranges[i]\n        else:\n            break\n    # find the element at the given index after rotations\n    return arr[(index + rotations) % len(arr)]\n",
        "test": "assert find_Element([1,2,3,4,5], [1,2,3,4,5], 3, 0) == 4, \"Test failed for find_Element\"",
        "num_ids": 615
    },
    {
        "number": 305,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Use regular expressions to find words starting with 'p'\n    pattern = re.compile(r'\\b[pP]\\w+\\b')\n    p_words = [word for word in words if pattern.match(word)]\n    \n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[:2]",
        "test": "assert start_withp(['apple', 'pear', 'orange', 'peach', 'plum']) == ['pear', 'peach']",
        "num_ids": 523
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Create an array to store the maximum sum at each index\n    dp = [0]*n\n    \n    # Initialize the maximum sum at the first index to be the element itself\n    dp[0] = a[0]\n    \n    # Traverse the array from the second index to the end\n    for i in range(1, n):\n        # Initialize the maximum sum at the current index to be the maximum of the element and the sum of the previous maximum sum and the element at the current index\n        dp[i] = max(a[i], dp[i-1]+a[i])\n    \n    # Traverse the array from the index before the given kth element to the kth element\n    for i in range(index-1, k-1):\n        # Update the maximum sum at the kth element to be the maximum of the previous maximum sum and the element at the kth index\n        dp[k-1] = max(dp[k-1], a[k-1])\n    \n    # Return the maximum sum\n    return dp[k-1]\n",
        "test": "assert max_sum_increasing_subseq([1,2,3,4,5], 5, 3, 4) == 10, \"Incorrect result for max_sum_increasing_subseq([1,2,3,4,5], 5, 3, 4)\"",
        "num_ids": 1162
    },
    {
        "number": 307,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n]",
        "test": "assert colon_tuplex((\"a\", \"b\", \"c\", \"d\", \"e\"), 2, 4) == (\"c\", \"d\")",
        "num_ids": 475
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([-1, -2, -3], [-4, -5, -6], 3) == [-6, -10, -12]",
        "num_ids": 636
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b",
        "test": "assert maximum(2, 5) == 5",
        "num_ids": 261
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 261
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Get the bit representation of n using the built-in bin() function\n    bits = bin(n)[2:]\n    # Reverse the order of the bits using slicing and the [::-1] syntax\n    bits_reverse = bits[::-1]\n    # Find the index of the first 0 bit using the index() method\n    first_zero_bit = bits_reverse.index('0')\n    # Calculate the index of the corresponding 1 bit by subtracting the index of the first 0 bit from the length of the string\n    one_bit_index = len(bits) - first_zero_bit - 1\n    # Set the bit at the calculated index to 1 using the bitwise OR operator\n    n |= 1 << one_bit_index\n    return n\n",
        "test": "assert set_left_most_unset_bit(0) == 1 ",
        "num_ids": 574
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi/3) * h * (r**2)\n",
        "test": "assert volume_cone(3, 4) == math.pi * (3 ** 2) * (4/3)",
        "num_ids": 357
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    power = 1\n    while power*2 <= n:\n        power *= 2\n    return power//2\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 345
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 300
    },
    {
        "number": 390,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string.format(element))\n    return new_list\n",
        "test": "assert add_string([1, 2, 3], '{:.2f}') == ['1.00', '2.00', '3.00']",
        "num_ids": 413
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Convert more than one list to nested dictionary\n    '''\n    result = {}\n    for i in range(len(l1)):\n        if l1[i] not in result:\n            result[l1[i]] = {l2[i]: l3[i]}\n        else:\n            result[l1[i]][l2[i]] = l3[i]\n    return result\n",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 622
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return max(get_max_sum(n//2)+get_max_sum(n//3)+get_max_sum(n//4)+get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(30) == 31",
        "num_ids": 514
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = []\n    for lst in input_list:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([]) == []",
        "num_ids": 343
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 363
    },
    {
        "number": 395,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store character frequencies\n    char_freq = {}\n    \n    # Iterate through the string and update the character frequencies\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Iterate through the string again and return the first character with frequency 1\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    # If no non-repeating character found, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"\") == None",
        "num_ids": 580
    },
    {
        "number": 396,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"a\") == True",
        "num_ids": 330
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median",
        "test": "assert median_numbers(1, 2, 3) == 2",
        "num_ids": 413
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result\n",
        "test": "assert sum_of_digits([12, 34, 56]) == [3, 7, 11]",
        "num_ids": 596
    },
    {
        "number": 399,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
        "test": "assert bitwise_xor((0, 1, 0, 1), (1, 0, 1, 0)) == (1, 1, 1, 1)",
        "num_ids": 583
    },
    {
        "number": 400,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    return len(freq)\n",
        "test": "assert extract_freq([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 5",
        "num_ids": 535
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        nested_result = []\n        for j in range(len(test_tup1[i])):\n            nested_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(nested_result))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples((1, 2, (3, 4)), (5, 6, (7, 8))) == (6, 8, (10, 12))",
        "num_ids": 621
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a, b):\n    '''\n    Write a Python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(0,1) == 0",
        "num_ids": 215
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex(('a', 'b', 'c'), 'b') == True",
        "num_ids": 369
    },
    {
        "number": 406,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer as input and returns True if its parity is odd, and False otherwise.\n    \"\"\"\n    # Use the modulus operator to determine the remainder when x is divided by 2\n    remainder = x % 2\n    \n    # If the remainder is 1, return True (indicating odd parity), otherwise return False (indicating even parity)\n    if remainder == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_Parity(0) == 0",
        "num_ids": 329
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string and then to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Sort the list in descending order\n    digits.sort(reverse=True)\n\n    # Join the digits back into a string and convert it back to an integer\n    result = int(''.join(str(d) for d in digits))\n\n    # Return the result if it's greater than the original number\n    if result > n:\n        return result\n    else:\n        return None\n",
        "test": "assert rearrange_bigger(123) == 321",
        "num_ids": 731
    },
    {
        "number": 408,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    \n    min_heap = []\n    \n    for i in range(min(len(nums1), k)):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], i, 0))\n    \n    result = []\n    \n    for i in range(k):\n        smallest_pair = heapq.heappop(min_heap)\n        result.append((nums1[smallest_pair[1]], nums2[smallest_pair[2]]))\n        \n        if smallest_pair[2] + 1 < len(nums2):\n            heapq.heappush(min_heap, (nums1[smallest_pair[1]] + nums2[smallest_pair[2] + 1], smallest_pair[1], smallest_pair[2] + 1))\n    \n    return result\n",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]",
        "num_ids": 1020
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][0] + list1[i][1]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1,2), (3,4), (5,6)]) == 6, \"Error: incorrect output for [(1,2), (3,4), (5,6)]\"",
        "num_ids": 627
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 492
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # splitting the snake case string by underscore and storing it in a list\n    word_list = word.split(\"_\")\n    # converting the first element of the list to lowercase and storing it in the first element of the list\n    word_list[0] = word_list[0].lower()\n    # initializing an empty string to store the camel case string\n    camel_case_word = \"\"\n    # iterating over the list and appending each element to the camel case string\n    for i in range(len(word_list)):\n        if i == 0:\n            camel_case_word += word_list[i]\n        else:\n            camel_case_word += word_list[i].capitalize()\n    # returning the camel case string\n    return camel_case_word\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 616
    },
    {
        "number": 412,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "test": "assert remove_odd([1,2,3,4,5]) == [2,4] # test case 1",
        "num_ids": 295
    },
    {
        "number": 413,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    else:\n        return list1[n-1][n-1]\n",
        "test": "assert extract_nth_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == 5 ",
        "num_ids": 445
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[2,4,6]) == True",
        "num_ids": 335
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            \n            if product > max_product:\n                max_product = product\n    \n    return max_product\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20 ",
        "num_ids": 631
    },
    {
        "number": 417,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples containing common first elements.\n    '''\n    # Create an empty dictionary to store the count of first elements\n    count = {}\n    # Loop through the list of tuples and count the frequency of each first element\n    for t in Input:\n        if t[0] in count:\n            count[t[0]] += 1\n        else:\n            count[t[0]] = 1\n    # Create an empty list to store the tuples with common first elements\n    result = []\n    # Loop through the dictionary and add tuples with common first elements to the result list\n    for key, value in count.items():\n        if value > 1:\n            for t in Input:\n                if t[0] == key:\n                    result.append(t)\n    return result\n",
        "test": "assert group_tuples([(1,2), (3,4), (1,5), (1,6)]) == [(1,2), (1,5), (1,6)]",
        "num_ids": 823
    },
    {
        "number": 418,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max(['hello', 'world', 'how', 'are', 'you']) == 'world'",
        "num_ids": 420
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))",
        "test": "assert round_and_sum([1.23, 4.56, 7.89]) == 1.2*4.56*7.89*3",
        "num_ids": 409
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(0) == 0 # cube sum of 0 even natural numbers is 0",
        "num_ids": 381
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_str = \"\"\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-1]\n",
        "test": "assert concatenate_tuple((True, False, None)) == 'TrueFalseNone'",
        "num_ids": 479
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    return sum_of_cubes / n\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 417
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear((\"apple\", \"banana\", \"cherry\")) == (\"e\", \"a\", \"y\") ",
        "num_ids": 372
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 2) == 0",
        "num_ids": 369
    },
    {
        "number": 426,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 != 0]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 368
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # using regex to match date pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        # converting to desired format\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'\n",
        "test": "assert change_date_format('2020-10-20') == '20-10-2020'",
        "num_ids": 698
    },
    {
        "number": 428,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([3, 2, 1]) == [1, 2, 3]",
        "num_ids": 659
    },
    {
        "number": 429,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n",
        "test": "assert and_tuples((True, True, False), (True, False, True)) == (True, False, False)",
        "num_ids": 456
    },
    {
        "number": 430,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -1*b/a\n",
        "test": "assert parabola_directrix(a=1, b=1, c=1) == -1  # example where a=b=1, c=-1",
        "num_ids": 596
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1,2,3], [3,4,5]) == True",
        "num_ids": 340
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    median = 2 * area / (base1 + base2)\n    return median\n",
        "test": "assert median_trapezium(8,12,15) == 10",
        "num_ids": 437
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number <= i:\n            return False\n    return True\n",
        "test": "assert check_greater([1,2,3,4,5], 6) == True",
        "num_ids": 324
    },
    {
        "number": 434,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one('ab') == True ",
        "num_ids": 330
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(10) == 0",
        "num_ids": 214
    },
    {
        "number": 436,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [-2, -4]",
        "num_ids": 386
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    \n    # Initialize an empty string to store the even characters\n    even_str = \"\"\n    \n    # Loop through each character in the input string\n    for char in str1:\n        \n        # Check if the character is even or odd\n        if len(char) % 2 == 0:\n            \n            # If the character is even, add it to the even_str variable\n            even_str += char\n            \n    # Return the even_str variable\n    return even_str\n",
        "test": "assert remove_odd('') == ''",
        "num_ids": 362
    },
    {
        "number": 438,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5)]) == 0, \"Incorrect count_bidirectional result\"",
        "num_ids": 671
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result",
        "test": "assert multiple_to_single([1, 2, 3]) == 123",
        "num_ids": 385
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define regex pattern for adverbs\n    pattern = r'\\b\\w*ly\\b'\n    # find all adverbs in text\n    adverbs = re.findall(pattern, text)\n    # find positions of first adverb in text\n    first_adverb = adverbs[0]\n    position = text.find(first_adverb)\n    # return first adverb and its position\n    return first_adverb, position\n",
        "test": "assert find_adverb_position('The quick brown fox jumps over the lazy dog') == [('quick', 4)]",
        "num_ids": 571
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    This function takes a parameter l, which is the length of the side of a cube.\n    It returns the surface area of the cube.\n    '''\n    surface_area = 6 * l**2\n    return surface_area\n",
        "test": "assert surfacearea_cube(3) == 54 # should return 54 as the surface area of a cube with length 3",
        "num_ids": 292
    },
    {
        "number": 442,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0",
        "num_ids": 482
    },
    {
        "number": 443,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest if largest != float('-inf') else None\n",
        "test": "assert largest_neg([-5, -7, -3, -9, -2]) == -2 # should return -2",
        "num_ids": 380
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[:len(tup)-K])\n    return result\n",
        "test": "assert trim_tuple([(1,2,3,4,5), (6,7,8,9,10), (11,12,13,14,15)], 2) == [(1,2,3), (6,7,8), (11,12,13)]",
        "num_ids": 623
    },
    {
        "number": 445,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "test": "assert index_multiplication((2, 3, 4), (5, 6, 7)) == (10, 18, 28) # (2*5, 3*6, 4*7)",
        "num_ids": 527
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for i in lst:\n        if i in count:\n            result[i] = count[i]\n        else:\n            result[i] = 0\n    return result\n",
        "test": "assert count_Occurrence((1,2,3,4,5,6,7,8,9), [2,4,6]) == Counter({2: 1, 4: 1, 6: 1}) ",
        "num_ids": 613
    },
    {
        "number": 447,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 397
    },
    {
        "number": 448,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # Initialize a variable to hold the sum of perrin numbers\n    perrin_sum = 0\n    \n    # Loop through the range of numbers from 0 to n\n    for i in range(n + 1):\n        # Calculate the i-th perrin number\n        perrin_number = (i * (i + 1)) // 2\n        \n        # Add the perrin number to the sum\n        perrin_sum += perrin_number\n    \n    return perrin_sum\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 371
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def extract_string(lst, size):\n    '''\n    Given a list of strings and a size, return a new list with\n    strings of the specified size. If a string in the original list\n    is shorter than the specified size, it will be skipped.\n    '''\n    result = []\n    for s in lst:\n        if len(s) >= size:\n            result.append(s[:size])\n    return result\n",
        "test": "assert extract_string(['hello', 'world'], 2) == ['he', 'wo'] ",
        "num_ids": 413
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+', '', text1)\n    return text1\n",
        "test": "assert remove_whitespaces(\"This is a test string.\") == \"Thisisateststring.\"",
        "num_ids": 294
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss\n    else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(100,80) == 20, \"Loss amount should be 20\"",
        "num_ids": 378
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i*i == n or (n // i) % 2 == 0:\n                sum += i\n    return sum\n",
        "test": "assert sumofFactors(12) == 6, \"Incorrect output\" # test case 1",
        "num_ids": 407
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Using regex pattern to match words containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    # Using findall() method to get all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Returning matches as a list\n    return matches\n",
        "test": "assert text_match_wordz('hello world, how are you?') == 'world'",
        "num_ids": 410
    },
    {
        "number": 455,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True",
        "num_ids": 465
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"] ",
        "num_ids": 350
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns the sublist having minimum length.\n    '''\n    min_sublist = lst[0]\n    min_length = len(lst[0])\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n",
        "test": "assert Find_Min([[1,2,3],[4,5],[6]]) == [6]",
        "num_ids": 551
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(10,20) == 200 # test case 1",
        "num_ids": 267
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    return pattern.sub('', str1)",
        "test": "assert remove_uppercase('HELLO world') == ' world'",
        "num_ids": 362
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 359
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2, \"Incorrect upper case count\" # should return 2 ",
        "num_ids": 311
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns a list of all possible combinations of the elements of a given list.\n    \"\"\"\n    from itertools import combinations\n\n    result = []\n    for i in range(1, len(lst) + 1):\n        for comb in combinations(lst, i):\n            result.append(comb)\n    return result\n",
        "test": "assert combinations_list([1,2,3]) == [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]] ",
        "num_ids": 573
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n        \n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_product = max(max_product, max_ending_here)\n        \n    return max_product\n",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0  # expected output: 0",
        "num_ids": 823
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_value(my_dict, n):\n    '''\n    This function checks if all values in a dictionary are same.\n    It takes in a dictionary and a number n as inputs. It returns True if all values in the dictionary are equal to n, False otherwise.\n    '''\n    for value in my_dict.values():\n        if value != n:\n            return False\n    return True\n",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 1}, 3) == False",
        "num_ids": 420
    },
    {
        "number": 465,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 345
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_product(arr):\n    # Initialize variables to keep track of the maximum and second maximum\n    # values encountered so far.\n    max_val = float('-inf')\n    sec_max_val = float('-inf')\n\n    # Loop through the array and update the maximum and second maximum\n    # values as we go along.\n    for num in arr:\n        if num > max_val:\n            sec_max_val = max_val\n            max_val = num\n        elif num > sec_max_val:\n            sec_max_val = num\n\n    # If the maximum value is negative, it doesn't matter which one\n    # is the maximum and which one is the second maximum. We need to\n    # consider the absolute value of the numbers to get the maximum product.\n    if max_val < 0:\n        max_val = abs(max_val)\n        sec_max_val = abs(sec_max_val)\n\n    # Calculate the maximum product by multiplying the maximum and second\n    # maximum values.\n    max_product = max_val * sec_max_val\n\n    return max_product\n",
        "test": "assert max_product([1,2,3,4,5]) == 20 # maximum product should be 20 for the increasing subsequence [1,2,3,4,5]",
        "num_ids": 756
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]+test_tup[i+1])\n    return result\n",
        "test": "assert add_pairwise((0, 1, 2, 3, 4)) == (1, 3, 5, 7)",
        "num_ids": 453
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3, 4, 5], 10) == 3, \"Error: incorrect result\"",
        "num_ids": 415
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3]) == True",
        "num_ids": 436
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if set(tup1) == set(tup2):\n                intersection.append(tup1)\n                break\n    return intersection",
        "test": "assert tuple_intersection([(1, 2, 3), (2, 3, 4)], [(2, 3, 4), (4, 5, 6)]) == [(2, 3, 4)]",
        "num_ids": 630
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char(\"hello\", \"l\", \"L\") == \"heLLo\"",
        "num_ids": 350
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict\n",
        "test": "assert sort_counter({'apple': 3, 'banana': 2, 'orange': 4}) == {'orange': 4, 'apple': 3, 'banana': 2}",
        "num_ids": 601
    },
    {
        "number": 476,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def big_sum(nums):\n    '''\n    Write a Python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest\n",
        "test": "assert big_sum([5, 4, 3, 2, 1]) == 6",
        "num_ids": 372
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 177
    },
    {
        "number": 478,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n",
        "test": "assert remove_lowercase(\"hello\") == \"\"",
        "num_ids": 294
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the number to a string\n    str_num = str(n)\n    # Find the first character of the string and return it as the first digit\n    return int(str_num[0])\n",
        "test": "assert first_Digit(1234) == 1",
        "num_ids": 288
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in lst if x % 2 != 0]\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 417
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def difference(n):\n    \"\"\"\n    Find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Find the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n    # Find the sum of cubes of the first n natural numbers\n    sum_cubes = n ** 3 * (n * (n + 1)) // 2\n    # Find the difference\n    result = sum_cubes - sum_n\n    return result\n",
        "test": "assert difference(0) == 0, \"Difference is not correct for n = 0\"",
        "num_ids": 434
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([2, 4, 6, 8, 10], 5) == 0",
        "num_ids": 427
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n",
        "test": "assert toggle_string('The quick brown fox jumps over the lazy dog.') == 'tHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.'",
        "num_ids": 398
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert integers to strings and convert them to lists of digits\n    digits1 = list(map(int, str(n1)))\n    digits2 = list(map(int, str(n2)))\n    \n    # iterate over the digits and calculate the per-digit difference\n    distance = 0\n    for i in range(max(len(digits1), len(digits2))):\n        d1 = digits1[i] if i < len(digits1) else 0\n        d2 = digits2[i] if i < len(digits2) else 0\n        distance += abs(d1 - d2)\n    \n    return distance\n",
        "test": "assert digit_distance_nums(100, 200) == 3",
        "num_ids": 833
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9], 9) == -1 ",
        "num_ids": 595
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1).union(set(test_tup2))\n    sorted_union = sorted(list(union))\n    return sorted_union\n",
        "test": "assert union_elements((1, 2, 3), (2, 4, 6)) == [1, 2, 3, 4, 6]",
        "num_ids": 540
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1, 2], [3, 4], [5, 6, 7]]) == 3 ",
        "num_ids": 451
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert extract_values('The answer is \"42\".') == ['42']",
        "num_ids": 350
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3, 4, 5], 5) == 10 # test case 1",
        "num_ids": 406
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and returns a list of its characters.\n    \"\"\"\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 207
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total_sum = 0\n    while n > 0:\n        digit = n % 10\n        total_sum += digit\n        n //= 10\n    return total_sum\n",
        "test": "assert sum_digits(0) == 0, \"Error: sum_digits(0) != 0\"",
        "num_ids": 392
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1,2,3,4,5]) == True",
        "num_ids": 426
    },
    {
        "number": 568,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n",
        "test": "assert empty_list(5) == [ {}, {}, {}, {}, {} ] # expected output: a list of 5 empty dictionaries",
        "num_ids": 291
    },
    {
        "number": 569,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n",
        "test": "assert sort_sublists([['b','a','c'], ['d','e','f']]) == [['a', 'b', 'c'], ['d', 'e', 'f']]",
        "num_ids": 468
    },
    {
        "number": 572,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1, 2, 2, 3, 3, 4, 4]) == [1, 2, 3, 4] # expected output: [1, 2, 3, 4]",
        "num_ids": 660
    },
    {
        "number": 573,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 419
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    side_area = 2 * 3.14 * r * h\n    lateral_area = 2 * 3.14 * r ** 2\n    total_area = side_area + lateral_area\n    return total_area\n",
        "test": "assert surfacearea_cylinder(1,1) == 6.283185307179586",
        "num_ids": 499
    },
    {
        "number": 576,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3],[1,2,3]) == True, \"Error in is_Sub_Array function\"",
        "num_ids": 481
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    # Initialize the value of factorial as 1\n    factorial = 1\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Multiply factorial by i\n        factorial *= i\n\n    # Return the last digit of the factorial\n    return factorial % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 567
    },
    {
        "number": 578,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 558
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar_list.append(item)\n    for item in test_tup2:\n        if item not in test_tup1:\n            dissimilar_list.append(item)\n    return dissimilar_list\n",
        "test": "assert find_dissimilar((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)) == (1,)",
        "num_ids": 718
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    This function removes uneven elements from the nested tuple.\n    \"\"\"\n    new_tuple = []\n    for element in test_tuple:\n        if type(element) == tuple:\n            new_tuple.append(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            new_tuple.append(element)\n    return tuple(new_tuple)\n",
        "test": "assert even_ele((1, 2, 3, 4, 5, (1, 2, 3, 4, 5), (6, 7, 8, 9, 10), 11), lambda x: x % 2 != 0) == (1, 3, 5, (1, 3, 5), (7, 9), 11) ",
        "num_ids": 809
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Calculate the surface area of a square pyramid with given base edge and height.\n    \"\"\"\n    base_area = b ** 2\n    slant_height = (b ** 2 + s ** 2) ** 0.5\n    triangular_area = 0.5 * b * slant_height\n    surface_area = base_area + 4 * triangular_area\n    return surface_area",
        "test": "assert surface_Area(4,3) == 56.0, \"Test case 1 failed\"",
        "num_ids": 590
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True, \"Dictionary is not empty\"",
        "num_ids": 251
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    if num <= 1:\n        return 1\n    else:\n        res = 0\n        for i in range(num):\n            res += catalan_number(i) * catalan_number(num-i-1)\n        return res\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 409
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Use regular expression to find all adverbs ending with ly\n    pattern = re.compile(r'\\w+ly\\b')\n    matches = pattern.finditer(text)\n\n    # Store the first adverb and its position in a dictionary\n    first_adverb = None\n    first_position = None\n    for match in matches:\n        if first_adverb is None:\n            first_adverb = match.group()\n            first_position = match.start()\n\n    # Return the dictionary with the first adverb and its position\n    return {'adverb': first_adverb, 'position': first_position}\n",
        "test": "assert find_adverbs(\"The car drove slowly down the hill.\") == (\"slowly\", 12), \"Adverb not found or wrong position\"",
        "num_ids": 657
    },
    {
        "number": 585,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # Create a max-heap of size n to store the n most expensive items\n    max_heap = []\n    \n    # Iterate through the items list\n    for item in items:\n        # Add the item to the max-heap\n        heapq.heappush(max_heap, item)\n        \n        # If the max-heap size exceeds n, remove the smallest item\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    \n    # Return the n most expensive items in descending order\n    return sorted(max_heap, reverse=True)\n",
        "test": "assert expensive_items([(1, 10), (2, 20), (3, 30), (4, 40), (5, 50)], 3) == [(5, 50), (4, 40), (3, 30)]",
        "num_ids": 778
    },
    {
        "number": 586,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    first_part = l[:n]\n    second_part = l[n:]\n    second_part.extend(first_part)\n    return second_part\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5, 6], 3) == [4, 5, 6, 1, 2, 3]",
        "num_ids": 482
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3]) == (1,2,3) # check if it converts list to tuple correctly",
        "num_ids": 262
    },
    {
        "number": 588,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest number in the list.\n    \"\"\"\n    # sort the list in ascending order\n    nums.sort()\n    # return the difference between the first and last elements of the sorted list\n    return nums[-1] - nums[0]\n",
        "test": "assert big_diff([1, 5, 3, 8, 4]) == 7 # should return 7",
        "num_ids": 443
    },
    {
        "number": 589,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two integers as input and returns a list of perfect squares within the range of those integers.\n    \"\"\"\n    # create an empty list to hold perfect squares\n    perfect_squares_list = []\n\n    # loop through all integers between a and b (inclusive)\n    for i in range(a, b+1):\n        # check if the square root of i is a whole number\n        if (i**0.5).is_integer():\n            # if it is, append i to the list of perfect squares\n            perfect_squares_list.append(i)\n\n    # return the list of perfect squares\n    return perfect_squares_list ",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9] ",
        "num_ids": 505
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_coord = cmath.rect(r, theta)\n    return rect_coord.real, rect_coord.imag\n",
        "test": "assert polar_rect(1,0) == 1+0j",
        "num_ids": 350
    },
    {
        "number": 591,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Storing the first element of the list\n    first_element = newList[0]\n    # Storing the last element of the list\n    last_element = newList[-1]\n    # Replacing the first element with the last element\n    newList[0] = last_element\n    # Replacing the last element with the first element\n    newList[-1] = first_element\n    return newList",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 546
    },
    {
        "number": 592,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k):\n        result *= (n-i)\n        result //= (i+1)\n    return result\n",
        "test": "assert binomial_Coeff(5,2) == 10",
        "num_ids": 399
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Using regular expressions to match the pattern of an IP address\n    pattern = r'\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b'\n    match = re.match(pattern, ip)\n\n    # If the input ip address is not a valid IP address, return None\n    if not match:\n        return None\n\n    # Split the input IP address into its component octets\n    octets = ip.split('.')\n\n    # Remove leading zeroes from each octet\n    cleaned_octets = [octet.lstrip('0') or '0' for octet in octets]\n\n    # Join the cleaned octets to form the new IP address\n    new_ip = '.'.join(cleaned_octets)\n\n    return new_ip",
        "test": "assert removezero_ip('001.002.003.004') == '1.2.3.4'",
        "num_ids": 657
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    # Find the first even number in the list\n    for num in list1:\n        if num % 2 == 0:\n            first_even = num\n            break\n    \n    # Find the first odd number in the list\n    for num in list1:\n        if num % 2 != 0:\n            first_odd = num\n            break\n    \n    # Calculate the difference\n    diff = first_even - first_odd\n    \n    return diff\n",
        "test": "assert diff_even_odd([1, 3, 5, 7, 9, 2, 4, 6, 8]) == 6 - 2 = 4",
        "num_ids": 836
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    n = len(str1)\n    for i in range(n):\n        if str1[i] != str2[i]:\n            count += 1\n    return count\n",
        "test": "assert min_Swaps(\"10101\", \"10111\") == 1, \"Test case 2 failed\"",
        "num_ids": 744
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        # Get the size of the item in bytes\n        size += sys.getsizeof(item)\n    return size\n",
        "test": "assert tuple_size(()) == 0",
        "num_ids": 375
    },
    {
        "number": 597,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    \n    while i < len(arr1) and k > 0:\n        if k == 1:\n            return arr1[i]\n        k -= 1\n        i += 1\n    \n    while j < len(arr2) and k > 0:\n        if k == 1:\n            return arr2[j]\n        k -= 1\n        j += 1\n",
        "test": "assert find_kth([1, 2, 3], [4, 5, 6], 5) == 6, \"Incorrect kth element.\"",
        "num_ids": 821
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Calculate the length of the number\n    length = len(str(number))\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Find the sum of the cube of each digit of the number\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** length\n        temp //= 10\n\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 571
    },
    {
        "number": 599,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average",
        "test": "assert sum_average(1) == (1, 1), \"Incorrect result for sum_average(1)\"",
        "num_ids": 400
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False ",
        "test": "assert is_Even(0) == True, \"0 is even, but is_Even(0) returns False\"",
        "num_ids": 251
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a Python function to find the first repeated character in a given string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 436
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        # Check if the integer is a lucid number\n        if str(i) == str(i)[::-1] and all(i%j!=0 for j in range(1, int(i**0.5)+1)):\n            ludics.append(i)\n    return ludics",
        "test": "assert get_ludic(1) == []",
        "num_ids": 654
    },
    {
        "number": 604,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse the list of words\n    words = words[::-1]\n    \n    # Join the reversed list of words into a string\n    s = ' '.join(words)\n    \n    return s\n",
        "test": "assert reverse_words('hello world') == 'world hello' ",
        "num_ids": 439
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 324
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians\n",
        "test": "assert radian_degree(0) == 0, \"Radian_degree error\"",
        "num_ids": 218
    },
    {
        "number": 607,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"hello world\", \"hello\") == (\"hello\", 0, 5)",
        "num_ids": 456
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 456
    },
    {
        "number": 610,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # Create a new list with all the elements of list1 except the L'th element\n    new_list = [element for i, element in enumerate(list1) if i != L-1]\n    return new_list\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5] ",
        "num_ids": 481
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, return the max of the n'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 9 ",
        "num_ids": 528
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first\n    element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 656
    },
    {
        "number": 614,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    total_sum = 0\n    for i in test_list:\n        total_sum += i\n        cum_sum.append(total_sum)\n    return cum_sum",
        "test": "assert cummulative_sum([1, 2, 3]) == [1, 3, 6]",
        "num_ids": 490
    },
    {
        "number": 615,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [2.0, 5.0, 8.0]",
        "num_ids": 560
    },
    {
        "number": 616,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n",
        "test": "assert tuple_modulo((2, 4, 6), (3, 5, 7)) == (2, 4, 6)",
        "num_ids": 491
    },
    {
        "number": 617,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def min_Jumps(steps, d):\n    if steps < d:\n        return -1 # can't reach the destination\n    elif d == 0:\n        return 0 # already at the destination\n    else:\n        jumps = 0\n        while steps >= d:\n            jumps += 1\n            if steps == d:\n                return jumps\n            elif steps > d:\n                steps -= d\n            else:\n                break\n        return -1 # can't reach the destination from here\n",
        "test": "assert min_Jumps(10, 5) == 2",
        "num_ids": 699
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([2, 4, 6], [2, 2, 3]) == [1.0, 2.0, 2.0] ",
        "num_ids": 460
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    non_nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            non_nums.append(char)\n    return ''.join(non_nums) + ''.join(nums)\n",
        "test": "assert move_num(\"Hello123\") == \"Hello123\"",
        "num_ids": 545
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    # initialize a set to store pairs\n    pairs = set()\n    # iterate over the list\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            # check if the pair is divisible\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                # add the pair to the set\n                pairs.add((a[i], a[j]))\n    # return the size of the set\n    return len(pairs)\n",
        "test": "assert largest_subset([1,3,5,7]) == 3 # test case 2",
        "num_ids": 518
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    if n % 2 == 0:\n        return (arr1[n//2 - 1] + arr2[n//2 - 1]) / 2\n    else:\n        return (arr1[n//2] + arr2[n//2]) / 2\n",
        "test": "assert get_median([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], 5) == 3",
        "num_ids": 729
    },
    {
        "number": 623,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1, 2, 3], 2) == [1, 4, 9]",
        "num_ids": 404
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    return string.isupper()\n",
        "test": "assert is_upper(\"world\") == \"WORLD\" # Test case 2",
        "num_ids": 225
    },
    {
        "number": 625,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 458
    },
    {
        "number": 626,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r\n    return area",
        "test": "assert triangle_area(0) == 0",
        "num_ids": 354
    },
    {
        "number": 627,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i] != i+1:\n            return i+1\n\n    return end+1\n",
        "test": "assert find_First_Missing([0,2,3,4,5,6,7,8,9]) == 1",
        "num_ids": 598
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 286
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def Split(lst):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in lst:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 447
    },
    {
        "number": 630,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    This function takes a coordinate tuple (x, y) and returns a list of all adjacent coordinates.\n    \"\"\"\n    if len(sub) == 0:  # If no adjacent coordinates have been generated yet\n        sub = [(ele[0], ele[1]+1), (ele[0], ele[1]-1), (ele[0]+1, ele[1]), (ele[0]-1, ele[1])]\n    else:\n        for i in range(len(sub)):\n            if sub[i][0] < 0 or sub[i][1] < 0:  # If x or y is less than 0\n                sub[i] = None\n        sub = [x for x in sub if x is not None]  # Remove all None values from the list\n    return sub\n",
        "test": "assert adjac((0, 0), sub=[(0, 1)]) == [(0, 1)]",
        "num_ids": 754
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_', ' ')\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 284
    },
    {
        "number": 632,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    non_zero = []\n    zero = []\n    for num in num_list:\n        if num == 0:\n            zero.append(num)\n        else:\n            non_zero.append(num)\n    return non_zero + zero\n",
        "test": "assert move_zero([1, 0, 2, 0, 3, 0, 4, 0, 5]) == [1, 2, 3, 4, 5, 0, 0, 0, 0] ",
        "num_ids": 672
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr, n):\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_xor ^= arr[i] ^ arr[j]\n    return sum_xor\n",
        "test": "assert pair_xor_Sum([1, 2, 3], 3) == 0  # xor of (1, 2) and (1, 3) and (2, 3) is 0",
        "num_ids": 525
    },
    {
        "number": 635,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(heap))]",
        "test": "assert heap_sort([]) == []",
        "num_ids": 442
    },
    {
        "number": 637,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit == 0:\n        return \"No profit and no loss\"\n    else:\n        return \"No profit and no loss not achieved\"\n",
        "test": "assert noprofit_noloss(10,15) == False",
        "num_ids": 388
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_ms = v * 1000  # Convert wind velocity to m/s\n    t_kelvin = t + 273.15  # Convert temperature to Kelvin\n    wind_chill = 13.12 + 0.6215 * t_kelvin - 11.37 * math.pow(v_ms, 0.16) + 0.3965 * t_kelvin * math.pow(v_ms, 0.16)\n    rounded_wind_chill = math.ceil(wind_chill)\n    return rounded_wind_chill\n",
        "test": "assert wind_chill(35, -5) == 32, \"Wrong result for wind_chill(35, -5)\"",
        "num_ids": 664
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['Alice', 'bob', 'eve']) == 8 # should be 8 ",
        "num_ids": 382
    },
    {
        "number": 640,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is in between them from a string.\n    '''\n\n    # Using regex to remove parenthesis and what is in between them\n    items = re.sub(r'\\([^)]*\\)', '', items)\n\n    return items\n",
        "test": "assert remove_parenthesis(\"Hello (World)\") == \"Hello \" ",
        "num_ids": 393
    },
    {
        "number": 641,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_nonagonal(n):\n    '''\n    Find the nth nonagonal number using the formula n*(2n-1).\n    '''\n    return n*(2*n-1)\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 393
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expression to match words containing 'z' except at the start and end of the word\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n",
        "test": "assert text_match_wordz_middle('Hello, world!') == False",
        "num_ids": 405
    },
    {
        "number": 644,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array upto the given position\n    input[:k] = input[:k][::-1]\n    \n    # Return the reversed array\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [3, 2, 1, 4, 5]",
        "num_ids": 478
    },
    {
        "number": 720,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((), {'a': 10, 'b': 20}) == ({'a': 10, 'b': 20},) ",
        "num_ids": 468
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    A path is defined as a specific sequence of cells that starts from the top-left cell\n    move only right or down and ends on bottom right cell.\n    We want to find a path with the maximum average over all existing paths.\n    Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n    for j in range(N):\n        dp[0][j] = cost[0][j]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    return dp[N-1][N-1] / (N * N)",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 8.333333333333335",
        "num_ids": 1279
    },
    {
        "number": 722,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value,\n    - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students\n",
        "test": "assert filter_data({\"Alice\": (175, 65), \"Bob\": (180, 70), \"Charlie\": (160, 55)}, 160, 55) == {\"Alice\": (175, 65), \"Bob\": (180, 70)}",
        "num_ids": 796
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,2,3], [1,2,3]) == 3 ",
        "num_ids": 438
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to string to get individual digits\n    base_str = str(base)\n    # Convert each digit to an integer and raise it to the power\n    digits_squared = [int(digit) ** power for digit in base_str]\n    # Calculate the sum of the digits raised to the power\n    sum_of_digits = sum(digits_squared)\n    return sum_of_digits\n",
        "test": "assert power_base_sum(5, 3) == 125",
        "num_ids": 514
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\\\"(.+?)\\\"' # regular expression pattern for finding values between quotes\n    matches = re.findall(pattern, text1) # finding all matches of the pattern in the given text\n    return matches # returning the list of matches\n",
        "test": "assert extract_quotation('\"hello\" \"world\"') == \"hello\"",
        "num_ids": 354
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result\n",
        "test": "assert multiply_elements((1, 2, 3, 4, 5)) == (1, 2, 6, 24, 120)",
        "num_ids": 491
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 500
    },
    {
        "number": 730,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.append(key)\n    return result\n",
        "test": "assert consecutive_duplicates([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1]",
        "num_ids": 563
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * (h/r)\n    return lateral_area",
        "test": "assert lateralsurface_cone(6, 8) == 259.896227196892809622 # expected output for (6, 8)",
        "num_ids": 439
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s.,]+'\n    text = re.sub(pattern, ':', text)\n    return text\n",
        "test": "assert replace_specialchar(\"This is a test of spaces and commas\") == \"This:is a test:of:spaces:and:commas\"",
        "num_ids": 374
    },
    {
        "number": 733,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1 # If x is not found in A\n",
        "test": "assert find_first_occurrence([1,2,3,4,5], 3) == 2 # should return 2",
        "num_ids": 670
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n    res = 0\n    \n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            prod = 1\n            for k in range(j, j+i):\n                prod = (prod * arr[k]) % mod\n            res = (res + prod) % mod\n    \n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([]) == 0, \"Incorrect result for []\"",
        "num_ids": 631
    },
    {
        "number": 735,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    mask = 0b111111111011111111101111111110 # binary mask to set middle bits\n    return n ^ (n & mask) # XOR with mask to toggle bits\n",
        "test": "assert set_middle_bits(0) == 0",
        "num_ids": 468
    },
    {
        "number": 736,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 2) == 1",
        "num_ids": 438
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert check_str(\"Apple\") == True, \"Test Case 1 Failed\"",
        "num_ids": 398
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return 1 + (1/2**(n-1)) * geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1, \"geometric_sum(1) should be 1\"",
        "num_ids": 291
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    index = 1\n    count = 1\n    num = 1\n    \n    while count <= n:\n        num += index\n        count += 1\n        index += 1\n        \n    return index-1",
        "test": "assert find_Index(1) == 1 # n = 1",
        "num_ids": 432
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        dict[test_tup[i]] = test_tup[i+1]\n    return dict\n",
        "test": "assert tuple_to_dict((1, 2, 3, 4)) == {1: 2, 3: 4}",
        "num_ids": 562
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a Python function to check whether all the characters are same or not.\n    '''\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n    \n    # Loop through the string and compare each character with the first character\n    for i in range(1, len(s)):\n        if s[i] != first_char:\n            return False\n    \n    # If all the characters are same, then return True\n    return True\n",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 412
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n    '''\n    height = (side ** 2 - side * math.sqrt(3)) / 2\n    area = side ** 2 * math.sqrt(3) / 6\n    return area, height\n",
        "test": "assert area_tetrahedron(4) == 6.0",
        "num_ids": 323
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    \n    # reverse the whole list\n    list = list[::-1]\n    \n    # reverse the first n-m items\n    list[:n-m] = list[:n-m][::-1]\n    \n    # reverse the last m items\n    list[n-m:] = list[n-m:][::-1]\n    \n    # reverse the whole list again\n    list = list[::-1]\n    \n    return list\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 3) == [3, 4, 5, 1, 2] ",
        "num_ids": 688
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
        "test": "assert check_none((None, None)) == True",
        "num_ids": 299
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        divisible = True\n        for digit in digits:\n            if num % digit != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(100, 300) == [200]",
        "num_ids": 683
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs.\n    Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    else:\n        return (r**2) * (a / 360) * math.pi\n",
        "test": "assert sector_area(1, 0) == 0",
        "num_ids": 433
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common suffixes of substrings.\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Following steps build L[m+1][n+1] in bottom up fashion. Note\n    # that L[i][j] corresponds to longest common suffix of\n    # X[0...i-1] and Y[0...j-1]. The last entry in L[i][j]\n    # corresponds to empty string.\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # The last entry in the 3D table L is the length of longest common\n    # subsequence of X, Y and Z.\n    return L[m][n][o] ",
        "test": "assert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"ACDFHR\") == \"ADH\" ",
        "num_ids": 1107
    },
    {
        "number": 748,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # use regex to find words starting with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    matches = pattern.findall(str1)\n    # replace each match with space + match\n    for match in matches:\n        str1 = str1.replace(match, ' ' + match)\n    # add space at the beginning if needed\n    if not str1.startswith(' '):\n        str1 = ' ' + str1\n    return str1\n",
        "test": "assert capital_words_spaces('PythonIsAwesome') == 'Python Is Awesome'",
        "num_ids": 469
    },
    {
        "number": 749,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str\n",
        "test": "assert sort_numeric_strings([]) == []",
        "num_ids": 452
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1,2), (3,4)], (5,6)) == [(1,2), (3,4), (5,6)]",
        "num_ids": 364
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    left_child = 2 * i + 1\n    right_child = 2 * i + 2\n\n    # If current node is a leaf node, then it is a min heap\n    if left_child >= len(arr) and right_child >= len(arr):\n        return True\n\n    # If current node is not a leaf node and neither of its child node is a leaf node, then check if it satisfies the min heap property\n    if left_child < len(arr) and right_child < len(arr):\n        if arr[i] > arr[left_child] or arr[i] > arr[right_child]:\n            return False\n        else:\n            return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)\n\n    # If current node has only one child node, then check if it satisfies the min heap property\n    if left_child < len(arr):\n        if arr[i] > arr[left_child]:\n            return False\n        else:\n            return check_min_heap_helper(arr, left_child)\n\n    # If current node has no child node, then it is a min heap\n    return True\n",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5], 0) == True ",
        "num_ids": 890
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n <= 1:\n        return n\n    jacobsthal = [0, 1, 1]\n    for i in range(3, n+1):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2] + jacobsthal[i-3])\n    return jacobsthal[n]",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 416
    },
    {
        "number": 753,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list in ascending order\n    sorted_list = sorted(test_list)\n    \n    # select first K elements from sorted list\n    min_k_records = sorted_list[:K]\n    \n    return min_k_records\n",
        "test": "assert min_k([(3, 4), (5, 6), (7, 8)], 2) == [(3, 4), (5, 6)]",
        "num_ids": 625
    },
    {
        "number": 754,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3] # all elements are common",
        "num_ids": 657
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest\n",
        "test": "assert second_smallest([1, 2, 3]) == 2",
        "num_ids": 477
    },
    {
        "number": 756,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    result = re.search(pattern, text)\n    if result:\n        return f\"Match found: {result.group()}\"\n    else:\n        return \"No match found.\"",
        "test": "assert text_match_zero_one(\"ab\") is not None",
        "num_ids": 346
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0, \"Test case failed\"",
        "num_ids": 658
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    # Initialize an empty dictionary to store the count of each sublist\n    count_dict = {}\n\n    # Loop through each sublist in the given list\n    for sublist in list1:\n        # Convert the sublist to a tuple and use it as the key for the count_dict\n        sublist_tuple = tuple(sublist)\n        \n        # If the sublist_tuple is not already in the count_dict, add it with a value of 1\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        # If the sublist_tuple is already in the count_dict, increment its value by 1\n        else:\n            count_dict[sublist_tuple] += 1\n    \n    # Return the count_dict\n    return count_dict\n",
        "test": "assert unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5, 6]]) == {(1, 2, 3): 3, (4, 5, 6): 1} ",
        "num_ids": 843
    },
    {
        "number": 759,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        decimal_part = str(float_num).split(\".\")[1]\n        if len(decimal_part) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal('123.45') == True, \"Test failed for is_decimal('123.45')\"",
        "num_ids": 354
    },
    {
        "number": 760,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            if arr.count(arr[i]) != 1:\n                return False\n        return True\n",
        "test": "assert unique_Element([1]) == True",
        "num_ids": 329
    },
    {
        "number": 762,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        return True\n",
        "test": "assert check_monthnumber_number(2) == 0 # February has 28 days in a common year",
        "num_ids": 404
    },
    {
        "number": 763,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_min_diff(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n    # initialize the minimum difference as infinity\n    min_diff = float('inf')\n    # loop through the array and find the minimum difference between adjacent elements\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    # return the minimum difference\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1",
        "num_ids": 512
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 248
    },
    {
        "number": 765,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize a list to store the first 10 polite numbers\n    polite_numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    \n    # Loop through n-10 and add the next polite number to the list\n    for i in range(10, n):\n        # Find the next polite number by adding the largest prime factor of the previous polite number to itself\n        polite_number = polite_numbers[-1] + max_prime_factor(polite_numbers[-1])\n        polite_numbers.append(polite_number)\n    \n    # Return the nth polite number\n    return polite_numbers[n-1]\n\ndef max_prime_factor(num):\n    '''\n    Helper function to find the largest prime factor of a number\n    '''\n    max_prime = -1\n    i = 2\n    while i*i <= num:\n        if num % i:\n            i += 1\n        else:\n            num //= i\n            max_prime = i\n    if num > 1:\n        max_prime = num\n    return max_prime\n",
        "test": "assert is_polite(2) == 3",
        "num_ids": 636
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result\n",
        "test": "assert pair_wise([1,2,3,4,5]) == [(1,2), (2,3), (3,4), (4,5)] ",
        "num_ids": 377
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2 # expected output: 2 pairs with a sum of 7 (2, 5 and 3, 4)",
        "num_ids": 490
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1, 2, 3], [1, 2, 3]) == []",
        "num_ids": 428
    },
    {
        "number": 770,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n",
        "test": "assert odd_num_sum(0) == 0",
        "num_ids": 400
    },
    {
        "number": 771,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n\n    stack = deque()\n    mapping = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    \n    return not stack\n",
        "test": "assert check_expression(\"()()()\") == True",
        "num_ids": 607
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word) != K:\n            new_words.append(word)\n    return ' '.join(new_words)\n",
        "test": "assert remove_length('hello world', 4) == 'hello world'",
        "num_ids": 442
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    positions = []\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        positions.append(match.span())\n    return positions if positions else None\n",
        "test": "assert occurance_substring(\"hello world\", \"llo\") == [(2, 5)]",
        "num_ids": 454
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    This function takes a list of numbers as input and checks if every odd index contains odd numbers.\n    '''\n    # Loop through the list with a step of 2 (i.e., only odd indices)\n    for i in range(1, len(nums), 2):\n        # If the element at the current index is not an odd number, return False\n        if nums[i] % 2 == 0:\n            return False\n    # If the loop completes without returning False, then all odd indices contain odd numbers\n    return True\n",
        "test": "assert odd_position([1,3,5,7]) == True, \"Error in odd_position\"",
        "num_ids": 468
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"\") == 0",
        "num_ids": 548
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the count of each element\n    count = {}\n    # Iterate through the list and count the occurrence of each element\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    # Iterate through the list again and sum up the non-repeated elements\n    total = 0\n    for num in arr:\n        if count[num] == 1:\n            total += num\n    return total\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15 ",
        "num_ids": 539
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    packed_list = []\n    for key, group in groupby(list1):\n        packed_list.append(list(group))\n    return packed_list\n",
        "test": "assert pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]) == [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4], [5, 5]] ",
        "num_ids": 573
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert each list to a tuple and count the occurrences using Counter function\n    from collections import Counter\n    sublist_count = Counter([tuple(sublist) for sublist in list1])\n    return sublist_count\n",
        "test": "assert unique_sublists([[1,2],[1,2],[3,4],[3,4],[5,6]]) == {(1, 2): 2, (3, 4): 2, (5, 6): 1}",
        "num_ids": 699
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n\n    # Initialize an empty list to store the combinations\n    comb_sums = []\n\n    # Iterate through each possible combination of tuples\n    for i in range(1, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            # Calculate the sum of the current combination\n            comb_sum = sum(comb)\n\n            # Check if the sum is already in the list\n            if comb_sum not in comb_sums:\n                comb_sums.append(comb_sum)\n\n    return comb_sums",
        "test": "assert find_combinations([(1,2,3), (2,3,4), (3,4,5)]) == [((1,2,3),), ((2,3,4),), ((3,4,5),), ((1,2,3), (2,3,4)), ((1,2,3), (3,4,5)), ((2,3,4), (3,4,5)), ((1,2,3), (2,3,4), (3,4,5))] ",
        "num_ids": 1580
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors is even and False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n        if i*i == n:\n            count -= 1\n    return count % 2 == 0\n",
        "test": "assert count_divisors(12) == True",
        "num_ids": 465
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+2, n+1, 2):\n            for k in range(i, j, 2):\n                sum += arr[k]\n    return sum",
        "test": "assert odd_length_sum([1, 2, 3, 4]) == 10, \"Should return 10 for the input [1, 2, 3, 4]\"",
        "num_ids": 461
    },
    {
        "number": 783,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert RGB values to range 0-1\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # Find the minimum and maximum RGB values\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    # Calculate the HSV values\n    delta = cmax - cmin\n    if cmax == cmin:\n        hue = 0.0\n    elif cmax == r:\n        hue = 60.0 * ((g - b) / delta % 6)\n    elif cmax == g:\n        hue = 60.0 * ((b - r) / delta + 2)\n    else:\n        hue = 60.0 * ((r - g) / delta + 4)\n    sat = 0.0 if cmax == 0.0 else delta/cmax\n    val = cmax\n\n    # Scale HSV values to range 0-1\n    hue = hue/360.0\n    sat = sat\n    val = val\n\n    return hue, sat, val",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1231
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    for num in list1:\n        if num % 2 != 0:\n            odd_num = num\n            break\n    return even_num * odd_num\n",
        "test": "assert mul_even_odd([2, 4, 6, 8, 10]) == 80  # even: 8, odd: 10",
        "num_ids": 657
    },
    {
        "number": 785,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the parentheses from the string\n    test_str = test_str.strip('()')\n\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n\n    # Convert the list of strings into a list of integers\n    int_list = [int(num) for num in str_list]\n\n    # Convert the list of integers into a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 561
    },
    {
        "number": 786,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "test": "assert right_insertion([1, 3, 5, 7], 0) == 0",
        "num_ids": 347
    },
    {
        "number": 787,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a(b{3})\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbbb\") == True",
        "num_ids": 357
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    test_tuple = tuple(test_list)\n\n    # create a new tuple with the list tuple and the string\n    new_tup = test_tuple + (test_str,)\n\n    return new_tup\n",
        "test": "assert new_tuple(['apple', 'banana', 'cherry'], 'hello') == ('apple', 'banana', 'cherry', 'hello') ",
        "num_ids": 421
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8]) == True",
        "num_ids": 337
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        if type(i) != tuple:\n            new_list.append(i)\n    return tuple(new_list)\n",
        "test": "assert remove_nested(()) == () # Empty tuple input",
        "num_ids": 447
    },
    {
        "number": 792,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert count_list([[1,2,3], [4,5,6], [7,8,9], [10]]) == 4",
        "num_ids": 285
    },
    {
        "number": 793,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of x in arr if x is present, else returns -1.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    result = -1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == x:\n            result = mid\n            start = mid + 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    # Check if x is present in arr or not\n    if arr[result] == x:\n        while result < len(arr) - 1 and arr[result + 1] == x:\n            result += 1\n        return result\n    else:\n        return -1\n",
        "test": "assert last([1, 2, 3, 4, 5], 5) == 4",
        "num_ids": 727
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_starta_endb(\"ab\") == \"ab\"",
        "num_ids": 377
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 341
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Returns the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum to zero\n    sum = 0\n    # iterate over all odd numbers in range l to r\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum\n",
        "test": "assert sum_odd(10) == 25 # odd numbers between 1 and 10 are 1, 3, 5, 7, and 9, so the sum is 25",
        "num_ids": 397
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "test": "assert _sum([1, 2, 3]) == 6",
        "num_ids": 256
    },
    {
        "number": 799,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to binary string\n    n_binary = bin(n)[2:]\n    \n    # Pad leading zeros if necessary\n    n_binary = n_binary.zfill(32)\n    \n    # Rotate the binary string to the left by d bits\n    rotated_n_binary = n_binary[d:] + n_binary[:d]\n    \n    # Convert the rotated binary string back to decimal\n    rotated_n = int(rotated_n_binary, 2)\n    \n    return rotated_n\n",
        "test": "assert left_rotate(0b1101, 2) == 0b1101 << 2",
        "num_ids": 525
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello, world!\") == \"Hello,world!\" # test with spaces",
        "num_ids": 305
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1,1,1) == 3",
        "num_ids": 434
    },
    {
        "number": 802,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Find the minimum element in the array\n    for i in range(n):\n        if arr[i] < arr[n-1]:\n            return i\n    \n    # If all the elements are same, no rotation required\n    return 0\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0, \"Incorrect number of rotations\" ",
        "num_ids": 597
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # square root of n rounded to nearest integer\n    root = int(n ** 0.5)\n    # if square of root is equal to n, then n is a perfect square\n    return root * root == n\n",
        "test": "assert is_perfect_square(1) == True",
        "num_ids": 295
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 3, 4, 5]) == True",
        "num_ids": 307
    },
    {
        "number": 805,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            result = lst\n    return result\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]",
        "num_ids": 646
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 439
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 345
    },
    {
        "number": 808,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return K in test_tup\n",
        "test": "assert check_K((1,2,3), 2) == True",
        "num_ids": 299
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] <= test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((2, 4, 6), (1, 3, 5)) == True ",
        "num_ids": 443
    }
]