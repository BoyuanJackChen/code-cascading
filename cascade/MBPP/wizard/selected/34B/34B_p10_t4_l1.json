[
    {
        "number": 2,
        "max_answer_num": 40,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n",
        "test": "assert similar_elements(('apple', 'banana', 'orange', 'grape'), ('banana', 'cherry', 'orange')) == {'banana', 'orange'}",
        "num_ids": 2191,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Returns True if n is not a prime number, False otherwise.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(1) == True # 1 is not prime",
        "num_ids": 1517,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([], 0) == []",
        "num_ids": 3051,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the number is a power of two or not.\n    '''\n    if x <= 0:\n        return False\n    \n    while x != 1:\n        if x % 2 != 0:\n            return False\n        x = x // 2\n    \n    return True\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 1353,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog.\") == [\"quick\", \"brown\", \"jumps\", \"over\", \"lazy\"]",
        "num_ids": 1928,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "test": "assert square_nums([1, 2, 3]) == [1, 4, 9]",
        "num_ids": 1595,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_Rotations(str):  \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\n",
        "test": "assert find_Rotations(\"\") == 0",
        "num_ids": 1681,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1) # remove first occurrence\n        s = s.replace(ch, '', -1) # remove last occurrence\n        return s\n    else:\n        return s\n",
        "test": "assert remove_Occ(\"abc\",\"d\") == \"abc\"",
        "num_ids": 2012,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    # Sort the row sums and the matrix based on the row sums\n    sorted_sums, sorted_M = (list(t) for t in zip(*sorted(zip(row_sums, M))))\n    # Return the sorted matrix\n    return sorted_M\n",
        "test": "assert sort_matrix([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]",
        "num_ids": 3853,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5*l*b*h\n    return volume\n",
        "test": "assert find_Volume(2,3,4) == 12",
        "num_ids": 1402,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 1671,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 18,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def str_to_list(string):\n    '''\n    Convert a string to a list of characters.\n    '''\n    return [char for char in string]\n\ndef remove_chars(first_string, second_string):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    # Convert the input strings to lists of characters\n    first_list = str_to_list(first_string)\n    second_list = str_to_list(second_string)\n\n    # Create a dictionary to store the count of each character in the second string\n    char_counts = {}\n    for char in second_list:\n        char_counts[char] = char_counts.get(char, 0) + 1\n\n    # Create a new list to store the filtered characters from the first string\n    filtered_list = []\n    for char in first_list:\n        if char_counts.get(char, 0) == 0:\n            filtered_list.append(char)\n\n    # Convert the filtered list back to a string and return it\n    return ''.join(filtered_list)\n",
        "test": "assert str_to_list(\"world\") == ['w', 'o', 'r', 'l', 'd']",
        "num_ids": 2740,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set(arraynums)\n    if len(num_set) == len(arraynums):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False # Test case without duplicates",
        "num_ids": 1993,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 1:\n        return False\n    for i in range(2, int(x/2)+1):\n        if x % i == 0:\n            return False\n    return True\n",
        "test": "assert is_woodall(25) == False",
        "num_ids": 1611,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    original = num\n    while num > 0:\n        remainder = num % 10\n        reverse = (reverse * 10) + remainder\n        num = num // 10\n    if original - 1 == 2 * reverse:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(13) == False",
        "num_ids": 1951,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # Sort the digits in descending order\n    # Convert the sorted digits into a string and remove any leading zeros\n    num_str = \"\".join(str(i) for i in arr).lstrip('0')\n    # If the resulting string is empty, return 0\n    if not num_str:\n        return 0\n    # Convert the string back to an integer and return it\n    return int(num_str)\n",
        "test": "assert find_Max_Num([1, 2, 3]) == 321",
        "num_ids": 2310,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check if signs of x and y are opposite or not\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(-10,5) == True",
        "num_ids": 1443,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "test": "assert is_octagonal(1) == 1  # should return 1",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            digit_sum = sum(int(c) for c in substring if c.isdigit())\n            if digit_sum == len(substring):\n                count += 1\n    return count\n",
        "test": "assert count_Substrings(\"12\") == 1",
        "num_ids": 2100,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize a variable to store the smallest number\n    smallest = None\n    # Loop through each number in the list\n    for x in xs:\n        # If the smallest number is None or the current number is smaller than the smallest number, set the smallest number to the current number\n        if smallest is None or x < smallest:\n            smallest = x\n    # Return the smallest number\n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1534,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if not test_list:\n        return None\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1,2,3,4,5]) == 4",
        "num_ids": 2671,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "test": "assert subject_marks([('Maths', 90), ('Science', 80), ('English', 85)]) == [('Science', 80), ('English', 85), ('Maths', 90)]",
        "num_ids": 2827,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1,2,3]) == 6",
        "num_ids": 2163,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1541,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1, 1]  # Initialize the Bell numbers\n    for i in range(2, n+1):\n        bell.append(sum(bell[-j]*bell[j-1] for j in range(1, i+1)))\n    return bell[n]\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1865,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    # Check if the array is increasing\n    increasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            increasing = False\n            break\n\n    if increasing:\n        return True\n\n    # Check if the array is decreasing\n    decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] < A[i+1]:\n            decreasing = False\n            break\n\n    if decreasing:\n        return True\n\n    return False\n",
        "test": "assert is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 2448,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)\n",
        "test": "assert is_sublist([1,2,3,4,5],[6,7,8]) == False",
        "num_ids": 1913,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Get the length of the first tuple in the input list\n    length = len(Input[0])\n    \n    # Iterate over the rest of the tuples in the input list\n    for tup in Input[1:]:\n        # If the length of the current tuple is not equal to the length of the first tuple, return False\n        if len(tup) != length:\n            return False\n    \n    # If all the tuples have the same length, return True\n    return True\n",
        "test": "assert find_equal_tuple([(1,2,3),(4,5,6)]) == True",
        "num_ids": 2174,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert comb_sort([]) == []",
        "num_ids": 2910,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    while i**2 <= n:\n        j = i\n        while (j**2 <= n):\n            if i**2 + j**2 == n:\n                return True\n            j += 1\n        i += 1\n    return False\n",
        "test": "assert dif_Square(3) == False # 3 cannot be represented as the difference of two squares",
        "num_ids": 1784,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n\n    pattern_dict = {}\n    for i in range(len(patterns)):\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = colors[i]\n        elif pattern_dict[patterns[i]] != colors[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns([], []) == True",
        "num_ids": 2458,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tpl in test_list:\n        if all(x % K == 0 for x in tpl):\n            result.append(tpl)\n    return result\n",
        "test": "assert find_tuples([(1,2,3), (4,5,6), (15, 30, 45)], 3) == [(15, 30, 45)]",
        "num_ids": 3229,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(22) == True",
        "num_ids": 1016,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and checks whether the length of the string is odd or not.\n    If the length is odd, it returns True, else False.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len('world') == True # odd length word",
        "num_ids": 1222,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 1325,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n",
        "test": "assert volume_sphere(2) == 33.510321638291124",
        "num_ids": 1777,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def get_Char(strr): \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    ascii_sum %= 26\n    if ascii_sum == 0:\n        return 'Z'\n    else:\n        return chr(ascii_sum + 96)\n",
        "test": "assert get_Char(\"hello\") == \"l\"",
        "num_ids": 1847,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 30,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[sequence[i-1]] + sequence[i - sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n-1]\n",
        "test": "assert sequence(1) == 1 # first number is always 1",
        "num_ids": 1733,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n",
        "test": "assert surfacearea_sphere(1) == 12.566370614359172",
        "num_ids": 1675,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1 # n=1, expected output: 1",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n",
        "test": "assert merge_dictionaries_three({\"a\":1, \"b\":2}, {\"c\":3, \"d\":4}, {\"e\":5, \"f\":6}) == {\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5, \"f\":6} ",
        "num_ids": 3352,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count_dict = collections.defaultdict(int)\n    for item in list1:\n        count_dict[item] += 1\n    return count_dict\n",
        "test": "assert freq_count([1, 1, 2, 3, 3, 3, 4, 5]) == {1: 2, 2: 1, 3: 3, 4: 1, 5: 1} ",
        "num_ids": 2314,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    i = N - 1\n    while i > 0:\n        if N % i == 0:\n            return i\n        i -= 1\n    return None\n",
        "test": "assert closest_num(0) == None",
        "num_ids": 1728,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6",
        "num_ids": 1609,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring('hello world', 'universe') == False",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    str_n = str(n)\n    prev_diff = None\n    for i in range(len(str_n) - 1):\n        diff = abs(int(str_n[i]) - int(str_n[i+1]))\n        if diff == 0 or diff == 1:\n            if prev_diff is not None and diff == prev_diff:\n                return False\n            prev_diff = diff\n        else:\n            return False\n    return True\n",
        "test": "assert is_undulating(123321) == False  # Test case 4: a number with decreasing digits followed by increasing digits, but not undulating",
        "num_ids": 2224,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' raised to the power 'b'\n    \"\"\"\n    result = a ** b\n    return result\n",
        "test": "assert power(2, 0) == 1",
        "num_ids": 937,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(1, 5), (2, 3), (3, 7)]) == 2",
        "num_ids": 2044,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize minimum length to infinity\n    \n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n    \n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3], [4], [5,6,7,8], [9,10]]) == 1",
        "num_ids": 2416,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(12) == 6 # True since divisors of 12 are 1, 2, 3, 4, 6, 12",
        "num_ids": 1909,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for item in list1:\n        if item not in frequency:\n            frequency[item] = 1\n        else:\n            frequency[item] += 1\n    return frequency\n",
        "test": "assert frequency_lists([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 2922,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    This function multiplies all the numbers in a list and divides with the length of the list.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result\n",
        "test": "assert multiply_num([1, 2, 3]) == 2",
        "num_ids": 1647,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 1618,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(n):\n        # helper function to check if a number is a palindrome\n        return str(n) == str(n)[::-1]\n\n    num += 1  # start checking from the next integer\n    while not is_palindrome(num):\n        num += 1\n    return num\n",
        "test": "assert next_smallest_palindrome(999) == 1001",
        "num_ids": 2319,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return sorted(arr)[k-1]\n",
        "test": "assert kth_element([1, 3, 5, 7, 9], 1) == 1",
        "num_ids": 1969,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel = ''\n    for i in range(len(words)):\n        if i == 0:\n            camel += words[i]\n        else:\n            camel += words[i].capitalize()\n    return camel\n",
        "test": "assert snake_to_camel(\"1_2_3\") == \"123\"",
        "num_ids": 1823,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n == 0 and m == 0:\n        return 1\n    elif n <= 0 or m <= 0:\n        return 0\n    else:\n        return m * eulerian_num(n-1, m-1) + (m+1) * eulerian_num(n-1, m)\n",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 2262,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n",
        "test": "assert sort_sublists([['apple', 'banana', 'orange'], ['car', 'bus', 'train'], ['pen', 'pencil', 'eraser']]) == [['apple', 'banana', 'orange'], ['bus', 'car', 'train'], ['eraser', 'pen', 'pencil']]",
        "num_ids": 3684,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, True]) == 3",
        "num_ids": 1189,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n",
        "test": "assert add_lists([1,2,3], (4,5,6)) == (4, 5, 6, 1, 2, 3)",
        "num_ids": 1902,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for num in heapq.merge(num1,num2,num3):\n        merged_list.append(num)\n    return merged_list\n",
        "test": "assert merge_sorted_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) != [1, 2, 3, 4, 5, 9, 7, 8]",
        "num_ids": 4345,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        num = int(s, 2)  # convert binary string to integer\n        if num % 2 == 1:  # check if number is odd\n            count += 1\n        s = s[1:] + s[0]  # rotate binary string one position to the left\n    return count\n",
        "test": "assert odd_Equivalent('0000', 4) == 0 # Example 4",
        "num_ids": 2043,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set for each sublist and take the intersection of all sets\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements = common_elements & set(sublist)\n    return list(common_elements)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]",
        "num_ids": 3079,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 1046,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 39,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}]) == True",
        "num_ids": 1281,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple into a string\n    nums_str = ''.join(str(num) for num in nums)\n\n    # Convert the string into an integer and return it\n    return int(nums_str)\n",
        "test": "assert tuple_to_int((6,)) == 6",
        "num_ids": 1539,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        elif isinstance(item, str):\n            try:\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert list_to_float([['1.5', '2', '3'], [4, '5', '6.0']]) == [[1.5, 2.0, 3.0], [4.0, 5.0, 6.0]] # Test case 2",
        "num_ids": 2705,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1337,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[0] != arr[1]:\n        return arr[0]\n    if arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    left, right = 1, n-2\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:\n            return arr[mid]\n        elif arr[mid] == arr[mid-1]:\n            if (mid-left) % 2 == 1:\n                right = mid - 2\n            else:\n                left = mid + 1\n        else:\n            if (right-mid) % 2 == 1:\n                left = mid + 2\n            else:\n                right = mid - 1\n    return None\n",
        "test": "assert search([1, 2, 3, 4, 5]) == 1",
        "num_ids": 2662,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 14,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if abs(product) > max_product:\n            max_product = abs(product)\n    return max_product\n",
        "test": "assert max_product_tuple([(1,-2), (3,4), (-5,6)]) == 30",
        "num_ids": 2692,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(2, limit+1):\n        divisors_sum = sum(d for d in range(1, i//2+1) if i % d == 0)\n        if divisors_sum != i and divisors_sum <= limit and sum(d for d in range(1, divisors_sum//2+1) if divisors_sum % d == 0) == i:\n            total += i\n    return total\n",
        "test": "assert amicable_numbers_sum(100) == 0",
        "num_ids": 2924,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    angle = cmath.phase(complex_num)\n    return angle\n",
        "test": "assert angle_complex(1,0) == 0",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n    return max_diff\n",
        "test": "assert find_length(\"00000000\") == 8  # All characters are 0s",
        "num_ids": 3415,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_common_divisors(a, b):\n    result = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            result += i\n    return result\n\ndef sum(a, b):\n    if a == b:\n        return (a + b) // 2\n    else:\n        return sum_common_divisors(a, b)\n",
        "test": "assert sum(24,36) == 28",
        "num_ids": 2698,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(3, 4) == 12",
        "num_ids": 982,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "test": "assert long_words(4, [\"hello\", \"world\", \"Python\", \"programming\"]) == [\"hello\", \"world\", \"Python\", \"programming\"]",
        "num_ids": 1956,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is square\n    for i in range(n):\n        if len(my_matrix[i]) != n:\n            return False\n    \n    # Calculate the sum of the first row and first column\n    sum1 = sum(my_matrix[0])\n    sum2 = sum(my_matrix[i][0] for i in range(n))\n    \n    # Check if all rows and columns have same sum\n    for i in range(1, n):\n        if sum(my_matrix[i]) != sum1 or sum(my_matrix[j][i] for j in range(n)) != sum2:\n            return False\n    \n    # Check if the sum of each diagonal is equal to the sum of the first diagonal\n    sum3 = sum(my_matrix[i][i] for i in range(n))\n    sum4 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if sum3 != sum1 or sum4 != sum2:\n        return False\n    \n    # If all the conditions are satisfied, return True\n    return True\n",
        "test": "assert magic_square_test([[1,2,3], [4,5,6], [7,8,9]]) == False",
        "num_ids": 4686,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 36,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # Find the item with maximum frequency in the list\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    \n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 3, 3, 4, 4, 4, 5]) == 4",
        "num_ids": 2566,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    vowels_in_str = [c for c in str1 if c in vowels]\n    vowels_in_str.reverse()\n    new_str = ''\n    i = 0\n    for c in str1:\n        if c in vowels:\n            new_str += vowels_in_str[i]\n            i += 1\n        else:\n            new_str += c\n    return new_str\n",
        "test": "assert reverse_vowels(\"python\") == \"python\"",
        "num_ids": 2654,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ', '.join(map(str, tup1))\n    return str_tup\n",
        "test": "assert tup_string(()) == \"\"",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # initialize the sum to zero\n    sum = 0\n\n    # loop through the list of numbers\n    for num in nums:\n        # check if the number is negative\n        if num < 0:\n            # add the negative number to the sum\n            sum += num\n\n    # return the sum of negative numbers\n    return sum\n",
        "test": "assert sum_negativenum([2, -3, 5, -8, 1]) == -11 # Test case 1",
        "num_ids": 2064,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 1055,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count\n",
        "test": "assert zero_count([1, 2, 0, 0, 3, 4]) == 0.5",
        "num_ids": 2429,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == False",
        "num_ids": 2304,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n",
        "test": "assert abs(circle_circumference(2) - 12.56) < 0.01 # radius is 2",
        "num_ids": 1614,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Initialize an empty set\n    result_set = set()\n    # Loop through each element of the list\n    for element in test_list:\n        # If the element is a list, call the function recursively\n        if isinstance(element, list):\n            result_set.update(extract_singly(element))\n        # If the element is a number, add it to the set\n        else:\n            result_set.add(element)\n    # Return the set of flattened numbers\n    return result_set\n",
        "test": "assert extract_singly([[1, 2], [3, 4], [5]]) == {1, 2, 3, 4, 5}",
        "num_ids": 2392,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(arr, k):\n        first = 0\n        while first < k:\n            arr[first], arr[k] = arr[k], arr[first]\n            first += 1\n            k -= 1\n    \n    for i in range(len(nums)-1, 0, -1):\n        # Find the index of the maximum element in the remaining unsorted array\n        max_idx = i\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Move the maximum element to the beginning of the array\n        flip(nums, max_idx)\n        # Move the maximum element to its correct position in the sorted part of the array\n        flip(nums, i)\n    \n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 3395,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3",
        "num_ids": 2244,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1, 2, 3)) == 0 ",
        "num_ids": 1713,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 1, 1, 1, 1]) == 0",
        "num_ids": 2328,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def find_solution(a, b, n):\n    # calculate the gcd of a and b\n    gcd = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            gcd = i\n    # check if a solution exists\n    if n % gcd != 0:\n        return None\n    # find the solution\n    x = (n // gcd) // b\n    y = (n // gcd) % b\n    return (x, y)\n",
        "test": "assert find_solution(2, 3, 7) == (2, 1) # x = 2, y = 1",
        "num_ids": 3723,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Removes all elements from list1 that are present in list2.\n    \"\"\"\n    return [elem for elem in list1 if elem not in list2]\n",
        "test": "assert remove_elements([1, 2, 3], [2]) == [1, 3]  # remove 2 from list1",
        "num_ids": 2106,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2*i\n    return total\n",
        "test": "assert sum_series(6) == 6 + 4 + 2  # n = 6",
        "num_ids": 1824,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2 * l * tan(pi/l)) / 4\n    return area\n",
        "test": "assert area_polygon(10, 4) == 100*tan(pi/4)",
        "num_ids": 2265,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum",
        "test": "assert div_sum(12) == 28 ",
        "num_ids": 2575,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if ord(str1[i].lower()) == ord('a') + i:\n            count += 1\n    return count\n",
        "test": "assert count_char_position('1234567890') == 0 # no letters are in position",
        "num_ids": 1840,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([0,2,4,6,8]) == 10",
        "num_ids": 1963,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 1369,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for element in a:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,2,4,2,5], 2) == 3  # count the frequency of 2 in the given list",
        "num_ids": 2001,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9 # returns the sum of elements at indices 1 to 3",
        "num_ids": 2060,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5  # Number of sides of a pentagon\n    p = n * a\n    return p\n",
        "test": "assert perimeter_pentagon(1) == 5.0  # edge case",
        "num_ids": 1636,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance('') == 0",
        "num_ids": 1350,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n",
        "test": "assert check_type((\"apple\", \"banana\", \"cherry\")) == True",
        "num_ids": 1622,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 6) == False",
        "num_ids": 3111,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 1448,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_values_string(string):\n    '''\n    Remove the characters which have odd index values of a given string.\n    '''\n    return string[::2]\n",
        "test": "assert odd_values_string(\"Python\") == \"Pto\"",
        "num_ids": 1408,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_of_three(a,b,c):  \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 1401,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10, 2, 4) == False ",
        "num_ids": 2501,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    arr[:n] = neg + pos\n    return arr\n",
        "test": "assert re_arrange_array([-1, -2, -3], 3) == [-1, -2, -3]",
        "num_ids": 3873,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character,\n    and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank('hello world', '*') == 'hello*world'",
        "num_ids": 1442,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n    \n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    \n    return result[::-1]\n",
        "test": "assert larg_nnum([3, 5, 1, 7, 9, 2, 8, 4, 6], 0) == [] # Test 4",
        "num_ids": 2659,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h\n",
        "test": "assert lateralsuface_cylinder(0,4) == 0",
        "num_ids": 2136,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert volume_cube(2) == 8 # testing for side length of 2",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Iterate through the binary representation of the number\n    binary = bin(n)[2:]\n    even_binary = ''\n    for i, bit in enumerate(binary):\n        if i % 2 == 0:\n            even_binary += '1'\n        else:\n            even_binary += bit\n\n    # Convert the modified binary string back to an integer\n    return int(even_binary, 2)\n",
        "test": "assert even_bit_set_number(7) == 7",
        "num_ids": 2402,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2), (5, 6), (3, 4), (1, 2), (7, 8)]) == {(1, 2): 3, (3, 4): 2, (5, 6): 1, (7, 8): 1} ",
        "num_ids": 2925,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"abc\") == 6 ",
        "num_ids": 1636,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def get_total_number_of_sequences(m,n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, \n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    else:\n        count = 0\n        for i in range(2,m):\n            count += get_total_number_of_sequences(i, n-1)\n        return count\n",
        "test": "assert get_total_number_of_sequences(2,5) == 0 # no such sequence exists",
        "num_ids": 3636,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 23,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2) == 0:\n        return list1[:-1] + list2\n    else:\n        return list1[:-1] + list2\n",
        "test": "assert replace_list([1, 2, 3], [4, 5]) == [1, 2, 4, 5]",
        "num_ids": 1806,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"\") == 0 # empty string",
        "num_ids": 1207,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 26,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root.is_integer():\n        return (int(root) + 1) ** 2\n    else:\n        return int(math.ceil(root)) ** 2\n",
        "test": "assert next_Perfect_Square(4) == 9",
        "num_ids": 1565,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize the left and right maximums as the first element\n    left_max = arr[0]\n    right_max = arr[-1]\n    \n    # Initialize the left and right maximums for each element in the array\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            left_max = max(left_max, arr[i] + left_max)\n        else:\n            right_max = max(right_max, arr[i] + right_max)\n            \n    # Return the maximum sum of a bitonic subsequence\n    return max(left_max, right_max)\n",
        "test": "assert max_sum([1, 2, 3, 1, 2, 3]) == 11 # bitonic sequence",
        "num_ids": 4543,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 22,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    else:\n        guess = number/2\n        while True:\n            new_guess = (guess + number/guess)/2\n            if abs(new_guess - guess) < 0.00001:\n                return new_guess\n            guess = new_guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 2188,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for L in range(2, n+1):\n        for i in range(n-L+1):\n            j = i + L - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]",
        "test": "assert lps('a') == 1",
        "num_ids": 2915,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n",
        "test": "assert harmonic_sum(4) == 2.083  # harmonic sum of 3 is 1.0 + 1/2 + 1/3 + 1/4",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 1987,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Counts the occurrences of x in tup.\n\n    Args:\n        tup: A tuple of elements.\n        x: An element to count in tup.\n\n    Returns:\n        An integer representing the number of occurrences of x in tup.\n    \"\"\"\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3,4,5), 6) == 0 ",
        "num_ids": 2063,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(element)\n        new_lst.append(lst[i])\n    return new_lst\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]",
        "num_ids": 2091,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n",
        "test": "assert convert((-1-1j)) == (sqrt(2), -3*pi/4)",
        "num_ids": 2171,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 'hello', 2.5, 3]) == 2  # Test case 1: mixed list",
        "num_ids": 1446,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([1,2,3], 2) == [(1,1), (1,2), (1,3), (2,2), (2,3), (3,3)] # check combinations of length 2",
        "num_ids": 4075,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize a counter for prime numbers\n    count = 0\n    \n    # Check each number from 2 up to n-1\n    for num in range(2, n):\n        # Assume the number is prime\n        is_prime = True\n        \n        # Check if the number is divisible by any number from 2 up to its square root\n        for div in range(2, int(num ** 0.5) + 1):\n            if num % div == 0:\n                # If it is divisible, it's not prime\n                is_prime = False\n                break\n        \n        # If it's prime, increment the counter\n        if is_prime:\n            count += 1\n    \n    # Return the final count\n    return count\n",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 2285,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert swap_numbers(1, 2) == (2, 1)",
        "num_ids": 1274,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    \n    if max_tup1 > max_tup2:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert maximize_elements((1,2,3),(3,2,1)) != (1,3) # should not return (1,3)",
        "num_ids": 2784,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 7\n    else:\n        i = 2\n        prime_count = 2\n        while prime_count < n:\n            if is_prime(i):\n                if is_prime(int(str(i) + str(i+1))) and is_prime(int(str(i) + str(i+2))):\n                    prime_count += 1\n            i += 1\n        return i-1\n\ndef is_prime(num):\n    '''\n    Returns True if the given number is prime, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert newman_prime(2) == 7",
        "num_ids": 2733,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(0)\n        except IndexError:\n            result.append(0)\n    return tuple(result)\n",
        "test": "assert division_elements((10, 5, 2), (2, 2, 1)) == (5.0, 2.5, 2.0)",
        "num_ids": 3089,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 2901,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 21,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def dog_age(h_age):\n    '''\n    This function calculates a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return \"Invalid input\"\n    elif h_age <= 1:\n        return h_age * 15\n    elif h_age <= 2:\n        return 15 + (h_age - 1) * 9\n    elif h_age <= 3:\n        return 24 + (h_age - 2) * 6\n    elif h_age <= 4:\n        return 30 + (h_age - 3) * 4\n    elif h_age <= 5:\n        return 34 + (h_age - 4) * 3\n    else:\n        return 37 + (h_age - 5)\n",
        "test": "assert dog_age(1) == 15 # for 1 human year, dog's age is 15 years",
        "num_ids": 1410,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        raise ValueError(\"Input must be a list\")\n    if not isinstance(step, int):\n        raise ValueError(\"Step must be an integer\")\n    if step < 1:\n        raise ValueError(\"Step must be a positive integer\")\n    if len(S) == 0:\n        return []\n    result = []\n    sublist = []\n    for i, x in enumerate(S):\n        sublist.append(x)\n        if (i+1) % step == 0:\n            result.append(sublist)\n            sublist = []\n    if len(sublist) > 0:\n        result.append(sublist)\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 3017,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert lateralsurface_cube(0) == 0 # testing with an example cube of side length 0",
        "num_ids": 1315,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 1809,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1591,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97 # small letter a",
        "num_ids": 952,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0 # should return 0 as there are no even numbers at even positions",
        "num_ids": 2742,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Returns the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += (2*i)**5\n    return total\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1798,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1,2), (3,4), (5,6)]) == [2, 4, 6]",
        "num_ids": 2292,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((1,2,3),(4,5,6)) == (-3,-3,-3)",
        "num_ids": 2561,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Initialize sum variable to 0\n    sum = 0\n    \n    # Iterate through even index values\n    for k in range(0, n+1, 2):\n        # Calculate binomial coefficient for the current index k\n        coeff = math.comb(n, k)\n        \n        # Add the current coefficient to the sum\n        sum += coeff\n        \n    # Return the sum of even index binomial coefficients\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 2431,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(1,1) == 3.14159",
        "num_ids": 1631,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def dict_filter(dict_obj, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict_obj.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({'a': 2, 'b': 5, 'c': 1}, 3) == {'b': 5}",
        "num_ids": 2348,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements(()) == 0 # Empty tuple",
        "num_ids": 2313,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (19 * n - 1) // 18\n",
        "test": "assert is_num_decagonal(1) == 1 ",
        "num_ids": 1434,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 2284,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set from the list\n    unique_set = set(test_list)\n    \n    # if the length of the set is equal to the length of the list,\n    # all elements are unique\n    if len(unique_set) == len(test_list):\n        return True\n    \n    # otherwise, not all elements are unique\n    return False\n",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 1564,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sub = []\n    for i in range(len(nums1)):\n        sub.append(nums1[i] - nums2[i])\n    return sub\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]",
        "num_ids": 2033,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def validate(n):\n    # converting integer to string\n    str_n = str(n)\n\n    # dictionary to store frequency of each digit\n    freq_dict = {}\n\n    # loop to calculate frequency of each digit\n    for digit in str_n:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n\n    # loop to check if frequency of each digit is less than or equal to the digit itself\n    for digit in str_n:\n        if int(digit) < freq_dict[digit]:\n            return False\n\n    return True\n",
        "test": "assert validate(123456) == True  # all digits have frequency 1",
        "num_ids": 1722,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item != element:\n            return False\n    return True\n",
        "test": "assert check_element([1,1,1,1],1) == True",
        "num_ids": 1584,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?:b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('abbb') # test for three 'b' characters",
        "num_ids": 1506,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Calculate the sum of the original array and store it in sum_original\n    sum_original = sum(a)\n    \n    # Initialize the maximum sum variable\n    max_sum = float('-inf')\n    \n    # Loop through each repeat of the array\n    for i in range(k):\n        # Initialize the current sum variable\n        current_sum = 0\n        \n        # Loop through each element in the array\n        for j in range(n):\n            # Add the current element to the current sum\n            current_sum += a[j]\n            \n            # Check if the current sum is greater than the maximum sum\n            if current_sum > max_sum:\n                # Update the maximum sum\n                max_sum = current_sum\n        \n        # If the current sum is greater than 0, it means that the sum of the remaining repeats \n        # of the array will be greater than the maximum sum found so far. In this case, we can exit the loop.\n        if current_sum > 0:\n            break\n        \n        # If the current sum is less than 0, it means that the maximum sum of the array \n        # may be in the next repeat of the array. In this case, we can continue the loop.\n        elif current_sum < 0:\n            continue\n        \n        # If the current sum is 0, it means that the sum of the remaining repeats \n        # of the array will be less than the maximum sum found so far. In this case, we can exit the loop.\n        else:\n            return max_sum + sum_original * (k - i - 1)\n    \n    # Calculate the remaining sum of the array and add it to the maximum sum found so far\n    remaining_sum = max(0, sum_original - max_sum)\n    \n    # Calculate the maximum sum of the modified array by repeating the array k times\n    max_sum_repeated = max_sum + remaining_sum * k\n    \n    return max_sum_repeated\n",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -10, -4, -7, -2, -5], 3, 1) == -1",
        "num_ids": 4092,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 2\n    while n > 0:\n        sum += i ** 2\n        i += 2\n        n -= 1\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 2201,
        "indeed": true
    },
    {
        "number": 290,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 2701,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color\n    for the given fence with n posts and k colors.\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k * k\n    else:\n        dp = [0] * n\n        dp[0] = k\n        dp[1] = k * k\n        for i in range(2, n):\n            dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n\n        return dp[n - 1]\n",
        "test": "assert count_no_of_ways(3, 2) == 6",
        "num_ids": 3080,
        "indeed": true
    },
    {
        "number": 292,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(10,3) == 3",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Returns the length of the hypotenuse of a right-angled triangle given its width (w) and height (h).\n    \"\"\"\n    return math.sqrt(w**2 + h**2)\n",
        "test": "assert otherside_rightangle(3, 4) == 5 ",
        "num_ids": 1572,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1811,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12",
        "num_ids": 2341,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count",
        "test": "assert get_Inv_Count([]) == 0  # returns correct result for an empty array",
        "num_ids": 3433,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n",
        "test": "assert flatten_list([1, 2, [3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 2213,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[0]] = max(max_dict[item[0]], item[1])\n    return sum(max_dict.values())\n",
        "test": "assert max_aggregate([('A', 0), ('B', 0), ('C', 0), ('D', 0), ('E', 0)]) == 0",
        "num_ids": 2860,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        binary = bin(i)[2:]\n        if len(binary) < 2*n:\n            binary = '0'*(2*n-len(binary)) + binary\n        first_n = binary[:n]\n        last_n = binary[n:]\n        if sum(int(i) for i in first_n) == sum(int(i) for i in last_n):\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(0) == 1  # Only one binary sequence of length 0 exists, which is an empty string. ",
        "num_ids": 4600,
        "indeed": true
    },
    {
        "number": 301,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "test": "assert dict_depth({'a':1, 'b':2, 'c':3}) == 1 # check for a single-level dictionary",
        "num_ids": 1501,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    # Calculate the effective rotation after considering the ranges\n    effective_rotation = rotations % n\n    # Calculate the effective index after considering the ranges\n    effective_index = (index + effective_rotation) % n\n    # Find the element at the effective index\n    element = arr[effective_index]\n    return element",
        "test": "assert find_Element([1,2,3,4,5],(0,5),5,0) == 1",
        "num_ids": 2249,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p')\n    p_words = [word for word in words if pattern.match(word)]\n    if len(p_words) < 2:\n        return None\n    return p_words[:2]\n",
        "test": "assert start_withp(['peach', 'pear', 'plum', 'pecan']) == ['peach', 'pear']",
        "num_ids": 2113,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize two variables to store the maximum sum including and excluding the kth element\n    max_sum_including_k = a[index] + a[k]\n    max_sum_excluding_k = a[index]\n    \n    # Loop through the elements between index+1 and k-1\n    for i in range(index+1, k):\n        # Update the maximum sum including and excluding the kth element\n        if a[i] > a[k]:\n            max_sum_including_k += a[i] - a[k]\n        else:\n            max_sum_including_k += a[i]\n            \n        if a[i] > a[index]:\n            max_sum_excluding_k += a[i] - a[index]\n        else:\n            max_sum_excluding_k += a[i]\n            \n    # Return the maximum sum\n    return max(max_sum_including_k, max_sum_excluding_k)\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 4) == 12 # subsequence is [3, 4, 5], sum is 12",
        "num_ids": 4993,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 35,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n]\n",
        "test": "assert colon_tuplex((1,2,3,4,5), 5, 5) == ()",
        "num_ids": 2271,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort both lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize an empty list to store the products\n    products = []\n    \n    # Loop through the lists and multiply the first N factors from each list\n    for i in range(N):\n        products.append(nums1[i] * nums2[i])\n    \n    # Sort the products list in descending order\n    products.sort(reverse=True)\n    \n    # Return the N largest products\n    return products[:N]\n",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 0) == [] ",
        "num_ids": 2962,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def maximum(a, b):\n    '''\n    Returns the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(1,2) == 2",
        "num_ids": 1032,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 1314,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in the binary representation of n.\n    \"\"\"\n    # Find the left most unset bit by counting the number of times we need to shift\n    # a 1 to the left until we hit a 0 bit.\n    shift = 0\n    while n & (1 << shift):\n        shift += 1\n    \n    # Set the left most unset bit by shifting a 1 to the left by the number of times\n    # we shifted above, and then ORing it with the original number.\n    return n | (1 << shift)\n",
        "test": "assert set_left_most_unset_bit(0b0000) == 0b0001 # check with binary number 0000",
        "num_ids": 2383,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as arguments and returns its volume.\n    '''\n    vol = (1/3) * math.pi * r**2 * h\n    return vol\n",
        "test": "assert volume_cone(0,5) == 0",
        "num_ids": 1650,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2\n    highest_power = 1\n    \n    # While the highest power of 2 is less than n, multiply it by 2 to get the next higher power\n    while highest_power <= n:\n        highest_power *= 2\n    \n    # Divide the highest power by 2 to get the highest power of 2 that is less than or equal to n\n    highest_power //= 2\n    \n    # Return the highest power of 2\n    return highest_power\n",
        "test": "assert highest_Power_of_2(8) == 8 ",
        "num_ids": 1698,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 1274,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list\n",
        "test": "assert add_string([], \"{}\") == [] ",
        "num_ids": 2085,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result = {}\n    \n    # Iterate through the lists and add them to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n        \n    return result\n",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 3115,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1836,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1,2,3], [4,5], [6,7,8,9]]) == [6,7,8,9]",
        "num_ids": 2678,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct(()) == True ",
        "num_ids": 1430,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through the string to find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"abcdabcde\") == \"e\"",
        "num_ids": 2239,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"algorithm\") == False",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # create a list with the three numbers\n    nums = [a, b, c]\n    # sort the list\n    nums.sort()\n    # return the middle element of the sorted list\n    return nums[1]\n",
        "test": "assert median_numbers(3, 2, 1) == 2",
        "num_ids": 1723,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        while num > 0:\n            total += num % 10\n            num //= 10\n        result.append(total)\n    return result\n",
        "test": "assert sum_of_digits([123,456,789]) == [6, 15, 24] # check if the function returns the correct output for a list of 3-digit numbers",
        "num_ids": 2489,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result\n",
        "test": "assert bitwise_xor((1,0,1,0),(0,1,1,0)) == (1,1,0,0)",
        "num_ids": 2877,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if isinstance(item, tuple):\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return len(freq)\n",
        "test": "assert extract_freq([(1,2), (2,3), (3,4), (1,2)]) == 3 # only 3 unique tuples",
        "num_ids": 2484,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate through each tuple element in the input tuples\n    for i in range(len(test_tup1)):\n        # Check if the tuple element is a nested tuple\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            # If both tuple elements are nested tuples, recursively call the function\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            # If the tuple elements are not nested tuples, add them and append the result to the list\n            result.append(test_tup1[i] + test_tup2[i])\n\n    # Return the result as a tuple\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))",
        "num_ids": 3357,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minimum(a, b):\n    '''\n    This function finds the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(3,4) == 3 # True",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex\n",
        "test": "assert check_tuplex(('a','b','c'), 'b') == True # check if 'b' is in the tuple ('a','b','c')",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 34,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert find_Parity(3) == True",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Given a positive integer n, return the next bigger number by rearranging its digits.\n    \"\"\"\n    # Convert n to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Find the index of the first digit that is less than the previous digit\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i-1]:\n        i -= 1\n\n    # If no such digit found, the number is already the largest possible\n    if i == 0:\n        return -1\n\n    # Find the index of the smallest digit among the digits to the right of the selected digit\n    j = i\n    while j+1 < len(digits) and digits[j+1] > digits[i-1]:\n        j += 1\n\n    # Swap the selected digit with the smallest digit to its right\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n\n    # Reverse the digits to the right of the selected digit\n    digits[i:] = digits[len(digits)-1:i-1:-1]\n\n    # Convert the list of digits back to an integer\n    next_bigger = int(''.join(str(d) for d in digits))\n\n    # Return the next bigger number\n    return next_bigger\n",
        "test": "assert rearrange_bigger(9999) == -1",
        "num_ids": 3728,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for n1 in nums1:\n        for n2 in nums2:\n            pairs.append((n1, n2, n1+n2))  # (num1, num2, sum)\n    pairs.sort(key=lambda x: x[2])  # sort by sum of pair\n    return [(p[0], p[1]) for p in pairs[:k]]\n",
        "test": "assert k_smallest_pairs([1, 3, 5], [], 3) == [] # Testcase 4",
        "num_ids": 3905,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(10,20), (30,40), (50,60)]) == 2000",
        "num_ids": 2735,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize min_val variable with None\n    min_val = None\n    \n    # Iterate through the list elements\n    for element in listval:\n        # Check if the element is numeric\n        if isinstance(element, (int, float)):\n            # If min_val is None or element is smaller than min_val\n            if min_val is None or element < min_val:\n                min_val = element\n    \n    # Return the minimum value found\n    return min_val\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1  # test case 4: numeric list",
        "num_ids": 1779,
        "indeed": true
    },
    {
        "number": 411,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0] + ''.join(w.capitalize() for w in words[1:])\n    return camel_case\n",
        "test": "assert snake_to_camel('') == ''",
        "num_ids": 1840,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2 == 0]\n",
        "test": "assert remove_odd([]) == []",
        "num_ids": 1696,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the list is empty\n    if not list1:\n        return None\n\n    # check if the given index is valid for the list\n    if n >= len(list1):\n        return None\n\n    # extract the nth element from the list of tuples\n    return list1[n][1]\n",
        "test": "assert extract_nth_element([('apple', 1), ('banana', 2), ('orange', 3)], 2) == 3",
        "num_ids": 2409,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def overlapping(list1,list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False",
        "num_ids": 1562,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = -float('inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return max1 * max2\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20 # positive numbers",
        "num_ids": 2283,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elements = set()\n    for tpl in Input:\n        first_elements.add(tpl[0])\n    return list(first_elements)\n",
        "test": "assert group_tuples([]) == []",
        "num_ids": 2477,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == \"elderberry\" # returns \"elderberry\" as it has the maximum length",
        "num_ids": 2035,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def round_and_sum(list1):\n    rounded_list = [round(x) for x in list1]  # round each number in the list\n    total_sum = sum(rounded_list)  # calculate the sum of the rounded numbers\n    result = total_sum * len(list1)  # multiply the sum by the length of the list\n    return result\n",
        "test": "assert round_and_sum([1, 2, 3]) == 18.0 # rounded to [1, 2, 3] and multiplied by 3",
        "num_ids": 2330,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function finds the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        sum += num ** 3\n        count += 1\n        num += 2\n    return sum\n",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 2136,
        "indeed": true
    },
    {
        "number": 421,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'  # delimiter can be changed as per requirement\n    concatenated_string = delimiter.join(str(i) for i in test_tup)\n    return concatenated_string\n",
        "test": "assert concatenate_tuple(('abc',)) == 'abc'",
        "num_ids": 1775,
        "indeed": true
    },
    {
        "number": 422,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    average = sum_of_cubes / n\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1.0",
        "num_ids": 1696,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        if isinstance(tup, str):\n            result.append(tup[-1])\n        elif isinstance(tup, tuple):\n            result.append(extract_rear(tup))\n    return tuple(result)\n",
        "test": "assert extract_rear((\"hello\", \"world\")) == (\"o\", \"d\")",
        "num_ids": 1954,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1,2,3], [4,5,6], [7,8,9]], 5) == 1 # check for element 5 in list",
        "num_ids": 2423,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # create an empty list to store the odd numbers\n    odd_nums = []\n    # loop through the input list\n    for num in nums:\n        # check if the number is odd\n        if num % 2 == 1:\n            # if it is, add it to the odd_nums list\n            odd_nums.append(num)\n    # return the list of odd numbers\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 1654,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use regex to split the input string into year, month, and day components\n    year, month, day = re.split('-', dt)\n    # Combine the components in the desired order and return as a string\n    return '{}-{}-{}'.format(day, month, year)\n",
        "test": "assert change_date_format(\"2020-12-31\") == \"31-12-2020\"",
        "num_ids": 2538,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given list using the shell sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list",
        "test": "assert shell_sort([5, 3, 1, 4, 2]) == [1, 2, 3, 4, 5]",
        "num_ids": 2969,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = tuple(x and y for x, y in zip(test_tup1, test_tup2))\n    return result\n",
        "test": "assert and_tuples((1,0,1), (1,1,0)) == (1,0,0)",
        "num_ids": 1916,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2 - 4*a*c\n    if d < 0:\n        raise ValueError(\"No real solution for the directrix.\")\n    elif d == 0:\n        x = -b / (2*a)\n        return \"x = {}\".format(x)\n    else:\n        x1 = (-b - d**0.5) / (2*a)\n        x2 = (-b + d**0.5) / (2*a)\n        return \"x = {} or {}\".format(x1, x2)\n",
        "test": "assert parabola_directrix(1, 0, 1) == \"x=0\"",
        "num_ids": 2401,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1,2,3], [3,4,5]) == True",
        "num_ids": 1542,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median\n",
        "test": "assert median_trapezium(1, 1, 1) == 1",
        "num_ids": 1612,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element >= number:\n            return False\n    return True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 1) == False",
        "num_ids": 1550,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b+'  # matches 'a' followed by zero or more word characters followed by one or more 'b's\n    result = re.match(pattern, text)\n    return result is not None\n",
        "test": "assert text_match_one(\"abb\") # true",
        "num_ids": 1359,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nos = []\n    for num in list1:\n        if num < 0:\n            negative_nos.append(num)\n    return negative_nos\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5, -6]) == [-2, -4, -6]",
        "num_ids": 2034,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] == test_list[j][::-1]) and (test_list[j] == test_list[i][::-1]):\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (3, 4), (5, 6), (7, 8)]) == 0  # no bidirectional pairs",
        "num_ids": 3017,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # Initialize an empty string to store the final integer\n    result = ''\n    \n    # Iterate over each element in the list\n    for i in L:\n        # Convert the integer to a string and concatenate it to the result string\n        result += str(i)\n    \n    # Convert the result string to an integer and return it\n    return int(result)\n",
        "test": "assert multiple_to_single([1, 2, 3]) == 123",
        "num_ids": 1620,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = ['really', 'very', 'extremely', 'exceedingly', 'incredibly', 'amazingly']\n    for adverb in adverb_list:\n        if adverb in text.lower():\n            position = text.lower().find(adverb)\n            return f\"The first adverb is {adverb} and its position is {position}.\"\n    return \"No adverb found.\"\n",
        "test": "assert find_adverb_position(\"He drives very fast.\") == 4",
        "num_ids": 2962,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)\n",
        "test": "assert positive_count([-1, -2, -3, -4, -5]) == 0",
        "num_ids": 1986,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # initialize the maximum negative value to None\n    max_neg = None\n    # iterate over the list\n    for num in list1:\n        # if the number is negative and greater than the current max_neg, update max_neg\n        if num < 0 and (max_neg is None or num > max_neg):\n            max_neg = num\n    # return the maximum negative value found\n    return max_neg\n",
        "test": "assert largest_neg([1, 2, 3, -4, -5, 6, -7, 8]) == -4  # test case 1",
        "num_ids": 2169,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        else:\n            result.append(tup)\n    return result\n",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]",
        "num_ids": 2706,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = tuple(x*y for x,y in zip(test_tup1, test_tup2))\n    return result_tup",
        "test": "assert index_multiplication((2,3,4), (5,6,7)) == (10, 18, 28)",
        "num_ids": 2409,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 38,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    result = {}\n    for i in lst:\n        if i in count_dict:\n            result[i] = count_dict[i]\n    return result",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,3,5]) == {1:1, 3:1, 5:1}",
        "num_ids": 2992,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 1695,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def perrin(n):\n    \"\"\"\n    Returns the nth Perrin number.\n    \"\"\"\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return perrin(n-1) + perrin(n-2)\n\ndef cal_sum(n):\n    \"\"\"\n    Calculates the sum of the first n Perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return perrin(0)\n    else:\n        total = perrin(0) + perrin(1)\n        for i in range(2, n):\n            total += perrin(i)\n        return total\n",
        "test": "assert cal_sum(1) == 3",
        "num_ids": 1916,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for string in str:\n        if len(string) == l:\n            extracted_str.append(string)\n    return extracted_str\n",
        "test": "assert extract_string(['hello', 'world', 'python'], 0) == [] # checking if the function returns an empty list when the specified size is 0",
        "num_ids": 2059,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_whitespaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 1278,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 80) == 20 # when actual cost is higher than sale amount",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n",
        "test": "assert sumofFactors(10) == 12",
        "num_ids": 1887,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # create a regular expression pattern to match a word containing 'z'\n    pattern = r'\\b\\w*z\\w*\\b'\n    # search for all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # print the matches\n    print(matches)\n",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog\") == None # no 'z' in the text",
        "num_ids": 1892,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True",
        "num_ids": 1817,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\"]) == [\"olleh\", \"dlrow\"]",
        "num_ids": 1873,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 32,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list of lists as input and returns the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_list = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_list = sublist\n    return min_list\n",
        "test": "assert Find_Min([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]) == [6]",
        "num_ids": 2620,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(4,5) == 20",
        "num_ids": 1095,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)",
        "test": "assert remove_uppercase(\"\") == \"\"",
        "num_ids": 1207,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 2120,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2 # count of uppercase letters in \"Hello World\" is 2",
        "num_ids": 1423,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    comb_list = []\n    for i in range(1, len(lst)+1):\n        for j in combinations(lst, i):\n            comb_list.append(j)\n    return comb_list\n",
        "test": "assert combinations_list([]) == []",
        "num_ids": 2352,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6  # [2, 3] is the maximum product subarray",
        "num_ids": 3078,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return False\n    for key in dict:\n        if dict[key] != n:\n            return False\n    return True\n",
        "test": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True",
        "num_ids": 2117,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}\n",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 2327,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    if not arr:\n        return None\n\n    n = len(arr)\n    max_product = 1\n\n    for i in range(n):\n        for j in range(i+1, n):\n            sub_seq = arr[i:j+1]\n            if is_increasing(sub_seq):\n                product = 1\n                for num in sub_seq:\n                    product *= num\n                max_product = max(max_product, product)\n\n    return max_product\n\n\ndef is_increasing(seq):\n    '''\n    Helper function to check if a sequence is increasing or not.\n    '''\n\n    for i in range(len(seq)-1):\n        if seq[i] > seq[i+1]:\n            return False\n    return True\n",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 3571,
        "indeed": true
    },
    {
        "number": 470,
        "max_answer_num": 35,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i] + test_tup[i+1])\n    return tuple(res)\n",
        "test": "assert add_pairwise((1,2,3,4)) == (3,5,7)",
        "num_ids": 2037,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n\n    return product\n",
        "test": "assert find_remainder([3, 2, 1], 6) == 0",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    # Get the sorted list to check for consecutive numbers\n    sorted_list = sorted(l)\n    \n    # Initialize a variable to keep track of the previous number in the sorted list\n    prev_num = sorted_list[0]\n    \n    # Iterate through the sorted list starting from the second number\n    for num in sorted_list[1:]:\n        # If the current number is not consecutive to the previous number, return False\n        if num != prev_num + 1:\n            return False\n        \n        # Otherwise, update the previous number to the current number\n        prev_num = num\n    \n    # If all the numbers in the list are consecutive, return True\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True ",
        "num_ids": 2027,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for element in test_list1:\n        if element in test_list2:\n            intersection.append(element)\n    return tuple(intersection)\n",
        "test": "assert tuple_intersection(('apple', 'banana', 'orange'), ('orange', 'grape', 'banana')) == ('banana', 'orange')",
        "num_ids": 2948,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch,newch)\n    return new_str\n",
        "test": "assert replace_char(\"hello\", \"l\", \"z\") == \"hezzo\"",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n",
        "test": "assert sort_counter({'a': 1, 'b': 2, 'c': 3}) == {'c': 3, 'b': 2, 'a': 1}",
        "num_ids": 2677,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        return max(nums) + min(nums)\n",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6 # should return 6",
        "num_ids": 1859,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n",
        "test": "assert remove_lowercase(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\") == \"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\"",
        "num_ids": 1493,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 38,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns its first digit.\n    '''\n    # Convert the number to string and extract the first character\n    first_digit = str(n)[0]\n    # Convert the first character back to integer and return it\n    return int(first_digit)\n",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 1211,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2 != 0]\n",
        "test": "assert Split([]) == []",
        "num_ids": 1615,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n",
        "test": "assert difference(0) == 0 # for n=0, the difference is 0",
        "num_ids": 1651,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2!=0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1, 2, 3, 4], 4) == 4 # All pairs have odd xor value",
        "num_ids": 2333,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n",
        "test": "assert toggle_string(\"Hello World\") == \"hELLO wORLD\"",
        "num_ids": 1560,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # converting numbers into string for iteration\n    num1 = str(n1)\n    num2 = str(n2)\n    \n    # finding the length of the smallest number\n    min_length = len(num1) if len(num1) < len(num2) else len(num2)\n    \n    # initializing sum variable\n    difference_sum = 0\n    \n    # iterating over each digit of the numbers\n    for i in range(min_length):\n        difference = abs(int(num1[i]) - int(num2[i]))\n        difference_sum += difference\n    \n    # adding the remaining digits of the larger number\n    if len(num1) > len(num2):\n        for i in range(min_length, len(num1)):\n            difference_sum += int(num1[i])\n    elif len(num1) < len(num2):\n        for i in range(min_length, len(num2)):\n            difference_sum += int(num2[i])\n    \n    return difference_sum\n",
        "test": "assert digit_distance_nums(123, 456) == 9",
        "num_ids": 2892,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through each element of the list\n    for i in range(size):\n        # Add the current element to the current sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the maximum sum,\n        # update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum is negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the maximum sum\n    return max_sum\n",
        "test": "assert max_sub_array_sum([10, 20, 30, 40, 50], 5) == 150 # all positive elements",
        "num_ids": 3117,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the combined tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    \n    # Convert the set back to a tuple and sort it\n    sorted_tup = tuple(sorted(unique_set))\n    \n    # Return the sorted tuple\n    return sorted_tup\n",
        "test": "assert union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)",
        "num_ids": 2686,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1,2,3], [4,5], [6,7,8,9]]) == 4",
        "num_ids": 2467,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'  # regular expression pattern to match text between quotation marks\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert extract_values('') == []",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3], 3) == 3",
        "num_ids": 1912,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 1343,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 1417,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 1547,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert empty_list(0) == [] # test for length = 0",
        "num_ids": 1005,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['cat', 'dog', 'apple'], ['banana', 'orange', 'grape']]) == [['apple', 'cat', 'dog'], ['banana', 'grape', 'orange']]",
        "num_ids": 2641,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] # no duplicates in the list",
        "num_ids": 2296,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1,2,3,4]) == 24",
        "num_ids": 2022,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    side_area = 2 * math.pi * r * h\n    circle_area = 2 * math.pi * r**2\n    total_area = side_area + circle_area\n    return total_area\n",
        "test": "assert surfacearea_cylinder(0,1) == 0 # for r=0 and h=1",
        "num_ids": 2043,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Traverse the elements of A and B\n    for i in range(len(A)-len(B)+1):\n        # Check if B is a sublist of A starting from index i\n        if A[i:i+len(B)] == B:\n            return True\n    # If B is not a sublist of A, return False\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3,4,5], [6]) == False",
        "num_ids": 2062,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return last_Digit_Factorial(n-1)\n\n    # Testing the function\nn = 5\nprint(last_Digit_Factorial(n))  # Output: 120\n\nn = 10\nprint(last_Digit_Factorial(n))  # Output: 3628800\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        return \"Lists must be of equal length\"\n    else:\n        flat_list = []\n        for i in range(len(list1)):\n            flat_list.append(list1[i])\n            flat_list.append(list2[i])\n            flat_list.append(list3[i])\n        return flat_list\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9] ",
        "num_ids": 2804,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)\n",
        "test": "assert find_dissimilar((1,2,3,4,5), (5,4,3,2,1)) == ()",
        "num_ids": 2660,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define a function to check if a given element is even\n    def is_even(num):\n        return num % 2 == 0\n    \n    # Create an empty list to store the even elements\n    even_list = []\n    \n    # Loop through each element in the tuple\n    for element in test_tuple:\n        # Check if the element is a tuple\n        if type(element) == tuple:\n            # Loop through each element in the nested tuple\n            for num in element:\n                # Check if the element is even\n                if even_fnc(num):\n                    # Append the even element to the even_list\n                    even_list.append(num)\n        else:\n            # Check if the element is even\n            if even_fnc(element):\n                # Append the even element to the even_list\n                even_list.append(element)\n    \n    # Return the even_list\n    return tuple(even_list)",
        "test": "assert even_ele((), lambda x: x%2==0) == ()",
        "num_ids": 3108,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b**2 + b*s*4\n",
        "test": "assert surface_Area(0,4) == 0.0 # check for base=0, height=4",
        "num_ids": 1758,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 36,
        "max_test_num": 3,
        "total_product": 380,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 1356,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # base cases\n    if num <= 1:\n        return 1\n    \n    # initialize a list to store the catalan numbers\n    catalan = [0] * (num + 1)\n    \n    # compute catalan numbers using the recursive formula\n    catalan[0] = 1\n    catalan[1] = 1\n    \n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i-j-1]\n            \n    # return the nth catalan number\n    return catalan[num]\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1728,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # use regular expression to find adverbs ending with 'ly'\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    \n    # find the first adverb ending with 'ly'\n    first_adverb = None\n    for adverb in adverbs:\n        if first_adverb is None or adverb < first_adverb:\n            first_adverb = adverb\n    \n    # find the positions of the first adverb in the text\n    if first_adverb is not None:\n        positions = [match.start() for match in re.finditer(first_adverb, text)]\n    else:\n        positions = []\n    \n    # return the first adverb and its positions\n    return first_adverb, positions\n",
        "test": "assert find_adverbs(\"I ran quickly.\") == (\"quickly\", [6])",
        "num_ids": 2622,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return sorted(min_heap, reverse=True)\n",
        "test": "assert expensive_items([], 0) == [] # empty list",
        "num_ids": 2675,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    new_list = second_part + first_part\n    return new_list\n",
        "test": "assert split_Arr([1,2,3,4,5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 2291,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 1340,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) - min(nums)\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1734,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num**0.5 == int(num**0.5):\n            squares.append(num)\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9] # Test case 1",
        "num_ids": 1917,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    rect = cmath.rect(x, y)\n    return round(rect.real, 2), round(rect.imag, 2)\n",
        "test": "assert polar_rect(0, 0) == (0, 0)",
        "num_ids": 1677,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        print(\"List is empty!\")\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n    return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1772,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 36,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return (n * binomial_Coeff(n-1, k-1)) // k\n",
        "test": "assert binomial_Coeff(5,3) == 10 # binomial coefficient of (5,3) is 10",
        "num_ids": 2851,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the IP address into a list of its octets\n    octets = ip.split('.')\n    # Iterate through the octets and remove leading zeroes using regular expressions\n    for i in range(len(octets)):\n        octets[i] = re.sub(r'^0+', '', octets[i])\n        # If the octet is empty after removing leading zeroes, set it to '0'\n        if octets[i] == '':\n            octets[i] = '0'\n    # Join the octets back into a string and return the result\n    return '.'.join(octets)\n",
        "test": "assert removezero_ip(\"01.02.03.04\") == \"1.2.3.4\"",
        "num_ids": 2378,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return None\n    else:\n        return even - odd\n",
        "test": "assert diff_even_odd([2, 1, 4, 3, 6, 5]) == 1  # diff between 2 and 3 is 1",
        "num_ids": 2423,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert strings to lists of integers\n    str1_list = [int(i) for i in str1]\n    str2_list = [int(i) for i in str2]\n    \n    # Count the number of swaps required\n    count = 0\n    for i in range(len(str1_list)):\n        if str1_list[i] != str2_list[i]:\n            for j in range(i+1, len(str1_list)):\n                if str1_list[j] == str2_list[i]:\n                    str1_list[i], str1_list[j] = str1_list[j], str1_list[i]\n                    count += 1\n                    break\n    return count\n",
        "test": "assert min_Swaps('10','10') == 0 # same string",
        "num_ids": 3411,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "test": "assert tuple_size((1,2)) == sys.getsizeof(1) + sys.getsizeof(2)",
        "num_ids": 1625,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 33,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n\n    if not arr1:\n        return arr2[k-1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    idx1 = min(k//2, len(arr1)) - 1\n    idx2 = k - idx1 - 2\n\n    if arr1[idx1] < arr2[idx2]:\n        return find_kth(arr1[idx1+1:], arr2, k-idx1-1)\n    else:\n        return find_kth(arr1, arr2[idx2+1:], k-idx2-1)\n",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 8) == 8  # kth element is 8",
        "num_ids": 4157,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 39,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_len = len(num_str)\n    sum = 0\n    for digit in num_str:\n        sum += int(digit) ** num_len\n    return sum == number\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 2150,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def sum_average(n):\n    '''\n    Calculate the sum and average of the first n natural numbers.\n    '''\n    if n <= 0:\n        return 0, 0\n    else:\n        total = n * (n + 1) // 2\n        avg = total / n\n        return total, avg\n",
        "test": "assert sum_average(5) == (15, 3) # check for n = 5 ",
        "num_ids": 1804,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if it is even, else returns False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Creating a dictionary to store the frequency of characters in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Iterating through the string and returning the first repeated character\n    for char in str1:\n        if char_freq[char] > 1:\n            return char\n    \n    # If no character is repeated, returning None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 1859,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n        \n    for i in range(1, n+1):\n        if i in ludic:\n            for j in range(i, n+1, i):\n                if j in ludic:\n                    ludic.remove(j)\n    \n    return ludic\n",
        "test": "assert get_ludic(1) == [] # check for n = 1",
        "num_ids": 2562,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    return ' '.join(words[::-1])\n",
        "test": "assert reverse_words(\"\") == \"\"",
        "num_ids": 1411,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 1373,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert radian_degree(0) == 0 # zero degrees is zero radians",
        "num_ids": 1373,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog', 'fox') == ('fox', 16, 19)",
        "num_ids": 2482,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_Number(0) == 1 # first bell number is 1",
        "num_ids": 1858,
        "indeed": true
    },
    {
        "number": 610,
        "max_answer_num": 29,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i != k:\n            new_list.append(list1[i])\n    return new_list\n",
        "test": "assert remove_kth_element([], 0) == []",
        "num_ids": 2321,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_of_nth(test_list, N):\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            max_val = max(max_val, row[N])\n    return max_val\n",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 8",
        "num_ids": 2440,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1,2], [3,4], [5,6]]) == [[1,3,5], [2,4,6]] # test with a list of three sublists",
        "num_ids": 2751,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in test_list:\n        cumulative_sum += i\n    return cumulative_sum\n",
        "test": "assert cummulative_sum([]) == 0",
        "num_ids": 2054,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(sum(num)/len(num))\n    return result\n",
        "test": "assert average_tuple(((1, 2), (3, 4))) == [1.5, 3.5]",
        "num_ids": 2592,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i], )\n    return result\n",
        "test": "assert tuple_modulo((1,2,3),(2,2,2)) == (1,0,1)",
        "num_ids": 2489,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d:\n        return \"Not possible\"\n    elif steps == d:\n        return 1\n    else:\n        return (steps - d) // d + (1 if (steps - d) % d > 0 else 0)\n",
        "test": "assert min_Jumps(5, 5) == 1 # if length is equal to distance, one jump is required",
        "num_ids": 2403,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            result.append(float('inf'))\n        else:\n            result.append(nums1[i]/nums2[i])\n    return result\n",
        "test": "assert div_list([1,2,3],[4,5,6]) == [0.25, 0.4, 0.5]",
        "num_ids": 2626,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    return ''.join([char for char in test_str if not char.isdigit()]) + ''.join(nums)\n",
        "test": "assert move_num(\"a1b2c3\") == \"abc123\"",
        "num_ids": 2029,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def largest_subset(a):\n    # Sort the list in descending order\n    a.sort(reverse=True)\n    # Initialize a list to keep track of the subset of divisible pairs\n    subset = []\n    # Iterate over the sorted list\n    for i in range(len(a)):\n        # Check if the number is divisible by any number in the subset\n        divisible = False\n        for j in range(len(subset)):\n            if a[i] % subset[j] == 0 or subset[j] % a[i] == 0:\n                divisible = True\n                break\n        # If the number is not divisible by any number in the subset, add it to the subset\n        if not divisible:\n            subset.append(a[i])\n    # Return the size of the subset\n    return len(subset)\n",
        "test": "assert largest_subset([]) == 0",
        "num_ids": 3145,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # initialize pointers for both lists\n    i = j = 0\n\n    # initialize variables to keep track of median\n    median = 0\n    count = 0\n\n    # loop through both lists until one of them becomes empty\n    while i < n and j < n:\n        # if the current element of arr1 is smaller or equal to current element of arr2\n        if arr1[i] <= arr2[j]:\n            # increment the median pointer to the current element of arr1\n            median = arr1[i]\n            # increment i to move to the next element of arr1\n            i += 1\n        else:\n            # increment the median pointer to the current element of arr2\n            median = arr2[j]\n            # increment j to move to the next element of arr2\n            j += 1\n\n        # increment the count pointer to keep track of the number of elements in both lists\n        count += 1\n\n        # if the count is equal to n, it means we have found the median\n        if count == n:\n            break\n\n    # if the number of elements is odd, return the median\n    if n % 2 != 0:\n        return median\n    # if the number of elements is even, return the average of the two adjacent elements\n    else:\n        if i < n:\n            return (median + arr1[i]) / 2\n        else:\n            return (median + arr2[j]) / 2\n",
        "test": "assert get_median([1, 3, 5], [2, 4], 3) == 3",
        "num_ids": 4892,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n",
        "test": "assert nth_nums([1, 2, 3, 4], 2) == [1, 4, 9, 16] # Test with squared numbers",
        "num_ids": 2166,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 1010,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 39,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        first_elem = newList[0]\n        last_elem = newList[-1]\n        newList[0] = last_elem\n        newList[-1] = first_elem\n    return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1884,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def triangle_area(r):\n    # The length of the altitude is equal to the radius of the semicircle\n    altitude = r\n\n    # The length of the base is the diameter of the semicircle\n    base = 2 * r\n\n    # Calculate the area using the formula A = (1/2) * base * altitude\n    area = (1/2) * base * altitude\n\n    return area\n",
        "test": "assert triangle_area(0) == 0 # for radius 0, the area of the largest triangle is 0",
        "num_ids": 2468,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 37,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return None\n    \n    if end is None:\n        end = len(array)\n    \n    for i in range(start+1, end):\n        if array[i] - array[i-1] > 1:\n            return array[i-1] + 1\n    \n    return array[-1] + 1\n",
        "test": "assert find_First_Missing([0, 1, 2, 3, 4, 5]) == 6",
        "num_ids": 2742,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 1324,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 1998,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    adjacent_coordinates = [(row-1, col-1), (row-1, col), (row-1, col+1), (row, col-1), (row, col+1), (row+1, col-1), (row+1, col), (row+1, col+1)]\n    return [coord for coord in adjacent_coordinates if 0 <= coord[0] <= 7 and 0 <= coord[1] <= 7]\n",
        "test": "assert adjac((1, 1)) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)] # check the center",
        "num_ids": 2818,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 38,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for i in text:\n        if i == ' ':\n            new_text += '_'\n        elif i == '_':\n            new_text += ' '\n        else:\n            new_text += i\n    return new_text\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 1411,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Use list comprehension to create a new list with all non-zero elements\n    new_list = [num for num in num_list if num != 0]\n    # Use list comprehension again to add zeroes to the end of the new list\n    new_list += [0] * num_list.count(0)\n    return new_list\n",
        "test": "assert move_zero([1, 0, 2, 0, 3, 0]) == [1, 2, 3, 0, 0, 0]",
        "num_ids": 2687,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total += arr[i] ^ arr[j]\n    return total\n",
        "test": "assert pair_xor_Sum([], 0) == 0",
        "num_ids": 2719,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n",
        "test": "assert heap_sort([]) == [] ",
        "num_ids": 1881,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(10, 10) == True ",
        "num_ids": 1615,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # formula to calculate wind chill index\n    wci = 13.12 + 0.6215*t - 11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n    # round the result to the next integer\n    wci = round(wci)\n    return wci\n",
        "test": "assert wind_chill(20, 10) == 7",
        "num_ids": 2350,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['Abc', 'def', 'Ghi', 'jkl', 'Mno']) == 9",
        "num_ids": 1972,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    return re.sub(pattern, '', items)\n",
        "test": "assert remove_parenthesis(\"hello (world)\") == \"hello \"",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = (n * (n + 1)) // 2\n    return nonagonal\n",
        "test": "assert is_nonagonal(0) == 0",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)  # extract words from the text\n    for word in words:\n        if word[0] == 'z' or word[-1] == 'z':\n            continue  # skip words that start or end with 'z'\n        elif 'z' in word:\n            return True  # return True if any word contains 'z' in the middle\n    return False  # no word contains 'z' in the middle\n",
        "test": "assert text_match_wordz_middle(\"Fazed by the aztec's treazes.\") == True",
        "num_ids": 1948,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    k = k - 1  # convert to zero-indexed\n    left = 0\n    right = k\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n    return input\n",
        "test": "assert reverse_Array_Upto_K([], 0) == []                   # check for edge case with empty array",
        "num_ids": 2977,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert add_dict_to_tuple((1,2,3), {'a': 1, 'b': 2}) != ((1,2), {'a': 1, 'b': 2})",
        "num_ids": 2782,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell.\n    We want to find a path with the maximum average over all existing paths.\n    Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize the total cost and the number of cells visited for the best path found so far\n    best_cost = -1\n    best_num_cells = 0\n\n    # Define a helper function to recursively explore all possible paths from a given cell\n    def explore_path(row, col, cost_so_far, num_cells_visited):\n        nonlocal best_cost, best_num_cells\n        # Check if we have reached the bottom-right cell\n        if row == len(cost) - 1 and col == len(cost[0]) - 1:\n            # If we have, update the best cost and number of cells visited if necessary\n            avg_cost = cost_so_far / num_cells_visited\n            if best_cost == -1 or avg_cost > best_cost:\n                best_cost = avg_cost\n                best_num_cells = num_cells_visited\n        else:\n            # If we haven't reached the bottom-right cell yet, explore the possible next moves\n            if row + 1 < len(cost):\n                explore_path(row + 1, col, cost_so_far + cost[row + 1][col], num_cells_visited + 1)\n            if col + 1 < len(cost[0]):\n                explore_path(row, col + 1, cost_so_far + cost[row][col + 1], num_cells_visited + 1)\n\n    # Start exploring paths from the top-left cell\n    explore_path(0, 0, cost[0][0], 1)\n\n    # Return the maximum average cost\n    return best_cost if best_num_cells > 0 else 0\n",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6]]) == 4",
        "num_ids": 4810,
        "indeed": true
    },
    {
        "number": 722,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float\n    (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[name] = data\n    return filtered_students\n",
        "test": "assert filter_data({\"Alice\": (1.65, 60), \"Bob\": (1.75, 75), \"Charlie\": (1.5, 50)}, 1.6, 55) == {'Alice': (1.65, 60), 'Bob': (1.75, 75)} ",
        "num_ids": 4094,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3 # same values in all indices",
        "num_ids": 2271,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    # Convert the number to a string to iterate over each digit\n    base_string = str(base ** power)\n    # Iterate over each digit and add it to the result\n    for digit in base_string:\n        result += int(digit)\n    return result\n",
        "test": "assert power_base_sum(3, 4) == 9 # base 3, power 4, sum of digits is 3 + 9 = 12",
        "num_ids": 2488,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n",
        "test": "assert extract_quotation('\"World\" is a beautiful place') == 'World'",
        "num_ids": 1660,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((1, 2, 3)) == (2, 6)",
        "num_ids": 2458,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function that takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1936,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]",
        "test": "assert consecutive_duplicates([1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 3224,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h\n",
        "test": "assert lateralsurface_cone(0, 10) == 0",
        "num_ids": 1882,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,.\\s]+')\n    return pattern.sub(':', text)\n",
        "test": "assert replace_specialchar(\"\") == \"\"",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 2636,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n    res = 0\n \n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            res += prod\n            res %= mod\n \n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([1]) == 1 # single element list",
        "num_ids": 2779,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles all bits of the number except the first and last bits.\n    \n    Parameters:\n        n (int): The number to toggle.\n    \n    Returns:\n        int: The number with the middle bits toggled.\n    \"\"\"\n    # Get the last set bit from the number\n    last_set_bit = (n & -n).bit_length() - 1\n    \n    # Get the first set bit from the number\n    first_set_bit = (n & -n).bit_length() - 1\n    \n    # Calculate the mask to toggle the middle bits\n    mask = ((1 << last_set_bit) - (1 << first_set_bit))\n    \n    # Toggle the middle bits and return the result\n    return n ^ mask\n",
        "test": "assert set_middle_bits(0b00000001) == 0b00000001 # Example 3",
        "num_ids": 3140,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 3) == 2  # x is present in the list",
        "num_ids": 1980,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str(\"elephant123\") == True",
        "num_ids": 1462,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 1557,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    index = 1\n    while True:\n        t_num = index * (index + 1) // 2\n        if len(str(t_num)) == n:\n            return index\n        index += 1\n",
        "test": "assert find_Index(1) == 1  # smallest triangular number has 1 digit",
        "num_ids": 2400,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        if i+1 < len(test_tup):\n            test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n",
        "test": "assert tuple_to_dict(('apple', 'fruit', 'banana', 'fruit', 'carrot', 'vegetable')) == {'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'} ",
        "num_ids": 2699,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:  # empty string\n        return True\n    else:\n        return len(set(s)) == 1\n",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 1473,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side ** 2)\n    return area\n",
        "test": "assert area_tetrahedron(5) == 30*math.sqrt(2)/9",
        "num_ids": 1767,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 37,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 2243,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_none(()) == False",
        "num_ids": 1233,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    # Loop through all numbers in the range\n    for num in range(startnum, endnum + 1):\n        # Convert the number to a string to extract its digits\n        num_str = str(num)\n        # Check if the number is divisible by every digit it contains\n        if all(num % int(digit) == 0 for digit in num_str):\n            # Print the number if it satisfies the condition\n            print(num)\n",
        "test": "assert divisible_by_digits(100, 200) == [105, 120, 126, 140, 150, 162, 180]",
        "num_ids": 3148,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2) * (a/360) * math.pi\n        return area\n",
        "test": "assert sector_area(2.5, 450) == None",
        "num_ids": 2169,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n\n    # Create a table to store the length of LCS\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n    L = [[[0 for i in range(p+1)] for j in range(m+1)] for k in range(n+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # L[n][m][p] contains the length of LCS\n    # Now, let's find the actual LCS\n    i = n\n    j = m\n    k = p\n    lcs = \"\"\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs\n",
        "test": "assert lcs_of_three(\"ABCDEF\",\"GHIFKL\",\"NOPQRX\") == \"\" # example 3",
        "num_ids": 4782,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 32,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=\\w)([A-Z])', r' \\1', str1)\n",
        "test": "assert capital_words_spaces(\"helloWorld\") == \"hello World\"",
        "num_ids": 1987,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)\n",
        "test": "assert sort_numeric_strings(['5', '3', '8', '1']) == ['1', '3', '5', '8']",
        "num_ids": 2348,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 40,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += list(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1711,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n",
        "test": "assert check_min_heap_helper([5, 4, 3, 2, 1], 0) == False",
        "num_ids": 3093,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 2230,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    \n    # Sort the test list in ascending order\n    test_list.sort()\n    \n    # Get the first K elements from the sorted list and return as a list\n    return test_list[:K]\n",
        "test": "assert min_k([('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50), ('F', 60)], 3) == [('A', 10), ('B', 20), ('C', 30)]",
        "num_ids": 3203,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists\n    under the same index. Write a function to find common elements from three lists. The function\n    should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [4, 5, 6]) == []   # no common element",
        "num_ids": 2935,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    first, second = float('inf'), float('inf')\n    for num in numbers:\n        if num < first:\n            second = first\n            first = num\n        elif first < num < second:\n            second = num\n    return second if second != float('inf') else None\n",
        "test": "assert second_smallest([2, 3, 1, 5, 4]) == 2",
        "num_ids": 2010,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_match_zero_one('ab') ",
        "num_ids": 1818,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    n = len(test_list)\n    count = 0\n    \n    # Create a list of tuples where each tuple contains the string and its reverse.\n    str_rev = [(s, s[::-1]) for s in test_list]\n\n    # Sort the list of tuples based on the first element of each tuple.\n    str_rev.sort(key=lambda x: x[0])\n\n    # Iterate through the sorted list of tuples and count the pairs of reverse strings.\n    for i in range(1, n):\n        j = i - 1\n        while j >= 0 and str_rev[i][1] < str_rev[j][1]:\n            count += 1\n            j -= 1\n\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 2945,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for sublist in list1:\n        t = tuple(sublist)\n        if t not in result:\n            result[t] = 1\n        else:\n            result[t] += 1\n    return result\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 3700,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)  # check if the string can be converted to a float\n        if \".\" in num:  # check if the string contains a decimal point\n            splitted = num.split(\".\")  # split the string by the decimal point\n            if len(splitted[1]) == 2:  # check if the number of digits after the decimal point is 2\n                return True\n    except ValueError:\n        pass\n    return False\n",
        "test": "assert is_decimal('123.45')",
        "num_ids": 1715,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n",
        "test": "assert unique_Element([1, 1, 1, 1]) == True",
        "num_ids": 1323,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 1685,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = abs(arr[i] - arr[i-1])\n        min_diff = min(min_diff, diff)\n    return min_diff\n",
        "test": "assert find_min_diff([1,2,3,4,5,6,7,8,9], 9) == 1 # test for a sorted array",
        "num_ids": 2826,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for char in string:\n        if char.isdigit():\n            ctr += 1\n    return ctr\n",
        "test": "assert number_ctr(\"\") == 0",
        "num_ids": 1266,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math \n\ndef is_polite(n): \n    # Initialize the value of p to 2\n    p = 2\n    \n    # Initialize the value of sum to 0\n    sum = 0\n    \n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        \n        # If i is a power of p, add it to sum\n        if (math.log(i, p)).is_integer():\n            sum += i\n    \n    # Return the sum as the nth polite number\n    return sum",
        "test": "assert is_polite(1) == 1",
        "num_ids": 2612,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pair = (l1[i], l1[i+1])\n        pairs.append(pair)\n    return pairs\n",
        "test": "assert pair_wise([]) == []",
        "num_ids": 1579,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 3, 5, 7, 9], 10) == 2",
        "num_ids": 2707,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1,2,3,4,5], [1,2,3,4,5]) == []",
        "num_ids": 1596,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 ",
        "num_ids": 1869,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ('{', '[', '('):\n            stack.append(char)\n        elif char in ('}', ']', ')'):\n            if not stack:\n                return False\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack\n",
        "test": "assert check_expression('()[]{}({})') == True",
        "num_ids": 2847,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\n",
        "test": "assert remove_length(\"This is a test string\", 5) == \"This is a test string\" # should not remove any words",
        "num_ids": 1913,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    regex = re.compile(pattern)\n    matches = [match.start() for match in regex.finditer(text)]\n    if matches:\n        return matches\n    else:\n        return None\n",
        "test": "assert occurance_substring(\"hello world\", \"abc\") == None",
        "num_ids": 2270,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 3, 5, 7]) == True",
        "num_ids": 1870,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n        elif i < len(test_str)-1 and test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0 ",
        "num_ids": 2365,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for element in arr:\n        if arr.count(element) == 1:\n            unique_elements.append(element)\n    return sum(unique_elements)\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15 ",
        "num_ids": 2231,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = [list(group) for key, group in groupby(list1)]\n    return result\n",
        "test": "assert pack_consecutive_duplicates([1,1,1,2,2,3,3,3,3,5,5]) == [[1,1,1],[2,2],[3,3,3,3],[5,5]]",
        "num_ids": 2386,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list.\n    The function should return a dictionary, where every list is turned to a tuple, \n    and the value of the tuple is the number of its occurrences.\n    '''\n    \n    count_dict = {}\n    \n    for sublist in list1:\n        if tuple(sublist) not in count_dict:\n            count_dict[tuple(sublist)] = 1\n        else:\n            count_dict[tuple(sublist)] += 1\n            \n    return count_dict\n",
        "test": "assert unique_sublists([[1,2,3], [2,3,4], [3,4,5], [1,2,3]]) == {(1,2,3):2, (2,3,4):1, (3,4,5):1} ",
        "num_ids": 3629,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        # Generate all combinations of length i\n        for j in combinations(test_list, i):\n            # Calculate the sum of the current combination\n            s = sum(j)\n            # Add the sum to the result list if it is not already present\n            if s not in result:\n                result.append(s)\n    return result\n",
        "test": "assert find_combinations([1,2,3,4]) == [(1,2,1), (1,3,0), (2,2,0)] ",
        "num_ids": 5504,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert count_divisors(12) == True # Testcase 1, count of divisors is even",
        "num_ids": 2093,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            result += sum(arr[i:j+1])\n    return result\n",
        "test": "assert odd_length_sum([2, 4, 6, 8, 10]) == 0",
        "num_ids": 2138,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to normalized values\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    # Find the maximum and minimum of r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate HSV values\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (60 * ((g - b) / (max_val - min_val)) + 360) % 360\n    elif max_val == g:\n        h = (60 * ((b - r) / (max_val - min_val)) + 120) % 360\n    elif max_val == b:\n        h = (60 * ((r - g) / (max_val - min_val)) + 240) % 360\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = (max_val - min_val) / max_val\n\n    v = max_val\n\n    return h, s, v\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)  # black",
        "num_ids": 4543,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        \n        if even_num is not None and odd_num is not None:\n            break\n    \n    if even_num is not None and odd_num is not None:\n        product = even_num * odd_num\n    else:\n        product = None\n    \n    return product\n",
        "test": "assert mul_even_odd([1, 3, 5, 7]) == None",
        "num_ids": 2452,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Converts tuple string to integer tuple.\n    '''\n    # Convert string to tuple of strings\n    str_tuple = eval(test_str)\n    # Convert each string to integer and create new tuple\n    int_tuple = tuple(int(i) for i in str_tuple)\n    return int_tuple\n",
        "test": "assert tuple_str_int(\"(1,2,3)\") == (1,2,3)",
        "num_ids": 2118,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "test": "assert right_insertion([1,2,3,4,5], 3) == 3",
        "num_ids": 1687,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?:b{3})'\n    return bool(re.search(pattern, text))\n",
        "test": "assert text_match_three('abbb') # True",
        "num_ids": 1341,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 23,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n",
        "test": "assert new_tuple([], \"world\") == (\"world\",)",
        "num_ids": 2074,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 3, 4, 5, 6, 7, 9]) == False",
        "num_ids": 1674,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    res = []\n    for i in test_tup:\n        if type(i) != tuple:\n            res.append(i)\n    return tuple(res)\n",
        "test": "assert remove_nested(()) == () # empty tuple case",
        "num_ids": 2058,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_list(input_list):  \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1,2,3], [4,5,6]]) == 2",
        "num_ids": 1572,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last(arr, x):\n    \"\"\"\n    Finds the last position of an element in a sorted array.\n\n    Args:\n        arr: A sorted list of integers.\n        x: The integer to search for in the list.\n\n    Returns:\n        The index of the last occurrence of x in arr, or -1 if x is not in arr.\n    \"\"\"\n\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # If the current element matches x, search for its last occurrence\n            while mid < len(arr) - 1 and arr[mid + 1] == x:\n                mid += 1\n            return mid\n        elif arr[mid] < x:\n            # If x is greater than the current element, search in the right half\n            left = mid + 1\n        else:\n            # If x is less than the current element, search in the left half\n            right = mid - 1\n\n    # If x is not found in arr, return -1\n    return -1\n",
        "test": "assert last([1,2,3,4,5],5) == 4 # last occurrence of 5 in sorted array [1,2,3,4,5] is at index 4",
        "num_ids": 2486,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb(\"a b\")",
        "num_ids": 1503,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "test": "assert return_sum({}) == 0",
        "num_ids": 1678,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum\n",
        "test": "assert sum_odd(1) == 1 ",
        "num_ids": 1671,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert _sum([1, 2, 3]) == 6",
        "num_ids": 1342,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # convert n to binary format\n    binary = bin(n)[2:].zfill(32)\n    # extract the bits to be rotated\n    rotated = binary[-d:]\n    # left rotate by d bits\n    rotated_left = binary[:-d] + rotated\n    # convert back to decimal\n    decimal = int(rotated_left, 2)\n    return decimal\n",
        "test": "assert left_rotate(0x00000000, 4) == 0x00000000",
        "num_ids": 2584,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello, World!\") == \"Hello,World!\"",
        "num_ids": 1299,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 1, 2) == 1  # One number is equal",
        "num_ids": 1796,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_rotation(arr): \n    \"\"\"\n    This function takes an array as input and returns the number of rotations required\n    to convert it into a sorted array.\n    \"\"\"\n    n = len(arr)\n    \n    # Find the minimum element and its index\n    min_index = 0\n    for i in range(1, n):\n        if arr[i] < arr[min_index]:\n            min_index = i\n    \n    # The number of rotations required is the index of the minimum element\n    return min_index\n",
        "test": "assert count_rotation([1]) == 0",
        "num_ids": 2181,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    import math\n    sqrt_n = int(math.sqrt(n))\n    return n == sqrt_n * sqrt_n\n",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 1452,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([2, 4]) == True",
        "num_ids": 1430,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [7,8,9]]) == [7,8,9] # returns the list with the highest sum of elements",
        "num_ids": 3023,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    \n    return max_run\n",
        "test": "assert max_run_uppercase(\"\") == 0 # empty string",
        "num_ids": 1944,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1494,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n",
        "test": "assert check_K((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"), \"g\") == False",
        "num_ids": 1702,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n",
        "test": "assert check_smaller((2, 4, 6), (1, 3, 5)) == True",
        "num_ids": 2009,
        "indeed": true
    }
]