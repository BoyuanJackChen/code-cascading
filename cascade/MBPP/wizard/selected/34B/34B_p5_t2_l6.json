[
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two tuples.\n    '''\n    # convert the tuples to sets and find their intersection\n    shared_elements = set(test_tup1).intersection(set(test_tup2))\n    return shared_elements\n",
        "test": "assert similar_elements((1,2,3),(2,3,4)) == {2,3}",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n",
        "test": "assert is_not_prime(1) == True  # 1 is not a prime number",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min heap to keep track of the n largest numbers\n    min_heap = []\n    for num in nums:\n        if len(min_heap) < n:\n            hq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                hq.heappop(min_heap)\n                hq.heappush(min_heap, num)\n    # Reverse the min heap to get the largest numbers in descending order\n    return sorted(min_heap, reverse=True)\n",
        "test": "assert heap_queue_largest([1, 2, 3, 4, 5], 3) == [5, 4, 3]",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Power_Of_Two(n):\n    if n == 0:\n        return False\n    return (n & (n-1)) == 0\n",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog\") == [\"quick\", \"brown\", \"jumps\", \"over\", \"lazy\"]",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "test": "assert square_nums([2, 3, 4]) == [4, 9, 16]",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_Rotations(s):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(s)\n    for i in range(n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n",
        "test": "assert find_Rotations(\"abcde\") == 0",
        "num_ids": 731,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == -1 or last_occ == -1:\n        return s\n    s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    return s\n",
        "test": "assert remove_Occ(\"python\", \"p\") == \"ython\" # Remove 'p' from the beginning of the string",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = []\n    for row in M:\n        row_sums.append(sum(row))\n    sorted_row_sums = sorted(row_sums)\n    sorted_matrix = []\n    for total in sorted_row_sums:\n        index = row_sums.index(total)\n        sorted_matrix.append(M[index])\n    return sorted_matrix\n",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 1082,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_Volume(l,b,h):\n    '''\n    This function calculates the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n",
        "test": "assert find_Volume(2,3,4) == 12 ",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def remove_chars(str1, str2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a set of characters to remove from str1\n    to_remove = set(str2)\n    # Create a list to store the filtered characters from str1\n    result = []\n    # Iterate over each character in str1\n    for char in str1:\n        # Check if the character is not in the set of characters to remove\n        if char not in to_remove:\n            # Add the character to the result list\n            result.append(char)\n    # Return the result list as a string\n    return ''.join(result)\n",
        "test": "assert str_to_list(\"abcde\", \"ce\") == \"abd\"",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums)) != len(arraynums)\n",
        "test": "assert test_duplicate([1, 2, 3, 4]) == False",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    digits = [int(d) for d in str(x)]  # convert number to a list of digits\n    factorials = [1] * len(digits)  # initialize factorials list with 1's\n    for i in range(len(digits)):\n        for j in range(1, digits[i]+1):\n            factorials[i] *= j  # calculate factorials of each digit\n    return sum(factorials) == x\n",
        "test": "assert is_woodall(2) == True",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert number to string to reverse it\n    num_str = str(num)\n    # reverse the string\n    reverse_str = num_str[::-1]\n    # convert reversed string back to integer\n    reverse_num = int(reverse_str)\n    # check if the number is one less than twice its reverse\n    if num == (reverse_num * 2) - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(123) == False # Test case 1",
        "num_ids": 746,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
        "test": "assert find_Max_Num([1, 2, 3]) == 321 ",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def opposite_Signs(x,y):  \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(5, -2) == True ",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal = n * (3 * n - 2)\n    return octagonal\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(ch) for ch in s[i:j+1]) == j-i+1:\n                count += 1\n    return count",
        "test": "assert count_Substrings(\"456\") == 0",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize the minimum value to be the first element of the list\n    min_val = xs[0]\n    # Loop through the list and update the minimum value if a smaller value is found\n    for x in xs:\n        if x < min_val:\n            min_val = x\n    # Return the minimum value found in the list\n    return min_val\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([(1, 2), (5, 7), (10, 4)]) == 6",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([('Math', 80), ('English', 70), ('Science', 90)]) == [('English', 70), ('Math', 80), ('Science', 90)]",
        "num_ids": 835,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for item in data_list:\n        if isinstance(item, list):\n            result += recursive_list_sum(item)\n        else:\n            result += item\n    return result\n",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 729,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_number(0) == 1  # There is one way to partition a set with 0 elements",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if not A:\n        return True\n    if len(A) == 1:\n        return True\n    increasing = decreasing = None\n    for i in range(len(A) - 1):\n        if increasing is None:\n            if A[i] < A[i+1]:\n                increasing = True\n                decreasing = False\n            elif A[i] > A[i+1]:\n                increasing = False\n                decreasing = True\n        elif increasing and A[i] >= A[i+1]:\n            return False\n        elif decreasing and A[i] <= A[i+1]:\n            return False\n    return True\n",
        "test": "assert is_Monotonic([1, 2, 3, 4]) == True",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1, 2, 3], [1, 2]) == True",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1,2,3), (4,5,6), (7,8,9)]) == True",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    \n    # Keep sorting until gap is 1\n    while gap > 1:\n        # Set new gap value\n        gap = int(gap // shrink)\n        \n        # If gap is 0 or 1, set it to 1\n        if gap < 1:\n            gap = 1\n        \n        # Sort elements using the gap value\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n    \n    return nums\n",
        "test": "assert comb_sort([]) == []",
        "num_ids": 1202,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    for i in range(int(n ** 0.5) + 1):\n        j = n - i ** 2\n        if j >= 0 and int(j ** 0.5) ** 2 == j:\n            return True\n    return False\n",
        "test": "assert dif_Square(10) == True ",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], ['dotted', 'stripes', 'solid']) == False",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12)], 2) == [(2, 4, 6), (4, 8, 12)]",
        "num_ids": 1029,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(33) == True",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert word_len('apple') == True",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol\n",
        "test": "assert volume_sphere(2) == 33.510321638291124",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = sum(ord(char) for char in strr)\n    result_ascii = ascii_sum % 26\n    return chr(result_ascii)\n",
        "test": "assert get_Char(\"xyz\") == \"c\"",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # Initialize the sequence with the first two numbers\n    seq = [1, 1]\n    # Compute the next numbers in the sequence\n    for i in range(2, n):\n        seq.append(seq[seq[i-1]] + seq[i-seq[i-1]])\n    # Return the nth number in the sequence\n    return seq[n-1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n",
        "test": "assert surfacearea_sphere(2) == 50.26544",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6} ",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 2, 3, 3, 3, 4]) == {1: 1, 2: 2, 3: 3, 4: 1}",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # Create a list of all the numbers from 1 to N-1\n    num_list = [i for i in range(1, N)]\n    \n    # Sort the list in descending order\n    num_list.sort(reverse=True)\n    \n    # Loop through the sorted list and find the first number that is smaller than N\n    for num in num_list:\n        if num < N:\n            return num\n    \n    # If there are no smaller numbers, return None\n    return None\n",
        "test": "assert closest_num(1) == None",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \"goodbye\") == False ",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n_str = str(n)  # convert number to string\n    diff = 0  # initialize difference to zero\n    for i in range(len(n_str)-1):\n        diff = int(n_str[i+1]) - int(n_str[i])  # compute difference between consecutive digits\n        if diff == 0:  # if difference is zero, number is not undulating\n            return False\n        sign = diff/abs(diff)  # determine sign of difference\n        for j in range(i+2, len(n_str)):\n            new_diff = int(n_str[j]) - int(n_str[j-1])  # compute difference between consecutive digits\n            new_sign = new_diff/abs(new_diff)  # determine sign of new difference\n            if new_sign == sign:  # if signs are the same, number is not undulating\n                return False\n    return True  # if all differences have different signs, number is undulating\n",
        "test": "assert is_undulating(12347) == False # 12347 is not undulating",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b",
        "test": "assert power(2,3) == 8",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(1, 5), (2, 3), (3, 7)]) == 2",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')  # initialize the minimum length to infinity\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    return min_length\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(12) == 6 # should return 6 as divisors of 12 are 1, 2, 3, 4, 6, 12",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n",
        "test": "assert frequency_lists([1,2,3]) == {1:1, 2:1, 3:1}",
        "num_ids": 1008,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result\n",
        "test": "assert multiply_num([1, 2, 3, 4]) == 6.0",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary or \"0\"\n",
        "test": "assert decimal_to_binary(0) == '0'",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n\n    # convert the integer to a string to check if it's already a palindrome\n    num_str = str(num)\n\n    # if the number is already a palindrome, add 1 to the number and try again\n    if num_str == num_str[::-1]:\n        num += 1\n\n    # loop until we find the next smallest palindrome\n    while True:\n        # convert the integer to a string to check if it's a palindrome\n        num_str = str(num)\n\n        # if the number is a palindrome, return it as an integer\n        if num_str == num_str[::-1]:\n            return int(num_str)\n\n        # otherwise, increment the number and try again\n        num += 1\n",
        "test": "assert next_smallest_palindrome(9) == 11",
        "num_ids": 1598,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the given array is valid and the value of k is valid\n    if not arr or k < 1 or k > len(arr):\n        return None\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Return the kth element\n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0] + ''.join(w.title() for w in words[1:])\n    return camel_case\n",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function finds the Eulerian number a(n, m).\n    \"\"\"\n    if m == 0:\n        return 1\n    elif n == 0 or m < 0 or m > n:\n        return 0\n    else:\n        return (m * eulerian_num(n-1, m-1)) + (n * eulerian_num(n-1, m))\n",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        result.append(sorted_sublist)\n    return result\n",
        "test": "assert sort_sublists([['apple', 'banana', 'orange'], ['carrot', 'pepper', 'potato']]) == [['apple', 'banana', 'orange'], ['carrot', 'pepper', 'potato']]",
        "num_ids": 1000,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count(lst): \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, True, False]) == 3",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3) # Test case 1",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for num in heapq.merge(num1, num2, num3):\n        merged_list.append(num)\n    return merged_list\n",
        "test": "assert merge_sorted_list([1,3,5],[2,4,6],[7,8,9]) != [1,2,3,4,5,6,7,9,8]",
        "num_ids": 1855,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n+1):\n        binary = bin(int(s,2))[2:]\n        if int(binary[0]) % 2 != 0:\n            count += 1\n        s = s[1:] + s[0]\n    return count\n",
        "test": "assert odd_Equivalent('101', 1) == 2 ",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Get a set of all unique elements in the first list of the nested list\n    common = set(nestedlist[0])\n    # Iterate through the rest of the lists in the nested list\n    for lst in nestedlist[1:]:\n        # Get a set of all unique elements in the current list\n        curr = set(lst)\n        # Get the intersection of the current set and the set of common elements\n        common = common.intersection(curr)\n    # Return the sorted list of common elements\n    return sorted(list(common))\n",
        "test": "assert common_in_nested_lists([[1,2,3], [2,3,4], [3,4,5]]) == [3]",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # initialize a flag variable to keep track of empty dictionaries\n    flag = True\n    \n    # loop through the list of dictionaries\n    for dictionary in list1:\n        # check if the dictionary is empty or not\n        if len(dictionary) != 0:\n            # if the dictionary is not empty, set the flag variable to False and break out of the loop\n            flag = False\n            break\n    \n    # return the value of the flag variable\n    return flag\n",
        "test": "assert empty_dit([{}]) == True",
        "num_ids": 566,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Iterate over each sublist in the test_list\n    for sublist in test_list:\n        # Iterate over each element in the sublist\n        for i in range(len(sublist)):\n            # Check if the element can be converted to a float\n            if isinstance(sublist[i], (int, str)):\n                try:\n                    # Convert the element to a float\n                    sublist[i] = float(sublist[i])\n                except ValueError:\n                    pass\n    return test_list\n",
        "test": "assert list_to_float([]) == []",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"apple banana\") == ['apple', 'banana']",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    if arr[0] != arr[1]:\n        return arr[0]\n    \n    if arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    \n    left, right = 1, n-2\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:\n            return arr[mid]\n        elif arr[mid] == arr[mid-1]:\n            right = mid - 1\n        else:\n            left = mid + 1\n",
        "test": "assert search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == None",
        "num_ids": 1273,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2), (3,-4), (5,6)]) == 35",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit+1):\n        divisors_sum = sum(j for j in range(1, i) if i % j == 0)\n        if i != divisors_sum and i == sum(j for j in range(1, divisors_sum) if divisors_sum % j == 0):\n            total += i\n    return total\n",
        "test": "assert amicable_numbers_sum(10000) == 390336",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    phi = cmath.phase(z)\n    return phi\n",
        "test": "assert angle_complex(5, 5) == 0.7853981633974483  # for complex number 5+5j",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for i in string:\n        if i == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n            \n        diff = count_1 - count_0\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff\n",
        "test": "assert find_length(\"01010101\") == 0",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of a and b\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    # Return the sum of the common divisors\n    return sum(divisors)\n",
        "test": "assert sum(4, 6) == 4  # since 4 and 6 have 2 and 4 as common divisors",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(4, ['apple', 'orange', 'grape', 'kiwi', 'pineapple']) == ['orange', 'grape', 'pineapple']",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if matrix is square\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    if rows != cols:\n        return False\n\n    # Calculate the sum of the first row and check if all rows have the same sum\n    row_sum = sum(my_matrix[0])\n    for i in range(1, rows):\n        if sum(my_matrix[i]) != row_sum:\n            return False\n\n    # Calculate the sum of the first column and check if all columns have the same sum\n    col_sum = sum(my_matrix[i][0] for i in range(rows))\n    for j in range(1, cols):\n        if sum(my_matrix[i][j] for i in range(rows)) != col_sum:\n            return False\n\n    # Calculate the sum of the diagonal from top left to bottom right\n    diag1_sum = sum(my_matrix[i][i] for i in range(rows))\n\n    # Calculate the sum of the diagonal from top right to bottom left\n    diag2_sum = sum(my_matrix[i][rows-i-1] for i in range(rows))\n\n    # Check if both diagonals have the same sum\n    if diag1_sum != diag2_sum:\n        return False\n\n    # If we made it to this point, the matrix is a magic square\n    return True\n",
        "test": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True # example of a magic square",
        "num_ids": 1678,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [key for key, value in freq.items() if value == max_freq]\n    return max_items[0]",
        "test": "assert max_occurrences([1, 2, 2, 3, 3, 3, 4]) == 3",
        "num_ids": 978,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_in_str = [c for c in str1 if c.lower() in vowels]\n    vowels_in_str.reverse()\n    result = ''\n    vowel_count = 0\n    for c in str1:\n        if c.lower() in vowels:\n            result += vowels_in_str[vowel_count]\n            vowel_count += 1\n        else:\n            result += c\n    return result\n",
        "test": "assert reverse_vowels(\"hello\") == \"holle\"",
        "num_ids": 1030,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''.join(str(x) for x in tup1)\n    return str_tup\n",
        "test": "assert tup_string(()) == ''",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n",
        "test": "assert sum_negativenum([1, 2, 3, -4, -5, -6, 7, 8, 9]) == -15",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1 # first hexagonal number is 1 ",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_nonzero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_nonzero += 1\n    if count_nonzero == 0:\n        return count_zero\n    else:\n        return count_zero/count_nonzero\n",
        "test": "assert zero_count([1, 1, 1, 1, 1]) == 0",
        "num_ids": 868,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True # 2^0 + 2^1 = 1 + 2 = 3",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result\n",
        "test": "assert extract_singly([[1, 2], [3, 4]]) == {1, 2, 3, 4}",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    while n > 1:\n        # find the index of the maximum element\n        max_idx = nums.index(max(nums[:n]))\n        # reverse the sublist from 0 to max_idx+1\n        nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n        # reverse the sublist from 0 to n\n        nums = nums[:n][::-1] + nums[n:]\n        n -= 1\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 1299,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0 # empty tuple",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = abs(arr[1] - arr[0])\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    elif b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    else:\n        gcd_ab = gcd(abs(a), abs(b))\n        if n % gcd_ab != 0:\n            return None\n        else:\n            gcd_a = a // gcd_ab\n            gcd_b = b // gcd_ab\n            lcm_ab = abs(a * b) // gcd_ab\n            lcm_ab_n = lcm_ab * n\n            x = lcm_ab_n // abs(b)\n            y = lcm_ab_n // abs(a)\n            return (x, y)\n\n\ndef gcd(a, b):\n    \"\"\"\n    Calculate the greatest common divisor of two integers using Euclid's algorithm.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
        "test": "assert find_solution(3, 5, 12) == (2, 3)",
        "num_ids": 1533,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]\n",
        "test": "assert remove_elements([1, 2, 3, 4], [2, 4]) == [1, 3]",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2+1):\n        total += n - 2*i\n    return total\n",
        "test": "assert sum_series(6) == 12 # check if the function works for n=6 (6+4+2+0)",
        "num_ids": 674,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l ** 2) / (4 * math.tan(math.pi/s))\n    return area\n",
        "test": "assert area_polygon(2, 4) == 16*tan(pi/4)/2",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum",
        "test": "assert div_sum(12) == 28  # 1 + 2 + 3 + 4 + 6 + 12 = 28",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if i+1 == ord(str1[i].lower()) - 96:\n                count += 1\n    return count\n",
        "test": "assert count_char_position(\"abc\") == 3 # all characters are at the same position in the English alphabet",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4]) == 2",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Count the number of occurrences of x in the list a.\n    \"\"\"\n    count = 0\n    for elem in a:\n        if elem == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5], 3) == 1",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = 5\n    return sides * a\n\nprint(perimeter_pentagon(5))\n",
        "test": "assert perimeter_pentagon(2) == 10",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"\") == 0 # empty string ",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Get the index of the first occurrence of the element x\n    first_occurrence = binary_search(arr, x, 0, n-1)\n\n    # If x is not found in the array, return False\n    if first_occurrence == -1:\n        return False\n\n    # Get the index of the last occurrence of the element x\n    last_occurrence = binary_search(arr, x, first_occurrence, n-1)\n\n    # Calculate the number of occurrences of the element x\n    count = last_occurrence - first_occurrence + 1\n\n    # Check if the element x is the majority element\n    if count > n/2:\n        return True\n    else:\n        return False\n\n\ndef binary_search(arr, x, start, end):\n    '''\n    Helper function to find the index of the first and last occurrences of the element x in the sorted array arr using binary search\n    '''\n\n    # If the start index is greater than the end index, the element is not found\n    if start > end:\n        return -1\n\n    # Calculate the middle index\n    mid = (start + end) // 2\n\n    # If the middle element is the element we're searching for, return its index\n    if arr[mid] == x:\n        return mid\n\n    # If the middle element is greater than the element we're searching for, search in the left half\n    elif arr[mid] > x:\n        return binary_search(arr, x, start, mid-1)\n\n    # If the middle element is less than the element we're searching for, search in the right half\n    else:\n        return binary_search(arr, x, mid+1, end)\n",
        "test": "assert is_majority([1, 2, 3, 4, 5], 5, 3) == False",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 566,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "test": "assert odd_values_string(\"Hello\") == \"Hlo\"",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r): \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # loop through the range from l to r\n    for i in range(l, r+1):\n        # check if all the bits are unset\n        if (n & i) == 0:\n            return False\n    \n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b11001100, 0, 7) == False",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two separate lists for negative and positive elements\n    neg_list = []\n    pos_list = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    # merge the two lists and replace the first n elements of the original array with the merged list\n    merged_list = neg_list + pos_list\n    for i in range(n):\n        arr[i] = merged_list[i]\n    return arr\n",
        "test": "assert re_arrange_array([], 0) == []",
        "num_ids": 1354,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "test": "assert replace_blank(\"Hello world\", \"*\") == \"Hello*world\"",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([], 0) == [] # empty list",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h\n",
        "test": "assert lateralsuface_cylinder(1,1) == 6.283185307179586",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(1) == 1  # testing for a side length of 1",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Get the binary representation of the number\n    binary_n = bin(n)[2:]\n    \n    # Create a string to store the modified binary representation\n    modified_binary = ''\n    \n    # Loop through each bit of the binary representation\n    for i in range(len(binary_n)):\n        # If the bit is even (i.e. its position is divisible by 2), set it to 1\n        if i % 2 == 0:\n            modified_binary += '1'\n        # Otherwise, keep the original bit\n        else:\n            modified_binary += binary_n[i]\n    \n    # Convert the modified binary string back to an integer and return it\n    return int(modified_binary, 2)\n",
        "test": "assert even_bit_set_number(1) == 1 # 1 is odd, so even bits are not set",
        "num_ids": 795,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert check_occurences([(1,2), (3,4), (1,2), (5,6), (1,2), (3,4)]) == {(1,2): 3, (3,4): 2, (5,6): 1}",
        "num_ids": 913,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"abc\") == 6  # \"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"",
        "num_ids": 604,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_total_number_of_sequences(m,n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    if n == 1:\n        return m\n    elif n == 2:\n        return sum(range(m,m+1))\n    else:\n        total_sequences = 0\n        for i in range(2,m+1):\n            total_sequences += get_total_number_of_sequences(i,n-1)\n        return total_sequences\n",
        "test": "assert get_total_number_of_sequences(5,2) == 5 ",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5]) == [1, 2, 4, 5]",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac('Hello, World!') == 13 # Checking the length of a string with spaces and punctuation",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    next_square = math.floor(math.sqrt(N)) + 1\n    return next_square**2\n",
        "test": "assert next_Perfect_Square(15) == 16",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Find the maximum increasing subsequence\n    max_inc = [0] * n\n    for i in range(n):\n        max_val = 0\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_val = max(max_val, max_inc[j])\n        max_inc[i] = max_val + arr[i]\n\n    # Find the maximum decreasing subsequence\n    max_dec = [0] * n\n    for i in range(n-1, -1, -1):\n        max_val = 0\n        for j in range(n-1, i, -1):\n            if arr[j] < arr[i]:\n                max_val = max(max_val, max_dec[j])\n        max_dec[i] = max_val + arr[i]\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, max_inc[i] + max_dec[i] - arr[i])\n\n    return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15   # Bitonic sequence: 1, 2, 3, 4, 5",
        "num_ids": 1895,
        "indeed": true
    },
    {
        "number": 246,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n    \"\"\"\n    guess = number / 2\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < 0.00001:\n            return new_guess\n        guess = new_guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store lengths of longest palindromic subsequences of substring\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Initialize all diagonal elements as 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings with length 2 and fill the table accordingly\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n",
        "test": "assert lps(\"abracadabra\") == 7 # \"racacar\" is the longest palindromic subsequence in \"abracadabra\"",
        "num_ids": 1355,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n",
        "test": "assert harmonic_sum(2) == 1.5 ",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    return list(intersection)\n",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3] # Test case 1",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "test": "assert count_X(('a', 'a', 'b', 'a', 'c', 'a'), 'a') == 4",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def insert_element(lst, element):\n    '''\n    Inserts the element before each element in the list.\n    '''\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n",
        "test": "assert convert((-2-3j)) == (2.23606797749979, -0.982793723247301)",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([]) == 0",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition)\n    of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([], 0) == [()]",
        "num_ids": 1047,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n < 2:\n        return count\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 976,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(3, 5) == (5, 3)",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    \n    if max_tup1 > max_tup2:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert maximize_elements((1,2,3), (4,5,6)) == (4,5,6)",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef generate_prime(n):\n    count = 0\n    num = 1\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num-1\n\n\ndef newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return generate_prime(n)\n",
        "test": "assert newman_prime(2) == 7",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            result.append(float('inf'))\n        else:\n            result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n",
        "test": "assert division_elements((10, 20, 30), (2, 5, 10)) == (5.0, 4.0, 3.0)",
        "num_ids": 994,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    # A dog's first year is equal to 15 human years\n    # After that, each year for a dog is equal to 7 human years\n    if h_age <= 1:\n        return h_age * 15\n    else:\n        return 15 + (h_age - 1) * 7",
        "test": "assert dog_age(1) == 15 # 15 months",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def list_split(S, step):\n    \"\"\"\n    This function takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]",
        "num_ids": 934,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(1) == 1 # first odd number is 1, 1*1 = 1",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 3 * find_star_num(n-1) - find_star_num(n-2) + find_star_num(n-3)\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            sum += arr[i]\n    return sum\n",
        "test": "assert sum_even_and_even_index([1,3,5,7,9]) == 0 # no even numbers at even positions",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n and returns the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1):\n        # Raise the even number to the fifth power and add it to the sum variable\n        sum += (2*i)**5\n    # Return the final sum\n    return sum\n",
        "test": "assert even_Power_Sum(2) == 2 + 8",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]",
        "num_ids": 736,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 885,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for k in range(n+1):\n        coeff = math.comb(n, k)\n        if k % 2 == 0:\n            sum += coeff\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(0) == 1 # base case",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * r * r * h\n    return vol",
        "test": "assert volume_cylinder(1,1) == 3.14159",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert dict_filter({1:2, 3:4, 5:6, 7:8}, 5) == {5:6, 7:8} # Test case 1",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i in test_tup:\n        if i not in count_dict:\n            count_dict[i] = test_tup.index(i)\n    return count_dict\n",
        "test": "assert count_first_elements((\"cat\", \"dog\", \"bird\", \"cat\", \"fish\")) == {'cat': 0, 'dog': 1, 'bird': 2, 'fish': 4}",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = n * (3 * n - 1) // 2\n    return decagonal_num\n",
        "test": "assert is_num_decagonal(1) == 1 ",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    set_list = set(test_list)\n    # Compare the length of the original list with the set list\n    if len(test_list) == len(set_list):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1, 2, 3]) == True",
        "num_ids": 728,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    return [i - j for i, j in zip(nums1, nums2)]\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]",
        "num_ids": 749,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Converting the integer to a string\n    str_n = str(n)\n    \n    # Looping through each digit in the string\n    for digit in str_n:\n        # Checking if the frequency of the digit is greater than the digit itself\n        if str_n.count(digit) > int(digit):\n            return False\n    \n    # If all digits satisfy the condition, return True\n    return True\n",
        "test": "assert validate(123456789) == True",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # check if all items in the list are equal to the given element\n    if all(item == element for item in lst):\n        return True\n    else:\n        return False\n",
        "test": "assert check_element([1, 1, 1, 1], 1) == True",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bbb|bb)'\n    match = re.search(pattern, text)\n    return bool(match)\n",
        "test": "assert text_match_two_three('abbc') == True",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sum of the original array\n    max_sum = float('-inf')\n    \n    # Iterate through the original array and calculate the maximum sum of subarrays\n    for i in range(n):\n        # Initialize the current sum of the subarray\n        curr_sum = 0\n        \n        # Iterate through the subarray and add up its elements\n        for j in range(i, n):\n            curr_sum += a[j]\n            \n            # Update the maximum sum if the current sum is greater\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n    \n    # Repeat the above process k times and return the maximum sum found\n    return max_sum * k\n",
        "test": "assert max_sub_array_sum_repeated([1, -2, 3, 4, -5], 5, 3) == 25 ",
        "num_ids": 1698,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 290,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == [4, 5, 6, 7]",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k*k\n    else:\n        dp = [0]*n\n        dp[0] = k\n        dp[1] = k*k\n        for i in range(2, n):\n            dp[i] = dp[i-1]*(k-1) + dp[i-2]*(k-1)\n        return dp[-1]\n",
        "test": "assert count_no_of_ways(1, 2) == 2  # 2 ways to paint 1 post with 2 colors",
        "num_ids": 1140,
        "indeed": true
    },
    {
        "number": 292,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(10,3) == 3 # check for a valid input",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_val(listval):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = float('-inf')\n    for val in listval:\n        if isinstance(val, (int, float)):\n            max_val = max(max_val, val)\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_div(number):\n    \"\"\"\n    Returns the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total\n",
        "test": "assert sum_div(12) == 28, \"Sum of divisors of 12 should be 28\"",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def merge(left, right):\n    i, j = 0, 0\n    count = 0\n    result = []\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            count += len(left) - i\n    result += left[i:]\n    result += right[j:]\n    return result, count\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    mid = len(arr) // 2\n    left, a = merge_sort(arr[:mid])\n    right, b = merge_sort(arr[mid:])\n    merged_arr, c = merge(left, right)\n    return merged_arr, a + b + c\n\n\ndef get_Inv_Count(arr):\n    sorted_arr, count = merge_sort(arr)\n    return count\n",
        "test": "assert get_Inv_Count([1,2,3,4]) == 0",
        "num_ids": 1577,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert flatten_list([1, 2, [3, 4], [[5]]]) == [1, 2, 3, 4, 5]",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the aggregate value for each student\n    student_aggregate = defaultdict(int)\n\n    # Loop through the list of tuples and add the marks of each student to their aggregate\n    for student, marks in stdata:\n        student_aggregate[student] += marks\n\n    # Return the maximum aggregate from the student_aggregate dictionary\n    return max(student_aggregate.values())\n",
        "test": "assert max_aggregate([('A', 10), ('B', 20)]) == 20",
        "num_ids": 1013,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**(2*n)):\n        bin_seq = format(i, f'0{2*n}b')\n        if sum(int(bin_seq[j]) for j in range(n)) == sum(int(bin_seq[j]) for j in range(n, 2*n)):\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(0) == 1 # There is only one binary sequence of length 0",
        "num_ids": 1389,
        "indeed": true
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    for i in range(rotations):\n        temp = arr[n-1]\n        for j in range(n-1, 0, -1):\n            arr[j] = arr[j-1]\n        arr[0] = temp\n    return arr[index]\n",
        "test": "assert find_Element([1, 2, 3, 4, 5], [0, 5], 4, 3) == 5",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0].lower() == 'p']\n    return p_words[:2]\n",
        "test": "assert start_withp(['python', 'programming', 'java', 'pascal']) == ['python', 'programming']",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n or k >= n:\n        return 0\n    \n    # Initialize two variables to store the maximum sum including and excluding the current element\n    incl = 0\n    excl = 0\n    \n    # Loop through the array from the given index to kth index\n    for i in range(index, k+1):\n        # Calculate the new maximum sum including the current element\n        new_incl = excl + a[i]\n        \n        # Update the maximum sum excluding the current element\n        excl = max(excl, incl)\n        \n        # Update the maximum sum including the current element\n        incl = new_incl\n    \n    return max(incl, excl)\n",
        "test": "assert max_sum_increasing_subseq([5, 4, 3, 2, 1], 5, 1, 3) == 6",
        "num_ids": 2134,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    temp_tuplex = deepcopy(tuplex)\n    return temp_tuplex[m:n]\n",
        "test": "assert colon_tuplex((1,2,3,4,5),1,4) == (2,3,4) # test case 1",
        "num_ids": 872,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 2) == [15, 24]",
        "num_ids": 1254,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def maximum(a,b):    \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(5, 10) == 10",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 456,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n+1)\n",
        "test": "assert set_left_most_unset_bit(0b101010) == 0b110101 # Example 2",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cone(1,1) == math.pi/3",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return None\n    else:\n        power = 0\n        while n >= 2**power:\n            power += 1\n        return 2**(power-1)\n",
        "test": "assert highest_Power_of_2(10) == 8",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "test": "assert add_string([], \"hello\") == [] ",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the result\n    result = {}\n    \n    # iterate through the lists and create nested dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    \n    return result\n",
        "test": "assert convert_list_dictionary([1, 2, 3], [4, 5, 6], [7, 8, 9]) == {1: {4: 7}, 2: {5: 8}, 3: {6: 9}}",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 812,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1,2,3], [4,5], [6,7,8,9]]) == [6,7,8,9]",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct(()) == True # empty tuple",
        "num_ids": 494,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # creating a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # finding the first non-repeating character in the string\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # returning None if no non-repeating character is found\n    return None\n",
        "test": "assert first_non_repeating_character(\"abcd\") == \"a\"",
        "num_ids": 967,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n",
        "test": "assert check_char('abc') == False ",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sorting the numbers\n    sorted_numbers = sorted([a,b,c])\n    # finding the median\n    median = sorted_numbers[1]\n    return median\n",
        "test": "assert median_numbers(1, 2, 3) == 2",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for digit in str(num):\n            total += int(digit)\n        result.append(total)\n    return result\n",
        "test": "assert sum_of_digits([0, 10, 100]) == [0, 1, 1]",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Tuples must have the same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
        "test": "assert bitwise_xor((), ()) == ()",
        "num_ids": 1137,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)\n",
        "test": "assert extract_freq([(1,2),(2,3),(3,4),(1,2)]) == 3",
        "num_ids": 835,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Create an empty list to store the result\n    result = []\n    \n    # Loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Check if the element is a tuple itself\n        if isinstance(test_tup1[i], tuple):\n            # If it is a tuple, perform element-wise addition of its elements with the corresponding elements of the second tuple\n            result.append(tuple(map(sum, zip(test_tup1[i], test_tup2[i]))))\n        else:\n            # If it is not a tuple, add the two elements\n            result.append(test_tup1[i] + test_tup2[i])\n    \n    # Return the result as a tuple\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1,2),(3,4)),((5,6),(7,8))) == ((6,8),(10,12))",
        "num_ids": 1382,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum value.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5,7) == 5",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((\"apple\", \"banana\", \"orange\"), \"grape\") == False",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert find_Parity(4) == False",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Split the string into a list of digits\n    digits = [int(d) for d in num_str]\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Find the index of the first digit that is smaller than the previous digit\n    i = len(digits) - 1\n    while i > 0 and digits[i] >= digits[i-1]:\n        i -= 1\n    # If no such index is found, the number is already the largest possible\n    if i == 0:\n        return -1\n    # Find the index of the smallest digit that is greater than the digit at index i-1\n    j = digits.index(digits[i-1])\n    # Swap the digits at index i-1 and j\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    # Reverse the digits after index i-1\n    digits[i:] = digits[i:][::-1]\n    # Convert the list of digits back to an integer\n    result = int(''.join(str(d) for d in digits))\n    # Return the result\n    return result\n",
        "test": "assert rearrange_bigger(123) == 321  # reverse order",
        "num_ids": 1327,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    if len(nums1) == 0 or len(nums2) == 0:\n        return pairs\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, num1, num2))\n            else:\n                if (num1 + num2) < heap[0][0]:\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (num1 + num2, num1, num2))\n    for pair in heap:\n        pairs.append((pair[1], pair[2]))\n    return pairs\n",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]",
        "num_ids": 1576,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 7*8",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for val in listval:\n        if val < min_value:\n            min_value = val\n    return min_value\n",
        "test": "assert min_val([1, 2, 3]) == 1",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0] + ''.join([w.title() for w in words[1:]])\n    return camel_case\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    extracted_elements = []\n    for tup in list1:\n        extracted_elements.append(tup[n-1])\n    return extracted_elements\n",
        "test": "assert extract_nth_element([('apple', 'banana'), ('cat', 'dog'), ('elephant', 'giraffe')], 0) == 'apple'",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if any element of the first list is present in the second list.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Returns the maximum product of any pair of integers in the given array.\n    \"\"\"\n    max_product = float('-inf')\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_Product([1, 10, -5, 7]) == 70  # example case",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def group_tuples(tuples_list):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create a dictionary to store the count of each first element in the tuples\n    first_elements = {}\n    for tup in tuples_list:\n        if tup[0] not in first_elements:\n            first_elements[tup[0]] = 1\n        else:\n            first_elements[tup[0]] += 1\n    # Find the first element that appears in all tuples\n    for key, value in first_elements.items():\n        if value == len(tuples_list):\n            return key\n    # If no such element exists, return None\n    return None\n",
        "test": "assert group_tuples([(1, 2), (1, 3), (1, 4)]) == 1",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max([['hello','world'], ['python', 'programming'], ['AI', 'ML', 'DL']]) == ['AI', 'ML', 'DL'] #should return ['AI', 'ML', 'DL'] since it has the maximum length among the given lists.",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)\n",
        "test": "assert round_and_sum([-1.2, 2.3, -3.4, 4.5, -5.6]) == -20.0",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def cube_Sum(n):\n    # Initialize the sum variable to 0\n    sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the current even number\n        cube = i**3\n        # Add the cube to the sum\n        sum += cube\n\n    # Return the sum\n    return sum\n",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_str = delimiter.join(str(i) for i in test_tup)\n    return concatenated_str\n",
        "test": "assert concatenate_tuple(()) == '' # check for empty tuple",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function finds the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes/n\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1.0 # Testcase for n=1",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, str):\n            result.append(item[-1])\n        elif isinstance(item, tuple):\n            result.extend(extract_rear(item))\n    return tuple(result)\n",
        "test": "assert extract_rear((\"hello\", \"world\", \"python\")) == (\"o\", \"d\", \"n\")",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == 1",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Create an empty list to store the odd numbers\n    odd_numbers = []\n    \n    # Loop through each number in the input list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2 != 0:\n            # If the number is odd, append it to the list of odd numbers\n            odd_numbers.append(num)\n    \n    # Return the list of odd numbers\n    return odd_numbers\n",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.search(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        return None\n",
        "test": "assert change_date_format(\"2022-12-31\") == \"31-12-2022\"",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([]) == []",
        "num_ids": 1072,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n",
        "test": "assert and_tuples((True, False, True), (True, True, False)) == (True, False, False)",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 - 4*a*c == 0:\n        return \"Directrix is not defined.\"\n    else:\n        d = b**2 - 4*a*c\n        p = -b / (2*a)\n        h = -d / (4*a)\n        directrix = \"y = \" + str(p) + \"x + \" + str(h)\n        return directrix\n",
        "test": "assert parabola_directrix(1, 2, -3) == \"x=3/2\"",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if set1.intersection(set2):\n        return True\n    else:\n        return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    top = base2 - base1\n    median = (top / 2) + height\n    return median\n",
        "test": "assert median_trapezium(2, 4, 3) == 4  # case 2",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element >= number:\n            return False\n    return True\n",
        "test": "assert check_greater([1,2,3,4,5], 6) == True",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one('ab') # should return True",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(1234) == 4",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [-2, -4]",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"Hello\") == \"Hlo\"",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([]) == 0 # empty list",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = 0\n    for i in L:\n        num = num*10 + i\n    return num\n",
        "test": "assert multiple_to_single([1, 2, 3]) == 123",
        "num_ids": 575,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define a list of adverbs\n    adverbs = ['really', 'very', 'extremely', 'quite', 'incredibly', 'amazingly', 'especially', 'exceptionally']\n    # define a regex pattern for adverbs\n    pattern = re.compile(r'\\b(' + '|'.join(adverbs) + r')\\b', re.IGNORECASE)\n    # find all adverbs in the text\n    adverbs_found = re.findall(pattern, text)\n    # if no adverbs are found, return None\n    if not adverbs_found:\n        return None\n    # find the position of the first adverb in the text\n    position = text.lower().find(adverbs_found[0])\n    # return the first adverb and its position\n    return adverbs_found[0], position\n",
        "test": "assert find_adverb_position(\"The early bird catches the worm.\") == (2, 5)",
        "num_ids": 2093,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert surfacearea_cube(1) == 6 # test for a cube with side length 1",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    return max_neg\n",
        "test": "assert largest_neg([-1,-2,-3,4,5]) == -1",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through the list of tuples\n    for i, tup in enumerate(test_list):\n        # check if the length of the tuple is greater than k\n        if len(tup) > K:\n            # if so, slice the tuple and replace the original tuple with the sliced tuple\n            test_list[i] = tup[:K]\n    return test_list\n",
        "test": "assert trim_tuple([(4,5,6)], 2) == [(4,5)]",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18) # test case 1",
        "num_ids": 940,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for item in lst:\n        if item in count:\n            result[item] = count[item]\n        else:\n            result[item] = 0\n    return result\n",
        "test": "assert count_Occurrence((\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\"), [\"apple\", \"banana\"]) == {\"apple\": 2, \"banana\": 2}",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "test": "assert cube_nums([]) == []",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def perrin(n):\n    \"\"\"\n    Returns the nth Perrin number.\n    \"\"\"\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return perrin(n-1) + perrin(n-2)\n\ndef cal_sum(n):\n    \"\"\"\n    Returns the sum of the first n Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += perrin(i)\n    return sum\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings\n",
        "test": "assert extract_string([\"apple\", \"banana\", \"cherry\"], 3) == [\"apple\", \"banana\", \"cherry\"]",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"Hello world\") == \"Helloworld\"",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0\n",
        "test": "assert loss_amount(1000, 800) == 200 ",
        "num_ids": 588,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n/i % 2 == 0 and n/i != i:\n                sum += n/i\n    return int(sum)\n",
        "test": "assert sumofFactors(10) == 12  # Sum of even factors of 10 (2 + 4 + 6) = 12",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog. He huz a muzzy bear.\") == True",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # List of months with 31 days\n    months_31_days = [1, 3, 5, 7, 8, 10, 12]\n\n    # Check if the given month number is in the list of months with 31 days\n    if monthnum2 in months_31_days:\n        return True\n    else:\n        return False",
        "test": "assert check_monthnumb_number(1) == True  # January has 31 days",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [4, 5]  # sublist with minimum length is [4, 5]",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function calculates the area of a rectangle given its length and breadth.\n    \"\"\"\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(10, 5) == 50",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    return re.sub(r'[A-Z]+', '', string)",
        "test": "assert remove_uppercase(\"\") == \"\"  # empty string",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Extract(lst): \n    \"\"\"\n    This function takes a list of sublists as input and returns a new list containing\n    the first element of each sublist.\n    \"\"\"\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7]",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello, World!\") == 2 # \"H\" and \"W\" are upper case",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "from itertools import combinations\n\ndef combinations_list(list1):\n    \"\"\"\n    This function takes a list as input and returns all possible combinations of its elements.\n    \"\"\"\n    result = []\n    for i in range(1, len(list1)+1):\n        result.extend(list(combinations(list1, i)))\n    return result\n",
        "test": "assert combinations_list([1, 2]) == [(1,), (2,), (1, 2)] # Combinations of length 1 and 2 for [1, 2]",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(max_product, result)\n        \n    return result\n",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0 # should be 0 (all numbers have at least one zero)",
        "num_ids": 1196,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    \n    # check if all values are same\n    if values.count(values[0]) == len(values):\n        return True\n    else:\n        return False\n",
        "test": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty_keys = []\n    for key in dict1:\n        if not dict1[key]:\n            empty_keys.append(key)\n    for key in empty_keys:\n        dict1.pop(key)\n    return dict1\n",
        "test": "assert drop_empty({}) == {} # empty dict should return empty dict",
        "num_ids": 789,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def max_product(arr):    \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = 1\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n        \n    return max_product\n",
        "test": "assert max_product([5, 4, 3, 2, 1]) == 120 # increasing subsequence is [1, 2], max product is 1 * 2 = 2",
        "num_ids": 1503,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i + 1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1,2,3,4,5)) == (3, 5, 7, 9)",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3], 5) == 1",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4]) == True",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)\n",
        "test": "assert tuple_intersection((\"apple\", \"banana\", \"orange\"), (\"banana\", \"orange\", \"grape\")) == (\"banana\", \"orange\")",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char(\"world\", \"o\", \"z\") == \"wzrld\"",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert dictionary items to a list of (key, value) tuples\n    items = dict1.items()\n    # Sort the list by value\n    sorted_items = sorted(items, key=lambda x: x[1])\n    # Convert the sorted list back to a dictionary\n    sorted_dict = dict(sorted_items)\n    # Return the sorted dictionary\n    return sorted_dict\n",
        "test": "assert sort_counter(Counter({'a': 5, 'b': 3, 'c': 7})) == Counter({'c': 7, 'a': 5, 'b': 3})",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return 0\n    else:\n        return max(nums) + min(nums)\n",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6 # smallest and largest values are 1 and 5 respectively, sum = 6 ",
        "num_ids": 708,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower('Hello') == 'hello'",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n",
        "test": "assert remove_lowercase(\"abc\") == \"\"  # Test case 1",
        "num_ids": 528,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Returns the first digit of a positive integer n.\n    \"\"\"\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 427,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2 != 0:\n            result.append(num)\n    return result\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of the first n natural numbers\n    sum_n = n*(n+1)//2\n    \n    # Calculate the sum of cubes of the first n natural numbers\n    sum_n_cubes = (n*(n+1)//2)**2\n    \n    # Calculate the difference between the two sums\n    diff = sum_n_cubes - sum_n**2\n    \n    # Return the difference\n    return diff\n",
        "test": "assert difference(1) == 0 # The difference between the sum of cubes of the first 1 natural number and the sum of the first 1 natural number is 0",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j]) % 2 != 0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1, 2, 3, 4, 5], 5) == 6",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n    diff = [abs(a - b) for a, b in zip(num1, num2)]\n    return sum(diff)\n",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(max_ending_here + a[i], a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n",
        "test": "assert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6",
        "num_ids": 1099,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples using + operator\n    concatenated_tup = test_tup1 + test_tup2\n    # Convert the concatenated tuple to a set to remove duplicates\n    set_of_union = set(concatenated_tup)\n    # Convert the set back to a tuple and sort it\n    sorted_tuple = tuple(sorted(set_of_union))\n    # Return the sorted tuple\n    return sorted_tuple\n",
        "test": "assert union_elements((1,2,3),(2,3,4)) == (1,2,3,4)",
        "num_ids": 953,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4 # longest sublist has length 4",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'  # create a regex pattern to match text between quotation marks\n    matches = re.findall(pattern, text)  # find all matches in the text\n    return matches  # return a list of matched values\n",
        "test": "assert extract_values('') == []",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3], 3) == 3 ",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and iterate through each character\n    digits = str(n)\n    total = 0\n    for digit in digits:\n        # Add the integer value of the character to the total\n        total += int(digit)\n    return total\n",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function checks if a list is sorted or not.\n    \"\"\"\n    return all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True  # positive case",
        "num_ids": 585,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        result.append(sorted_sublist)\n    return result\n",
        "test": "assert sort_sublists([['apple', 'banana', 'orange'], ['dog', 'cat', 'bird'], ['egg', 'spam', 'ham']]) == [['apple', 'banana', 'orange'], ['bird', 'cat', 'dog'], ['egg', 'ham', 'spam']]",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] # original list should be returned as it is",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for j in unique_list:\n        product *= j\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120 # positive test case",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    side_area = 2*pi*r*h\n    top_area = pi*r**2\n    total_area = 2*pi*r*h + pi*r**2\n    return total_area\n",
        "test": "assert surfacearea_cylinder(4,5) == 4*5*3+4*5*2*3 # surface area of cylinder with r=4, h=5",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # convert lists to strings to be able to use the 'in' operator\n    A_str = ''.join([str(x) for x in A])\n    B_str = ''.join([str(x) for x in B])\n    # check if B is a substring of A\n    return B_str in A_str\n",
        "test": "assert is_Sub_Array([1, 2, 3], [1, 2]) == True",
        "num_ids": 794,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    elif n % 10 == 0:\n        return 0\n    else:\n        return last_Digit_Factorial(n-1)\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            result.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            result.append(element)\n    return tuple(result)\n",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3)) == ()",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        if isinstance(tup, tuple):\n            sub_result = []\n            for item in tup:\n                if even_fnc(item):\n                    sub_result.append(item)\n            result.append(tuple(sub_result))\n        elif even_fnc(tup):\n            result.append(tup)\n    return tuple(result)\n",
        "test": "assert even_ele((1,2,3,4), lambda x: x % 2 == 0) == (2, 4) # returns only even elements of the tuple",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*b + 4*s*b/2\n",
        "test": "assert surface_Area(10,5) == 200",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 582,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        # Calculate the catalan number using the formula\n        c = 1\n        for i in range(2, num+1):\n            c *= (num + i) / i\n        return round(c)\n",
        "test": "assert catalan_number(1) == 1 ",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.span()\n    else:\n        return None\n",
        "test": "assert find_adverbs(\"He sprinted towards home quickly.\") == (\"quickly\", [14])",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return min_heap\n",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    new_list = second_part + first_part\n    return new_list\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3) # Test case 1",
        "num_ids": 409,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        root = int(num ** 0.5)\n        if root * root == num:\n            squares.append(num)\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The magnitude of the vector.\n    theta (float): The angle between the vector and the positive x-axis in radians.\n\n    Returns:\n    tuple: The rectangular coordinates (x, y).\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n",
        "test": "assert polar_rect(0, 0) == (0, 0)  # (0, 0) is the origin",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first_elem = newList[0]\n        last_elem = newList[-1]\n        newList[0] = last_elem\n        newList[-1] = first_elem\n        return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1] # test case 1",
        "num_ids": 746,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function calculates the binomial coefficient of nCk.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\ndef sum_of_product(n, k):\n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(k+1):\n        result += binomial_Coeff(n, i)\n    return result\n",
        "test": "assert binomial_Coeff(5,3) == 10 # (5! / (3! * 2!)) = 10",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)\n",
        "test": "assert removezero_ip(\"192.168.010.001\") == \"192.168.10.1\"",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_found = False\n    odd_found = False\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and not even_found:\n            even_num = num\n            even_found = True\n        elif num % 2 != 0 and not odd_found:\n            odd_num = num\n            odd_found = True\n        \n        if even_found and odd_found:\n            break\n    \n    if even_found and odd_found:\n        return abs(even_num - odd_num)\n    else:\n        return None\n",
        "test": "assert diff_even_odd([1, 3, 5, 7]) == None # None, since there are no even numbers in the list",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the strings into lists for easier manipulation\n    list1 = list(str1)\n    list2 = list(str2)\n\n    # Initialize the count of swaps to 0\n    count = 0\n\n    # Loop through the lists and swap the values if they are not equal\n    for i in range(len(list1)):\n        if list1[i] != list2[i]:\n            count += 1\n            j = i+1\n            while j < len(list1) and list1[j] == list1[i]:\n                j += 1\n            if j < len(list1):\n                list1[i], list1[j] = list1[j], list1[i]\n\n    # Return the count of swaps required\n    return count\n",
        "test": "assert min_Swaps(\"10101\", \"10111\") == 2",
        "num_ids": 1609,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "test": "assert tuple_size((1,)) == sys.getsizeof(1)",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if k>n1+n2:\n        return None\n    if n1>n2:\n        return find_kth(arr2, arr1, k)\n    if n1==0:\n        return arr2[k-1]\n    if k==1:\n        return min(arr1[0], arr2[0])\n    idx1 = min(k//2, n1)-1\n    idx2 = k-idx1-2\n    if arr1[idx1]<arr2[idx2]:\n        return find_kth(arr1[idx1+1:], arr2, k-idx1-1)\n    else:\n        return find_kth(arr1, arr2[idx2+1:], k-idx2-1)\n",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 5) == 5",
        "num_ids": 1467,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize sum as 0\n    sum = 0\n    \n    # Find the number of digits\n    num_of_digits = len(str(number))\n    \n    # Iterate through each digit and add its power to the sum\n    for digit in str(number):\n        sum += int(digit) ** num_of_digits\n    \n    # Check if the number is equal to the sum of its digits raised to the power of the number of digits\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_average(number):\n    \"\"\"\n    This function takes in a number and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    if number <= 0:\n        return \"Number should be a positive integer.\"\n    else:\n        sum = 0\n        for i in range(1, number + 1):\n            sum += i\n        average = sum / number\n        return sum, average\n",
        "test": "assert sum_average(1) == (1, 1.0)",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(10) == True",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # creating a dictionary to store the frequency of each character\n    freq_dict = {}\n\n    # iterating over the string and updating the frequency in the dictionary\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # iterating over the string again to find the first repeated character\n    for char in str1:\n        if freq_dict[char] > 1:\n            return char\n\n    # returning None if no character is repeated\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n    \n    index = 1\n    while index < len(ludic):\n        j = index + 1\n        while j < len(ludic):\n            if ludic[j] % ludic[index] == 0:\n                ludic.remove(ludic[j])\n            else:\n                j += 1\n        index += 1\n        \n    return ludic\n",
        "test": "assert get_ludic(1) == [1]  # ludic number 1",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return ' '.join(words)\n",
        "test": "assert reverse_words(\"Hello world\") == \"world Hello\"",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True  # 2 is a prime number",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = math.radians(degree)\n    return rad\n",
        "test": "assert radian_degree(360) == 2 * math.pi # 360 degrees is equivalent to 2pi radians",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert find_literals(\"Hello World!\", \"llo\") == (\"llo\", 2, 5)",
        "num_ids": 783,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 610,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Create a new list without the k'th element\n    new_list = []\n    for i in range(len(list1)):\n        if i != L:\n            new_list.append(list1[i])\n    return new_list\n",
        "test": "assert remove_kth_element([], 0) == [] # test empty list",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of the n'th column.\n    \"\"\"\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            max_value = max(max_value, row[N])\n    return max_value\n",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == 7 # check the first column",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 1000,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Iterate through the list and add each value to the total\n    for i in test_list:\n        total += i\n        \n    # Return the cumulative sum\n    return total\n",
        "test": "assert cummulative_sum([1,2,3]) == 6",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        result.append(sum(tup)/len(tup))\n    return result\n",
        "test": "assert average_tuple(((1,2,3), (4,5,6), (7,8,9))) == [2.0, 5.0, 8.0]",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n",
        "test": "assert tuple_modulo((2, 4, 5), (3, 3, 2)) == (2, 1, 1) # Test case 1",
        "num_ids": 924,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif steps == 0 or steps < d:\n        return -1\n    elif steps == d:\n        return 1\n    else:\n        # Calculate the minimum number of jumps required\n        res = min_Jumps(steps, d-1) + 1\n        # Calculate the maximum number of jumps required\n        if d > 0:\n            max_jumps = steps // d\n            res = min(res, max_jumps + min_Jumps(steps % d, d))\n        return res\n",
        "test": "assert min_Jumps(2, 1) == 1 # jumping from (2, 0) to (1, 0) requires 1 jump",
        "num_ids": 1015,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            result.append(0)\n        except IndexError:\n            result.append(0)\n    return result\n",
        "test": "assert div_list([1, 2, 3], [2, 2, 3]) == [0.5, 1.0, 1.0]",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Remove all non-digit characters and store them in a list\n    non_digits = [c for c in test_str if not c.isdigit()]\n    # Remove all digit characters and store them in a list\n    digits = [c for c in test_str if c.isdigit()]\n    # Combine the two lists in the order non-digits first, digits second\n    result = ''.join(non_digits + digits)\n    return result\n",
        "test": "assert move_num('') == ''",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def largest_subset(a):\n    a = sorted(a)\n    n = len(a)\n    subset = []\n    for i in range(n):\n        if not subset:\n            subset.append(a[i])\n        elif all(a[i] % x == 0 for x in subset):\n            subset.append(a[i])\n    return len(subset)\n",
        "test": "assert largest_subset([]) == 0 # empty list",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Find the median of two sorted lists of the same size.\n    \"\"\"\n    i = j = k = 0\n    median = []\n\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median.append(arr1[i])\n            i += 1\n        else:\n            median.append(arr2[j])\n            j += 1\n        k += 1\n\n        if k == n // 2:\n            if n % 2 == 0:\n                return (median[-1] + median[-2]) / 2\n            else:\n                return median[-1]",
        "test": "assert get_median([1, 3, 5], [2, 4, 6, 7], 4) == 4 ",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([2,3,4], 2) == [4,9,16] # Test case 1",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 342,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) <= 1:  # If the list has only one element or is empty, no need to swap\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]  # Swap first and last elements\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1] # Test case 1",
        "num_ids": 792,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes the radius of a semicircle as input and returns the area of the largest triangle that can be inscribed in it.\n    '''\n    # Using the formula for the area of a triangle, we can find the area of the triangle with base r and height r.\n    # This gives us the largest triangle that can be inscribed in the semicircle.\n    area = 0.5 * r ** 2 * math.sin(math.pi / 3)\n    return area",
        "test": "assert triangle_area(1) == 0.5 * (1 ** 2) * (3 ** 0.5) / 2 ",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    missing = start\n    \n    for i in range(start, end):\n        if array[i] == missing:\n            missing += 1\n        elif array[i] > missing:\n            return missing\n    \n    return missing\n",
        "test": "assert find_First_Missing([0,1,2,3,5]) == 4",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 628,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def Split(list):  \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n",
        "test": "assert Split([2, 5, 8, 3, 6]) == [2, 8, 6] ",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    adjacent_coordinates = [(row+1, col), (row-1, col), (row, col+1), (row, col-1)]\n    return [coord for coord in adjacent_coordinates if coord in sub]\n",
        "test": "assert adjac((1,2)) == [(0,2),(1,1),(1,3),(2,2)]",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replaces whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(' ', '_').replace('_', ' ')\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create a new list to store non-zero elements\n    result = []\n    # Iterate over the original list\n    for num in num_list:\n        # If the element is not zero, add it to the result list\n        if num != 0:\n            result.append(num)\n    # Append the required number of zeroes to the result list\n    result += [0] * num_list.count(0)\n    return result\n",
        "test": "assert move_zero([0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]",
        "num_ids": 1053,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Traverse through all the pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the xor of the pair and add it to the sum\n            sum += arr[i] ^ arr[j]\n            \n    # Return the sum\n    return sum\n",
        "test": "assert pair_xor_Sum([5,6,7,8,9],5) == 137 # pairs are (5,6),(5,7),(5,8),(5,9),(6,7),(6,8),(6,9),(7,8),(7,9),(8,9)",
        "num_ids": 1206,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert heap_sort([]) == []  # empty list",
        "num_ids": 622,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True ",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def wind_chill(v, t):\n    '''\n    Calculate the wind chill index in celsius rounded to the next integer,\n    given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert wind velocity from km/h to m/s\n    v_ms = v / 3.6\n    # Calculate wind chill index using 13.12 + 0.6215*T - 11.37*v^0.16 + 0.3965*T*v^0.16 equation\n    wci = 13.12 + 0.6215*t - 11.37*(v_ms**0.16) + 0.3965*t*(v_ms**0.16)\n    # Round index to the next integer\n    wci_rounded = round(wci)\n    return wci_rounded\n",
        "test": "assert wind_chill(10, 0) == 0",
        "num_ids": 1088,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam([\"Alice\", \"Bob\", \"charlie\", \"David\", \"eva\"]) == 10",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_parenthesis(string):\n    \"\"\"\n    This function removes the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    return re.sub(r'\\([^)]*\\)', '', string)\n",
        "test": "assert remove_parenthesis('hello (world)') == 'hello '",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal = n * (n + 1) // 2\n    return nonagonal\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)  # find all words in the text\n    for word in words:\n        if 'z' in word[1:-1]:  # check if 'z' is present in the middle of the word\n            return True\n    return False\n",
        "test": "assert text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog.\") == True",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return \"Invalid input!\"\n    else:\n        # reversing the array upto k elements\n        for i in range(k//2):\n            input[i], input[k-i-1] = input[k-i-1], input[i]\n        return input\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 2) == [2, 1, 3, 4, 5] ",
        "num_ids": 1028,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert add_dict_to_tuple(('apple', 'banana'), {'fruit': 'apple', 'vegetable': 'carrot'}) == ('apple', 'banana', {'fruit': 'apple', 'vegetable': 'carrot'})",
        "num_ids": 828,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1] / (n ** 2)\n",
        "test": "assert maxAverageOfPath([[1,1,1],[1,1,1],[1,1,1]]) == 2.0",
        "num_ids": 1579,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    return filtered_students\n",
        "test": "assert filter_data({\"Alice\": (160, 50), \"Bob\": (170, 60), \"Charlie\": (150, 45)}, 165, 55) == {\"Bob\": (170, 60)}",
        "num_ids": 1333,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,2,3], [4,5,6]) == 0",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Calculate the base to the power\n    result = base ** power\n\n    # Convert the result to a string and iterate over each character in the string\n    digit_sum = 0\n    for digit in str(result):\n        digit_sum += int(digit)\n\n    return digit_sum\n",
        "test": "assert power_base_sum(3, 4) == 9",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches\n",
        "test": "assert extract_quotation('') == [] # empty string",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12)",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]",
        "num_ids": 752,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, _ in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([1, 1, 2, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 792,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n",
        "test": "assert lateralsurface_cone(2, 4) == math.pi * 2 * math.sqrt(2**2 + 4**2)",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 732,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,.\\s]+'\n    return re.sub(pattern, ':', text)\n",
        "test": "assert replace_specialchar(\"hello world\") == \"hello:world\"",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 1111,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            ans += prod\n    return ans\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 0, 1]) == 0 # Test case 2",
        "num_ids": 1187,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit.\n    '''\n    # Get the first and last bits\n    first_bit = (n & 1)\n    last_bit = (n & 2)\n    \n    # Toggle the middle bits\n    middle_bits = n ^ (n & 2)\n    \n    # Combine the first, middle, and last bits\n    result = (first_bit | middle_bits | last_bit)\n    \n    return result",
        "test": "assert set_middle_bits(27) == 31 # Toggle the middle bits of 11011, which gives 11111, or 31 in decimal",
        "num_ids": 1210,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx\n",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 0) == 0",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('aeiou') == True",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1/2\n    else:\n        return 1/n + geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1/2",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Initialize variables\n    index = 1\n    triangular_number = 0\n    \n    # Calculate triangular number for given index\n    while len(str(triangular_number)) < n:\n        triangular_number = (index * (index + 1)) // 2\n        index += 1\n    \n    # Return the index of the smallest triangular number with n digits\n    return index",
        "test": "assert find_Index(1) == 1",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict\n",
        "test": "assert tuple_to_dict(('apple', 'red', 'banana', 'yellow', 'orange', 'orange')) == {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}  # Test case 1",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Removing all white spaces from the string\n    s = s.replace(\" \", \"\")\n    \n    # If the length of the string is 0 or 1, all characters are the same\n    if len(s) <= 1:\n        return True\n    \n    # Comparing the first character with the rest of the characters\n    for i in range(1, len(s)):\n        if s[i] != s[0]:\n            return False\n    \n    return True\n",
        "test": "assert all_Characters_Same('aaa') == True",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron given the length of one of its sides.\n    '''\n    area = ((3 ** 0.5) / 4) * (side ** 2)\n    return area\n",
        "test": "assert area_tetrahedron(2) == 2.194881414918264",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3] # rotate list by 2 to the right",
        "num_ids": 995,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(100, 200) == [108, 120, 132, 144, 156, 168, 180, 192]",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2 * (a/360) * math.pi)\n        return area\n",
        "test": "assert sector_area(10, 45) == 10**2 * math.pi * 45/360 # check for a 45 degree angle",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create three matrices to store lengths of longest common suffixes of substrings.\n    # The first matrix is for X and Y, the second matrix is for Y and Z, and the third matrix is for X and Z.\n    L1 = [[0] * (n + 1) for i in range(m + 1)]\n    L2 = [[0] * (o + 1) for i in range(n + 1)]\n    L3 = [[0] * (o + 1) for i in range(m + 1)]\n\n    # Fill L1 matrix\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L1[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L1[i][j] = L1[i - 1][j - 1] + 1\n            else:\n                L1[i][j] = max(L1[i - 1][j], L1[i][j - 1])\n\n    # Fill L2 matrix\n    for i in range(n + 1):\n        for j in range(o + 1):\n            if i == 0 or j == 0:\n                L2[i][j] = 0\n            elif Y[i - 1] == Z[j - 1]:\n                L2[i][j] = L2[i - 1][j - 1] + 1\n            else:\n                L2[i][j] = max(L2[i - 1][j], L2[i][j - 1])\n\n    # Fill L3 matrix\n    for i in range(m + 1):\n        for j in range(o + 1):\n            if i == 0 or j == 0:\n                L3[i][j] = 0\n            elif X[i - 1] == Z[j - 1]:\n                L3[i][j] = L3[i - 1][j - 1] + 1\n            else:\n                L3[i][j] = max(L3[i - 1][j], L3[i][j - 1])\n\n    # Find the length of longest common subsequence\n    lcs = L1[m][n] + L2[n][o] + L3[m][o] - L1[m][n] - L2[n][o] - L3[m][o]\n\n    return lcs\n",
        "test": "assert lcs_of_three(\"AGGTAB\",\"GXTXAYB\",\"GTAB\") == \"GTAB\" # Test case 2",
        "num_ids": 3116,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)\n",
        "test": "assert capital_words_spaces(\"The quick brown Fox\") == \"The quick brown Fox\"",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_int = [int(num) for num in nums_str]\n    nums_int.sort()\n    nums_str = [str(num) for num in nums_int]\n    return nums_str\n",
        "test": "assert sort_numeric_strings([]) == []",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([], ()) == []",
        "num_ids": 573,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n\n    # Check if the given array represents min heap\n    for i in range(n // 2, n):\n        if arr[i] < arr[i // 2]:\n            return False\n\n    return True\n",
        "test": "assert check_min_heap_helper([5, 4, 3, 2, 1], 1) == False",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    \n    # sorting the list in ascending order\n    test_list.sort()\n    \n    # creating a new list to store the minimum k records\n    min_list = []\n    \n    # iterating through the first k elements of the sorted list\n    for i in range(K):\n        \n        # appending each element to the min_list\n        min_list.append(test_list[i])\n        \n    # returning the min_list\n    return min_list\n",
        "test": "assert min_k([(5, 'banana'), (1, 'apple'), (2, 'orange'), (4, 'pear'), (3, 'grape')], 2) == [(1, 'apple'), (2, 'orange')]",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list\n",
        "test": "assert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def second_smallest(numbers):\n    '''\n    Find the second smallest number in a list.\n    '''\n    # Remove duplicates and sort the list in ascending order\n    sorted_numbers = sorted(set(numbers))\n    # If the list has at least two elements, return the second one\n    if len(sorted_numbers) >= 2:\n        return sorted_numbers[1]\n    # If the list has less than two elements, return None\n    else:\n        return None\n",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n",
        "test": "assert text_match_zero_one('ab') # test case 1",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary\n    dict1 = {}\n    \n    # Loop through the list\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it already exists in the dictionary\n        if tuple(sublist) in dict1:\n            # If it exists, increment its count by 1\n            dict1[tuple(sublist)] += 1\n        else:\n            # If it does not exist, add it to the dictionary with a count of 1\n            dict1[tuple(sublist)] = 1\n    \n    return dict1\n",
        "test": "assert unique_sublists([[1, 2], [2, 3], [3, 4], [1, 2]]) == {(1, 2): 2, (2, 3): 1, (3, 4): 1}",
        "num_ids": 1338,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if round(float(num), 2) == float(num):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal(\"123.45\") == True",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1,1,1,1,1]) == True # Test case 1",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 2:\n        return False\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True  # April has 30 days",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1",
        "num_ids": 946,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"123\") == 3",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        prime_factors = []\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                prime_factors.append(i)\n                prime_factors.append(num//i)\n        if len(prime_factors) == 0:\n            count += 1\n        else:\n            for factor in prime_factors:\n                if factor not in prime_factors:\n                    count += 1\n                    break\n        num += 1\n    return num - 1\n",
        "test": "assert is_polite(1) == 1",
        "num_ids": 907,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n",
        "test": "assert pair_wise([]) == []",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Counts the number of pairs whose sum is equal to the given sum.\n    \n    Args:\n    arr: A list of numbers.\n    sum: The target sum.\n    \n    Returns:\n    The number of pairs whose sum is equal to the given sum.\n    \"\"\"\n    arr.sort()\n    count = 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        current_sum = arr[left] + arr[right]\n        if current_sum == sum:\n            count += 1\n            left += 1\n            right -= 1\n        elif current_sum < sum:\n            left += 1\n        else:\n            right -= 1\n    return count\n",
        "test": "assert get_pairs_count([1,2,3,4,5], 6) == 2  # (1,5) and (2,4)",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1,2,3],[1,2,3]) == []",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 ",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    # Traversing the Expression\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            # Push the element in the stack\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            # if current character is not opening bracket, then it must be closing.\n            # So pop the top element from stack, which will be the opening bracket.\n            # And then match the two brackets\n            if not stack:\n                return False\n            opening_bracket = stack.pop()\n            if opening_bracket == '(':\n                if char != \")\":\n                    return False\n            elif opening_bracket == '{':\n                if char != \"}\":\n                    return False\n            elif opening_bracket == '[':\n                if char != \"]\":\n                    return False\n        else:\n            continue\n\n    # Checking if all brackets are closed\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert check_expression(\"(a+b)*(c+d)\") == True",
        "num_ids": 1251,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            test_str = test_str.replace(word, \"\")\n    return test_str.strip()\n",
        "test": "assert remove_length(\"\", 0) == \"\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append((match.start(), match.end()))\n    if len(positions) == 0:\n        return None\n    else:\n        return positions\n",
        "test": "assert occurance_substring(\"Hello World\", \"abc\") == None # should return None since \"abc\" does not occur in the string.",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True",
        "test": "assert odd_position([1, 2, 4, 4, 5, 6, 8, 9]) == False",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1:\n            if test_str[i] not in vowels and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n                count += 1\n    return count\n",
        "test": "assert count_vowels(\"abc\") == 0 # no vowels in the string",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for i in arr:\n        if arr.count(i) == 1:\n            unique_elements.append(i)\n    return sum(unique_elements)\n",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        if tuple(sublist) not in result:\n            result[tuple(sublist)] = 1\n        else:\n            result[tuple(sublist)] += 1\n    return result\n",
        "test": "assert unique_sublists([1, 2, 2, 3]) == {(1, 2, 3): 1, (1, 2): 1, (2, 2): 1, (2, 3): 1}",
        "num_ids": 1012,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    all_combinations = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            all_combinations.append(combo)\n    return all_combinations\n",
        "test": "assert find_combinations([1, 2, 3]) == [(1, 2)]",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count",
        "test": "assert count_divisors(12) == 6 # check for even count of divisors",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            total += sum(arr[i:j+1])\n    return total\n",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6]) == 27",
        "num_ids": 767,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    saturation = round(saturation * 100)\n\n    value = round(cmax * 100)\n\n    return hue, saturation, value\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) # black",
        "num_ids": 2011,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num * odd_num\n",
        "test": "assert mul_even_odd([3, 5, 7, 9, 11, 13]) == None",
        "num_ids": 1052,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace('(', '')\n    test_str = test_str.replace(')', '')\n    test_str = test_str.replace(' ', '')\n    test_list = test_str.split(',')\n    return tuple(map(int, test_list))\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\n",
        "test": "assert right_insertion([1,2,3,4,5], 6) == 5",
        "num_ids": 545,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    return bool(match)\n",
        "test": "assert text_match_three('abbb')",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n",
        "test": "assert new_tuple([1, 2, 3], \"hello\") == (1, 2, 3, \"hello\")",
        "num_ids": 637,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 3, 4, 5, 6, 7, 9]) == False",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for element in test_tup:\n        if type(element) != tuple:\n            result.append(element)\n    return tuple(result)\n",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count\n",
        "test": "assert count_list([1, 2, 3]) == 0 # Test case when input is not a list",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    result = -1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            start = mid + 1\n            \n        elif arr[mid] < x:\n            start = mid + 1\n            \n        else:\n            end = mid - 1\n            \n    return result\n",
        "test": "assert last([1, 2, 3, 4, 4, 5], 6) == -1",
        "num_ids": 1144,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    return bool(re.search(pattern, text))\n",
        "test": "assert text_starta_endb('axyzb') == True",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dictionary:\n        sum += dictionary[key]\n    return sum\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_odd(1) == 1 ",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def _sum(arr):\n    \"\"\"\n    Returns the sum of the elements in the given array.\n    \"\"\"\n    return sum(arr)\n",
        "test": "assert _sum([1,2,3,4,5]) == 15",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert n and d to binary strings\n    n_binary = format(n, '032b')\n    d_binary = format(d, '032b')\n\n    # extract the last d bits from n\n    last_d_bits = n_binary[-d:]\n\n    # shift the last d bits to the front\n    rotated_bits = last_d_bits + n_binary[:-d]\n\n    # convert the binary string back to an integer\n    rotated_integer = int(rotated_bits, 2)\n\n    return rotated_integer",
        "test": "assert left_rotate(2, 32) == 2 # rotate 32 bits to the left",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 2, 3) == 0  # No equal numbers",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def count_rotation(arr):    \n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    pivot = find_pivot(arr, 0, n-1)\n    \n    if pivot == -1:\n        return 0\n    \n    return (pivot+1)\n\n\ndef find_pivot(arr, low, high):\n    if high < low:\n        return -1\n    if high == low:\n        return low\n    \n    mid = int((low + high)/2)\n    if mid < high and arr[mid] > arr[mid+1]:\n        return mid\n    if mid > low and arr[mid] < arr[mid-1]:\n        return mid-1\n    \n    if arr[low] >= arr[mid]:\n        return find_pivot(arr, low, mid-1)\n    \n    return find_pivot(arr, mid+1, high)\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1009,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_perfect_square(10) == False",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 3, 4]) == True # product is 24 which is even",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]",
        "num_ids": 944,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n",
        "test": "assert max_run_uppercase(\"Hello World\") == 1  # Only one uppercase character in the string",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([2, 4, 6, 8, 10]) == None",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K(('cat', 'dog', 'elephant', 'lion'), 'k') == False # should return False for a tuple without 'k'",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1) != len(test_tup2):\n        return \"Both tuples should be of same length.\"\n    else:\n        result = True\n        for i in range(len(test_tup1)):\n            if test_tup2[i] >= test_tup1[i]:\n                result = False\n                break\n        return result\n",
        "test": "assert check_smaller((2,4,6), (1,3,5)) == True",
        "num_ids": 773,
        "indeed": true
    }
]