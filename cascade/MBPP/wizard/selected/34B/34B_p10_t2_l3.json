[
    {
        "number": 2,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)\n",
        "test": "assert similar_elements((1, 2, 3), (2, 3, 4)) == {2, 3}",
        "num_ids": 1462,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False\n",
        "test": "assert is_not_prime(4) == True # 4 is not a prime number",
        "num_ids": 1297,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    min_heap = []\n    for num in nums:\n        if len(min_heap) < n:\n            hq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                hq.heappushpop(min_heap, num)\n    \n    largest_nums = []\n    while min_heap:\n        largest_nums.append(hq.heappop(min_heap))\n    \n    return largest_nums[::-1]\n",
        "test": "assert heap_queue_largest([], 0) == []",
        "num_ids": 2256,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0:\n        return False\n    return (x & (x-1)) == 0\n",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 989,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog\") == ['quick', 'brown', 'jumps', 'over', 'lazy']",
        "num_ids": 1416,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n",
        "test": "assert square_nums([1, 2, 3]) == [1, 4, 9]",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0)\n    required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return None\n",
        "test": "assert find_Rotations(\"hello\") == 0 # no rotation needed for the same string",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        if first_occ == last_occ:\n            return s.replace(ch, '', 1)\n        else:\n            return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    else:\n        return s\n",
        "test": "assert remove_Occ('','') == ''",
        "num_ids": 1805,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sum = []\n    for row in M:\n        row_sum.append(sum(row))\n    sorted_matrix = [x for _, x in sorted(zip(row_sum, M))]\n    return sorted_matrix\n",
        "test": "assert sort_matrix([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 2520,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n",
        "test": "assert find_Volume(2, 3, 4) == 12",
        "num_ids": 968,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 1358,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(5) == 20  # Test case 1: side length 5, perimeter 20 ",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def remove_chars(first_str, second_str):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a boolean list to mark the characters present in the second string\n    present = [False] * NO_OF_CHARS\n    for char in second_str:\n        present[ord(char)] = True\n    \n    # Create a string to store the result\n    result = \"\"\n    for char in first_str:\n        if not present[ord(char)]:\n            result += char\n    \n    return result\n",
        "test": "assert str_to_list(\"\") == []",
        "num_ids": 1999,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 1390,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(10) == False",
        "num_ids": 1080,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rev(num):\n    \"\"\"\n    Checks if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse_num = 0\n    original_num = num\n    \n    while num > 0:\n        remainder = num % 10\n        reverse_num = (reverse_num * 10) + remainder\n        num = num // 10\n    \n    if (2 * reverse_num) - 1 == original_num:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(13) == False",
        "num_ids": 1410,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the given list in descending order\n    arr.sort(reverse=True)\n    # Convert the sorted list to a string\n    num_str = ''.join(map(str, arr))\n    # Check if the number is a valid integer\n    if int(num_str) > 0:\n        return int(num_str)\n    else:\n        return None\n",
        "test": "assert find_Max_Num([5, 9, 3, 7, 7]) == 97753",
        "num_ids": 1515,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:  # if both are positive\n        return False\n    elif x < 0 and y < 0:  # if both are negative\n        return False\n    else:  # if one is positive and the other is negative\n        return True\n",
        "test": "assert opposite_Signs(5, -10) == True",
        "num_ids": 1046,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n - 1)",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if sum(int(c) for c in sub) == len(sub):\n                count += 1\n    return count",
        "test": "assert count_Substrings(\"123\") == 1  # one substring: \"123\"",
        "num_ids": 1597,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert smallest_num([3, 2, 1, 4, 5]) == 1",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1874,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n",
        "test": "assert subject_marks([('A', 50), ('B', 75), ('C', 25)]) == [('C', 25), ('A', 50), ('B', 75)]",
        "num_ids": 1745,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1,2,3]) == 6",
        "num_ids": 1403,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([]) == 0",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if not A:\n        return False\n    increasing = decreasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            increasing = False\n        elif A[i] < A[i+1]:\n            decreasing = False\n    return increasing or decreasing\n",
        "test": "assert is_Monotonic([1,2,3,4]) == True",
        "num_ids": 2092,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_len = len(l)\n    s_len = len(s)\n    for i in range(l_len - s_len + 1):\n        if l[i:i+s_len] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1, 2, 3], [1, 2]) == True",
        "num_ids": 1489,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Extracting all the lengths of tuples in Input\n    lengths = [len(tup) for tup in Input]\n    \n    # Checking if all the lengths are equal\n    if len(set(lengths)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_equal_tuple([(1, 2), (3, 4), (5, 6)]) == True",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n\n        if gap <= 1:\n            sorted = True\n            gap = 1\n\n        i = 0\n        j = gap\n\n        while j < n:\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                sorted = False\n\n            i += 1\n            j += 1\n\n    return nums\n",
        "test": "assert comb_sort([]) == []",
        "num_ids": 2331,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    while(i*i <= n):\n        j = n - i*i\n        if((int(j**0.5))**2 == j):\n            return True\n        i += 1\n    return False\n",
        "test": "assert dif_Square(11) == False",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if both arrays are of equal length\n    if len(colors) != len(patterns):\n        return False\n\n    # create a dictionary to store the color patterns\n    color_pattern = {}\n\n    # iterate through the patterns array and create a dictionary of color patterns\n    for i in range(len(patterns)):\n        if patterns[i] in color_pattern:\n            if color_pattern[patterns[i]] != colors[i]:\n                return False\n        else:\n            color_pattern[patterns[i]] = colors[i]\n\n    return True\n",
        "test": "assert is_samepatterns(['red', 'green', 'blue', 'orange', 'pink'], ['solid', 'stripes', 'dotted', 'stripes', 'dotted']) == False",
        "num_ids": 1733,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        flag = True\n        for num in tup:\n            if num % K != 0:\n                flag = False\n                break\n        if flag:\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(2, 3, 4, 6), (1, 2, 3, 4), (4, 8, 12, 16)], 2) == [(4, 8, 12, 16)]  # returns only the tuple (4, 8, 12, 16) as it has all elements divisible by 2",
        "num_ids": 2161,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(22) == True  # True",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the string is odd, else False.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len('hello') == True",
        "num_ids": 1020,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6",
        "test": "assert tetrahedral_number(1) == 1 ",
        "num_ids": 850,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * 1**3",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    char = sum % 26\n    if char == 0:\n        return 'Z'\n    else:\n        return chr(char + 64)\n",
        "test": "assert get_Char(\"a\") == 1",
        "num_ids": 1725,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            sequence.append(sequence[sequence[-1]] + sequence[i - sequence[-1]])\n        return sequence[-1]\n",
        "test": "assert sequence(1) == 1 # first number in the sequence is 1",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2",
        "test": "assert surfacearea_sphere(1) == 12.566370614359172",
        "num_ids": 1111,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'b': 20, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 2089,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 1, 2, 2, 3, 4]) == {1: 2, 2: 3, 3: 2, 4: 1}",
        "num_ids": 1741,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    i = N-1\n    while i >= 0:\n        if i < N and i != 0:\n            return i\n        i -= 1\n    return None\n",
        "test": "assert closest_num(1) == None",
        "num_ids": 1350,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log([\"apple\", \"banana\", \"cherry\"]) == 6 # \"cherry\" is the longest word with 6 letters",
        "num_ids": 1181,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # split the string into a list of words\n    words = str1.split()\n\n    # loop through each word in the list and check if it contains the substring\n    for word in words:\n        if sub_str in word:\n            return True\n\n    # if none of the words contain the substring, return False\n    return False\n",
        "test": "assert find_substring('hello world', 'abc') == False  # should return False since 'abc' is not present in the string",
        "num_ids": 1166,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    str_n = str(n)\n    is_increasing = False\n    is_decreasing = False\n    for i in range(len(str_n) - 1):\n        if int(str_n[i]) < int(str_n[i+1]):\n            is_increasing = True\n        elif int(str_n[i]) > int(str_n[i+1]):\n            is_decreasing = True\n        if is_increasing and is_decreasing:\n            return True\n    return False\n",
        "test": "assert is_undulating(1223) == False # if number is 1223, the function should return False",
        "num_ids": 1950,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert power(2,3) == 8",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(1, 3), (2, 2), (3, 4)]) == 2",
        "num_ids": 1443,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Find_Min_Length(lst):   \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2",
        "num_ids": 1730,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n and returns the number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "test": "assert frequency_lists([]) == {} # empty list returns empty dictionary",
        "num_ids": 2182,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Calculating the product of all numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # Dividing the product with the length of the list\n    result = product / len(numbers)\n    \n    return result\n",
        "test": "assert multiply_num([1, 2, 3]) == 2.0",
        "num_ids": 1200,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def decimal_to_binary(n):\n    '''\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 1212,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def next_smallest_palindrome(num):\n    # Check if num is already a palindrome\n    if str(num) == str(num)[::-1]:\n        # If it is, add 1 and continue checking\n        num += 1\n    # Keep incrementing num and checking if it's a palindrome\n    # until we find the next one\n    while not str(num) == str(num)[::-1]:\n        num += 1\n    # Return the next smallest palindrome\n    return num\n",
        "test": "assert next_smallest_palindrome(1232) == 1331",
        "num_ids": 2950,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1264,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_list = word.split('_')\n    camel_case_word = ''\n    for i in range(len(word_list)):\n        if i == 0:\n            camel_case_word += word_list[i].lower()\n        else:\n            camel_case_word += word_list[i].capitalize()\n    return camel_case_word\n",
        "test": "assert snake_to_camel('_snake_to_camel_') == 'SnakeToCamel'",
        "num_ids": 1432,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function returns the Eulerian number a(n, m).\n    \"\"\"\n    if n == 0 and m == 0:\n        return 1\n    elif n <= 0 or m <= 0:\n        return 0\n    else:\n        return (m * eulerian_num(n-1, m-1)) + (n * eulerian_num(n-1, m))",
        "test": "assert eulerian_num(0, 0) == 1 ",
        "num_ids": 1744,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "test": "assert sort_sublists([['apple', 'banana'], ['cat', 'dog', 'bird'], ['car', 'train', 'bike']]) != [['banana', 'apple'], ['cat', 'dog', 'bird'], ['bike', 'train', 'car']]",
        "num_ids": 1757,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, True]) == 3",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result = list(test_tup)\n    result.extend(test_list)\n    return tuple(result)\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3) # test case 1",
        "num_ids": 1419,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for i in range(len(num1)):\n        heapq.heappush(merged_list, num1[i])\n    for j in range(len(num2)):\n        heapq.heappush(merged_list, num2[j])\n    for k in range(len(num3)):\n        heapq.heappush(merged_list, num3[k])\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n    return sorted_list\n",
        "test": "assert merge_sorted_list([1,3,5],[2,4,6],[7,8,9]) != [1,2,3,4,5,6,7,9,8]",
        "num_ids": 3980,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def odd_Equivalent(s,n):\n    # Convert the binary string to a list of digits\n    digits = [int(d) for d in s]\n\n    # Rotate the list n times\n    for i in range(n):\n        digits.insert(0, digits.pop())\n\n    # Count the number of odd digits in the rotated list\n    count = sum(1 for d in digits if d % 2 == 1)\n\n    return count\n",
        "test": "assert odd_Equivalent('101', 3) == 2 # check for '101' rotated thrice",
        "num_ids": 2057,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Find the common elements in a nested list.\n    \"\"\"\n    # Get a set of all unique elements in the nested list\n    unique_elements = set([item for sublist in nestedlist for item in sublist])\n    \n    # Create a dictionary to keep track of the count of each element\n    counts = {elem: 0 for elem in unique_elements}\n    \n    # Iterate over each sublist in the nested list\n    for sublist in nestedlist:\n        # Iterate over each item in the sublist\n        for item in sublist:\n            # Increment the count for this element\n            counts[item] += 1\n    \n    # Find the elements that have a count equal to the number of sublists\n    common_elements = [elem for elem, count in counts.items() if count == len(nestedlist)]\n    \n    return common_elements\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []",
        "num_ids": 2082,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) != 0:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}]) == True",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 1068,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([]) == []",
        "num_ids": 1721,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()\n",
        "test": "assert string_to_list(\"Hello world\") == [\"Hello\", \"world\"]",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        print(\"Array too small\")\n        return None\n    elif n == 2:\n        if arr[0] == arr[1]:\n            print(\"No unique element found\")\n            return None\n        else:\n            return arr[0] if arr[0] != arr[1] else arr[2]\n    else:\n        for i in range(n-1):\n            if arr[i] != arr[i+1]:\n                if i == 0:\n                    return arr[i]\n                elif i == n-2:\n                    return arr[i+1]\n                elif arr[i-1] != arr[i]:\n                    return arr[i]\n                elif arr[i+1] != arr[i+2]:\n                    return arr[i+1]\n",
        "test": "assert search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7]) == 6 or 7",
        "num_ids": 2382,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    \n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product1 = abs(list1[i][0] * list1[j][1])\n            product2 = abs(list1[i][1] * list1[j][0])\n            product3 = abs(list1[i][1] * list1[j][1])\n            max_product = max(max_product, product1, product2, product3)\n            \n    return max_product\n",
        "test": "assert max_product_tuple([(1,-2), (3,4), (5,-6)]) == 12",
        "num_ids": 1961,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        '''\n        Helper function to check if a number is amicable or not.\n        '''\n        div_sum = sum(d for d in range(1, num // 2 + 1) if num % d == 0)\n        return num != div_sum and num == sum(d for d in range(1, div_sum // 2 + 1) if div_sum % d == 0)\n\n    amicable_numbers = [n for n in range(1, limit + 1) if is_amicable(n)]\n    return sum(amicable_numbers)\n",
        "test": "assert amicable_numbers_sum(300) == 504",
        "num_ids": 2522,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Returns the angle of a complex number in degrees.\n    '''\n    z = complex(a, b)\n    return cmath.phase(z) * 180 / cmath.pi\n",
        "test": "assert angle_complex(5, 0) == 0",
        "num_ids": 1114,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            if abs(count_0 - count_1) > max_diff:\n                max_diff = abs(count_0 - count_1)\n    return max_diff\n",
        "test": "assert find_length(\"11110000\") == 4 # max difference is between the substring \"1111\" and \"0000\"",
        "num_ids": 2142,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def gcd(a, b):\n    \"\"\"\n    Returns the greatest common divisor of two numbers.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find all divisors of a and b\n    divisors_a = [i for i in range(1, a+1) if a % i == 0]\n    divisors_b = [i for i in range(1, b+1) if b % i == 0]\n    # Find common divisors\n    common_divisors = set(divisors_a) & set(divisors_b)\n    # Return the sum of common divisors\n    return sum(common_divisors)\n",
        "test": "assert sum(24, 36) == 42  # Both 1, 2, 3, 4, 6, 12 are common divisors of 24 and 36, their sum is 42",
        "num_ids": 2250,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "test": "assert long_words(4, [\"hello\", \"world\", \"python\", \"programming\", \"test\"]) == [\"hello\", \"world\", \"python\", \"programming\"]",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    \n    # Calculate the sum of the first row\n    first_row_sum = sum(my_matrix[0])\n    \n    # Check if all the rows have the same sum\n    for row in my_matrix:\n        if sum(row) != first_row_sum:\n            return False\n    \n    # Calculate the sum of the first column\n    first_column_sum = sum(my_matrix[i][0] for i in range(len(my_matrix)))\n    \n    # Check if all the columns have the same sum\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[j][i] for j in range(len(my_matrix))) != first_column_sum:\n            return False\n    \n    # Calculate the sum of the diagonal\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diagonal_sum2 = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    \n    # Check if both diagonals have the same sum\n    if diagonal_sum1 != diagonal_sum2:\n        return False\n    \n    return True\n",
        "test": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 9]]) == False ",
        "num_ids": 3945,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    return max(count_dict, key=count_dict.get)\n",
        "test": "assert max_occurrences([1, 2, 3, 3, 2, 2, 2, 4]) == 2  # expected output 2, as 2 has the highest frequency",
        "num_ids": 1956,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    vowels_in_str = [c for c in str1 if c in vowels]\n    vowels_in_str.reverse()\n    new_str = ''\n    vowel_idx = 0\n    for c in str1:\n        if c in vowels:\n            new_str += vowels_in_str[vowel_idx]\n            vowel_idx += 1\n        else:\n            new_str += c\n    return new_str\n",
        "test": "assert reverse_vowels('hello') == 'holle'",
        "num_ids": 2251,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Use the join() method to concatenate the elements of the tuple into a string\n    return ''.join(str(i) for i in tup1)\n",
        "test": "assert tup_string(()) == ''",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            sum += num\n    # Return the sum of negative numbers\n    return sum\n",
        "test": "assert sum_negativenum([-1, 2, -3, 4, -5]) == -9 # test case 1",
        "num_ids": 1550,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Returns the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1 ",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def zero_count(nums):\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / (zeroes + non_zeroes)\n",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0.0",
        "num_ids": 1790,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True  # 1 can be represented as sum of non-zero powers of 2",
        "num_ids": 1943,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 1118,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result\n",
        "test": "assert extract_singly([]) == set()",
        "num_ids": 1620,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(arr, i):\n        start = 0\n        while start < i:\n            temp = arr[start]\n            arr[start] = arr[i]\n            arr[i] = temp\n            start += 1\n            i -= 1\n    \n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        max_idx = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        if max_idx != i:\n            flip(nums, max_idx)\n            flip(nums, i)\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 2522,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3 # all items are the same",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_lists(Input): \n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1,2,3)) == 0 # No list is present in the given tuple",
        "num_ids": 994,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, -2, 3, -4, 5]) == 9",
        "num_ids": 1698,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    else:\n        s = n // gcd\n        return (s * x, s * y)\n\ndef extended_gcd(a, b):\n    '''\n    Returns (gcd, x, y) such that a*x + b*y = gcd.\n    '''\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        gcd, x, y = extended_gcd(b, a % b)\n        return (gcd, y, x - (a // b) * y)\n",
        "test": "assert find_solution(1, 1, 1) == (0, 1)",
        "num_ids": 3065,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "test": "assert remove_elements([], []) == [] # Test with empty lists",
        "num_ids": 1298,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n",
        "test": "assert sum_series(6) == 12 # Test case 2",
        "num_ids": 1370,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l**2)/(4 * tan(pi/s))\n    return area\n",
        "test": "assert area_polygon(1, 5) == 2.5 * (1 / (2 * tan(pi/5)))",
        "num_ids": 1459,
        "indeed": true
    },
    {
        "number": 164,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum",
        "test": "assert div_sum(12) == 28  # The divisors of 12 are 1, 2, 3, 4, and 6. The sum of these divisors is 1 + 2 + 3 + 4 + 6 = 16. ",
        "num_ids": 2151,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i+97):\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"A\") == 1 ",
        "num_ids": 1471,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_even_pair(A):  \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4]) == 2",
        "num_ids": 1486,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(2) == 2",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def frequency(a, x):\n    '''\n    Counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1, 2, 3, 2, 4, 2, 5], 2) == 3  # count the number of occurrences of 2 in the list [1, 2, 3, 2, 4, 2, 5]",
        "num_ids": 1311,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    return sum(list1[m:n+1])",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 1) == 3  # sum of [1, 2]",
        "num_ids": 1585,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = 5\n    perimeter = sides * a\n    return perimeter\n",
        "test": "assert math.isclose(perimeter_pentagon(10), 50.0)",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance('') == 0",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = set(type(x) for x in test_tuple)\n    return len(types) == 1\n",
        "test": "assert check_type((1, 2, 3)) == True # all integers",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif arr[i] > x:\n            break\n    if count > n//2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4, 4, 4, 5, 6, 7], 10, 5) == False # majority element is not 5",
        "num_ids": 2140,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 1150,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_values_string(s):\n    \"\"\"\n    Removes characters with odd indices from a given string.\n    \"\"\"\n    return s[::2]\n",
        "test": "assert odd_values_string(\"python\") == \"pto\" # should return only the characters at even index values (0-indexed)",
        "num_ids": 1046,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(2, 3, 4) == 2",
        "num_ids": 1144,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert n to binary and store it in a string\n    binary_n = bin(n)[2:]\n\n    # Pad the binary string with zeros to make its length equal to r\n    binary_n = binary_n.rjust(r, '0')\n\n    # Check if all the bits are set to 1 in the given range\n    for i in range(l, r):\n        if binary_n[i] == '0':\n            return False\n\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(6, 1, 3) == False ",
        "num_ids": 1914,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # separate the first n elements into negative and positive lists\n    neg = [x for x in arr[:n] if x < 0]\n    pos = [x for x in arr[:n] if x >= 0]\n    # re-combine the lists with negative elements first\n    arr[:n] = neg + pos\n    return arr\n",
        "test": "assert re_arrange_array([], 0) == [] # test empty array",
        "num_ids": 2846,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "test": "assert replace_blank('hello world', '*') == 'hello*world'",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result[::-1]\n",
        "test": "assert larg_nnum([1,2,3,4,5], 3) == [5,4,3]",
        "num_ids": 1950,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h\n",
        "test": "assert lateralsuface_cylinder(1,1) == 6.283185307179586 ",
        "num_ids": 1340,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n",
        "test": "assert volume_cube(3) == 27 # check for side length 3",
        "num_ids": 758,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # convert number to binary string\n    binary_str = bin(n)[2:]\n    # reverse the binary string\n    binary_str = binary_str[::-1]\n    # set even bits to 1\n    even_bits_set = \"\".join([bit if index % 2 == 0 else \"1\" for index, bit in enumerate(binary_str)])\n    # reverse the binary string again to get the final binary string\n    even_bits_set = even_bits_set[::-1]\n    # convert binary string to decimal\n    decimal_num = int(even_bits_set, 2)\n    return decimal_num\n",
        "test": "assert even_bit_set_number(1) == 1 # odd number of set bits",
        "num_ids": 1676,
        "indeed": true
    },
    {
        "number": 237,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2), (5, 6), (1, 2)]) == {(1, 2): 3, (3, 4): 1, (5, 6): 1}  # Test case 1",
        "num_ids": 2092,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_of_substrings(s):\n    \"\"\"\n    Returns the number of non-empty substrings of a given string.\n    \"\"\"\n    n = len(s)\n    # Since there are n characters in the string, there are n(n+1)/2 non-empty substrings.\n    return n * (n + 1) // 2\n",
        "test": "assert number_of_substrings(\"abc\") == 6",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def get_total_number_of_sequences(m,n):\n    # Initialize a 2D list to store the number of possible sequences for each length\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n    \n    # Base cases: For length 1, there is only one sequence (i.e., the number itself)\n    for i in range(1, m+1):\n        dp[i][1] = 1\n    \n    # For each length, iterate through each possible value for the last element in the sequence\n    for length in range(2, n+1):\n        for last_element in range(2, m+1):\n            # The number of possible sequences for this length and last element is the sum of the number of possible sequences for all previous lengths that end with a number less than or equal to the last element\n            for prev_element in range(2, last_element):\n                dp[last_element][length] += dp[prev_element][length-1]\n    \n    # Return the total number of possible sequences for length n\n    return sum(dp[i][n] for i in range(2, m+1))\n",
        "test": "assert get_total_number_of_sequences(6,2) == 10 # [1,2,3], [1,2,4], [1,2,5], [1,3,5], [1,3,6], [1,4,6], [2,3,5], [2,3,6], [2,4,6], [3,4,6]",
        "num_ids": 2346,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if not list1 or not list2:  # Check if either list is empty\n        return list1\n    \n    list1.pop()  # Remove last element of list1\n    \n    for i in list2:  # Add elements of list2 to list1\n        list1.append(i)\n    \n    return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5]) == [1, 2, 4, 5]",
        "num_ids": 1459,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"\") == 0 # empty string",
        "num_ids": 872,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return (int(root) + 1) ** 2\n    else:\n        return (int(root) + 2) ** 2\n",
        "test": "assert next_Perfect_Square(1) == 4 ",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    # Find the maximum increasing subsequence sum\n    max_inc_sum = [0]*n\n    max_inc_sum[0] = arr[0]\n    for i in range(1, n):\n        max_inc_sum[i] = max(max_inc_sum[i-1] + arr[i], arr[i])\n        \n    # Find the maximum decreasing subsequence sum\n    max_dec_sum = [0]*n\n    max_dec_sum[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        max_dec_sum[i] = max(max_dec_sum[i+1] + arr[i], arr[i])\n        \n    # Find the maximum bitonic sum\n    max_bitonic_sum = 0\n    for i in range(1, n-1):\n        if max_inc_sum[i-1] < max_dec_sum[i+1]:\n            max_bitonic_sum = max(max_bitonic_sum, max_inc_sum[i-1] + arr[i] + max_dec_sum[i+1])\n        \n    return max_bitonic_sum\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 3980,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes the square root of a number using the Babylonian method.\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must be non-negative.\")\n    elif number == 0 or number == 1:\n        return number\n    else:\n        # Set initial values for x and y\n        x = number / 2\n        y = (x + number / x) / 2\n        # Keep iterating until x and y converge\n        while y < x:\n            x = y\n            y = (x + number / x) / 2\n        return x\n",
        "test": "assert babylonian_squareroot(1) == 1.0",
        "num_ids": 1827,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n\n    # Create a table to store lengths of longest palindromic subsequences of substring\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    # All characters in a string of length 1 are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for sub-strings with length 2\n    for i in range(n - 1):\n        if str[i] == str[i + 1]:\n            dp[i][i + 1] = 2\n        else:\n            dp[i][i + 1] = 1\n\n    # Check for sub-strings with length more than 2\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j] and length == 3:\n                dp[i][j] = 3\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n - 1]\n",
        "test": "assert lps(\"abdbca\") == 5  # \"bdbc\" is the longest palindromic subsequence",
        "num_ids": 3060,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n",
        "test": "assert harmonic_sum(0) == 0",
        "num_ids": 1052,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert arrays to sets to remove duplicates and find the intersection\n    intersection = set(array_nums1) & set(array_nums2)\n    # Convert the set back to a list and return it\n    return list(intersection)\n",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 1427,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3,4,5), 6) == 0 # checks if the function returns 0 if the element is not in the tuple",
        "num_ids": 1302,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result",
        "test": "assert insert_element([1,2,3], 0) == [0, 1, 0, 2, 0, 3]",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import cmath\n\ndef convert(num):\n    r = abs(num)\n    theta = cmath.phase(num)\n    return r, theta\n",
        "test": "assert convert(cmath.rect(2, cmath.pi)) == (2, cmath.pi)",
        "num_ids": 1658,
        "indeed": true
    },
    {
        "number": 253,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([]) == 0 # empty list",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors(['R', 'G', 'B'], 2) == [('R', 'R'), ('R', 'G'), ('R', 'B'), ('G', 'G'), ('G', 'B'), ('B', 'B')]",
        "num_ids": 2329,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 1906,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "test": "assert swap_numbers(1, 2) == (2, 1)",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_elements.append(test_tup1[i])\n        else:\n            max_elements.append(test_tup2[i])\n    return tuple(max_elements)\n",
        "test": "assert maximize_elements((1,2,3), (4,5,6)) == (4, 5, 6) # checking for positive case",
        "num_ids": 1924,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Returns True if a number is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    i = 2\n    while count < n:\n        if is_prime(i) and is_prime(i-1):\n            count += 1\n            if count == n:\n                return i\n        i += 1\n    \n    return None  # if n is greater than the number of Newman-Shanks-Williams primes\n",
        "test": "assert newman_prime(1) == 3",
        "num_ids": 2065,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]/test_tup2[i])\n    return tuple(result)\n",
        "test": "assert division_elements((1, 2, 3), (4, 5, 6)) == (0.25, 0.4, 0.5)",
        "num_ids": 1969,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 1929,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog years.\n    \"\"\"\n    # Convert human years to dog years\n    if h_age <= 0:\n        return \"Invalid age\"\n    elif h_age <= 1:\n        return h_age * 15\n    elif h_age <= 2:\n        return 15 + (h_age - 1) * 9\n    elif h_age <= 3:\n        return 24 + (h_age - 2) * 5\n    else:\n        return 29 + (h_age - 3) * 1\n",
        "test": "assert dog_age(2) == 24 # human age 2 should be 24 dog years",
        "num_ids": 1255,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Split a list into sublists of size 'step'.\n\n    :param S: list to split\n    :param step: size of sublists\n    :return: list of sublists\n    \"\"\"\n    if step < 1:\n        raise ValueError(\"'step' must be greater or equal to 1.\")\n    sublists = []\n    i = 0\n    while i < len(S):\n        sublists.append(S[i:i+step])\n        i += step\n    return sublists\n",
        "test": "assert list_split([1, 2], 1) == [[1], [2]]",
        "num_ids": 1977,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert lateralsurface_cube(1) == 6 # testing for a cube with side length 1",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(1) == 1  # sum of 1^2 = 1",
        "num_ids": 1372,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 1\n    for i in range(n):\n        count = count * (i+1)\n    return count\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 1366,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([2, 3, 4, 5, 6, 7, 8]) == 20",
        "num_ids": 1786,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers\n    raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**5\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]) == ['c', 'f', 'i']",
        "num_ids": 1542,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n",
        "test": "assert substract_elements((1,2,3), (4,5,6)) == (-3,-3,-3) # test case 1",
        "num_ids": 1859,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 1",
        "num_ids": 1722,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r ** 2 * h\n    return volume\n",
        "test": "assert volume_cylinder(2, 3) == 215.28424",
        "num_ids": 1216,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dict_filter(d, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in d.items() if v >= n}\n",
        "test": "assert dict_filter({'a': 5, 'b': 2, 'c': 8}, 4) == {'a': 5, 'c': 8} # should pass",
        "num_ids": 1763,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counts = {}\n    for i, elem in enumerate(test_tup):\n        counts[elem] = i\n    return counts\n",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == {1: 0, 2: 1, 3: 2, 4: 3, 5: 4}  # Test case 1",
        "num_ids": 1742,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal_sum = 0\n    \n    while decagonal_sum < n:\n        decagonal_sum += i\n        i += 1\n        \n    if decagonal_sum == n:\n        return True\n    else:\n        return False\n",
        "test": "assert is_num_decagonal(1) == 1 # should be true",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1808,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1, 2, 3, 4]) == True",
        "num_ids": 1302,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    # check if the length of both lists is equal\n    if len(nums1) != len(nums2):\n        return \"Error: Length of both lists should be equal.\"\n    else:\n        # create an empty list to store the subtraction result\n        result = []\n        # iterate through the lists and subtract each element\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        # return the resultant list\n        return result\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3] # positive numbers",
        "num_ids": 1627,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def validate(n):\n    '''\n    Check if the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = str(n)\n    for digit in digits:\n        if digits.count(digit) > int(digit):\n            return False\n    return True\n",
        "test": "assert validate(12345) == True",
        "num_ids": 1608,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in lst)",
        "test": "assert check_element([], 5) == True  # Empty list should return True",
        "num_ids": 1111,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bb|bbb)'\n    return bool(re.search(pattern, text))\n",
        "test": "assert text_match_two_three('abbb') == True",
        "num_ids": 1188,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # create a new array by repeating the given array k times\n    new_array = []\n    for i in range(k):\n        new_array += a\n        \n    # initialize variables for max sum and current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # loop through the new array to find the largest sum of a contiguous sub-array\n    for i in range(len(new_array)):\n        curr_sum += new_array[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n            \n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-1, 2, 3, 4, -5], 3, 1) == 9",
        "num_ids": 2741,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_length(list1):\n    max_list = []\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n            max_list = list1[i]\n    return max_list\n",
        "test": "assert max_length([[1,2,3],[4,5],[6,7,8,9]]) == [6,7,8,9]",
        "num_ids": 1821,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def count_no_of_ways(n, k):\n    if n < 2:\n        return k ** n\n    \n    dp = [0] * (n+1)\n    dp[1] = k\n    dp[2] = k**2\n    \n    for i in range(3, n+1):\n        dp[i] = dp[i-1] * (k-1) + dp[i-2] * (k-1)\n        \n    return dp[n]\n",
        "test": "assert count_no_of_ways(3, 2) == 6 # 6 ways: RRB, RBR, BRR, BBR, BRB, RBB",
        "num_ids": 2212,
        "indeed": true
    },
    {
        "number": 292,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "test": "assert find(10, 3) == 3",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Finds the third side of a right-angled triangle\n    given the width and height of the triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c\n",
        "test": "assert otherside_rightangle(3, 4) == 5",
        "num_ids": 1111,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5 # positive test case",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_div(number):\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12 = 28",
        "num_ids": 1329,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 2631,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([1, [2, 3], 4]) == [1, 2, 3, 4]",
        "num_ids": 1535,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if not stdata:\n        return 0\n    \n    max_aggr = 0\n    max_dict = defaultdict(int)\n    \n    for state, value in stdata:\n        if value > max_dict[state]:\n            max_dict[state] = value\n    \n    for value in max_dict.values():\n        max_aggr += value\n        \n    return max_aggr\n",
        "test": "assert max_aggregate([('A', 10), ('B', 20), ('C', 30)]) == 60",
        "num_ids": 1993,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        binary = bin(i)[2:]\n        if len(binary) < 2*n:\n            binary = '0'*(2*n-len(binary)) + binary\n        if sum(int(binary[j]) for j in range(n)) == sum(int(binary[j]) for j in range(n,2*n)):\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(0) == 1  # only one binary sequence of length 0, which is an empty string",
        "num_ids": 2125,
        "indeed": true
    },
    {
        "number": 301,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def dict_depth(d):\n    \"\"\"\n    This function finds the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for v in d.values()) if d else 0)\n    else:\n        return 0\n",
        "test": "assert dict_depth({\"a\": 1}) == 1 # Single level dictionary should have depth of 1",
        "num_ids": 1064,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    n = len(arr)\n    start = ranges[0]\n    end = ranges[1]\n    rotations = rotations % n\n\n    # Find the index of the element at the given index after rotations\n    if rotations == 0:\n        return arr[index]\n    else:\n        rotated_index = (index - start + rotations) % n\n        return arr[rotated_index + start] if rotated_index + start <= end else arr[rotated_index - n]",
        "test": "assert find_Element([1,2,3,4,5], (0,5), 0, 1) == 2",
        "num_ids": 1802,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p')\n    result = []\n    for word in words:\n        if pattern.match(word):\n            result.append(word)\n            if len(result) == 2:\n                return result\n    return result\n",
        "test": "assert start_withp(['cat', 'dog', 'pig', 'parrot']) == ['pig', 'parrot']",
        "num_ids": 1786,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # Initialize an empty list to store the subsequence\n    subseq = []\n    \n    # Loop through the array from the starting index to the given index\n    for i in range(index+1):\n        \n        # If the current element is greater than the last element in the subsequence, append it\n        if len(subseq) == 0 or a[i] > subseq[-1]:\n            subseq.append(a[i])\n    \n    # Add the kth element to the subsequence if it's greater than the last element\n    if k > index and a[k] > subseq[-1]:\n        subseq.append(a[k])\n    \n    # Calculate the sum of the subsequence\n    subseq_sum = sum(subseq)\n    \n    return subseq_sum\n",
        "test": "assert max_sum_increasing_subseq([5,4,3,2,1], 5, 2, 4) == 5 # Should return 5 (3+2+1)",
        "num_ids": 4636,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:n]\n",
        "test": "assert colon_tuplex(('a', 'b', 'c', 'd'), 1, 3) == ('b', 'c') ",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 2) == [12, 18]",
        "num_ids": 2200,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def maximum(a,b):    \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(5, 7) == 7 ",
        "num_ids": 761,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # using tuple() to convert string to tuple\n    tup = tuple(str1)\n    return tup",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Find the left most unset bit\n    unset_bit = 1\n    while (unset_bit & n) != 0:\n        unset_bit = unset_bit << 1\n\n    # Set the left most unset bit\n    n = n | unset_bit\n\n    return n\n",
        "test": "assert set_left_most_unset_bit(0b1101) == 0b1111 # Unset bit at position 2 is set to 1",
        "num_ids": 1581,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cone(1, 1) == math.pi/3 # radius = 1, height = 1",
        "num_ids": 1276,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2",
        "test": "assert highest_Power_of_2(10) == 8",
        "num_ids": 1160,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result\n",
        "test": "assert add_string([], '{}') == [] # Test with empty list",
        "num_ids": 1326,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        d[l1[i]][l2[i]] = l3[i]\n    return d\n",
        "test": "assert convert_list_dictionary(['a', 'b', 'c'], [1, 2, 3], [True, False, True]) != {'a': {'1': False}, 'b': {'2': False}, 'c': {'3': True}}",
        "num_ids": 2409,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    \n    memo = {}\n    \n    def get_max_sum_helper(num):\n        if num < 1:\n            return 0\n        if num == 1:\n            return 1\n        if num in memo:\n            return memo[num]\n        \n        n2 = num // 2\n        n3 = num // 3\n        n4 = num // 4\n        n5 = num // 5\n        \n        memo[num] = max(num, get_max_sum_helper(n2) + get_max_sum_helper(n3) + get_max_sum_helper(n4) + get_max_sum_helper(n5))\n        return memo[num]\n    \n    return get_max_sum_helper(n)\n",
        "test": "assert get_max_sum(1) == 1  # Base case",
        "num_ids": 1944,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == [4, 5, 6, 7]",
        "num_ids": 1981,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1, 2, 3, 4)) == True",
        "num_ids": 1125,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character in the string\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If all characters are repeated, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"Python\") == \"P\"",
        "num_ids": 1818,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"abcba\") == True",
        "num_ids": 1157,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # create a list of the numbers\n    nums = [a,b,c]\n    # sort the list\n    nums.sort()\n    # find the median\n    median = nums[1]\n    # return the median\n    return median\n",
        "test": "assert median_numbers(3, 2, 1) == 2",
        "num_ids": 1311,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sums = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        digit_sums.append(digit_sum)\n    return digit_sums\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24]",
        "num_ids": 1785,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)",
        "test": "assert bitwise_xor((1, 0, 1, 1, 0), (0, 1, 1, 0, 1)) == (1, 1, 0, 1, 1)",
        "num_ids": 1980,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(sorted(sublist)) for sublist in test_list))\n",
        "test": "assert extract_freq([(1,2), (2,3), (1,2)]) == 2 # returns 2 because there are only 2 unique tuples in the list",
        "num_ids": 1560,
        "indeed": true
    },
    {
        "number": 401,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the length of both tuples are equal\n    if len(test_tup1) == len(test_tup2):\n        result = []\n        # Iterate through the tuples\n        for i in range(len(test_tup1)):\n            # Check if the i-th element of both tuples are tuples\n            if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n                # Recursively call the function for nested tuples\n                result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            else:\n                # Add the i-th element of both tuples and append to the result list\n                result.append(test_tup1[i] + test_tup2[i])\n        return tuple(result)\n    else:\n        print(\"Error: Tuples are not of equal length!\")\n",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))",
        "num_ids": 2510,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(10, 20) == 10",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_tuplex(tuplex, element):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if element in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((\"apple\", \"banana\", \"orange\"), \"grape\") == False",
        "num_ids": 995,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number as input and returns True if the parity of the number is odd, else False.\n    '''\n    if x % 2 == 0:  # checking if the number is even\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(0) == False",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]  # convert number to list of digits\n    i = len(digits) - 1\n    while i > 0 and digits[i-1] >= digits[i]:\n        i -= 1  # find the first index where the number is decreasing\n    if i <= 0:\n        return None  # number is already the biggest possible\n    j = len(digits) - 1\n    while digits[j] <= digits[i-1]:\n        j -= 1  # find the last index where the number is less than the first decreasing digit\n    digits[i-1], digits[j] = digits[j], digits[i-1]  # swap the digits\n    digits[i:] = reversed(digits[i:])  # reverse the digits after the first decreasing digit\n    return int(''.join(str(d) for d in digits))  # convert list of digits back to number\n",
        "test": "assert rearrange_bigger(12) == 21",
        "num_ids": 3411,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heap.append((nums1[i] + nums2[j], i, j))\n    heapq.heapify(heap)\n    \n    result = []\n    for _ in range(k):\n        _, i, j = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n    \n    return result\n",
        "test": "assert k_smallest_pairs([1, 3, 15], [2, 7, 11], 2) == [(1, 2), (3, 2)]",
        "num_ids": 3176,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product variable\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Multiply the two tuples and compare to the current minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                \n    return min_product\n",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 14",
        "num_ids": 1914,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0] + ''.join(x.title() for x in words[1:])\n    return camel_case\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 1353,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5]) == [2, 4]",
        "num_ids": 1004,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # create an empty list to store the nth elements\n    nth_elements = []\n    \n    # loop through the list of tuples\n    for tup in list1:\n        # if the tuple has more than n elements\n        if len(tup) > n:\n            # append the nth element to the list\n            nth_elements.append(tup[n])\n        \n    # return the list of nth elements\n    return nth_elements\n",
        "test": "assert extract_nth_element([('apple', 3), ('banana', 2), ('cherry', 5)], 0) == 'apple'",
        "num_ids": 1502,
        "indeed": true
    },
    {
        "number": 414,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False # no overlapping",
        "num_ids": 1095,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    return max(arr[n-1]*arr[n-2], arr[0]*arr[1])\n",
        "test": "assert max_Product([-1, -2, 3, 4, 5]) == 20",
        "num_ids": 1927,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif common_element != tup[0]:\n            return None\n    return common_element\n",
        "test": "assert group_tuples([(1,2), (1,3), (1,4)]) == 1 # returns the first element of the first tuple since it is common to all other tuples",
        "num_ids": 1883,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max([\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]) == \"banana\"",
        "num_ids": 1243,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def round_and_sum(list1):\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n    # round each number in the list to the nearest integer\n    rounded_list = [round(num) for num in list1]\n    # calculate the total sum of the rounded numbers\n    total_sum = sum(rounded_list)\n    # calculate the product of the total sum and the length of the list\n    result = total_sum * len(list1)\n    # print the result\n    print(result)\n",
        "test": "assert round_and_sum([1.5, 2.3, 3.7, 4.2]) == 20 ",
        "num_ids": 1627,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def cube_Sum(n):\n    sum = 0\n    count = 0\n    i = 2\n    while count < n:\n        sum += i**3\n        count += 1\n        i += 2\n    return sum\n",
        "test": "assert cube_Sum(0) == 0 # check the base case",
        "num_ids": 1450,
        "indeed": true
    },
    {
        "number": 421,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    result = \"\"\n    for i in range(len(test_tup)):\n        result += test_tup[i]\n        if i != len(test_tup)-1:\n            result += delimiter\n    return result\n",
        "test": "assert concatenate_tuple(()) == ''",
        "num_ids": 1320,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1 # the average of 1^3 is 1",
        "num_ids": 1251,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = ()\n    for element in test_tuple:\n        result += (element[-1], )\n    return result\n",
        "test": "assert extract_rear((\"hello\", \"world\", \"python\")) == (\"o\", \"d\", \"n\") ",
        "num_ids": 1320,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == 1",
        "num_ids": 1428,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Create an empty list to store the odd numbers\n    odd_nums = []\n    \n    # Loop through each number in the input list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2 != 0:\n            # If it is odd, add it to the list of odd numbers\n            odd_nums.append(num)\n    \n    # Return the list of odd numbers\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 1233,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return None",
        "test": "assert change_date_format('2022-05-10') == '10-05-2022'",
        "num_ids": 1970,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Initialize the gap size\n    n = len(my_list)\n    gap = n // 2\n\n    # Do the sorting\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n",
        "test": "assert shell_sort([4, 2, 9, 1, 5, 6]) == [1, 2, 4, 5, 6, 9]",
        "num_ids": 2239,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert and_tuples((1, 0, 1, 1), (1, 1, 0, 1)) == (1, 0, 0, 1)",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = abs(b)**2 - 4*a*c\n    if d < 0:\n        print('No real roots')\n    elif d == 0:\n        x = -b / (2*a)\n        return 'Directrix: x = {}'.format(x)\n    else:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        return 'Directrix: y = {} - {}*(x - {})'.format(x1, 2*a*x1, x1)",
        "test": "assert parabola_directrix(1, 0, -8) == \"y=4\" # Example 2: x^2 + 8",
        "num_ids": 1763,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False  # no common element in the two lists",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1+base2)/2\n    return median\n",
        "test": "assert median_trapezium(5, 7, 3) == 6.0",
        "num_ids": 1192,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            continue\n        else:\n            return False\n    return True\n",
        "test": "assert check_greater([1,2,3], 1) == False",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"abb\") # True",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(1234) == 4",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [-2, -4]",
        "num_ids": 1260,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"\") == \"\" ",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] == (test_list[j][1], test_list[j][0])):\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5)]) == 0  # no bidirectional tuple found",
        "num_ids": 1809,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # Initialize a string variable to store the joined digits\n    joined_digits = \"\"\n    \n    # Loop through each integer in the list\n    for num in L:\n        # Convert the integer to a string and add it to the joined_digits string\n        joined_digits += str(num)\n    \n    # Convert the joined_digits string back to an integer and return it\n    return int(joined_digits)\n",
        "test": "assert multiple_to_single([0, 0, 0]) == 0",
        "num_ids": 1229,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a list of adverbs\n    adverbs = ['really', 'very', 'most', 'much', 'so', 'too', 'just', 'that', 'rather', 'already', 'only', 'therefore', 'little', 'quite', 'somehow', 'well', 'indeed', 'maybe', 'even']\n    # Initialize an empty list to store positions of adverbs\n    positions = []\n    # Loop through the words in the given sentence\n    for word in text.split():\n        # If the word is an adverb and its position is not already in the list, append it to the list\n        if word.lower() in adverbs and text.index(word) not in positions:\n            positions.append(text.index(word))\n    # Return the list of positions\n    return positions",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog.\") == []",
        "num_ids": 2836,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
        "test": "assert positive_count([1,2,3,4,5]) == 5/5",
        "num_ids": 1388,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    if len(neg_nums) == 0:\n        return None\n    else:\n        return max(neg_nums)\n",
        "test": "assert largest_neg([-5, -1, 0, 1, 5]) == -1",
        "num_ids": 1802,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(t[:K] if len(t) > K else t) for t in test_list]\n",
        "test": "assert trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8)], 2) == [(1, 2), (5, 6)]",
        "num_ids": 1752,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the lengths of the tuples are equal or not\n    if len(test_tup1) != len(test_tup2):\n        print(\"Error: Tuple lengths are not equal\")\n        return None\n    \n    # Perform index-wise multiplication and store the result in a new tuple\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup\n",
        "test": "assert index_multiplication((1,2,3),(3,2,1)) == (3,4,3) # check for 2 positive values",
        "num_ids": 1843,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Convert tuple to a list of elements using list()\n    tup_lst = list(tup)\n    \n    # Create a dictionary to store the count of each element in list\n    count_dict = {}\n    for elem in lst:\n        count_dict[elem] = tup_lst.count(elem)\n    \n    # Create a Counter object from the dictionary and return it\n    return Counter(count_dict)\n",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,2]) == {1:1, 2:1} # check the count of 1 and 2 in the tuple (1,2,3,4,5)",
        "num_ids": 2257,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27] ",
        "num_ids": 1097,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    else:\n        p = [3, 0]\n        for i in range(2, n+1):\n            temp = p[0] + p[1]\n            p[0] = p[1]\n            p[1] = temp\n        return p[1]\n",
        "test": "assert cal_sum(0) == 0 # base case",
        "num_ids": 1681,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings\n",
        "test": "assert extract_string(['apple', 'banana', 'cherry', 'date'], 0) == []",
        "num_ids": 1403,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"Hello world\") == \"Helloworld\"",
        "num_ids": 971,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0\n",
        "test": "assert loss_amount(1000, 800) == 200 ",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n//i != i:\n                if n//i % 2 == 0:\n                    sum += n//i\n    return sum\n",
        "test": "assert sumofFactors(10) == 12 ",
        "num_ids": 1410,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b\\w*z\\w*\\b', text)\n    if match:\n        return match.group()\n    else:\n        return 'No word containing \"z\" found in the text.'\n",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the laziest dog.\") == 'laziest'",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # List of months with 31 days\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    # Check if the input month number is in the list of months with 31 days\n    if monthnum2 in months_with_31_days:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True  # January contains 31 days",
        "num_ids": 1427,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list([]) == []",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([[1,2,3],[4,5],[6],[7,8]]) == [6]",
        "num_ids": 1938,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert rectangle_area(10, 5) == 50",
        "num_ids": 746,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Removes all uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', string)\n",
        "test": "assert remove_uppercase(\"\") == \"\" ",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublst[0] for sublst in lst]\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 1133,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def upper_ctr(string):\n    '''\n    Counts the number of uppercase characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            result.append((list1[i], list1[j]))\n    return result\n",
        "test": "assert combinations_list([]) == [] # check for empty list",
        "num_ids": 1739,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0",
        "num_ids": 2150,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Get the first value of the dictionary\n    first_value = list(dict.values())[0]\n\n    # Iterate through the dictionary and compare each value with the first value\n    for key in dict:\n        if dict[key] != first_value:\n            return False\n    \n    return True\n",
        "test": "assert check_value({'a':1, 'b':1, 'c':1}, 1) == True",
        "num_ids": 1450,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 1416,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_product = 1\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_product = max(max_product, max_ending_here)\n        max_product = max(max_product, -min_ending_here)\n        \n    return max_product\n",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120 # example 2",
        "num_ids": 2621,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (3, 5, 7) # Test case 1",
        "num_ids": 1499,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1,2,3], 4) == 2",
        "num_ids": 1147,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # convert the list to set and check if the difference between max and min value is equal to length of set minus 1\n    return len(set(l)) - 1 == max(l) - min(l)\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 1541,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)\n",
        "test": "assert tuple_intersection((1, 2, 3), (2, 3, 4)) == (2, 3)",
        "num_ids": 1765,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1\n",
        "test": "assert replace_char(\"hello\", \"l\", \"\") == \"heo\"",
        "num_ids": 1020,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict",
        "test": "assert sort_counter({'apple': 5, 'banana': 2, 'orange': 7}) == {'orange': 7, 'apple': 5, 'banana': 2} ",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6 # Sum of 1 and 5",
        "num_ids": 1333,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n",
        "test": "assert remove_lowercase('') == ''",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer n as input and returns the first digit of n as output.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(1234) == 1",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in lst if num % 2 != 0]\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers\n",
        "test": "assert difference(1) == 0 # when n=1, difference should be 0",
        "num_ids": 1475,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j]) % 2 != 0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([2,4,6,8],4) == 0 # No pair with odd xor value",
        "num_ids": 1758,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert toggle_string(\"Hello\") == \"hELLO\"",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = str(n1)\n    num2 = str(n2)\n    distance = 0\n    for i in range(len(num1)):\n        distance += abs(int(num1[i]) - int(num2[i]))\n    return distance\n",
        "test": "assert digit_distance_nums(123, 123) == 0 # Expected output: 0",
        "num_ids": 2590,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert max_sub_array_sum([1,2,3,4,5], 5) == 15 # single sublist",
        "num_ids": 2028,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to sets and take their union\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # Convert the union set back to a tuple and sort it\n    union_tup = tuple(sorted(union_set))\n    \n    # Return the sorted tuple of union elements\n    return union_tup\n",
        "test": "assert union_elements((1, 2, 3, 4), (4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7) # True",
        "num_ids": 1849,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([]) == 0",
        "num_ids": 1589,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert extract_values('The \"quick\" brown fox jumps over the \"lazy\" dog.') == ['quick', 'lazy']",
        "num_ids": 1103,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10 # when all elements are unique",
        "num_ids": 1423,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string to iterate over each digit\n    str_n = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_digits = 0\n    # Iterate over each digit of the number\n    for digit in str_n:\n        # Convert the digit to an integer and add it to the sum_digits variable\n        sum_digits += int(digit)\n    # Return the sum of digits\n    return sum_digits\n",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 1292,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['apple', 'banana', 'orange'], ['dog', 'cat', 'fish']]) == [['apple', 'banana', 'orange'], ['cat', 'dog', 'fish']] ",
        "num_ids": 1787,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given list of numbers.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1, 2, 3]) == [1, 2, 3] # list without duplicates should remain unchanged",
        "num_ids": 1724,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120 # product of unique numbers is 1 * 2 * 3 * 4 * 5 = 120",
        "num_ids": 1578,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    total_surface_area = (2 * pi * r * h) + (2 * pi * r ** 2)\n    return total_surface_area\n",
        "test": "assert surfacearea_cylinder(1,1) == 12.56636",
        "num_ids": 1296,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if B is empty or not\n    if len(B) == 0:\n        return True\n    \n    # Initialize variables\n    j = 0\n    i = 0\n\n    # Loop through A and B\n    while i < len(A) and j < len(B):\n        # If A[i] matches B[j], increment j\n        if A[i] == B[j]:\n            j += 1\n        else:\n            # Reset j to 0 if B[j] doesn't match A[i]\n            j = 0\n        \n        # Increment i\n        i += 1\n\n    # If j is equal to len(B), B is a sublist of A\n    if j == len(B):\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sub_Array([1,2,3,4,5],[6]) == False",
        "num_ids": 1969,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize a list to store the last digits of each factorial\n    last_digits = [1]\n    # Iterate through the range from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Multiply the previous last digit with the current number and store the last digit\n        last_digit = (last_digits[-1] * i) % 10\n        # Append the last digit to the list\n        last_digits.append(last_digit)\n    # Return the last digit in the factorial of n\n    return last_digits[-1]\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1578,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]",
        "num_ids": 2085,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return dissimilar_elements\n",
        "test": "assert find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'd')) == {'c', 'd'}",
        "num_ids": 1938,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == int and i % 2 == 0:\n            new_tuple.append(i)\n        elif type(i) == tuple:\n            sub_tuple = []\n            for j in i:\n                if type(j) == int and j % 2 == 0:\n                    sub_tuple.append(j)\n            new_tuple.append(tuple(sub_tuple))\n        else:\n            continue\n    return tuple(new_tuple)\n",
        "test": "assert even_ele((1, 2, 3), lambda x: x % 2 == 0) == (2,)",
        "num_ids": 2145,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base_area = b*b\n    perimeter = 4*b\n    slant_height = (b**2 + s**2)**0.5\n    surface_area = base_area + perimeter*slant_height\n    return surface_area\n",
        "test": "assert surface_Area(5,4) == 140 # check for a square pyramid with base edge 5 and height 4 ",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Checks if a dictionary is empty.\n\n    Parameters:\n    dict1 (dict): The dictionary to check.\n\n    Returns:\n    bool: True if the dictionary is empty, False otherwise.\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True # test if the function returns True for an empty dictionary",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if num <= 1:\n        return 1\n    else:\n        # initialize two variables to store the previous two catalan numbers\n        prev_prev, prev = 1, 1\n        # iterate from 3 to num+1\n        for i in range(3, num+1):\n            # calculate the current catalan number\n            curr = prev*(2*(2*i-1)-1)//(i-1)\n            # update the previous two catalan numbers\n            prev_prev, prev = prev, curr\n        # return the nth catalan number\n        return curr\n",
        "test": "assert catalan_number(0) == 1 # base case",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'\\b\\w+ly\\b'\n    adverb_list = re.findall(adverb_pattern, text)\n    if adverb_list:\n        first_adverb = adverb_list[0]\n        positions = []\n        start = 0\n        while True:\n            position = text.find(first_adverb, start)\n            if position == -1:\n                break\n            positions.append(position)\n            start = position + 1\n        return first_adverb, positions\n    else:\n        return None, []\n",
        "test": "assert find_adverbs(\"He runs quickly.\") == (\"quickly\", [8])",
        "num_ids": 1685,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return sorted(min_heap, reverse=True)\n",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 1758,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2] # check for n=2",
        "num_ids": 1589,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3) # test case 1",
        "num_ids": 880,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    return max(nums) - min(nums)\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1211,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Find the square root of a and b and convert them into integer values.\n    sqrt_a = math.floor(math.sqrt(a))\n    sqrt_b = math.ceil(math.sqrt(b))\n    \n    # Loop through the range from sqrt_a to sqrt_b and check if the square of each number is in the range [a, b].\n    # If it is, then add it to the list of perfect squares.\n    perfect_squares_list = []\n    for i in range(sqrt_a, sqrt_b + 1):\n        if i**2 >= a and i**2 <= b:\n            perfect_squares_list.append(i**2)\n    \n    # Return the list of perfect squares.\n    return perfect_squares_list\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 1573,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    rect = cmath.rect(x, y)\n    return round(rect.real, 2), round(rect.imag, 2)\n",
        "test": "assert polar_rect(2, 0) == (2, 0)",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return newList\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 1396,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    This function calculates the binomial coefficient of n and k.\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient of n and k.\n    \"\"\"\n\n    # handle edge cases\n    if k == 0 or k == n:\n        return 1\n    elif k == 1 or k == n-1:\n        return n\n\n    # calculate the binomial coefficient\n    coeff = 1\n    for i in range(k):\n        coeff *= (n-i)/(i+1)\n\n    return round(coeff)\n\n\ndef sum_of_products(n):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial coefficients.\n\n    Parameters:\n    n (int): The number of terms in the series.\n\n    Returns:\n    int: The sum of the product of consecutive binomial coefficients.\n    \"\"\"\n\n    # calculate the sum of the product of consecutive binomial coefficients\n    product_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i+1):\n            product *= binomial_Coeff(n-1, j)\n        product_sum += product\n\n    return product_sum\n\n\nn = 3\nprint(sum_of_products(n))\n",
        "test": "assert binomial_Coeff(5,3) == 10",
        "num_ids": 2048,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)",
        "test": "assert removezero_ip(\"01.02.03.04\") == \"1.2.3.4\"",
        "num_ids": 1618,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 == 1:\n            odd = num\n            break\n    if even is not None and odd is not None:\n        return abs(even - odd)\n    else:\n        return None\n",
        "test": "assert diff_even_odd([1,2,3,4,5]) == 1",
        "num_ids": 2000,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1, n2 = str1, str2\n    n1 = list(n1)\n    n2 = list(n2)\n    i, j = 0, 0\n    count = 0\n    \n    while i < len(n1) and j < len(n2):\n        if n1[i] != n2[j]:\n            count += 1\n            n1[i], n2[j] = n2[j], n1[i]\n        i += 1\n        j += 1\n        \n    return count\n",
        "test": "assert min_Swaps(\"11001100\",\"11001100\") == 0 #Testcase 2",
        "num_ids": 2814,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "test": "assert tuple_size((1, 2)) == sys.getsizeof(1) + sys.getsizeof(2)",
        "num_ids": 1065,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if not arr1:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    idx1 = min(k // 2, len(arr1)) - 1\n    idx2 = k - idx1 - 2\n    if arr1[idx1] < arr2[idx2]:\n        return find_kth(arr1[idx1+1:], arr2, k - idx1 - 1)\n    else:\n        return find_kth(arr1, arr2[idx2+1:], k - idx2 - 1)\n",
        "test": "assert find_kth([1,3,5,7,9], [2,4,6,8,10], 1) == 1",
        "num_ids": 3317,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert number to string and store its length in n\n    n = len(str(number))\n\n    # initialize sum to 0\n    sum = 0\n\n    # iterate over the digits of the number and add the cube of each digit to sum\n    for digit in str(number):\n        sum += int(digit) ** n\n\n    # check if the number is equal to the sum of its digits' cubes\n    if number == sum:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(0) == True",
        "num_ids": 1861,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n",
        "test": "assert sum_average(1) == (1, 1) ",
        "num_ids": 1268,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to keep track of the characters in the string\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    # If no repeated character is found, return None\n    return None\n",
        "test": "assert first_repeated_char('hello') == 'l'",
        "num_ids": 1430,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [1]\n    for i in range(2, n+1):\n        ludic.append(i)\n        for j in range(1, i):\n            if i % (j+1) == 0 and j+1 in ludic:\n                ludic.remove(j+1)\n                if j+1 > i/2 and j+1 in ludic:\n                    ludic.remove(i)\n    return ludic\n",
        "test": "assert get_ludic(2) == [1]   # 1 is the only lucid number less than or equal to 2",
        "num_ids": 1839,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)\n",
        "test": "assert reverse_words(\"hello world\") == \"world hello\"",
        "num_ids": 1114,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True ",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    return math.radians(degree)\n",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"Hello World\", \"World\") == (\"World\", 6, 11)",
        "num_ids": 1622,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 1556,
        "indeed": true
    },
    {
        "number": 610,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i != L:\n            new_list.append(list1[i])\n    return new_list\n",
        "test": "assert remove_kth_element([], 0) == [] ",
        "num_ids": 1500,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Get the length of the list\n    n = len(test_list)\n    # Initialize a variable to keep track of the maximum value\n    max_val = float('-inf')\n    # Loop through each row and update the maximum value if the nth element is greater\n    for i in range(n):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    return max_val\n",
        "test": "assert max_of_nth([[9, 8, 7], [6, 5, 4], [3, 2, 1]], 0) == 9",
        "num_ids": 1887,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1,2], [3,4], [5,6]]) == [[1, 3, 5], [2, 4, 6]]  # test case 1",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    total = 0\n    for i in test_list:\n        total += i\n        cum_sum.append(total)\n    return cum_sum\n",
        "test": "assert cummulative_sum([1,2,3,4]) == [1,3,6,10] # Test case 1",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        if len(tup) == 0:\n            result.append(0)\n        else:\n            result.append(sum(tup) / len(tup))\n    return result\n",
        "test": "assert average_tuple([(1,2,3), (4,5,6)]) == [2, 5]",
        "num_ids": 1477,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return \"Error: Tuples must be of same length\"\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] % test_tup2[i])\n        return tuple(result)\n",
        "test": "assert tuple_modulo((10, 20, 30), (1, 2, 3)) == (0, 0, 0) ",
        "num_ids": 1883,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif steps == 0:\n        return -1\n    else:\n        if steps >= d:\n            return 1 + min_Jumps(steps-d, d)\n        else:\n            return 1 + min_Jumps(steps, steps)\n",
        "test": "assert min_Jumps(2, 1) == 1",
        "num_ids": 1961,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] != 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            result.append(nums1[i])\n    return result\n",
        "test": "assert div_list([1, 2, 3], [1, 1, 3]) == [1, 2, 1]",
        "num_ids": 1698,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    digits = \"\"\n    letters = \"\"\n    for char in test_str:\n        if char.isdigit():\n            digits += char\n        else:\n            letters += char\n    return letters + digits\n",
        "test": "assert move_num(\"a1bc23\") == \"abc123\"",
        "num_ids": 1691,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def largest_subset(a):\n    a.sort()\n    subsets = []\n    max_size = 0\n    for i in range(len(a)):\n        subset = [a[i]]\n        for j in range(i+1, len(a)):\n            if all(a[j] % x == 0 for x in subset):\n                subset.append(a[j])\n        subsets.append(subset)\n        if len(subset) > max_size:\n            max_size = len(subset)\n    return max_size\n",
        "test": "assert largest_subset([1]) == 1",
        "num_ids": 2488,
        "indeed": true
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = k = 0\n    arr3 = [0] * (n + 1)\n\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            arr3[k] = arr1[i]\n            i += 1\n        else:\n            arr3[k] = arr2[j]\n            j += 1\n        k += 1\n\n    while i < n:\n        arr3[k] = arr1[i]\n        i += 1\n        k += 1\n\n    while j < n:\n        arr3[k] = arr2[j]\n        j += 1\n        k += 1\n\n    if n % 2 == 0:\n        return (arr3[n // 2 - 1] + arr3[n // 2]) / 2\n    else:\n        return arr3[n // 2]\n",
        "test": "assert get_median([1, 2, 3, 4], [5, 6, 7, 8], 4) == 4.5",
        "num_ids": 3090,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n",
        "test": "assert nth_nums([2, 3, 4], 2) == [4, 9, 16]",
        "num_ids": 1269,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        # Swap the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1371,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # The length of the semicircle is 2*r\n    semicircle_length = 2 * r\n    # The length of the diameter is 2*r\n    diameter = 2 * r\n    # The height of the triangle is r\n    height = r\n    # The base of the triangle is the diameter minus the length of the semicircle\n    base = diameter - semicircle_length\n    # The area of the triangle is 0.5 * base * height\n    area = 0.5 * base * height\n    return area\n",
        "test": "assert triangle_area(2) == 5.026548245743669 ",
        "num_ids": 1781,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    n = len(array)\n    if end == None:\n        end = n\n    for i in range(start,end):\n        if array[i] > i+1:\n            return i+1\n    return end+1\n",
        "test": "assert find_First_Missing([1]) == 2",
        "num_ids": 1871,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "test": "assert Split([2,3,4,5,6]) == [2,4,6] # testcase 1",
        "num_ids": 1316,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj_coords = []\n    x, y = ele\n    for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]:\n        new_x = x + dx\n        new_y = y + dy\n        if (new_x, new_y) not in sub:\n            adj_coords.append((new_x, new_y))\n    return adj_coords\n",
        "test": "assert adjac((5, 5)) == [(4, 5), (5, 4), (5, 6), (6, 5)] # Test case for bottom right corner",
        "num_ids": 2040,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text\n",
        "test": "assert replace_spaces(\"Hello_World\") == \"Hello World\"",
        "num_ids": 940,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    result = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            result.append(num)\n    result.extend(zeroes)\n    return result\n",
        "test": "assert move_zero([1, 2, 0, 4, 0, 6, 5, 0]) == [1, 2, 4, 6, 5, 0, 0, 0]",
        "num_ids": 2158,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum\n",
        "test": "assert pair_xor_Sum([], 0) == 0",
        "num_ids": 1901,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1338,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) is True",
        "num_ids": 1260,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # formula to calculate the wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    # round the wind chill index to the next integer\n    rounded_wc = math.ceil(wc)\n    return rounded_wc\n",
        "test": "assert wind_chill(10, 5) == 3",
        "num_ids": 2131,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['alice', 'Bob', 'Charlie']) == 10",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n",
        "test": "assert remove_parenthesis(\"hello (world)\") == \"hello \"",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n",
        "test": "assert is_nonagonal(0) == 0  # edge case",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle(\"\") == False # empty string",
        "num_ids": 1556,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    k = min(k, n)\n    i = 0\n    j = k-1\n    while i < j:\n        input[i], input[j] = input[j], input[i]\n        i += 1\n        j -= 1\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 2) == [2,1,3,4,5]",
        "num_ids": 2074,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n",
        "test": "assert add_dict_to_tuple(('a', 'b', 'c'), {'d': 1, 'e': 2}) == ('a', 'b', 'c', {'d': 1, 'e': 2})",
        "num_ids": 1777,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1]/(n*n)\n",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6]]) == 10/4 # max average path: [1,4,5,6]",
        "num_ids": 3566,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float\n    (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[name] = data\n    return filtered_students\n",
        "test": "assert filter_data({'Alice': (1.65, 50), 'Bob': (1.75, 65), 'Charlie': (1.80, 70)}, 1.7, 55) == {'Bob': (1.75, 65), 'Charlie': (1.8, 70)}",
        "num_ids": 2894,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 1594,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = base ** power  # calculate the base to the power\n    sum_of_digits = 0  # initialize sum of digits to 0\n    for digit in str(result):  # convert result to string and iterate over each character\n        sum_of_digits += int(digit)  # convert character back to integer and add to sum_of_digits\n    return sum_of_digits  # return the final sum of digits\n",
        "test": "assert power_base_sum(3, 2) == 9  # 3^2 = 9",
        "num_ids": 1570,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n",
        "test": "assert extract_quotation('He said \"Hello World\"') == ['Hello World']",
        "num_ids": 1155,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result\n",
        "test": "assert multiply_elements((1,2,3,4,5)) == (2,6,12,20)",
        "num_ids": 1878,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]",
        "num_ids": 1665,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([1, 2, 2, 3, 4, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1479,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = (math.pi * r * slant_height)\n    return lateral_surface_area\n",
        "test": "assert lateralsurface_cone(3, 4) == math.pi*3*math.sqrt(3**2+4**2) # radius = 3, height = 4",
        "num_ids": 1543,
        "indeed": true
    },
    {
        "number": 732,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[,.\\s]+', ':', text)\n    return text\n",
        "test": "assert replace_specialchar('hello world') == 'hello:world'",
        "num_ids": 1059,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 2405,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    mod = 10**9+7\n    # Initialize prefix and suffix products\n    prefix_prod = [0]*(n+1)\n    suffix_prod = [0]*(n+1)\n    # Initialize prefix and suffix sums\n    prefix_sum = [0]*(n+1)\n    suffix_sum = [0]*(n+1)\n    # Calculate prefix products\n    for i in range(1, n+1):\n        prefix_prod[i] = (prefix_prod[i-1]*arr[i-1])%mod\n    # Calculate suffix products\n    for i in range(n-1, -1, -1):\n        suffix_prod[i] = (suffix_prod[i+1]*arr[i])%mod\n    # Calculate prefix sums\n    for i in range(1, n+1):\n        prefix_sum[i] = (prefix_sum[i-1]+prefix_prod[i])%mod\n    # Calculate suffix sums\n    for i in range(n-1, -1, -1):\n        suffix_sum[i] = (suffix_sum[i+1]+suffix_prod[i])%mod\n    # Calculate sum of products of all possible sublists\n    res = 0\n    for i in range(n):\n        res += (prefix_sum[i+1]*suffix_sum[i+1])%mod\n    # Return the result\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([0, 1, 2]) == 0",
        "num_ids": 2216,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def set_middle_bits(n):\n    # find the number of bits in the given number\n    num_bits = n.bit_length()\n    \n    # toggle the bits except the first and the last bit\n    for i in range(1, num_bits-1):\n        bit_val = (n >> i) & 1\n        n ^= (bit_val << i)\n        \n    return n\n",
        "test": "assert set_middle_bits(0b1101) == 0b1001",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "test": "assert left_insertion([1,2,3,4,5], 6) == 5",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"elephant\") == True",
        "num_ids": 1186,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1/2\n    else:\n        return 1/n + geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1/2",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the variables\n    i = 1\n    tn = 0\n    digits = 0\n\n    # Loop until the triangular number has n digits\n    while digits < n:\n        # Calculate the next triangular number\n        tn += i\n        i += 1\n\n        # Calculate the number of digits in the triangular number\n        digits = int(math.log10(tn)) + 1\n\n    # Return the index of the smallest triangular number with n digits\n    return i - 1",
        "test": "assert find_Index(1) == 1 # smallest triangular number with 1 digit is 1 with index 1",
        "num_ids": 1753,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    dictionary = {}\n    for i in range(0, len(test_tup), 2):\n        if i+1 < len(test_tup):\n            dictionary[test_tup[i]] = test_tup[i+1]\n    return dictionary\n",
        "test": "assert tuple_to_dict(()) == {} # Empty tuple input",
        "num_ids": 1816,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Characters_Same(s):\n    '''\n    Check whether all characters in the string s are the same.\n    '''\n    # If the string is empty or has only one character, it's all the same\n    if len(s) < 2:\n        return True\n    # Check if all characters are the same as the first one\n    for c in s:\n        if c != s[0]:\n            return False\n    return True\n",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side**2)\n    return area\n",
        "test": "assert area_tetrahedron(3) == math.sqrt(3/2) * 3 * 3",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def rotate_right(lst, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(lst)\n    # Empty list or rotation by complete length of list or more\n    if n == 0 or m == 0 or m == n:\n        return lst\n\n    # Ensure m is always less than length of list\n    m = m % n\n\n    # Reverse the whole list\n    lst = lst[::-1]\n    # Reverse the first m elements\n    lst[:m] = lst[:m][::-1]\n    # Reverse the remaining n-m elements\n    lst[m:] = lst[m:][::-1]\n\n    return lst\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 1848,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 947,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n\n    return result\n",
        "test": "assert divisible_by_digits(123, 123) == [123]",
        "num_ids": 2248,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)*(a/360)*math.pi\n",
        "test": "assert sector_area(2, 180) == 4 * math.pi  # for a 180 degree angle",
        "num_ids": 1708,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]",
        "test": "assert lcs_of_three(\"ABCDGH\",\"AEDFHR\", \"BEGFCH\") == \"GF\" ",
        "num_ids": 4883,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regex to find all capitalized words and add spaces between them\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)",
        "test": "assert capital_words_spaces('The quick brown Fox') == 'The quick brown Fox'",
        "num_ids": 1395,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)",
        "test": "assert sort_numeric_strings(['1', '5', '10', '50']) == ['1', '5', '10', '50']",
        "num_ids": 1579,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += list(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1, 2], (3, 4)) == [1, 2, 3, 4]",
        "num_ids": 1216,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Helper function to check if the given array represents a min heap or not.\n    '''\n    for i in range(len(arr)):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n",
        "test": "assert check_min_heap_helper([], 0) == True # Empty tree is a min heap",
        "num_ids": 2463,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1991,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sorting the list based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Taking only the first K elements from the sorted list\n    result = test_list[:K]\n    \n    # Sorting the result list based on the first element of the tuple\n    result.sort(key=lambda x: x[0])\n    \n    return result",
        "test": "assert min_k([('John', 2.5), ('Jane', 2.1), ('Bob', 2.7), ('Alice', 2.5)], 2) == [('Jane', 2.1), ('John', 2.5)]",
        "num_ids": 2514,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1,2,3], [4,2,6], [7,2,9]) == [2]",
        "num_ids": 2197,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Remove duplicates and sort the list in ascending order\n    unique_numbers = sorted(set(numbers))\n    # If there are less than two numbers, there is no second smallest\n    if len(unique_numbers) < 2:\n        return None\n    # Return the second element of the sorted list\n    return unique_numbers[1]\n",
        "test": "assert second_smallest([3, 8, 1, 6, 5, 2]) == 2",
        "num_ids": 1631,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"ab\")",
        "num_ids": 1502,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    n = len(test_list)\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0  # Empty list",
        "num_ids": 1851,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for sublist in list1:\n        t = tuple(sublist)\n        if t in counts:\n            counts[t] += 1\n        else:\n            counts[t] = 1\n    return counts\n",
        "test": "assert unique_sublists([[1,2,3], [4,5,6], [1,2,3], [7,8,9], [1,2,3]]) == {(1,2,3): 3, (4,5,6): 1, (7,8,9): 1} ",
        "num_ids": 2206,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n    except ValueError:\n        return False\n    else:\n        decimal_parts = num.split('.')\n        if len(decimal_parts) != 2:\n            return False\n        integer_part = decimal_parts[0]\n        fractional_part = decimal_parts[1]\n        if len(integer_part) > 1 and integer_part[0] == '0':\n            return False\n        if len(fractional_part) != 2:\n            return False\n        for digit in fractional_part:\n            if not digit.isdigit():\n                return False\n        return True\n",
        "test": "assert is_decimal('12.34') == True",
        "num_ids": 1510,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 0:\n        return False\n    else:\n        return len(set(arr)) == 1\n",
        "test": "assert unique_Element([1, 1, 1, 1, 1]) == True",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 1301,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1",
        "num_ids": 1776,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import math\n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number.\n    '''\n    polite_num = []\n    num = 1\n    for i in range(n):\n        if i == 0:\n            polite_num.append(num)\n            num += 1\n        else:\n            k = 0\n            while True:\n                if k == 0:\n                    polite_num.append(num)\n                    num += 1\n                    k += 1\n                elif polite_num[k-1] == num:\n                    num += 1\n                    k += 1\n                else:\n                    break\n\n    return polite_num[n-1]",
        "test": "assert is_polite(1) == 1",
        "num_ids": 2357,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 1271,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    num_dict = {}\n    for num in arr:\n        target = sum - num\n        if target in num_dict:\n            count += num_dict[target]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2",
        "num_ids": 2040,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1,2,3],[1,2]) == [3]",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 # When n is 1, the sum should be 1.",
        "num_ids": 1285,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    \n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n            \n    return len(stack) == 0\n",
        "test": "assert check_expression('(a+b*(c-d)') == False # Unbalanced expression",
        "num_ids": 2543,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    return ' '.join(filtered_words)\n",
        "test": "assert remove_length(\"\", 0) == \"\"",
        "num_ids": 1401,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If there are no matches, return None\n    if not matches:\n        return None\n    \n    # Create a list to store the positions and occurrences of the pattern in the text\n    result = []\n    \n    # Loop through the matches and append the position and occurrence of each match to the result list\n    for i, match in enumerate(matches):\n        position = text.index(match)\n        occurrence = i + 1\n        result.append((position, occurrence))\n    \n    return result\n",
        "test": "assert occurance_substring(\"hello world\", \"he\") == [(0, 1)]",
        "num_ids": 1885,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([2, 4, 6, 8, 10]) == False",
        "num_ids": 1409,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n        elif i < len(test_str)-1 and test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0 # no characters have vowels as their neighbors",
        "num_ids": 1841,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1408,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n",
        "test": "assert pack_consecutive_duplicates([1, 1, 2, 2, 3, 3]) == [[1, 1], [2, 2], [3, 3]]",
        "num_ids": 1574,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in count_dict:\n            count_dict[tuple(sublist)] = 1\n        else:\n            count_dict[tuple(sublist)] += 1\n    return count_dict\n",
        "test": "assert unique_sublists([]) == {} # empty list",
        "num_ids": 2238,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            for comb in combinations(test_list, j):\n                if sum(comb) == 10:\n                    result.append(comb)\n    return result\n",
        "test": "assert find_combinations([]) == []",
        "num_ids": 2719,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n",
        "test": "assert count_divisors(6) == True  # should return True",
        "num_ids": 1790,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sub_arr = arr[i:j+1]\n            if len(sub_arr) % 2 != 0:\n                sum += sum(sub_arr)\n    return sum\n",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 1692,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Normalize the input color to 0.0-1.0 range\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    # Determine the maximum and minimum values of r, g, b\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the H value\n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = 60.0 * ((g - b) / (max_value - min_value) + 0)\n    elif max_value == g:\n        h = 60.0 * ((b - r) / (max_value - min_value) + 2)\n    else:\n        h = 60.0 * ((r - g) / (max_value - min_value) + 4)\n\n    # Calculate the S value\n    if max_value == 0:\n        s = 0\n    else:\n        s = (max_value - min_value) / max_value\n\n    # Calculate the V value\n    v = max_value\n\n    return h, s, v\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) ",
        "num_ids": 3814,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_found = False\n    odd_found = False\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0 and not even_found:\n            even_product *= num\n            even_found = True\n        elif num % 2 != 0 and not odd_found:\n            odd_product *= num\n            odd_found = True\n        \n        if even_found and odd_found:\n            break\n    \n    return even_product * odd_product\n",
        "test": "assert mul_even_odd([1, 3, 5, 7]) == 0",
        "num_ids": 1934,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Using the eval() function to convert string to tuple\n    tup = eval(test_str)\n\n    # Using list comprehension to convert each element of the tuple to integer\n    tup = [int(i) for i in tup]\n\n    # Converting the list back to tuple\n    tup = tuple(tup)\n\n    return tup\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 1362,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "test": "assert right_insertion([], 5) == 0",
        "num_ids": 1160,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three('abbb')",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list)\n    new_tuple = new_tuple + (test_str,)\n    return new_tuple\n",
        "test": "assert new_tuple([], \"world\") == (\"world\",)",
        "num_ids": 1678,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_position(nums):\n    \"\"\"\n    Returns True if every even index contains an even number in the given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8]) == True",
        "num_ids": 1316,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) != tuple:\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert remove_nested((1, 2, 3, 4)) == (1, 2, 3, 4)",
        "num_ids": 1511,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_list(input_list):\n    '''\n    Count the number of lists in a given list of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count",
        "test": "assert count_list([]) == 0",
        "num_ids": 1318,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input.\n    It returns the last position of the element x in the array.\n    \"\"\"\n    n = len(arr)\n    start = 0\n    end = n - 1\n    result = -1  # initialize result to -1\n\n    # loop until start <= end\n    while start <= end:\n        mid = (start + end) // 2\n        # if x is present at mid\n        if arr[mid] == x:\n            result = mid  # update result to mid\n            start = mid + 1  # move start to mid+1\n        # if x is greater than arr[mid]\n        elif x > arr[mid]:\n            start = mid + 1  # move start to mid+1\n        # if x is smaller than arr[mid]\n        else:\n            end = mid - 1  # move end to mid-1\n\n    return result  # return the last position of x\n",
        "test": "assert last([1,2,3,4,5],5) == 4",
        "num_ids": 2342,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb(\"ab\") == True",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 1255,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize the sum variable\n    total = 0\n    \n    # Iterate over the range from 1 to n\n    for i in range(1, n+1):\n        # Check if i is odd\n        if i % 2 != 0:\n            # Add i to the total\n            total += i\n    \n    # Return the total sum of odd numbers\n    return total\n",
        "test": "assert sum_odd(5) == 9",
        "num_ids": 1314,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "test": "assert _sum([1,2,3,4,5]) == 15",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # convert the number to binary\n    binary_n = bin(n)[2:]\n\n    # add 0's to make the binary string 32 bits long\n    binary_n = binary_n.zfill(32)\n\n    # rotate the bits to the left by d positions\n    rotated_binary = binary_n[d:] + binary_n[:d]\n\n    # convert the rotated binary back to decimal\n    rotated_decimal = int(rotated_binary, 2)\n\n    return rotated_decimal\n",
        "test": "assert left_rotate(0x00000000, 2) == 0x00000000  # Test with all zeroes",
        "num_ids": 2300,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello world\") == \"Helloworld\"",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 2, 3) == 0",
        "num_ids": 1399,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    pivot = find_pivot(arr, 0, n-1)\n\n    # If pivot is not found, array is not rotated at all\n    if pivot == -1:\n        return 0\n\n    # Find the index of the smallest element in the array\n    smallest = arr[0]\n    smallest_index = 0\n\n    for i in range(1, n):\n        if arr[i] < smallest:\n            smallest = arr[i]\n            smallest_index = i\n\n    # Return the number of rotations required\n    return smallest_index\n\n\ndef find_pivot(arr, low, high):\n    '''\n    Helper function to find the pivot index of the array.\n    '''\n    if high < low:\n        return -1\n    if high == low:\n        return low\n\n    mid = int((low + high) / 2)\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return mid\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return mid - 1\n    if arr[low] >= arr[mid]:\n        return find_pivot(arr, low, mid - 1)\n    return find_pivot(arr, mid + 1, high)\n",
        "test": "assert count_rotation([1, 2, 3, 4]) == 0",
        "num_ids": 2384,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    i = 0\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_perfect_square(10) == False",
        "num_ids": 1139,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_product_even(arr):  \n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([2, 4, 6]) == True",
        "num_ids": 1007,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [10, 11, 12]",
        "num_ids": 1947,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    # iterate through the string\n    for char in test_str:\n        # check if character is uppercase\n        if char.isupper():\n            current_run += 1\n        else:\n            # update max_run if current_run is greater\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    # check if last character was uppercase\n    if current_run > max_run:\n        max_run = current_run\n    return max_run\n",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 1743,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1104,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K(('a', 'b', 'c', 'd'), 'a') == True",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((1, 2, 3), (4, 5, 6)) == False",
        "num_ids": 1610,
        "indeed": true
    }
]