[
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n",
        "test": "assert similar_elements((1,2,3,4), (3,4,5,6)) == {3, 4}",
        "num_ids": 412
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(4) == True # 4 is not prime",
        "num_ids": 394
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            smallest = heap[0]\n            if num > smallest:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([],0) == []",
        "num_ids": 565
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    if x == 0:\n        return False\n    while x != 1:\n        if x % 2 != 0:\n            return False\n        x = x // 2\n    return True\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 257
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # using regular expression to find all words that are at least 4 characters long\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog.\") == ['quick', 'brown', 'jumps', 'over', 'lazy']",
        "num_ids": 413
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "test": "assert square_nums([]) == []",
        "num_ids": 271
    },
    {
        "number": 9,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Rotations(string):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(string)\n    for i in range(n):\n        if string[i:] + string[:i] == string:\n            return i\n    return n\n",
        "test": "assert find_Rotations(\"hello\") == 0 ",
        "num_ids": 340
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1 and last_occ != -1:\n        s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    return s",
        "test": "assert remove_Occ(\"abc\", \"d\") == \"abc\"",
        "num_ids": 479
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the sum of each row in the matrix and store it in a list\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the row sums in ascending order\n    sorted_row_sums = sorted(row_sums)\n    \n    # Create a new matrix with the sorted rows\n    sorted_matrix = []\n    for row_sum in sorted_row_sums:\n        # Find the index of the original row that corresponds to the current row sum\n        index = row_sums.index(row_sum)\n        sorted_matrix.append(M[index])\n    \n    return sorted_matrix\n",
        "test": "assert sort_matrix([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]] ",
        "num_ids": 874
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume\n",
        "test": "assert find_Volume(2,3,4) == 12",
        "num_ids": 325
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_lowercase_underscore(\"word_word\") == True",
        "num_ids": 377
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    This function takes the side length of a square and returns its perimeter.\n    \"\"\"\n    return 4 * a\n",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 215
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_chars(str1, str2):\n    \"\"\"\n    This function removes all characters from str1 which are present in str2.\n    \"\"\"\n    str1_list = list(str1)\n    str2_list = list(str2)\n\n    for char in str2_list:\n        if char in str1_list:\n            str1_list.remove(char)\n\n    new_str = ''.join(str1_list)\n    return new_str\n",
        "test": "assert str_to_list(\"hello\", \"h\") == \"ello\"",
        "num_ids": 625
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        num_set.add(num)\n    return False\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False ",
        "num_ids": 458
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = x\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n * 3) + 1\n    return n == 1\n",
        "test": "assert is_woodall(1) == True",
        "num_ids": 304
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to string to reverse it\n    reverse_num = str(num)[::-1]\n    # Convert the reversed number back to integer\n    reverse_num = int(reverse_num)\n    # Check if the number is one less than twice its reverse\n    if num == 2 * reverse_num - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(13) == False",
        "num_ids": 439
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
        "test": "assert find_Max_Num([2, 3, 5, 6, 9]) == 96532",
        "num_ids": 524
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(10, -5) == True",
        "num_ids": 340
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Formula to find the nth octagonal number is n * (3 * n - 2)\n    octagonal_num = n * (3 * n - 2)\n    return octagonal_num",
        "test": "assert is_octagonal(1) == 1  # first octagonal number should be 1",
        "num_ids": 337
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = s[i:j+1]\n            sum_of_digits = sum(int(c) for c in sub_str if c.isdigit())\n            if sum_of_digits == len(sub_str):\n                count += 1\n    return count\n",
        "test": "assert count_Substrings(\"123\") == 1",
        "num_ids": 488
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Finds the smallest number in a list.\n    \"\"\"\n    return min(xs)\n",
        "test": "assert smallest_num([2, 3, 5, 1, 4]) == 1",
        "num_ids": 249
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    max_diff = test_list[1] - test_list[0]\n    min_value = test_list[0]\n    for i in range(1, len(test_list)):\n        diff = test_list[i] - min_value\n        if diff > max_diff:\n            max_diff = diff\n        if test_list[i] < min_value:\n            min_value = test_list[i]\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 576
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjects = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjects\n",
        "test": "assert subject_marks([]) == [] # check if function can handle empty list",
        "num_ids": 479
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for item in data_list:\n        if isinstance(item, list):\n            sum += recursive_list_sum(item)\n        else:\n            sum += item\n    return sum\n",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 456
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([-1, -2, -3, -4, -5]) == 0",
        "num_ids": 343
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_number(n):\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(sum(bell[-k] for k in range(1, i+1)) // i)\n    return bell[n]\n",
        "test": "assert bell_number(0) == 1 # should return 1 for n=0",
        "num_ids": 489
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    \n    increasing = False\n    decreasing = False\n    \n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            increasing = True\n        elif A[i] > A[i+1]:\n            decreasing = True\n        \n        if increasing and decreasing:\n            return False\n    \n    return True\n",
        "test": "assert is_Monotonic([1,2,3,4]) == True",
        "num_ids": 483
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_len = len(l)\n    s_len = len(s)\n    for i in range(l_len - s_len + 1):\n        if l[i:i+s_len] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1, 2, 3], [1, 2]) == True",
        "num_ids": 356
    },
    {
        "number": 70,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # create a list to store the length of each tuple\n    length_list = []\n\n    # iterate through each tuple in the input list\n    for tup in Input:\n        # append the length of each tuple to the length_list\n        length_list.append(len(tup))\n\n    # check whether all the lengths in the length_list are equal\n    if len(set(length_list)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_equal_tuple(((1,2), (3,4), (5,6))) == True # True, all elements have same length",
        "num_ids": 448
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        \n        if gap <= 1:\n            sorted = True\n            gap = 1\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums\n",
        "test": "assert comb_sort([]) == []",
        "num_ids": 819
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    for i in range(1, int(n**0.5)+1):\n        if (i*i - n) % (2*i) == 0:\n            return True\n    return False\n",
        "test": "assert dif_Square(5) == True ",
        "num_ids": 412
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_dict = {color: index for index, color in enumerate(colors)}\n    pattern_dict = {pattern: index for index, pattern in enumerate(patterns)}\n    color_patterns = [color_dict[color] for color in colors]\n    pattern_colors = [pattern_dict[pattern] for pattern in patterns]\n    return color_patterns == pattern_colors\n",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], ['solid', 'stripes', 'dotted']) == True",
        "num_ids": 666
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result\n",
        "test": "assert find_tuples([(1,2,3),(4,5,6),(7,8,9)], 2) == [(6, 6, 6)] # check for K=2, only (6,6,6) is divisible by 2",
        "num_ids": 723
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    '''\n    This function checks whether a given number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(22) == True",
        "num_ids": 232
    },
    {
        "number": 79,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def word_len(s):\n    \"\"\"\n    Checks whether the length of the word is odd or not.\n\n    Args:\n        s (str): The input word.\n\n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(s) % 2 == 1\n",
        "test": "assert word_len(\"hello\") == True",
        "num_ids": 281
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 257
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * 1**3 # radius 1 sphere",
        "num_ids": 346
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for char in strr:\n        result += ord(char)\n    return chr(result % 26 + 65)\n",
        "test": "assert get_Char('a') == 1 # single character 'a' returns 1",
        "num_ids": 475
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [None, 1]\n        for i in range(2, n+1):\n            sum = 0\n            for j in range(1, i):\n                if sequence[j] != None:\n                    sum += sequence[i-j]\n            sequence.append(sum)\n        return sequence[n]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 470
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area",
        "test": "assert surfacearea_sphere(2) == 50.26548245743669",
        "num_ids": 327
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * ((2 * n) - 1))\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 241
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n",
        "test": "assert merge_dictionaries_three({'a':1, 'b':2}, {'c':3, 'd':4}, {}) == {'a':1, 'b':2, 'c':3, 'd':4}",
        "num_ids": 443
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict",
        "test": "assert freq_count([1,2,3,4,5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 565
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize the minimum difference to a large value\n    min_diff = float('inf')\n    # initialize the closest number to None\n    closest_num = None\n    # iterate through the numbers from 1 to N-1\n    for i in range(1, N):\n        # calculate the absolute difference between N and i\n        diff = abs(N - i)\n        # if the difference is smaller than the current minimum difference\n        if diff < min_diff:\n            # update the minimum difference and the closest number\n            min_diff = diff\n            closest_num = i\n    # return the closest number\n    return closest_num\n",
        "test": "assert closest_num(10) == 9",
        "num_ids": 405
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6 ",
        "num_ids": 342
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n    # Check if the substring is in the list of words\n    if sub_str in words:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \"universe\") == False",
        "num_ids": 382
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n_str = str(n)\n    undulating = False\n    for i in range(len(n_str)-1):\n        if n_str[i] < n_str[i+1]:\n            if undulating:\n                return False\n            undulating = True\n        elif n_str[i] > n_str[i+1]:\n            if not undulating:\n                return False\n            undulating = False\n    return True\n",
        "test": "assert is_undulating(1223) == False # number without consecutive digits",
        "num_ids": 492
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert power(2,0) == 1 # check base case",
        "num_ids": 206
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Get the index of the tuple with minimum second value using min function with itemgetter\n    index = min(range(len(test_list)), key=lambda i: test_list[i][1])\n    # Return the first value of the tuple at the index found above\n    return test_list[index][0]\n",
        "test": "assert index_minimum([(1, 3), (2, 2), (3, 1)]) == 3",
        "num_ids": 482
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5, 6], [7, 8], [9, 10, 11, 12]]) == 2",
        "num_ids": 488
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(6) == 4  # 1, 2, 3, 6",
        "num_ids": 396
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n",
        "test": "assert frequency_lists([[1,2,3], [2,3,4], [3,4,5]]) == {1: 1, 2: 2, 3: 3, 4: 2, 5: 1}",
        "num_ids": 609
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiply_num(numbers):   \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # calculate the product of all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n        \n    # divide the product with the length of the list to get the average\n    average = product / len(numbers)\n    \n    return average\n",
        "test": "assert multiply_num([0, 1, 2, 3]) == 0 ",
        "num_ids": 434
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    '''\n    Convert a decimal integer to binary string.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 370
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    for i in range(len(num_str)-1, -1, -1):\n        if num_str[i] != '9':\n            # If the digit is not 9, increment it by 1 and return the new number.\n            return int(num_str[:i] + str(int(num_str[i])+1) + num_str[i+1:][::-1])\n        else:\n            # If the digit is 9, set it to 0 and continue checking previous digits.\n            num_str = num_str[:i] + '0' + num_str[i+1:][::-1]\n    # If all digits are 9, add a new digit at the beginning and return the new number.\n    return int('1' + num_str[::-1])\n",
        "test": "assert next_smallest_palindrome(1234) == 12321",
        "num_ids": 1279
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Return the kth element\n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 410
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join(x.title() for x in words[1:])\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 406
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m == 1:\n        return 1\n    elif m > n:\n        return 0\n    else:\n        return (m * eulerian_num(n-1, m-1)) / n\n",
        "test": "assert eulerian_num(0, 0) == 1",
        "num_ids": 445
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(sublist) for sublist in input_list]\n",
        "test": "assert sort_sublists([['banana', 'apple', 'cherry'], ['peach', 'pear', 'plum'], ['kiwi', 'orange', 'grape']]) == [['apple', 'banana', 'cherry'], ['peach', 'pear', 'plum'], ['grape', 'kiwi', 'orange']]",
        "num_ids": 608
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, True]) == 3",
        "num_ids": 293
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3)",
        "num_ids": 376
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import heapq\n\ndef merge_sorted_lists(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = [(num, i) for i, num in enumerate([num1, num2, num3])]\n    heapq.heapify(heap)\n    while heap:\n        num, list_index = heapq.heappop(heap)\n        merged_list.append(num)\n        if list_index == 0:\n            if num1:\n                num1, num1_ = num1[0], num1[1:]\n                heapq.heappush(heap, (num1, 0))\n        elif list_index == 1:\n            if num2:\n                num2, num2_ = num2[0], num2[1:]\n                heapq.heappush(heap, (num2, 1))\n        else:\n            if num3:\n                num3, num3_ = num3[0], num3[1:]\n                heapq.heappush(heap, (num3, 2))\n    return merged_list\n",
        "test": "assert merge_sorted_list([1, 2, 3], [2, 3, 4], [3, 4, 5]) == [1, 2, 2, 3, 3, 3, 4, 4, 5]",
        "num_ids": 1112
    },
    {
        "number": 109,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        binary = bin(int(s, 2))[2:]\n        if int(binary[0]) % 2 == 1:\n            count += 1\n        s = binary[-1] + s[:-1]\n    return count\n",
        "test": "assert odd_Equivalent('101', 2) == 2 # Test case 1",
        "num_ids": 482
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Flatten the nested list into a single list of elements\n    flattened = [elem for sublist in nestedlist for elem in sublist]\n    \n    # Find the common elements using a set intersection\n    common = set(flattened).intersection(*nestedlist)\n    \n    return list(common)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]",
        "num_ids": 557
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 246
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary) != 0:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}]) == True",
        "num_ids": 255
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n\n    Args:\n        nums (tuple of int): A tuple of positive integers.\n\n    Returns:\n        int: A single integer representing the concatenation of the input tuple.\n\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 406
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        elif isinstance(item, str):\n            try:\n                result.append(float(item))\n            except ValueError:\n                result.append(item)\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert list_to_float([[1, 2, '3'], [4.0, '5', '6.0']]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]",
        "num_ids": 603
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"Hello world\") == [\"Hello\", \"world\"]",
        "num_ids": 287
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def search(arr):\n    n = len(arr)\n    for i in range(0, n-1, 2):\n        if arr[i] != arr[i+1]:\n            return arr[i]\n    return arr[n-1]\n",
        "test": "assert search([1,1,2,2,3,3,4,4,5,6,6]) == 5",
        "num_ids": 646
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product1 = abs(list1[i][0] * list1[j][1])\n            product2 = abs(list1[i][1] * list1[j][0])\n            max_product = max(max_product, product1, product2)\n    return max_product\n",
        "test": "assert max_product_tuple([(1, 2), (3, 4), (5, 6)]) == 20",
        "num_ids": 636
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_of_divisors(n):\n        divisor_sum = 0\n        for i in range(1, n):\n            if n % i == 0:\n                divisor_sum += i\n        return divisor_sum\n    \n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if i == sum_of_divisors(sum_of_divisors(i)):\n            if i != sum_of_divisors(i):\n                amicable_sum += i\n    return amicable_sum\n",
        "test": "assert amicable_numbers_sum(100) == 0",
        "num_ids": 561
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    angle = cmath.phase(z)\n    return angle\n",
        "test": "assert angle_complex(cmath.sqrt(-1), 1) == cmath.pi/2 # angle of -1+1j is pi/2",
        "num_ids": 391
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    for i in string:\n        if i == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "test": "assert find_length('11110000') == 4 # for sub-string '11110000', there are 4 more 1s than 0s",
        "num_ids": 684
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1\n    common_divisors_sum = 0\n    while i <= a and i <= b:\n        if a % i == 0 and b % i == 0:\n            common_divisors_sum += i\n        i += 1\n    return common_divisors_sum\n",
        "test": "assert sum(8,12) == 10 # Common divisors of 8 and 12 are 1, 2, 4. So their sum is 7.",
        "num_ids": 531
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 208
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def long_words(n, words):\n    '''\n    Find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(3, ['apple', 'banana', 'orange']) == ['apple', 'banana', 'orange']",
        "num_ids": 460
    },
    {
        "number": 129,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    total = sum(my_matrix[0])\n    for i in range(1, n):\n        if sum(my_matrix[i]) != total:\n            return False\n    for i in range(n):\n        col_sum = 0\n        for j in range(n):\n            col_sum += my_matrix[j][i]\n        if col_sum != total:\n            return False\n    diag1_sum = 0\n    diag2_sum = 0\n    for i in range(n):\n        diag1_sum += my_matrix[i][i]\n        diag2_sum += my_matrix[i][n-i-1]\n    if diag1_sum != total or diag2_sum != total:\n        return False\n    return True\n",
        "test": "assert magic_square_test([[2,7,6],[9,5,1],[4,3,8]]) == True",
        "num_ids": 919
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    for key, value in freq_dict.items():\n        if value == max_freq:\n            return key\n",
        "test": "assert max_occurrences([1,1,2,2,3,3,4,4,4]) == 4 # all elements have same frequency",
        "num_ids": 583
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    vowel_list = [char for char in str_list if char in vowels]\n    vowel_list.reverse()\n    for i, char in enumerate(str_list):\n        if char in vowels:\n            str_list[i] = vowel_list.pop(0)\n    return \"\".join(str_list)\n",
        "test": "assert reverse_vowels(\"hello\") == \"holle\" # test with \"hello\"",
        "num_ids": 581
    },
    {
        "number": 132,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''.join(str(i) for i in tup1)\n    return string\n",
        "test": "assert tup_string(('a', 'b', 'c')) == 'abc'",
        "num_ids": 286
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n",
        "test": "assert sum_negativenum([1, -2, 3, -4, 5]) == -6  # example usage",
        "num_ids": 383
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 222
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count/non_zero_count\n",
        "test": "assert zero_count(array('i', [1, 1, 1, 1, 1])) == 0",
        "num_ids": 591
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n != 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 460
    },
    {
        "number": 139,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert circle_circumference(1) == 2 * 3.141592653589793 # small radius",
        "num_ids": 344
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = set()\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.update(extract_singly(item))\n        else:\n            flattened_list.add(item)\n    return flattened_list\n",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 605
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Move the maximum element to its correct position\n        if max_index != i:\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n            nums[:i+1] = reversed(nums[:i+1])\n    \n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 721
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 455
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0 # empty tuple",
        "num_ids": 285
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 492
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = extended_gcd(a, b)\n        x = x * (n // gcd(a, b))\n        y = y * (n // gcd(a, b))\n        return (x, y)\n\n\ndef extended_gcd(a, b):\n    '''\n    Returns a tuple (x, y) such that a*x + b*y = gcd(a, b)\n    '''\n    if b == 0:\n        return (1, 0)\n    else:\n        x, y = extended_gcd(b, a % b)\n        return (y, x - (a // b) * y)\n\n\ndef gcd(a, b):\n    '''\n    Returns the gcd of a and b using Euclid's algorithm\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n",
        "test": "assert find_solution(1, 1, 1) == (0, 1)",
        "num_ids": 1058
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new list to store the remaining elements\n    new_list = []\n    \n    # Loop through each element in the first list\n    for i in list1:\n        # Check if the element is present in the second list\n        if i not in list2:\n            # If not, add it to the new list\n            new_list.append(i)\n    \n    # Return the new list\n    return new_list\n",
        "test": "assert remove_elements([], []) == [] # empty list case",
        "num_ids": 433
    },
    {
        "number": 162,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += (n - 2 * i)\n    return total\n",
        "test": "assert sum_series(5) == 5 + 3 + 1 # n + (n-2) + (n-4)",
        "num_ids": 446
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Calculate the area of a regular polygon given the length of its sides and the number of sides.\n    '''\n    # Calculate the angle at each vertex\n    angle = (2 * pi) / l\n    # Calculate the apothem using the first side length and the angle\n    apothem = (s / 2) / tan(angle / 2)\n    # Calculate the area using the formula: 1/2 * perimeter * apothem\n    area = (l * s) / (4 * tan(angle / 2))\n    return area\n",
        "test": "assert area_polygon(5, 5) == 25 ",
        "num_ids": 443
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # compute the sum of divisors of n\n    div_sum = 1  # start with 1 as a divisor\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            div_sum += i + n // i\n    if math.sqrt(n) == int(math.sqrt(n)):\n        div_sum -= math.sqrt(n)\n    # check if the sum of divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(28) == 28",
        "num_ids": 823
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1):\n        if char.lower() == chr(i + 97):\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"world\") == 0",
        "num_ids": 454
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([2, 4, 6, 8]) == 6 ",
        "num_ids": 429
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    p = 1\n    while p < n:\n        p *= 2\n    return p\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 317
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,3,4,3,2,1], 3) == 3 # check for a number with 3 occurrences in the list",
        "num_ids": 423
    },
    {
        "number": 170,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 422
    },
    {
        "number": 171,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = 5\n    perimeter = sides * a\n    return perimeter\n",
        "test": "assert perimeter_pentagon(10) == 50",
        "num_ids": 274
    },
    {
        "number": 172,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] == 'std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count\n",
        "test": "assert count_occurance(\"\") == 0",
        "num_ids": 351
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 348
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif arr[i] > x:\n            break\n    if count > n//2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 1, 1, 2, 2, 3], 6, 2) == False",
        "num_ids": 585
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 329
    },
    {
        "number": 226,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])\n",
        "test": "assert odd_values_string(\"\") == \"\"",
        "num_ids": 295
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 228
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(2, 0, 1) == False  # all bits are not set in the range 0 to 1 for 2",
        "num_ids": 676
    },
    {
        "number": 229,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two sub-arrays, one for negative and one for positive elements\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    # merge the two sub-arrays\n    for i in range(len(neg)):\n        arr[i] = neg[i]\n    for i in range(len(pos)):\n        arr[len(neg)+i] = pos[i]\n    # return the re-arranged array\n    return arr\n",
        "test": "assert re_arrange_array([], 0) == []",
        "num_ids": 792
    },
    {
        "number": 230,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character,\n    and returns the string.\n    '''\n    return str1.replace(\" \", char)",
        "test": "assert replace_blank(\"hello world\", \"*\") == \"hello*world\"",
        "num_ids": 317
    },
    {
        "number": 232,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    result = [heapq.heappop(heap) for i in range(len(heap))]\n    result.reverse()\n    return result\n",
        "test": "assert larg_nnum([4,2,1,3,5],2) == [5,4]",
        "num_ids": 508
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n",
        "test": "assert lateralsuface_cylinder(1,1) == 6.283185307179586 ",
        "num_ids": 350
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(3) == 27",
        "num_ids": 199
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Get the binary representation of the number\n    binary_n = bin(n)[2:]\n    # Pad the binary representation with zeroes if the length is odd\n    if len(binary_n) % 2 == 1:\n        binary_n = '0' + binary_n\n    # Convert the binary representation to a list of bits\n    bits = [int(bit) for bit in binary_n]\n    # Set all even bits to 1\n    for i in range(0, len(bits), 2):\n        bits[i] = 1\n    # Convert the list of bits back to an integer\n    result = 0\n    for bit in bits:\n        result = (result << 1) | bit\n    return result\n",
        "test": "assert even_bit_set_number(0b10101010) == 0b10101010 ",
        "num_ids": 545
    },
    {
        "number": 237,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2)]) == {(1, 2): 2, (3, 4): 1}",
        "num_ids": 521
    },
    {
        "number": 238,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"abc\") == 6 # empty substring + 3 non-empty substrings",
        "num_ids": 358
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    total_count = 0\n    for i in range(2, m+1):\n        total_count += get_total_number_of_sequences(i, n-1)\n    return total_count\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 36 # Check with m=10 and n=4",
        "num_ids": 869
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "test": "assert replace_list([1,2,3,4], []) == [1,2,3,4]",
        "num_ids": 360
    },
    {
        "number": 242,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"Hello, World!\") == 13 ",
        "num_ids": 255
    },
    {
        "number": 244,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    perfect_square = (int(root) + 1) ** 2\n    return perfect_square\n",
        "test": "assert next_Perfect_Square(1) == 4",
        "num_ids": 316
    },
    {
        "number": 245,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    n = len(arr)\n    \n    # Initialize two arrays to store the maximum sum of increasing and decreasing subsequences respectively\n    inc_arr = [0] * n\n    dec_arr = [0] * n\n    \n    # Calculate the maximum sum of increasing subsequence at each index\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc_arr[i] = max(inc_arr[i], inc_arr[j] + arr[i])\n    \n    # Calculate the maximum sum of decreasing subsequence at each index\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                dec_arr[i] = max(dec_arr[i], dec_arr[j] + arr[i])\n    \n    # Calculate the maximum sum of a bitonic subsequence by taking the maximum of all possible bitonic subsequences\n    max_sum = inc_arr[0]\n    for i in range(1, n-1):\n        max_sum = max(max_sum, inc_arr[i] + dec_arr[i+1])\n    \n    return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 9",
        "num_ids": 1287
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"Invalid input! Only positive numbers are allowed.\"\n    if number == 0 or number == 1:\n        return number\n    else:\n        guess = number / 2\n        while abs(guess**2 - number) > 0.00001:\n            guess = (guess + number / guess) / 2\n        return guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 483
    },
    {
        "number": 247,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store lengths of longest palindromic subsequences of substring\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    # All characters in a string of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for substrings of length 2 to n\n    for start in range(n - 2, -1, -1):\n        for end in range(start + 1, n):\n            # If first and last characters are same, then they form a palindrome\n            if str[start] == str[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                # If first and last characters are different, then find the longest palindromic subsequence without these characters\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n - 1]\n",
        "test": "assert lps(\"abcde\") == 1 # all characters are different, hence only one character can be in the longest palindromic subsequence",
        "num_ids": 931
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += 1/i\n    return result\n",
        "test": "assert harmonic_sum(2) == 1.5 ",
        "num_ids": 316
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert both arrays to sets and find their intersection\n    intersection = set(array_nums1) & set(array_nums2)\n    \n    # Convert the set back to a list and return it\n    return list(intersection)\n",
        "test": "assert intersection_array([1,2,3,4,5],[4,5,6,7,8]) == [4,5]",
        "num_ids": 523
    },
    {
        "number": 250,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 2, 5), 2) == 2 # test with a tuple that contains x",
        "num_ids": 434
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]",
        "num_ids": 416
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        polar_coordinates.append(cmath.polar(num))\n    return polar_coordinates\n",
        "test": "assert convert(2+3j) == (2.23606797749979, 1.10714871779409) ",
        "num_ids": 687
    },
    {
        "number": 253,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 'a', 2, 'b']) == 2",
        "num_ids": 338
    },
    {
        "number": 255,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 586
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return len(primes) ",
        "test": "assert count_Primes_nums(10) == 4  # There are 4 prime numbers less than 10 (2, 3, 5, 7)",
        "num_ids": 568
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1, 2) == (2, 1)",
        "num_ids": 273
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    \n    if max_tup1 > max_tup2:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 608
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        if is_prime(i):\n            primes.append(i)\n        i += 1\n    return primes[-1]\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert newman_prime(2) == 7",
        "num_ids": 452
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError('Both tuples must have the same length')\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            raise ZeroDivisionError('Cannot divide by zero')\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n",
        "test": "assert division_elements((1, 2, 3), (4, 5, 6)) == (0.25, 0.4, 0.5) # test case 1",
        "num_ids": 677
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n",
        "test": "assert split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])",
        "num_ids": 516
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age\n",
        "test": "assert dog_age(2) == 24",
        "num_ids": 239
    },
    {
        "number": 265,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4], 2) == [[1, 2], [3, 4]]",
        "num_ids": 502
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l**2\n    return surface_area\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 292
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 1\n    while count < n:\n        if num % 2 != 0:\n            sum += num ** 2\n            count += 1\n        num += 1\n    return sum\n",
        "test": "assert square_Sum(1) == 1  # sum of squares of first 1 odd number (1^2)",
        "num_ids": 491
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input! n should be a positive integer.\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        star_nums = [1, 2]\n        for i in range(2, n):\n            star_nums.append(star_nums[i-1] + star_nums[i-2])\n        return star_nums[-1]\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 611
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 222
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "test": "assert sum_even_and_even_index([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30 # should be 2 + 4 + 6 + 8 + 10 = 30",
        "num_ids": 567
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_Power_Sum(n):\n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**5\n    return sum\n",
        "test": "assert even_Power_Sum(3) == 1440  # 2^5 + 4^5 + 6^5",
        "num_ids": 605
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 420
    },
    {
        "number": 273,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3) # test case 1",
        "num_ids": 506
    },
    {
        "number": 274,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n//2 + 1):\n        sum += math.comb(n, i) * (i % 2 == 0)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(0) == 1 # when n=0, the only binomial coefficient is 1 and it is even",
        "num_ids": 559
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r ** 2 * h\n    return volume\n",
        "test": "assert volume_cylinder(1, 1) == 3.14159",
        "num_ids": 383
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_filter(dict_obj, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict_obj.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'b': 2, 'c': 3}  # check if the output is correct for an input dictionary with values greater than or equal to 2.",
        "num_ids": 581
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i in test_tup:\n        if i not in count_dict:\n            count_dict[i] = test_tup.index(i)\n    return count_dict\n",
        "test": "assert count_first_elements((5,5,3,2,1)) == (0,1,3,4,4)",
        "num_ids": 512
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n-1)*45 + 1\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 347
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 1) == (True, 0)",
        "num_ids": 530
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements of the list are unique,\n    otherwise it returns False.\n    \"\"\"\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 357
    },
    {
        "number": 282,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise and return the result.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]",
        "num_ids": 492
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the integer to a string and count the frequency of each digit\n    digit_counts = {}\n    for digit in str(n):\n        digit_counts[digit] = digit_counts.get(digit, 0) + 1\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in digit_counts.items():\n        if int(digit) < count:\n            return False\n    return True\n",
        "test": "assert validate(123456789) == True",
        "num_ids": 557
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item != element:\n            return False\n    return True\n",
        "test": "assert check_element([1, 1, 1, 1], 1) == True",
        "num_ids": 342
    },
    {
        "number": 285,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    return bool(match)\n",
        "test": "assert text_match_two_three('abbb') == True",
        "num_ids": 354
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Create the repeated array by concatenating the original array k times\n    repeated_array = a * k\n    \n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop over the repeated array and update the current sum and maximum sum\n    for i in range(len(repeated_array)):\n        current_sum += repeated_array[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    \n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([1, -2, 3, 4, -5], 4, 3) == 12",
        "num_ids": 913
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 312
    },
    {
        "number": 290,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1,2,3], [4,5,6,7], [8,9]]) == [4,5,6,7]",
        "num_ids": 568
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k):\n    if n < 2 or k < 2:\n        return 0\n\n    same_color = k\n    diff_color = k * (k - 1)\n\n    for i in range(3, n + 1):\n        new_same_color = diff_color\n        new_diff_color = (same_color + diff_color) * (k - 1)\n        same_color = new_same_color\n        diff_color = new_diff_color\n\n    return same_color + diff_color\n",
        "test": "assert count_no_of_ways(3, 2) == 6 # 2 colors for 3 posts, with at most 2 adjacent posts having the same color",
        "num_ids": 577
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient\n",
        "test": "assert find(10,3) == 3",
        "num_ids": 280
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_c = math.sqrt(w**2 + h**2)\n    return side_c\n",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 353
    },
    {
        "number": 294,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if isinstance(val, (int, float)) and (max_val is None or val > max_val):\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 374
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n",
        "test": "assert sum_div(12) == 28 # 1+2+3+4+6+12",
        "num_ids": 409
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def merge(left, right):\n    result = []\n    i, j = 0, 0\n    inversion_count = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            inversion_count += len(left) - i\n    result += left[i:]\n    result += right[j:]\n    return result, inversion_count\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    mid = len(arr) // 2\n    left, left_inv = merge_sort(arr[:mid])\n    right, right_inv = merge_sort(arr[mid:])\n    merged, merge_inv = merge(left, right)\n    return merged, left_inv + right_inv + merge_inv\n\n\ndef get_Inv_Count(arr):\n    sorted_arr, inversion_count = merge_sort(arr)\n    return inversion_count\n",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0  # no inversions in a sorted array",
        "num_ids": 1063
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n",
        "test": "assert flatten_list([1, 2, [3, 4], [5, [6, 7]]]) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 477
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the aggregates for each station\n    aggregate_dict = defaultdict(int)\n    \n    # Loop through each tuple in the list and add the value to the corresponding station in the dictionary\n    for (station, value) in stdata:\n        aggregate_dict[station] += value\n    \n    # Find the maximum aggregate from the dictionary\n    max_aggregate = max(aggregate_dict.values())\n    \n    return max_aggregate\n",
        "test": "assert max_aggregate([('A', 5), ('B', 10), ('A', 3), ('C', 1), ('B', 7), ('A', 12)]) == {'A': 17, 'B': 17, 'C': 1}",
        "num_ids": 683
    },
    {
        "number": 300,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        bin_num = bin(i)[2:]\n        if len(bin_num) < 2*n:\n            bin_num = '0'*(2*n-len(bin_num)) + bin_num\n        if sum(int(i) for i in bin_num[:n]) == sum(int(i) for i in bin_num[n:]):\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(1) == 2 ",
        "num_ids": 679
    },
    {
        "number": 301,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 258
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    n = len(arr)\n    rotations = rotations % n\n\n    if rotations == 0:\n        return arr[index]\n\n    start = index\n    while rotations > 0:\n        start = (start + n - 1) % n\n        rotations -= 1\n\n    return arr[start]",
        "test": "assert find_Element([1,2,3,4,5],(0,5),3,1) == 4  # element at index 1 is 2, after 3 rotations it becomes 4",
        "num_ids": 696
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef start_with_p(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if re.match('^p', word)]\n    return p_words[:2]\n",
        "test": "assert start_withp(['ruby', 'kotlin', 'php', 'pearl']) == []",
        "num_ids": 449
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Initialize the dp array\n    dp = [0] * n\n    dp[index] = a[index]\n    \n    # Fill the dp array from left to right\n    for i in range(index+1, n):\n        if i == k:\n            # Update dp[i] to include kth element\n            dp[i] = dp[index] + a[i]\n        else:\n            # Update dp[i] without including kth element\n            dp[i] = dp[i-1]\n            if dp[i-1] < dp[index]:\n                dp[i] = dp[index]\n            if dp[i] < dp[index] + a[i]:\n                dp[i] = dp[index] + a[i]\n    \n    # Find the maximum sum of increasing subsequence\n    max_sum = 0\n    for i in range(index, k+1):\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n    \n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 4) == 9 # kth element is included in subsequence",
        "num_ids": 1320
    },
    {
        "number": 307,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    # Create a deepcopy of the original tuple to avoid modifying it\n    new_tuplex = deepcopy(tuplex)\n    \n    # Get the colon of the new tuple\n    colon_tuplex = new_tuplex[m:n]\n    \n    # Return the colon of the tuple\n    return colon_tuplex\n",
        "test": "assert colon_tuplex((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"), 0, 5) == (\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\")",
        "num_ids": 485
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([1, 2, 3, 4], [5, 6, 7, 8], 2) == [40, 35]",
        "num_ids": 650
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(5, 8) == 8",
        "num_ids": 226
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 247
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given number.\n    \"\"\"\n    # Find the rightmost set bit\n    lsb = n & -n\n\n    # Add the LSB to the given number\n    n += lsb\n\n    # Return the updated number\n    return n\n",
        "test": "assert set_left_most_unset_bit(3) == 4",
        "num_ids": 410
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(3, 4) == math.pi * (3**2) * (4/3) # test case 1",
        "num_ids": 345
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 0:\n        n //= 2\n        power += 1\n    return 2 ** (power - 1)\n",
        "test": "assert highest_Power_of_2(10) == 8",
        "num_ids": 338
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 300
    },
    {
        "number": 390,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "test": "assert add_string(['apple', 'banana', 'orange'], '{} is a fruit') == ['apple is a fruit', 'banana is a fruit', 'orange is a fruit']",
        "num_ids": 438
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    nested_dict = {}\n\n    # iterate through each element of list l1\n    for i in range(len(l1)):\n        # create a new dictionary for each element of l1\n        new_dict = {l2[i]: l3[i]}\n        # add the new dictionary to the nested dictionary using l1 element as key\n        nested_dict[l1[i]] = new_dict\n\n    return nested_dict\n",
        "test": "assert convert_list_dictionary(['x', 'y'], [2, 4], ['p', 'q']) == {'x': {'y': 'p'}, 'y': 'q'} ",
        "num_ids": 770
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1 # Base case",
        "num_ids": 488
    },
    {
        "number": 393,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 605
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "test": "assert check_distinct(()) == True  # Empty tuple should be considered as distinct",
        "num_ids": 296
    },
    {
        "number": 395,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    from collections import Counter\n    \n    # Find the count of each character in the string\n    char_count = Counter(str1)\n    \n    # Loop through the string and find the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"abcdabcde\") == \"e\"",
        "num_ids": 540
    },
    {
        "number": 396,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"algorithm\") == False",
        "num_ids": 389
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = 0\n\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        # If the list has an even number of elements, take the average of the two middle numbers\n        middle_right = len(sorted_numbers) // 2\n        middle_left = middle_right - 1\n        median = (sorted_numbers[middle_left] + sorted_numbers[middle_right]) / 2\n    else:\n        # If the list has an odd number of elements, take the middle number\n        middle = len(sorted_numbers) // 2\n        median = sorted_numbers[middle]\n\n    return median\n",
        "test": "assert median_numbers(1,2,3) == 2 # tests with three distinct numbers",
        "num_ids": 620
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    This function takes a list of numbers as input and computes the sum of digits of each number in the list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24]",
        "num_ids": 442
    },
    {
        "number": 399,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result\n",
        "test": "assert bitwise_xor((1, 0, 1), (0, 1, 1)) == (1, 1, 0)",
        "num_ids": 723
    },
    {
        "number": 400,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(i) for i in test_list))\n",
        "test": "assert extract_freq([(1,2),(2,3),(1,2)]) == 2  # returns 2 for unique tuples (1,2) and (2,3)",
        "num_ids": 369
    },
    {
        "number": 401,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        if len(test_tup1[i]) != len(test_tup2[i]):\n            raise ValueError(\"Both tuples must have the same length\")\n        inner_result = []\n        for j in range(len(test_tup1[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_result))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))",
        "num_ids": 931
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5, 8) == 5",
        "num_ids": 199
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1,2,3),2) == True  # Test case 1: element exists in tuple",
        "num_ids": 377
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert find_Parity(3) == True  # odd number should return True",
        "num_ids": 321
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i-1]:\n        i -= 1\n    if i <= 0:\n        return -1\n    j = len(digits) - 1\n    while digits[j] <= digits[i-1]:\n        j -= 1\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(str(d) for d in digits))\n",
        "test": "assert rearrange_bigger(50362) == 50623",
        "num_ids": 954
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1 + num2, num1, num2))\n    heapq.heapify(pairs)\n    result = []\n    for _ in range(k):\n        _, num1, num2 = heapq.heappop(pairs)\n        result.append((num1, num2))\n    return result\n",
        "test": "assert k_smallest_pairs([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 1) == [(1, 2)]",
        "num_ids": 940
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[i][1] * list1[j][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 6",
        "num_ids": 565
    },
    {
        "number": 410,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if isinstance(val, (int, float)) and val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert min_val([5, 3, '7', 'apple', 2.5]) == 2.5",
        "num_ids": 395
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the string by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    words = [words[0]] + [w.capitalize() for w in words[1:]]\n    # Join the words back together\n    return ''.join(words)\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 390
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 315
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i][n-1])\n    return result\n",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == 2",
        "num_ids": 409
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[2,4,6]) == True",
        "num_ids": 328
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_product = arr[0] * arr[1]\n    max_pair = (arr[0], arr[1])\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair\n",
        "test": "assert max_Product([-10, -10, 5, -1]) == 50",
        "num_ids": 626
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    first_elements = set()\n    for tup in Input:\n        if tup[0] in first_elements:\n            return tup[0]\n        else:\n            first_elements.add(tup[0])\n    return None\n",
        "test": "assert group_tuples([(1,2), (1,3), (1,4)]) == 1",
        "num_ids": 577
    },
    {
        "number": 418,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n",
        "test": "assert Find_Max(['apple', 'banana', 'cherry']) == 'banana'",
        "num_ids": 399
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    total *= len(list1)\n    print(total)\n",
        "test": "assert round_and_sum([2.4, 3.7, 1.9, 4.2]) == 19.6 ",
        "num_ids": 409
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of cubes of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    i = 2\n    for count in range(n):\n        sum += i ** 3\n        i += 2\n    return sum\n",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 385
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = delimiter.join(str(elem) for elem in test_tup)\n    return result\n",
        "test": "assert concatenate_tuple(()) == \"\"",
        "num_ids": 315
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):\n    sum_of_cubes = 0\n    for i in range(1,n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes/n\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 383
    },
    {
        "number": 424,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        if isinstance(element, str):\n            result.append(element[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear((\"apple\", \"banana\", \"orange\")) == (\"e\", \"a\", \"e\") ",
        "num_ids": 383
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1,2,3],[4,5,6],[7,8,9]], 8) == 1",
        "num_ids": 406
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]\n",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 316
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    # use regular expression to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    \n    if match:\n        # extract year, month, and day from the match object\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        \n        # return the date in dd-mm-yyyy format\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        return None\n",
        "test": "assert change_date_format('2020-01-15') == '15-01-2020'",
        "num_ids": 649
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([4, 2, 9, 1, 3, 7]) == [1, 2, 3, 4, 7, 9]",
        "num_ids": 727
    },
    {
        "number": 429,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n",
        "test": "assert and_tuples((True, True), (True, False)) == (True, False)",
        "num_ids": 414
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 - 4*a*c == 0:\n        return 'The parabola is a line.'\n    else:\n        x = -b / (2*a)\n        y = 1/4 * (-b**2/(2*a) + 1/2*c/a)\n        equation = '{0}x + {1}y = {2}'.format(b/a, 1/2*c/a, -b**3/(4*a**2) + b*c/(2*a))\n        return equation\n",
        "test": "assert parabola_directrix(1, 3, 2) == -1",
        "num_ids": 442
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set from the first list\n    set1 = set(list1)\n\n    # iterate over the second list and check if each element is in the set\n    for element in list2:\n        if element in set1:\n            return True\n    \n    # if no common element is found, return False\n    return False\n",
        "test": "assert common_element([1,2,3], [2,4,6]) == True",
        "num_ids": 379
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median\n",
        "test": "assert median_trapezium(6,8,4) == 7.0",
        "num_ids": 359
    },
    {
        "number": 433,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i >= number:\n            return False\n    return True\n",
        "test": "assert check_greater([1, 2, 3], 3) == False",
        "num_ids": 354
    },
    {
        "number": 434,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one('ab')",
        "num_ids": 310
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(123) == 3",
        "num_ids": 213
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5, -6]) == [-2, -4, -6] # Testcase 1",
        "num_ids": 406
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd('Hello World') == 'HloWrd'",
        "num_ids": 265
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) == test_list[j][1] and test_list[i][1] == (test_list[j][0], test_list[i][0]):\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 536
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n",
        "test": "assert multiple_to_single([1, 2, 3]) == 123",
        "num_ids": 333
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # using regex to find adverb\n    adverb = re.findall(r'\\b[a-zA-Z]+ly\\b', text)\n    # using regex to find their positions\n    positions = [text.find(word) for word in adverb]\n    return adverb, positions\n",
        "test": "assert find_adverb_position(\"She swam very slowly in the pool.\") == 2",
        "num_ids": 584
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area\n",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 244
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / len(nums)\n",
        "test": "assert positive_count([0, 0, 0, 0, 0]) == 0.0",
        "num_ids": 395
    },
    {
        "number": 443,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    '''\n    Find the largest negative number in the given list.\n    '''\n    neg_nums = [num for num in list1 if num < 0]\n    if neg_nums:\n        return max(neg_nums)\n    else:\n        return None\n",
        "test": "assert largest_neg([1, 2, 3, -4, -5]) == -4 # return the largest negative number",
        "num_ids": 478
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create an empty list to store trimmed tuples\n    trimmed_list = []\n\n    # iterate over each tuple in the list\n    for tup in test_list:\n        # check if the length of the tuple is greater than k\n        if len(tup) > K:\n            # trim the tuple by k and append it to the trimmed_list\n            trimmed_list.append(tup[:K])\n        else:\n            # if the length of the tuple is less than or equal to k, append it as is\n            trimmed_list.append(tup)\n    \n    # return the trimmed_list\n    return trimmed_list\n",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6)], 2) == ((1, 2), (4, 5))",
        "num_ids": 779
    },
    {
        "number": 445,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "test": "assert index_multiplication((2, 4, 6), (3, 2, 1)) == (6, 8, 6)",
        "num_ids": 543
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    # convert tuple to list to manipulate it\n    tup_lst = list(tup)\n    \n    # create an empty dictionary to store the count of each element in list\n    count_dict = {}\n    \n    # loop through each element in list\n    for elem in lst:\n        # count the number of times the element appears in the tuple\n        count = tup_lst.count(elem)\n        \n        # add the count to the dictionary with the element as the key\n        count_dict[elem] = count\n    \n    # convert the dictionary to a Counter object to get the count of each element\n    count_obj = Counter(count_dict)\n    \n    # print the count of each element\n    for elem, count in count_obj.items():\n        print(f\"{elem}: {count}\")\n",
        "test": "assert count_Occurrence((1,2,3,4,5,6,7,8,9,10), [5,6,7,8,9,10]) == Counter([5,6,7,8,9,10]) # testcase 2",
        "num_ids": 801
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27] # Test case 1",
        "num_ids": 325
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def perrin_number(n):\n    \"\"\"\n    This function returns the nth Perrin number.\n    \"\"\"\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return perrin_number(n-1) + perrin_number(n-2)\n\ndef cal_sum(n):\n    \"\"\"\n    This function calculates the sum of the first n Perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n+1):\n        sum += perrin_number(i)\n    return sum\n",
        "test": "assert cal_sum(0) == 3 ",
        "num_ids": 441
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in str:\n        if len(s) == l:\n            extracted_strings.append(s)\n    return extracted_strings\n",
        "test": "assert extract_string(['apple', 'banana', 'cherry'], 0) == []",
        "num_ids": 418
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"Hello world\") == \"Helloworld\"",
        "num_ids": 274
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n    else:\n        loss = 0\n    return loss\n",
        "test": "assert loss_amount(1000, 500) == 500",
        "num_ids": 359
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i % 2 == 0:\n                sum += n // i\n    return sum\n",
        "test": "assert sumofFactors(10) == 12",
        "num_ids": 389
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b\\w*z\\w*\\b', text)\n    if match:\n        return match.group()\n    else:\n        return \"No word containing 'z' found.\"\n",
        "test": "assert text_match_wordz('The quick brown fox jumps over the laziest dog.') == 'laziest'",
        "num_ids": 375
    },
    {
        "number": 455,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    elif monthnum2 == 2:\n        return \"February\"\n    else:\n        return \"Invalid month number\"\n",
        "test": "assert check_monthnumb_number(1) == True",
        "num_ids": 492
    },
    {
        "number": 456,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for string in stringlist:\n        result.append(string[::-1])\n    return result\n",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"] ",
        "num_ids": 362
    },
    {
        "number": 457,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    '''\n    Find the sublist with the minimum length.\n    '''\n    min_len = float('inf')\n    min_sublst = None\n    for sublst in lst:\n        if len(sublst) < min_len:\n            min_len = len(sublst)\n            min_sublst = sublst\n    return min_sublst\n",
        "test": "assert Find_Min([[1], [2, 3, 4, 5, 6], [7, 8, 9], [10, 11], [12, 13, 14]]) == [1]",
        "num_ids": 596
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(4, 5) == 20",
        "num_ids": 208
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n",
        "test": "assert remove_uppercase(\"\") == \"\"",
        "num_ids": 268
    },
    {
        "number": 460,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of sublists as input and returns a new list containing the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7]",
        "num_ids": 382
    },
    {
        "number": 461,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2",
        "num_ids": 302
    },
    {
        "number": 462,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from itertools import combinations\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        for item in combinations(list1, i):\n            result.append(item)\n    return result\n",
        "test": "assert combinations_list([1, 2]) == [(1,), (2,), (1, 2)]",
        "num_ids": 448
    },
    {
        "number": 463,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result\n",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6 ",
        "num_ids": 645
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    val = list(dict.values())[0]\n    for i in dict.values():\n        if i != val:\n            return False\n    return True\n",
        "test": "assert check_value({'a': 1, 'b': 1, 'c': 1, 'd': 1}, 1) == True  # True",
        "num_ids": 473
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {k: v for k, v in dict1.items() if v}\n    return new_dict\n",
        "test": "assert drop_empty({\"d\":[],\"e\":[1,2,3],\"f\":\"\"}) == {\"e\":[1,2,3]} # Test case 2",
        "num_ids": 315
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n\n    n = len(arr)\n    max_product = 1\n    temp_product = 1\n\n    for i in range(n):\n        temp_product *= arr[i]\n        if temp_product < 0:\n            temp_product = arr[i]\n\n        max_product = max(max_product, temp_product)\n\n    return max_product\n",
        "test": "assert max_product([1, 2, 3, 4, -5]) == 24  # The maximum product for the increasing subsequence [1, 2, 3, 4, -5] is 1 * 2 * 3 * 4 = 24.",
        "num_ids": 847
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n",
        "test": "assert add_pairwise((4, 5, 6, 7)) == (9, 11, 13)",
        "num_ids": 409
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n        product %= n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3, 4], 7) == 3",
        "num_ids": 348
    },
    {
        "number": 472,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # convert the list to set to remove duplicates and find the length of the set\n    # the length of the set should be equal to the length of the list minus the number of duplicates\n    if len(set(l)) == len(l):\n        # if the set length is equal to the length of the list, then check for consecutive numbers\n        for i in range(len(l)-1):\n            if l[i+1] - l[i] != 1:\n                return False\n        return True\n    else:\n        # if the set length is not equal to the length of the list, then there are duplicates\n        return False\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 585
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the input tuples to sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a tuple and return\n    return tuple(intersection)\n",
        "test": "assert tuple_intersection(('a', 'b', 'c'), ('b', 'c', 'd')) == ('b', 'c')",
        "num_ids": 538
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1\n",
        "test": "assert replace_char('hello', 'l', 'o') == 'heooo' # Replacing 'l' with 'o' in 'hello' should give 'heooo'",
        "num_ids": 421
    },
    {
        "number": 475,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a list of tuples from the dictionary items\n    items = dict1.items()\n    # Sort the list of tuples by the second element (value) of each tuple\n    sorted_items = sorted(items, key=lambda x: x[1])\n    # Create a new dictionary from the sorted list of tuples\n    sorted_dict = dict(sorted_items)\n    return sorted_dict\n",
        "test": "assert sort_counter({'apple': 3, 'banana': 2, 'orange': 1}) == {'apple': 3, 'banana': 2, 'orange': 1}",
        "num_ids": 589
    },
    {
        "number": 476,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) + min(nums)\n",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6",
        "num_ids": 445
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 214
    },
    {
        "number": 478,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n",
        "test": "assert remove_lowercase(\"\") == \"\"  # Test for empty string",
        "num_ids": 329
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    This function finds the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(123) == 1",
        "num_ids": 265
    },
    {
        "number": 554,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list containing only the odd integers from the original list.\n    '''\n    return [num for num in lst if num % 2 != 0]\n",
        "test": "assert Split([]) == [] # edge case, empty list",
        "num_ids": 327
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n    return sum_cubes - sum_numbers**2\n",
        "test": "assert difference(0) == 0",
        "num_ids": 463
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j]) & 1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([], 0) == 0",
        "num_ids": 452
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for c in string:\n        if c.islower():\n            result += c.upper()\n        elif c.isupper():\n            result += c.lower()\n        else:\n            result += c\n    return result\n",
        "test": "assert toggle_string(\"Hello\") == \"hELLO\"",
        "num_ids": 367
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = [int(i) for i in str(n1)]\n    num2 = [int(i) for i in str(n2)]\n    diff = []\n    for i in range(len(num1)):\n        diff.append(abs(num1[i]-num2[i]))\n    return sum(diff)\n",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 541
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    \n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            \n    return max_so_far\n",
        "test": "assert max_sub_array_sum([1,-2,3,4,-1,2,1,-5,4],8) == 9 ",
        "num_ids": 592
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using set union\n    union = set(test_tup1).union(set(test_tup2))\n    # Convert the set to a sorted tuple and return it\n    return tuple(sorted(union))\n",
        "test": "assert union_elements((1,2,3),(3,4,5)) == (1, 2, 3, 4, 5)",
        "num_ids": 583
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4",
        "num_ids": 502
    },
    {
        "number": 563,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'  # match anything between double quotes\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert extract_values('') == []",
        "num_ids": 272
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3],3) == 3",
        "num_ids": 418
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 222
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and iterate over each character\n    sum = 0\n    for char in str(n):\n        # Convert the character back to an integer and add it to the sum\n        sum += int(char)\n    return sum\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 342
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1,2,3,4,5]) == True",
        "num_ids": 349
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    \"\"\"\n    Create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]\n",
        "test": "assert empty_list(3) == [{}, {}, {}] # if length is 3, list of 3 empty dictionaries should be created",
        "num_ids": 253
    },
    {
        "number": 569,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    sorted_list = []\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n",
        "test": "assert sort_sublists([['cat', 'dog', 'apple'], ['banana', 'orange', 'grape']]) == [['apple', 'cat', 'dog'], ['banana', 'grape', 'orange']] ",
        "num_ids": 647
    },
    {
        "number": 572,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 572
    },
    {
        "number": 573,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 348
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * (r + h)\n",
        "test": "assert surfacearea_cylinder(2,2) == 50.26548245743669",
        "num_ids": 358
    },
    {
        "number": 576,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Convert both lists to strings\n    A_str = ''.join(map(str, A))\n    B_str = ''.join(map(str, B))\n    \n    # Check if B_str is a substring of A_str\n    if B_str in A_str:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sub_Array([1, 2, 3, 4, 5], [1, 2]) == True",
        "num_ids": 477
    },
    {
        "number": 577,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the last digit variable to 1\n    last_digit = 1\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Update the last digit by multiplying it with the current iteration value\n        last_digit = (last_digit * i) % 10\n\n    # Return the last digit of the factorial of n\n    return last_digit\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 489
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Use a for loop to iterate over the length of the lists\n    for i in range(len(list1)):\n        # Append the elements of each list to the interleaved list\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9] # Test case 1",
        "num_ids": 646
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.symmetric_difference(set2)",
        "test": "assert find_dissimilar((1, 2, 3, 4), (4, 3, 2, 1)) == set()",
        "num_ids": 592
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = ()\n    for tpl in test_tuple:\n        new_tpl = ()\n        for num in tpl:\n            if even_fnc(num):\n                new_tpl += (num,)\n        new_tuple += (new_tpl,)\n    return new_tuple\n",
        "test": "assert even_ele(((1,2,3), (4,5,6), (7,8,9)), lambda x: x % 2 == 0) == ((2,), (4, 6), (8,))",
        "num_ids": 657
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*b) + (b*s) + (b*s)\n",
        "test": "assert surface_Area(4,5) == 120.0",
        "num_ids": 338
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True  # Test empty dictionary",
        "num_ids": 287
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num - i - 1)\n        return result\n",
        "test": "assert catalan_number(1) == 1  # C(1) = 1/1*1 = 1",
        "num_ids": 417
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        positions = (match.start(), match.end())\n        return adverb, positions\n    else:\n        return None\n",
        "test": "assert find_adverbs(\"The more you read, the more you learn.\") == ((\"more\", [4, 22]), [\"more\"])",
        "num_ids": 538
    },
    {
        "number": 585,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return min_heap\n",
        "test": "assert expensive_items([], 1) == []",
        "num_ids": 727
    },
    {
        "number": 586,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 423
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 264
    },
    {
        "number": 588,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Finds the difference between the largest and smallest value in a given list.\n\n    Args:\n        nums (list of int): A list of integers\n\n    Returns:\n        int: The difference between the largest and smallest value in nums.\n    \"\"\"\n    if not nums:\n        return None\n    elif len(nums) == 1:\n        return 0\n    else:\n        return max(nums) - min(nums)\n",
        "test": "assert big_diff([10, 3, 5, 6, 20, 3]) == 17  # returns the difference between the largest and smallest values in the given list.",
        "num_ids": 459
    },
    {
        "number": 589,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        root = int(num**0.5)\n        if root**2 == num:\n            squares.append(num)\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9] # Test case 1: between 1 and 10, the perfect squares are 1, 4, and 9.",
        "num_ids": 471
    },
    {
        "number": 590,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The magnitude of the vector.\n    theta (float): The angle between the vector and the positive x-axis.\n\n    Returns:\n    tuple: The rectangular coordinates (x, y).\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n",
        "test": "assert polar_rect(2, 0) == (2, 0) # Test the correctness of polar_rect(r, 0) where r is a positive real number. It should return the same value as the rectangular coordinates.",
        "num_ids": 430
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 438
    },
    {
        "number": 592,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from math import factorial\n\ndef binomial_Coeff(n, k):\n    '''\n    This function finds the binomial coefficient of nCk.\n    '''\n    return factorial(n) // (factorial(k) * factorial(n-k))\n\ndef sum_of_products(n, k):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(k, n+1):\n        result += binomial_Coeff(n, i)\n    return result\n",
        "test": "assert binomial_Coeff(5, 3) == 10 # n=5, k=3, result should be 10 ",
        "num_ids": 791
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the IP address by the '.' separator\n    parts = ip.split('.')\n    # Iterate over each part and remove leading zeroes if any\n    for i in range(len(parts)):\n        parts[i] = str(int(parts[i]))\n    # Join the parts back with '.' separator and return the result\n    return '.'.join(parts)\n",
        "test": "assert removezero_ip('000.000.000.000') == '0.0.0.0'  # all zeros",
        "num_ids": 535
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    even_found = False\n    odd_found = False\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and not even_found:\n            even_found = True\n            even_num = num\n        elif num % 2 != 0 and not odd_found:\n            odd_found = True\n            odd_num = num\n        \n        if even_found and odd_found:\n            break\n    \n    if even_num is None or odd_num is None:\n        return None\n    \n    return abs(even_num - odd_num)\n",
        "test": "assert diff_even_odd([2, 4, 6, 1, 3]) == 1",
        "num_ids": 610
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n\n    # convert strings to lists of integers\n    lst1 = [int(i) for i in str1]\n    lst2 = [int(i) for i in str2]\n\n    # count the number of swaps required\n    swaps = 0\n    for i in range(len(lst1)):\n        if lst1[i] != lst2[i]:\n            for j in range(i, len(lst1)):\n                if lst1[j] == lst2[i]:\n                    lst1[i], lst1[j] = lst1[j], lst1[i]\n                    swaps += 1\n                    break\n    \n    return swaps\n",
        "test": "assert min_Swaps('10101','10101') == 0",
        "num_ids": 893
    },
    {
        "number": 596,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert tuple_size((1, 2, 3)) == sys.getsizeof((1, 2, 3))",
        "num_ids": 363
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n\n    if not arr1:\n        return arr2[k-1]\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    idx1 = min(k//2, len(arr1)) - 1\n    idx2 = k - idx1 - 2\n\n    if arr1[idx1] < arr2[idx2]:\n        return find_kth(arr1[idx1+1:], arr2, k-idx1-1)\n    else:\n        return find_kth(arr1, arr2[idx2+1:], k-idx2-1)",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 5) == 5",
        "num_ids": 1442
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # converting number to string to access each digit separately\n    num_str = str(number)\n    # calculating the length of the number\n    n = len(num_str)\n    # initializing sum to 0\n    sum = 0\n    # iterating through each digit of the number and adding its cube to sum\n    for digit in num_str:\n        sum += int(digit) ** n\n    # checking if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 491
    },
    {
        "number": 599,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    \n    average = sum/number\n    \n    return sum, average\n",
        "test": "assert sum_average(5) == (15, 3.0)",
        "num_ids": 387
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the integer is even, otherwise it returns False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True",
        "num_ids": 266
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"",
        "num_ids": 405
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    ludic = [1]\n    for i in range(2, n+1):\n        ludic_i = [j for j in ludic if j <= i // 2 and i % j != 0]\n        if len(ludic_i) == len(ludic):\n            ludic.append(i)\n    return ludic\n",
        "test": "assert get_ludic(2) == [1]",
        "num_ids": 486
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Reverse words separated by spaces in a given string.\n    \"\"\"\n    words = s.split()  # Split the string into a list of words\n    reversed_words = [word[::-1] for word in words]  # Reverse each word in the list\n    return \" \".join(reversed_words)  # Join the reversed words into a single string\n",
        "test": "assert reverse_words(\"this is a test\") == \"test a is this\"",
        "num_ids": 380
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 329
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n",
        "test": "assert radian_degree(0) == 0 # zero degrees is zero radians",
        "num_ids": 304
    },
    {
        "number": 607,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"Hello world!\", \"world\") == (\"world\", 6, 11)",
        "num_ids": 458
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 471
    },
    {
        "number": 610,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k > len(list1) or k <= 0:\n        return list1\n    else:\n        return list1[:k-1] + list1[k:]\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 440
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = test_list[0][N]  # initialize max_num to the first element of the n'th column\n    \n    # iterate through each row of the matrix and compare the n'th element with max_num\n    for row in test_list:\n        if row[N] > max_num:\n            max_num = row[N]\n    \n    return max_num\n",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 8",
        "num_ids": 588
    },
    {
        "number": 612,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def merge(lst):\n    first_list = []\n    second_list = []\n    for i in lst:\n        first_list.append(i[0])\n        second_list.append(i[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 517
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    cummulative_list = []\n    for i in range(len(test_list)):\n        total_sum += test_list[i]\n        cummulative_list.append(total_sum)\n    return cummulative_list\n",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 440
    },
    {
        "number": 615,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg = []\n    for tup in nums:\n        avg.append(sum(tup)/len(tup))\n    return avg\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [2.0, 5.0, 8.0]",
        "num_ids": 572
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n",
        "test": "assert tuple_modulo((10, 20, 30), (1, 2, 3)) == (0, 0, 0)",
        "num_ids": 497
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    i = 0\n    jumps = 0\n    \n    # Loop through the number of steps\n    while i < steps:\n        # Check if it's possible to reach (d, 0) with the remaining steps\n        if (steps - i) >= d:\n            i += d\n            jumps += 1\n        # If not possible, return -1\n        else:\n            return -1\n    \n    # Return the number of jumps required\n    return jumps\n",
        "test": "assert min_Jumps(0, 0) == 0 # when the current position is (0, 0)",
        "num_ids": 668
    },
    {
        "number": 618,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1, 2, 3], [4, 5, 6]) == [0.25, 0.4, 0.5]",
        "num_ids": 501
    },
    {
        "number": 619,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = '0123456789'\n    num_chars = [char for char in test_str if char in nums]\n    non_num_chars = [char for char in test_str if char not in nums]\n    return ''.join(non_num_chars) + ''.join(num_chars)\n",
        "test": "assert move_num('') == '' # empty string",
        "num_ids": 508
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a = sorted(set(a))  # remove duplicates and sort\n    n = len(a)\n    subsets = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if all(a[k] % a[i] == 0 or a[k] % a[j] == 0 for k in range(n)):\n                subsets.append(set(a[i:j+1]))\n    return max(len(s) for s in subsets)\n",
        "test": "assert largest_subset([1, 2, 3, 4, 5]) == 5 # All pairs are divisible",
        "num_ids": 651
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    merged_arr = []\n    i = j = 0\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            merged_arr.append(arr1[i])\n            i += 1\n        elif arr2[j] < arr1[i]:\n            merged_arr.append(arr2[j])\n            j += 1\n        else:\n            merged_arr.append(arr1[i])\n            i += 1\n            j += 1\n            \n    while i < n:\n        merged_arr.append(arr1[i])\n        i += 1\n        \n    while j < n:\n        merged_arr.append(arr2[j])\n        j += 1\n        \n    if n % 2 == 0:\n        return (merged_arr[n//2 - 1] + merged_arr[n//2]) / 2\n    else:\n        return merged_arr[n//2]",
        "test": "assert get_median([1, 3, 5], [2, 4, 6], 3) == 3.5",
        "num_ids": 1021
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([2, 3, 4], 2) == [4, 9, 16]",
        "num_ids": 393
    },
    {
        "number": 624,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"Hello\") == \"HELLO\"",
        "num_ids": 203
    },
    {
        "number": 625,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        first_elem = newList[0]\n        last_elem = newList[-1]\n        newList[0] = last_elem\n        newList[-1] = first_elem\n    return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 451
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef triangle_area(r):\n    area = (math.sqrt(3)/4)*r**2\n    return area\n",
        "test": "assert triangle_area(1) == 0.5 * (1 ** 2) * (3 ** 0.5) / 2",
        "num_ids": 429
    },
    {
        "number": 627,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    missing = None\n    for i in range(start, end):\n        if array[i] <= 0:\n            continue  # ignore negative or zero values\n        \n        if array[i] == (i - start + 1):\n            continue  # current value is in its correct position\n        \n        if missing is None:\n            missing = i - start + 1  # smallest missing value found so far\n        \n        j = i - start\n        while j >= 0 and array[j] > 0 and array[j] <= (i - start + 1) and array[j] - (j + start + 1) < missing:\n            array[j], array[i] = array[i], array[j]  # swap values to put the missing value in its correct position\n            j -= 1\n        \n        if array[i] == (i - start + 1):\n            continue  # current value is now in its correct position\n        \n        missing = min(missing, array[i] - (i - start + 1))  # update smallest missing value found so far\n    \n    if missing is None:\n        missing = end - start + 1  # all values are present, the missing value is at the end\n    \n    return missing\n",
        "test": "assert find_First_Missing([1,2,3,4,5]) == 6",
        "num_ids": 749
    },
    {
        "number": 628,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert replace_spaces(\"Hello World\") == \"Hello%20World\"",
        "num_ids": 266
    },
    {
        "number": 629,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n",
        "test": "assert Split([1,2,3,4,5,6]) == [2, 4, 6]",
        "num_ids": 427
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    sub += [e for e in adj if e[0]>=0 and e[1]>=0]\n    return sub\n",
        "test": "assert adjac((1,1)) == [(0,1),(1,0),(1,2),(2,1)]",
        "num_ids": 496
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 270
    },
    {
        "number": 632,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    non_zero_list = []\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n    return non_zero_list + zero_list\n",
        "test": "assert move_zero([1,0,2,0,3,0]) == [1,2,3,0,0,0]",
        "num_ids": 554
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through all pairs of numbers in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the xor of the two numbers and add it to the sum\n            sum += arr[i] ^ arr[j]\n    # Return the final sum\n    return sum\n",
        "test": "assert pair_xor_Sum([5, 5, 5, 5, 5], 5) == 0 # for input [5, 5, 5, 5, 5], the sum of xor of all pairs is 5^5^5^5^5 = 0",
        "num_ids": 665
    },
    {
        "number": 635,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]",
        "test": "assert heap_sort([]) == []",
        "num_ids": 342
    },
    {
        "number": 637,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n",
        "test": "assert noprofit_noloss(100, 100) == True  # no profit and no loss ",
        "num_ids": 347
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 1 or t > 10 or t < -50:\n        return \"Invalid input values\"\n    else:\n        wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n        return round(wind_chill_index)\n",
        "test": "assert wind_chill(40, 0) == 15",
        "num_ids": 673
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['John', 'Alice', 'Mark', 'emily', 'apple']) == 11 ",
        "num_ids": 425
    },
    {
        "number": 640,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n",
        "test": "assert remove_parenthesis(\"hello (world)\") == \"hello \"",
        "num_ids": 350
    },
    {
        "number": 641,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))/2\n",
        "test": "assert is_nonagonal(0) == 0 # first nonagonal number is 0",
        "num_ids": 270
    },
    {
        "number": 643,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r'\\b\\w*z\\w*\\b'\n    match = re.findall(regex, text)\n    return bool(match)\n",
        "test": "assert text_match_wordz_middle(\"apple\") == False",
        "num_ids": 392
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    k = min(k, len(input))  # Make sure k is within the bounds of the array\n    left, right = 0, k-1\n    while left < right:\n        input[left], input[right] = input[right], input[left]\n        left += 1\n        right -= 1\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5,6], 1) == [1,2,3,4,5,6]",
        "num_ids": 604
    },
    {
        "number": 720,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 4, 'b': 5}) == (1, 2, 3, {'a': 4, 'b': 5}) # should return a tuple with the dictionary added to the end",
        "num_ids": 533
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[0][i] = dp[i][0] = cost[0][i] + cost[i][0]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n\n    return dp[-1][-1] / (n * n)\n",
        "test": "assert maxAverageOfPath([[100,2,3],[4,5,6],[7,8,9]]) == 9.666666666666666 # when all cells are not visited in the path",
        "num_ids": 1066
    },
    {
        "number": 722,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n    for name, student_data in students.items():\n        if student_data[0] > h and student_data[1] > w:\n            filtered_students[name] = student_data\n\n    return filtered_students\n",
        "test": "assert filter_data({'John': (1.80, 70), 'Jane': (1.70, 60), 'Bob': (1.90, 80)}, 1.75, 65) == {'John': (1.80, 70), 'Bob': (1.90, 80)}",
        "num_ids": 874
    },
    {
        "number": 723,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 4, 3]) == 2  # True because there are two same values at index 0 and index 2",
        "num_ids": 516
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = base ** power\n    digits = [int(digit) for digit in str(result)]\n    return sum(digits)\n",
        "test": "assert power_base_sum(10, 2) == 1 ",
        "num_ids": 385
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    matches = re.findall(r'\"(.*?)\"', text)\n    return matches\n",
        "test": "assert extract_quotation('She said \"I\\'m going home\"') == \"I'm going home\"",
        "num_ids": 333
    },
    {
        "number": 726,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((2,3,4)) == (6,12)",
        "num_ids": 569
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] \n    and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]  # test case 1",
        "num_ids": 517
    },
    {
        "number": 730,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([1,1,2,2,3,4,4,4,5,5,6,6,6,7,8,8]) == [1, 2, 3, 4, 5, 6, 7, 8] # Test case 1",
        "num_ids": 551
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h\n",
        "test": "assert lateralsurface_cone(2, 3) == 18.84955592153876 ",
        "num_ids": 453
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[,.\\s]+', ':', text)\n    return text\n",
        "test": "assert replace_specialchar(\"Hello, World!\") == \"Hello:World!\"",
        "num_ids": 311
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    index = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            index = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return index\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 987
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    mod = 1000000007\n    total_sum = 0\n\n    # Calculate the total sum of products of all possible sublists\n    for i in range(n):\n        current_prod = 1\n        current_sum = 0\n        for j in range(i, n):\n            current_prod *= arr[j]\n            current_prod %= mod\n            current_sum += current_prod\n            current_sum %= mod\n        total_sum += current_sum\n        total_sum %= mod\n    \n    return total_sum\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 2, 0, 1]) == 18  # test case 2",
        "num_ids": 767
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Calculate the number of bits in the given number\n    bits = bin(n)[2:]\n    length = len(bits)\n    \n    # Toggle the bits except the first and last bits\n    toggled_bits = \"\"\n    for i in range(1, length-1):\n        if bits[i] == \"0\":\n            toggled_bits += \"1\"\n        else:\n            toggled_bits += \"0\"\n    \n    # Return the decimal equivalent of the toggled bits\n    return int(bits[0] + toggled_bits + bits[-1], 2)\n",
        "test": "assert set_middle_bits(0b11110000) == 0b11001111 # example 2",
        "num_ids": 659
    },
    {
        "number": 736,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 4) == 2",
        "num_ids": 474
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('easy') == True ",
        "num_ids": 364
    },
    {
        "number": 738,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1/2\n    else:\n        return 1/n + geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1/2",
        "num_ids": 320
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    k = 1\n    while (n > 1):\n        k += 1\n        n -= len(str(k * (k + 1) // 2))\n    return k",
        "test": "assert find_Index(1) == 1",
        "num_ids": 514
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result\n",
        "test": "assert tuple_to_dict((\"apple\", 1, \"banana\", 2, \"orange\", 3)) == {\"apple\": 1, \"banana\": 2, \"orange\": 3}",
        "num_ids": 571
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 241
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to calculate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side**2)\n    return area\n",
        "test": "assert area_tetrahedron(4) == math.sqrt(6)",
        "num_ids": 359
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    \n    for i in range(m):\n        last_element = list[-1]\n        for j in range(n-1, 0, -1):\n            list[j] = list[j-1]\n        list[0] = last_element\n        \n    return list\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 550
    },
    {
        "number": 744,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_none((1, 'two', 3)) == False",
        "num_ids": 289
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(10, 120) == [120]",
        "num_ids": 582
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2 * (a*math.pi/360))/2\n        return area\n",
        "test": "assert sector_area(5, 45) == 129.7846985366623",
        "num_ids": 538
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n                    \n    return L[m][n][o]\n",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GTXXAB\") == \"GTAB\"",
        "num_ids": 1055
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'[A-Z][a-z]*')\n    words = pattern.findall(str1)\n    str_with_spaces = \" \".join(words)\n    return str_with_spaces\n",
        "test": "assert capital_words_spaces(\"HelloWorld\") == \"Hello World\"",
        "num_ids": 370
    },
    {
        "number": 749,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_int = [int(num_str) for num_str in nums_str]\n    nums_int.sort()\n    nums_str = [str(num_int) for num_int in nums_int]\n    return nums_str\n",
        "test": "assert sort_numeric_strings([]) == []",
        "num_ids": 453
    },
    {
        "number": 750,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += list(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1,2,3], (4,5)) == [1,2,3,4,5] # add a tuple to a list",
        "num_ids": 351
    },
    {
        "number": 751,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    if i % 2 == 0:\n        j = i * 2 + 1\n    else:\n        j = i * 2\n    if j < n and arr[i] > arr[j]:\n        return False\n    return check_min_heap_helper(arr, j)\n\n\ndef check_min_heap(arr):\n    '''\n    Wrapper function to call the helper function.\n    '''\n    return check_min_heap_helper(arr, 0)\n",
        "test": "assert check_min_heap_helper([2, 3, 5, 6, 7, 9, 10, 12], 0) == True  # valid min heap",
        "num_ids": 798
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 662
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sorting the list in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Returning the first K elements of the sorted list\n    return test_list[:K]\n",
        "test": "assert min_k([(5, 's'), (2, 'a'), (8, 'b'), (3, 'c'), (1, 'd'), (6, 'e')], 2) == [(1, 'd'), (2, 'a')]",
        "num_ids": 643
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [5, 6, 7]) == []",
        "num_ids": 637
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    # sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # return the second smallest number\n    return sorted_numbers[1]\n",
        "test": "assert second_smallest([1,2,3,4,5]) == 2",
        "num_ids": 482
    },
    {
        "number": 756,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one('ab') == True",
        "num_ids": 353
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs(['x', 'y', 'z']) == 0",
        "num_ids": 520
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        tup = tuple(sublist)\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 598
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        if round(float(num), 2) == float(num):\n            return True\n        else:\n            return False\n",
        "test": "assert is_decimal('12.34') == True",
        "num_ids": 368
    },
    {
        "number": 760,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1,1,1,1,1]) == True",
        "num_ids": 307
    },
    {
        "number": 762,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number:\", monthnum3)\n",
        "test": "assert check_monthnumber_number(1) == False # February",
        "num_ids": 466
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([10, 20, 30, 40, 50], 5) == 10",
        "num_ids": 549
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"12345\") == 5",
        "num_ids": 279
    },
    {
        "number": 765,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Find the prime factorization of the number i\n        factors = []\n        for j in range(2, int(math.sqrt(i))+1):\n            while i % j == 0:\n                factors.append(j)\n                i //= j\n        if i > 1:\n            factors.append(i)\n        \n        # Calculate the sum of the prime factorization\n        factor_sum = 0\n        for factor in factors:\n            factor_sum += factor\n        \n        # Add the sum to the total sum\n        sum += factor_sum\n        \n    # Return the nth polite number\n    return sum\n",
        "test": "assert is_polite(2) == 2",
        "num_ids": 1038
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 383
    },
    {
        "number": 767,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5, 6], 7) == 3  # [1,6], [2,5], [3,4]",
        "num_ids": 598
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n",
        "test": "assert Diff([1,2,3],[1,2,3]) == []",
        "num_ids": 349
    },
    {
        "number": 770,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 1\n    while count < n:\n        sum += num ** 4\n        count += 1\n        num += 2\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1",
        "num_ids": 378
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n\n    # Traversing the Expression\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            # Push the element in the stack\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            # IF current character is not opening bracket, then it must be closing.\n            # So pop the top element from stack and compare it with current character\n\n            if not stack:\n                return False\n            else:\n                top_element = stack.pop()\n\n                # IF they are not equal, return False\n                if not compare(top_element, char):\n                    return False\n        else:\n            continue\n\n    # IF stack is empty, then the expression is balanced, return True in that case\n    if not stack:\n        return True\n    else:\n        return False\n\n\ndef compare(opening, closing):\n    '''\n    Compare the opening and closing brackets\n    '''\n    if opening == '(' and closing == ')':\n        return True\n    elif opening == '{' and closing == '}':\n        return True\n    elif opening == '[' and closing == ']':\n        return True\n    else:\n        return False\n\n\nif __name__ == \"__main__\":\n    exp = \"({[]})[]({})\"\n    if check_expression(exp):\n        print(\"The expression is balanced\")\n    else:\n        print(\"The expression is not balanced\")\n",
        "test": "assert check_expression(\"a+b*(c^d-e/(f+g*h)-i)\") == True",
        "num_ids": 912
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert remove_length(\"\", 0) == \"\"  # empty string",
        "num_ids": 451
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Initialize an empty list to store the positions of the substrings\n    positions = []\n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    # Loop through each match and append its position to the list\n    for match in matches:\n        positions.append(match.start())\n    # If the list is empty, return None\n    if not positions:\n        return None\n    # Otherwise, return the number of occurrences and positions of the substrings\n    else:\n        return len(positions), positions\n",
        "test": "assert occurance_substring(\"hello world\", \"abc\") == None",
        "num_ids": 623
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 3, 4, 6]) == False ",
        "num_ids": 389
    },
    {
        "number": 776,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"hello\") == 2 ",
        "num_ids": 564
    },
    {
        "number": 777,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    return sum(unique_elements)\n",
        "test": "assert find_sum([1, 2, 3, 4]) == 10",
        "num_ids": 516
    },
    {
        "number": 778,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]",
        "test": "assert pack_consecutive_duplicates([1, 1, 2, 3, 4, 4, 4, 5, 5]) == [[1, 1], [2], [3], [4, 4, 4], [5, 5]]",
        "num_ids": 469
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        if tuple(sublist) not in counts:\n            counts[tuple(sublist)] = 1\n        else:\n            counts[tuple(sublist)] += 1\n    return counts\n",
        "test": "assert unique_sublists([]) == {} # empty list",
        "num_ids": 629
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    result = []\n    n = len(test_list)\n    for i in range(1, n+1):\n        for j in combinations(test_list, i):\n            result.append(sum(j))\n    return result\n",
        "test": "assert find_combinations([1, 2, 3]) == set([(1, 2), (1, 1, 3), (3)])",
        "num_ids": 907
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math \n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nif count_divisors(n) % 2 == 0:\n    print(\"The count of divisors is even\")\nelse:\n    print(\"The count of divisors is odd\")\n",
        "test": "assert count_divisors(15) == 4  # even number of divisors",
        "num_ids": 489
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            sub_arr = arr[i:j+1]\n            if len(sub_arr) % 2 == 1:\n                result += sum(sub_arr)\n    return result",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5]) == 25",
        "num_ids": 532
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    saturation = round(saturation * 100, 1)\n    value = round(cmax * 100, 1)\n\n    return (hue, saturation, value)\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 1306
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 != 0:\n            odd = num\n            break\n    if even is None or odd is None:\n        return None\n    else:\n        return even * odd\n",
        "test": "assert mul_even_odd([7, 9, 2, 5, 4]) == 14",
        "num_ids": 590
    },
    {
        "number": 785,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Using the eval function to convert the string to a tuple\n    tup = eval(test_str)\n    \n    # Using a list comprehension to convert the elements of the tuple to integers\n    int_tup = tuple([int(x) for x in tup])\n    \n    return int_tup\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 424
    },
    {
        "number": 786,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "test": "assert right_insertion([1,2,3,4,5], 6) == 5",
        "num_ids": 346
    },
    {
        "number": 787,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three('abbbc') == True",
        "num_ids": 342
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_list + [test_str]\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "test": "assert new_tuple([1,2,3], 'hello') == (1,2,3, 'hello')",
        "num_ids": 379
    },
    {
        "number": 790,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 3, 4, 5, 6]) == True",
        "num_ids": 381
    },
    {
        "number": 791,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for element in test_tup:\n        if type(element) != tuple:\n            result.append(element)\n        else:\n            result.extend(remove_nested(element))\n    return tuple(result)\n",
        "test": "assert remove_nested((1,2,3)) == (1,2,3)",
        "num_ids": 453
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for element in input_list:\n        if type(element) == list:\n            count += 1\n            count += count_list(element)\n    return count\n",
        "test": "assert count_list([[], [1], [1, 2]]) == 3 # should return 3 ",
        "num_ids": 469
    },
    {
        "number": 793,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    low, high = 0, n-1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == x:\n            if mid == n-1 or arr[mid+1] != x:\n                return mid\n            else:\n                low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n",
        "test": "assert last([1,2,3,4,5],1) == 0",
        "num_ids": 589
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_starta_endb('aabb') == 'aabb' # should match",
        "num_ids": 374
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(dictionary):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dictionary.values():\n        total += value\n    return total\n",
        "test": "assert return_sum({}) == 0",
        "num_ids": 297
    },
    {
        "number": 797,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum\n",
        "test": "assert sum_odd(1) == 1  # check for single odd number ",
        "num_ids": 474
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def _sum(arr):   \n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 306
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def left_rotate(n,d):    \n    '''\n    Write a function to that rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # Circular shift the number left by d bits\n    n = (n << d) | (n >> (32 - d))\n    return n\n",
        "test": "assert left_rotate(12, 2) == 48",
        "num_ids": 658
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 255
    },
    {
        "number": 801,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 1, 1) == 3",
        "num_ids": 456
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    pivot = arr[0]\n    for i in range(1, n):\n        if arr[i] < pivot:\n            return i\n    return 0\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0 # sorted array",
        "num_ids": 419
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_perfect_square(1) == True",
        "num_ids": 346
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([2, 4]) == True # Product is 8, which is even",
        "num_ids": 346
    },
    {
        "number": 805,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1,2,3],[4,5,6],[7,8,9]]) == [7,8,9] # returns the list with the highest sum of elements",
        "num_ids": 588
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n",
        "test": "assert max_run_uppercase(\"Hello World\") == 1  # Test case 1",
        "num_ids": 473
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3]) == 1",
        "num_ids": 305
    },
    {
        "number": 808,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((1,2,3,4,5), 6) == False",
        "num_ids": 352
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n",
        "test": "assert check_smaller((1, 2, 3), (1, 2, 4)) == False  # returns False",
        "num_ids": 449
    }
]