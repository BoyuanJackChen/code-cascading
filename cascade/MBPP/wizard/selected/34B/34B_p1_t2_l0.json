[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n",
        "test": "assert similar_elements((1, 2, 3), (2, 3, 4)) == {2, 3}",
        "num_ids": 119
    },
    {
        "number": 3,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(1) == True",
        "num_ids": 111
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums) for i in range(n)], reverse=True)\n",
        "test": "assert heap_queue_largest([3, 2, 1, 5, 6, 4], 3) == [6, 5, 4]",
        "num_ids": 169
    },
    {
        "number": 6,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the given number is a power of two or not.\n    '''\n    if x == 0:\n        return False\n    return (x & (x-1)) == 0\n",
        "test": "assert is_Power_Of_Two(0) == False",
        "num_ids": 95
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog.\") == ['quick', 'brown', 'jumps', 'over', 'lazy']",
        "num_ids": 128
    },
    {
        "number": 8,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "test": "assert square_nums([1, 2, 3]) == [1, 4, 9]",
        "num_ids": 98
    },
    {
        "number": 9,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\n",
        "test": "assert find_Rotations(\"hello\") == 0",
        "num_ids": 111
    },
    {
        "number": 11,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        if first_occ == last_occ:\n            s = s.replace(ch, '', 1)\n        else:\n            s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    return s\n",
        "test": "assert remove_Occ(\"python\", \"o\") == \"pythn\"",
        "num_ids": 174
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row and store it in a list\n    row_sums = [sum(row) for row in M]\n    # Sort the row sums in ascending order\n    sorted_row_sums = sorted(row_sums)\n    # Create a new matrix with the rows sorted according to the sorted row sums\n    sorted_matrix = []\n    for row_sum in sorted_row_sums:\n        index = row_sums.index(row_sum)\n        sorted_matrix.append(M[index])\n    return sorted_matrix\n",
        "test": "assert sort_matrix([[3, 2], [5, 1], [4, 3], [1, 4]]) == [[5, 1], [3, 2], [4, 3], [1, 4]]",
        "num_ids": 268
    },
    {
        "number": 14,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n",
        "test": "assert find_Volume(2,3,4) == 12",
        "num_ids": 90
    },
    {
        "number": 16,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 135
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 72
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def remove_chars(str1, str2):\n    \"\"\"\n    This function removes characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert the strings to lists of characters\n    list1 = list(str1)\n    list2 = list(str2)\n    \n    # Remove the characters from list1 which are present in list2\n    for char in list2:\n        if char in list1:\n            list1.remove(char)\n    \n    # Convert the list back to a string and return it\n    return ''.join(list1)\n",
        "test": "assert str_to_list(\"world\") == ['w', 'o', 'r', 'l', 'd']",
        "num_ids": 189
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set(arraynums)\n    if len(num_set) == len(arraynums):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 124
    },
    {
        "number": 20,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x == 2:\n        return False\n    else:\n        for i in range(2, int(x/2)+1):\n            if x % i == 0:\n                return False\n        return True\n",
        "test": "assert is_woodall(20) == True",
        "num_ids": 122
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # converting the number to string\n    num_str = str(num)\n    # reversing the string\n    rev_str = num_str[::-1]\n    # converting the reversed string back to integer\n    rev_num = int(rev_str)\n    # checking if the given number is one less than twice its reverse\n    if num == rev_num * 2 - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(13) == False",
        "num_ids": 157
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 54321",
        "num_ids": 123
    },
    {
        "number": 58,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(5, -10) == True",
        "num_ids": 111
    },
    {
        "number": 59,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 72
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = s[i:j+1]\n            if sum(int(c) for c in sub_str) == len(sub_str):\n                count += 1\n    return count\n",
        "test": "assert count_Substrings(\"123\") == 1",
        "num_ids": 157
    },
    {
        "number": 62,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 84
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([5, 4, 3, 2, 1]) == 4",
        "num_ids": 170
    },
    {
        "number": 64,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n",
        "test": "assert subject_marks([('Chemistry', 85), ('Physics', 95), ('Biology', 80)]) == [('Biology', 80), ('Chemistry', 85), ('Physics', 95)]",
        "num_ids": 178
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 130
    },
    {
        "number": 66,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 112
    },
    {
        "number": 67,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def bell_number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 142
    },
    {
        "number": 68,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is increasing or decreasing\n    is_increasing = True\n    is_decreasing = True\n    \n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            is_increasing = False\n        if A[i] < A[i+1]:\n            is_decreasing = False\n    \n    # Check if the array is monotonic\n    if is_increasing or is_decreasing:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True",
        "num_ids": 215
    },
    {
        "number": 69,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1, 2, 3, 4, 5], [1, 2]) == True",
        "num_ids": 143
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Get the length of the first tuple in the input list\n    first_length = len(Input[0])\n    \n    # Loop through the input list and check if all tuples have the same length as the first tuple\n    for tup in Input:\n        if len(tup) != first_length:\n            return False\n    \n    # If all tuples have the same length as the first tuple, return True\n    return True\n",
        "test": "assert find_equal_tuple((1, 2, 3), (4, 5, 6)) == True",
        "num_ids": 182
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        \n        if gap <= 1:\n            sorted = True\n            gap = 1\n        \n        i = 0\n        j = gap\n        \n        while j < n:\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n            \n            i += 1\n            j += 1\n    \n    return nums\n",
        "test": "assert comb_sort([]) == []",
        "num_ids": 200
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        j = n - i\n        if i**2 + j**2 == n:\n            return True\n    return False\n",
        "test": "assert dif_Square(25) == True",
        "num_ids": 105
    },
    {
        "number": 74,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], ['c', 'b', 'a']) == False",
        "num_ids": 124
    },
    {
        "number": 75,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 3) == [(3, 6, 9), (6, 9, 12)]",
        "num_ids": 234
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(22) == True",
        "num_ids": 82
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(\"The length of the word is even.\")\n    else:\n        print(\"The length of the word is odd.\")\n",
        "test": "assert word_len(\"python\") == True",
        "num_ids": 98
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 86
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * 1**3 # radius 1",
        "num_ids": 105
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    sum %= 26\n    return chr(sum)\n",
        "test": "assert get_Char(\"xyz\") == \"c\"",
        "num_ids": 109
    },
    {
        "number": 84,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[sequence[i-1]] + sequence[i-sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n-1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 146
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area\n",
        "test": "assert surfacearea_sphere(1) == 12.566370614359172",
        "num_ids": 121
    },
    {
        "number": 86,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 79
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}",
        "num_ids": 232
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 2, 1, 3, 4, 5, 4]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 1}",
        "num_ids": 220
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize the closest number to None\n    closest_num = None\n    # Loop through all numbers from 1 to N-1\n    for num in range(1, N):\n        # If the difference between N and num is smaller than the difference between N and the current closest number\n        if N - num < N - closest_num if closest_num is not None else N:\n            # Update the closest number\n            closest_num = num\n    # Return the closest number\n    return closest_num\n",
        "test": "assert closest_num(10) == 9",
        "num_ids": 168
    },
    {
        "number": 90,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6",
        "num_ids": 115
    },
    {
        "number": 91,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \"world\") == True",
        "num_ids": 95
    },
    {
        "number": 92,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    for i in range(len(n)-1):\n        if n[i] == n[i+1]:\n            return False\n        elif abs(int(n[i])-int(n[i+1])) != 1:\n            return False\n    return True\n",
        "test": "assert is_undulating(1234567890) == False",
        "num_ids": 145
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert power(2,3) == 8",
        "num_ids": 65
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(1, 3), (2, 2), (3, 1)]) == 3",
        "num_ids": 132
    },
    {
        "number": 95,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2",
        "num_ids": 163
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(12) == 6 # divisors of 12 are 1, 2, 3, 4, 6, 12",
        "num_ids": 141
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "test": "assert frequency_lists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 225
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n",
        "test": "assert multiply_num([-2, 3, 4]) == -2.0",
        "num_ids": 106
    },
    {
        "number": 99,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n",
        "test": "assert decimal_to_binary(0) == '0'",
        "num_ids": 124
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    for i in range(num+1, sys.maxsize):\n        if str(i) == str(i)[::-1]:\n            return i\n    return \"No palindrome found\"\n",
        "test": "assert next_smallest_palindrome(123) == 121",
        "num_ids": 145
    },
    {
        "number": 101,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 127
    },
    {
        "number": 102,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = ''\n    for w in words:\n        camel_case += w.capitalize()\n    return camel_case\n",
        "test": "assert snake_to_camel(\"test_case_1\") == \"testCase1\"",
        "num_ids": 125
    },
    {
        "number": 103,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    elif n == 0 or m < 0:\n        return 0\n    else:\n        return (m * eulerian_num(n-1, m-1)) + (n * eulerian_num(n-1, m))\n",
        "test": "assert eulerian_num(0, 0) == 1",
        "num_ids": 142
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "test": "assert sort_sublists([['apple', 'banana', 'orange'], ['cat', 'dog', 'bird']]) == [['apple', 'banana', 'orange'], ['bird', 'cat', 'dog']]",
        "num_ids": 166
    },
    {
        "number": 105,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False]) == 2",
        "num_ids": 92
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3)",
        "num_ids": 122
    },
    {
        "number": 108,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n    \n    # Add the first element of each list to the heap\n    for i in range(len(num1)):\n        heapq.heappush(heap, (num1[i], 1))\n    for i in range(len(num2)):\n        heapq.heappush(heap, (num2[i], 2))\n    for i in range(len(num3)):\n        heapq.heappush(heap, (num3[i], 3))\n    \n    # Merge the lists\n    while heap:\n        num, list_num = heapq.heappop(heap)\n        merged_list.append(num)\n        if list_num == 1 and len(num1) > 0:\n            heapq.heappush(heap, (num1.pop(0), 1))\n        elif list_num == 2 and len(num2) > 0:\n            heapq.heappush(heap, (num2.pop(0), 2))\n        elif list_num == 3 and len(num3) > 0:\n            heapq.heappush(heap, (num3.pop(0), 3))\n    \n    return merged_list\n",
        "test": "assert merge_sorted_list([1,3,5],[2,4,6],[7,8,9]) != [1,2,3,4,5,6,7,9,8]",
        "num_ids": 440
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        binary = bin(i)[2:]\n        binary = binary.zfill(len(s))\n        decimal = int(binary, 2)\n        if decimal % 2 != 0:\n            count += 1\n    return count\n",
        "test": "assert odd_Equivalent('101', 2) == 3  # '101' -> '011' -> '110' -> '100' -> '001' -> '010' -> '110'",
        "num_ids": 186
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        common_elements = common_elements.intersection(set(nestedlist[i]))\n    return list(common_elements)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]",
        "num_ids": 173
    },
    {
        "number": 113,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 82
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}, {}]) == True",
        "num_ids": 80
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 109
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([[1, 2, 3], [4, 5, 6]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]",
        "num_ids": 200
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 89
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif arr[0] != arr[1]:\n        return arr[0]\n    elif arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    else:\n        for i in range(2, n-2):\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n",
        "test": "assert search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]) == 6",
        "num_ids": 232
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2), (3,4), (5,6), (7,8)]) == 56",
        "num_ids": 199
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(num):\n        '''\n        Helper function to check if a number is amicable or not.\n        '''\n        divisors_sum = sum([i for i in range(1, num) if num % i == 0])\n        if divisors_sum == num:\n            return False\n        return divisors_sum == sum([i for i in range(1, divisors_sum) if divisors_sum % i == 0])\n\n    amicable_numbers = [i for i in range(1, limit+1) if is_amicable(i)]\n    return sum(amicable_numbers)\n",
        "test": "assert amicable_numbers_sum(1000) == 5048",
        "num_ids": 232
    },
    {
        "number": 124,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    angle = cmath.phase(z)\n    return angle\n",
        "test": "assert angle_complex(-3, 4) == round(cmath.atan(4/3) + cmath.pi, 2) # case 2",
        "num_ids": 129
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    zero_count = 0\n    one_count = 0\n    for i in string:\n        if i == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "test": "assert find_length('000111') == 3",
        "num_ids": 180
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Return the sum of common divisors\n    return sum(common_divisors)\n",
        "test": "assert sum(15, 20) == 22 # common divisors are 1, 3, 5, and their sum is 22",
        "num_ids": 201
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 63
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(4, [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\", \"watermelon\"]) == [\"banana\", \"orange\", \"watermelon\"]",
        "num_ids": 180
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Calculate the sum of the first row\n    first_row_sum = sum(my_matrix[0])\n    # Check if all rows have the same sum\n    for i in range(1, n):\n        if sum(my_matrix[i]) != first_row_sum:\n            return False\n    # Check if all columns have the same sum\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum != first_row_sum:\n            return False\n    # Check if the diagonal sums are equal\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag1_sum != first_row_sum or diag2_sum != first_row_sum:\n        return False\n    # If all checks passed, the matrix is a magic square\n    return True\n",
        "test": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True",
        "num_ids": 368
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_items = [key for key, value in freq_dict.items() if value == max_freq]\n    return max_items\n",
        "test": "assert max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1",
        "num_ids": 197
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    vowels_list = [char for char in str_list if char in vowels]\n    for i in range(len(vowels_list)):\n        if i % 2 == 0:\n            str_list[str_list.index(vowels_list[i])] = vowels_list[-(i+1)]\n        else:\n            str_list[str_list.index(vowels_list[i])] = vowels_list[-(i+2)]\n    return \"\".join(str_list)\n",
        "test": "assert reverse_vowels(\"world\") == \"wrold\"",
        "num_ids": 232
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "test": "assert tup_string((1,)) == \"1\"",
        "num_ids": 66
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert sum_negativenum([1, -2, 3, -4, 5]) == -6",
        "num_ids": 121
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 73
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count\n",
        "test": "assert zero_count([1, 1, 1, 1, 1]) == 0",
        "num_ids": 184
    },
    {
        "number": 138,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 146
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert circle_circumference(1) == 2 * 3.141592653589793",
        "num_ids": 112
    },
    {
        "number": 140,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)\n",
        "test": "assert extract_singly([1, [2, 3], [4, [5, 6]]]) == {1, 2, 3, 4, 5, 6}",
        "num_ids": 158
    },
    {
        "number": 141,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_idx = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Move the maximum element to the beginning of the unsorted part of the list\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        nums[:i] = reversed(nums[:i])\n    \n    return nums\n",
        "test": "assert pancake_sort([3, 2, 1]) == [1, 2, 3]",
        "num_ids": 247
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3 # all items are the same in the same position",
        "num_ids": 171
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1, 2, 3)) == 0",
        "num_ids": 100
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 163
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif n % gcd(a, b) != 0:\n        return None\n    else:\n        x, y = extended_gcd(a, b)\n        x = x * (n // gcd(a, b))\n        y = y * (n // gcd(a, b))\n        return (x, y)\n\ndef gcd(a, b):\n    '''\n    Returns the greatest common divisor of a and b.\n    '''\n    while b:\n        a, b = b, a % b\n    return a\n\ndef extended_gcd(a, b):\n    '''\n    Returns a tuple (x, y) such that ax + by = gcd(a, b).\n    '''\n    if b == 0:\n        return (1, 0)\n    else:\n        x, y = extended_gcd(b, a % b)\n        return (y, x - (a // b) * y)\n",
        "test": "assert find_solution(2, 3, 7) == (3, 1)",
        "num_ids": 336
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5] # Test case 1",
        "num_ids": 157
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2 + 1):\n        sum += n - 2*i\n    return sum\n",
        "test": "assert sum_series(5) == 5 + 3 + 1 # n = 5",
        "num_ids": 148
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l**2) / (4 * tan(pi/s))\n    return area\n",
        "test": "assert area_polygon(10, 6) == 100 * (1 - tan(pi/6)**2) # hexagon",
        "num_ids": 142
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum1 += i\n    for j in range(1, n+1):\n        if (n+1) % j == 0:\n            sum2 += j\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(28) == 12 # True, divisors of 28 are 1, 2, 4, 7, 14, and their sum is 28, which is the same as the sum of divisors of 12 (1, 2, 3, 4, 6)",
        "num_ids": 291
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha():\n            if ord(str1[i].lower()) == i+97:\n                count += 1\n    return count\n",
        "test": "assert count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26 # all characters occur at the same position as in English alphabet",
        "num_ids": 151
    },
    {
        "number": 166,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 3, 5]) == 0 # no even pairs",
        "num_ids": 142
    },
    {
        "number": 167,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 96
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5], 3) == 1",
        "num_ids": 107
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 123
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5  # number of sides of a pentagon\n    perimeter = n * a\n    return perimeter\n",
        "test": "assert perimeter_pentagon(10) == 50",
        "num_ids": 102
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"\") == 0",
        "num_ids": 111
    },
    {
        "number": 222,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 112
    },
    {
        "number": 223,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 5) == False",
        "num_ids": 216
    },
    {
        "number": 224,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 104
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"",
        "num_ids": 107
    },
    {
        "number": 227,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 84
    },
    {
        "number": 228,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert n to binary and store it in a string\n    n_binary = bin(n)[2:]\n    # Reverse the binary string to check the bits from left to right\n    n_binary = n_binary[::-1]\n    # Initialize a flag to keep track of whether all bits are set or not\n    all_bits_set = True\n    # Loop through the range l to r\n    for i in range(l, r+1):\n        # If the i-th bit is unset, set the flag to False and break out of the loop\n        if n_binary[i] == '0':\n            all_bits_set = False\n            break\n    # Return the flag value\n    return all_bits_set\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(12, 1, 3) == True",
        "num_ids": 281
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left, right = 0, n-1\n    \n    # Loop through the array until the left pointer is greater than or equal to the right pointer\n    while left < right:\n        # If the left element is negative, increment the left pointer\n        if arr[left] < 0:\n            left += 1\n        # If the right element is positive, decrement the right pointer\n        elif arr[right] >= 0:\n            right -= 1\n        # If both elements are negative or both are positive, swap them and move both pointers towards each other\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    \n    # Return the re-arranged array\n    return arr\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]",
        "num_ids": 354
    },
    {
        "number": 230,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character,\n    and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "test": "assert replace_blank(\"hello world\", \"*\") == \"hello*world\"",
        "num_ids": 93
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n    return [heapq.heappop(heap) for i in range(n)]\n",
        "test": "assert larg_nnum([10, 20, 30, 40, 50], 1) == [50]",
        "num_ids": 170
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h\n",
        "test": "assert lateralsuface_cylinder(2,2) == 25.132741228718345",
        "num_ids": 125
    },
    {
        "number": 234,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(1) == 1",
        "num_ids": 65
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Iterate through each bit of the number\n    for i in range(32):\n        # Check if the current bit is even\n        if i % 2 == 0:\n            # Set the even bit to 1\n            n |= (1 << i)\n    return n\n",
        "test": "assert even_bit_set_number(0b11111111) == 0b11111110",
        "num_ids": 169
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2), (5, 6), (3, 4), (1, 2)]) == {(1, 2): 3, (3, 4): 2, (5, 6): 1}",
        "num_ids": 219
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"abc\") == 6",
        "num_ids": 116
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    total_sequences = 0\n    for i in range(2, m+1):\n        total_sequences += get_total_number_of_sequences(i, n-1)\n    return total_sequences\n",
        "test": "assert get_total_number_of_sequences(6, 3) == 4 # [2, 4, 5], [2, 4, 6], [2, 3, 5], [2, 3, 6]",
        "num_ids": 236
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "test": "assert replace_list([1, 2, 3], []) == [1, 2, 3]",
        "num_ids": 123
    },
    {
        "number": 242,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello\") == 5",
        "num_ids": 82
    },
    {
        "number": 244,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return (int(root) + 1) ** 2\n    else:\n        return (int(root) + 2) ** 2\n",
        "test": "assert next_Perfect_Square(1) == 4",
        "num_ids": 126
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Initialize two arrays to store the maximum sum of increasing and decreasing subsequences\n    inc_arr = [0] * n\n    dec_arr = [0] * n\n    # Initialize the first element of the increasing subsequence array with the first element of the given array\n    inc_arr[0] = arr[0]\n    # Initialize the first element of the decreasing subsequence array with the last element of the given array\n    dec_arr[0] = arr[n-1]\n    # Calculate the maximum sum of increasing subsequence\n    for i in range(1, n):\n        # Update the maximum sum of increasing subsequence by choosing the maximum between the current element and the sum of previous element and current element\n        inc_arr[i] = max(inc_arr[i-1] + arr[i], arr[i])\n    # Calculate the maximum sum of decreasing subsequence\n    for i in range(n-2, -1, -1):\n        # Update the maximum sum of decreasing subsequence by choosing the maximum between the current element and the sum of previous element and current element\n        dec_arr[i] = max(dec_arr[i+1] + arr[i], arr[i])\n    # Find the maximum sum of bitonic subsequence by choosing the maximum sum between the increasing and decreasing subsequences\n    max_sum = inc_arr[0]\n    for i in range(1, n):\n        max_sum = max(max_sum, inc_arr[i] + dec_arr[i])\n    return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 4, 5, 6]) == 11",
        "num_ids": 472
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return None\n    elif number == 0 or number == 1:\n        return number\n    else:\n        guess = number / 2\n        while abs(guess**2 - number) > 0.00001:\n            guess = (guess + number / guess) / 2\n        return guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 156
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store lengths of longest palindromic subsequences of substring\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    # All characters in the string are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    # Check for palindromes of length 2\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            dp[i][i+1] = 2\n    # Check for palindromes of length greater than 2\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j] and dp[i+1][j-1] > 0:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "test": "assert lps(\"babad\") == 3 # \"bab\" or \"aba\"",
        "num_ids": 332
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n",
        "test": "assert harmonic_sum(2) == 1.5",
        "num_ids": 98
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the arrays to sets to find the intersection\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the set back to a list and return it\n    return list(intersection)\n",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 166
    },
    {
        "number": 250,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3,4,5), 6) == 0 # check if the function returns 0 if the element is not in the tuple",
        "num_ids": 154
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]",
        "num_ids": 136
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n",
        "test": "assert convert((-1+1j)) == (1.4142135623730951, 2.356194490192345)",
        "num_ids": 190
    },
    {
        "number": 253,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5",
        "num_ids": 116
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 253
    },
    {
        "number": 256,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 163
    },
    {
        "number": 257,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 83
    },
    {
        "number": 259,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    if max_tup1 > max_tup2:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert maximize_elements((1,2,3),(4,5,6)) == (4,5,6)",
        "num_ids": 163
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 23, 29, 37, 41, 53, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 12",
        "test": "assert newman_prime(2) == 7 ",
        "num_ids": 1031
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n",
        "test": "assert division_elements((10, 20, 30), (2, 5, 10)) == (5.0, 4.0, 3.0)",
        "num_ids": 188
    },
    {
        "number": 262,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 183
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    d_age = h_age * 7\n    return d_age\n",
        "test": "assert dog_age(2) == 24 # human age 2 years is equal to 24 dog years",
        "num_ids": 107
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 210
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 4 * l**2\n",
        "test": "assert lateralsurface_cube(3) == 54",
        "num_ids": 81
    },
    {
        "number": 267,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 1\n    while count < n:\n        if num % 2 != 0:\n            sum += num ** 2\n            count += 1\n        num += 1\n    return sum\n",
        "test": "assert square_Sum(1) == 1 ",
        "num_ids": 128
    },
    {
        "number": 268,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return find_star_num(n-1) + find_star_num(n-2)\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 113
    },
    {
        "number": 269,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 66
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 12  # even numbers at even positions: 2, 4, 8",
        "num_ids": 207
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n",
        "test": "assert even_Power_Sum(3) == 144",
        "num_ids": 114
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 153
    },
    {
        "number": 273,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 183
    },
    {
        "number": 274,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for k in range(0, n//2 + 1):\n        coeff = math.comb(n, k)\n        if coeff % 2 == 0:\n            sum += coeff\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(1) == 1 # n=1, sum = 1",
        "num_ids": 163
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(2,2) == 50.26548245743669",
        "num_ids": 132
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({'a': 5, 'b': 3, 'c': 7}, 4) == {'a': 5, 'c': 7}",
        "num_ids": 164
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i in range(len(test_tup)):\n        count_dict[test_tup[i]] = i\n    return count_dict\n",
        "test": "assert count_first_elements((5, 4, 3, 2, 1)) == (4, 3, 2, 1, 0)",
        "num_ids": 162
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = (n * (9 * n - 1)) // 2\n    return decagonal\n",
        "test": "assert is_num_decagonal(2) == 12",
        "num_ids": 93
    },
    {
        "number": 280,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 184
    },
    {
        "number": 281,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 101
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    return [i - j for i, j in zip(nums1, nums2)]\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]",
        "num_ids": 110
    },
    {
        "number": 283,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the integer to a string\n    str_n = str(n)\n    # create a dictionary to store the frequency of each digit\n    freq_dict = {}\n    # iterate through each digit in the string\n    for digit in str_n:\n        # if the digit is already in the dictionary, increment its count\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        # otherwise, add the digit to the dictionary with a count of 1\n        else:\n            freq_dict[digit] = 1\n    # iterate through each digit in the string and check if its frequency is less than or equal to the digit itself\n    for digit in str_n:\n        if freq_dict[digit] > int(digit):\n            return False\n    # if all digits pass the check, return True\n    return True\n",
        "test": "assert validate(123456789) == True",
        "num_ids": 276
    },
    {
        "number": 284,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item != element:\n            return False\n    return True\n",
        "test": "assert check_element([1, 1, 1, 1], 1) == True",
        "num_ids": 112
    },
    {
        "number": 285,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bb|bbb)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('abbb') == True",
        "num_ids": 124
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum of the original array\n    max_sum = float('-inf')\n    # Loop through the original array and find the maximum sum of subarrays\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n    # Calculate the maximum sum of the modified array by repeating the original array k times\n    modified_max_sum = max_sum * k\n    # Return the maximum sum of the modified array\n    return modified_max_sum\n",
        "test": "assert max_sub_array_sum_repeated([1, -2, 3, 4, -5], 5, 3) == 22",
        "num_ids": 280
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum\n",
        "test": "assert square_Sum(4) == 2 + 4 + 16 == 22  # first four even numbers are 2, 4, 6, 8, their squares are 4, 16, 36, 64, so the sum is 22",
        "num_ids": 187
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 183
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        return k * count_no_of_ways(n-1, k) + k * count_no_of_ways(n-2, k) - (k-1) * count_no_of_ways(n-3, k)\n",
        "test": "assert count_no_of_ways(4, 2) == 9",
        "num_ids": 186
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(10, 3) == 3",
        "num_ids": 71
    },
    {
        "number": 293,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the square of the sides\n    square_w = w ** 2\n    square_h = h ** 2\n    # add the squares of the sides\n    sum_squares = square_w + square_h\n    # take the square root of the sum of squares to get the length of the third side\n    third_side = math.sqrt(sum_squares)\n    return third_side\n",
        "test": "assert otherside_rightangle(3, 4) == 5",
        "num_ids": 169
    },
    {
        "number": 294,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 129
    },
    {
        "number": 295,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6 + 12 = 28",
        "num_ids": 138
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def merge(left, right):\n    result = []\n    i = j = 0\n    inv_count = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            inv_count += len(left) - i\n            j += 1\n    result += left[i:]\n    result += right[j:]\n    return result, inv_count\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    mid = len(arr) // 2\n    left, left_inv = merge_sort(arr[:mid])\n    right, right_inv = merge_sort(arr[mid:])\n    merged, merge_inv = merge(left, right)\n    return merged, left_inv + right_inv + merge_inv\n\n\ndef get_Inv_Count(arr):\n    sorted_arr, inv_count = merge_sort(arr)\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 319
    },
    {
        "number": 297,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 149
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the sum of values for each key\n    sum_dict = defaultdict(int)\n    \n    # Iterate through the list of tuples and add the values to the sum_dict\n    for tup in stdata:\n        sum_dict[tup[0]] += tup[1]\n    \n    # Find the maximum value in the sum_dict and return it\n    max_val = max(sum_dict.values())\n    return max_val\n",
        "test": "assert max_aggregate([('A', 10), ('B', 20), ('C', 30), ('D', 40)]) == 100",
        "num_ids": 229
    },
    {
        "number": 300,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        binary = bin(i)[2:]\n        if len(binary) < 2*n:\n            binary = '0'*(2*n-len(binary)) + binary\n        if sum(int(binary[j]) for j in range(n)) == sum(int(binary[j]) for j in range(n,2*n)):\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(1) == 2  # 10 and 01 are the only binary sequences of length 2",
        "num_ids": 243
    },
    {
        "number": 301,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    This function takes a dictionary as input and returns its depth.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 96
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    # Calculate the effective rotation\n    effective_rotation = rotations % n\n    # Calculate the index of the first element of the original array after rotation\n    first_element_index = n - effective_rotation\n    # Check if the given index is within the effective rotation range\n    if index >= first_element_index and index < n:\n        return arr[index]\n    # Check if the given index is within the original array range\n    elif index < first_element_index:\n        return arr[index + effective_rotation]\n    else:\n        return None\n",
        "test": "assert find_Element([1,2,3,4,5],(0,5),3,0) == 2 # element at index 0 after 3 rotations is 2",
        "num_ids": 266
    },
    {
        "number": 305,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    p_words = [word for word in words if pattern.match(word)]\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[:2]\n",
        "test": "assert start_withp(['apple', 'banana', 'pear', 'peach']) == ['pear', 'peach']",
        "num_ids": 163
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Initialize the maximum sum variable\n    max_sum = 0\n    # Loop through the array from the given index to the end\n    for i in range(index, n):\n        # Check if the current element is greater than the kth element\n        if a[i] > a[k]:\n            # Calculate the sum of the subsequence from index to k\n            subseq_sum = sum(a[index:k+1])\n            # Update the maximum sum if the current subsequence sum is greater\n            if subseq_sum > max_sum:\n                max_sum = subseq_sum\n    # Return the maximum sum\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([5, 4, 3, 2, 1], 5, 2, 4) == 6",
        "num_ids": 300
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m < 0 or n < 0 or m > len(tuplex) or n > len(tuplex):\n        return None\n    if m > n:\n        return None\n    return tuplex[m:n+1]\n",
        "test": "assert colon_tuplex((\"apple\", \"banana\", \"cherry\"), 1, 3) == (\"banana\", \"cherry\")",
        "num_ids": 163
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 2) == [24, 30]",
        "num_ids": 191
    },
    {
        "number": 309,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(5, 10) == 10",
        "num_ids": 78
    },
    {
        "number": 310,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 81
    },
    {
        "number": 311,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n + 1)\n",
        "test": "assert set_left_most_unset_bit(0b101010) == 0b101100 # example 2",
        "num_ids": 119
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cone(3,4) == 33.510299",
        "num_ids": 103
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 0:\n        n //= 2\n        power += 1\n    return 2**(power-1)\n",
        "test": "assert highest_Power_of_2(10) == 8",
        "num_ids": 115
    },
    {
        "number": 389,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 114
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "test": "assert add_string([], \"{}\") == [] # empty list",
        "num_ids": 104
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n    \n    # iterate through the lists and add them to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    \n    return result\n",
        "test": "assert convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], [True, False, True]) == {1: {'a': True}, 2: {'b': False}, 3: {'c': True}}",
        "num_ids": 205
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 178
    },
    {
        "number": 393,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 186
    },
    {
        "number": 394,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct(()) == True # empty tuple",
        "num_ids": 97
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeating character in the string\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If all characters are repeated, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"a\") == \"a\"",
        "num_ids": 206
    },
    {
        "number": 396,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('abc') == False",
        "num_ids": 109
    },
    {
        "number": 397,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a == b == c:\n        return a\n    elif a <= b <= c or c <= b <= a:\n        return b\n    else:\n        return a if a > c else c\n",
        "test": "assert median_numbers(1, 2, 3) == 2",
        "num_ids": 114
    },
    {
        "number": 398,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24]",
        "num_ids": 159
    },
    {
        "number": 399,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
        "test": "assert bitwise_xor((1, 0, 1), (0, 1, 1)) == (1, 1, 0)",
        "num_ids": 178
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup not in freq:\n            freq[tup] = 1\n        else:\n            freq[tup] += 1\n    return len(freq)\n",
        "test": "assert extract_freq([(1, 2), (2, 3), (1, 2)]) == 2",
        "num_ids": 162
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup1 = test_tup1[i]\n        tup2 = test_tup2[i]\n        temp = []\n        for j in range(len(tup1)):\n            temp.append(tup1[j] + tup2[j])\n        result.append(tuple(temp))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples((-1,2),(3,-4)) == (2, -2)",
        "num_ids": 201
    },
    {
        "number": 404,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5, 7) == 5",
        "num_ids": 75
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1,2,3), 2) == True",
        "num_ids": 94
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "test": "assert find_Parity(3) == True  # odd number should return True",
        "num_ids": 102
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a string and sort its digits\n    digits = sorted(str(n))\n    # Loop through all possible permutations of the digits\n    for perm in permutations(digits):\n        # Convert the permutation back to an integer\n        num = int(''.join(perm))\n        # If the new number is greater than the original number and has no repeated digits, return it\n        if num > n and len(set(digits)) == len(digits):\n            return num\n    # If no bigger number is found, return None\n    return None\n",
        "test": "assert rearrange_bigger(534976) == 543679",
        "num_ids": 212
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heap.append((nums1[i] + nums2[j], nums1[i], nums2[j]))\n    heapq.heapify(heap)\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(heap)[1:])\n    return result\n",
        "test": "assert k_smallest_pairs([1, 3, 5], [2, 4, 6], 2) == [(1, 2), (3, 2)]",
        "num_ids": 269
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 6",
        "num_ids": 184
    },
    {
        "number": 410,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 124
    },
    {
        "number": 411,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(?:^|_)([a-z])', lambda x: x.group(1).upper(), word)\n",
        "test": "assert snake_to_camel(\"test_case_1\") == \"testCase1\"",
        "num_ids": 118
    },
    {
        "number": 412,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 136
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [tup[n-1] for tup in list1]\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == 4",
        "num_ids": 125
    },
    {
        "number": 414,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False",
        "num_ids": 106
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair\n",
        "test": "assert max_Product([-1, -2, -3, -4, -5]) == -15 # negative numbers",
        "num_ids": 179
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        if common_element is None:\n            common_element = Input[i][0]\n        elif common_element != Input[i][0]:\n            return None\n    return common_element\n",
        "test": "assert group_tuples([(1, 2), (1, 3), (1, 4)]) == 1",
        "num_ids": 154
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n",
        "test": "assert Find_Max(['apple', 'banana', 'orange']) == 'banana'",
        "num_ids": 121
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)\n",
        "test": "assert round_and_sum([4, 5, 6]) == 30",
        "num_ids": 146
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(4) == 2*2*2+4*4*4+6*6*6+8*8*8 # first four even numbers are 2, 4, 6, and 8",
        "num_ids": 154
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    result = delimiter.join(str(i) for i in test_tup)\n    return result\n",
        "test": "assert concatenate_tuple(('hello', 'world')) == 'hello,world'",
        "num_ids": 114
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 108
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return result\n",
        "test": "assert extract_rear((\"hello\", \"world\", \"python\")) == \"on\"",
        "num_ids": 110
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == 1",
        "num_ids": 160
    },
    {
        "number": 426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 0, nums))\n",
        "test": "assert filter_oddnumbers([2, 4, 6, 8]) == []",
        "num_ids": 101
    },
    {
        "number": 427,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Using regex to match the date format\n    match = re.match(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # Returning the date in the required format\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'\n",
        "test": "assert change_date_format(\"2021-08-10\") == \"10-08-2021\"",
        "num_ids": 225
    },
    {
        "number": 428,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([4, 2, 9, 1, 5, 6]) == [1, 2, 4, 5, 6, 9]",
        "num_ids": 228
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n",
        "test": "assert and_tuples((True, True, False), (True, False, True)) == (True, False, False)",
        "num_ids": 154
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = abs(b) / 2\n    e = -d\n    if b < 0:\n        e = -e\n    return a * (d ** 2) + b * d + c + e\n",
        "test": "assert parabola_directrix(1, 6, -25) == \"x=5\"",
        "num_ids": 137
    },
    {
        "number": 431,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 116
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median\n",
        "test": "assert median_trapezium(4, 6, 2) == 5.0",
        "num_ids": 102
    },
    {
        "number": 433,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return False\n    return True\n",
        "test": "assert check_greater([1, 2, 3], 1) == False",
        "num_ids": 103
    },
    {
        "number": 434,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_match_one(\"abb\") == True",
        "num_ids": 111
    },
    {
        "number": 435,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(123) == 3",
        "num_ids": 70
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [-2, -4]",
        "num_ids": 121
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"hello\") == \"hlo\"",
        "num_ids": 98
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[i][0]) == test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (3, 4), (2, 1), (4, 3)]) == 2",
        "num_ids": 185
    },
    {
        "number": 439,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n",
        "test": "assert multiple_to_single([1, 2, 3]) == 123",
        "num_ids": 106
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = ['really', 'very', 'extremely', 'quite', 'rather', 'indeed', 'highly', 'most', 'much', 'overly', 'too', 'totally', 'absolutely', 'completely', 'utterly', 'exceedingly', 'exceptionally', 'uncommonly', 'unusually', 'remarkably', 'particularly', 'special', 'distinctly', 'intensely', 'deeply', 'strongly', 'enthusiastically', 'vividly', 'fondly', 'chiefly', 'solely', 'exclusively', 'essentially', 'sufficiently', 'seriously', 'severely', 'significantly', 'substantially', 'thoroughly', 'accurately', 'appropriately', 'effectively', 'efficiently', 'quickly', 'rapidly', 'slowly', 'carefully', 'deliberately', 'easily', 'difficultly', 'elegantly', 'gracefully', 'poorly', 'well', 'badly', 'quickly', 'slowly', 'fast', 'slow', 'quick', 'slow', 'fast', 'slow', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly', 'quickly', 'slowly', 'rapidly', 'deliberately', 'speedily', 'swiftly', 'slowly', 'deliberately', 'rapidly',",
        "test": "assert find_adverb_position(\"The quicker the better.\") == (3, 8)",
        "num_ids": 1054
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 85
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0",
        "num_ids": 132
    },
    {
        "number": 443,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_nums = [num for num in list1 if num < 0]\n    if not neg_nums:\n        return None\n    else:\n        return max(neg_nums)\n",
        "test": "assert largest_neg([-1, -5, 0, 10, -8]) == -1",
        "num_ids": 125
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        else:\n            result.append(tup)\n    return result\n",
        "test": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)], 3) == [(2, 3, 4), (7, 8, 9)]",
        "num_ids": 206
    },
    {
        "number": 445,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 171
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for i in lst:\n        if i in count:\n            result[i] = count[i]\n        else:\n            result[i] = 0\n    return result\n",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,2,3]) == {1:1, 2:1, 3:1}",
        "num_ids": 186
    },
    {
        "number": 447,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 100
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def perrin(n):\n    \"\"\"\n    Returns the nth Perrin number.\n    \"\"\"\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return perrin(n-1) + perrin(n-2)\n\ndef cal_sum(n):\n    \"\"\"\n    Calculates the sum of the first n Perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += perrin(i)\n    return total\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 153
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings\n",
        "test": "assert extract_string(['apple', 'banana', 'cherry', 'date'], 3) == ['apple', 'banana', 'cherry']",
        "num_ids": 140
    },
    {
        "number": 451,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 89
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 80) == 20",
        "num_ids": 112
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i != i:\n                if n // i % 2 == 0:\n                    sum += n // i\n    return sum\n",
        "test": "assert sumofFactors(10) == 12 ",
        "num_ids": 155
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog and runs zigzag.\") == True",
        "num_ids": 122
    },
    {
        "number": 455,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True",
        "num_ids": 113
    },
    {
        "number": 456,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp']",
        "num_ids": 132
    },
    {
        "number": 457,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([[1,2,3], [4,5], [6,7,8,9]]) == [4,5]",
        "num_ids": 160
    },
    {
        "number": 458,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(4, 5) == 20",
        "num_ids": 74
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n",
        "test": "assert remove_uppercase(\"HELLO WORLD\") == \"\"",
        "num_ids": 89
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 131
    },
    {
        "number": 461,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2",
        "num_ids": 94
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result += list(itertools.combinations(list1, i))\n    return result\n",
        "test": "assert combinations_list([1, 2]) == [(1,), (2,), (1, 2)]",
        "num_ids": 159
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result\n",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6 # [2, 3]",
        "num_ids": 225
    },
    {
        "number": 464,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True",
        "num_ids": 128
    },
    {
        "number": 465,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "test": "assert drop_empty({'a': 1, 'b': '', 'c': [], 'd': {}, 'e': None}) == {'a': 1}",
        "num_ids": 173
    },
    {
        "number": 468,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = 1\n    max_ending_here = 1\n    min_ending_here = 1\n    for i in range(n):\n        if arr[i] > 0:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            min_ending_here = min(arr[i], min_ending_here * arr[i])\n            max_product = max(max_product, max_ending_here)\n        elif arr[i] < 0:\n            temp = max_ending_here\n            max_ending_here = max(arr[i], min_ending_here * arr[i])\n            min_ending_here = temp * arr[i]\n            max_product = max(max_product, max_ending_here)\n        else:\n            max_ending_here = 1\n            min_ending_here = 1\n    return max_product\n",
        "test": "assert max_product([-1, 2, 3, 4, 5]) == 60  # maximum product is 5 * 4 * 3 * 2 * 1",
        "num_ids": 356
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n",
        "test": "assert add_pairwise((10, 20, 30, 40, 50)) == (30, 70, 110, 150)",
        "num_ids": 169
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3], 5) == 1",
        "num_ids": 111
    },
    {
        "number": 472,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 127
    },
    {
        "number": 473,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return tuple(set1.intersection(set2))\n",
        "test": "assert tuple_intersection((1, 2, 3), (2, 3, 4)) == (2, 3)",
        "num_ids": 145
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char(\"hello\", \"l\", \"x\") == \"hexxo\"",
        "num_ids": 88
    },
    {
        "number": 475,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1]))\n",
        "test": "assert sort_counter({'a': 3, 'b': 1, 'c': 2}) == {'b': 1, 'c': 2, 'a': 3}",
        "num_ids": 148
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return max(nums) + min(nums)\n",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6 # sum of 1 and 5",
        "num_ids": 136
    },
    {
        "number": 477,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 65
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n",
        "test": "assert remove_lowercase(\"Hello World\") == \"Hello World\"",
        "num_ids": 90
    },
    {
        "number": 479,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 86
    },
    {
        "number": 554,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 120
    },
    {
        "number": 555,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n",
        "test": "assert difference(1) == 0",
        "num_ids": 126
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j]) % 2 != 0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1,3,5,7,9],5) == 10 # returns 10, which is the correct output for the given input",
        "num_ids": 179
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n",
        "test": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"",
        "num_ids": 156
    },
    {
        "number": 558,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n    diff_sum = 0\n    for i in range(len(num1)):\n        diff_sum += abs(num1[i] - num2[i])\n    return diff_sum\n",
        "test": "assert digit_distance_nums(123, 4567) == 15",
        "num_ids": 169
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
        "test": "assert max_sub_array_sum([1, -2, 3, 4, -5, 8, -3, -4], 8) == 10",
        "num_ids": 207
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    # Convert the concatenated tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    # Convert the set back to a tuple and sort it\n    sorted_tup = tuple(sorted(unique_set))\n    return sorted_tup\n",
        "test": "assert union_elements((1,2,3),(3,4,5)) == (1,2,3,4,5)",
        "num_ids": 206
    },
    {
        "number": 562,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4",
        "num_ids": 165
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert extract_values('') == []",
        "num_ids": 87
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4],4) == 6 # returns 6 for the input [1,2,3,4]",
        "num_ids": 176
    },
    {
        "number": 565,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 79
    },
    {
        "number": 566,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and iterate over each character\n    digits = str(n)\n    total = 0\n    for digit in digits:\n        # Convert the character back to an integer and add it to the total\n        total += int(digit)\n    return total\n",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 129
    },
    {
        "number": 567,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 119
    },
    {
        "number": 568,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 65
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['apple', 'banana', 'orange'], ['cat', 'dog', 'bird']]) == [['apple', 'banana', 'orange'], ['bird', 'cat', 'dog']]",
        "num_ids": 163
    },
    {
        "number": 572,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 164
    },
    {
        "number": 573,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120 # positive test case",
        "num_ids": 134
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * (r + h)\n    # Return the surface area\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(2,2) == 50.26548245743669",
        "num_ids": 148
    },
    {
        "number": 576,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # convert lists to strings for easier comparison\n    A_str = ''.join(map(str, A))\n    B_str = ''.join(map(str, B))\n    \n    # check if B_str is a substring of A_str\n    if B_str in A_str:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sub_Array([1,2,3,4,5],[1,2]) == True",
        "num_ids": 168
    },
    {
        "number": 577,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 98
    },
    {
        "number": 578,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 218
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            dissimilar_elements.append((test_tup1[i], test_tup2[i]))\n    return dissimilar_elements\n",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 4)) == (3, 4)",
        "num_ids": 184
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for tup in test_tuple:\n        if isinstance(tup, tuple):\n            result.append(even_ele(tup, even_fnc))\n        elif even_fnc(tup):\n            result.append(tup)\n    return tuple(result)\n",
        "test": "assert even_ele((1, 2, (3, 4, 5), 6), lambda x: x % 2 != 0) == (1, 3, 5)",
        "num_ids": 199
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b**2 + (b*s)**2)**0.5\n",
        "test": "assert surface_Area(4,5) == 140.3 ",
        "num_ids": 99
    },
    {
        "number": 582,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")\n",
        "test": "assert my_dict({'a': 1, 'b': 2}) == False",
        "num_ids": 89
    },
    {
        "number": 583,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-i-1)\n        return result\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 114
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'\\b\\w+ly\\b'\n    adverb_list = re.findall(adverb_pattern, text)\n    if adverb_list:\n        first_adverb = adverb_list[0]\n        positions = [m.start() for m in re.finditer(first_adverb, text)]\n        return first_adverb, positions\n    else:\n        return None, None\n",
        "test": "assert find_adverbs(\"The quickly quick brown fox jumps over the lazy dog.\") == (\"quickly\", [4])",
        "num_ids": 196
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-item[1], item[0]))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result[::-1]\n",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 159
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 151
    },
    {
        "number": 587,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 72
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return max(nums) - min(nums)\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 118
    },
    {
        "number": 589,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        root = int(i**0.5)\n        if root*root == i:\n            squares.append(i)\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 135
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_coord = cmath.rect(x, y)\n    return rect_coord\n",
        "test": "assert polar_rect(1, 0) == (1, 0)",
        "num_ids": 97
    },
    {
        "number": 591,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements.\")\n        return\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 164
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k, n+1):\n        result *= i\n    return result",
        "test": "assert binomial_Coeff(7,4) == 35 # (7 choose 4) + (7 choose 3) + (7 choose 2) + (7 choose 1) + (7 choose 0) = 35 + 35 + 21 + 7 + 1 = 100 ",
        "num_ids": 212
    },
    {
        "number": 593,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the IP address into its octets\n    octets = ip.split('.')\n    # Iterate over each octet and remove leading zeroes using regex\n    for i in range(len(octets)):\n        octets[i] = re.sub(r'^0+', '', octets[i])\n        # If the octet is empty after removing leading zeroes, set it to '0'\n        if octets[i] == '':\n            octets[i] = '0'\n    # Join the octets back into a single string\n    return '.'.join(octets)\n",
        "test": "assert removezero_ip(\"000.000.000.000\") == \"0.0.0.0\"",
        "num_ids": 246
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is None or odd is None:\n        return None\n    else:\n        return even - odd\n",
        "test": "assert diff_even_odd([2, 4, 6, 1, 3]) == 1",
        "num_ids": 191
    },
    {
        "number": 595,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the strings to lists of integers\n    str1 = [int(i) for i in str1]\n    str2 = [int(i) for i in str2]\n\n    # Initialize the count of swaps\n    count = 0\n\n    # Traverse through the lists\n    for i in range(len(str1)):\n        # If the elements are not equal, swap them\n        if str1[i] != str2[i]:\n            for j in range(i+1, len(str1)):\n                if str1[j] == str2[i]:\n                    str1[i], str1[j] = str1[j], str1[i]\n                    count += 1\n                    break\n\n    # Return the count of swaps\n    return count\n",
        "test": "assert min_Swaps(\"0000\", \"1111\") == 4 # example 2",
        "num_ids": 284
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "test": "assert tuple_size((1,)) == sys.getsizeof(1)",
        "num_ids": 122
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize pointers for both arrays\n    i = j = 0\n    \n    # Loop until we find the kth element or one of the arrays is exhausted\n    while i < len(arr1) and j < len(arr2) and k > 0:\n        # Compare the elements at the current pointers\n        if arr1[i] < arr2[j]:\n            # If the element in the first array is smaller, increment the pointer for that array\n            i += 1\n        else:\n            # If the element in the second array is smaller, increment the pointer for that array\n            j += 1\n        # Decrement k, since we have compared one element\n        k -= 1\n    \n    # If k is still greater than 0, it means we need to look for more elements\n    if k > 0:\n        # If the first array has been exhausted, the kth element is in the second array\n        if i == len(arr1):\n            return arr2[j+k-1]\n        # If the second array has been exhausted, the kth element is in the first array\n        elif j == len(arr2):\n            return arr1[i+k-1]\n    # If k is 0, it means we have found the kth element\n    else:\n        # If the pointers for both arrays point to the same element, that is the kth element\n        if arr1[i] == arr2[j]:\n            return arr1[i]\n        # If the element in the first array is greater, the kth element is in the second array\n        elif arr1[i] > arr2[j]:\n            return arr2[j]\n        # If the element in the second array is greater, the kth element is in the first array\n        else:\n            return arr1[i]\n",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 3) == 4",
        "num_ids": 533
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Find the number of digits\n    num_of_digits = len(str(number))\n    # Iterate through each digit and add the cube of the digit to the sum\n    for digit in str(number):\n        sum += int(digit) ** num_of_digits\n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 172
    },
    {
        "number": 599,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n",
        "test": "assert sum_average(5) == (15, 3.0) # sum of first 5 natural numbers is 15 and average is 3.0",
        "num_ids": 149
    },
    {
        "number": 600,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True",
        "num_ids": 80
    },
    {
        "number": 602,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return it as the first repeated character\n        if char in char_count:\n            return char\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # If no repeated characters are found, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 194
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n    \n    index = 1\n    while(index != len(ludic)):\n        first_num = ludic[index]\n        remove_index = index + first_num\n        \n        while(remove_index < len(ludic)):\n            ludic.pop(remove_index)\n            remove_index = remove_index + first_num - 1\n        \n        index += 1\n    \n    return ludic\n",
        "test": "assert get_ludic(2) == [1]",
        "num_ids": 193
    },
    {
        "number": 604,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return ' '.join(reversed_words)\n",
        "test": "assert reverse_words(\"I love Python\") == \"Python love I\"",
        "num_ids": 105
    },
    {
        "number": 605,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 105
    },
    {
        "number": 606,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 87
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert find_literals(\"1234567890\", r\"\\d{3}\") == (\"123\", 0, 3)",
        "num_ids": 166
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 150
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k > len(list1):\n        return list1\n    else:\n        list1.pop(k-1)\n        return list1\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]",
        "num_ids": 163
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            max_val = max(max_val, row[N])\n    return max_val\n",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 8",
        "num_ids": 182
    },
    {
        "number": 612,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1,2], [3,4], [5,6]]) == [[1,3,5], [2,4,6]] # test case 1",
        "num_ids": 210
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i[1]\n    return cum_sum\n",
        "test": "assert cummulative_sum([-1, 2, -3, 4, -5]) == [-1, 1, -2, 2, -3]",
        "num_ids": 157
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1,2,3), (4,5,6), (7,8,9))) == [2.0, 5.0, 8.0]",
        "num_ids": 186
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n",
        "test": "assert tuple_modulo((10, 20, 30), (0, 0, 0)) == (10, 20, 30)",
        "num_ids": 177
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif steps == 0:\n        return float('inf')\n    else:\n        return d // steps + (d % steps > 0)\n",
        "test": "assert min_Jumps(10, 3) == 3 # when steps = 10 and d = 3, the minimum jumps required is 3",
        "num_ids": 177
    },
    {
        "number": 618,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1,2,3],[2,4,6]) == [0.5,0.5,0.5] # Test case 1",
        "num_ids": 150
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    char_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            char_str += char\n    return char_str + num_str\n",
        "test": "assert move_num(\"a1b2c3\") == \"abc123\"",
        "num_ids": 146
    },
    {
        "number": 620,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    subsets = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0:\n                subsets.append((a[i], a[j]))\n    max_size = 0\n    for subset in subsets:\n        size = len(set(subset))\n        if size > max_size:\n            max_size = size\n    return max_size\n",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4",
        "num_ids": 218
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = k = 0\n    median = [0] * n\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median[k] = arr1[i]\n            i += 1\n        else:\n            median[k] = arr2[j]\n            j += 1\n        k += 1\n    \n    while i < n:\n        median[k] = arr1[i]\n        i += 1\n        k += 1\n        \n    while j < n:\n        median[k] = arr2[j]\n        j += 1\n        k += 1\n        \n    if n % 2 == 0:\n        return (median[n//2 - 1] + median[n//2]) / 2\n    else:\n        return median[n//2]\n",
        "test": "assert get_median([1, 3, 5], [2, 4, 6, 7], 4) == 4.5",
        "num_ids": 314
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([2, 3, 4], 2) == [4, 9, 16]",
        "num_ids": 128
    },
    {
        "number": 624,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 66
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements.\")\n        return\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 162
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculating the height of the triangle using the radius of the semicircle\n    height = math.sqrt(r**2 - (r/2)**2)\n    # Calculating the base of the triangle using the diameter of the semicircle\n    base = 2*r\n    # Calculating the area of the triangle using the formula (0.5 * base * height)\n    area = 0.5 * base * height\n    return area\n",
        "test": "assert triangle_area(2) == 0.5 * (2 ** 2) * (3 ** 0.5) / 2",
        "num_ids": 219
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    missing = None\n    for i in range(start, end):\n        if array[i] > i:\n            missing = i\n            break\n    \n    if missing is None:\n        missing = end\n    \n    return missing\n",
        "test": "assert find_First_Missing([1,2,3,4,5,6]) == 7",
        "num_ids": 165
    },
    {
        "number": 628,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 87
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6] # test case 1",
        "num_ids": 147
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return [coord for coord in adj if coord not in sub]\n",
        "test": "assert adjac((1,1)) == [(0,1),(1,0),(1,2),(2,1)]",
        "num_ids": 142
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 79
    },
    {
        "number": 632,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = num_list.count(0)\n    num_list = [i for i in num_list if i != 0]\n    num_list += [0] * zero_count\n    return num_list\n",
        "test": "assert move_zero([1, 0, 2, 0, 3, 0]) == [1, 2, 3, 0, 0, 0]",
        "num_ids": 175
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum\n",
        "test": "assert pair_xor_Sum([1, 1, 1, 1], 4) == 6  # (1^1) + (1^1) + (1^1) = 0 ",
        "num_ids": 206
    },
    {
        "number": 635,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n",
        "test": "assert heap_sort([]) == []",
        "num_ids": 94
    },
    {
        "number": 637,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True",
        "num_ids": 109
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill index using the 13.12 equation\n    wc = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    # Round the wind chill index to the next integer\n    wc_rounded = math.ceil(wc)\n    return wc_rounded\n",
        "test": "assert wind_chill(50, 0) == 16",
        "num_ids": 202
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['alice', 'Bob', 'Charlie', 'david']) == 10",
        "num_ids": 140
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n",
        "test": "assert remove_parenthesis(\"hello (world)\") == \"hello \"",
        "num_ids": 95
    },
    {
        "number": 641,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n - 1)) // 2\n",
        "test": "assert is_nonagonal(2) == 7",
        "num_ids": 75
    },
    {
        "number": 643,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.findall(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle(\"The quick brown fox jumps over the lazy dog.\") == False",
        "num_ids": 146
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    k = k - 1\n    i = 0\n    while i < k/2:\n        input[i], input[k-i] = input[k-i], input[i]\n        i += 1\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 2) == [2, 1, 3, 4, 5]",
        "num_ids": 192
    },
    {
        "number": 720,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 1, 'b': 2}) == (1, 2, 3, {'a': 1, 'b': 2})",
        "num_ids": 161
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1] / (n * n)\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 6.0",
        "num_ids": 287
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    return filtered_students\n",
        "test": "assert filter_data({'David': (1.8, 80), 'Eva': (1.5, 45), 'Frank': (1.7, 65)}, 1.7, 60) == {'David': (1.8, 80), 'Frank': (1.7, 65)}",
        "num_ids": 281
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 162
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base ** power):\n        result += int(digit)\n    return result\n",
        "test": "assert power_base_sum(3, 4) == 10  # 3^4 = 81, sum of digits is 8 + 1 = 9",
        "num_ids": 167
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n",
        "test": "assert extract_quotation('She told me \"I love you\" and I said \"You are welcome\".') == 'I love you'",
        "num_ids": 120
    },
    {
        "number": 726,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((1, 2, 3, 4, 5)) == (2, 6, 12, 20)",
        "num_ids": 195
    },
    {
        "number": 728,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 141
    },
    {
        "number": 730,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([1, 1, 2, 2, 3, 4, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 146
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n",
        "test": "assert lateralsurface_cone(10, 20) == 1256.6370614, \"Test case 2 failed\"",
        "num_ids": 176
    },
    {
        "number": 732,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[ ,.]'\n    return re.sub(pattern, ':', text)\n",
        "test": "assert replace_specialchar(\"Hello, World. This is a test.\") == \"Hello:World:This is a test:\"",
        "num_ids": 114
    },
    {
        "number": 733,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n            \n    return result\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 207
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    mod = 10**9 + 7\n    res = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            prod %= mod\n            res += prod\n            res %= mod\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 2, 3, -1]) == 18  # Test case 2",
        "num_ids": 190
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Get the first and last bits\n    first_bit = (n >> 1) & 1\n    last_bit = n & 1\n    \n    # Toggle the middle bits\n    middle_bits = n ^ (n >> 1)\n    \n    # Combine the first, middle, and last bits\n    result = (first_bit << 1) | (middle_bits ^ (middle_bits >> 1)) | (last_bit << 0)\n    \n    return result\n",
        "test": "assert set_middle_bits(0b11110000) == 0b11010100 # example 2",
        "num_ids": 223
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert left_insertion([1, 3, 5, 7, 9], 4) == 2",
        "num_ids": 162
    },
    {
        "number": 737,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('elephant') == True",
        "num_ids": 117
    },
    {
        "number": 738,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1/2\n    else:\n        return 1/n + geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1/2",
        "num_ids": 133
    },
    {
        "number": 739,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Initialize the variables\n    count = 0\n    i = 1\n    \n    # Loop until the number of digits in triangular number is n\n    while True:\n        count += i\n        i += 1\n        if len(str(count)) == n:\n            break\n    \n    # Return the index of smallest triangular number with n digits\n    return i-1\n",
        "test": "assert find_Index(1) == 1",
        "num_ids": 150
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        if i+1 < len(test_tup):\n            result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict\n",
        "test": "assert tuple_to_dict(('apple', 'red', 'banana', 'yellow', 'orange', 'orange')) == {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}",
        "num_ids": 229
    },
    {
        "number": 741,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 92
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side**2)\n    return area\n",
        "test": "assert area_tetrahedron(3) == 12*math.sqrt(2)/3",
        "num_ids": 111
    },
    {
        "number": 743,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 150
    },
    {
        "number": 744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, None, 3)) == False",
        "num_ids": 94
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(100, 200) == [108, 120, 132, 144, 156, 168, 180, 192]",
        "num_ids": 240
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2 * (a/360) * math.pi)\n        return area\n",
        "test": "assert sector_area(10, 180) == 942.477796076938  # check for another valid input",
        "num_ids": 201
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    return L[m][n][o]\n",
        "test": "assert lcs_of_three(\"AGGTAB\",\"GXTXAYB\",\"GTAB\") == \"GTAB\"",
        "num_ids": 343
    },
    {
        "number": 748,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)\n",
        "test": "assert capital_words_spaces(\"HelloWorld\") == \"Hello World\"",
        "num_ids": 110
    },
    {
        "number": 749,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)\n",
        "test": "assert sort_numeric_strings(['1', '5', '10', '50', '100']) == ['1', '5', '10', '50', '100']",
        "num_ids": 145
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([], (1, 2, 3)) == [1, 2, 3]",
        "num_ids": 120
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[left] < arr[i]:\n        return False\n    if right < n and arr[right] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n",
        "test": "assert check_min_heap_helper([], 0) == True # empty array is a min heap",
        "num_ids": 202
    },
    {
        "number": 752,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 219
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list in ascending order based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Return the first k records from the sorted list\n    return test_list[:K]\n",
        "test": "assert min_k([(5, 2), (3, 1), (7, 4), (2, 5), (9, 3), (4, 6)], 2) == [(2, 5), (3, 1)]",
        "num_ids": 217
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
        "num_ids": 215
    },
    {
        "number": 755,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    first_min = second_min = float('inf')\n    for num in numbers:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif first_min < num < second_min:\n            second_min = num\n    \n    return second_min\n",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 172
    },
    {
        "number": 756,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_match_zero_one(\"a\") == None",
        "num_ids": 155
    },
    {
        "number": 757,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs(['abcd', 'dcba', 'abba', 'baab']) == 2",
        "num_ids": 160
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in count_dict:\n            count_dict[tuple(sublist)] = 1\n        else:\n            count_dict[tuple(sublist)] += 1\n    return count_dict\n",
        "test": "assert unique_sublists([1, 2, 2, 3]) == {(1, 2, 3): 1, (1, 2): 1, (2, 3): 1, (2,): 1, (3,): 1}",
        "num_ids": 224
    },
    {
        "number": 759,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if round(float(num), 2) == float(num):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal(\"123.45\") == True",
        "num_ids": 122
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1, 1, 1, 1, 1]) == True",
        "num_ids": 107
    },
    {
        "number": 762,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 114
    },
    {
        "number": 763,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1",
        "num_ids": 170
    },
    {
        "number": 764,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"\") == 0",
        "num_ids": 86
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize the number of digits in the number\n    num_digits = 1\n    \n    # Initialize the number to 1\n    num = 1\n    \n    # Loop until the nth polite number is found\n    while n > 1:\n        # Find the number of digits in the current number\n        num_digits = int(math.log10(num)) + 1\n        \n        # Check if the number is polite\n        if num % (10 ** (num_digits - 1) * 9) == 0:\n            n -= 1\n        \n        # Increment the number by 1\n        num += 1\n    \n    # Return the nth polite number\n    return num - 1\n",
        "test": "assert is_polite(2) == 2",
        "num_ids": 248
    },
    {
        "number": 766,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 124
    },
    {
        "number": 767,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    num_dict = {}\n    for num in arr:\n        if sum - num in num_dict:\n            count += num_dict[sum - num]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 1",
        "num_ids": 198
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1,2,3],[1,2]) == [3]",
        "num_ids": 88
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 # check for n = 1",
        "num_ids": 114
    },
    {
        "number": 771,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    \n    # Traversing the Expression\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            # Push the element in the stack\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            # IF current character is not opening bracket, then it must be closing.\n            # So pop the top element from stack and compare it with current character\n            if not stack:\n                return False\n            \n            opening_bracket = stack.pop()\n            \n            if opening_bracket == '(':\n                closing_bracket = ')'\n            elif opening_bracket == '{':\n                closing_bracket = '}'\n            elif opening_bracket == '[':\n                closing_bracket = ']'\n            \n            if char != closing_bracket:\n                return False\n    \n    # Check Empty Stack\n    if stack:\n        return False\n    \n    return True\n",
        "test": "assert check_expression(\"(a+b)*(c-d)\") == True",
        "num_ids": 303
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert remove_length(\"This is a test string\", 4) == \"This is a test\"",
        "num_ids": 133
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    if result:\n        return result\n    else:\n        return None\n",
        "test": "assert occurance_substring(\"hello world\", \"world\") == [6, 7, 8, 9, 10]",
        "num_ids": 158
    },
    {
        "number": 775,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 3, 4, 6, 7, 8, 9]) == False",
        "num_ids": 143
    },
    {
        "number": 776,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n        elif i < len(test_str)-1 and test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0",
        "num_ids": 195
    },
    {
        "number": 777,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store unique elements\n    unique_set = set()\n    # Create a variable to store the sum of unique elements\n    unique_sum = 0\n    # Iterate through the given list\n    for num in arr:\n        # If the number is not in the unique_set, add it to the set and add its value to the unique_sum\n        if num not in unique_set:\n            unique_set.add(num)\n            unique_sum += num\n    # Return the sum of unique elements\n    return unique_sum\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 216
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n",
        "test": "assert pack_consecutive_duplicates([1, 1, 2, 3, 4, 4, 4, 5, 5]) == [[1, 1], [2], [3], [4, 4, 4], [5, 5]]",
        "num_ids": 192
    },
    {
        "number": 779,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count\n",
        "test": "assert unique_sublists([1, 2, 3, 2, 1]) == {(1, 2, 3): 1, (2, 3): 1, (3,): 1}",
        "num_ids": 227
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            result.append(sum(j))\n    return result\n",
        "test": "assert find_combinations([1, 2, 3, 4, 5]) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]",
        "num_ids": 266
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n",
        "test": "assert count_divisors(15) == 4  # True",
        "num_ids": 154
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            for k in range(i, j+1, 1):\n                sum += arr[k]\n    return sum\n",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6]) == 27  # should return 27",
        "num_ids": 169
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = delta / cmax\n\n    saturation = round(saturation * 100)\n\n    value = round(cmax * 100)\n\n    return hue, saturation, value\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 389
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num * odd_num\n",
        "test": "assert mul_even_odd([1, 3, 5, 7]) == 0",
        "num_ids": 210
    },
    {
        "number": 785,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a tuple of integers\n    result = tuple(map(int, test_str.replace('(', '').replace(')', '').split(',')))\n    return result\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 127
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 4) == 2",
        "num_ids": 114
    },
    {
        "number": 787,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three('abbb') == True",
        "num_ids": 112
    },
    {
        "number": 788,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str,) + tuple(test_list)\n    return new_tuple\n",
        "test": "assert new_tuple([4, 5, 6], \"world\") == (4, 5, 6, \"world\")",
        "num_ids": 125
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 3, 4, 5, 6, 7, 8]) == True",
        "num_ids": 134
    },
    {
        "number": 791,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) != tuple:\n            result.append(item)\n        else:\n            result.extend(remove_nested(item))\n    return tuple(result)\n",
        "test": "assert remove_nested((1, 2, 3)) == (1, 2, 3)",
        "num_ids": 138
    },
    {
        "number": 792,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count\n",
        "test": "assert count_list([1, 2, 3]) == 0",
        "num_ids": 127
    },
    {
        "number": 793,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left, right = 0, n-1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result\n",
        "test": "assert last([1,2,3,4,5],5) == 4",
        "num_ids": 182
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_starta_endb(\"aabc\") == False",
        "num_ids": 122
    },
    {
        "number": 796,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 115
    },
    {
        "number": 797,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum\n",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 92
    },
    {
        "number": 798,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 82
    },
    {
        "number": 799,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # convert n to binary string\n    binary_n = bin(n)[2:].zfill(32)\n    # convert d to binary string\n    binary_d = bin(d)[2:].zfill(5)\n    # extract the last d bits from binary_n\n    last_d_bits = binary_n[-d:]\n    # left rotate the binary_n by d bits\n    left_rotated_binary_n = binary_n[:-d] + last_d_bits\n    # convert left_rotated_binary_n to decimal\n    decimal_n = int(left_rotated_binary_n, 2)\n    return decimal_n\n",
        "test": "assert left_rotate(123456789, 12) == 659568576",
        "num_ids": 265
    },
    {
        "number": 800,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 86
    },
    {
        "number": 801,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 2, 3) == 0",
        "num_ids": 128
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    pivot = find_pivot(arr, 0, n-1)\n    if pivot == -1:\n        return 0\n    return pivot\n\ndef find_pivot(arr, low, high):\n    if high < low:\n        return -1\n    if high == low:\n        return low\n    mid = int((low + high) / 2)\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return mid\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return mid - 1\n    if arr[low] >= arr[mid]:\n        return find_pivot(arr, low, mid - 1)\n    return find_pivot(arr, mid + 1, high)\n",
        "test": "assert count_rotation([4, 5, 6, 7, 1, 2, 3]) == 3",
        "num_ids": 278
    },
    {
        "number": 803,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    i = 0\n    while i*i < n:\n        i += 1\n    return i*i == n\n",
        "test": "assert is_perfect_square(1) == True",
        "num_ids": 105
    },
    {
        "number": 804,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([2, 4, 6]) == True",
        "num_ids": 117
    },
    {
        "number": 805,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]",
        "num_ids": 199
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n",
        "test": "assert max_run_uppercase(\"Hello World\") == 1",
        "num_ids": 154
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 106
    },
    {
        "number": 808,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n",
        "test": "assert check_K((1,2,3,4,5), 3) == True",
        "num_ids": 109
    },
    {
        "number": 809,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n",
        "test": "assert check_smaller((1, 2, 3), (1, 1, 2)) == True",
        "num_ids": 147
    }
]