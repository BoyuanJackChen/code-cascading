[
    {
        "number": 2,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # converting the tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # finding the intersection of two sets\n    common_elements = set1.intersection(set2)\n    return common_elements\n",
        "test": "assert similar_elements((1, 2, 3, 4), (3, 4, 5, 6)) == {3, 4}",
        "num_ids": 1491,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Returns True if n is not a prime number, else False.\n    \"\"\"\n    if n < 2:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False\n",
        "test": "assert is_not_prime(4) == True",
        "num_ids": 1205,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted(nums, reverse=True)[:n]\n",
        "test": "assert heap_queue_largest([3, 5, 2, 6, 7, 8, 4, 1, 9], 3) == [9, 8, 7]",
        "num_ids": 1993,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Power_Of_Two(x):\n    if x <= 0:\n        return False\n    return (x & (x-1)) == 0\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert find_char_long(\"This is a test string\") == ['This', 'test', 'string']",
        "num_ids": 1441,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert square_nums([1, 2, 3]) == [1, 4, 9]",
        "num_ids": 1086,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def find_Rotations(string):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(string)\n    str_list = list(string)\n    count = 0\n\n    for i in range(n):\n        if str_list[i] == str_list[0]:\n            count += 1\n            for j in range(i+1, n):\n                if str_list[i] == str_list[j]:\n                    count += 1\n                else:\n                    break\n            if count == n:\n                return count\n            else:\n                count = 0\n                str_list.append(str_list.pop(0))\n                \n    return count",
        "test": "assert find_Rotations('hello') == 0 # string is the same as itself",
        "num_ids": 1405,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1)  # remove first occurrence\n        s = s[::-1].replace(ch, '', 1)[::-1]  # remove last occurrence\n    return s\n",
        "test": "assert remove_Occ(\"python\", \"o\") == \"pythn\"",
        "num_ids": 1615,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sort_matrix(M):\n    # Compute the sum of each row and store it in a list\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the row sums and the matrix rows together using the sorted row sums as keys\n    sorted_sums, sorted_rows = zip(*sorted(zip(row_sums, M)))\n    \n    return list(sorted_rows)\n",
        "test": "assert sort_matrix([[4, 3, 2], [1, 2, 3], [5, 4, 3]]) == [[1, 2, 3], [4, 3, 2], [5, 4, 3]]",
        "num_ids": 2438,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume",
        "test": "assert find_Volume(2, 3, 4) == 12",
        "num_ids": 1003,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 1344,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(5) == 20  # test with side length of 5",
        "num_ids": 768,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def remove_chars(s1, s2):\n    \"\"\"\n    Remove characters from s1 that are present in s2.\n    \"\"\"\n    # Create a set of characters to remove from s1\n    chars_to_remove = set(s2)\n    \n    # Create an empty list to store the filtered characters\n    result = []\n    \n    # Iterate over the characters in s1 and append only those that are not in chars_to_remove\n    for char in s1:\n        if char not in chars_to_remove:\n            result.append(char)\n    \n    # Convert the list of filtered characters back to a string and return it\n    return ''.join(result)\n",
        "test": "assert str_to_list(\"abc123\") == [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]",
        "num_ids": 2058,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set(arraynums)\n    if len(num_set) == len(arraynums):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1,2,3,4]) == False",
        "num_ids": 1569,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0:\n        return False\n    \n    # converting x to binary and removing the '0b' prefix\n    binary_x = bin(x)[2:]\n    \n    # checking if the binary representation of x has consecutive 1's\n    for i in range(len(binary_x) - 1):\n        if binary_x[i] == '1' and binary_x[i+1] == '1':\n            return True\n    \n    return False\n",
        "test": "assert is_woodall(16) == False # since 16 is not of the form 4n+2",
        "num_ids": 1237,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rev(num):\n    '''\n    Checks if a given number is one less than twice its reverse.\n    '''\n    num_str = str(num)\n    rev_num = int(num_str[::-1])\n    twice_rev = rev_num * 2\n    \n    return num == twice_rev - 1",
        "test": "assert rev(121) == False",
        "num_ids": 1450,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the digits in descending order\n    sorted_digits = sorted(arr, reverse=True)\n\n    # Join the digits into a string and convert it to an integer\n    max_num = int(''.join(map(str, sorted_digits)))\n\n    return max_num\n",
        "test": "assert find_Max_Num([7, 3, 5, 8]) == 8753",
        "num_ids": 1342,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True\n",
        "test": "assert opposite_Signs(5,-10) == True",
        "num_ids": 1064,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "test": "assert is_octagonal(1) == 1  # the first octagonal number is 1",
        "num_ids": 918,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count_Substrings(s):\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = s[i:j]\n            sub_str_sum = sum(int(digit) for digit in sub_str)\n            if sub_str_sum == len(sub_str):\n                count += 1\n    return count\n",
        "test": "assert count_Substrings(\"123\") == 1",
        "num_ids": 1460,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Find the smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs[1:]:\n            if x < smallest:\n                smallest = x\n        return smallest\n",
        "test": "assert smallest_num([5, 3, 8, 1, 2]) == 1",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1]) == 0",
        "num_ids": 1884,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks\n",
        "test": "assert subject_marks([(\"Maths\", 90), (\"Science\", 80), (\"English\", 85)]) == [('Science', 80), ('English', 85), ('Maths', 90)]",
        "num_ids": 1764,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case\n        return 0\n    elif isinstance(data_list[0], list):  # recursive case\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:  # recursive case\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert recursive_list_sum([1,2,3,4,5]) == 15 # flat list",
        "num_ids": 1780,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, -2, 3, 0, -5, 6]) == 3",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def bell_number(n):\n    bell = [[1]]\n    for i in range(1, n):\n        row = [1]\n        for j in range(i):\n            row.append(bell[i-1][j] + row[-1])\n        bell.append(row)\n    return bell[n-1][0]\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is increasing or decreasing\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            increasing = False\n        elif A[i] < A[i+1]:\n            decreasing = False\n    \n    # Return True if the array is monotonic, False otherwise\n    return increasing or decreasing\n",
        "test": "assert is_Monotonic([1, 2, 3]) == True",
        "num_ids": 1937,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1,2,3,4,5],[1,2,3]) == True",
        "num_ids": 1389,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0]) # Get the length of the first tuple in the list\n    \n    for tup in Input:\n        if len(tup) != length: # If length of any tuple is not equal to the first tuple, return False\n            return False\n    \n    return True # If all tuples have same length, return True\n",
        "test": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6)]) == True",
        "num_ids": 1682,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        \n        if gap < 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums\n",
        "test": "assert comb_sort([]) == []",
        "num_ids": 2197,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    while i * i <= n:\n        j = (n - i * i) ** 0.5\n        if j == int(j):\n            return True\n        i += 1\n    return False",
        "test": "assert dif_Square(11) == False",
        "num_ids": 1514,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n\n    pattern_dict = {}\n    for i in range(len(patterns)):\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = colors[i]\n        elif pattern_dict[patterns[i]] != colors[i]:\n            return False\n\n    return True\n",
        "test": "assert is_samepatterns([], []) == True  # check for empty inputs",
        "num_ids": 2162,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tpl in test_list:\n        if all(x % K == 0 for x in tpl):\n            result.append(tpl)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (2, 4, 6), (7, 14, 21)], 7) == [(7, 14, 21)]",
        "num_ids": 1902,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Diff(n):  \n    '''\n    This function takes an integer as input and returns True if it is divisible by 11, else False.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(22) == True",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string as input and returns True if the length of the string is odd, otherwise False.\n    \"\"\"\n    return len(s) % 2 == 1\n",
        "test": "assert word_len(\"hello\") == True  # length is odd",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "test": "assert tetrahedral_number(1) == 1 # checking for n=1",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n",
        "test": "assert volume_sphere(2) == 33.510321638291124",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the sum of ASCII values of all characters as 0\n    ascii_sum = 0\n    \n    # Loop through each character of the string and add its ASCII value to ascii_sum\n    for char in strr:\n        ascii_sum += ord(char)\n    \n    # Calculate the final character by taking the ascii_sum modulo 26 and converting it to the corresponding character using chr()\n    final_char = chr(ascii_sum % 26)\n    \n    return final_char\n",
        "test": "assert get_Char(\"xyz\") == \"c\"",
        "num_ids": 1791,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[sequence[i-1]] + sequence[i - sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n-1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 1618,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area\n",
        "test": "assert surfacearea_sphere(1) == 12.566370614359172",
        "num_ids": 1096,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 3*n**2 - 3*n + 1\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 822,
        "indeed": true
    },
    {
        "number": 87,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n",
        "test": "assert merge_dictionaries_three({'a':1, 'b':2}, {'c':3, 'd':4}, {'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}",
        "num_ids": 1929,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for element in list1:\n        freq_dict[element] += 1\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == {1: 1, 2: 2, 3: 3, 4: 4}",
        "num_ids": 1706,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables to keep track of closest smaller number and distance\n    closest_num = None\n    min_distance = float('inf')\n    # Iterate through numbers from 1 to N-1\n    for num in range(1, N):\n        # Calculate distance between num and N\n        distance = abs(N - num)\n        # If distance is smaller than current minimum distance, update closest_num and min_distance\n        if distance < min_distance:\n            closest_num = num\n            min_distance = distance\n    return closest_num\n",
        "test": "assert closest_num(1) == None",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log([\"apple\"]) == 5  # single word",
        "num_ids": 1212,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Split the given string into a list of strings using space as the delimiter\n    str_list = str1.split()\n    # Check if the given substring is present in the list of strings\n    if sub_str in str_list:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \"World\") == False",
        "num_ids": 1213,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    if len(s) < 2:\n        return False\n    prev_diff = int(s[1]) - int(s[0])\n    for i in range(1, len(s)-1):\n        diff = int(s[i+1]) - int(s[i])\n        if diff * prev_diff <= 0:\n            prev_diff = diff\n        else:\n            return False\n    return True\n",
        "test": "assert is_undulating(1234567890) == False # not undulating",
        "num_ids": 1818,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert power(2,3) == 8",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(1, 3), (2, 1), (3, 2)]) == 2 ",
        "num_ids": 1340,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3], [4], [6,7,8,9], [10]]) == 1",
        "num_ids": 1560,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(24) == 8 # divisors of 24 are 1, 2, 3, 4, 6, 8, 12",
        "num_ids": 1207,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for element in list1:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict\n",
        "test": "assert frequency_lists([1,2,3]) == {1:1, 2:1, 3:1}",
        "num_ids": 2088,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Calculate the product of all the numbers in the list\n    product = 1\n    for number in numbers:\n        product *= number\n    \n    # Divide the product by the length of the list to get the average\n    average = product / len(numbers)\n    \n    return average\n",
        "test": "assert multiply_num([1, 2, 3, 4]) == 6.0 # testcase 2",
        "num_ids": 1181,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 1212,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    n = len(num_str)\n    # If length of num is 1, return 11\n    if n == 1:\n        return 11\n    # If all digits except the last are 9, return the palindrome with the first digit incremented and the rest set to 0\n    if num_str[:n-1] == '9' * (n-1):\n        return int(num_str[0] + '0' * (n-1) + num_str[0])\n    # If the last digit is 9, return the palindrome with the last two digits incremented and the rest set to 0\n    if num_str[-1] == '9':\n        return int(num_str[:n-1] + '0' + num_str[n-2])\n    # If the last digit is not 9, find the next smallest palindrome by incrementing the last digit and checking if it violates the palindrome condition\n    for i in range(n-1, -1, -1):\n        if num_str[i] < num_str[n-i-1]:\n            return int(num_str[:i] + str(int(num_str[n-i-1])-1) + num_str[i+1:] + num_str[i] + num_str[i:n-i-1][::-1])\n",
        "test": "assert next_smallest_palindrome(1234) == 12321 # next smallest palindrome",
        "num_ids": 3124,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1369,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel = words[0] + ''.join(w.capitalize() for w in words[1:])\n    return camel\n",
        "test": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    elif m == 1:\n        return 1\n    elif n == 1 and m == 2:\n        return 1\n    else:\n        return (m-1)*eulerian_num(n-1, m) + (n-1)*eulerian_num(n-1, m-1)\n",
        "test": "assert eulerian_num(0, 0) == 1 ",
        "num_ids": 1618,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n",
        "test": "assert sort_sublists([['apple', 'banana', 'orange'], ['cat', 'dog', 'bird']]) == [['apple', 'banana', 'orange'], ['bird', 'cat', 'dog']]",
        "num_ids": 1967,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count(lst):    \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, True, False]) == 3",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3) # Testcase 1",
        "num_ids": 1293,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n    \n    # Add each element of the three lists to the heap\n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    for num in num3:\n        heapq.heappush(heap, num)\n        \n    # Pop the smallest element from the heap and add it to the merged list\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n        \n    return merged_list\n",
        "test": "assert merge_sorted_list([1,2,4], [3,5,7], [2,6,8]) == [1,2,2,3,4,5,6,7,8]",
        "num_ids": 3579,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(len(s)):\n        s = s[1:]+s[0]\n        if int(s,2)%2!=0:\n            count += 1\n    return count\n",
        "test": "assert odd_Equivalent('111', 3) == 3  # three numbers with odd value after rotating '111' three times",
        "num_ids": 1834,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common = common.intersection(set(lst))\n    return list(common)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []",
        "num_ids": 1920,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer('123') == True  # True",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dit in list1:\n        if dit:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}]) == True",
        "num_ids": 947,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers to a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1,2,3)) == 123",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i, sub_list in enumerate(test_list):\n        for j, element in enumerate(sub_list):\n            try:\n                test_list[i][j] = float(element)\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([[1, 2], [3, 4]]) == [[1.0, 2.0], [3.0, 4.0]]",
        "num_ids": 1848,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 898,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def search(arr):\n    for i in range(len(arr)):\n        if i == 0 or arr[i] != arr[i-1]:\n            if i == len(arr)-1 or arr[i] != arr[i+1]:\n                return arr[i]\n",
        "test": "assert search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]) == 6 # check if the function returns the correct element",
        "num_ids": 2491,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def max_product_tuple(list1):\n    '''\n    Finds the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2), (3,-4), (5,-6)]) == 30",
        "num_ids": 1937,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(n):\n        '''\n        Helper function to check if a number is amicable.\n        '''\n        divisor_sum = sum(d for d in range(1, n) if n % d == 0)\n        if divisor_sum == n:\n            return False\n        return divisor_sum == sum(d for d in range(1, divisor_sum) if divisor_sum % d == 0)\n\n    total_sum = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            total_sum += i\n\n    return total_sum",
        "test": "assert amicable_numbers_sum(1000) == 5048",
        "num_ids": 2236,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    angle = cmath.phase(z)\n    return angle\n",
        "test": "assert angle_complex(3, 4) == cmath.phase(complex(3, 4)) # test with positive real and imaginary parts",
        "num_ids": 1160,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to track the current difference and the maximum difference found so far\n    current_diff = 0\n    max_diff = 0\n    \n    # Loop through the string and count the number of 0s and 1s in the current sub-string\n    for i in range(len(string)):\n        if string[i] == '0':\n            current_diff += 1\n        elif string[i] == '1':\n            current_diff -= 1\n        \n        # Update the maximum difference if the current difference is greater\n        if current_diff > max_diff:\n            max_diff = current_diff\n    \n    return max_diff\n",
        "test": "assert find_length('0000') == 4",
        "num_ids": 1989,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    This function takes two numbers as input and returns the sum of their common divisors.\n    '''\n    # Find the common divisors of a and b\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    # Return the sum of the common divisors\n    return sum(common_divisors)\n",
        "test": "assert sum(24, 36) == 27 # common divisors are 1, 2, 3, 4, 6, 12, so their sum is 27",
        "num_ids": 2141,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def long_words(n, words_list):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words_list:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n",
        "test": "assert long_words(4, [\"apple\", \"banana\", \"cherry\", \"grape\", \"kiwi\"]) == [\"apple\", \"banana\", \"cherry\", \"grape\"]",
        "num_ids": 1669,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    row_sums = [0] * n\n    col_sums = [0] * n\n    diag1_sum = diag2_sum = 0\n    \n    for i in range(n):\n        for j in range(n):\n            row_sums[i] += my_matrix[i][j]\n            col_sums[j] += my_matrix[i][j]\n            if i == j:\n                diag1_sum += my_matrix[i][j]\n            if i == n - j - 1:\n                diag2_sum += my_matrix[i][j]\n    \n    magic_sum = diag1_sum\n    if diag1_sum != diag2_sum or diag1_sum != col_sums[0]:\n        return False\n    \n    for i in range(1, n):\n        if row_sums[i] != magic_sum or col_sums[i] != magic_sum:\n            return False\n    \n    return True\n",
        "test": "assert magic_square_test([[1,2,3],[4,5,6],[7,8,9]]) == False",
        "num_ids": 3279,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_items = [k for k, v in freq.items() if v == max_freq]\n    return max_items[0]\n",
        "test": "assert max_occurrences([1,2,3,4,5,6,7,8,9,10]) == 1  # returns 1 as the maximum frequency is 1 for each element in the list",
        "num_ids": 2099,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str1 = list(str1)\n    i, j = 0, len(str1) - 1\n\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n\n    return \"\".join(str1)\n",
        "test": "assert reverse_vowels('hello') == 'holle'",
        "num_ids": 1820,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''.join(str(i) for i in tup1)\n    return str1\n",
        "test": "assert tup_string(()) == \"\" #check empty tuple",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert sum_negativenum([1, -2, 3, -4, 5]) == -6  # returns -6",
        "num_ids": 1388,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if zero_count + non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / (zero_count + non_zero_count)\n",
        "test": "assert zero_count([1, 1, 1, 1, 1]) == 0",
        "num_ids": 1867,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # convert n to binary\n    binary_n = bin(n)[2:]\n    # check if all bits are either 0 or 1\n    for bit in binary_n:\n        if bit not in ('0', '1'):\n            return False\n    return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(4) == True  # 4 = 2^2",
        "num_ids": 1561,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    C = 2 * 3.14 * r\n    return C\n",
        "test": "assert abs(circle_circumference(2.5) - 15.707) < 0.01 # radius of 2.5 should have circumference of 15.707 (approximately)",
        "num_ids": 1151,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def extract_singly(test_list):\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result\n",
        "test": "assert extract_singly([[1, 2], [3, 4], [5]]) == set([1, 2, 3, 4, 5])",
        "num_ids": 1496,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum element in nums[0:n]\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        # Reverse the sublist nums[0:max_index+1]\n        nums[:max_index+1] = reversed(nums[:max_index+1])\n        # Reverse the whole list\n        nums[:n] = reversed(nums[:n])\n        n -= 1\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 2350,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3",
        "num_ids": 1573,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1,2,3)) == 0",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    # Initialize the minimum and maximum values\n    min_val = max_val = arr[0]\n    # Loop through the array and update min and max values\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    # Return the absolute difference between the max and min values\n    return abs(max_val - min_val)\n",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 1772,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif n % gcd(a, b) != 0:\n        return None\n    else:\n        x0, y0 = exteuclid(a, b)\n        x = (n * x0) % b\n        y = (n * y0) % a\n        return (x, y)\n\n\ndef gcd(a, b):\n    '''\n    Helper function to find GCD of two numbers using Euclid's algorithm.\n    '''\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef exteuclid(a, b):\n    '''\n    Helper function to find the extended Euclidean algorithm to find x and y.\n    '''\n    if b == 0:\n        return (1, 0)\n    else:\n        x, y = exteuclid(b, a % b)\n        return (y, x - (a // b) * y)\n",
        "test": "assert find_solution(2, 3, 5) == (1, 1)",
        "num_ids": 3285,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]\n",
        "test": "assert remove_elements([1, 2, 3, 4], [2, 3]) == [1, 4]",
        "num_ids": 1283,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return n + sum_series(n-2)\n    else:\n        return n",
        "test": "assert sum_series(6) == 6 + 4 + 2  # n = 6",
        "num_ids": 1532,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l ** 2) / (4 * tan(pi / s))\n    return area\n",
        "test": "assert area_polygon(3, 3) == 3 * 3 * tan(pi/3) # equilateral triangle",
        "num_ids": 1351,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum",
        "test": "assert div_sum(12) == 28, \"div_sum(12) should be 28\"",
        "num_ids": 2228,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i, char in enumerate(str1):\n        if char.isalpha() and ord(char.lower()) == i + 97:\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"abcde\") == 5 ",
        "num_ids": 1360,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([0, 2, 4, 6]) == 6",
        "num_ids": 1418,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 1085,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5], 1) == 1",
        "num_ids": 1275,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1,2,3,4,5], 0, 4) == 15",
        "num_ids": 1461,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5\n    p = n * a\n    return p\n",
        "test": "assert perimeter_pentagon(10) == 50  # side length of 10 should give perimeter of 50",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"\") == 0 # empty string",
        "num_ids": 1173,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = set(type(x) for x in test_tuple)\n    if len(types) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_type((1, 2, 3, 4)) == True",
        "num_ids": 1251,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4, 5, 6], 8, 5) == False",
        "num_ids": 1995,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_values_string(string):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"",
        "num_ids": 1062,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 1039,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # loop through the range and check if all bits are set\n    for i in range(l, r+1):\n        if n & i == 0:\n            # if any bit is unset, return False\n            return False\n    # if all bits are set in the given range, return True\n    return True ",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b1101, 0, 3) == False # some bits are unset",
        "num_ids": 1908,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    arr = negative + positive + arr[n:]\n    return arr\n",
        "test": "assert re_arrange_array([], 0) == []",
        "num_ids": 3149,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character,\n    and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "test": "assert replace_blank(\"hello world\", \"!\") == \"hello!world\" ",
        "num_ids": 982,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    result.reverse()\n    return result\n",
        "test": "assert larg_nnum([3, 7, 2, 9, 1, 5], 0) == []",
        "num_ids": 1948,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h\n",
        "test": "assert lateralsuface_cylinder(1,1) == 6.283185307179586",
        "num_ids": 1438,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert volume_cube(1) == 1",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert the number to binary representation\n    binary = bin(n)[2:]\n    \n    # initialize an empty string to store the modified binary representation\n    modified_binary = ''\n    \n    # loop through each character in the binary representation\n    for i in range(len(binary)):\n        # if the current character is an even digit, set it to 1\n        if i % 2 == 0:\n            modified_binary += '1'\n        # otherwise, keep the current digit as it is\n        else:\n            modified_binary += binary[i]\n            \n    # convert the modified binary representation back to decimal and return it\n    return int(modified_binary, 2)\n",
        "test": "assert even_bit_set_number(25) == 29 # 11001 -> 11011",
        "num_ids": 1882,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2)]) == {(1, 2): 2, (3, 4): 1}",
        "num_ids": 1898,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings('a') == 1",
        "num_ids": 1428,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize a list to store the number of possible sequences for each length\n    num_sequences = [0] * (n+1)\n    # The number of sequences of length 1 is the number of elements in [2, m]\n    num_sequences[1] = m - 1\n    # For each length greater than 1, calculate the number of possible sequences\n    for i in range(2, n+1):\n        # The number of possible sequences is the sum of the number of possible sequences for all previous lengths\n        num_sequences[i] = sum(num_sequences[:i])\n        # For each length greater than 1, subtract the number of sequences that violate the condition\n        for j in range(2, i):\n            # The number of violating sequences is the product of the number of possible elements at each position\n            num_sequences[i] -= num_sequences[j] * (m // 2 - 1)\n    # Return the total number of possible sequences\n    return num_sequences[n]",
        "test": "assert get_total_number_of_sequences(5,3) == 4 # Explanation: The possible sequences are [2, 3, 4], [2, 4, 4], [2, 4, 5], [3, 4, 5]",
        "num_ids": 2473,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 13,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for element in list2:\n        list1.append(element)\n    return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5]) == [1, 2, 4, 5]  # replace 3 with [4, 5]",
        "num_ids": 1423,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello\") == 5",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return (int(root) + 1) ** 2\n    else:\n        return int(math.ceil(root)) ** 2\n",
        "test": "assert next_Perfect_Square(4) == 9",
        "num_ids": 1378,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize two arrays, one for the maximum sum up to that index and another for the minimum sum\n    # from that index (including that index)\n    max_sum_up_to = [0] * n\n    min_sum_from = [0] * n\n\n    # Compute the maximum sum up to each index\n    max_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_so_far:\n            max_sum_up_to[i] = max_sum_up_to[i-1] + arr[i-1]\n            max_so_far = arr[i]\n        else:\n            max_sum_up_to[i] = max_sum_up_to[i-1]\n\n    # Compute the minimum sum from each index\n    min_so_far = arr[-1]\n    for i in range(n-2, -1, -1):\n        if arr[i] < min_so_far:\n            min_sum_from[i] = min_sum_from[i+1] + arr[i+1]\n            min_so_far = arr[i]\n        else:\n            min_sum_from[i] = min_sum_from[i+1]\n\n    # Find the maximum sum of a bitonic subsequence by considering the sum of the maximum subsequence\n    # ending at each index and the minimum subsequence starting at that index\n    max_sum = float('-inf')\n    for i in range(n):\n        max_sum = max(max_sum, max_sum_up_to[i] + min_sum_from[i])\n\n    return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 4, 5, 4]) == 10",
        "num_ids": 3817,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"Invalid input. Number should be positive.\"\n    else:\n        guess = number/2\n        i = 0\n        while i < 100:\n            guess = (guess + number/guess)/2\n            i += 1\n        return guess\n",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 1776,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a table to store lengths of longest palindromic subsequences of substring of every length\n    L = [[0 for i in range(n)] for j in range(n)]\n\n    # All characters form a palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Check all substrings of length 2 to n\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i + 1][j], L[i][j - 1])\n\n    return L[0][n - 1]\n",
        "test": "assert lps(\"babad\") == 3 # \"bab\" or \"aba\" is the longest palindromic subsequence in \"babad\"",
        "num_ids": 3170,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize a variable to store the sum of harmonic series\n    harmonic_sum = 0\n\n    # Iterate over the range from 1 to n\n    for i in range(1, n):\n        # Add the reciprocal of i to the sum of harmonic series\n        harmonic_sum += 1/i\n\n    # Return the sum of harmonic series\n    return harmonic_sum\n",
        "test": "assert harmonic_sum(0) == 0",
        "num_ids": 1106,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 1581,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n",
        "test": "assert count_X(('a', 'b', 'c', 'd'), 'c') == 1",
        "num_ids": 1290,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3] # Test case 1",
        "num_ids": 1357,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n",
        "test": "assert convert((-3, 4)) == (5, 2.4091183323017156) # negative real and positive imaginary",
        "num_ids": 1605,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 'a', 4]) == 4 ",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors(['R', 'G', 'B'], 2) == [('R', 'R'), ('R', 'G'), ('R', 'B'), ('G', 'G'), ('G', 'B'), ('B', 'B')]",
        "num_ids": 2443,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(1) == 0",
        "num_ids": 1681,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1,2) == (2,1)",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        max_tuple += (max(test_tup1[i], test_tup2[i]),)\n    return max_tuple\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 2122,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    primes = [2, 3]\n    i = 2\n    while len(primes) < n:\n        i += 1\n        if all(i % p != 0 for p in primes):\n            primes.append(i)\n    return primes[-1]\n",
        "test": "assert newman_prime(1) == 3",
        "num_ids": 2036,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]/test_tup2[i])\n    return tuple(result)\n",
        "test": "assert division_elements((4, 8, 12), (2, 4, 6)) == (2.0, 2.0, 2.0)",
        "num_ids": 1963,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1,2,3,4,5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 1992,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    if h_age <= 0:\n        print(\"Invalid age\")\n        return None\n    elif h_age <= 1:\n        return h_age * 15\n    elif h_age <= 2:\n        return 15 + (h_age - 1) * 9\n    elif h_age <= 3:\n        return 24 + (h_age - 2) * 6\n    else:\n        return 30 + (h_age - 3) * 4\n",
        "test": "assert dog_age(1) == 15 # for 1 human year, dog's age should be 15 years",
        "num_ids": 1364,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_split(S, step):\n    \"\"\"\n    This function takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]",
        "num_ids": 1879,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_Sum(n):  \n    sum = 0  \n    for i in range(1, 2*n, 2):\n        sum += i*i\n    return sum\n",
        "test": "assert square_Sum(1) == 1 ",
        "num_ids": 1232,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 1\n    for i in range(n-1):\n        num = num * 5\n    return num\n",
        "test": "assert find_star_num(1) == 1 # first star number is 1",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0])\n",
        "test": "assert sum_even_and_even_index([2, 3, 4, 5, 6, 7, 8, 9]) == 20",
        "num_ids": 1809,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(2, 2*n+1, 2):\n        # Add the fifth power of each number to the sum\n        sum += i**5\n    # Return the final sum\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 1401,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]  # check if the function returns the correct output for a given input list",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((1,2,3),(4,5,6)) == (-3,-3,-3)",
        "num_ids": 1839,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    result = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            result += math.comb(n, i)\n    return result\n",
        "test": "assert even_binomial_Coeff_Sum(2) == 2",
        "num_ids": 1701,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(2, 2) == 2*3.14159*2*2*1",
        "num_ids": 1329,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({'a': 5, 'b': 3, 'c': 7}, 5) == {'a': 5, 'c': 7} ",
        "num_ids": 1712,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i in range(len(test_tup)):\n        count_dict[test_tup[i]] = i\n    return count_dict\n",
        "test": "assert count_first_elements(('a','b','c','d','e')) == {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4}",
        "num_ids": 1805,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    for i in range(1, n+1):\n        decagonal += i\n    return decagonal\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 1742,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if all elements in a list are unique.\n    \"\"\"\n    # Convert list to set to remove duplicates\n    unique_set = set(test_list)\n    # If the length of the set is the same as the length of the list,\n    # all elements are unique\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1,2,3]) == True",
        "num_ids": 1074,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    return [i - j for i, j in zip(nums1, nums2)]\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]",
        "num_ids": 1562,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def validate(n):\n    # convert the integer to string\n    s = str(n)\n    # loop through each digit of the string\n    for digit in s:\n        # check if the frequency of the digit is less than or equal to the digit itself\n        if s.count(digit) > int(digit):\n            return False\n    return True\n",
        "test": "assert validate(123) == True",
        "num_ids": 1684,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(x == element for x in lst)\n",
        "test": "assert check_element([1, 1, 1, 1], 1) == True",
        "num_ids": 1126,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a[b]{2,3}', text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('abbb') # should return True",
        "num_ids": 1213,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # create the modified array\n    modified_array = []\n    for i in range(k):\n        for j in range(n):\n            modified_array.append(a[j])\n    \n    # find the largest sum of a contiguous sub-array using Kadane's algorithm\n    max_so_far = 0\n    max_ending_here = 0\n    \n    for i in range(k*n):\n        max_ending_here += modified_array[i]\n        max_ending_here = max(max_ending_here, 0)\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far\n",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3], 3, 2) == 12  # repeating [1,2,3] twice gives [1,2,3,1,2,3] with a contiguous subarray sum of 6+6=12",
        "num_ids": 3078,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def square_Sum(n):\n    '''\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i - 1)**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0 # test for n = 0",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = None\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 1889,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1:\n        return k\n    else:\n        dp = [0] * n\n        dp[0] = k\n        dp[1] = k * k\n\n        for i in range(2, n):\n            dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2])\n\n        return dp[-1]",
        "test": "assert count_no_of_ways(3, 2) == 6",
        "num_ids": 2342,
        "indeed": true
    },
    {
        "number": 292,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None\n    else:\n        return n // m\n",
        "test": "assert find(10, 3) == 3",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Find the length of the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c\n",
        "test": "assert otherside_rightangle(5, 12) == 13 ",
        "num_ids": 1130,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if isinstance(num, (int, float)) and num > max_num:\n            max_num = num\n    return max_num\n",
        "test": "assert max_val([1, 2, 3]) == 3",
        "num_ids": 1304,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n",
        "test": "assert sum_div(1) == 1 # returns 1 for 1/1",
        "num_ids": 1423,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def merge(left, right):\n    result = []\n    i = j = 0\n    inv_count = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            inv_count += len(left) - i\n\n    result += left[i:]\n    result += right[j:]\n\n    return result, inv_count\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n\n    mid = len(arr) // 2\n    left, left_inv_count = merge_sort(arr[:mid])\n    right, right_inv_count = merge_sort(arr[mid:])\n    merged, merge_inv_count = merge(left, right)\n\n    return merged, left_inv_count + right_inv_count + merge_inv_count\n\n\ndef get_Inv_Count(arr):\n    sorted_arr, inv_count = merge_sort(arr)\n    return inv_count\n",
        "test": "assert get_Inv_Count([1,3,5,2,4,6]) == 3  # example 1",
        "num_ids": 2851,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for element in list1:\n        if type(element) == list:\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n",
        "test": "assert flatten_list([1, 2, 3, [4, 5], 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1748,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a dictionary to store the sum of values for each key\n    sum_dict = defaultdict(int)\n\n    # Loop through the list of tuples and update the sum_dict\n    for item in stdata:\n        sum_dict[item[0]] += item[1]\n\n    # Calculate the maximum aggregate\n    max_agg = max(sum_dict.values())\n\n    return max_agg\n",
        "test": "assert max_aggregate([(\"A\", 10), (\"B\", 20), (\"A\", 30), (\"C\", 10)]) == 40",
        "num_ids": 1978,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        bin_str = bin(i)[2:].zfill(2*n)\n        if sum(int(c) for c in bin_str[:n]) == sum(int(c) for c in bin_str[n:]):\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(1) == 2 # ['01', '10']",
        "num_ids": 2428,
        "indeed": true
    },
    {
        "number": 301,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for v in d.values()) if d else 0)\n    else:\n        return 0\n",
        "test": "assert dict_depth({\"a\": 1}) == 1",
        "num_ids": 1017,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the effective index after rotations\n    effective_index = (index + rotations) % len(arr)\n    # Find the element at the effective index\n    element = arr[effective_index]\n    # Return the element\n    return element\n",
        "test": "assert find_Element([1,2,3,4,5], (0,5), 1, 0) == 2",
        "num_ids": 2110,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # regex pattern to match words starting with 'p'\n    pattern = re.compile(r'^p\\w+')\n    # list to store words starting with 'p'\n    p_words = []\n    # loop through all words in the list\n    for word in words:\n        # if the word matches the regex pattern, add it to the p_words list\n        if pattern.match(word):\n            p_words.append(word)\n    # return the first two words starting with 'p'\n    return p_words[:2]\n",
        "test": "assert start_withp(['cat', 'dog', 'elephant', 'monkey']) == []",
        "num_ids": 1613,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the max_sum variable to store the maximum sum\n    max_sum = 0\n    \n    # Initialize a variable to store the current sum\n    current_sum = 0\n    \n    # Loop through the elements of the array from index to k\n    for i in range(index, k+1):\n        # If the current element is greater than the previous element, update the current sum\n        if i == index or a[i] > a[i-1]:\n            current_sum += a[i]\n        # Otherwise, reset the current sum to the current element\n        else:\n            current_sum = a[i]\n        \n        # Update the max_sum variable if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 4) == 12 ",
        "num_ids": 2855,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"First argument must be a tuple.\")\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError(\"Second and third arguments must be integers.\")\n    if m < 0 or n < 0:\n        raise ValueError(\"Second and third arguments must be non-negative integers.\")\n    if m > len(tuplex) or n > len(tuplex):\n        raise ValueError(\"Second and third arguments must be less than or equal to the length of the tuple.\")\n    if m > n:\n        raise ValueError(\"Second argument must be less than or equal to the third argument.\")\n    return tuplex[m:n]\n",
        "test": "assert colon_tuplex((1,2,3,4,5), 1, 3) == (2, 3)",
        "num_ids": 1597,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if len(products) < N:\n                products.append(product)\n                products.sort()\n            elif product > products[0]:\n                products[0] = product\n                products.sort()\n    return products\n",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 2) == [12, 15]",
        "num_ids": 2142,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(3, 4) == 4",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Sets the leftmost unset bit in the binary representation of n.\n\n    :param n: An integer.\n    :return: An integer with the leftmost unset bit set.\n    '''\n    return n | (n + 1)\n",
        "test": "assert set_left_most_unset_bit(3) == 7  # set the left most unset bit of 3 (which is 2^1 + 2^0) to 1",
        "num_ids": 1529,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h",
        "test": "assert volume_cone(1,1) == math.pi/3",
        "num_ids": 1119,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize power of 2 as 1\n    power_of_2 = 1\n\n    # Loop until power of 2 is greater than n\n    while power_of_2 <= n:\n        # Multiply power of 2 by 2 in each iteration\n        power_of_2 *= 2\n\n    # Return the previous value of power of 2, which is the highest power of 2 less than or equal to n\n    return power_of_2 // 2\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1226,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 1170,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]",
        "test": "assert add_string(['apple', 'banana', 'cherry'], 'I like {}') == ['I like apple', 'I like banana', 'I like cherry'] ",
        "num_ids": 1296,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        result[l1[i]][l2[i]] = l3[i]\n    return result\n",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 2465,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:  # base case\n        return 0\n    else:\n        # compute the maximum sum using the given equation\n        max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n        return max_sum\n",
        "test": "assert get_max_sum(1) == 1  # Base case 1",
        "num_ids": 1905,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Finds the list with maximum length in a given list of lists.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 1901,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct(()) == True",
        "num_ids": 1001,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    from collections import Counter\n    counter = Counter(str1)\n    for char in str1:\n        if counter[char] == 1:\n            return char\n    return None\n",
        "test": "assert first_non_repeating_character(\"a\") == \"a\"",
        "num_ids": 1758,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"java\") == False  # should be False",
        "num_ids": 1203,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sorting the numbers\n    sorted_numbers = sorted([a,b,c])\n    # finding the median\n    if len(sorted_numbers) % 2 == 0:\n        # if there are even number of elements, median is the average of middle two numbers\n        median = (sorted_numbers[len(sorted_numbers)//2 - 1] + sorted_numbers[len(sorted_numbers)//2])/2\n    else:\n        # if there are odd number of elements, median is the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median\n",
        "test": "assert median_numbers(5, 3, 2) == 3",
        "num_ids": 1593,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_digits = 0\n        for digit in str(num):\n            sum_digits += int(digit)\n        result.append(sum_digits)\n    return result\n",
        "test": "assert sum_of_digits([12, 34, 56]) == [3, 7, 11] # Testcase 1",
        "num_ids": 1706,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
        "test": "assert bitwise_xor((1, 0, 1), (0, 1, 1)) == (1, 1, 0)",
        "num_ids": 2074,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)\n",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 1776,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # If the element is a tuple, recursively call the function\n        if isinstance(test_tup1[i], tuple):\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            # If the element is not a tuple, add the corresponding elements from both tuples\n            result.append(test_tup1[i] + test_tup2[i])\n    \n    # Return the result as a tuple\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1,2),(3,4)),((5,6),(7,8))) == ((6,8),(10,12))",
        "num_ids": 2472,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def minimum(a, b):\n    '''\n    This function finds the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5, 8) == 5",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((\"apple\", \"banana\", \"orange\"), \"grape\") == False",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False # Even\n    else:\n        return True # Odd\n",
        "test": "assert find_Parity(0) == False ",
        "num_ids": 910,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a string and sort its digits in descending order\n    sorted_digits = sorted(str(n), reverse=True)\n    # Find the first digit from the left that is smaller than the digit immediately to its right\n    for i in range(len(sorted_digits) - 1):\n        if sorted_digits[i] > sorted_digits[i + 1]:\n            # Swap it with the smallest digit to its right that is greater than it\n            j = i + 1\n            while j < len(sorted_digits) and sorted_digits[j] > sorted_digits[i]:\n                j += 1\n            sorted_digits[i], sorted_digits[j - 1] = sorted_digits[j - 1], sorted_digits[i]\n            # Reverse the digits to the right of the swapped digit to get the smallest number possible\n            sorted_digits[i + 1:] = sorted(sorted_digits[i + 1:], reverse=True)\n            # Convert the digits back to an integer and return it\n            return int(''.join(sorted_digits))\n    # If no such digit is found, the number is already the largest possible\n    return None\n",
        "test": "assert rearrange_bigger(12) == 21",
        "num_ids": 3447,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heap.append((nums1[i]+nums2[j], nums1[i], nums2[j]))\n    \n    heapq.heapify(heap)\n    result = []\n    \n    while k > 0:\n        result.append(heapq.heappop(heap)[1:])\n        k -= 1\n    \n    return result\n",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]",
        "num_ids": 3114,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(3,4), (5,6), (1,2)]) == 6  # should return the same minimum product 6 even if the tuples are in a different order",
        "num_ids": 2022,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if isinstance(val, (int, float)) and val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 1276,
        "indeed": true
    },
    {
        "number": 411,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0] + ''.join([w.title() for w in words[1:]])\n    return camel_case\n",
        "test": "assert snake_to_camel(\"\") == \"\"",
        "num_ids": 1336,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "test": "assert remove_odd([]) == []",
        "num_ids": 1091,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [x[n-1] for x in list1]\n",
        "test": "assert extract_nth_element([('a', 'b'), ('c', 'd'), ('e', 'f')], 0) == 'a'",
        "num_ids": 1502,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def overlapping(list1,list2):   \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = -float('inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return max1 * max2\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20 # positive numbers",
        "num_ids": 1948,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in Input:\n        if common_element == None:\n            common_element = i[0]\n        elif i[0] != common_element:\n            return None\n    return common_element\n",
        "test": "assert group_tuples([(2,3), (4,5), (6,7)]) == None",
        "num_ids": 1820,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n",
        "test": "assert Find_Max(['a']) == 'a'",
        "num_ids": 1351,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    total_sum_times_length = total_sum * len(list1)\n    print(total_sum_times_length)\n",
        "test": "assert round_and_sum([-2.4, 0, 4.6]) == 10.0",
        "num_ids": 1675,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    This function finds the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        sum += num ** 3\n        count += 1\n        num += 2\n    return sum\n",
        "test": "assert cube_Sum(0) == 0  # check the base case",
        "num_ids": 1475,
        "indeed": true
    },
    {
        "number": 421,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = delimiter.join(str(element) for element in test_tup)\n    return concatenated_string\n",
        "test": "assert concatenate_tuple(()) == \"\"",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Average_Of_Cube(n):   \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/(n**2)\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        if len(string) > 0:\n            result.append(string[-1])\n        else:\n            result.append(None)\n    return tuple(result)\n",
        "test": "assert extract_rear(('hello', 'world', 'python')) == ('o', 'd', 'n')",
        "num_ids": 1288,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 0) == 0",
        "num_ids": 1405,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Create an empty list to store the odd numbers\n    odd_nums = []\n\n    # Loop through each number in the input list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2 != 0:\n            # If it's odd, add it to the odd_nums list\n            odd_nums.append(num)\n\n    # Return the list of odd numbers\n    return odd_nums\n",
        "test": "assert filter_oddnumbers([]) == [] # test empty list",
        "num_ids": 1207,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n        year, month, day = dt.split('-')\n        return '{}-{}-{}'.format(day, month, year)\n    else:\n        return 'Invalid date format'\n",
        "test": "assert change_date_format('2022-02-15') == '15-02-2022'",
        "num_ids": 2159,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([]) == []",
        "num_ids": 1949,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert and_tuples((True, True), (True, False)) == (True, False)",
        "num_ids": 1479,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n    \"\"\"\n    d = b**2 - 4*a*c\n    if d < 0:\n        raise ValueError(\"Invalid coefficients: no real roots.\")\n    elif d == 0:\n        x = -b/(2*a)\n        return \"x = \" + str(x)\n    else:\n        x1 = (-b - d**0.5)/(2*a)\n        x2 = (-b + d**0.5)/(2*a)\n        return \"x = \" + str(x1) + \" or x = \" + str(x2)\n",
        "test": "assert parabola_directrix(1, -2, 3) == -3  # x=-3 is the directrix for y=x^2-2x-3",
        "num_ids": 1977,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return bool(set(list1) & set(list2))\n",
        "test": "assert common_element([1, 2, 3], [2, 4, 6]) == True",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median\n",
        "test": "assert median_trapezium(12, 8, 6) == 10.0",
        "num_ids": 1181,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i >= number:\n            return False\n    return True\n",
        "test": "assert check_greater([1, 2, 3], 1) == False",
        "num_ids": 1078,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a\\w*b\\w*')\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"ab\")",
        "num_ids": 1136,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(25) == 5 ",
        "num_ids": 714,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5, -6]) == [-2, -4, -6]  # Test 1: all negative numbers",
        "num_ids": 1295,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]) or \\\n               (test_list[i][::-1] == test_list[j] and test_list[j][::-1] == test_list[i]):\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2), (3,4), (5,6)]) == 0",
        "num_ids": 1921,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n",
        "test": "assert multiple_to_single([1,2,3,4,5]) == 12345",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b[a-zA-Z]+ly\\b'  # pattern to match adverbs that end with 'ly'\n    adverb_list = re.findall(adverb_pattern, text)  # find all adverbs in the text\n    if adverb_list:  # if there are adverbs in the text\n        for adverb in adverb_list:\n            position = text.find(adverb)  # find the position of the first adverb\n            return adverb, position  # return the adverb and its position\n    else:  # if there are no adverbs in the text\n        return None, None  # return None, None\n",
        "test": "assert find_adverb_position(\"The dark chocolate tastes delicious.\") == (3, 5)  # 'dark' and 'delicious' are adverbs, positions are 3 and 5",
        "num_ids": 2880,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area\n",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 824,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0",
        "num_ids": 1400,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = None\n    for num in list1:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    return largest_neg\n",
        "test": "assert largest_neg([-1, -2, -3, -4, -5, -6]) == -1",
        "num_ids": 1535,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(t[:K] + t[-K:]) for t in test_list]\n",
        "test": "assert trim_tuple((1, 2, 3, 4, 5), 4) == (5) ",
        "num_ids": 1896,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup\n",
        "test": "assert index_multiplication((1,2,3), (4,5,6)) == (4, 10, 18) # should return True",
        "num_ids": 1667,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    result = {}\n    for item in lst:\n        if item in count_dict:\n            result[item] = count_dict[item]\n    return result\n",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,2]) == {1:1, 2:1} #Test case 1",
        "num_ids": 2013,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27] ",
        "num_ids": 1110,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def cal_sum(n):\n    '''\n    Calculate the sum of the first n Perrin numbers.\n    '''\n    # Initialize the first three Perrin numbers\n    perrin_nums = [3, 0, 2]\n    # Calculate the remaining Perrin numbers\n    for i in range(3, n):\n        perrin_nums.append(perrin_nums[-1] + perrin_nums[-2] - perrin_nums[-3])\n    # Calculate and return the sum of the Perrin numbers\n    return sum(perrin_nums[:n])\n",
        "test": "assert cal_sum(0) == 0 # base case",
        "num_ids": 1599,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings\n",
        "test": "assert extract_string(['apple', 'banana', 'cherry'], 0) == []",
        "num_ids": 1383,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n\ntext1 = \"This is a sample string with whitespaces.\"\nprint(remove_whitespaces(text1)) # Output: \"Thisisasamplestringwithwhitespaces.\"\n",
        "test": "assert remove_whitespaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 938,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 80) == 20 # Check for valid loss amount ",
        "num_ids": 1162,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number n as input and returns the sum of even factors of n.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n",
        "test": "assert sumofFactors(10) == 12 # 1+2+5",
        "num_ids": 1443,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\w*z\\w*', text)\n    if match:\n        return match.group()\n    else:\n        return \"No word with 'z' found in the text.\"\n",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the laziest dog.\") == \"laziest\"",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True # January has 31 days",
        "num_ids": 1306,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list([]) == []",
        "num_ids": 1233,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [4, 5]",
        "num_ids": 1898,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert rectangle_area(10, 5) == 50",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n",
        "test": "assert remove_uppercase(\"abcdefg\") == \"abcdefg\"",
        "num_ids": 923,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7] # Testcase 1",
        "num_ids": 1398,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def upper_ctr(string):\n    '''\n    This function counts the number of upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2  # Check for a string with 2 upper case characters",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from itertools import combinations\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result += list(combinations(list1, i))\n    return result\n",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1545,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        \n        result = max(result, max_product)\n    \n    return result\n",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6",
        "num_ids": 2288,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return values.count(n) == len(values)\n",
        "test": "assert check_value({'a':1, 'b':1, 'c':1}, 1) == True ",
        "num_ids": 1261,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert drop_empty({'g': 'good', 'h': 'happy', 'i': 'healthy'}) == {'g': 'good', 'h': 'happy', 'i': 'healthy'}",
        "num_ids": 1291,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize variables to store the maximum product and the length of the increasing subsequence\n    max_product = arr[0]\n    inc_subseq_len = 1\n\n    # Loop through the array starting from the second element\n    for i in range(1, len(arr)):\n        # If the current element is greater than the last element of the increasing subsequence,\n        # update the length of the subsequence and calculate the product\n        if arr[i] > arr[i - 1]:\n            inc_subseq_len += 1\n            product = 1\n            for j in range(i - inc_subseq_len, i):\n                product *= arr[j]\n            if product > max_product:\n                max_product = product\n        # If the current element is not greater than the last element of the subsequence,\n        # reset the length of the subsequence and update the maximum product if possible\n        else:\n            product = 1\n            for j in range(i - inc_subseq_len, i):\n                product *= arr[j]\n            if product > max_product:\n                max_product = product\n            inc_subseq_len = 1\n    \n    # Return the maximum product\n    return max_product\n",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 2794,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i]+test_tup[i+1],)\n    return result\n",
        "test": "assert add_pairwise((1,2,3,4)) == (3,5,7)",
        "num_ids": 1604,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_remainder(arr, n):\n    mod = 1\n    for i in arr:\n        mod *= i\n        mod %= n\n    return mod\n",
        "test": "assert find_remainder([2, 4, 6, 8], 3) == 0",
        "num_ids": 1089,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    # Check if the list is sorted\n    if sorted(l) != l:\n        return False\n\n    # Check if there are any gaps in the sequence\n    for i in range(len(l) - 1):\n        if l[i+1] - l[i] != 1:\n            return False\n\n    return True",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 1522,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for element in test_list1:\n        if element in test_list2:\n            intersection_list.append(element)\n    return tuple(intersection_list)\n",
        "test": "assert tuple_intersection((1, 2, 3), (2, 3, 4)) == (2, 3)",
        "num_ids": 1902,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1\n",
        "test": "assert replace_char(\"hello\", \"l\", \"x\") == \"hexxo\"",
        "num_ids": 1034,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1]))\n",
        "test": "assert sort_counter({1: 3, 2: 1, 3: 2}) == {2: 1, 3: 2, 1: 3}",
        "num_ids": 1644,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        nums.sort()\n        return nums[0] + nums[-1]\n",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6 ",
        "num_ids": 1181,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n",
        "test": "assert remove_lowercase(\"\") == \"\"",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n",
        "test": "assert first_Digit(1234) == 1",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2 != 0]\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5] ",
        "num_ids": 1028,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n        \n    return sum_of_natural_numbers**2 - sum_of_cubes\n",
        "test": "assert difference(0) == 0",
        "num_ids": 1548,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j]) & 1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([2, 4, 6, 8], 4) == 0",
        "num_ids": 1642,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled = ''\n    for char in string:\n        if char.islower():\n            toggled += char.upper()\n        elif char.isupper():\n            toggled += char.lower()\n        else:\n            toggled += char\n    return toggled\n",
        "test": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"",
        "num_ids": 1351,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    num1 = str(n1)\n    num2 = str(n2)\n    if len(num1) != len(num2):\n        raise ValueError(\"Both numbers must have the same number of digits\")\n    distance_sum = 0\n    for i in range(len(num1)):\n        distance_sum += abs(int(num1[i]) - int(num2[i]))\n    return distance_sum\n",
        "test": "assert digit_distance_nums(123, 123) == 0",
        "num_ids": 2256,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum([1,2,3,4,5], 5) == 15 ",
        "num_ids": 2151,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Converting the tuples into sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Finding the union of the two sets\n    union = set1.union(set2)\n    \n    # Converting the set back into a tuple and sorting it\n    result = tuple(sorted(union))\n    \n    return result\n",
        "test": "assert union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)",
        "num_ids": 1959,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Find_Max_Length(lst):   \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1,2,3],[4,5],[6,7,8,9]]) == 4",
        "num_ids": 1583,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert extract_values('') == []  # empty string should return empty list",
        "num_ids": 1039,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,1,1,1,1],5) == 0  # all elements are the same, no possible unordered pairs",
        "num_ids": 1736,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 783,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and iterate over its characters\n    s = str(n)\n    total = 0\n    for c in s:\n        # Convert the character back to an integer and add it to the total\n        total += int(c)\n    return total\n",
        "test": "assert sum_digits(123) == 6 # test case 1",
        "num_ids": 1209,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    if n == 0 or n == 1:\n        return True\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 1205,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dict_list = [{} for _ in range(length)]\n    return empty_dict_list\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['pear', 'apple', 'banana'], ['car', 'dog', 'zebra']]) != [['pear', 'apple', 'banana'], ['dog', 'car', 'zebra']]",
        "num_ids": 1861,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1854,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1,2,3,4,5]) == 120 # product of unique numbers [1,2,3,4,5]",
        "num_ids": 1479,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * (r + h)",
        "test": "assert surfacearea_cylinder(1,1) == 2*3.14 + 2*3.14*1 # for r=1 and h=1, the surface area should be 2*pi*1 + 2*pi*1*1 = 6.28 + 6.28 = 12.56",
        "num_ids": 1559,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    str1 = \",\".join(str(i) for i in A)\n    str2 = \",\".join(str(i) for i in B)\n    if str2 in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sub_Array([1, 2, 3, 4, 5], [6, 7, 8]) == False",
        "num_ids": 1691,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of n!\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return last_Digit_Factorial(n-1)\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9] # should return a flat list",
        "num_ids": 1958,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)\n",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3)) == ()  # both tuples are the same",
        "num_ids": 1923,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], int) and even_fnc(test_tuple[i]):\n            result.append(test_tuple[i])\n        elif isinstance(test_tuple[i], tuple):\n            temp = []\n            for j in range(len(test_tuple[i])):\n                if isinstance(test_tuple[i][j], int) and even_fnc(test_tuple[i][j]):\n                    temp.append(test_tuple[i][j])\n            if len(temp) > 0:\n                result.append(tuple(temp))\n    return tuple(result)\n",
        "test": "assert even_ele( ((1, 2, 3), (4, 5, 6), (7, 8, 9)), lambda x: x % 2 == 0) == ((2,), (4, 6), (8,))",
        "num_ids": 2278,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return ((b**2) + (b*s))*2\n",
        "test": "assert surface_Area(2,3) == 20 # Base edge is 2, height is 3, so surface area is 20",
        "num_ids": 1376,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True  # Testing with an empty dictionary",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num <= 1:\n        return 1\n    else:\n        catalan = [0] * (num + 1)\n        catalan[0] = 1\n        catalan[1] = 1\n        for i in range(2, num + 1):\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i - j - 1]\n        return catalan[num]\n",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 1355,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Using regex to find all adverbs ending with ly\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n\n    # If there are no adverbs ending with ly, return None\n    if not adverbs:\n        return None\n\n    # Finding the positions of the first adverb ending with ly\n    for word in adverbs:\n        if word.endswith('ly'):\n            positions = []\n            start = 0\n            while True:\n                position = text.find(word, start)\n                if position == -1:\n                    break\n                positions.append(position)\n                start = position + 1\n            return word, positions\n",
        "test": "assert find_adverbs(\"I ran quickly\") == (\"quickly\", [6])",
        "num_ids": 2202,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heap.append(item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert expensive_items([], 2) == []",
        "num_ids": 1850,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n <= len(l):\n        return l[n:] + l[:n]\n    else:\n        return l\n",
        "test": "assert split_Arr([1,2,3,4,5], 2) == [3,4,5,1,2] # splitting at 2nd element",
        "num_ids": 1480,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    This function converts a given list to a tuple.\n    \"\"\"\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3) # test case 1",
        "num_ids": 860,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    return max(nums) - min(nums)",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4 # positive test case",
        "num_ids": 1186,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Finds all perfect squares between two given numbers.\n    \"\"\"\n    # Initialize a list to store the perfect squares\n    perfect_squares = []\n\n    # Loop through all numbers between a and b (inclusive)\n    for i in range(a, b+1):\n        # Check if the square root of i is an integer\n        if int(i**0.5)**2 == i:\n            # If it is, add i to the list of perfect squares\n            perfect_squares.append(i)\n    \n    # Return the list of perfect squares\n    return perfect_squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 1579,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    rect_coord = cmath.rect(x, y)\n    return round(rect_coord.real, 2), round(rect_coord.imag, 2)\n",
        "test": "assert polar_rect(0, 0) == (0, 0)",
        "num_ids": 1131,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList\n    else:\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1511,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = 1\n    for i in range(k):\n        C *= (n-i)/(i+1)\n    return round(C)\n",
        "test": "assert binomial_Coeff(0, 0) == 1 ",
        "num_ids": 2209,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'\\b0+(\\d)', r'\\1', ip)\n",
        "test": "assert removezero_ip(\"192.001.002.010\") == \"192.1.2.10\"",
        "num_ids": 1700,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n        \n        if even_num is not None and odd_num is not None:\n            return even_num - odd_num\n    \n    # If either even or odd number is not found, return None\n    return None\n",
        "test": "assert diff_even_odd([1, 3, 5, 7, 9, 10]) == 10 - 1",
        "num_ids": 2053,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # converting strings to lists of characters\n    list1 = list(str1)\n    list2 = list(str2)\n    # counting the number of zeros and ones in each list\n    zero_count = list1.count('0') + list2.count('0')\n    one_count = len(list1) + len(list2) - zero_count\n    # counting the number of swaps required\n    swaps = 0\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] != list2[j]:\n            swaps += 1\n            if list1[i] == '0' and one_count > zero_count:\n                list1[i], list2[j] = list2[j], list1[i]\n                one_count -= 1\n                zero_count += 1\n            elif list1[i] == '1' and one_count < zero_count:\n                list1[i], list2[j] = list2[j], list1[i]\n                one_count += 1\n                zero_count -= 1\n            elif list2[j] == '0' and one_count > zero_count:\n                list1[i], list2[j] = list2[j], list1[i]\n                one_count -= 1\n                zero_count += 1\n            elif list2[j] == '1' and one_count < zero_count:\n                list1[i], list2[j] = list2[j], list1[i]\n                one_count += 1\n                zero_count -= 1\n        i += 1\n        j += 1\n    return swaps\n",
        "test": "assert min_Swaps('10', '10') == 0  # No swaps required",
        "num_ids": 3192,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "test": "assert tuple_size((1, 2, 3)) == sys.getsizeof(1) + sys.getsizeof(2) + sys.getsizeof(3)",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Check that k is within the bounds of the combined array\n    if k < 1 or k > len(arr1) + len(arr2):\n        return None\n    \n    # Determine the lengths of the two arrays\n    len1 = len(arr1)\n    len2 = len(arr2)\n    \n    # Handle the case where one array is empty\n    if len1 == 0:\n        return arr2[k-1]\n    if len2 == 0:\n        return arr1[k-1]\n    \n    # Handle the case where k is the first element\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    # Handle the case where k is the last element\n    if k == len1 + len2:\n        return max(arr1[-1], arr2[-1])\n    \n    # Determine the indices to search in each array\n    # We can do this by setting up two pointers that start at\n    # the beginning of each array and moving them based on the value\n    # of k. For example, if k is small, we know that the kth element\n    # must come from the first array, so we can move the pointer in\n    # the second array to the end of that array. Then, we can check\n    # the values at the two pointers and adjust them accordingly until\n    # we find the correct value of k.\n    \n    # Set up the initial pointers\n    i = 0\n    j = 0\n    \n    # Move the pointers based on k\n    while i + j < k-1:\n        # If the value at arr1[i] is less than the value at arr2[j], then\n        # we know that the kth element cannot come from arr1[i+1:], so we can\n        # increment i. Otherwise, we can decrement j.\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    # Determine the kth element based on the final pointers\n    if arr1[i] < arr2[j]:\n        # If the value at arr1[i] is less than the value at arr2[j], then\n        # the kth element must come from arr1, so we can return arr1[i].\n        return arr1[i]\n    else:\n        # Otherwise, the kth element must come from arr2, so we can return arr2[j].\n        return arr2[j]\n",
        "test": "assert find_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 1) == 1",
        "num_ids": 3440,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Find the number of digits in the given number\n    num_digits = len(str(number))\n    \n    # Iterate through each digit of the number and add its cube to the sum variable\n    for digit in str(number):\n        sum += int(digit) ** num_digits\n        \n    # Check if the sum is equal to the given number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 1885,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize sum and counter variable\n    sum = 0\n    count = 1\n    \n    # Loop through the numbers and calculate sum\n    while count <= number:\n        sum += count\n        count += 1\n    \n    # Calculate average\n    average = sum/number\n    \n    # Return sum and average as a tuple\n    return (sum, average)\n",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 1409,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_Even(n):\n    \"\"\"\n    Returns True if n is even, False otherwise.\n    \"\"\"\n    return n % 2 == 0",
        "test": "assert is_Even(4) == True",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return it as it is the first repeated character\n        if char in char_count:\n            return char\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # If no character is repeated, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 1706,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n    for i in range(1, n+1):\n        j = i\n        while j <= n:\n            j += i\n            if j in ludic:\n                ludic.remove(j)\n    return ludic\n",
        "test": "assert get_ludic(2) == [1]",
        "num_ids": 2068,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of words\n    reversed_words = words[::-1]\n    # Join the reversed words with space separator\n    result = ' '.join(reversed_words)\n    return result\n",
        "test": "assert reverse_words(\"hello world\") == \"world hello\"",
        "num_ids": 1137,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def prime_num(num):\n    \"\"\"\n    Check if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 1045,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(360) == 2 * math.pi",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19) # returns matching substring, start index, and end index for 'fox'",
        "num_ids": 1712,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_Number(0) == 1  # Base case: 1st bell number is 1",
        "num_ids": 1682,
        "indeed": true
    },
    {
        "number": 610,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i != k:\n            new_list.append(list1[i])\n    return new_list\n",
        "test": "assert remove_kth_element([], 0) == [] # empty list",
        "num_ids": 1463,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            max_val = max(max_val, row[N])\n    return max_val\n",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 8",
        "num_ids": 1862,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_elements = []\n    second_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    return [first_elements, second_elements]\n",
        "test": "assert merge([[1,2], [3,4], [5,6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 1952,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = []\n    sum = 0\n    for i in test_list:\n        sum += i\n        cum_sum.append(sum)\n    return cum_sum\n",
        "test": "assert cummulative_sum([1, 2, 3]) == [1, 3, 6]",
        "num_ids": 1674,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        if len(tup) == 0:\n            result.append(0)\n        else:\n            result.append(sum(tup)/len(tup))\n    return result\n",
        "test": "assert average_tuple(((1,2,3), (4,5,6))) == [2, 5]",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n",
        "test": "assert tuple_modulo((10, 20, 30), (5, 8, 12)) == (0, 4, 6)",
        "num_ids": 1795,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif steps == 0:\n        return float('inf')\n    else:\n        return (d // steps) + (1 if d % steps != 0 else 0)\n",
        "test": "assert min_Jumps(1, 1) == 1 # move one step to reach (1, 1)",
        "num_ids": 1972,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            result.append(float('inf'))\n        except IndexError:\n            result.append(float('nan'))\n    return result\n",
        "test": "assert div_list([1,2,3],[4,5,6]) == [0.25,0.4,0.5]",
        "num_ids": 1897,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    char_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            char_str += char\n    return char_str + num_str\n",
        "test": "assert move_num(\"a1b2c3\") == \"abc123\"",
        "num_ids": 1559,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    max_size = 0\n    \n    for i in range(1, 2**n):\n        subset = []\n        for j in range(n):\n            if i & (1 << j):\n                subset.append(a[j])\n        \n        is_valid = True\n        for x in subset:\n            for y in subset:\n                if x != y and x % y != 0 and y % x != 0:\n                    is_valid = False\n                    break\n            if not is_valid:\n                break\n        \n        if is_valid and len(subset) > max_size:\n            max_size = len(subset)\n    \n    return max_size\n",
        "test": "assert largest_subset([1]) == 1 # test list with one element",
        "num_ids": 2400,
        "indeed": true
    },
    {
        "number": 622,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize two pointers for both the arrays\n    i, j = 0, 0\n    # Initialize a variable to store the median\n    median = 0\n    # Loop through the length of the arrays\n    for _ in range(n // 2 + 1):\n        # If the current element of the first array is smaller than the current element of the second array\n        if arr1[i] < arr2[j]:\n            # Update the median and increment the first pointer\n            median = arr1[i]\n            i += 1\n        else:\n            # Update the median and increment the second pointer\n            median = arr2[j]\n            j += 1\n    # If the length of the arrays is odd, the median is the last element of the arrays\n    if n % 2 == 1:\n        median = max(arr1[i], arr2[j])\n    return median\n",
        "test": "assert get_median([1,2,3], [4,5,6], 3) == 4",
        "num_ids": 3133,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([2, 3, 4], 2) == [4, 9, 16] # Test for n=2",
        "num_ids": 1282,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"hello world\") == \"HELLO WORLD\"",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements.\")\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 1513,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculating the height of the triangle using Pythagorean theorem\n    height = math.sqrt(r**2 - (r/2)**2)\n\n    # Calculating the base of the triangle using the length of the chord\n    base = 2*r\n\n    # Calculating the area of the triangle using the formula 0.5 * base * height\n    area = 0.5 * base * height\n\n    return area",
        "test": "assert triangle_area(1) == 0.5 * (1 ** 2) * (3 ** 0.5)",
        "num_ids": 1534,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    for i in range(start, end):\n        if i+1 != array[i]:\n            return i+1\n        \n    return end+1\n",
        "test": "assert find_First_Missing([1]) == 2",
        "num_ids": 1853,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")",
        "test": "assert replace_spaces(\"Hello World\") == \"Hello%20World\"",
        "num_ids": 885,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n",
        "test": "assert Split([1, 2, 3, 4]) == [2, 4]  # even numbers should be returned",
        "num_ids": 1243,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return [coord for coord in adj if coord not in sub]",
        "test": "assert adjac((1,2)) == [(0,2), (2,2), (1,1), (1,3)] # check for coordinate (1,2)",
        "num_ids": 1971,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for i in text:\n        if i == \" \":\n            new_text += \"_\"\n        elif i == \"_\":\n            new_text += \" \"\n        else:\n            new_text += i\n    return new_text\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 951,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    non_zero_list = []\n    zero_list = []\n    for num in num_list:\n        if num != 0:\n            non_zero_list.append(num)\n        else:\n            zero_list.append(num)\n    return non_zero_list + zero_list\n",
        "test": "assert move_zero([1, 0, 2, 0, 3, 0, 4]) == [1, 2, 3, 4, 0, 0, 0]",
        "num_ids": 2135,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "test": "assert pair_xor_Sum([1, 2, 3], 3) == 6",
        "num_ids": 1966,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n",
        "test": "assert heap_sort([]) == []",
        "num_ids": 1455,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check if the given sale amount has no profit and no loss.\n    \"\"\"\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True # when actual_cost == sale_amount",
        "num_ids": 1123,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer.\n    '''\n    wc_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wc_index)\n",
        "test": "assert wind_chill(10, 10) == 9",
        "num_ids": 1973,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def sample_nam(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['jane', 'Tom', 'Lucy']) == 7",
        "num_ids": 1402,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n",
        "test": "assert remove_parenthesis(\"hello (world)\") == \"hello \" ",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_nonagonal(n):\n    '''\n    This function finds the nth nonagonal number.\n    '''\n    nonagonal = (n * (n + 1)) // 2\n    return nonagonal\n",
        "test": "assert is_nonagonal(0) == 0",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = text.split()\n    # Loop through each word\n    for word in words:\n        # Check if the word contains 'z'\n        if 'z' in word[1:-1]:\n            return True\n    # If none of the words contain 'z' in the middle, return False\n    return False\n",
        "test": "assert text_match_wordz_middle('The quick brown fox jumps over the lazy dog.') # True",
        "num_ids": 1565,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        return \"Invalid position\"\n    else:\n        left = 0\n        right = k-1\n        while left < right:\n            input[left], input[right] = input[right], input[left]\n            left += 1\n            right -= 1\n        return input\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 2198,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert add_dict_to_tuple((1,2,3), {'a': 10, 'b': 20}) == (1,2,3,{'a': 10, 'b': 20})",
        "num_ids": 1780,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    rows = len(cost)\n    cols = len(cost[0])\n\n    # Initialize dp array to store the maximum average at each cell\n    dp = [[0 for j in range(cols)] for i in range(rows)]\n\n    # Fill the last column of dp array\n    for i in range(rows):\n        dp[i][cols-1] = cost[i][cols-1]\n\n    # Fill the last row of dp array\n    for j in range(cols):\n        dp[rows-1][j] = cost[rows-1][j]\n\n    # Fill the remaining dp array in bottom-up manner\n    for i in range(rows-2, -1, -1):\n        for j in range(cols-2, -1, -1):\n            dp[i][j] = (dp[i][j+1] + dp[i+1][j]) / 2\n\n    return dp[0][0]\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) != 5.1  # the path 1 -> 2 -> 5 -> 8 -> 9 has the highest average cost",
        "num_ids": 3834,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float\n    (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for student, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n",
        "test": "assert filter_data({'Alice': (1.65, 55), 'Bob': (1.75, 65), 'Charlie': (1.55, 45)}, 1.6, 50) == {'Alice': (1.65, 55), 'Bob': (1.75, 65)}",
        "num_ids": 2931,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 1641,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = base ** power\n    digits = [int(d) for d in str(result)]\n    return sum(digits)\n",
        "test": "assert power_base_sum(2, 1) == 2",
        "num_ids": 1459,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n",
        "test": "assert extract_quotation('The quick brown \"fox\" jumps over the \"lazy dog\"') == ['fox', 'lazy dog']",
        "num_ids": 1120,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((2, 3, 4, 5)) == (6, 12, 20)",
        "num_ids": 1838,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1571,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([1, 2, 2, 3, 4, 4, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1523,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = (math.pi * r * slant_height)\n\n    # Return the lateral surface area of the cone\n    return lateral_surface_area\n",
        "test": "assert lateralsurface_cone(10, 20) == math.pi * 10 * math.sqrt(10**2 + 20**2)",
        "num_ids": 1672,
        "indeed": true
    },
    {
        "number": 732,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s\\.,]+')\n    return re.sub(pattern, ':', text)\n",
        "test": "assert replace_specialchar(\"a,b,c\") == \"a:b:c\"",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 2393,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    mod = 10**9 + 7\n    total_sum = 0\n    \n    # Calculate total sum of all elements\n    for i in range(n):\n        total_sum += arr[i]\n        total_sum %= mod\n    \n    # Calculate sum of products of all subarrays\n    for i in range(1, n+1):\n        res = 1\n        left_sum = 0\n        right_sum = total_sum - left_sum - right_sum\n        for j in range(i):\n            res *= arr[j]\n            res %= mod\n        for k in range(i, n):\n            left_sum += arr[k-i+1]\n            right_sum -= arr[k]\n            res *= left_sum\n            res += right_sum\n            res %= mod\n        total_sum += res\n        total_sum %= mod\n    \n    return total_sum\n",
        "test": "assert sum_Of_Subarray_Prod([-1, -2, -3, -4]) == 68",
        "num_ids": 2297,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit.\n    '''\n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length()-1))\n    \n    # Get the middle bits of the number\n    middle_bits = n & (n << 1)\n    \n    # Toggle the middle bits\n    toggled_bits = middle_bits ^ (middle_bits << 1)\n    \n    # Combine the toggled middle bits with the first and last bits\n    result = first_bit | toggled_bits | last_bit\n    \n    return result\n",
        "test": "assert set_middle_bits(0b100000) == 0b100000",
        "num_ids": 2149,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert left_insertion([1, 3, 5, 7], 6) == 3 ",
        "num_ids": 1401,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('aHello') == True",
        "num_ids": 1218,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1/2\n    else:\n        return 1/2 + 1/2 * geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1/2",
        "num_ids": 1231,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop until n digits are obtained\n    while True:\n        count += 1\n        \n        # Calculate the triangular number for current count\n        triangular_number = count * (count + 1) // 2\n        \n        # Calculate the number of digits in triangular number\n        num_digits = math.floor(math.log10(triangular_number)) + 1\n        \n        # If number of digits is equal to n, return the count\n        if num_digits == n:\n            return count\n",
        "test": "assert find_Index(1) == 1",
        "num_ids": 2143,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    new_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        new_dict[test_tup[i]] = test_tup[i+1]\n    return new_dict\n",
        "test": "assert tuple_to_dict(()) == {} # empty tuple",
        "num_ids": 1780,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all characters in the string are the same, otherwise False.\n    '''\n    return len(set(s)) == 1\n",
        "test": "assert all_Characters_Same('aaa') == True",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side**2)\n    return area\n",
        "test": "assert area_tetrahedron(4) == 20*math.sqrt(2)",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n # To handle cases when m is greater than n\n    list = list[-m:] + list[:-m] # Slicing and concatenating the list to rotate\n    return list\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4] # rotate by 1 element",
        "num_ids": 2151,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
        "test": "assert check_none((1,)) == False  # check tuple with one value",
        "num_ids": 935,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(100, 200) == [120, 150]",
        "num_ids": 2056,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        sector_area = (r**2 * (a*math.pi/180))/2\n        return sector_area\n",
        "test": "assert sector_area(10, 180) == math.pi * 10 * 10 * (180/360) # check the case when angle is exactly 180",
        "num_ids": 1775,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    L = [[[0 for _ in range(o+1)] for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    return L[m][n][o]\n",
        "test": "assert lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"BEDFHC\") == \"BDH\" ",
        "num_ids": 4411,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 16,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)\n",
        "test": "assert capital_words_spaces(\"helloWorld\") == \"hello World\"",
        "num_ids": 1149,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=int)\n",
        "test": "assert sort_numeric_strings([\"1\", \"5\", \"10\", \"50\", \"3\"]) == [\"1\", \"3\", \"5\", \"10\", \"50\"]",
        "num_ids": 1633,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 18,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += list(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, 4, 5]",
        "num_ids": 1178,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n\n    if i >= n:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] < arr[i]:\n        return False\n\n    if right < n and arr[right] < arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5], 0) == True ",
        "num_ids": 2482,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 2146,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list in ascending order based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Return the first K elements of the sorted list\n    return test_list[:K]",
        "test": "assert min_k([('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50), ('F', 60), ('G', 70), ('H', 80), ('I', 90), ('J', 100)], 3) == [('A', 10), ('B', 20), ('C', 30)] ",
        "num_ids": 2573,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1,2,3],[1,2,3],[1,2,3]) == [1,2,3]",
        "num_ids": 2121,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    first_min = second_min = float('inf')\n    for num in numbers:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif first_min < num < second_min:\n            second_min = num\n            \n    return second_min if second_min != float('inf') else None\n",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 1615,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_match_zero_one('ab') == 'ab' # match since there is one 'b' after 'a'",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    n = len(test_list)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 1674,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        count_dict[tuple(sublist)] = count_dict.get(tuple(sublist), 0) + 1\n    return count_dict\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1973,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    if len(num.split('.')) != 2:\n        return False\n    if len(num.split('.')[1]) != 2:\n        return False\n    return True\n",
        "test": "assert is_decimal('0.50') == True",
        "num_ids": 1277,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1, 1, 1, 1, 1]) == True",
        "num_ids": 1045,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 1507,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n\n    for i in range(2, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1",
        "num_ids": 1924,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def number_ctr(string):\n    '''\n    This function counts the number of digits in a given string.\n    '''\n    count = 0\n    for i in string:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr('') == 0",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import math\n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. \n    '''\n    # Check if the number is less than 10\n    if n < 10:\n        return n\n    else:\n        # Initialize the number of digits in the number\n        num_digits = int(math.log10(n)) + 1\n\n        # Find the sum of the digits of the number\n        digit_sum = 0\n        for i in range(num_digits):\n            digit_sum += (n % 10)\n            n //= 10\n\n        # Return the nth polite number\n        return (digit_sum * (n - 1)) + n\n",
        "test": "assert is_polite(2) == 2",
        "num_ids": 2102,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1]) == []",
        "num_ids": 1214,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 3, 4, 2, 5, 6], 5) == 2  # (1, 4) and (2, 3)",
        "num_ids": 1820,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def Diff(li1,li2):\n    return list(set(li1) - set(li2))\n",
        "test": "assert Diff([1,2,3,4],[2,3,4,5]) == [1]  # case 1",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum",
        "test": "assert odd_num_sum(1) == 1  # for n = 1, the sum should be 1^4 = 1",
        "num_ids": 1262,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n",
        "test": "assert check_expression(\"(a+b)*(c+d))\") == False # missing opening parentheses",
        "num_ids": 2874,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for word in words:\n        if len(word) == K:\n            words.remove(word)\n    return ' '.join(words)\n",
        "test": "assert remove_length(\"\", 2) == \"\"  # Test for empty string",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = []\n    for match in re.finditer(pattern, text):\n        matches.append((match.group(), match.start()))\n    if not matches:\n        return None\n    return matches\n",
        "test": "assert occurance_substring(\"Hello World\", \"hey\") == None # should return None",
        "num_ids": 1536,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([2, 4, 6, 8]) == False",
        "num_ids": 1397,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n        if i < len(test_str) - 1 and test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0  # no vowels are surrounded by consonants",
        "num_ids": 1895,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set from the given list to remove duplicates\n    unique_set = set(arr)\n    # initialize sum to 0\n    total_sum = 0\n    # loop through the unique set and add each element to the total sum\n    for element in unique_set:\n        total_sum += element\n    # return the total sum of non-repeated elements\n    return total_sum\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1605,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "test": "assert pack_consecutive_duplicates([1,1,1,2,3,4,4,4,4,5,5]) == [[1, 1, 1], [2], [3], [4, 4, 4, 4], [5, 5]]",
        "num_ids": 1655,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        if tuple(sublist) in counts:\n            counts[tuple(sublist)] += 1\n        else:\n            counts[tuple(sublist)] = 1\n    return counts\n",
        "test": "assert unique_sublists([]) == {}  # check empty list",
        "num_ids": 2700,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize an empty list to store the combinations\n    result = []\n    # Get all possible combinations of tuples in the list\n    comb = combinations(test_list, 2)\n    # Iterate over the combinations\n    for c in comb:\n        # Calculate the sum of the tuples in the current combination\n        s = sum(c)\n        # Append the sum to the result list\n        result.append(s)\n    return result\n",
        "test": "assert find_combinations([]) == []",
        "num_ids": 2700,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 17,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert count_divisors(12) == 6",
        "num_ids": 1413,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    total_sum = 0\n    \n    for i in range(n):\n        for j in range(i, n, 2):\n            sub_arr = arr[i:j+1]\n            total_sum += sum(sub_arr)\n            \n    return total_sum\n",
        "test": "assert odd_length_sum([]) == 0 # empty array",
        "num_ids": 1912,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to float\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # Find maximum and minimum of r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # If maximum and minimum are equal, then it is a gray color\n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        # Calculate hue\n        if max_val == r:\n            h = (g - b) / (max_val - min_val)\n        elif max_val == g:\n            h = 2 + (b - r) / (max_val - min_val)\n        else:\n            h = 4 + (r - g) / (max_val - min_val)\n\n        # Convert hue to degrees\n        h *= 60\n        if h < 0:\n            h += 360\n\n        # Calculate saturation\n        s = (max_val - min_val) / max_val\n\n    # Calculate value\n    v = max_val\n\n    # Return h, s, v values\n    return h, s, v\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 4078,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_found = False\n    odd_found = False\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if not even_found:\n                even_found = True\n                even_num = num\n        else:\n            if not odd_found:\n                odd_found = True\n                odd_num = num\n        \n        if even_found and odd_found:\n            return even_num * odd_num\n        \n    return None\n",
        "test": "assert mul_even_odd([1,3,5,7]) == None ",
        "num_ids": 1869,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # using eval() to convert string to tuple\n    tup = eval(test_str)\n    # using map() to convert each element of the tuple to integer\n    new_tup = tuple(map(int, tup))\n    return new_tup\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 1349,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\n",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 4) == 2",
        "num_ids": 1146,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert not text_match_three(\"ab\") # test case 2",
        "num_ids": 1091,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a new tuple by concatenating the list and string\n    new_tuple = tuple(test_list + [test_str])\n    \n    return new_tuple\n",
        "test": "assert new_tuple([1, 2, 3], 'hello') == (1, 2, 3, 'hello')",
        "num_ids": 1395,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 3, 4, 6, 5]) == False",
        "num_ids": 1236,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i) != tuple:\n            new_tup.append(i)\n    return tuple(new_tup)\n",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 1637,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert count_list([1, 2, 3]) == 0",
        "num_ids": 1167,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    result = -1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            start = mid + 1\n            \n        elif arr[mid] < x:\n            start = mid + 1\n            \n        else:\n            end = mid - 1\n            \n    return result\n",
        "test": "assert last([1, 2, 3, 4, 5], 5) == 4",
        "num_ids": 2062,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb('ab') == True",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "test": "assert return_sum({}) == 0  # empty dictionary should return 0",
        "num_ids": 1064,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum\n",
        "test": "assert sum_odd(1) == 1  # sum of first 1 odd number",
        "num_ids": 1528,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all elements in the array.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert n to binary and store it in a string\n    binary_n = bin(n)[2:].zfill(32)\n    \n    # rotate the bits to the left by d bits\n    rotated_bits = binary_n[d:] + binary_n[:d]\n    \n    # convert the rotated bits back to an integer\n    return int(rotated_bits, 2)\n",
        "test": "assert left_rotate(12, 2) == 48",
        "num_ids": 2173,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"  Python is awesome!  \") == \"Pythonisawesome!\"",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    else:\n        count = 0\n    return count\n",
        "test": "assert test_three_equal(1,1,1) == 3 # all three numbers are equal",
        "num_ids": 1358,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count_rotation(arr):    \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    start = 0\n    end = n - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < n - 1 and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        elif arr[0] > arr[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    \n    return 0\n",
        "test": "assert count_rotation([1, 2, 3, 4]) == 0",
        "num_ids": 1816,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # using binary search to find the square root of the number\n    left, right = 0, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n",
        "test": "assert is_perfect_square(10) == False",
        "num_ids": 1305,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([2, 3, 4]) == True",
        "num_ids": 1086,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]",
        "num_ids": 1917,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    # Loop over characters in string\n    for char in test_str:\n        # If character is uppercase, increment current run\n        if char.isupper():\n            current_run += 1\n        # If character is not uppercase, reset current run\n        else:\n            current_run = 0\n        # If current run is greater than max run, update max run\n        if current_run > max_run:\n            max_run = current_run\n    # Return the maximum run of uppercase characters\n    return max_run\n",
        "test": "assert max_run_uppercase(\"Hello world\") == 1",
        "num_ids": 1779,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([2, 4, 6, 8, 10]) == None  # No odd number in the list",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False",
        "test": "assert check_K(('cat', 'dog', 'fish', 'turtle', 'lion'), 'k') == False",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((1, 2, 3), (0, 1, 2)) == True  # True",
        "num_ids": 1580,
        "indeed": true
    }
]