[
    {
        "number": 2,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two tuples.\n    '''\n    # Convert the tuples to sets and find their intersection\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return shared_elements\n",
        "test": "assert similar_elements((1, 2, 3), (2, 3, 4)) == {2, 3}",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes a number n as input and returns True if n is not a prime number, else returns False.\n    '''\n    if n < 2:\n        return True\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False\n",
        "test": "assert is_not_prime(1) == True",
        "num_ids": 416,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    min_heap = []\n    for num in nums:\n        hq.heappush(min_heap, num)\n        if len(min_heap) > n:\n            hq.heappop(min_heap)\n    result = []\n    while min_heap:\n        result.append(hq.heappop(min_heap))\n    return result[::-1]\n",
        "test": "assert heap_queue_largest([1, 1, 1, 1, 1, 1, 1, 1, 1], 1) == [1] # Test case 4",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether a given number is a power of two or not.\n    '''\n    if x<=0:\n        return False\n    else:\n        return (x & (x-1)) == 0\n",
        "test": "assert is_Power_Of_Two(0) == False ",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog.\") == ['quick', 'brown', 'jumps', 'over', 'lazy']",
        "num_ids": 558,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "test": "assert square_nums([2, 4, 5, 6]) == [4, 16, 25, 36]",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Rotations(str):  \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n\n",
        "test": "assert find_Rotations(\"hello\") == 0  # no rotation needed",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first = s.index(ch)\n        last = s.rindex(ch)\n        if first == last:\n            s = s.replace(ch, '', 1)\n        else:\n            s = s[:first] + s[first+1:last] + s[last+1:]\n    return s\n",
        "test": "assert remove_Occ(\"python\",\"y\") == \"pthon\"",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = []\n    for row in M:\n        row_sum = sum(row)\n        row_sums.append(row_sum)\n    sorted_indices = sorted(range(len(row_sums)), key=lambda k: row_sums[k])\n    sorted_matrix = []\n    for i in sorted_indices:\n        sorted_matrix.append(M[i])\n    return sorted_matrix\n",
        "test": "assert sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]] # example case 2",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n",
        "test": "assert find_Volume(2, 3, 4) == 12",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a boolean array to mark the characters present in the second string\n    present = [False] * NO_OF_CHARS\n    for char in string:\n        present[ord(char)] = True\n    \n    # Create a list of characters from the first string which are not present in the second string\n    result = []\n    for char in string:\n        if not present[ord(char)]:\n            result.append(char)\n    \n    return result",
        "test": "assert str_to_list(\"programming\") == ['p', 'r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g'] # Test case 4",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_nums = set()\n    \n    # Loop through the array\n    for num in arraynums:\n        # If the number is already in the set, return True\n        if num in unique_nums:\n            return True\n        # Otherwise, add the number to the set\n        else:\n            unique_nums.add(num)\n    \n    # If the loop completes without finding any duplicates, return False\n    return False\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 646,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Check if the given number is Woodall or not.\n    \"\"\"\n    if x < 0:\n        return False\n    y = x * 2\n    while y > x:\n        if y % 3 == 2:\n            return True\n        y = y // 3\n    return False",
        "test": "assert is_woodall(30) == False",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to string and reverse it\n    rev_num = str(num)[::-1]\n    # convert the reversed number back to integer and multiply by 2\n    twice_rev_num = int(rev_num) * 2\n    # check if the original number is one less than twice its reverse\n    if num == twice_rev_num - 1:\n        return True\n    else:\n        return False",
        "test": "assert rev(13) == False # 31 is not one less than twice its reverse, 1*2=2",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
        "test": "assert find_Max_Num([1, 2, 3, 4, 5]) == 54321",
        "num_ids": 640,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(5, -10) == True  # Positive and negative numbers have opposite signs",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2",
        "test": "assert is_octagonal(1) == 1 ",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            if sum(int(c) for c in sub) == len(sub):\n                count += 1\n    return count\n",
        "test": "assert count_Substrings(\"123\") == 1 # contains \"1\", \"12\", \"2\", \"3\"",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number.\n    '''\n    return min(xs)\n",
        "test": "assert smallest_num([5, 3, 8, 1, 2]) == 1",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([5, 10, 2, 3, 4, 50, 60]) == 58 # maximum difference is between 50 and 60",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n",
        "test": "assert subject_marks([(\"Maths\", 90), (\"Science\", 80), (\"Social\", 85)]) == [('Science', 80), ('Social', 85), ('Maths', 90)]",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # If the first element is a list, flatten it recursively\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    \n    # If the first element is not a list, add it to the sum and recurse on the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6 # basic case",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bell_number(n):\n    bell = [[0] * (n+1) for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]",
        "test": "assert bell_number(0) == 1 # Base case, there is one way to partition an empty set",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # check if the array is monotonic increasing\n    is_increasing = True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            is_increasing = False\n            break\n\n    # check if the array is monotonic decreasing\n    is_decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            is_decreasing = False\n            break\n\n    # return True if the array is monotonic, else return False\n    return is_increasing or is_decreasing\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True # increasing",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1,2,3,4,5], [1,2,3]) == True",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i]) != length:\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1, 2), (3, 4), (5, 6)]) == True",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            sorted = True\n            gap = 1\n        \n        i = 0\n        j = gap\n        while j < n:\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j += 1\n            \n    return nums\n",
        "test": "assert comb_sort([4, 2, 1, 5, 3]) == [1, 2, 3, 4, 5]",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        j = n - i*i\n        if j < 0:\n            continue\n        if (int(j**0.5))**2 == j:\n            return True\n    return False\n",
        "test": "assert dif_Square(3) == False",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_patterns = {}\n    for i, color in enumerate(colors):\n        if color not in color_patterns:\n            color_patterns[color] = patterns[i]\n        elif color_patterns[color] != patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns(['red', 'blue', 'red'], ['a', 'b', 'b']) == False",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(item%K == 0 for item in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(2, 4, 6, 8), (1, 2, 3, 4), (3, 6, 9, 12), (1, 3, 5, 7)], 3) == [(3, 6, 9, 12)]",
        "num_ids": 847,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(11) == True",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return 'The length of the word is even.'\n    else:\n        return 'The length of the word is odd.'\n",
        "test": "assert word_len(\"programming\") == False # length is even",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n",
        "test": "assert volume_sphere(2) == 33.510321638291124",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initializing sum of ASCII values to 0\n    sum_ascii = 0\n    \n    # Looping through each character of the string\n    for char in strr:\n        # Adding the ASCII value of the current character to the sum\n        sum_ascii += ord(char)\n        \n    # Finding the resultant character by taking the sum modulo 26 and then converting it to a character\n    result = chr(sum_ascii % 26)\n    \n    return result\n",
        "test": "assert get_Char(\"12345\") == \"x\"",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n            sequence.append(next_num)\n        return sequence[n - 1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n",
        "test": "assert surfacearea_sphere(1) == 4*math.pi  # surface area of unit sphere should be 4*pi",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n",
        "test": "assert merge_dictionaries_three({'a': 1}, {'b': 2}, {'c': 3}) == {'a': 1, 'b': 2, 'c': 3} ",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 2, 4, 1, 5, 2]) == {1: 2, 2: 3, 3: 1, 4: 1, 5: 1}",
        "num_ids": 674,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize the closest number as None\n    closest_num = None\n    # Loop through all numbers from N-1 to 1\n    for i in range(N-1, 0, -1):\n        # If i is a perfect square, return it as the closest smaller number\n        if (int(i**0.5))**2 == i:\n            return i\n        # Otherwise, update the closest number to i if it's closer to N than the current closest number\n        elif closest_num is None or abs(N-i) < abs(N-closest_num):\n            closest_num = i\n    # Return the closest number found\n    return closest_num\n",
        "test": "assert closest_num(1) is None",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the substring is present in the word\n        if sub_str in word:\n            return True\n\n    # If the substring is not found in any word, return False\n    return False\n",
        "test": "assert find_substring(\"hello world\", \"goodbye\") == False  # should return False as \"goodbye\" is not a substring in \"hello world\"",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_undulating(n):\n    '''\n    Check if the given number is undulating.\n    '''\n    if n < 0:\n        return False\n    n = str(n)\n    if len(n) == 1 or len(n) == 2:\n        return True\n    for i in range(1, len(n)-1):\n        if n[i] != n[i-1] and n[i] != n[i+1]:\n            return False\n    return True\n",
        "test": "assert is_undulating(123357) == False",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert power(2, 3) == 8",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(1, 3), (2, 2), (3, 1)]) == 3",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3], [4,5], [6,7,8,9]]) == 2",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def divisor(n):\n    \"\"\"\n    This function returns the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(8) == 4 # should return 4 because 8 has 4 divisors (1, 2, 4, 8)",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Initialize an empty dictionary to store frequency of each element\n    frequency_dict = {}\n\n    # Loop through each element in the flattened list\n    for item in flattened_list:\n        # If the element is already present in the dictionary, increment its count by 1\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        # If the element is not present in the dictionary, add it and set its count to 1\n        else:\n            frequency_dict[item] = 1\n\n    # Return the dictionary of element frequencies\n    return frequency_dict\n",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 1103,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "test": "assert multiply_num([0, 3, 4]) == 0.0",
        "num_ids": 506,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 506,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert integer to string for easier manipulation\n    num_str = str(num)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, add 1 to the number and repeat the process until a new palindrome is found\n        new_num = int(num_str) + 1\n        while str(new_num) != str(new_num)[::-1]:\n            new_num += 1\n        return new_num\n    \n    # Find the center of the number (or the middle two digits if the length is even)\n    center = len(num_str) // 2\n    \n    # Split the number into two halves\n    first_half = num_str[:center]\n    second_half = num_str[center:]\n    \n    # Check if the two halves are the same\n    if first_half == second_half:\n        # If they are, increment the last digit of the first half and repeat the process until a new palindrome is found\n        new_first_half = str(int(first_half) + 1)\n        if len(new_first_half) > center:\n            # If the incremented first half is longer than the original first half, add a new digit to the beginning\n            new_first_half = '1' + new_first_half\n        new_second_half = new_first_half\n    else:\n        # If the two halves are different, find the largest palindrome that is less than the original number\n        largest_palindrome = str(int(first_half) - 1)\n        if len(largest_palindrome) > center:\n            largest_palindrome = '1' + largest_palindrome\n        new_first_half = largest_palindrome\n        new_second_half = new_first_half[::-1]\n    \n    # Combine the two halves to form the new palindrome\n    new_num_str = new_first_half + new_second_half\n    \n    return int(new_num_str)\n",
        "test": "assert next_smallest_palindrome(999) == 1001",
        "num_ids": 1184,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]\n",
        "test": "assert kth_element([1,2,3,4,5], 1) == 1",
        "num_ids": 542,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join([w.title() for w in words[1:]])\n",
        "test": "assert snake_to_camel(\"\") == \"\"",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    elif n == 0 or m > n:\n        return 0\n    else:\n        return (m * eulerian_num(n-1, m-1)) + (n * eulerian_num(n-1, m))",
        "test": "assert eulerian_num(0, 0) == 1",
        "num_ids": 502,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        result.append(sorted_sublist)\n    return result\n",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"carrot\"], [\"grape\", \"kiwi\", \"mango\"], [\"orange\", \"peach\", \"strawberry\"]]) == [[\"apple\", \"banana\", \"carrot\"], [\"grape\", \"kiwi\", \"mango\"], [\"orange\", \"peach\", \"strawberry\"]]",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True]) == 2",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3) # Test case 1",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n    \n    # Add each element from all three lists to the heap\n    for num in num1 + num2 + num3:\n        heapq.heappush(heap, num)\n        \n    # Pop the smallest element from the heap and add it to the merged_list until the heap is empty\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n        \n    return merged_list\n",
        "test": "assert merge_sorted_list([1,3,5], [2,4,6], [0,7,8]) == [0,1,2,3,4,5,6,7,8]",
        "num_ids": 1552,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        binary = int(s, 2)\n        binary = binary << i\n        binary = str(binary)\n        if binary[0] == '1':\n            count += 1\n    return count\n",
        "test": "assert odd_Equivalent('1010', 5) == 2",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Finds the common elements in a nested list of lists.\n    \n    Args:\n        nestedlist: a list of lists, where each inner list may contain duplicates\n    \n    Returns:\n        a list of the elements that are common to all inner lists\n    \"\"\"\n    # Get the set of elements in the first inner list\n    common = set(nestedlist[0])\n    # Iterate through the rest of the inner lists and find the intersection with the common set\n    for lst in nestedlist[1:]:\n        common.intersection_update(lst)\n    # Return the list of common elements\n    return list(common)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n",
        "test": "assert empty_dit([]) == True",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1,2,3)) == 123",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, sublist in enumerate(test_list):\n        for j, elem in enumerate(sublist):\n            try:\n                test_list[i][j] = float(elem)\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([[1, 2, 3], [4, '5.0', '6.5']]) == [[1, 2, 3], [4, 5.0, 6.5]]",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"Hello world\") == [\"Hello\", \"world\"]",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def search(arr):\n    for i in range(0, len(arr), 2):\n        if i == len(arr) - 1 or arr[i] != arr[i + 1]:\n            return arr[i]\n    return None\n",
        "test": "assert search([1,1,2,2,3,3,4,5,5,6,6]) == 4",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(0,0), (1,1), (2,2), (3,3), (4,4)]) == 0",
        "num_ids": 844,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_of_divisors(num):\n        '''\n        Returns the sum of all divisors of a number except the number itself.\n        '''\n        divisor_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisor_sum += i\n        return divisor_sum\n    \n    amicable_sum = 0\n    for i in range(1, limit+1):\n        # find the sum of divisors of i\n        divisor_sum_1 = sum_of_divisors(i)\n        # find the sum of divisors of divisor_sum_1\n        divisor_sum_2 = sum_of_divisors(divisor_sum_1)\n        # check if i and divisor_sum_2 are amicable pairs\n        if i == divisor_sum_2 and i != divisor_sum_1:\n            amicable_sum += i\n    \n    return amicable_sum\n",
        "test": "assert amicable_numbers_sum(300) == 504",
        "num_ids": 935,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    angle = cmath.phase(z)\n    return angle\n",
        "test": "assert angle_complex(1, 0) == 0.0",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_length(string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    for char in string:\n        if char == '0':\n            count_0 += 1\n        elif char == '1':\n            count_1 += 1\n            \n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n",
        "test": "assert find_length(\"00001111\") == 4  # only one sub-string \"00001111\" with maximum difference between 0s and 1s",
        "num_ids": 855,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def gcd(a,b):\n    while b:\n        a,b = b,a%b\n    return a\n\ndef sum_of_common_divisors(a,b):\n    common_divisors_sum = 0\n    for i in range(1, gcd(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum\n\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\n\nprint(\"Sum of common divisors of\", a, \"and\", b, \"is:\", sum_of_common_divisors(a,b))\n",
        "test": "assert sum(28, 30) == 14",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def long_words(n, words):\n    '''\n    Returns a list of words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(5, [\"apple\", \"banana\", \"cherry\", \"dates\", \"elm\", \"fig\", \"grapefruit\"]) == [\"banana\", \"cherry\", \"grapefruit\"]",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the size of the matrix\n    n = len(my_matrix)\n    # Calculate the sum of the first row\n    expected_sum = sum(my_matrix[0])\n    # Check if all rows have the same sum\n    for i in range(1, n):\n        if sum(my_matrix[i]) != expected_sum:\n            return False\n    # Check if all columns have the same sum\n    for j in range(n):\n        column_sum = 0\n        for i in range(n):\n            column_sum += my_matrix[i][j]\n        if column_sum != expected_sum:\n            return False\n    # Check if all diagonals have the same sum\n    diagonal_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diagonal_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diagonal_sum1 != expected_sum or diagonal_sum2 != expected_sum:\n        return False\n    # All checks passed, the matrix is a magic square\n    return True\n",
        "test": "assert magic_square_test([[2,7,6], [9,5,1], [4,3,8]]) == True",
        "num_ids": 1395,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)  # initialize a dictionary to count occurrences of each item\n    for item in nums:\n        counts[item] += 1  # increment the count for this item\n    max_count = max(counts.values())  # find the maximum count\n    max_items = [key for key, value in counts.items() if value == max_count]\n    return max_items[0] if len(max_items) == 1 else max_items\n",
        "test": "assert max_occurrences([1,2,2,3,3,3,4,4,4,4]) == 4",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str1_list = list(str1)\n    vowels_in_str1 = [char for char in str1_list if char in vowels]\n    \n    # Reverse the vowels in the list\n    vowels_in_str1.reverse()\n    \n    # Replace the vowels in the original string with the reversed vowels\n    i = 0\n    for j in range(len(str1_list)):\n        if str1_list[j] in vowels:\n            str1_list[j] = vowels_in_str1[i]\n            i += 1\n    \n    return ''.join(str1_list)\n",
        "test": "assert reverse_vowels(\"hello\") == \"holle\"",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for i in tup1:\n        s += str(i)\n    return s\n",
        "test": "assert tup_string(('a', 'b', 'c')) == 'abc'",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for num in nums:\n        if num < 0:\n            result += num\n    return result\n",
        "test": "assert sum_negativenum([1, -2, 3, -4, 5]) == -6",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    This function finds the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 0  # avoid division by zero\n    else:\n        return zero_count / non_zero_count\n",
        "test": "assert zero_count([1, 2, 3]) == 0.0 ",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n can be represented as sum of non-zero powers of 2,\n    otherwise returns False.\n    \"\"\"\n    # Convert the integer into binary form\n    binary = bin(n)[2:]\n    \n    # Check if all the binary digits are either 0 or 1\n    for digit in binary:\n        if digit not in ['0', '1']:\n            return False\n    \n    # Check if there are any consecutive 1's in the binary form\n    for i in range(len(binary)-1):\n        if binary[i] == '1' and binary[i+1] == '1':\n            return False\n    \n    # If all the above conditions are satisfied, then return True\n    return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(0) == True",
        "num_ids": 639,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        if type(i) == list:\n            flattened_list += extract_singly(i)\n        else:\n            flattened_list.append(i)\n    return set(flattened_list)\n",
        "test": "assert extract_singly([[1, 2, 3], [4, 5], [6, 7, 8]]) == {1, 2, 3, 4, 5, 6, 7, 8}",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sorts a list of numbers using the pancake sorting algorithm.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # Find the index of the maximum number in the list\n        max_index = nums.index(max(nums[:n]))\n        # Reverse the list from 0 to max_index + 1\n        nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n        # Reverse the list from 0 to n\n        nums = nums[:n][::-1] + nums[n:]\n        n -= 1\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 934,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3 # all lists are the same",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "test": "assert find_lists((1, 2, 3)) == 0  # no lists in the tuple",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    elif b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    else:\n        gcd, s, t = extended_gcd(a, b)\n        if n % gcd == 0:\n            x = n // gcd * s % b\n            y = n // gcd * t % a\n            return (x, y)\n        else:\n            return None\n\ndef extended_gcd(a, b):\n    '''\n    Compute the extended Euclidean algorithm to find gcd(a, b) and the Bezout coefficients s and t.\n    '''\n    if b == 0:\n        return (a, 1, 0)\n    else:\n        d, s, t = extended_gcd(b, a % b)\n        return (d, t, s - (a // b) * t)\n",
        "test": "assert find_solution(2, 3, 5) == (1, 1)",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Creating a new list to store elements that are not present in list2\n    new_list = []\n    # Iterating through list1\n    for element in list1:\n        # Checking if the element is present in list2\n        if element not in list2:\n            # Adding the element to the new_list\n            new_list.append(element)\n    # Returning the new_list\n    return new_list\n",
        "test": "assert remove_elements([1, 2, 3, 4], [3, 4]) == [1, 2]",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n",
        "test": "assert sum_series(4) == 4 + 2 + 0 # n + (n-2) + (n-4)",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (l**2) * (s/4) / tan(pi/s)\n",
        "test": "assert area_polygon(15, 8) == 236.0370187480042 # octagon",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function checks if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n//2 + 1):\n        if n % i == 0:\n            sum1 += i\n            if i != n//i:\n                sum2 += n//i\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(25) == 36 # test case 4",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i + ord('a')):\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26 # all letters occur at their same position in the English alphabet",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([0,2,4,6]) == 6 ",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    \n    p = 1\n    while p < n:\n        p *= 2\n    \n    return p\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,2,4,2,5], 2) == 3",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('Input must be a list')\n    if not isinstance(m, int) or not isinstance(n, int):\n        raise TypeError('Indices must be integers')\n    if m < 0 or n < 0 or m >= len(list1) or n >= len(list1):\n        raise IndexError('Indices out of range')\n    if m > n:\n        m, n = n, m  # swap indices if necessary\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 711,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = 5\n    return sides * a\n",
        "test": "assert perimeter_pentagon(1) == 5.0",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"\") == 0",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n",
        "test": "assert check_type((1, 2, 3)) == True ",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Check if the element occurs more than n/2 times\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n    if count > n//2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1,2,3,4,5,6], 6, 3) == False # not a majority element",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(12) == 2 # 1100",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_values_string(string):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Find the bits set in the given range\n    bits_set = bin(n)[l:r+1]\n    \n    # Check if all bits are set to 1 in the given range\n    if bits_set.count('1') == len(bits_set):\n        return True\n    else:\n        return False\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b11111111, 0, 7) == False",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # separating the negative and positive elements in the array\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    # combining the negative and positive elements back in the original array\n    for i in range(len(neg)):\n        arr[i] = neg[i]\n    for i in range(len(pos)):\n        arr[i+len(neg)] = pos[i]\n    return arr\n",
        "test": "assert re_arrange_array([-1, -2, 3, -4, 5, -6], 2) == [-1, -2, 3, -4, 5, -6] # the first 2 elements are not negative, so the array remains unchanged",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank(\"Hello World\", \"*\") == \"Hello*World\" # Test with no spaces in string",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, -i)\n    return [-heapq.heappop(heap) for i in range(n)]\n",
        "test": "assert larg_nnum([3, 2, 5, 1, 4, 7], 0) == []",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159\n    lateral_surface_area = 2 * pi * r * h\n    return lateral_surface_area\n",
        "test": "assert lateralsuface_cylinder(0,5) == 0  # testcase4: radius=0, height=5",
        "num_ids": 626,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(2) == 8",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # Right shift the number by 1 bit and add the result to the original number\n    # This will set all even bits of the original number to 1\n    return n | (n >> 1)\n",
        "test": "assert even_bit_set_number(0) == 0, \"even_bit_set_number(0) should return 0\"",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2)]) == {(1, 2): 2, (3, 4): 1}",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings('abc') == 6",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_total_number_of_sequences(m,n):\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    dp[0][2] = 1\n    for i in range(1,n+1):\n        for j in range(2,m+1):\n            for k in range(2,j):\n                dp[i][j] += dp[i-1][k]\n    return sum(dp[n])\n",
        "test": "assert get_total_number_of_sequences(6,3) == 4 # there are four sequences of length 3: 2,3,5; 2,3,6; 2,4,6; 2,4,7",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Replace the last element of list1 with the elements of list2.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)\n",
        "test": "assert replace_list([1, 2, 3], []) == [1, 2] # test case 4",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello\") == 5",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return (int(root) + 1) ** 2\n    else:\n        return (int(root) + 2) ** 2\n",
        "test": "assert next_Perfect_Square(36) == 49",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Calculate the prefix sums\n    prefix_sums = [0] * (n + 1)\n    for i in range(n):\n        prefix_sums[i + 1] = prefix_sums[i] + arr[i]\n\n    # Find the maximum bitonic subsequence sum using dynamic programming\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] >= arr[j]:\n                dp[i] = max(dp[i], dp[j] + prefix_sums[i + 1] - prefix_sums[j + 1])\n\n    return max(dp)\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15  # maximum bitonic subsequence is 1, 2, 3, 4, 5 ",
        "num_ids": 1570,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"Please enter a non-negative number.\"\n    else:\n        guess = number/2\n        while True:\n            new_guess = (guess + number/guess)/2\n            if abs(new_guess - guess) < 0.00001:\n                return new_guess\n            guess = new_guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a table to store lengths of longest palindromic subsequence of substring\n    # L[i][j] stores the length of longest palindromic subsequence in substring str[i..j]\n    L = [[0 for x in range(n)] for y in range(n)]\n\n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n\n    # Check for substrings of length 2\n    for i in range(n - 1):\n        if str[i] == str[i + 1]:\n            L[i][i + 1] = 2\n        else:\n            L[i][i + 1] = 1\n\n    # Check for substrings of length greater than 2\n    for k in range(3, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n\n    # Return the length of the longest palindromic subsequence\n    return L[0][n - 1]",
        "test": "assert lps(\"cbbd\") == 2 # since the longest palindromic subsequence for \"cbbd\" is \"bb\"",
        "num_ids": 1359,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n",
        "test": "assert harmonic_sum(0) == 0",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Using set intersection to find the common elements in both arrays\n    intersection = set(array_nums1) & set(array_nums2)\n    return list(intersection)\n",
        "test": "assert intersection_array([1,2,3],[2,3,4]) == [2,3]",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count\n",
        "test": "assert count_X(('a', 'b', 'c', 'd'), 'a') == 1 # should return 1",
        "num_ids": 562,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes a list and an element as input and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result\n",
        "test": "assert insert_element(['a', 'b', 'c'], 'd') == ['d', 'a', 'd', 'b', 'd', 'c']",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates",
        "test": "assert convert((-3-4j)) == (5, 4.32810650343263) # Example test case with complex number -3-4j ",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([]) == 0 # empty list",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors(['R', 'G', 'B'], 2) == [('R', 'R'), ('R', 'G'), ('R', 'B'), ('G', 'G'), ('G', 'B'), ('B', 'B')]",
        "num_ids": 860,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return len(primes)\n",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "test": "assert swap_numbers(3, 5) == (5, 3)",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = 0\n    max_tup = None\n    for tup in [test_tup1, test_tup2]:\n        if sum(tup) > max_val:\n            max_val = sum(tup)\n            max_tup = tup\n    return max_tup\n",
        "test": "assert maximize_elements((1, 2, 3), (1, 1, 1)) == (1, 2, 3)",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_prime(n):\n    \"\"\"Return True if n is prime, else False.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_shanks_williams_condition(p):\n    \"\"\"Return True if p satisfies the Newman-Shanks-Williams condition.\"\"\"\n    return p % 4 == 3\n\ndef newman_prime(n):\n    \"\"\"Return the nth Newman-Shanks-Williams prime number.\"\"\"\n    count = 0\n    i = 2\n    while True:\n        if is_prime(i) and newman_shanks_williams_condition(i):\n            count += 1\n            if count == n:\n                return i\n        i += 1\n",
        "test": "assert newman_prime(1) == 3",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n",
        "test": "assert division_elements((10, 20, 30), (2, 5, 10)) == (5.0, 4.0, 3.0)",
        "num_ids": 847,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_two_parts(list1, L):\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog years.\n    \"\"\"\n    d_age = h_age * 7\n    return d_age\n",
        "test": "assert dog_age(10) == 75 # 1 human year = 75 dog years for very senior dogs",
        "num_ids": 360,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    \"\"\"\n    if step <= 0:\n        raise ValueError(\"step must be a positive integer\")\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6],[7,8,9]]",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert lateralsurface_cube(0) == 0",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    i = 1\n    while count < n:\n        if i % 2 != 0:\n            sum += i**2\n            count += 1\n        i += 1\n    return sum\n",
        "test": "assert square_Sum(1) == 1  # First odd number squared = 1",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n+1):\n            result = i * (result + 1)\n        return result\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([2, 3, 4, 5, 6, 7, 8, 9]) == 20 # even numbers at even positions",
        "num_ids": 767,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0 # first 0 even natural numbers",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 641,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3) # test case 1",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for k in range(0, n//2+1):\n        coeff = math.comb(n, k)\n        if coeff % 2 == 0:\n            sum += coeff\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(2) == 2 # checking for n = 2",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = pi * r * r * h\n    return volume\n",
        "test": "assert volume_cylinder(0,5) == 0            # radius cannot be zero",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({'a': 1, 'b': 5, 'c': 3, 'd': 6}, 4) == {'b': 5, 'd': 6}",
        "num_ids": 763,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i in test_tup:\n        if i not in count_dict:\n            count_dict[i] = test_tup.index(i)\n    return count_dict\n",
        "test": "assert count_first_elements((5, 4, 3, 2, 1)) == {5: 0, 4: 1, 3: 2, 2: 3, 1: 4}",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        dec = 1\n        for i in range(3, n+1):\n            dec += i\n        return dec\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "test": "assert sequential_search([], 5) == (False, -1)",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks whether all the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the length of the two lists is equal or not.\n    if len(nums1) != len(nums2):\n        print(\"Error: Length of the lists are not equal.\")\n        return None\n    \n    # Initialize an empty list to store the element-wise difference.\n    diff_list = []\n    \n    # Loop through the lists and subtract the corresponding elements.\n    for i in range(len(nums1)):\n        diff_list.append(nums1[i] - nums2[i])\n    \n    # Return the difference list.\n    return diff_list\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    from collections import Counter\n\n    # Converting integer to string and then to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Counting frequency of each digit\n    freq = Counter(digits)\n\n    # Checking if frequency of each digit is less than or equal to the digit itself\n    for digit in digits:\n        if freq[digit] > digit:\n            return False\n\n    return True\n",
        "test": "assert validate(123456789) == True",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item != element:\n            return False\n    return True\n",
        "test": "assert check_element([2,2,2,2,2], 2) == True",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = r'a(bbb|bb)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('aabb') == True",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create the modified array by repeating the given array k times\n    repeated_arr = []\n    for i in range(k):\n        repeated_arr += a\n        \n    # Initialize max_sum and current_sum to the first element of the repeated array\n    max_sum = current_sum = repeated_arr[0]\n    \n    # Loop through the remaining elements of the repeated array\n    for i in range(1, len(repeated_arr)):\n        # Update the current_sum by adding the current element and subtracting the previous element\n        current_sum = max(repeated_arr[i], current_sum + repeated_arr[i])\n        # Update the max_sum if the current_sum is greater than the max_sum\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 3, 1) == 15",
        "num_ids": 1393,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i - 1)**2\n    return sum\n",
        "test": "assert square_Sum(2) == 10 # 2^2 + 4^2 = 10",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = None\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5, 6, 7], [8], [9, 10]]) == [4, 5, 6, 7]",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color\n    for the given fence with n posts and k colors.\n    \"\"\"\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k + k * (k - 1)\n    else:\n        # initialize a list to store the number of ways for each post\n        ways = [0] * n\n        # for the first post, there are k ways to paint it\n        ways[0] = k\n        # for the second post, there are (k-1) ways to paint it with the same color as the first post\n        # and k*(k-1) ways to paint it with a different color\n        ways[1] = k + (k - 1) * k\n        # for the rest of the posts, the number of ways is the sum of the ways to paint the previous two posts\n        # multiplied by the number of colors left (k-1), since we cannot use the same color as the previous post\n        for i in range(2, n):\n            ways[i] = (ways[i - 1] + ways[i - 2]) * (k - 1)\n        return ways[-1]\n",
        "test": "assert count_no_of_ways(3, 2) == 6",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 292,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers n and m as input and returns the quotient of the division rounded down to the nearest integer.\n    '''\n    return int(n // m)\n",
        "test": "assert find(10, 3) == 3",
        "num_ids": 302,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "test": "assert otherside_rightangle(3, 4) == 5",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([-2, -1, -5, -3]) == -1",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total\n",
        "test": "assert sum_div(12) == 28 # 1+2+3+4+6+12 = 28",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    \n    mid = len(arr) // 2\n    left, inv_left = merge_sort(arr[:mid])\n    right, inv_right = merge_sort(arr[mid:])\n    merged, inv_merge = merge(left, right)\n    \n    return merged, inv_left + inv_right + inv_merge\n    \n\ndef merge(left, right):\n    i = j = 0\n    merged = []\n    inv_count = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n            inv_count += len(left) - i\n            \n    merged += left[i:]\n    merged += right[j:]\n    \n    return merged, inv_count\n\n\ndef get_Inv_Count(arr):\n    sorted_arr, count = merge_sort(arr)\n    return count\n",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0",
        "num_ids": 954,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if isinstance(i, list):\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n",
        "test": "assert flatten_list([1, [2, 3], [[4, 5], [6]]]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for name, score in stdata:\n        d[name] += score\n    return max(d.values())\n",
        "test": "assert max_aggregate([(1,2),(2,3),(3,4)]) == 4 # max of the second elements",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    # Initialize a count variable to store the count of valid sequences\n    count = 0\n\n    # Loop through all possible binary sequences of length 2n\n    for i in range(2**(2*n)):\n        # Convert the integer i to a binary string of length 2n\n        binary_str = format(i, '0'+str(2*n)+'b')\n\n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if sum(int(binary_str[j]) for j in range(n)) == sum(int(binary_str[j]) for j in range(n, 2*n)):\n            count += 1\n\n    # Return the count of valid sequences\n    return count\n",
        "test": "assert count_binary_seq(0) == 1  # there is only one binary sequence of length 0",
        "num_ids": 1143,
        "indeed": true
    },
    {
        "number": 301,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Returns the maximum depth of a nested dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "test": "assert dict_depth({'a':1}) == 1 # Simple dictionary with one key should have depth 1",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the actual index after rotations\n    actual_index = (index + rotations) % len(arr)\n    # Find the element at the actual index\n    element = arr[actual_index]\n    return element\n",
        "test": "assert find_Element([1,2,3,4,5], (0,5), 2, 4) == 2 # Test case 2",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p')\n    p_words = []\n    for word in words:\n        if pattern.match(word):\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return None\n",
        "test": "assert start_withp(['orange', 'peach', 'pear', 'pecan']) == ('pear', 'pecan')",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize the dp array\n    dp = [0] * (n+1)\n    # Set the kth element as the maximum value in dp array\n    dp[k] = a[k-1]\n    # Loop through the array and update dp values\n    for i in range(k-1, index-1, -1):\n        if a[i-1] < a[k-1]:\n            dp[i] = max(dp[i+1], dp[k] + a[i-1])\n        else:\n            dp[i] = dp[i+1]\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including kth element\n    return dp[index]\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 0) == 6",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    return new_tuplex[m:n]",
        "test": "assert colon_tuplex((1, 2, 3), 0, 1) == (1,)",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([1, 2, 3, 4], [5, 6, 7, 8], 0) == [] # Example 3",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def maximum(a,b):\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(10,20) == 20",
        "num_ids": 283,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 409,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n):\n    return n | (n + 1)\n",
        "test": "assert set_left_most_unset_bit(0b0) == 0b1 # check for the case where all bits are unset",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3) * math.pi * r**2 * h\n    return vol\n",
        "test": "assert volume_cone(3, 4) == math.pi * (3**2) * (4/3) # check with values 3 and 4",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n",
        "test": "assert add_string([1, 2, 3], \"The value is {}\") == [\"The value is 1\", \"The value is 2\", \"The value is 3\"]",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    dictionary = {}\n\n    # Loop through each element in the first list\n    for i in range(len(l1)):\n        # If the element is not already a key in the dictionary, add it\n        if l1[i] not in dictionary:\n            dictionary[l1[i]] = {}\n\n        # If the element is already a key in the dictionary, add the value to the nested dictionary\n        if l2[i] not in dictionary[l1[i]]:\n            dictionary[l1[i]][l2[i]] = {}\n\n        # Add the final value to the nested dictionary\n        dictionary[l1[i]][l2[i]] = l3[i]\n\n    return dictionary\n",
        "test": "assert convert_list_dictionary([1,2,3],[4,5,6],[7,8,9]) == {1: {4: 7}, 2: {5: 8}, 3: {6: 9}}",
        "num_ids": 1025,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    else:\n        max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n        return max_sum\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list of lists as input and returns the list with maximum length.\n    \"\"\"\n    max_len = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 897,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function checks whether the given tuple contains any duplicates or not.\n    \"\"\"\n    # Converting the tuple into a set removes any duplicates and returns a set object\n    # If the length of the set is same as the length of the tuple, it means there were no duplicates\n    # Otherwise, there were duplicates\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1,2,3)) == True # Test case 1",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    \n    return None\n",
        "test": "assert first_non_repeating_character(\"aabccddeeff\") == \"b\" # returns the first non-repeated character",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('abc') == False ",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Create a list of the three numbers\n    numbers = [a, b, c]\n    # Sort the list\n    numbers.sort()\n    # Find the median (middle number)\n    median = numbers[1]\n    # Return the median\n    return median",
        "test": "assert median_numbers(3, 2, 1) == 2",
        "num_ids": 590,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result\n",
        "test": "assert sum_of_digits([123,456,789]) == [6, 15, 24]",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Performs a bitwise XOR operation on the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
        "test": "assert bitwise_xor((1,0,1,0), (0,1,1,1)) == (1,1,0,1)  # Test case 1: (1,0,1,0) ^ (0,1,1,1) = (1,1,0,1)",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)\n",
        "test": "assert extract_freq([(1,2), (3,4), (1,2)]) == 2",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_tup1 = test_tup1[i]\n        inner_tup2 = test_tup2[i]\n        inner_result = []\n        for j in range(len(inner_tup1)):\n            inner_result.append(inner_tup1[j] + inner_tup2[j])\n        result.append(tuple(inner_result))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))",
        "num_ids": 1345,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def minimum(a,b):\n    '''\n    Find the minimum of two numbers\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5, 9) == 5",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False",
        "test": "assert check_tuplex((\"hello\", \"world\"), \"python\") == False",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n",
        "test": "assert find_Parity(5) == True",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Find the index of the first digit that is less than the previous digit\n    i = len(digits) - 1\n    while i > 0 and digits[i] >= digits[i-1]:\n        i -= 1\n    # If no such digit exists, the number is already the biggest possible number\n    if i == 0:\n        return None\n    # Find the index of the smallest digit that is greater than the digit at index i\n    j = i\n    while j < len(digits) and digits[j] > digits[i-1]:\n        j += 1\n    # Swap the digits at indices i-1 and j-1\n    digits[i-1], digits[j-1] = digits[j-1], digits[i-1]\n    # Reverse the digits after index i-1\n    digits[i:] = digits[len(digits)-1:i-1:-1]\n    # Convert the list of digits back to a number\n    next_bigger = int(''.join(str(d) for d in digits))\n    # Return the next bigger number, if it's actually bigger than the original number\n    return next_bigger if next_bigger > n else None\n",
        "test": "assert rearrange_bigger(12) == 21",
        "num_ids": 1346,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    nums1, nums2 = sorted(nums1), sorted(nums2)\n    result = []\n    heap = [(nums1[0] + nums2[0], 0, 0)]\n    seen = set()\n    seen.add((0, 0))\n    while heap and len(result) < k:\n        _, i, j = heapq.heappop(heap)\n        result.append((nums1[i], nums2[j]))\n        if i + 1 < len(nums1) and (i + 1, j) not in seen:\n            heapq.heappush(heap, (nums1[i + 1] + nums2[j], i + 1, j))\n            seen.add((i + 1, j))\n        if j + 1 < len(nums2) and (i, j + 1) not in seen:\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n            seen.add((i, j + 1))\n    return result\n",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)]",
        "num_ids": 1489,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0] * list1[j][1]\n            if prod < min_prod:\n                min_prod = prod\n    return min_prod\n",
        "test": "assert min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 6",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None:\n            min_val = val\n        elif val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert min_val([10, 20, 30, 40, 50]) == 10",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))",
        "test": "assert snake_to_camel('123_testing') == '123Testing'",
        "num_ids": 521,
        "indeed": true
    },
    {
        "number": 412,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]",
        "test": "assert remove_odd([]) == []",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if n is within the range of the list\n    if n <= len(list1):\n        # Extract the nth element from each tuple in the list\n        result = [tup[n-1] for tup in list1]\n        return result\n    else:\n        return \"Error: n is larger than the length of the list.\"\n",
        "test": "assert extract_nth_element([(1, \"apple\"), (2, \"banana\"), (3, \"cherry\")], 0) == 1",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in list1 exists in list2 or not.\n    If it exists, it returns True, otherwise False.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False # no overlap",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == (4, 5)",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 417,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = set()\n    for i in Input:\n        if i[0] in common_element:\n            return i[0]\n        else:\n            common_element.add(i[0])\n    return None\n",
        "test": "assert group_tuples([(1,2),(1,3),(1,4)]) == 1",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max(['hello']) == 'hello'",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    return result\n",
        "test": "assert round_and_sum([0, 0, 0]) == 0.0",
        "num_ids": 710,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def cube_Sum(n):  \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        sum += num ** 3\n        num += 2\n        count += 1\n    return sum\n",
        "test": "assert cube_Sum(2) == 2*2*2 + 4*4*4  # testing for n = 2",
        "num_ids": 809,
        "indeed": true
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for i in range(len(test_tup)):\n        concatenated_string += str(test_tup[i]) + delimiter\n    return concatenated_string.rstrip(delimiter)\n",
        "test": "assert concatenate_tuple(('hello', '')) == 'hello '",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/(n**2)\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return tuple(rear_elements)\n",
        "test": "assert extract_rear((\"hello\", \"world\", \"python\")) == (\"o\", \"d\", \"n\")  # Expected output: (\"o\", \"d\", \"n\")",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1,2,3],[4,5,6],[1,7,8]], 1) == 2 # count the number of sublists containing 1",
        "num_ids": 724,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 == 0]\n",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 427,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n        return dt[8:10] + '-' + dt[5:7] + '-' + dt[:4]\n    else:\n        return \"Invalid date format\"\n",
        "test": "assert change_date_format(\"2022-12-25\") == \"25-12-2022\"",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([]) == []",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] & test_tup2[i])\n    return tuple(res)\n",
        "test": "assert and_tuples((True, False, True), (True, True, False)) == (True, False, False)",
        "num_ids": 607,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    This function finds the directrix of a parabola.\n    '''\n    # finding the vertex\n    x_v = -b / (2 * a)\n    y_v = c - b**2 / (4 * a)\n    # finding the directrix\n    y_d = y_v - x_v\n    # returning the directrix equation\n    return 'y = {}x + {}'.format(y_d, y_v)\n",
        "test": "assert parabola_directrix(-4, 3, 0) == \"y= x/4 + 3/4\"",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Using set intersection method to check if there is any common element in both lists.\n    if set(list1).intersection(set(list2)):\n        return True\n    else:\n        return False\n",
        "test": "assert common_element([1, 2, 3], [2, 3, 4]) == True  # common element 2 and 3",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median * height\n",
        "test": "assert median_trapezium(7,8,9) == 8.2",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if elem >= number:\n            return False\n    return True\n",
        "test": "assert check_greater([1,2,3], 4) == True",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one('ab') # should match",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Returns the last digit of a given number.\n    \"\"\"\n    return n % 10\n",
        "test": "assert last_Digit(123) == 3",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n",
        "test": "assert neg_nos([1, 2, 3, -4, -5, 6, 7, -8, 9]) == [-4, -5, -8]  # Test case 1",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"hello\") == \"hlo\"",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] == test_list[j][::-1]) and (test_list[j] == test_list[i][::-1]):\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (2, 3), (3, 4), (4, 5)]) == 0",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize an empty string to store the integers as a string\n    str_num = ''\n    # Iterate through the list and concatenate each integer as a string\n    for num in L:\n        str_num += str(num)\n    # Convert the string to an integer and return it\n    return int(str_num)\n",
        "test": "assert multiple_to_single([1, 2, 3]) == 123",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(?:extremely|very|really|absolutely|highly)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None\n",
        "test": "assert find_adverb_position(\"We danced gracefully on the beach.\") == 2",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return 0\n    \n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n            \n    return positive_count / len(nums)\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0 # all positive numbers",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_neg(list1):\n    '''\n    This function finds the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest\n",
        "test": "assert largest_neg([]) == None",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[K:]) for t in test_list]\n",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6)], 2) == [(3,), (6,)]",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Convert the tuples to lists to make them mutable\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # Check if the length of the tuples is equal\n    if len(list1) != len(list2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    # Perform index-wise multiplication and return the result as a tuple\n    result = [list1[i] * list2[i] for i in range(len(list1))]\n    return tuple(result)\n",
        "test": "assert index_multiplication((2, 4, 6), (1, 2, 3)) == (2, 8, 18)",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for elem in lst:\n        result[elem] = count[elem]\n    return result",
        "test": "assert count_Occurrence((1,2,3,2,1,4,3,5,6,2,1), [5,6,7]) == Counter({5: 1, 6: 1, 7: 0})",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def perrin(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    else:\n        return perrin(n-1) + perrin(n-2)\n\ndef cal_sum(n):\n    return sum(perrin(i) for i in range(n+1))",
        "test": "assert cal_sum(1) == 3 ",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in str_list:\n        if len(s) == size:\n            extracted_strings.append(s)\n    return extracted_strings\n",
        "test": "assert extract_string(['hello', 'world', 'python'], 0) == []",
        "num_ids": 519,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"Hello world\") == \"Helloworld\"",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 70) == 30 # Should return 30 as loss amount",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n",
        "test": "assert sumofFactors(10) == 12 ",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert text_match_wordz('The quick brown fox jumps over the lazy dog.') == False",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True # January has 31 days",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list([]) == []",
        "num_ids": 546,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    This function finds the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_lst = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_lst = sublist\n    return min_lst\n",
        "test": "assert Find_Min([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == [8, 9]",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(2,3) == 6 # Test case 1",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n",
        "test": "assert remove_uppercase(\"HELLO\") == \"\"",
        "num_ids": 406,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublst[0] for sublst in lst]\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr('Hello, World!') == 2",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import itertools\n\ndef combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(lst) + 1):\n        for combo in itertools.combinations(lst, i):\n            result.append(combo)\n    return result\n",
        "test": "assert combinations_list([]) == []",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6 # [2, 3]",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return values.count(n) == len(values)\n",
        "test": "assert check_value({'a': 1, 'b': 1, 'c': 1}, 1) == True",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Create a new dictionary to store non-empty items\n    new_dict = {}\n    \n    # Iterate over the items in the given dictionary\n    for key, value in dict1.items():\n        \n        # Check if the value is not empty\n        if value:\n            \n            # Add the non-empty item to the new dictionary\n            new_dict[key] = value\n    \n    return new_dict\n",
        "test": "assert drop_empty({'a': '', 'b': 2, 'c': []}) == {'b': 2}",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n\n    n = len(arr)\n    max_product = 1\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(n):\n        if arr[i] > 0:\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        elif arr[i] == 0:\n            max_ending_here = 1\n            min_ending_here = 1\n        else:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product\n",
        "test": "assert max_product([1,2,3,4,-5]) == 24 # product of 1,2,3,4",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1, 2, 3, 4, 5)) == (3, 5, 7, 9)",
        "num_ids": 718,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1,2,3,4], 1) == 0",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4]) == True",
        "num_ids": 494,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = tuple(set1.intersection(set2))\n    return intersection\n",
        "test": "assert tuple_intersection((1, 2, 3), (2, 3, 4)) == (2, 3)",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char(\"hello\", \"l\", \"z\") == \"hezzo\" # replace 'l' with 'z'",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict\n",
        "test": "assert sort_counter(Counter({'a': 3, 'b': 1, 'c': 2})) == {'b': 1, 'c': 2, 'a': 3}",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the given array in ascending order\n    sorted_nums = sorted(nums)\n    \n    # Find the sum of the smallest and largest values in the sorted array\n    sum_big_small = sorted_nums[0] + sorted_nums[-1]\n    \n    return sum_big_small\n",
        "test": "assert big_sum([1,2,3,4,5]) == 6 # returns sum of 1+5",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower('Hello World') == 'hello world'",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n",
        "test": "assert remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\" # check for string without lowercase",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(123) == 1",
        "num_ids": 327,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5] # check if the function returns only odd integers",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n",
        "test": "assert difference(0) == 0 # sum of cubes of 0 natural numbers is 0, sum of 0 natural numbers is 0, difference should be 0",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if (A[i]^A[j]) & 1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([2,4,6,8],4) == 0",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string\n",
        "test": "assert toggle_string(\"Hello, World!\") == \"hELLO, wORLD!\"",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = str(n1)\n    num2 = str(n2)\n    distance_sum = 0\n\n    # Ensure that the numbers have the same number of digits\n    while len(num1) < len(num2):\n        num1 = '0' + num1\n    while len(num2) < len(num1):\n        num2 = '0' + num2\n\n    # Calculate the per-digit difference and sum them up\n    for i in range(len(num1)):\n        distance_sum += abs(int(num1[i]) - int(num2[i]))\n\n    return distance_sum",
        "test": "assert digit_distance_nums(100, 100) == 0 # difference between digits: 100 - 100 = 0, sum of absolute values: 0 ",
        "num_ids": 1122,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 45",
        "num_ids": 864,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = set(test_tup1) | set(test_tup2)\n    return sorted(union)\n",
        "test": "assert union_elements((1, 2, 3), (3, 4, 5)) == [1, 2, 3, 4, 5]",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4 # check for a list of lists",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use regular expression to find all matches of the pattern\n    matches = re.findall(r'\"(.*?)\"', text)\n    # Return the list of matches\n    return matches\n",
        "test": "assert extract_values('') == []",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_Pairs(arr,n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3], 3) == 3",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split(word):\n    '''\n    This function splits a given string into individual characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1,2,3,4]) == True",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 268,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n",
        "test": "assert sort_sublists([[\"banana\", \"apple\", \"carrot\"], [\"dog\", \"cat\", \"bird\"]]) == [[\"apple\", \"banana\", \"carrot\"], [\"bird\", \"cat\", \"dog\"]] ",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given list of numbers.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] # no duplicates",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1,2,3,4]) == 24 # product of unique numbers 1, 2, 3, 4 is 24",
        "num_ids": 847,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = (2 * 3.14 * r * (r + h))\n    # Return the surface area\n    return surface_area",
        "test": "assert surfacearea_cylinder(0, 1) == 0",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # convert lists to strings\n    str_A = ''.join(map(str, A))\n    str_B = ''.join(map(str, B))\n\n    # check if str_B is a substring of str_A\n    if str_B in str_A:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sub_Array([1,2,3],[4,5]) == False ",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function returns the last digit in the factorial of a given number.\n    '''\n    # Initialize the result variable to 1\n    result = 1\n    \n    # Iterate through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Multiply the result by the current number\n        result *= i\n        \n        # If the result is divisible by 10, divide it by 10\n        while result % 10 == 0:\n            result //= 10\n            \n    # Return the last digit of the result\n    return result % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1 # factorial of 0 is 1",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9] # Test case 1",
        "num_ids": 768,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Convert the tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the elements that are present in either set but not in both\n    dissimilar = set1.symmetric_difference(set2)\n\n    # Return the result as a tuple\n    return tuple(dissimilar)\n",
        "test": "assert find_dissimilar(('apple', 'banana', 'cherry'), ('orange', 'banana', 'apple')) == ('cherry', 'orange')",
        "num_ids": 873,
        "indeed": true
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple):\n        raise ValueError(\"Input must be a tuple\")\n    result = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            result.append(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            result.append(element)\n    return tuple(result)\n",
        "test": "assert even_ele(('hello', 1, 2, (3, 'apple', 4, 'orange', 5, 6), 'world', 7), lambda x: x % 2 == 0) == (2, 6) # Test case 4",
        "num_ids": 698,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def surface_Area(base, height):\n    '''\n    Calculates the surface area of a square pyramid.\n\n    Parameters:\n    base (float): The length of one edge of the base square.\n    height (float): The height of the pyramid.\n\n    Returns:\n    float: The surface area of the pyramid.\n    '''\n\n    # Calculate the area of the base square\n    base_area = base ** 2\n\n    # Calculate the lateral surface area of each side\n    lateral_area = base * height\n\n    # Calculate the total surface area\n    surface_area = base_area + 4 * lateral_area\n\n    return surface_area\n",
        "test": "assert surface_Area(1,1) == 5",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Check if a dictionary is empty.\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True # Test empty dictionary",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-i-1)\n        return result\n",
        "test": "assert catalan_number(0) == 1 # test for n = 0",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    adverb = re.search(pattern, text)\n    if adverb:\n        return adverb.group(), adverb.span()\n    else:\n        return \"No adverb ending with 'ly' found.\"\n\ntext = \"The quick brown fox jumped over the lazy dog.\"\nresult = find_adverbs(text)\nprint(result)\n",
        "test": "assert find_adverbs(\"The dog chased the cat eagerly.\") == ('eagerly', [16, 23])",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    return sorted(min_heap, reverse=True)\n",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        root = int(i**0.5)\n        if root*root == i:\n            squares.append(i)\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    rect_coords = cmath.rect(x, y)\n    return rect_coords\n",
        "test": "assert polar_rect(1, 180) == (-1, 0) ",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4]) == [4, 2, 3, 1]",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k+1, n+1):\n        result *= i\n    return result\n\nn = 5\nk = 3\nprint(binomial_Coeff(n, k))\n",
        "test": "assert binomial_Coeff(0,0) == 1 # binomial coefficient of (0,0) is 1",
        "num_ids": 642,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    parts = ip.split('.')\n    return '.'.join([str(int(part)) for part in parts])",
        "test": "assert removezero_ip('001.02.03.0004') == '1.2.3.4'",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n            \n    for num in list1:\n        if num % 2 != 0:\n            odd_num = num\n            break\n            \n    if even_num is not None and odd_num is not None:\n        return even_num - odd_num\n    else:\n        return None\n",
        "test": "assert diff_even_odd([2, 4, 6, 8, 1, 3]) == 1",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    count = 0\n    i = 0\n    while i < n:\n        if str1[i] != str2[i]:\n            j = i + 1\n            while j < n:\n                if str1[j] == str2[i]:\n                    str1 = str1[:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]\n                    str2 = str2[:i] + str2[j] + str2[i+1:j] + str2[i] + str2[j+1:]\n                    count += 1\n                    break\n                j += 1\n        i += 1\n    return count\n",
        "test": "assert min_Swaps(\"1100\",\"1010\") == 2 # Testcase 1: 1100, 1010",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size",
        "test": "assert tuple_size((1,)) == sys.getsizeof(1)",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if not arr1:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    idx1 = min(k//2, len(arr1)) - 1\n    idx2 = k - idx1 - 2\n    if arr1[idx1] < arr2[idx2]:\n        return find_kth(arr1[idx1+1:], arr2, k-idx1-1)\n    else:\n        return find_kth(arr1, arr2[idx2+1:], k-idx2-1)\n",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 5) == 5",
        "num_ids": 877,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # initialize sum to 0\n    sum = 0\n    # find the number of digits\n    n = len(str(number))\n    # iterate through each digit and add cube to sum\n    for digit in str(number):\n        sum += int(digit) ** n\n    # check if sum equals the number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return (sum, average)\n",
        "test": "assert sum_average(3) == (6, 2) # for n=3, sum=6 and average=2",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even, otherwise it returns False.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True",
        "num_ids": 314,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the frequency of each character\n    freq_dict = {}\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return it as the first repeated character\n        if char in freq_dict:\n            return char\n        # Otherwise, add the character to the dictionary with a frequency of 1\n        else:\n            freq_dict[char] = 1\n    # If no character is repeated, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        if all(i % j != 0 for j in range(2, i)):\n            ludics.append(i)\n            for j in range(i, n+1, i):\n                ludics.remove(j) if j in ludics else None\n    return ludics\n",
        "test": "assert get_ludic(1) == []",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()   # split the string into words\n    words.reverse()    # reverse the list of words\n    return ' '.join(words)  # join the words into a string with spaces between them\n",
        "test": "assert reverse_words(\"\") == \"\"",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True  # True, 2 is a prime number",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian\n",
        "test": "assert radian_degree(0) == 0.0",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"Hello World\", r\"ello\") == (\"ello\", 1, 5)",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n",
        "test": "assert bell_Number(0) == 1 # bell number for n=0 should be 1 ",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 610,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k > len(list1):\n        return list1\n    else:\n        return list1[:k-1] + list1[k:]\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]  # removing the second element",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            max_val = max(max_val, row[N])\n    return max_val\n",
        "test": "assert max_of_nth([[5, 3, 8], [1, 6, 2], [7, 8, 4]], 2) == 8 # check the 3rd column",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1,2], [3,4], [5,6]]) == [[1, 3, 5], [2, 4, 6]] # test case 1",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum\n",
        "test": "assert cummulative_sum([1, 2, 3]) == 6",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        averages.append(avg)\n    return averages\n",
        "test": "assert average_tuple(((1,2,3), (4,5,6), (7,8,9))) == [2.0, 5.0, 8.0]",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError('Tuples must have the same length')\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n",
        "test": "assert tuple_modulo((2, 4, 6), (3, 3, 3)) == (2, 1, 0) # test case 1",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d:\n        return \"Not Possible\"\n    if d == 0:\n        return 0\n    if steps == d:\n        return 1\n    jumps = [0] * (steps+1)\n    for i in range(1, steps+1):\n        jumps[i] = float('inf')\n        for j in range(1, d+1):\n            if i-j >= 0:\n                jump = jumps[i-j] + 1\n                if jump < jumps[i]:\n                    jumps[i] = jump\n    return jumps[steps]\n",
        "test": "assert min_Jumps(3, 0) == 0 # should return 0 since we are at the destination",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1, 2, 3], [2, 2, 2]) == [0.5, 1, 1.5]",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    char_str = ''\n    for i in test_str:\n        if i.isdigit():\n            num_str += i\n        else:\n            char_str += i\n    return char_str + num_str\n",
        "test": "assert move_num(\"a1b2c3\") == \"abc123\"",
        "num_ids": 746,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    max_size = 0\n    subsets = [[] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                subsets[i].append(a[j])\n                subsets[j].append(a[i])\n    \n    for subset in subsets:\n        if len(subset) > max_size:\n            max_size = len(subset)\n    \n    return max_size\n",
        "test": "assert largest_subset([1,2,3]) == 2 # [2,4]",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    i = j = k = 0\n    median = []\n\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median.append(arr1[i])\n            i += 1\n        else:\n            median.append(arr2[j])\n            j += 1\n        k += 1\n\n        if i == n:\n            median += arr2[j:n]\n            break\n\n        if j == n:\n            median += arr1[i:n]\n            break\n\n    if n % 2 == 0:\n        return (median[n//2 - 1] + median[n//2]) / 2\n    else:\n        return median[n//2]\n",
        "test": "assert get_median([1,2,3,4,5], [6,7,8,9,10], 5) == 5.5",
        "num_ids": 1039,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1, 2, 3], 2) == [1, 4, 9] # test case 1",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"Hello\") == \"HELLO\" # check for a string with all lowercase letters",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the length of the chord that passes through the center of the semicircle\n    chord = 2 * r * math.sin(math.pi/2)\n    # Calculate the height of the triangle using the Pythagorean theorem\n    height = r - math.sqrt(r**2 - (chord/2)**2)\n    # Calculate the area of the triangle using Heron's formula\n    area = 0.5 * chord * height\n    return area",
        "test": "assert triangle_area(2) == 4.0",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    missing = None\n    for i in range(start, end):\n        if array[i] != i + 1:\n            missing = i + 1\n            break\n    \n    return missing\n",
        "test": "assert find_First_Missing([1, 2, 3, 4, 6]) == 5  # smallest missing number is 5",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"Hello World\") == \"Hello%20World\"",
        "num_ids": 354,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def Split(list):\n    even_list = []\n    odd_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n    return even_list, odd_list\n",
        "test": "assert Split([1, 3, 5, 7, 9, 0]) == [0] # check if 0 is also included if it is the only even number",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    return [e for e in adj if e not in sub]\n",
        "test": "assert adjac((2, 3)) == [(2, 4), (3, 3), (2, 2), (1, 3), (2, 1)]",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace all underscores with spaces\n    text = text.replace('_', ' ')\n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    return text\n",
        "test": "assert replace_spaces(\"\") == \"\"",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = num_list.count(0)\n    num_list[:] = [num for num in num_list if num != 0] + [0] * zero_count\n    return num_list\n",
        "test": "assert move_zero([]) == []",
        "num_ids": 805,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum",
        "test": "assert pair_xor_Sum([], 0) == 0",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert heap_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(10, 10) == True  # no profit and no loss ",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate wind chill index using the 13.12 equation\n    wci = 13.12 + 0.6215*t - 11.37*v**0.16 + 0.3965*t*v**0.16\n    # Round the result to the nearest integer\n    wci_rounded = round(wci)\n    # Return the rounded wind chill index\n    return wci_rounded\n",
        "test": "assert wind_chill(5, -20) == 19 #Test wind chill when velocity is 5 km/h and temperature is -20 degrees Celsius",
        "num_ids": 860,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam([\"John\", \"Eva\", \"tim\"]) == 7",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)",
        "test": "assert remove_parenthesis('hello (world)') == 'hello '",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n    \"\"\"\n    nonagonal = (n * (n + 1)) // 2\n    return nonagonal\n",
        "test": "assert is_nonagonal(1) == 1 ",
        "num_ids": 454,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # regular expression to match the pattern\n    pattern = r'\\b\\w*z\\w*\\b'\n    # search for the pattern in the text\n    matches = re.findall(pattern, text)\n    # if there are any matches, return True, else return False\n    return bool(matches)\n",
        "test": "assert text_match_wordz_middle(\"hazel\") == True",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_Array_Upto_K(input, k):  \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        return \"Invalid value of k\"\n    else:\n        i = 0\n        j = k - 1\n        while i < j:\n            input[i], input[j] = input[j], input[i]\n            i += 1\n            j -= 1\n        return input\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 10, 'b': 20}) == (1, 2, 3, {'a': 10, 'b': 20})",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[n-1][n-1] / (n**2)\n",
        "test": "assert maxAverageOfPath([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]) == 6.0 ",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            result[student] = data\n    return result\n",
        "test": "assert filter_data({'John': (1.85, 80), 'Sarah': (1.7, 55), 'Mike': (1.9, 95)}, 1.7, 60) == {'John': (1.85, 80), 'Mike': (1.9, 95)}",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,2,3,4,5],[1,2,3,4,5]) == 5",
        "num_ids": 689,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in str(base ** power):\n        result += int(i)\n    return result\n",
        "test": "assert power_base_sum(7, 3) == 13  # 7^3 = 343, sum of digits is 3 + 4 + 3 = 10",
        "num_ids": 768,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\"(.*?)\"', text1)\n",
        "test": "assert extract_quotation('The \"quick brown fox\" jumps over the lazy dog.') == ['quick brown fox']",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((1,2,3,4,5)) == (2,6,12,20) # test case 1",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        result.append(key)\n    return result\n",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(h**2 + r**2)\n    lateral_surface_area = (math.pi * r * slant_height)\n    return lateral_surface_area\n",
        "test": "assert lateralsurface_cone(0, 10) == 0",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 732,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,.\\s]+', ':', text)\n",
        "test": "assert replace_specialchar(\"Hello World\") == \"Hello:World\"",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize left and right pointers for binary search\n    left, right = 0, len(A) - 1\n    \n    # Perform binary search to find the first occurrence of x\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            # Check if this is the first occurrence\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # If x is not found in the array, return -1\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7, 8], 9) == -1 # should return -1",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    mod = 10**9 + 7\n    res = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            prod %= mod\n            res += prod\n            res %= mod\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([0, 1, 2]) == 5 # sublists are [0], [1], [2], [0, 1], [1, 2], [0, 1, 2], product of sublists are 0, 1, 2, 0, 2, 0, sum = 5",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def set_middle_bits(n):\n    '''\n    Toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first bit\n    first_bit = (n & 1) << 1\n    # Get the last bit\n    last_bit = (n & 1) << (n.bit_length() - 1)\n    # Get the middle bits\n    middle_bits = n >> 1\n    # Toggle the middle bits\n    middle_bits ^= (1 << (middle_bits.bit_length() - 1)) - 1\n    # Combine the bits and return the result\n    return first_bit | middle_bits | last_bit\n",
        "test": "assert set_middle_bits(25) == 27",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str(\"apple\") == True",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1/2\n    else:\n        return 1/n + geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1/2",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    t = 1\n    index = 1\n    while n > int(math.log10(t) + 1):\n        index += 1\n        t += index\n    return index\n",
        "test": "assert find_Index(1) == 1",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        if i + 1 < len(test_tup):\n            test_dict[test_tup[i]] = test_tup[i + 1]\n    return test_dict\n",
        "test": "assert tuple_to_dict(('apple', 'red', 'banana', 'yellow', 'orange', 'orange')) == {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 357,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3 ** 0.5) / 2 * (side ** 2)\n    return area\n",
        "test": "assert area_tetrahedron(0) == 0",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:-m]\n    return list\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    # checking if any element in the tuple is None\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_none((None, None)) == False  # tuple with multiple None values",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(10000, 20000) == 1288 # should return 1288 as it is the only number in the range that is divisible by every digit it contains",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        sector_area = (r**2) * (a/360) * math.pi\n        return sector_area\n",
        "test": "assert sector_area(2, 361) == None # check if function returns None if angle is larger than 360 degrees",
        "num_ids": 766,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common suffixes of substrings\n    L = [[[0] * (o+1) for j in range(n+1)] for i in range(m+1)]\n\n    # Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] and Z[0..k-1]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Following code is used to print LCS\n    index = L[m][n][o]\n\n    # Create a character array to store LCS string\n    lcs = [\"\"] * (index+1)\n    lcs[index] = \"\"\n\n    # Start from the right-most-bottom-most corner and one by one store characters in lcs[]\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n\n        # If current character in all strings is same, then current character is part of LCS\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs[index-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n\n        # If not same, then find the maximum of three values\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            if L[i-1][j][k] > L[i][j][k-1]:\n                i -= 1\n            else:\n                k -= 1\n        elif L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return \"\".join(lcs[1:])",
        "test": "assert lcs_of_three('ABC', 'DEF', 'GHI') == ''  # There is no common subsequence",
        "num_ids": 1931,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # pattern to match capital words\n    pattern = r'[A-Z][a-z]*'\n    # find all matches in the string\n    matches = re.findall(pattern, str1)\n    # join the matches with spaces\n    result = ' '.join(matches)\n    return result\n",
        "test": "assert capital_words_spaces(\"HelloWorld\") == \"Hello World\"",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)\n",
        "test": "assert sort_numeric_strings(['1', '2', '3']) == ['1', '2', '3']",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1,2,3], (4,5,6,7)) == [1,2,3,4,5,6,7] # Testing with a longer tuple",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Calling check_min_heap_helper() recursively for each node of the binary tree.\n    '''\n    for i in range(len(arr)):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n",
        "test": "assert check_min_heap_helper([2, 3, 1, 5, 4], 0) == False",
        "num_ids": 959,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + jacobsthal_num(n-2)",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 753,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ \n    - in this case a verbatim copy of test cases\n    '''\n    # Sorting the list of tuples based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Getting the first k elements from the sorted list\n    min_k_records = test_list[:K]\n\n    # Sorting the minimum k records based on the first element of the tuple\n    min_k_records.sort(key=lambda x: x[0])\n\n    return min_k_records",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)], 3) == [(1, 2), (3, 4), (5, 6)]",
        "num_ids": 1200,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [3, 2, 1], [4, 5, 6]) == []",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    first_min = second_min = float('inf')\n    for num in numbers:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif first_min < num < second_min:\n            second_min = num\n\n    return second_min if second_min != float('inf') else None\n",
        "test": "assert second_smallest([3, 8, 2, 1, 6]) == 2",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_match_zero_one(\"abab\") == False # 'a' is followed by 'b', but not one or more 'b's",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. \n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    count = 0\n    n = len(test_list)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict1 = {}\n    for sublist in list1:\n        tuple1 = tuple(sublist)\n        if tuple1 in dict1:\n            dict1[tuple1] += 1\n        else:\n            dict1[tuple1] = 1\n    return dict1\n",
        "test": "assert unique_sublists([[1, 2, 3], [4, 5, 6], [1, 2, 3], [7, 8, 9], [4, 5, 6]]) == {(1, 2, 3): 2, (4, 5, 6): 2, (7, 8, 9): 1} ",
        "num_ids": 1005,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)  # Try to convert the string to a float\n        if round(float(num), 2) == float(num):  # If the float has a precision of 2, return True\n            return True\n        else:\n            return False\n    except ValueError:\n        return False  # If the string can't be converted to a float, return False\n",
        "test": "assert is_decimal('123.45') == True",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1,2,3,4,5]) == False # list with multiple distinct elements",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\"\n",
        "test": "assert check_monthnumber_number(4) == True  # April has 30 days",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"\") == 0",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. \n    '''\n    def count_divisors(num):\n        '''\n        Helper function to count the number of divisors of a given number.\n        '''\n        count = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                count += 1\n        return count\n    \n    def is_polite_helper(num):\n        '''\n        Helper function to check if a given number is polite.\n        '''\n        divisors = count_divisors(num)\n        for i in range(2, divisors):\n            if num % i == 0:\n                return False\n        return True\n    \n    polite_count = 0\n    i = 1\n    while polite_count < n:\n        if is_polite_helper(i):\n            polite_count += 1\n            if polite_count == n:\n                return i\n        i += 1\n",
        "test": "assert is_polite(1) == 1 ",
        "num_ids": 949,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "test": "assert Diff([1,2,3],[2,3,4]) == [1] ",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_num_sum(n):\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the fourth power of each number to the sum variable\n        sum += i**4\n    # Return the sum\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 ",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n\n    stack = deque()\n\n    # Traverse the expression for matching parenthesis\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    # If stack is empty, expression is balanced, return True\n    if not stack:\n        return True\n    else:\n        return False\n",
        "test": "assert check_expression(\"a+b*c\") == True",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert remove_length(\"This is a test string\", 7) == \"This is a test string\"",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    matches = list(re.finditer(pattern, text))\n\n    if matches:\n        return [(match.group(), match.start()) for match in matches]\n    else:\n        return None\n",
        "test": "assert occurance_substring(\"Hello World\", \"abc\") == None",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 3, 4, 5, 7, 8, 9]) == False",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] in vowels:\n            count += 1\n        elif i < len(test_str)-1 and test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0 # no vowels are neighbors",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in it.\n    \"\"\"\n    # Create an empty dictionary to store the count of each element in the list\n    element_count = {}\n    for element in arr:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    \n    # Calculate the sum of non-repeated elements\n    non_repeated_sum = 0\n    for key, value in element_count.items():\n        if value == 1:\n            non_repeated_sum += key\n    \n    return non_repeated_sum\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "test": "assert pack_consecutive_duplicates([1, 1, 2, 3, 4, 4, 4, 5, 5]) == [[1, 1], [2], [3], [4, 4, 4], [5, 5]]",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # Check if the tuple is already in the dictionary\n        if sublist_tuple in counts:\n            # If it is, increment its count\n            counts[sublist_tuple] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            counts[sublist_tuple] = 1\n    return counts\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns a set of all possible combinations of sums with tuples.\n    \"\"\"\n    result = set()\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            result.add(sum(comb))\n    return result",
        "test": "assert find_combinations([]) == set() ",
        "num_ids": 1668,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n",
        "test": "assert count_divisors(45) == 8 # Test for a number with 8 divisors (1, 3, 5, 9, 15, 27, 45) ",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            for k in range(i, j + 1):\n                sum += arr[k]\n    return sum\n",
        "test": "assert odd_length_sum([1,2,3,4,5,6,7,8]) == 50",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    if cmax == 0:\n        saturation = 0\n    else:\n        saturation = round(delta/cmax * 100)\n    value = round(cmax * 100)\n    return hue, saturation, value\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) # black",
        "num_ids": 1567,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and even is None:\n            even = num\n        elif num % 2 != 0 and odd is None:\n            odd = num\n        \n        if even is not None and odd is not None:\n            break\n    \n    if even is not None and odd is not None:\n        return even * odd\n    elif even is not None:\n        return even\n    elif odd is not None:\n        return odd\n    else:\n        return None\n",
        "test": "assert mul_even_odd([1,3,5,7]) == 1 # product of first even and odd numbers, None and 1",
        "num_ids": 906,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # converting string to tuple using eval()\n    tup = eval(test_str)\n    # converting each element of tuple to integer using map()\n    tup = tuple(map(int, tup))\n    # returning the integer tuple\n    return tup\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "test": "assert right_insertion([1, 3, 4, 6, 9], 2) == 1",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search('a[b]{3}', text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three('abbb') == True  # True",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n",
        "test": "assert new_tuple([1,2,3], 'test') == (1,2,3, 'test')",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8]) == True",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for i in test_tup:\n        if type(i) == tuple:\n            result.extend(remove_nested(i))\n        else:\n            result.append(i)\n    return tuple(result)\n",
        "test": "assert remove_nested(('a', 'b', 'c', 'd')) == ('a', 'b', 'c', 'd')",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([]) == 0",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    last_pos = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            last_pos = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_pos\n",
        "test": "assert last([1,2,3,4,5],5) == 4  # element present at the end",
        "num_ids": 854,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_starta_endb(\"ab\") == \"ab\"",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n",
        "test": "assert return_sum({1:10, 2:20, 3:15}) == 45, \"Test 1 failed\"",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum\n",
        "test": "assert sum_odd(5) == 9 # Should return 9 as the sum of odd numbers from 1 to 5 is 1+3+5=9",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert _sum([1,2,3,4,5]) == 15",
        "num_ids": 386,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def left_rotate(n, d):\n    '''\n    Rotate left bits by d bits a given number.\n    '''\n    # convert n and d to binary strings\n    n_binary = bin(n)[2:].zfill(32)\n    d_binary = bin(d)[2:].zfill(5)\n\n    # extract the bits that will be rotated\n    rotated_bits = n_binary[0:d]\n\n    # rotate the bits to the left\n    rotated_bits = rotated_bits + n_binary[d:]\n\n    # convert the result back to an integer\n    result = int(rotated_bits, 2)\n\n    return result\n",
        "test": "assert left_rotate(1234, 0) == 1234",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello, World!\") == \"Hello,World!\"",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    else:\n        count = 0\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 489,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_rotation(arr):    \n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if i < n-1 and arr[i] > arr[i+1]:\n            return i\n    return 0\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0 # since the array is already sorted and no rotation is required",
        "num_ids": 1185,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if the given number is a perfect square or not\n    i = 0\n    while i*i < n:\n        i += 1\n    return i*i == n\n",
        "test": "assert is_perfect_square(1) == True  # 1 is a perfect square",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 4, 6]) == True",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    current_run = 0\n    max_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n            \n    return max_run\n",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 3, 5]) == 1",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n",
        "test": "assert check_K(('apple', 'banana', 'orange', 'grape', 'strawberry', 'kiwi', 'mango'), 'apple') == True",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n",
        "test": "assert check_smaller((1, 2, 3), (0, 2, 1)) == True  # True because all elements in the second tuple are smaller than their corresponding elements in the first tuple",
        "num_ids": 762,
        "indeed": true
    }
]