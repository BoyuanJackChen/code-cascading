[
    {
        "number": 2,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n",
        "test": "assert similar_elements((1, 2, 3, 4), (3, 4, 5, 6)) == (3, 4)  # shared elements are 3 and 4",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(0) == True",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted(nums, reverse=True)[:n]",
        "test": "assert heap_queue_largest([], 0) == []  # check if the function returns an empty list when the input list is empty",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    if x <= 0:\n        return False\n    return x & (x - 1) == 0\n",
        "test": "assert is_Power_Of_Two(1) == True",
        "num_ids": 206,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Using regular expression to find all words with length >= 4\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    \n    # Returning the list of words found\n    return words\n",
        "test": "assert find_char_long(\"Hello world!\") == [\"Hello\", \"world\"]",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # create an empty list to store the squares\n    squares = []\n    # loop through each element in the input list\n    for num in nums:\n        # append the square of the element to the squares list\n        squares.append(num ** 2)\n    # return the squares list\n    return squares\n",
        "test": "assert square_nums([]) == []",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n-1):\n        if str[i:n] + str[0:i] == str:\n            return i\n    return n\n",
        "test": "assert find_Rotations(\"hello\") == 0  # no rotation needed",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first = s.find(ch)\n        last = s.rfind(ch)\n        if first == last:\n            s = s.replace(ch, '', 1)\n        else:\n            s = s[:first] + s[first+1:last] + s[last+1:]\n    return s\n",
        "test": "assert remove_Occ(\"abccba\",\"c\") == \"abba\"",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row and store it in a list\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the row sums and the matrix rows based on the row sums\n    sorted_row_sums, sorted_rows = (list(t) for t in zip(*sorted(zip(row_sums, M))))\n    \n    return sorted_rows",
        "test": "assert sort_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5 * l * b * h\n",
        "test": "assert find_Volume(2, 2, 4) == 8 # check for another known value",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_lowercase_underscore(\"hello_World\") == False",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(5) == 20  # Test case 1",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create an empty list to store the characters from first string\n    str_list = []\n    # Create an empty list to store the characters from second string\n    remove_list = []\n    # Traverse through the first string and add each character to the str_list\n    for i in string:\n        str_list.append(i)\n    # Traverse through the second string and add each character to the remove_list\n    for j in string:\n        remove_list.append(j)\n    # Traverse through the remove_list and remove the characters from the str_list\n    for i in range(NO_OF_CHARS):\n        if chr(i) in remove_list and chr(i) in str_list:\n            str_list.remove(chr(i))\n    # Return the final list with the characters removed from the first string\n    return str_list\n",
        "test": "assert str_to_list(\"hello world\", \"lo\") == \"he word\"",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1, 2, 3]) == False",
        "num_ids": 340,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # A woodall number is a number whose sum of digits is equal to the square of the number.\n    # We can calculate the sum of digits of a number by repeatedly dividing it by 10 and adding the remainder to a running total until the number becomes 0.\n    \n    digit_sum = 0\n    while x > 0:\n        digit_sum += x % 10\n        x //= 10\n        \n    # Check if the sum of digits is equal to the square of the original number.\n    \n    return digit_sum == x**2\n",
        "test": "assert is_woodall(9) == False",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):\n    '''\n    This function takes a number as input and checks if it is one less than twice its reverse.\n    '''\n    # converting number to string\n    num_str = str(num)\n    \n    # reversing the string\n    rev_str = num_str[::-1]\n    \n    # converting reversed string to number\n    rev_num = int(rev_str)\n    \n    # checking if the condition is satisfied\n    if num == rev_num*2 - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(120) == False",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
        "test": "assert find_Max_Num([1, 3, 4, 2]) == 4321",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False",
        "test": "assert opposite_Signs(5, -3) == True",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n-1)\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 200,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = s[i:j+1]\n            if sum(int(ch) for ch in sub_str) == len(sub_str):\n                count += 1\n    return count\n",
        "test": "assert count_Substrings(\"123\") == 1 # Substring \"123\" with sum of digits 6 and length 3",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a Python function to find the smallest number in a list.\n    \"\"\"\n    if not xs:\n        return None\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num",
        "test": "assert smallest_num([3, 5, 1, 7, 2]) == 1",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    max_diff = test_list[1] - test_list[0]\n    min_val = test_list[0]\n    for val in test_list[1:]:\n        diff = val - min_val\n        if diff > max_diff:\n            max_diff = diff\n        if val < min_val:\n            min_val = val\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n",
        "test": "assert subject_marks([('history', 85), ('geography', 95), ('economics', 80)]) == [('economics', 80), ('history', 85), ('geography', 95)]",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, -2, 3, -4, 5]) == 3  # 3 positive numbers in the list",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is increasing or decreasing\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            increasing = False\n        if A[i] < A[i+1]:\n            decreasing = False\n    \n    # Check if the array is monotonic\n    if increasing or decreasing:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Monotonic([1,2,3,4]) == True",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1, 2, 3], [1, 2]) == True",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True\n",
        "test": "assert find_equal_tuple((1, 2, 3), (4, 5, 6)) == True",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap/shrink)\n        \n        if gap <= 1:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums\n",
        "test": "assert comb_sort([5, 3, 2, 7, 4]) == [2, 3, 4, 5, 7]",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    j = n\n    while i <= j:\n        square1 = i ** 2\n        square2 = j ** 2\n        if square1 + square2 == n:\n            return True\n        elif square1 + square2 > n:\n            j -= 1\n        else:\n            i += 1\n    return False\n",
        "test": "assert dif_Square(25) == True  # 25 = 5^2 - 0^2",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n\n    mapping = {}\n    for i in range(len(colors)):\n        if colors[i] not in mapping:\n            mapping[colors[i]] = patterns[i]\n        elif mapping[colors[i]] != patterns[i]:\n            return False\n\n    return True\n",
        "test": "assert is_samepatterns([\"red\", \"green\", \"blue\", \"orange\"], [\"1,2,3,5\"]) == False",
        "num_ids": 628,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        flag = True\n        for num in tup:\n            if num % K != 0:\n                flag = False\n                break\n        if flag:\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)], 5) == []",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(11) == True",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def word_len(s):  \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:  # if length of string is even\n        return False  # return False\n    else:  # if length of string is odd\n        return True  # return True\n",
        "test": "assert word_len('hello') == True",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    '''\n    This function takes an integer n as input and returns the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 243,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * 1**3 # check the volume of a unit sphere",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the variable to store the ASCII value of all the characters of the given string\n    ascii_value = 0\n    \n    # Loop through each character of the given string\n    for char in strr:\n        # Add the ASCII value of the character to the variable ascii_value\n        ascii_value += ord(char)\n        \n    # Find the character made by adding the ASCII value of all the characters of the given string modulo 26\n    result = chr((ascii_value % 26) + 65)\n    \n    # Return the result\n    return result\n",
        "test": "assert get_Char(\"b\") == \"c\"",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n            sequence.append(next_num)\n        return sequence[n - 1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n",
        "test": "assert surfacearea_sphere(1) == 12.566370614359172",
        "num_ids": 360,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Find the nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 234,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 2, 3, 3, 4, 4, 4, 4]) == {1: 1, 2: 2, 3: 3, 4: 4} ",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize a variable to store the closest number\n    closest = None\n    # Loop through the range from N-1 to 1\n    for i in range(N-1, 0, -1):\n        # If i is a perfect square, update the closest number\n        if (i**0.5).is_integer():\n            closest = i\n            break\n    # Return the closest number\n    return closest\n",
        "test": "assert closest_num(0) == None",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of words as input and returns the length of the longest word in the list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log([]) == 0  # empty list case",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring('hello world', 'universe') == False",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n)\n    for i in range(len(n) - 1):\n        if n[i] == n[i + 1]:\n            return False\n        elif i > 0 and n[i] != n[i - 1] and n[i] != n[i + 1]:\n            return False\n    return True\n",
        "test": "assert is_undulating(123) == False # regular number",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result\n",
        "test": "assert power(2,3) == 8 # test for base 2 and exponent 3",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(1, 3), (2, 2), (3, 1)]) == 3 ",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3], [4,5], [6,7,8,9]]) == 2",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(12) == 6 # divisors of 12 are 1,2,3,4,6,12",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n",
        "test": "assert frequency_lists([1, 2, 3]) == {1: 1, 2: 1, 3: 1}  # check with a single list",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # Divide the product with the length of the list\n    result = product / len(numbers)\n    \n    return result\n",
        "test": "assert multiply_num([1, 2, 3]) == 2",
        "num_ids": 354,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary or '0'\n",
        "test": "assert decimal_to_binary(1) == \"1\" # testing for 1 as input",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string and reverse it\n    reverse_num = str(num)[::-1]\n    # If the reversed number is equal to the original number, the next palindrome is a number that\n    # has an extra digit on the left and an extra digit on the right, both equal to the next integer.\n    if reverse_num == str(num):\n        next_num = int(str(num)[0]) * 10 + (int(str(num)[0]) + 1)\n        return next_num\n    # If the reversed number is greater than the original number, we need to swap some digits\n    # to make the number palindromic.\n    else:\n        for i in range(1, len(str(num))):\n            # Check if swapping the ith digit from the left and the ith digit from the right\n            # makes the number palindromic.\n            if str(num)[:i] == str(num)[::-1][i:]:\n                # If the swapped number is equal to the original number, increment the digit at position i\n                # and fill the remaining positions with the same digit.\n                if str(num)[i] == '9':\n                    return int(str(num)[:i-1] + '0' + str(num)[i-1::-1])\n                else:\n                    return int(str(num)[:i] + str(int(str(num)[i])+1) + str(num)[i+1:][::-1])\n",
        "test": "assert next_smallest_palindrome(1234) == 12321",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Splitting the snake case string into a list of words\n    words = word.split('_')\n    \n    # Initializing an empty string to store the camel case string\n    camel_case = ''\n    \n    # Looping through each word in the list and converting to camel case\n    for i, w in enumerate(words):\n        # Capitalizing the first letter of each word except the first word\n        if i != 0:\n            camel_case += w.capitalize()\n        else:\n            camel_case += w\n            \n    # Returning the final camel case string\n    return camel_case\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if m == 0:\n        return 1 if n == 0 else 0\n    elif m == 1:\n        return 1\n    else:\n        return (n * eulerian_num(n - 1, m - 1)) / m\n",
        "test": "assert eulerian_num(0, 0) == 1",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "test": "assert sort_sublists([['banana', 'apple', 'orange'], ['car', 'bike', 'train']]) == [['apple', 'banana', 'orange'], ['bike', 'car', 'train']] ",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):    \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, True]) == 3",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n",
        "test": "assert add_lists([1,2,3], (4,5,6)) == (4,5,6,1,2,3)",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heap = []\n    # add all the elements from the three lists to the heap\n    for num in num1 + num2 + num3:\n        heapq.heappush(heap, num)\n    \n    # pop the smallest element from the heap and add it to the merged list\n    while heap:\n        merged_list.append(heapq.heappop(heap))\n    \n    return merged_list\n",
        "test": "assert merge_sorted_list([1,3,5],[2,4,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if int(s[i]) % 2 == 1:\n            count += 1\n    return count\n",
        "test": "assert odd_Equivalent(\"101\", 1) == 1  # \"101\" -> \"101\"",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        common_elements = common_elements.intersection(set(nestedlist[i]))\n    return list(common_elements)\n",
        "test": "assert common_in_nested_lists([[1,2,3], [2,3,4], [3,4,5]]) == [3]",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def empty_dict(list1):\n    '''\n    This function takes a list of dictionaries as input and returns True if all dictionaries in the list are empty, else returns False.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n",
        "test": "assert empty_dit([{1: 2}, {}, {3: 4}]) == False",
        "num_ids": 366,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1,)) == 1 # check for single integer tuple",
        "num_ids": 313,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([]) == []",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def search(arr):\n    n = len(arr)\n    if n < 2:\n        return None  # not enough elements to have a unique element\n    \n    # determine whether the unique element appears at the beginning or end of the array\n    if arr[0] != arr[1]:\n        return arr[0]\n    elif arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    \n    # use binary search to find the unique element in the middle of the array\n    low = 1\n    high = n-2\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:\n            return arr[mid]\n        elif arr[mid] == arr[mid-1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return None  # no unique element found\n",
        "test": "assert search([1,1,2,2,3,3,4,4,5,5,6]) == 6 ",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1, 2), (-3, 4), (5, -6)]) == 30",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_amicable(n):\n    \"\"\"\n    Returns True if n is amicable, else False.\n    \"\"\"\n    divisors_sum = sum([x for x in range(1, n) if n % x == 0])\n    return True if divisors_sum != n else False\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum\n",
        "test": "assert amicable_numbers_sum(1000) == 5048",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_number = complex(a, b)\n    angle = cmath.phase(complex_number)\n    return angle\n",
        "test": "assert angle_complex(1,0) == 0",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_length(string):\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    # Iterate through the string\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        \n        # Update the max_diff\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n",
        "test": "assert find_length('11110000') == 4",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # finding all the divisors of both numbers\n    div_a = []\n    div_b = []\n    for i in range(1, a+1):\n        if a % i == 0:\n            div_a.append(i)\n    for i in range(1, b+1):\n        if b % i == 0:\n            div_b.append(i)\n    \n    # finding the common divisors\n    common_div = []\n    for i in div_a:\n        if i in div_b:\n            common_div.append(i)\n    \n    # finding the sum of common divisors\n    sum_common_div = sum(common_div)\n    return sum_common_div\n",
        "test": "assert sum(14, 21) == 28",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 193,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(6, [\"hello\", \"world\", \"apple\", \"banana\", \"orange\"]) == [\"hello\", \"world\", \"banana\", \"orange\"]",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Check if the given matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if the matrix is square\n    for row in my_matrix:\n        if len(row) != n:\n            return False\n    # Check if all rows have the same sum\n    row_sum = sum(my_matrix[0])\n    for i in range(1, n):\n        if sum(my_matrix[i]) != row_sum:\n            return False\n    # Check if all columns have the same sum\n    col_sum = sum(my_matrix[0])\n    for j in range(n):\n        col_j = [my_matrix[i][j] for i in range(n)]\n        if sum(col_j) != col_sum:\n            return False\n    # Check if the diagonal sums are equal\n    diag1_sum = sum([my_matrix[i][i] for i in range(n)])\n    diag2_sum = sum([my_matrix[i][n-i-1] for i in range(n)])\n    if diag1_sum != diag2_sum:\n        return False\n    # If all checks pass, the matrix is a magic square\n    return True\n",
        "test": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency count of each element in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4 # single item",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str_list = list(str1)\n    vowels_in_str = [char for char in str_list if char in vowels]\n    for i in range(len(vowels_in_str)//2):\n        vowels_in_str[i], vowels_in_str[-i-1] = vowels_in_str[-i-1], vowels_in_str[i]\n    for i in range(len(str_list)):\n        if str_list[i] in vowels:\n            str_list[i] = vowels_in_str.pop(0)\n    return \"\".join(str_list)\n",
        "test": "assert reverse_vowels('hello') == 'holle'",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # join all the elements in the tuple to form a string using join method\n    result = ', '.join(str(i) for i in tup1)\n    return result\n",
        "test": "assert tup_string((1,)) == '(1,)'",
        "num_ids": 297,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert sum_negativenum([1, -2, 3, -4, 5, -6, 7]) == -2-4-6",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1 ",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    if zero_count == 0:\n        return 0\n    else:\n        return zero_count/non_zero_count\n",
        "test": "assert zero_count([1, 2, 0, 4, 0, 6]) == 0.5  # Test case 1",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0:\n        if n & 1 == 0:  # Check if the least significant bit is 0 or not\n            n >>= 1  # Right shift the number\n        else:\n            n -= 1  # Subtract 1 from the number\n            if n > 0:\n                n >>= 1  # Right shift the number\n            else:\n                return True  # The number is a power of 2\n    return False  # The number is not a power of 2",
        "test": "assert is_Sum_Of_Powers_Of_Two(2) == True # 2 can be represented as sum of non-zero powers of 2",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "test": "assert circle_circumference(1) == 2*3.141592653589793 # testing with r = 1, circumference = 2*pi",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = set()\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.update(extract_singly(item))\n        else:\n            flattened_list.add(item)\n    return flattened_list\n",
        "test": "assert extract_singly([[1, 2], [3], [4, 5, 6]]) == {1, 2, 3, 4, 5, 6}",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def flip(arr, i):\n    start = 0\n    while start < i:\n        temp = arr[start]\n        arr[start] = arr[i]\n        arr[i] = temp\n        start += 1\n        i -= 1\n\ndef pancake_sort(nums):\n    arr = nums\n    n = len(arr)\n\n    while n > 1:\n        # Find the index of the maximum element in arr\n        mi = 0\n        for i in range(n):\n            if arr[i] > arr[mi]:\n                mi = i\n\n        # Move the maximum element to the beginning of the array\n        flip(arr, mi)\n\n        # Move the maximum element to its correct position\n        flip(arr, n-1)\n\n        n -= 1\n\n    return arr\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3], [1,2,3], [1,2,3]) == 3 # should return 3",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1, 2, 3)) == 0 ",
        "num_ids": 300,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4 ",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are co-prime\n    if gcd(a, b) == 1:\n        # find the modular inverse of a\n        a_inv = mod_inverse(a, b)\n        # find x and y\n        x = (n * a_inv) % b\n        y = (n - (a * x) / b)\n        # return x and y as a tuple\n        return (int(x), int(y))\n    else:\n        # no solution exists\n        return None\n\ndef gcd(a, b):\n    '''\n    Returns the greatest common divisor of a and b\n    '''\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef mod_inverse(a, m):\n    '''\n    Returns the modular inverse of a mod m if it exists, None otherwise\n    '''\n    gcd_value = gcd(a, m)\n    if gcd_value != 1:\n        return None\n    else:\n        return pow(a, m - 2, m)\n",
        "test": "assert find_solution(2, 3, 6) == None",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n",
        "test": "assert remove_elements([1, 2, 3], [2]) == [1, 3]",
        "num_ids": 387,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2 + 1):\n        total += n - 2*i\n    return total\n",
        "test": "assert sum_series(6) == 12",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l**2)/(4 * tan(pi/s))\n    return area\n",
        "test": "assert area_polygon(3, 3) == 3 * 3 * tan(pi/3) # equilateral triangle with side length 3",
        "num_ids": 394,
        "indeed": true
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n1, n2):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n1 + 1):\n        if n1 % i == 0:\n            sum1 += i\n    for j in range(1, n2 + 1):\n        if n2 % j == 0:\n            sum2 += j\n    if sum1 == sum2:\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(28) == 28 # 1+2+4+7+14 for n=28, sum of divisors is also 28",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if chr(i+97).lower() == str1[i].lower():\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26 # all letters are in the correct position",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i]^A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4]) == 2 # (1, 4) and (2, 3)",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize power variable to 1\n    power = 1\n\n    # Loop until power becomes greater than or equal to n\n    while power < n:\n        power *= 2\n\n    # Return the power variable\n    return power\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5],1) == 1",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    This function takes a list and two indices as input, and returns the sum of the numbers in the list between the two indices (inclusive).\n    \"\"\"\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 15",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5 # number of sides of a pentagon\n    p = n * a # perimeter of a pentagon\n    return p\n",
        "test": "assert perimeter_pentagon(10) == 50.0 # test for side length of 10",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"\") == 0 # empty string",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if not isinstance(element, data_type):\n            return False\n    return True\n",
        "test": "assert check_type(('apple', 'banana', 'cherry')) == True",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count of the given element to 0\n    count = 0\n\n    # Iterate through the array and count the occurrences of the given element\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # Check if the count of the given element is greater than n/2\n    if count > n/2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5, 6, 7, 8, 9], 9, 5) == False",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(12) == 2 # 12 in binary is 1100, so there are 2 set bits",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_values_string(string):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 292,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(0b1111, 0, 3) == False",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_arr = []\n    positive_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative_arr.append(arr[i])\n        else:\n            positive_arr.append(arr[i])\n    arr = negative_arr + positive_arr + arr[n:]\n    return arr\n",
        "test": "assert re_arrange_array([], 0) == [] # Test for empty array and n = 0",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "test": "assert replace_blank(\"hello world\", \"*\") == \"hello*world\"",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([4,2,5,1,3], 3) == [5, 4, 3]",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "",
        "test": "assert lateralsuface_cylinder(2, 4) == 57.02223885481341",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "test": "assert volume_cube(2) == 8",
        "num_ids": 202,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary representation\n    binary_n = bin(n)\n    \n    # Initialize the result variable to 0\n    result = 0\n    \n    # Iterate through each bit of the number\n    for i in range(len(binary_n)-2):\n        # If the current bit is even, set it to 1\n        if i%2 == 0:\n            result |= int(binary_n[i+2]) << (i+2)\n            \n    # Return the modified integer\n    return result",
        "test": "assert even_bit_set_number(0) == 0 # even number of bits set to 1",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2), (5, 6), (3, 4)]) == {(1, 2): 2, (3, 4): 2, (5, 6): 1}  # True ",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"abc\") == 6",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n\n    for i in range(1, m+1):\n        dp[1][i] = 1\n\n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            for k in range(1, j):\n                if k*2 <= j <= m:\n                    dp[i][j] += dp[i-1][k]\n\n    return dp[n][m]\n",
        "test": "assert get_total_number_of_sequences(6, 1) == 1 # [3]",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if not list2:  # check if the second list is empty\n        list1.pop()  # remove the last element from the first list\n    else:\n        list1.pop()  # remove the last element from the first list\n        for element in list2:\n            list1.append(element)  # append the elements of the second list to the first list\n    return list1  # return the modified list\n",
        "test": "assert replace_list([1, 2, 3], [4, 5]) == [1, 2, 4, 5]",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello\") == 5",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root == int(root):\n        return (int(root) + 1)**2\n    else:\n        return (int(root) + 1)**2",
        "test": "assert next_Perfect_Square(10) == 16",
        "num_ids": 388,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize two arrays to store the maximum increasing subsequence sum ending at each index\n    # and the maximum decreasing subsequence sum starting at each index\n    max_increasing = [0] * n\n    max_decreasing = [0] * n\n    # Fill the first element with the value of the array\n    max_increasing[0] = arr[0]\n    max_decreasing[n-1] = arr[n-1]\n    # Compute the maximum increasing subsequence sum ending at each index\n    for i in range(1, n):\n        max_increasing[i] = max(max_increasing[i-1] + arr[i], arr[i])\n    # Compute the maximum decreasing subsequence sum starting at each index\n    for i in range(n-2, -1, -1):\n        max_decreasing[i] = max(max_decreasing[i+1] + arr[i], arr[i])\n    # Find the maximum sum of a bitonic subsequence by comparing the\n    # maximum increasing subsequence sum ending at each index with the\n    # maximum decreasing subsequence sum starting at each index\n    max_sum = max_increasing[0] + max_decreasing[0] - arr[0]\n    for i in range(1, n-1):\n        max_sum = max(max_sum, max_increasing[i] + max_decreasing[i] - arr[i])\n    # Return the maximum sum of a bitonic subsequence\n    return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15 # increasing sequence",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0 or number == 1:\n        return number\n    else:\n        guess = number / 2\n        while abs(guess**2 - number) > 0.0001:\n            guess = (guess + number / guess) / 2\n        return guess\n",
        "test": "assert babylonian_squareroot(4) == 2.0",
        "num_ids": 514,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for L in range(2, n + 1):\n        for i in range(n - L + 1):\n            j = i + L - 1\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    return dp[0][n - 1]\n",
        "test": "assert lps('abcd') == 1 # \"a\" is the longest palindromic subsequence in \"abcd\"",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n",
        "test": "assert harmonic_sum(2) == 1.5",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set for each array\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # convert the intersection set back to a list and return it\n    return list(intersection)\n",
        "test": "assert intersection_array([1,2,3,4,5],[4,5,6,7,8]) == [4,5]",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occurrences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3,4,5), 6) == 0 ",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result\n",
        "test": "assert insert_element([1,2,3], 0) == [0, 1, 0, 2, 0, 3]",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n",
        "test": "assert convert(-2-3j) == (3.605551275463989, 2.01241643351216)  # expected output (3.1622776601683795, 2.01241643351216)",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, '4']) == 3",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations_list = list(combinations_with_replacement(l, n))\n    return combinations_list\n",
        "test": "assert combinations_colors(['red', 'blue', 'yellow'], 2) == [('red', 'red'), ('red', 'blue'), ('red', 'yellow'), ('blue', 'blue'), ('blue', 'yellow'), ('yellow', 'yellow')]",
        "num_ids": 775,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4 ",
        "num_ids": 558,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(5, 10) == (10, 5)",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(max(i) for i in zip(test_tup1, test_tup2))\n",
        "test": "assert maximize_elements((10, 11, 12), (1, 2, 3)) == (12, 11, 10)",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 7\n    else:\n        i = 1\n        count = 2\n        while count < n:\n            i += 2\n            if is_prime(i) and (i % 3 == 0) and (i % 7 == 0):\n                count += 1\n        return i\n\n\ndef is_prime(n):\n    \"\"\"\n    Helper function to check if a number is prime.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert newman_prime(1) == 3",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)\n",
        "test": "assert division_elements((2, 4, 6), (1, 2, 3)) == (2, 2, 2)",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1,2,3,4,5,6], 2) == ([1,2], [3,4,5,6])",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    human_age = int(h_age)\n    dog_age = 7 * human_age if human_age <= 21 else 21 + (human_age - 21) * 4\n    return dog_age\n",
        "test": "assert dog_age(2) == 24 # human age 2 in dog years should be 24",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert lateralsurface_cube(2) == 24",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(1) == 1 ",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        star_nums = [1, 3]\n        for i in range(3, n+1):\n            star_nums.append(star_nums[-1] + 2*(i-1))\n        return star_nums[n-1]\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 198,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    # Initialize the sum variable to zero\n    total = 0\n    \n    # Iterate over the list, checking if each element is even and at an even index\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    \n    # Return the final sum\n    return total\n",
        "test": "assert sum_even_and_even_index([2, 3, 4, 6, 5, 2]) == 6  # even numbers at even positions are 2 and 6, sum = 6",
        "num_ids": 640,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n",
        "test": "assert even_Power_Sum(2) == 10",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6] # test case 1",
        "num_ids": 440,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)  # True ",
        "num_ids": 546,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for k in range(0, n//2 + 1):\n        coeff = math.comb(n, k)\n        if coeff % 2 == 0:\n            sum += coeff\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(2) == 2 # n = 2, the sum of even index binomial coefficients is 2 (1 and 1)",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cylinder(2, 2) == 25.132741228718345",
        "num_ids": 391,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in d.items() if v >= n}",
        "test": "assert dict_filter({\"a\": 5, \"b\": 3, \"c\": 7, \"d\": 2, \"e\": 8}, 5) == {\"a\": 5, \"c\": 7, \"e\": 8}",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i, element in enumerate(test_tup):\n        if element not in count_dict:\n            count_dict[element] = i\n    return count_dict\n",
        "test": "assert count_first_elements((1, 2, 3, 4, 5)) == {1: 0, 2: 1, 3: 2, 4: 3, 5: 4}",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = (n*(3*n-1))/2\n    return decagonal\n",
        "test": "assert is_num_decagonal(1) == 1 ",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2) # check if element in array",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 323,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [a - b for a, b in zip(nums1, nums2)]\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = str(n)\n    for digit in digits:\n        if digits.count(digit) > int(digit):\n            return False\n    return True\n",
        "test": "assert validate(123456789) == True # all digits occur once",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item != element:\n            return False\n    return True\n",
        "test": "assert check_element([2, 2, 2, 2], 2) == True  # all elements are 2",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('abbb') == True",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create the repeated array by concatenating the input array k times\n    repeated_array = a * k\n    \n    # Initialize the maximum sum and temporary sum variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    \n    # Iterate through the repeated array\n    for i in range(len(repeated_array)):\n        # Add the current element to the temporary sum\n        temp_sum += repeated_array[i]\n        \n        # If the temporary sum is negative, reset it to 0\n        if temp_sum < 0:\n            temp_sum = 0\n        \n        # If the temporary sum is greater than the maximum sum, update the maximum sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    \n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([1, 2, 3, -4, -5, -6], 4, 2) == 11  # example case 2",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum\n",
        "test": "assert square_Sum(2) == 2*2+4*4  # should be 20",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 290,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = None\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0] * (n+1)\n    dp[1] = k\n    dp[2] = k**2\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + (dp[i-2] * (k-1))\n    return dp[n]\n",
        "test": "assert count_no_of_ways(3, 2) == 6  # three posts, two colors, at most 2 adjacent posts have the same color",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(10,3) == 3",
        "num_ids": 218,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_c = math.sqrt(w**2 + h**2)\n    return side_c\n",
        "test": "assert otherside_rightangle(3, 4) == 5.0",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = max(listval)\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Loop over all numbers from 1 to number\n    for i in range(1, number+1):\n        # If i is a divisor of number, add it to the sum\n        if number % i == 0:\n            sum += i\n    # Return the sum\n    return sum\n",
        "test": "assert sum_div(12) == 28 # 1 + 2 + 3 + 4 + 6",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flatten a nested list structure into a single list.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert flatten_list([1, [2, 3], [[4, 5], 6]]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the sum of tuples with same first element\n    sum_dict = defaultdict(int)\n\n    # Loop through each tuple in the list and add the second element to the sum in the dictionary\n    for tup in stdata:\n        sum_dict[tup[0]] += tup[1]\n\n    # Calculate the maximum aggregate by taking the maximum value from the sum_dict\n    max_agg = max(sum_dict.values())\n\n    return max_agg\n",
        "test": "assert max_aggregate([('a', 5), ('b', 8), ('a', 12)]) == 17",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # initialize a count variable\n    count = 0\n    \n    # iterate through all binary sequences of length 2n\n    for i in range(2**(2*n)):\n        # convert the binary sequence to a string\n        binary_str = format(i, 'b')\n        \n        # extract the first and last n bits\n        first_n_bits = binary_str[:n]\n        last_n_bits = binary_str[n:]\n        \n        # check if the sum of first n bits is same as sum of last n bits\n        if sum(int(bit) for bit in first_n_bits) == sum(int(bit) for bit in last_n_bits):\n            count += 1\n            \n    # return the count\n    return count\n",
        "test": "assert count_binary_seq(0) == 1 # for n=0, there is only one binary sequence \"0\" and its sum of first and last n bits is equal",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    # Calculate the actual position after rotations\n    actual_position = (index - rotations) % n\n    \n    # Check if actual position is within the ranges specified\n    if actual_position >= ranges[0] and actual_position < ranges[1]:\n        return arr[actual_position]\n    else:\n        return None\n",
        "test": "assert find_Element([1, 2, 3, 4, 5], (0, 4), 3, 0) == 3",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    matches = [word for word in words if pattern.match(word)]\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[:2]\n",
        "test": "assert start_withp(['pear', 'peach', 'apple', 'pair', 'pineapple', 'plum']) == ['pear', 'peach']",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index >= n or k >= n:\n        return 0\n\n    max_sum_including_k = a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n    max_sum_excluding_k = a[k] + max_sum_increasing_subseq(a, n, k + 1, k + 1)\n\n    return max(max_sum_including_k, max_sum_excluding_k)",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 4) == 12 ",
        "num_ids": 1159,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if n == ':':\n        n = len(tuplex)\n    else:\n        n = int(n)\n    \n    if m == ':':\n        m = 0\n    else:\n        m = int(m)\n    \n    new_tuplex = deepcopy(tuplex[m:n])\n    \n    return new_tuplex\n",
        "test": "assert colon_tuplex(('a', 'b', 'c', 'd'), 0, 2) == ('a', 'b')",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Combine the two lists into a list of tuples, each tuple containing one factor from each list.\n    combined_factors = [(num1, num2) for num1 in nums1 for num2 in nums2]\n\n    # Calculate the product for each tuple.\n    products = [num1 * num2 for (num1, num2) in combined_factors]\n\n    # Sort the list of products in descending order.\n    sorted_products = sorted(products, reverse=True)\n\n    # Return the N largest products.\n    return sorted_products[:N]\n",
        "test": "assert large_product([2, 3, 5], [7, 11, 13], 2) == 55 # one possible result",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(2,3) == 3",
        "num_ids": 229,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"Hello\") == ('H', 'e', 'l', 'l', 'o')",
        "num_ids": 279,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in a given binary number.\n    '''\n    return n | (n+1)\n",
        "test": "assert set_left_most_unset_bit(0b1101) == 0b1111 # unset bit in 0b1101 is the rightmost bit, so after setting it should be 0b1111",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cone(2,3) == math.pi*(2**2)*3/3 # testing the function for r=2 and h=3",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 0:\n        n //= 2\n        power += 1\n    return 2 ** (power-1)\n",
        "test": "assert highest_Power_of_2(16) == 16  # returns 16",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Applies a given format string to all elements in a list.\n\n    Args:\n    list_ (list): List of elements to apply format string to.\n    string (str): Format string to apply to each element in list_.\n\n    Returns:\n    list: A new list with the format string applied to each element in the original list.\n    \"\"\"\n\n    # create an empty list to store formatted elements\n    formatted_list = []\n\n    # loop through each element in the list and apply the format string\n    for element in list_:\n        formatted_element = string.format(element)\n        formatted_list.append(formatted_element)\n\n    return formatted_list\n",
        "test": "assert add_string([], 'hello') == []",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result\n",
        "test": "assert convert_list_dictionary([1, 2], ['a', 'b'], ['apple', 'banana']) != {1: {'a': 'banana'}, 2: {'b': 'apple'}}",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(15) == 24",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Iterate through the string and count the occurrence of each character\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first character that has a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeating characters are found, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"aabcc\") == \"b\"",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "test": "assert check_char('hello') == False ",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    # Find the median\n    if len(sorted_numbers) % 2 == 0:\n        # If the length of the sorted list is even, the median is the average of the two middle numbers\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2 - 1]) / 2\n    else:\n        # If the length of the sorted list is odd, the median is the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median\n",
        "test": "assert median_numbers(3,2,1) == 2",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num //= 10\n        result.append(sum)\n    return result\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24]",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
        "test": "assert bitwise_xor((), ()) == ()",
        "num_ids": 649,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(tuple(sorted(sub)) for sub in test_list)\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([(1, 2), (2, 3), (3, 4), (1, 2)]) == 3 ",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 401,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate over the elements of the two tuples using the zip() function\n    for t1, t2 in zip(test_tup1, test_tup2):\n        # If the elements are tuples, recursively call the function to add them\n        if isinstance(t1, tuple) and isinstance(t2, tuple):\n            result.append(add_nested_tuples(t1, t2))\n        else:\n            # If the elements are not tuples, add them and append the result to the list\n            result.append(t1 + t2)\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1,2), (3,4)), ((5,6), (7,8))) == ((6, 8), (10, 12))",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a, b):\n    '''\n    This function finds the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(2, 3) == 2",
        "num_ids": 224,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex, element):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return element in tuplex\n",
        "test": "assert check_tuplex(('apple', 'banana', 'orange'), 'grape') == False",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert find_Parity(0) == False # even parity",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a list of digits\n    digits = list(str(n))\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Sort the digits after the first digit in ascending order\n    for i in range(1, len(digits)):\n        j = i\n        while j > 0 and digits[j] > digits[j - 1]:\n            digits[j], digits[j - 1] = digits[j - 1], digits[j]\n            j -= 1\n\n    # Check if there is a bigger number\n    if digits == sorted(str(n)):\n        return -1\n    else:\n        # Convert the list of digits back to a number\n        bigger_num = int(''.join(digits))\n        return bigger_num\n",
        "test": "assert rearrange_bigger(12) == 21",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heap.append((nums1[i] + nums2[j], nums1[i], nums2[j]))\n    heapq.heapify(heap)\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(heap)[1:])\n    return result\n",
        "test": "assert k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [(1, 2), (1, 4), (1, 6)] ",
        "num_ids": 797,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(2,3), (4,5), (6,7)]) == 12",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert min_val([1, 2, 3]) == 1",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(?:_|(\\d+))([a-zA-Z])', lambda m: m.group(2).upper(), word)\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create an empty list to store even numbers\n    even_list = []\n    # loop through the given list\n    for i in l:\n        # check if the number is even\n        if i % 2 == 0:\n            # if it's even, add it to the even list\n            even_list.append(i)\n    # return the even list\n    return even_list\n",
        "test": "assert remove_odd([]) == []",
        "num_ids": 356,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for tup in list1:\n        if len(tup) >= n:\n            result.append(tup[n-1])\n    return result\n",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == 2",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[-1]*arr[-2]\n",
        "test": "assert max_Product([1, 2, 3, 4, 5]) == 20",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        else:\n            if tup[0] != common_element:\n                return None\n    return common_element\n",
        "test": "assert group_tuples([(1, 2), (1, 3), (1, 4)]) == 1",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n",
        "test": "assert Find_Max(['apple', 'banana', 'cherry']) == 'banana'",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(i) for i in list1)\n    result = total_sum * len(list1)\n    print(result)\n",
        "test": "assert round_and_sum([2, 3, 4, 5]) == 20  # Expected output: 20",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        sum += num ** 3\n        count += 1\n        num += 2\n    return sum",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'  # You can change the delimiter as per your requirement.\n    concatenated_string = delimiter.join(str(i) for i in test_tup)\n    return concatenated_string\n",
        "test": "assert concatenate_tuple(('a', 'b', 'c')) == 'a-b-c'",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/(n*(n+1)/2)\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, str):\n            result.append(item[-1])\n        else:\n            result.append(None)\n    return tuple(result)\n",
        "test": "assert extract_rear(('apple', 'banana', 'orange')) == ('e', 'a', 'e')",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == 1 # check if it counts the correct number of sublists containing the element",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 == 0, nums))\n",
        "test": "assert filter_oddnumbers([2,4,6,8]) == []",
        "num_ids": 336,
        "indeed": false
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'\n",
        "test": "assert change_date_format(\"2022-12-01\") == \"01-12-2022\"",
        "num_ids": 606,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([]) == [] ",
        "num_ids": 615,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert and_tuples((True, True, False), (True, False, True)) == (True, False, False) # Test case 1",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    This function finds the directrix of a parabola.\n    '''\n    d = abs(b)**2 - 4*a*c\n    if d < 0:\n        print(\"No real roots!\")\n    elif d == 0:\n        x = -b/(2*a)\n        y = -1/(2*a*x)\n        directrix = \"y = \" + str(y)\n        return directrix\n    else:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        y1 = -1/(2*a*x1)\n        y2 = -1/(2*a*x2)\n        m = (y2 - y1)/(x2 - x1)\n        b = y1 - m*x1\n        directrix = \"y = \" + str(m) + \"x + \" + str(b)\n        return directrix\n",
        "test": "assert parabola_directrix(1, 6, 1) == \"y=3\"",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1,2,3], [3,4,5]) == True",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n    \n    # calculate the median length\n    median_length = (base1 + base2) / 2\n    \n    # return the result\n    return median_length\n",
        "test": "assert median_trapezium(6, 4, 2) == 5.0",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return False\n    return True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 1) == False",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'  # create a regular expression pattern\n    match = re.search(pattern, text)  # search for the pattern in the text\n    if match:\n        return True  # return True if there's a match\n    else:\n        return False  # return False if there's no match\n",
        "test": "assert text_match_one(\"ab\")  # should return True",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    '''\n    Returns the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(123) == 3",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [num for num in list1 if num < 0]\n",
        "test": "assert neg_nos([1, 2, 3, -4, -5, 6]) == [-4, -5] ",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    return ''.join(str1[i] for i in range(len(str1)) if i % 2 == 0)\n",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[i][0]) == test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2), (3,4), (2,1), (4,3)]) == 2 # test case 1",
        "num_ids": 552,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for digit in L:\n        result = result * 10 + digit\n    return result\n",
        "test": "assert multiple_to_single([1,2,3,4,5]) == 12345",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'\\b(?:[^a-zA-Z0-9_]|^)(?P<adverb>really|very|extremely)\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        return match.group('adverb'), match.start()\n    else:\n        return None\n",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog.\") == None # no adverb in the sentence",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 1.0",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    return max_neg\n",
        "test": "assert largest_neg([-3, -5, -1, 0, 7]) == -1",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[K:]) for t in test_list]\n",
        "test": "assert trim_tuple([(1, 2, 3, 4, 5)], 2) == [(3, 4, 5)] ",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "test": "assert index_multiplication((1,2,3),(3,2,1)) == (3,4,3)",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup)\n    result = {}\n    for item in lst:\n        if item in count_dict:\n            result[item] = count_dict[item]\n        else:\n            result[item] = 0\n    return result",
        "test": "assert count_Occurrence((1,2,3,4,5), [1,3,5]) == Counter({1: 1, 3: 1, 5: 1}), \"Test failed for tuple (1,2,3,4,5) and list [1,3,5]\"",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as an input and returns a new list with cubes of each number.\n    \"\"\"\n    return [num ** 3 for num in nums]\n",
        "test": "assert cube_nums([1,2,3]) == [1,8,27]",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def perrin_number(n):\n    if n == 0:\n        return 3\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        return perrin_number(n-1) + perrin_number(n-2) + perrin_number(n-3)\n\ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total_sum = 0\n    for i in range(n+1):\n        total_sum += perrin_number(i)\n    return total_sum\n",
        "test": "assert cal_sum(1) == 3 ",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in str:\n        if len(s) == l:\n            extracted_strings.append(s)\n    return extracted_strings\n",
        "test": "assert extract_string(['apple', 'banana', 'orange', 'grape'], 3) == ['apple', 'banana', 'orange']",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n\ntext = \"This is a sample text with whitespaces\"\nprint(remove_whitespaces(text))\n",
        "test": "assert remove_whitespaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 50) == 50",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n",
        "test": "assert sumofFactors(10) == 12 # The sum of even factors of 10 is 2+4+6=12",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog. The fez is on the table.\") == True # 'fez' contains 'z'",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True ",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list([]) == []",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([[1,2,3], [4,5], [6,7,8,9]]) == [4,5]",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert rectangle_area(5, 3) == 15",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]+', '', str1)\n",
        "test": "assert remove_uppercase(\"aBcDeF\") == \"abcdef\"",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7] # test case 1",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello, World!\") == 2",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def combinations_list(lst):\n    '''\n    Find all possible combinations of elements of a given list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result\n",
        "test": "assert combinations_list([1]) == [[1]] # should return a list with a single element for a single-element input list",
        "num_ids": 478,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6 # [2, 3] -> 2 * 3 = 6",
        "num_ids": 646,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return all(x == values[0] for x in values)\n",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 1}, 1) == False",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert drop_empty({\"a\": 1, \"b\": 2, \"c\": \"\", \"d\": [], \"e\": None, \"f\": {}, \"g\": \"0\"}) == {\"a\": 1, \"b\": 2, \"g\": \"0\"} ",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_product(arr):\n    if not arr:\n        return None\n\n    n = len(arr)\n    max_product = 1\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(n):\n        if arr[i] > 0:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n        else:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], arr[i])\n            min_ending_here = min(temp * arr[i], arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product\n",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120 # Test case 2",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = ()\n    for i in range(len(test_tup)-1):\n        res += (test_tup[i] + test_tup[i+1],)\n    return res\n",
        "test": "assert add_pairwise((1, 2, 3)) == (3, 5)",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n",
        "test": "assert find_remainder([2, 3], 5) == 1",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Convert the list to set to remove duplicates\n    s = set(l)\n    # Check if the minimum and maximum values in the set are consecutive\n    return max(s) - min(s) == len(s) - 1\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True ",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for element in test_list1:\n        if element in test_list2 and element not in intersection:\n            intersection.append(element)\n    return tuple(intersection)\n",
        "test": "assert tuple_intersection((1, 2, 3), (2, 3, 4)) == (2, 3)",
        "num_ids": 480,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Replace all occurrences of character ch in string str1 with character newch.\n    '''\n    if len(ch) != 1 or len(newch) != 1:\n        raise ValueError(\"ch and newch must be single characters\")\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char('hello', 'l', 'x') == 'hexxo'",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1]))\n",
        "test": "assert sort_counter({'a': 3, 'b': 1, 'c': 2}) == {'b': 1, 'c': 2, 'a': 3} ",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n",
        "test": "assert big_sum([1,2,3,4,5]) == 6",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 202,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n",
        "test": "assert remove_lowercase('HELLO WORLD') == 'HELLO WORLD'",
        "num_ids": 314,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    Find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(123) == 1",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in lst if num % 2 != 0]\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def difference(n):\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        sum_of_numbers += i\n    return sum_of_cubes - sum_of_numbers ** 2\n",
        "test": "assert difference(1) == 0 # because 1^3 = 1 and 1+1 = 2",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([2, 5, 3, 1], 4) == 3",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n",
        "test": "assert toggle_string(\"Hello World!\") == \"hELLO wORLD!\"",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n    diff = 0\n    for i in range(len(num1)):\n        diff += abs(num1[i] - num2[i])\n    return diff\n",
        "test": "assert digit_distance_nums(123,456) == 9",
        "num_ids": 584,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert max_sub_array_sum([-1, -2, -3, -4], 4) == -3  # max sum is for sublist [-1]",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union_set = set1.union(set2)\n    return sorted(union_set)\n",
        "test": "assert union_elements((1,2,3),(3,4,5)) == [1, 2, 3, 4, 5]",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1,2,3], [4,5], [6,7,8,9]]) == 4 # True",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n\n    Parameters:\n    text (str): The input string.\n\n    Returns:\n    list: A list of all the values between quotation marks in the input string.\n    '''\n\n    # Use regular expressions to find all values between quotation marks\n    matches = re.findall(r'\"(.*?)\"', text)\n\n    # Return the list of matches\n    return matches\n",
        "test": "assert extract_values('') == []",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10 # count of pairs is 10 for the given array",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)\n",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and iterate over each character\n    sum = 0\n    for char in str(n):\n        # Convert each character back to an integer and add it to the sum\n        sum += int(char)\n    return sum\n",
        "test": "assert sum_digits(123) == 6 # Test case 1: positive integer with multiple digits",
        "num_ids": 415,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert empty_list(5) == [{}, {}, {}, {}, {}]",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['pear', 'banana', 'apple'], ['eggs', 'milk', 'bread'], ['tomato', 'pepper', 'onion']]) == [['apple', 'banana', 'pear'], ['bread', 'eggs', 'milk'], ['onion', 'pepper', 'tomato']] ",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums",
        "test": "assert two_unique_nums([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120 ",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * (r + h)\n    \n    # return the result\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(1, 1) == 9.42 ",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3,4,5],[6,7,8]) == False",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 1\n    else:\n        last_digit = 1\n        for i in range(1, n+1):\n            last_digit = (last_digit * i) % 10\n        return last_digit\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 476,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [x for t in zip(list1, list2, list3) for x in t]\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 615,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            dissimilar.append((test_tup1[i], test_tup2[i]))\n    return dissimilar\n",
        "test": "assert find_dissimilar((1,2,3),(2,3,4,5)) == {1, 4, 5}",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def even_ele(test_tuple, even_fnc):  \n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            result.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                result.append(i)\n    return tuple(result)\n",
        "test": "assert even_ele((4, 2, (1, 5, 3, 7)), lambda x: x % 2 == 0) == (4, 2, ())  # Should return True",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #calculating the surface area of a square pyramid\n    surface_area = (b**2 + b*s) / 2\n    \n    return surface_area\n",
        "test": "assert surface_Area(2, 3) == 34",
        "num_ids": 310,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 248,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num <= 1:\n        return 1\n    else:\n        # calculate the catalan number for n\n        cn = 0\n        for i in range(num):\n            cn += catalan_number(i) * catalan_number(num - i - 1)\n        return cn\n",
        "test": "assert catalan_number(0) == 1  # base case",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    adverbs = re.findall(pattern, text)\n    if adverbs:\n        first_adverb = adverbs[0]\n        positions = [m.start() for m in re.finditer(first_adverb, text)]\n        return first_adverb, positions\n    else:\n        return None, None\n",
        "test": "assert find_adverbs(\"She ran swiftly.\") == ('swiftly', [8])",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of the first n items\n    min_heap = items[:n]\n    heapq.heapify(min_heap)\n    # Iterate over the remaining items\n    for item in items[n:]:\n        # If the current item is more expensive than the least expensive item in the heap,\n        # replace it with the current item and re-heapify the heap.\n        if item > min_heap[0]:\n            heapq.heapreplace(min_heap, item)\n    # Return the heap of n most expensive items\n    return min_heap\n",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    full_list = second_part + first_part\n    return full_list\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return 0\n    else:\n        return max(nums) - min(nums)\n",
        "test": "assert big_diff([10, 3, 5, 6, 20, 3]) == 17 ",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b+1):\n        if num**0.5 == int(num**0.5):\n            squares.append(num)\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n",
        "test": "assert polar_rect(1,cmath.pi) == -1.0",
        "num_ids": 305,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List should have at least two elements\")\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 518,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import factorial\n\ndef binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_product = 0\n    for i in range(n):\n        coeff = factorial(n) // (factorial(i) * factorial(n-i))\n        sum_product += coeff\n    return sum_product\n",
        "test": "assert binomial_Coeff(7,4) == 35 # (7!)/(4!*3!) = 35 ",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the ip address into a list of octets\n    octets = ip.split('.')\n    # Iterate through the octets and remove leading zeros\n    for i in range(len(octets)):\n        octet = int(octets[i])\n        if octet < 10:\n            octets[i] = str(octet)\n        else:\n            octets[i] = str(octet).lstrip('0')\n            if octets[i] == '':\n                octets[i] = '0'\n    # Join the octets back together to form the new ip address\n    new_ip = '.'.join(octets)\n    return new_ip\n",
        "test": "assert removezero_ip('010.020.030.040') == '10.20.30.40'",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n            break\n    for num in list1:\n        if num % 2 != 0:\n            odd = num\n            break\n    if even is not None and odd is not None:\n        return abs(even - odd)\n    else:\n        return None\n",
        "test": "assert diff_even_odd([2, 3, 4, 5, 6]) == 1 # True ",
        "num_ids": 533,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    arr1 = [int(str1[i]) for i in range(n)]\n    arr2 = [int(str2[i]) for i in range(n)]\n    i = 0\n    count = 0\n    while i < n:\n        if arr1[i] != arr2[i]:\n            j = i+1\n            while j < n:\n                if arr1[j] == arr2[i]:\n                    arr1[i], arr1[j] = arr1[j], arr1[i]\n                    count += 1\n                    break\n                j += 1\n        i += 1\n    return count\n",
        "test": "assert min_Swaps(\"00101\", \"00111\") == 1  # Testcase 2",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "test": "assert tuple_size(()) == 0 # empty tuple",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if not arr1:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    idx1 = min(k//2, len(arr1)) - 1\n    idx2 = k - idx1 - 2\n    if arr1[idx1] < arr2[idx2]:\n        return find_kth(arr1[idx1+1:], arr2, k-idx1-1)\n    else:\n        return find_kth(arr1, arr2[idx2+1:], k-idx2-1)\n",
        "test": "assert find_kth([1, 3, 5], [2, 4, 6], 2) == 2",
        "num_ids": 1024,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # converting the number to string to find its length\n    num_str = str(number)\n    # finding the length of the number\n    num_len = len(num_str)\n    # initializing sum to 0\n    sum = 0\n    # iterating through each digit of the number\n    for digit in num_str:\n        # adding the cube of the digit to the sum\n        sum += int(digit) ** num_len\n    # checking if the number is equal to the sum\n    if number == sum:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True  # Testing with Armstrong number",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    return sum, sum/number\n",
        "test": "assert sum_average(1) == (1, 1.0) ",
        "num_ids": 431,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    '''\n    This function takes a number as input and returns True if it is even and False if it is odd.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True # check if 2 is even",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    # Traverse through each character in the string\n    for char in str1:\n        # If the character is already present in the dictionary, it means it's a repeated character\n        if char in freq_dict:\n            # Return the repeated character\n            return char\n        else:\n            # Add the character to the dictionary with a frequency of 1\n            freq_dict[char] = 1\n    # If no character is repeated, return None\n    return None\n",
        "test": "assert first_repeated_char('hello world') == 'l'",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(1, n+1):\n        ludics.append(i)\n    for i in range(2, n+1):\n        if i in ludics:\n            for j in range(i*2, n+1, i):\n                if j in ludics:\n                    ludics.remove(j)\n    return ludics\n",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of the words\n    words.reverse()\n    # Join the words back into a string\n    return ' '.join(words)",
        "test": "assert reverse_words(\"hello world\") == \"world hello\"",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True  # prime number",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(0) == 0  # 0 degree is 0 radian",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        matching_substring = text[start_index:end_index]\n        return matching_substring, start_index, end_index\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"hello world\", \"llo\") == (\"llo\", 2, 5)",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_Number(0) == 1 # First Bell number is 1",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 610,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k < 0 or k >= len(list1):\n        return list1\n    else:\n        new_list = list1[:k] + list1[k+1:]\n        return new_list\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 0) == [2, 3, 4, 5]",
        "num_ids": 481,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = float('-inf')\n    for row in test_list:\n        if len(row) > N:\n            max_num = max(max_num, row[N])\n    return max_num\n",
        "test": "assert max_of_nth([[9, 8, 7], [6, 5, 4], [3, 2, 1]], 2) == 7",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first = []\n    second = []\n    for i in lst:\n        first.append(i[0])\n        second.append(i[1])\n    return [first, second]\n",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_list = []\n    cummulative_sum = 0\n    for i in range(len(test_list)):\n        cummulative_sum += test_list[i]\n        cummulative_list.append(cummulative_sum)\n    return cummulative_list\n",
        "test": "assert cummulative_sum([1, 2, 3]) == [1, 3, 6]",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [2.0, 5.0, 8.0]",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n",
        "test": "assert tuple_modulo((0, 1, 2), (3, 4, 5)) == (0, 1, 2)",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if steps == 0:\n        return float('inf')\n    if steps < d:\n        return float('inf')\n    jumps = [float('inf')]*(d+1)\n    jumps[0] = 0\n    for i in range(1, d+1):\n        for j in range(1, steps+1):\n            if i-j >= 0:\n                jumps[i] = min(jumps[i], jumps[i-j]+1)\n    return jumps[d]\n",
        "test": "assert min_Jumps(5, 5) == 1",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1,2,3],[1,2,3]) == [1,1,1] # Testcase 1",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize empty strings for numbers and non-numbers\n    num_str = ''\n    non_num_str = ''\n\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a digit\n        if char.isdigit():\n            # add the digit to the num_str\n            num_str += char\n        else:\n            # add the non-digit to the non_num_str\n            non_num_str += char\n\n    # return the non-number string concatenated with the number string\n    return non_num_str + num_str\n",
        "test": "assert move_num(\"abc123\") == \"abc123\"",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    # sort the list in ascending order\n    a.sort()\n    # initialize the maximum subset size to 0\n    max_size = 0\n    # recursively find the largest subset that follows the divisibility rule\n    def find_subset(idx, subset):\n        nonlocal max_size\n        # if all numbers have been included, update the maximum subset size\n        if idx == len(a):\n            max_size = max(max_size, len(subset))\n            return\n        # include the current number in the subset\n        subset.append(a[idx])\n        # recursively find subsets that include the current number\n        for i in range(idx+1, len(a)):\n            if a[i] % a[idx] == 0:\n                find_subset(i, subset)\n        # remove the current number from the subset and continue with the next number\n        subset.pop()\n        find_subset(idx+1, subset)\n    # start the recursion with the first number and an empty subset\n    find_subset(0, [])\n    return max_size\n",
        "test": "assert largest_subset([1, 2, 3, 4, 6, 12]) == 3",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = k = 0\n    median = [0] * n\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median[k] = arr1[i]\n            i += 1\n        else:\n            median[k] = arr2[j]\n            j += 1\n        k += 1\n    \n    while i < n:\n        median[k] = arr1[i]\n        i += 1\n        k += 1\n        \n    while j < n:\n        median[k] = arr2[j]\n        j += 1\n        k += 1\n    \n    if n % 2 == 0:\n        return (median[n//2 - 1] + median[n//2]) / 2\n    else:\n        return median[n//2]\n",
        "test": "assert get_median([1, 3, 5, 7], [2, 4, 6, 8], 4) == 5",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4,5],1) == [1,2,3,4,5] # n=1 should return the original list",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper('Hello') == 'HELLO'",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    h = r - math.sqrt(r**2/2)\n    return 1/2 * h * r\n",
        "test": "assert triangle_area(0) == 0.0",
        "num_ids": 410,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end is None:\n        end = len(array)\n    for i in range(start, end):\n        if i+1 != array[i]:\n            return i+1\n    return end+1",
        "test": "assert find_First_Missing([1,2,3,4,5]) == 6",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert replace_spaces(\"Hello world\") == \"Hello%20world\"",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "test": "assert Split([1,2,3,4,5]) == [2,4]",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # initialize a list to store adjacent coordinates\n    adj_coords = []\n    \n    # get the row and column of the given element\n    row, col = ele\n    \n    # check for the adjacent coordinates\n    for i in range(row-1, row+2):\n        for j in range(col-1, col+2):\n            if (i, j) != ele and (i, j) in sub:\n                adj_coords.append((i, j))\n    \n    return adj_coords\n",
        "test": "assert adjac((0, 0)) == [(0, 1), (1, 0)] # check the output for (0, 0)",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 276,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store non-zero elements\n    new_list = []\n    # iterate over the original list\n    for num in num_list:\n        # if the element is not zero, append it to the new list\n        if num != 0:\n            new_list.append(num)\n    # append all the zeroes to the end of the new list\n    for num in num_list:\n        if num == 0:\n            new_list.append(num)\n    # return the new list with zeroes at the end\n    return new_list\n",
        "test": "assert move_zero([1, 0, 2, 0, 3, 0]) == [1, 2, 3, 0, 0, 0]",
        "num_ids": 648,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr,n):\n    sum=0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum=sum^(arr[i]^arr[j])\n    return sum\n",
        "test": "assert pair_xor_Sum([2,4,6], 3) == 4",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert heap_sort([4, 3, 2, 10, 12, 1, 5, 6]) == [1, 2, 3, 4, 5, 6, 10, 12]",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    \"\"\"\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True ",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def wind_chill(v, t):\n    # Formula to calculate wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    # Round off the wind chill index to the next integer\n    return round(wc)\n",
        "test": "assert wind_chill(15, 5) == 2",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            length += len(name)\n    return length\n",
        "test": "assert sample_nam([]) == 0",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n",
        "test": "assert remove_parenthesis('hello (world)') == 'hello '",
        "num_ids": 287,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_number = n*(3*n - 1)/2\n    return nonagonal_number\n",
        "test": "assert is_nonagonal(1) == 1 # The first nonagonal number is 1 ",
        "num_ids": 330,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define a regular expression pattern to match words containing 'z' in the middle\n    pattern = r'\\b\\w*z\\w*\\b'\n    \n    # compile the regular expression pattern\n    regex = re.compile(pattern)\n    \n    # search for all matches of the pattern in the given text\n    matches = regex.findall(text)\n    \n    # check if there are any matches\n    if len(matches) > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle(\"The quick brown fox jumps over the laziest dog\") == True",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        print(\"Invalid position\")\n        return\n    for i in range(k//2):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 2) == [2,1,3,4,5] # testing for k=2",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    test_tup += (test_dict,)\n    return test_tup\n",
        "test": "assert add_dict_to_tuple((\"apple\", \"banana\", \"cherry\"), {\"a\": 1, \"b\": 2}) == (\"apple\", \"banana\", \"cherry\", {\"a\": 1, \"b\": 2}) # Test with string and dictionary",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell.\n    We want to find a path with the maximum average over all existing paths.\n    Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    path_avg = dp[n-1][n-1] / (n-1)\n    return path_avg\n",
        "test": "assert maxAverageOfPath([[1, 10, 1], [4, 5, 1], [7, 8, 1]]) == 2.5",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n",
        "test": "assert filter_data({'Alice':(1.6,50), 'Bob':(1.7,65), 'Charlie':(1.5,45)},1.6,50) == {'Alice':(1.6,50), 'Bob':(1.7,65)} ",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,2,3],[1,2,3]) == 3 # All values are the same",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = base ** power\n    sum_of_digits = sum(int(digit) for digit in str(result))\n    return sum_of_digits\n",
        "test": "assert power_base_sum(10, 2) == 1  # 10^2 = 100, sum of digits is 1 + 0 + 0 = 1",
        "num_ids": 525,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n",
        "test": "assert extract_quotation(\"She replied, \\\"It's fine.\\\"\") == \"It's fine.\"",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((1,2,3)) == (2,6)",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9] # test case 1",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([1, 1, 1, 2, 3, 3, 4, 4, 4]) == [1, 2, 3, 4]",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef lateral_surface_area_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = (math.pi * r * slant_height) / h\n    return lateral_surface_area\n",
        "test": "assert lateralsurface_cone(10, 20) == 1621.490208613586",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[ ,.]'\n    return re.sub(pattern, ':', text)",
        "test": "assert replace_specialchar(\"hello,world\") == \"hello:world\"",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] != x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6], 4) == 3",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        temp = 1\n        for j in range(i, n):\n            temp *= arr[j]\n            ans += temp\n    return ans\n",
        "test": "assert sum_Of_Subarray_Prod([-1, -2, -3]) == -32 # returns -32 for input [-1, -2, -3]",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and last bit.\n    \"\"\"\n    # Compute the mask for the middle bits\n    mask = (n << 1) | (n >> 1)\n    # Toggle the middle bits\n    return n ^ mask",
        "test": "assert set_middle_bits(12) == 18",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 4) == 3  # when x is present in the list, return its index",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string) != None\n",
        "test": "assert check_str(\"elephant\") == True",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)",
        "test": "assert geometric_sum(1) == 1.0  # should return 1.0",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Index(n):\n    '''\n    Returns the index of the smallest triangular number with n digits.\n    '''\n    # Initialize the variables\n    tri_num = 1  # First triangular number\n    index = 1  # Index of the triangular number\n    digits = 1  # Number of digits in the triangular number\n    \n    # Loop until the triangular number has n digits\n    while digits < n:\n        index += 1\n        tri_num += index\n        digits = int(math.log10(tri_num)) + 1\n    \n    return index ",
        "test": "assert find_Index(1) == 1 # smallest triangular number with 1 digit is 1",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary to store the key-value pairs\n    result_dict = {}\n\n    # Loop through the elements of the tuple in steps of 2 (i.e. adjacent elements)\n    for i in range(0, len(test_tup), 2):\n        # Add the adjacent elements to the dictionary as key-value pairs\n        result_dict[test_tup[i]] = test_tup[i+1]\n\n    return result_dict\n",
        "test": "assert tuple_to_dict(('apple', 'red', 'banana', 'yellow', 'orange', 'orange')) == {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n",
        "test": "assert all_Characters_Same(\"abc\") == False",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (math.sqrt(3)/4) * (side ** 2)\n    return area",
        "test": "assert area_tetrahedron(5) == 20",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotates a list by m positions to the right.\n    \"\"\"\n    if len(lst) == 0:\n        return []\n    \n    m = m % len(lst) # To handle cases where m is greater than length of list\n    return lst[-m:] + lst[:-m]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, None, 'apple')) == True",
        "num_ids": 284,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(10, 30) == [20] # 20 is the only number that is divisible by all its digits between 10 and 30",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = (r**2 * (a/360)) * math.pi\n        return area\n",
        "test": "assert sector_area(2, 360) == None",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # Initialize a table to store the lengths of longest common subsequences of the three strings\n    L = [[[0 for i in range(n+1)] for j in range(m+1)] for k in range(o+1)]\n    \n    # Fill the table in bottom-up manner\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    # The length of the longest common subsequence is stored in L[m][n][o]\n    return L[m][n][o]\n",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GTAB\") == \"GTAB\" ",
        "num_ids": 1112,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)\n",
        "test": "assert capital_words_spaces(\"helloWorld\") == \"hello World\"",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str = [int(num) for num in nums_str]\n    nums_str.sort()\n    return [str(num) for num in nums_str]\n",
        "test": "assert sort_numeric_strings(['1', '2', '3']) == ['1', '2', '3']",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += list(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1,2,3], (4,5)) == [1,2,3,4,5]",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    n = len(arr)\n    \n    # Check if the parent node is greater than the child node\n    if (i*2)+1 < n and arr[i] > arr[(i*2)+1]:\n        return False\n        \n    # Check if the parent node is greater than the right child node\n    if (i*2)+2 < n and arr[i] > arr[(i*2)+2]:\n        return False\n        \n    return True\n",
        "test": "assert check_min_heap_helper([1], 0) == True",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0 # base case",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]",
        "test": "assert min_k([('A', 10), ('B', 20), ('C', 30), ('D', 40), ('E', 50), ('F', 60), ('G', 70)], 3) == [('A', 10), ('B', 20), ('C', 30)]",
        "num_ids": 809,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists\n    under the same index. Write a function to find common elements from three lists. The function\n    should return a list.\n    \"\"\"\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list\n",
        "test": "assert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # check if the list contains at least two elements\n    if len(numbers) < 2:\n        return None\n    \n    # sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # return the second smallest number\n    return sorted_numbers[1]\n",
        "test": "assert second_smallest([3, 1, 5, 2, 4]) == 2",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a[b]?')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"ab\") == True",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs(['aaa', 'bbb', 'ccc']) == 0 # check for no pairs of reverse strings",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = [tuple(sublist) for sublist in list1]\n    counts = {}\n    for sublist in sublists:\n        if sublist in counts:\n            counts[sublist] += 1\n        else:\n            counts[sublist] = 1\n    return counts\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        if '.' in num:\n            if len(num.split('.')[1]) == 2:\n                return True\n        return False\n",
        "test": "assert is_decimal(\"123\") == False",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1, 1, 1, 1, 1]) == True",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 == 2:\n        return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return True\n",
        "test": "assert check_monthnumber_number(1) == True  # January has 31 days",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"\") == 0",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    # initializing variables\n    count = 0\n    i = 2\n    # loop until count reaches n\n    while count < n:\n        # if i is a polite number, increment count\n        if is_prime(i) and is_prime(int(str(i)[::-1])):\n            count += 1\n        # increment i\n        i += 1\n    # return the nth polite number\n    return i-1\n\ndef is_prime(num):\n    '''\n    Helper function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num))+1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert is_polite(2) == 2",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    num_dict = {}\n    for num in arr:\n        if sum - num in num_dict:\n            count += num_dict[sum - num]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    return count\n",
        "test": "assert get_pairs_count([1, 3, 5, 7], 8) == 2",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Get the difference between two lists.\n    \"\"\"\n    return [x for x in li1 if x not in li2]\n",
        "test": "assert Diff([1,2,3,4,5],[4,5,6,7,8]) == [1,2,3]",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 # check for n=1",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    \n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n            \n    return not stack\n",
        "test": "assert check_expression(\"\") == True # empty string is balanced",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    filtered_string = ' '.join(filtered_words)\n    return filtered_string",
        "test": "assert remove_length(\"I am a software engineer.\", 2) == \"I am a software engineer.\"",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = re.compile(pattern)\n    matches = pattern.finditer(text)\n    result = []\n    for match in matches:\n        result.append({'substring': match.group(), 'start_pos': match.start(), 'end_pos': match.end()})\n    return result if result else None\n",
        "test": "assert occurance_substring(\"Hello world\", \"hey\") == None",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([2, 4, 6, 8, 10]) == False",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i] not in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0",
        "num_ids": 557,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list\n    \"\"\"\n    unique_arr = []\n    for i in arr:\n        if arr.count(i) == 1:\n            unique_arr.append(i)\n    return sum(unique_arr)\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts\n",
        "test": "assert unique_sublists([[1,2,3], [2,3,4], [1,2,3], [4,5,6]]) == {(1, 2, 3): 2, (2, 3, 4): 1, (4, 5, 6): 1} ",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    result = []\n    for i in range(1, len(test_list)+1):\n        for comb in combinations(test_list, i):\n            result.append(sum(comb))\n    return result",
        "test": "assert find_combinations([]) == [] # Test for empty list",
        "num_ids": 822,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes in a number n and returns True if the count of divisors is even and False if it is odd.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n",
        "test": "assert count_divisors(6) == True # divisors of 6 are 1, 2, 3, 6 and the count is even",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            for k in range(i, j+1, 1):\n                sum += arr[k]\n    return sum\n",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6]) == 27",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. \n    '''\n    # convert rgb values to range of 0-1\n    r, g, b = r/255.0, g/255.0, b/255.0\n    \n    # get the maximum and minimum of the rgb values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    # calculate the difference between maximum and minimum\n    diff = max_value - min_value\n    \n    # calculate the value component\n    value = max_value\n    \n    # calculate the saturation component\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_value\n        \n    # calculate the hue component\n    if diff == 0:\n        hue = 0\n    elif max_value == r:\n        hue = (g - b) / diff % 6\n    elif max_value == g:\n        hue = (b - r) / diff + 2\n    elif max_value == b:\n        hue = (r - g) / diff + 4\n        \n    # multiply hue by 60 to get it in degrees\n    hue *= 60\n    \n    if hue < 0:\n        hue += 360\n        \n    return hue, saturation, value\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) ",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num *= num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num *= num\n    \n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num * odd_num\n",
        "test": "assert mul_even_odd([1, 3, 5, 7]) == None",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")\n    tuple_int = tuple(map(int, tuple_str))\n    return tuple_int\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "test": "assert right_insertion([], 5) == 0",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbb\") # True",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a new list by adding the string to the list and sorting it\n    new_list = sorted(test_list + [test_str])\n    # Convert the new list to a tuple and return it\n    return tuple(new_list)\n",
        "test": "assert new_tuple(['a', 'b', 'c'], 'world') == ('a', 'b', 'c', 'world')",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 3, 4, 5, 6, 7, 8]) == True  # even numbers at even indices",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) != tuple:\n            result.append(item)\n        else:\n            result += remove_nested(item)\n    return tuple(result)\n",
        "test": "assert remove_nested((1, 2, 3)) == (1, 2, 3)",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert count_list([]) == 0",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left, right = 0, n-1\n    result = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return result\n",
        "test": "assert last([1,2,3,4,4,5,6,7],4) == 4 # last position of 4 is 4",
        "num_ids": 645,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb(\"aabb\") == True",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 != 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_odd(1) == 1 # Test for single odd number",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def _sum(arr):   \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15 # should return 15",
        "num_ids": 276,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate the bits of the given number n by d bits to the left.\n    Assumes n is a 32-bit integer.\n    \"\"\"\n    # Mask to get the last d bits of n\n    mask = (1 << d) - 1\n    # Get the last d bits of n\n    last_bits = n & mask\n    # Shift the last d bits to the left and add them to the remaining bits of n\n    rotated = (n << d) | (last_bits >> (32 - d))\n    return rotated\n",
        "test": "assert left_rotate(0, 1) == 0",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello, World!\") == \"Hello,World!\"",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 1, 1) == 3 # all numbers are equal",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    pivot = find_pivot(arr, 0, n-1)\n    if pivot == -1:\n        return 0\n    else:\n        return pivot\n\n\ndef find_pivot(arr, low, high):\n    if high < low:\n        return -1\n    elif high == low:\n        return low\n    mid = (low + high) // 2\n    if mid < high and arr[mid] > arr[mid+1]:\n        return mid\n    if mid > low and arr[mid] < arr[mid-1]:\n        return mid-1\n    if arr[low] >= arr[mid]:\n        return find_pivot(arr, mid+1, high)\n    return find_pivot(arr, low, mid-1)\n",
        "test": "assert count_rotation([1, 2, 3, 4]) == 0",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Taking the square root of the number\n    square_root = int(n ** 0.5)\n\n    # Checking if the square of the square root is equal to the number\n    if square_root * square_root == n:\n        return True\n    else:\n        return False\n",
        "test": "assert is_perfect_square(9) == True",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([2, 4]) == True",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9] # should return the list with the highest sum of elements",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n            \n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run\n",
        "test": "assert max_run_uppercase(\"Hello World!\") == 1",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([]) == None",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if k is present in the tuple or not\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((\"apple\", \"banana\", \"cherry\"), \"k\") == False ",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n",
        "test": "assert check_smaller((1, 2, 3), (0, 2, 2)) == True",
        "num_ids": 423,
        "indeed": true
    }
]