[
    {
        "number": 2,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return set(test_tup1) & set(test_tup2)\n",
        "test": "assert similar_elements((1,2,3),(2,3,4)) == {2,3}",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(4) == True",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                hq.heappushpop(heap, num)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [9, 8, 7]",
        "num_ids": 736,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the given number is a power of two or not.\n    '''\n    if x <= 0:\n        return False\n    return (x & (x - 1)) == 0\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n\ntext = \"This is a sample text to find all words that are at least 4 characters long.\"\nresult = find_char_long(text)\nprint(result)",
        "test": "assert find_char_long(\"This is a test sentence.\") == [\"This\", \"test\", \"sentence\"]",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]\n",
        "test": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return -1",
        "test": "assert find_Rotations(\"abcd\") == 0",
        "num_ids": 313,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string and a character as input and removes the first and last occurrence of the character from the string.\n    \"\"\"\n    if ch in s:\n        first_occ = s.find(ch)\n        last_occ = s.rfind(ch)\n        if first_occ == last_occ:\n            s = s.replace(ch, '', 1)\n        else:\n            s = s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    return s\n",
        "test": "assert remove_Occ(\"abcabc\", \"b\") == \"acac\"",
        "num_ids": 527,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sum = []\n    for i in range(len(M)):\n        row_sum.append(sum(M[i]))\n    M = [x for _,x in sorted(zip(row_sum,M))]\n    return M\n",
        "test": "assert sort_matrix([[4, 2], [3, 1], [5, 3]]) == [[3, 1], [4, 2], [5, 3]] # example 2",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n",
        "test": "assert find_Volume(2,3,4) == 12",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 249,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a boolean array marking the presence of characters in the second string\n    char_present = [False] * NO_OF_CHARS\n    for char in remove_chars:\n        char_present[ord(char)] = True\n    \n    # Create a list of characters to be included in the result\n    result = []\n    for char in string:\n        if not char_present[ord(char)]:\n            result.append(char)\n    \n    return result\n",
        "test": "assert str_to_list(\"hello world\") == ['h', 'e', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']",
        "num_ids": 556,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set(arraynums)\n    if len(num_set) == len(arraynums):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x >= 1 and x <= 1000000:\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    else:\n        return \"The number is not between 1 and 1,000,000.\"",
        "test": "assert is_woodall(20) == False  # Test for a non-Woodall number",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert num to string and reverse it\n    reverse = str(num)[::-1]\n    # convert reverse back to integer\n    reverse = int(reverse)\n    # check if num is one less than twice the reverse\n    if num == 2*reverse - 1:\n        return True\n    else:\n        return False",
        "test": "assert rev(123) == False",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = ''.join(str(x) for x in arr)\n    return int(max_num)\n",
        "test": "assert find_Max_Num([1, 2, 3]) == 321",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y >= 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    else:\n        return True\n",
        "test": "assert opposite_Signs(5, -10) == True ",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Returns True if n is an octagonal number, else False.\n    An octagonal number is a number that can be expressed in the form n * (3 * n - 1) / 2.\n    \"\"\"\n    if (3 * n - 1) % 2 == 0:\n        # if the middle term is even, then the octagonal number is odd\n        return False\n    else:\n        # if the middle term is odd, then the octagonal number is even\n        return True\n",
        "test": "assert is_octagonal(2) == 4 # Second octagonal number should be 4",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_Substrings(s):\n    count = 0\n    n = len(s)\n\n    for i in range(n):\n        current_sum = 0\n        for j in range(i, n):\n            current_sum += int(s[j])\n            if current_sum == j - i + 1:\n                count += 1\n\n    return count",
        "test": "assert count_Substrings(\"123\") == 1",
        "num_ids": 439,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert smallest_num([1]) == 1",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    max_diff = test_list[1] - test_list[0]\n    min_val = test_list[0]\n    for i in range(1, len(test_list)):\n        diff = test_list[i] - min_val\n        if diff > max_diff:\n            max_diff = diff\n        if test_list[i] < min_val:\n            min_val = test_list[i]\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list",
        "test": "assert subject_marks([('Maths', 90), ('Science', 80), ('English', 85)]) == [('Science', 80), ('English', 85), ('Maths', 90)]",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if type(element) == list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from math import factorial\n\ndef bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return factorial(n) // sum(factorial(k) for k in range(n))\n",
        "test": "assert bell_number(1) == 1",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Initialize two variables to keep track of the monotonicity of the array\n    increasing = True\n    decreasing = True\n\n    # Loop through the array\n    for i in range(len(A)-1):\n        # If the next element is less than the current element, the array is not monotonically increasing\n        if A[i] > A[i+1]:\n            increasing = False\n        # If the next element is greater than the current element, the array is not monotonically decreasing\n        if A[i] < A[i+1]:\n            decreasing = False\n\n    # If the array is monotonically increasing or decreasing, return True, else return False\n    if increasing or decreasing:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # Check if s is an empty list, in which case it is always a sublist of l\n    if not s:\n        return True\n    \n    # Convert l and s to strings to simplify the search process\n    l_str = ','.join(map(str, l))\n    s_str = ','.join(map(str, s))\n    \n    # Check if s_str is a substring of l_str\n    return s_str in l_str\n",
        "test": "assert is_sublist([1,2,3,4,5],[1,6,3]) == False",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # Create an empty list to store the length of each tuple\n    length_list = []\n    \n    # Loop through each tuple in the input list and append its length to the length_list\n    for i in Input:\n        length_list.append(len(i))\n    \n    # Check whether all the lengths in the length_list are equal\n    if len(set(length_list)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_equal_tuple((1, 2, 3), (4, 5, 6)) == True",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    gap = size\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        gap = max(1, int(gap / 1.25))\n        for i in range(size - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert comb_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]",
        "num_ids": 698,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # loop through all values of a from 1 to n/2\n    for a in range(1, n//2 + 1):\n        # calculate the corresponding value of b using the formula b = (n - a^2)^0.5\n        b = int((n - a**2)**0.5)\n        # if b is an integer, then n can be represented as the difference of two squares\n        if b**2 == n - a**2:\n            return True\n    # if the loop completes without returning True, then n cannot be represented as the difference of two squares\n    return False\n",
        "test": "assert dif_Square(121) == True",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    color_dict = {}\n    for i in range(len(colors)):\n        if colors[i] not in color_dict:\n            color_dict[colors[i]] = patterns[i]\n        elif color_dict[colors[i]] != patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns([\"red\", \"green\", \"blue\"], [\"a\", \"b\", \"c\"]) == True",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(2, 4, 6), (3, 6, 9), (4, 8, 12)], 2) == [(2, 4, 6), (4, 8, 12)] # should return a list with two tuples",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(22) == True",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "test": "assert word_len(\"world\") == False # length is even",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tn = (n * (n + 1) * (n + 2)) // 6\n    return tn\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 265,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n",
        "test": "assert volume_sphere(2) == 33.510321638291124",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    ascii_sum %= 26\n    return chr(ascii_sum)\n",
        "test": "assert get_Char(\"\") == chr(0) # empty string",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[sequence[i-1]] + sequence[i-sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n-1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n",
        "test": "assert surfacearea_sphere(2) == 50.26544",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 239,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = ct.ChainMap(dict1, dict2, dict3)\n    return dict(dict_merged)\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n    \n    # iterate over the elements of the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[element] = 1\n    \n    # return the frequency dictionary\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 2, 1]) == {1: 2, 2: 2, 3: 1}",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize the closest number as None\n    closest = None\n    \n    # Iterate over the range from 1 to N-1\n    for i in range(1, N):\n        # Check if the absolute difference between i and N is smaller than the absolute difference between closest and N\n        if closest is None or abs(i - N) < abs(closest - N):\n            closest = i\n    \n    return closest\n",
        "test": "assert closest_num(5) == 4",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_len = 0\n    for word in list1:\n        if len(word) > longest_len:\n            longest_len = len(word)\n    return longest_len\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for string in str1:\n            if sub_str in string:\n                return True\n        return False\n    else:\n        return sub_str in str1\n",
        "test": "assert find_substring(\"Hello World\", \"world\") == False",
        "num_ids": 318,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 10:\n        return False\n    digits = [int(d) for d in str(n)]\n    increasing = decreasing = True\n    for i in range(len(digits) - 1):\n        if digits[i] > digits[i+1]:\n            increasing = False\n        elif digits[i] < digits[i+1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return True\n    return False\n",
        "test": "assert is_undulating(121) == True",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2,3) == 8",
        "num_ids": 237,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([('a', 2), ('b', 0), ('c', 1)]) == 'b' # Test case 1",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(12) == 6  # since divisors of 12 are 1, 2, 3, 4, 6, 12 and there are 6 of them",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "test": "assert frequency_lists([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "test": "assert multiply_num([-2, 0, 2]) == 0",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary\n",
        "test": "assert decimal_to_binary(10) == \"1010\"",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    for i in range(len(num_str)-1, -1, -1):\n        if num_str[i] < num_str[i-1]:\n            # Find the first digit that is smaller than its next digit\n            j = i-1\n            while j >= 0 and num_str[j] == num_str[j+1]:\n                # Find the first digit that is not equal to the next digit\n                j -= 1\n            if j >= 0:\n                # Swap the digit with the first digit that is smaller than it\n                k = len(num_str)-1\n                while k >= 0 and num_str[k] < num_str[j]:\n                    k -= 1\n                num_str[i] = num_str[k]\n                # Reverse the digits to the right of the first digit\n                num_str[i+1:] = num_str[:i:-1]\n                return int(num_str)\n    # If all digits are 9, the next smallest palindrome is 11\n    return int(num_str) + 1\n",
        "test": "assert next_smallest_palindrome(123) == 121",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return sorted(arr)[k-1]\n",
        "test": "assert kth_element([4, 7, 1, 3, 9], 5) == 9",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the string into words using underscore as the separator\n    words = word.split('_')\n    # Capitalize the first letter of each word except the first one\n    words = [words[0]] + [word.capitalize() for word in words[1:]]\n    # Join the words together to form a camel case string\n    return ''.join(words)\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function finds the Eulerian number a(n, m) using the formula:\n    a(n, m) = sum from k=0 to m of (n choose k) * a(n-k, m) + (n-1 choose k) * a(n-k-1, m)\n    \"\"\"\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n",
        "test": "assert eulerian_num(0, 0) == 1",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "test": "assert sort_sublists([['apple', 'banana', 'orange'], ['cat', 'dog', 'bird']]) == [['apple', 'banana', 'orange'], ['bird', 'cat', 'dog']]",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):\n    '''\n    This function takes in a list of boolean values and returns the count of True values.\n    '''\n    count = 0\n    for val in lst:\n        if val == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, True, False]) == 3 # Testing with a list of booleans.",
        "num_ids": 314,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_tup + tuple(test_list)\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == (4, 5, 6, 1, 2, 3)",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged = []\n    heap = []\n    for num in (num1, num2, num3):\n        if num:\n            heapq.heappush(heap, (num[0], num))\n    while heap:\n        val, num = heapq.heappop(heap)\n        merged.append(val)\n        if num[1:]:\n            heapq.heappush(heap, (num[1], num[1:]))\n    return merged\n",
        "test": "assert merge_sorted_list([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if int(s, 2) % 2 != 0:\n            count += 1\n    return count\n",
        "test": "assert odd_Equivalent('1010', 3) == 2",
        "num_ids": 460,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function finds the common elements in a nested list.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common_elements = set()\n    \n    # Get the first sublist and find its intersection with the other sublists\n    first_sublist = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.update(first_sublist.intersection(sublist))\n    \n    # Return the set of common elements\n    return common_elements\n",
        "test": "assert common_in_nested_lists([[1,2,3], [2,3,4], [4,5,6]]) == set()",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer('123') == True",
        "num_ids": 224,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def empty_dict(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}, {'key': 'value'}]) == False",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    # Iterate through each element of the tuple\n    for num in nums:\n        # Multiply the result by 10 and add the current element to it\n        result = result * 10 + num\n    # Return the final result\n    return result\n",
        "test": "assert tuple_to_int((1,2,3)) == 123",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([['1.5', '2', '3.5'], ['4', '5.5', '6']]) == [[1.5, 2, 3.5], [4, 5.5, 6]]",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == ['hello', 'world'] # test case 1",
        "num_ids": 270,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return arr[0] if arr[0] != arr[1] else arr[1]\n    else:\n        if arr[0] != arr[1]:\n            return arr[0]\n        elif arr[n-1] != arr[n-2]:\n            return arr[n-1]\n        else:\n            for i in range(2, n-1):\n                if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                    return arr[i]",
        "test": "assert search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 7]) == 6",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            max_product = max(max_product, product)\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2), (-3,4), (5,6)]) == 12",
        "num_ids": 658,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit+1):\n        divisor_sum = sum(j for j in range(1, i//2+1) if i % j == 0)\n        if i != divisor_sum and i == sum(j for j in range(1, divisor_sum//2+1) if divisor_sum % j == 0):\n            total += i\n    return total\n",
        "test": "assert amicable_numbers_sum(1000) == 504",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    z = complex(a, b)\n    return cmath.phase(z)\n",
        "test": "assert angle_complex(5,5) == cmath.phase(complex(5,5)) # test case 1",
        "num_ids": 394,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_length(string):\n    # Initialize variables to store the count of 0s and 1s in the current sub-string\n    count_0 = count_1 = 0\n    \n    # Initialize variables to store the maximum difference and current difference between the number of 0s and number of 1s\n    max_diff = curr_diff = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # If the character is a 1, increment the count of 1s\n        else:\n            count_1 += 1\n            \n        # Calculate the difference between the number of 0s and number of 1s in the current sub-string\n        curr_diff = abs(count_0 - count_1)\n        \n        # Update the maximum difference if the current difference is greater\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n            \n    return max_diff\n",
        "test": "assert find_length('01001') == 2",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    # Compute the sum\n    return sum(divisors)\n",
        "test": "assert sum(10, 20) == 11 # The common divisors of 10 and 20 are 1, 2, 5, and 10, so their sum is 17.",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6",
        "num_ids": 191,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Return a list of words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(4, ['cat', 'dog', 'elephant', 'giraffe']) == ['elephant', 'giraffe']",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Calculate the sum of the first row\n    expected_sum = sum(my_matrix[0])\n    # Check if all rows have the same sum\n    for i in range(1, n):\n        if sum(my_matrix[i]) != expected_sum:\n            return False\n    # Check if all columns have the same sum\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum != expected_sum:\n            return False\n    # Check if all diagonals have the same sum\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    if diag1_sum != expected_sum:\n        return False\n    diag2_sum = sum(my_matrix[i][n-1-i] for i in range(n))\n    if diag2_sum != expected_sum:\n        return False\n    # All checks passed, so it's a magic square\n    return True\n",
        "test": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 9]]) == False",
        "num_ids": 1073,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the count of each item in the list\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    \n    # Find the item with maximum count\n    max_item = None\n    max_count = 0\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n    \n    return max_item\n",
        "test": "assert max_occurrences([1]) == 1 # when list contains only one element",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiouAEIOU')\n    vowels_list = [char for char in str1 if char in vowels]\n    vowels_list.reverse()\n    new_str = ''\n    vowels_count = 0\n    for char in str1:\n        if char in vowels:\n            new_str += vowels_list[vowels_count]\n            vowels_count += 1\n        else:\n            new_str += char\n    return new_str\n",
        "test": "assert reverse_vowels(\"hello\") == \"holle\"",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(i) for i in tup1)\n",
        "test": "assert tup_string(()) == \"\"",
        "num_ids": 255,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            sum += num\n            \n    # Return the sum of negative numbers\n    return sum\n",
        "test": "assert sum_negativenum([1, -2, 3, -4, 5]) == -6",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def hexagonal_num(n):  \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1 # the first hexagonal number is 1",
        "num_ids": 258,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 0  # avoid division by zero\n    else:\n        return zero_count / non_zero_count\n",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 607,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Returns True if n can be represented as sum of non-zero powers of 2, else False.\n    \"\"\"\n    if n == 0:\n        return False\n    while n != 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(6) == False  # 6 is odd, cannot be represented as sum of non-zero powers of 2",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "test": "assert abs(circle_circumference(2) - 12.56) < 0.01 # for radius 2, circumference is approx. 12.56",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = set()\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.update(extract_singly(item))\n        else:\n            flattened_list.add(item)\n    return flattened_list\n",
        "test": "assert extract_singly([[1,2,3], [4,5,6], [7,8,9]]) == set([1,2,3,4,5,6,7,8,9])",
        "num_ids": 553,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n, 1, -1):\n        # Find the index of the maximum element in the remaining unsorted list\n        max_idx = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Reverse the sublist from 0 to max_idx\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        \n        # Reverse the entire list\n        nums[:i] = reversed(nums[:i])\n    \n    return nums\n",
        "test": "assert pancake_sort([4, 3, 2, 1]) == [1, 2, 3, 4]",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3 # should return 3",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0 # Check for an empty tuple",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1,2,3,4,5]) == 4",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None  # no solution exists\n    elif n % gcd(a, b) != 0:\n        return None  # no solution exists\n    else:\n        x, y = 0, n\n        while a != 0 and b != 0:\n            q, r = divmod(b, a)\n            x, y = y - q*x, x\n            a, b = b, r\n        if a == 0:\n            return x % (n // gcd(a, b)), y // gcd(a, b)\n        else:\n            return y % (n // gcd(a, b)), x // gcd(a, b)\n",
        "test": "assert find_solution(2, 3, 7) == None",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [3, 4]) == [1, 2, 5] # removes 3 and 4 from the first list",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2+1):\n        total += n-2*i\n    return total\n",
        "test": "assert sum_series(8) == 8 + (8-2) + (8-4) + (8-6)  # n + (n-2) + (n-4) + (n-6)",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l**2 * s**2) / (4 * tan(pi / l)**2)\n    return area\n",
        "test": "assert area_polygon(10, 4) == 100",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum1 = 0\n    div_sum2 = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n//i == i:\n                div_sum1 += i\n            else:\n                div_sum1 += i + n//i\n    for i in range(1, int(math.sqrt(n-1))+1):\n        if (n-1) % i == 0:\n            if (n-1)//i == i:\n                div_sum2 += i\n            else:\n                div_sum2 += i + (n-1)//i\n    if div_sum1 == div_sum2:\n        return True\n    else:\n        return False",
        "test": "assert div_sum(8) == 15 # True since divisors are 1, 2, 4 and their sum is 7",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i, char in enumerate(str1):\n        if char.isalpha() and ord(char.lower()) == i+97:\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26 # all letters occur at their correct positions",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([1,2,3,4]) == 2",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9], 3) == 1 # check if 3 occurs only once in the list",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1,2,3,4,5,6], 0, 2) == 6 # sum of [1,2,3]",
        "num_ids": 417,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    n = 5  # Number of sides of a pentagon\n    p = n * a\n    return p\n",
        "test": "assert perimeter_pentagon(10) == 50",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"\") == 0",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if not isinstance(element, data_type):\n            return False\n    return True\n",
        "test": "assert check_type((\"apple\", \"banana\", \"cherry\")) == True",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False\n",
        "test": "assert is_majority([1, 2, 2, 2, 2, 3, 4, 4, 5, 5, 5, 6, 7, 7, 7, 7, 8, 9], 17, 5) == False",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 326,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_values_string(string):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(string)):\n        if i % 2 == 0:\n            result += string[i]\n    return result\n",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"",
        "num_ids": 326,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n",
        "test": "assert min_of_three(3, 7, 1) == 1",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Create a mask of all 1's with length (r - l + 1)\n    mask = (1 << (r - l + 1)) - 1\n    # Shift the mask to the left by l bits\n    mask = mask << l\n    # Check if the bitwise AND of n and mask is equal to mask\n    if (n & mask) == mask:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(2, 0, 1) == False",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    arr[:n] = neg + pos\n    return arr\n",
        "test": "assert re_arrange_array([1, -2, 3, -4, 5, -6], 4) == [-2, -4, 1, 3, 5, -6] # move the first 4 elements",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "test": "assert replace_blank(\"Hello World!\", \"*\") == \"Hello*World!\"",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)",
        "test": "assert larg_nnum([10,20,30,40,50], 1) == [50]",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h\n",
        "test": "assert lateralsuface_cylinder(1,1) == 6.283185307179586",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(1) == 1",
        "num_ids": 219,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # set the 0th bit if it's even\n    if n & 1 == 0:\n        n |= 1\n    # set the 2nd bit if it's even\n    if n & 2 == 0:\n        n |= 2\n    # set the 4th bit if it's even\n    if n & 4 == 0:\n        n |= 4\n    # set the 6th bit if it's even\n    if n & 8 == 0:\n        n |= 8\n    # set the 8th bit if it's even\n    if n & 16 == 0:\n        n |= 16\n    # set the 10th bit if it's even\n    if n & 32 == 0:\n        n |= 32\n    # set the 12th bit if it's even\n    if n & 64 == 0:\n        n |= 64\n    # set the 14th bit if it's even\n    if n & 128 == 0:\n        n |= 128\n    # set the 16th bit if it's even\n    if n & 256 == 0:\n        n |= 256\n    # set the 18th bit if it's even\n    if n & 512 == 0:\n        n |= 512\n    # set the 20th bit if it's even\n    if n & 1024 == 0:\n        n |= 1024\n    # set the 22th bit if it's even\n    if n & 2048 == 0:\n        n |= 2048\n    # set the 24th bit if it's even\n    if n & 4096 == 0:\n        n |= 4096\n    # set the 26th bit if it's even\n    if n & 8192 == 0:\n        n |= 8192\n    # set the 28th bit if it's even\n    if n & 16384 == 0:\n        n |= 16384\n    # set the 30th bit if it's even\n    if n & 32768 == 0:\n        n |= 32768\n    return n\n",
        "test": "assert even_bit_set_number(25) == 30",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2), (5, 6), (3, 4), (1, 2), (5, 6)]) == {(1, 2): 3, (3, 4): 2, (5, 6): 2}",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"abc\") == 6",
        "num_ids": 293,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    dp = [0] * (m + 1)  # dp array to store number of sequences for each value of i\n    dp[2] = 1  # base case, only one sequence starts with 2\n\n    for i in range(3, m + 1):\n        # iterate over all values of i from 3 to m and calculate number of sequences for each value of i\n        for j in range(2, i):\n            if j * 2 <= i:\n                dp[i] += dp[j]\n\n    # return the number of sequences of length n\n    return dp[m]\n",
        "test": "assert get_total_number_of_sequences(6,1) == 1 # only one sequence (2,4,6)",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2) > 0:\n        list1.pop()\n        list1.extend(list2)\n    return list1\n",
        "test": "assert replace_list([1,2,3],[4,5,6]) == [1,2,4,5,6] # Replace last element with new list",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"\") == 0",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the nearest integer root of the given number\n    root = math.floor(math.sqrt(N))\n    \n    # Find the next perfect square by adding 1 to the nearest integer root\n    next_square = (root + 1) ** 2\n    \n    # Return the next perfect square\n    return next_square\n",
        "test": "assert next_Perfect_Square(5) == 9",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_increasing = [0] * n\n    max_decreasing = [0] * n\n\n    # Finding the maximum increasing subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_increasing[i] = max(max_increasing[i], max_increasing[j] + arr[i])\n\n    # Finding the maximum decreasing subsequence\n    for i in range(n-2, -1, -1):\n        for j in range(n-1, i, -1):\n            if arr[i] > arr[j]:\n                max_decreasing[i] = max(max_decreasing[i], max_decreasing[j] + arr[i])\n\n    # Finding the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, max_increasing[i] + max_decreasing[i] - arr[i])\n\n    return max_sum\n",
        "test": "assert max_sum([5, 4, 3, 2, 1]) == 5 # decreasing sequence",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # set initial guess\n    guess = number / 2\n    # set the tolerance for the difference between guesses\n    tolerance = 0.00001\n    # keep iterating until the difference between guesses is less than the tolerance\n    while abs(number - guess * guess) > tolerance:\n        # update the guess by taking the average of the guess and the number divided by the guess\n        guess = (guess + number / guess) / 2\n    # return the square root guess\n    return guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a table to store lengths of longest palindromic subsequences of substring [0...i] and [0...j]\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    # All characters in the string are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n    # Check all substrings of length 2 to n\n    for start in range(n-1, -1, -1):\n        for end in range(start+1, n):\n            if str[start] == str[end]:\n                dp[start][end] = dp[start+1][end-1] + 2\n            else:\n                dp[start][end] = max(dp[start+1][end], dp[start][end-1])\n    return dp[0][n-1]",
        "test": "assert lps(\"bbbab\") == 4 # \"bbbb\" is the longest palindromic subsequence in this case",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n",
        "test": "assert harmonic_sum(2) == 1.5",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the arrays to sets to remove duplicates\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)\n",
        "test": "assert intersection_array([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((\"apple\", \"banana\", \"cherry\", \"apple\"), \"apple\") == 2",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in a list and returns the resulting list.\n\n    Args:\n        lst: A list of elements.\n        element: An element to insert before each element in the list.\n\n    Returns:\n        A new list with the element inserted before each element in the original list.\n    \"\"\"\n\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n",
        "test": "assert convert(2-3j) == (3.1622776601683795, 2.03278821619694882) # checks for the conversion of 2-3j to polar coordinates",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([]) == 0",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n < 2:\n        return count\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(2, 3) == (3, 2)",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        max_tup += (max(test_tup1[i], test_tup2[i]),)\n    return max_tup\n",
        "test": "assert maximize_elements((1,2,3), (4,5,6)) == (4,5,6) # Test case 1",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list to store the newman-shanks-williams prime numbers.\n    newman_shanks_williams_primes = [2, 3, 5, 7, 13, 17, 31, 61, 127, 253, 503, 1019, 2039, 4093, 8111, 16221, 32441, 64881, 129701, 259407, 518813, 1037621, 2075213, 4150289, 8300507, 16601513, 33203011, 66406021, 132811851]\n    \n    # If the nth newman-shanks-williams prime number is already calculated, return it.\n    if n < len(newman_shanks_williams_primes):\n        return newman_shanks_williams_primes[n-1]\n    \n    # If not, calculate it using the newman-shanks-williams sequence.\n    else:\n        # Initialize the sequence with the last calculated newman-shanks-williams prime number.\n        x = newman_shanks_williams_primes[-1]\n        \n        # Calculate the newman-shanks-williams sequence until we reach the nth prime.\n        while len(newman_shanks_williams_primes) < n:\n            # Calculate the next number in the sequence using the formula:\n            # x_i = 2*x_(i-1)^2 - 1\n            x = 2*x**2 - 1\n            \n            # If the next number is a prime, add it to the list.\n            if is_prime(x):\n                newman_shanks_williams_primes.append(x)\n        \n        # Return the nth newman-shanks-williams prime number.\n        return newman_shanks_williams_primes[-1]\n",
        "test": "assert newman_prime(1) == 2  # first Newman-Shanks-Williams prime number is 2",
        "num_ids": 1086,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = tuple(i/j for i,j in zip(test_tup1, test_tup2))\n    return result_tup\n",
        "test": "assert division_elements((10, 20, 30), (5, 2, 4)) == (2, 10, 7.5) # Test case 1",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        print(\"Invalid input\")\n        return None\n    elif h_age <= 1:\n        return h_age * 15\n    elif h_age <= 2:\n        return 15 + (h_age - 1) * 9\n    elif h_age <= 3:\n        return 24 + (h_age - 2) * 5\n    else:\n        return 29 + (h_age - 3) * 4\n",
        "test": "assert dog_age(2) == 24",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the sublists\n    sublists = []\n    # Iterate through the list\n    for i in range(0, len(S), step):\n        # Append each sublist of length step to the sublists list\n        sublists.append(S[i:i+step])\n    # Return the sublists list\n    return sublists\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 243,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(1) == 1",
        "num_ids": 414,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    else:\n        i = 4\n        star_num = 6\n        while i <= n:\n            temp = star_num\n            for j in range(1, i):\n                temp += (2 * j - 1) * star_num\n            star_num = temp\n            i += 1\n        return star_num\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            result += arr[i]\n    return result\n",
        "test": "assert sum_even_and_even_index([2, 3, 4, 5, 6, 7, 8]) == 20 # test case 1",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i ** 5\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 456,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n",
        "test": "assert substract_elements((1,2,3),(4,5,6)) == (-3,-3,-3) # Test case 1",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2 == 0:\n            c = math.comb(n, i)\n            sum += c\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(1) == 1 # n=1, sum = 1",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * (r ** 2) * h\n    return volume\n",
        "test": "assert volume_cylinder(1, 1) == 3.14159",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({'a':10, 'b':20, 'c':30}, 25) == {'c':30}",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    for i, element in enumerate(test_tup):\n        count_dict[element] = i\n    return count_dict",
        "test": "assert count_first_elements(('apple', 'banana', 'orange')) == {'apple': 0, 'banana': 1, 'orange': 2}  # Returns a dictionary with the count of each element",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(3*n-1))//2\n",
        "test": "assert is_num_decagonal(1) == 1  # first decagonal number should be 1",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "test": "assert all_unique(['apple', 'banana', 'orange']) == True",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n",
        "test": "assert sub_list([1, 2, 3], [2, 2, 2]) == [-1, 0, 1] # example 1",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n):\n    # convert the integer to a string\n    n = str(n)\n    # loop through each digit in the string\n    for digit in n:\n        # check if the frequency of the digit is greater than the digit itself\n        if n.count(digit) > int(digit):\n            return False\n    # if all digits pass the check, return True\n    return True\n",
        "test": "assert validate(123456789) # All digits appear only once, so the function should return True",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in lst):\n        return True\n    else:\n        return False\n",
        "test": "assert check_element([1, 1, 1], 1) == True",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bbb|bb)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('a') == False",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # First, create the modified array by repeating the given array k times\n    modified_array = a * k\n    \n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate over the modified array and calculate the sum of each subarray\n    for i in range(n*k):\n        current_sum += modified_array[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    \n    # Return the maximum sum found\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -5], 3, 4) == -1 # example case 2",
        "num_ids": 1081,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i*i\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k**2 - k + 2\n    else:\n        # The total number of ways to paint the fence with k colors is k**n\n        # But we need to subtract the cases where more than 2 adjacent posts have the same color\n        total_ways = k**n\n        ways_to_subtract = 0\n        for i in range(k):\n            for j in range(k):\n                if i != j:\n                    ways_to_subtract += (k-1)**(n-2) * 2\n        total_ways -= ways_to_subtract\n        return total_ways\n",
        "test": "assert count_no_of_ways(4, 3) == 36",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n // m)\n",
        "test": "assert find(10,3) == 3",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c\n",
        "test": "assert otherside_rightangle(3, 4) == 5  # pythagorean triplet",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if isinstance(val, (int, float)) and (max_val is None or val > max_val):\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 631,
        "indeed": true
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n",
        "test": "assert sum_div(12) == 28 # 1+2+3+4+6+12 = 28",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 603,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1, list):\n        return [list1]\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([]) == []",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for i in range(len(stdata)):\n        for j in range(i+1, len(stdata)):\n            if stdata[i][1] == stdata[j][1]:\n                d[stdata[i][1]] += stdata[i][0] + stdata[j][0]\n            else:\n                d[stdata[i][1]] += stdata[i][0]\n                d[stdata[j][1]] += stdata[j][0]\n    return max(d.values())\n",
        "test": "assert max_aggregate([(\"A\", 10), (\"A\", 20), (\"B\", 30), (\"B\", 10), (\"C\", 5), (\"A\", 15)]) == 35",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    count = 4\n    for i in range(2, n+1):\n        count *= 2**(2*i) - 2**i\n        count += 2**(2*i) - 2**(i+1)\n    return count",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_depth(d):\n    \"\"\"\n    This function takes a dictionary as an argument and returns its depth.\n    \"\"\"\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "test": "assert dict_depth({}) == 1",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Rotate the array\n    for i in range(rotations):\n        temp = arr[0]\n        for j in range(len(arr)-1):\n            arr[j] = arr[j+1]\n        arr[len(arr)-1] = temp\n    \n    # Find the element at the given index\n    return arr[index]\n",
        "test": "assert find_Element([1,2,3,4,5],(0,5),2,1) == 4",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    p_words = [word for word in words if pattern.match(word)]\n    return p_words[:2]\n",
        "test": "assert start_withp(['cat', 'dog', 'elephant', 'panda', 'pig']) == ['panda', 'pig']",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n\n    # Initialize the dp array with the ith element of the given array\n    dp = [0] * n\n    dp[index] = a[index]\n\n    # Fill the dp array with the maximum sum of increasing subsequence until that index\n    for i in range(index + 1, n):\n        for j in range(index, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n\n    # Find the maximum sum of increasing subsequence until the given index and also including the kth element\n    max_sum = 0\n    for i in range(index + 1, k + 1):\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 4) == 12 # returns the sum of elements from index 2 to 4",
        "num_ids": 1111,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuple = deepcopy(tuplex)\n    return new_tuple[m:n]\n",
        "test": "assert colon_tuplex((1,2,3,4,5),1,3) == (2,3) # get elements 1 to 3 (exclusive)",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    result = []\n    for i in range(N):\n        result.append(products[i])\n    return result\n",
        "test": "assert large_product([2, 4, 5, 7], [3, 6, 8, 9], 3) == [35, 45, 56] # three largest products are 4*9=36, 5*8=40, and 7*6=42",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(3,4) == 4",
        "num_ids": 228,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 262,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit.\n    '''\n    return n | (n + 1)\n",
        "test": "assert set_left_most_unset_bit(0b1101) == 0b1111",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cone(2,3) == 12.566370614359172",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n",
        "test": "assert highest_Power_of_2(3) == 2",
        "num_ids": 322,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2 ",
        "num_ids": 301,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Apply the given format string to all elements of a list.\n\n    Args:\n        list_ (list): The list of elements.\n        string (str): The format string to apply.\n\n    Returns:\n        list: The list with format string applied to each element.\n    \"\"\"\n\n    # Apply the format string to each element in the list\n    formatted_list = [string.format(elem) for elem in list_]\n\n    return formatted_list\n",
        "test": "assert add_string([], \"{}\") == [] # empty list",
        "num_ids": 470,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    result = {}\n\n    # iterate over the lists and add them to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n\n    return result\n",
        "test": "assert convert_list_dictionary(['a', 'b', 'c'], [1, 2, 3], ['x', 'y', 'z']) == {'a': {'b': {'c': 'x'}}, 'b': {'c': 'y'}, 'c': 'z'} ",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    if n < 6:\n        return n\n    else:\n        max_sum = max(\n            get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5),\n            n\n        )\n        return max_sum\n",
        "test": "assert get_max_sum(1) == 1 # base case",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    \n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    \n    return max_list\n",
        "test": "assert max_length_list([[1,2,3], [4,5], [6,7,8,9]]) == [6,7,8,9]",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct(()) == True  # empty tuple",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character that has a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no character has a count of 1, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"abcdabcde\") == \"e\"",
        "num_ids": 668,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char('abcba') == True",
        "num_ids": 333,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Create a list of the three numbers\n    num_list = [a, b, c]\n    # Sort the list\n    num_list.sort()\n    # Find the median\n    if len(num_list) % 2 == 0:\n        # If the list has an even number of elements, take the average of the middle two\n        middle_idx = len(num_list) // 2\n        median = (num_list[middle_idx - 1] + num_list[middle_idx]) / 2\n    else:\n        # If the list has an odd number of elements, take the middle one\n        middle_idx = len(num_list) // 2\n        median = num_list[middle_idx]\n    # Return the median\n    return median\n",
        "test": "assert median_numbers(3,2,1) == 2",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24]",
        "num_ids": 519,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize a list to store the result\n    result = []\n    \n    # Iterate through the tuples and perform bitwise xor operation on each element\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n        \n    # Convert the list to a tuple and return it\n    return tuple(result)\n",
        "test": "assert bitwise_xor((1, 0, 1, 1), (0, 0, 0, 1)) == (1, 0, 1, 0)",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup not in freq:\n            freq[tup] = 1\n        else:\n            freq[tup] += 1\n    return len(freq)\n",
        "test": "assert extract_freq([(1, 2), (2, 3), (1, 2)]) == 2",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        t1 = test_tup1[i]\n        t2 = test_tup2[i]\n        if isinstance(t1, tuple) and isinstance(t2, tuple):\n            result.append(add_nested_tuples(t1, t2))\n        else:\n            result.append(t1 + t2)\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12))",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(3,5) == 3",
        "num_ids": 218,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1,2,3), 2) == True  # element exists in tuple",
        "num_ids": 311,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n",
        "test": "assert find_Parity(3) == True  # odd number should return True",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert number to string and sort the digits\n    digits = sorted(str(n))\n    # loop through permutations of digits until a larger number is found\n    while digits:\n        # get the last digit and remove it from the list\n        last_digit = digits.pop()\n        # find the index of the next larger digit in the remaining digits\n        for i, digit in enumerate(digits):\n            if digit > last_digit:\n                # swap the digits and return the new number\n                digits[i], digits[i-1] = digits[i-1], digits[i]\n                digits.append(last_digit)\n                return int(\"\".join(digits))\n    # no larger number found\n    return None\n",
        "test": "assert rearrange_bigger(2017) == 2107 # bigger number with rearranged digits of 2017",
        "num_ids": 1139,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize a list to store the smallest pairs\n    smallest_pairs = []\n    \n    # Initialize a heap queue with pairs of elements from nums1 and nums2\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            min_heap.append((nums1[i] + nums2[j], nums1[i], nums2[j]))\n            \n    # Get the k smallest pairs from the heap queue\n    for i in range(k):\n        if min_heap:\n            smallest_pairs.append((min_heap[0][1], min_heap[0][2]))\n            heapq.heappop(min_heap)\n    \n    return smallest_pairs\n",
        "test": "assert k_smallest_pairs([1, 2, 3], [2, 3, 4], 1) == [(1, 2)]",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(2, 5), (4, 3), (6, 7)]) == 14",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = float('inf')\n    for val in listval:\n        if isinstance(val, (int, float)):\n            min_value = min(min_value, val)\n    return min_value\n",
        "test": "assert min_val([1,2,3,4,5]) == 1",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 411,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel = words[0] + ''.join([w.capitalize() for w in words[1:]])\n    return camel\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 352,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in list1:\n        result.append(i[n-1])\n    return result\n",
        "test": "assert extract_nth_element([(1,2), (3,4), (5,6)], 2) == 4",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as arguments and checks if any value in list1 exists in list2.\n    If a value exists in both lists, the function returns True, otherwise it returns False.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3], [4,5,6]) == False",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair\n",
        "test": "assert max_Product([-2, 3, 6, -8, 9]) == 72  # returns 72 (9 * -8)",
        "num_ids": 562,
        "indeed": true
    },
    {
        "number": 417,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def group_tuples(Input):  \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_elements = set()\n    for tup in Input:\n        first_elements.add(tup[0])\n    if len(first_elements) == 1:\n        return first_elements.pop()\n    else:\n        return None\n",
        "test": "assert group_tuples([(1, 2), (1, 3), (1, 4)]) == 1",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max(['apple', 'banana', 'orange']) == 'banana'",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(\"The total sum multiplied by the length of the list is:\", result)\n",
        "test": "assert round_and_sum([0.5, 0.5, 0.5, 0.5]) == 4.0  # Test case 2",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def cube_Sum(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(4) == 2**3+4**3+6**3+8**3 # first four even numbers are 2, 4, 6, 8",
        "num_ids": 371,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)\n",
        "test": "assert concatenate_tuple((\"hello\", \"world\")) == \"hello,world\"",
        "num_ids": 326,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    This function takes a natural number n as input and returns the average of cubes of first n natural numbers.\n    '''\n    # Initialize sum as 0\n    sum = 0\n    # Loop through first n natural numbers and add the cube of each number to the sum\n    for i in range(1, n+1):\n        sum += i**3\n    # Calculate the average and return it\n    average = sum/(n)\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1  # when n=1, the average of cube of first 1 natural number is 1",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    result = []\n    for i in test_tuple:\n        if isinstance(i, str):\n            result.append(i[-1])\n        elif isinstance(i, tuple):\n            result.append(extract_rear(i))\n    return tuple(result)\n",
        "test": "assert extract_rear(('hello', 'world', 'python')) == ('o', 'd', 'n')",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]], 3) == 2",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 0, nums))\n",
        "test": "assert filter_oddnumbers([]) == [] # test empty list",
        "num_ids": 296,
        "indeed": false
    },
    {
        "number": 427,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression to match the date format yyyy-mm-dd\n    pattern = re.compile(r'^(\\d{4})-(\\d{2})-(\\d{2})$')\n    # Match the pattern with the given date string\n    match = pattern.match(dt)\n    if match:\n        # Extract year, month and date from the matched groups\n        year, month, date = match.groups()\n        # Return the date in the required format\n        return '{}-{}-{}'.format(date, month, year)\n    else:\n        return None\n",
        "test": "assert change_date_format(\"2022-12-31\") == \"31-12-2022\"",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([5, 3, 8, 2, 1]) == [1, 2, 3, 5, 8]",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n",
        "test": "assert and_tuples((0, 1, 0), (1, 1, 1)) == (0, 1, 0) # Testcase 2",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    d = (b**2 - 4*a*c)\n    if d < 0:\n        return \"No real solution\"\n    else:\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        directrix_y = x1 + x2\n        return \"The directrix is y = {}\".format(directrix_y)\n",
        "test": "assert parabola_directrix(1, 2, 3) == \"x=1\" ",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    return len(set1.intersection(set2)) > 0\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median\n",
        "test": "assert median_trapezium(10,8,7) == 9",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i >= number:\n            return False\n    return True\n",
        "test": "assert check_greater([1,2,3,4,5], 5) == False",
        "num_ids": 329,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a\\w*b+')\n    match = pattern.search(text)\n    if match:\n        return match.group(0)\n    else:\n        return None\n",
        "test": "assert text_match_one('ab')",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(12345) == 5",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5, -6]) == [-2, -4, -6]",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd('Hello') == 'Hlo'",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (2, 1), (3, 4), (4, 3)]) == 2  # returns the correct count",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = 0\n    for i in L:\n        num = num * 10 + i\n    return num\n",
        "test": "assert multiple_to_single([1,2,3]) == 123",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b[a-zA-Z]+ly\\b')\n    adverb_list = re.findall(adverb_pattern, text)\n    \n    if len(adverb_list) > 0:\n        first_adverb = adverb_list[0]\n        first_adverb_position = text.index(first_adverb)\n        return first_adverb, first_adverb_position\n    else:\n        return None, None\n",
        "test": "assert find_adverb_position(\"She drove carefully through the traffic.\") == (2, \"carefully\")",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l ** 2)\n    return surface_area\n",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    # Count the number of positive integers in the array\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    \n    # Calculate the ratio and round to two decimal places\n    ratio = round(count / len(nums), 2)\n    \n    return ratio\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 5/5 # all positive numbers",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 443,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initialize a variable to store the largest negative number\n    largest_neg = None\n    \n    # Iterate through the list and find the largest negative number\n    for num in list1:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    \n    # Return the largest negative number\n    return largest_neg\n",
        "test": "assert largest_neg([-1,-3,0,5,-7,-2]) == -1",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def trim_tuple(test_list, k):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > k:\n            trimmed_list.append(tup[:k])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list\n",
        "test": "assert trim_tuple((1,2,3,4,5), 0) == (1,2,3,4,5) # Should return the original tuple if K=0",
        "num_ids": 570,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 521,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for elem in lst:\n        if elem in count:\n            result[elem] = count[elem]\n        else:\n            result[elem] = 0\n    return result\n",
        "test": "assert count_Occurrence((1,2,3,4,5,6), [1,2,3,4]) == Counter((1,2,3,4))",
        "num_ids": 554,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    # Define the first two Perrin numbers\n    p = [3, 0]\n    \n    # Calculate the Perrin numbers up to n\n    for i in range(2, n+1):\n        p.append(p[i-1] + p[i-2])\n    \n    # Return the sum of the Perrin numbers\n    return sum(p)\n",
        "test": "assert cal_sum(1) == 3",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:size] for s in str_list]\n",
        "test": "assert extract_string(['abc', 'def', 'gh'], 2) == ['ab', 'de', 'gh'] # when l is even and length of strings is less than l",
        "num_ids": 406,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"Hello, World!\") == \"Hello,World!\"",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 80) == 20",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sumofFactors(n):\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n",
        "test": "assert sumofFactors(10) == 12  # since 1, 2, 5 are the factors of 10 and 2 + 8 = 10",
        "num_ids": 478,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = re.compile(r'\\w*z\\w*')\n    words_list = re.findall(word_pattern, text)\n    return words_list",
        "test": "assert text_match_wordz('The quick brown fox jumps over the lazy dog.') == None",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True # January has 31 days",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]",
        "num_ids": 399,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_list = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_list = sublist\n    return min_list\n",
        "test": "assert Find_Min([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]) == [6]  # check for single element list",
        "num_ids": 573,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rectangle_area(l, b):\n    '''\n    This function takes in the length and breadth of a rectangle\n    and returns its area.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(4, 5) == 20",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'  # match one or more uppercase letters\n    return re.sub(pattern, '', str1)\n",
        "test": "assert remove_uppercase(\"hello\") == \"hello\"",
        "num_ids": 277,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7] ",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr('') == 0",
        "num_ids": 244,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result += [list1[i:j]]\n    return result\n",
        "test": "assert combinations_list([1]) == [[1]] # should return the list containing the input list itself",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0  # [0] has the maximum product",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return values.count(n) == len(values)\n",
        "test": "assert check_value({'a': 1, 'b': 1, 'c': 1, 'd': 1}, 1) == True",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "test": "assert drop_empty({'a': 1, 'b': '', 'c': [], 'd': {}, 'e': None}) == {'a': 1}",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product([-2, 3, 4, 5]) == 60 # Maximum product is 5 * 4 * 3 = 60",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    res = []\n    for i in range(len(test_tup)-1):\n        res.append(test_tup[i] + test_tup[i+1])\n    return tuple(res)\n",
        "test": "assert add_pairwise((1, 2, 3)) == (3, 5)",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3], 5) == 1",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l):  \n    \"\"\"\n    This function takes a list as an argument and checks whether the given list contains consecutive numbers or not. \n    It returns True if the list contains consecutive numbers, else it returns False.\n    \"\"\"\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for item in test_list1:\n        if item in test_list2 and item not in intersection:\n            intersection.append(item)\n    return tuple(intersection)",
        "test": "assert tuple_intersection(('apple', 'orange', 'banana'), ('pear', 'grape', 'kiwi')) == ()",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char('hello', 'l', 'z') == 'hezzo'  # Replace all 'l's with 'z's in 'hello'",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict\n",
        "test": "assert sort_counter({'apple': 3, 'banana': 2, 'orange': 1}) == {'apple': 3, 'banana': 2, 'orange': 1}",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize variables to hold smallest and largest values\n    smallest = nums[0]\n    largest = nums[0]\n    \n    # Loop through the array and update smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    # Return the sum of the smallest and largest values\n    return smallest + largest\n",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6 # sum of 1 and 5",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower('HELLO WORLD') == 'hello world'",
        "num_ids": 209,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', str1)\n",
        "test": "assert remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    Find the first digit of a given number.\n    '''\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(1234) == 1",
        "num_ids": 241,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in lst if num % 2 != 0]\n",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5] # check if the odd numbers are returned",
        "num_ids": 322,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural_numbers = (n*(n+1))/2\n    return sum_of_cubes - sum_of_natural_numbers\n",
        "test": "assert difference(0) == 0",
        "num_ids": 479,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j]) & 1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1,2,3,4,6],5) == 10 ",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    toggle_string = \"\"\n    for char in string:\n        if char.islower():\n            toggle_string += char.upper()\n        elif char.isupper():\n            toggle_string += char.lower()\n        else:\n            toggle_string += char\n    return toggle_string\n",
        "test": "assert toggle_string(\"Hello World\") == \"hELLO wORLD\"",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to strings so that we can access each digit\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n\n    # get the length of the strings\n    len_n1 = len(str_n1)\n    len_n2 = len(str_n2)\n\n    # find the minimum length of the two strings so that we can iterate over them\n    min_len = min(len_n1, len_n2)\n\n    # initialize a variable to store the sum of per-digit differences\n    sum_diff = 0\n\n    # iterate over the digits of the two strings\n    for i in range(min_len):\n        # find the absolute difference between the current digits\n        diff = abs(int(str_n1[len_n1 - 1 - i]) - int(str_n2[len_n2 - 1 - i]))\n        # add the difference to the sum of per-digit differences\n        sum_diff += diff\n\n    # if the two strings have different lengths, add the remaining digits of the longer string to the sum of per-digit differences\n    if len_n1 != len_n2:\n        if len_n1 > len_n2:\n            for i in range(min_len, len_n1):\n                diff = abs(int(str_n1[len_n1 - 1 - i]))\n                sum_diff += diff\n        else:\n            for i in range(min_len, len_n2):\n                diff = abs(int(str_n2[len_n2 - 1 - i]))\n                sum_diff += diff\n\n    return sum_diff\n",
        "test": "assert digit_distance_nums(123, 456) == 9  # 3-2 + 2-1 + 5-4 + 6-3 = 9",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7 ",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the tuples and convert to set to remove duplicates\n    union_set = set(test_tup1) | set(test_tup2)\n    # Convert the set back to a tuple and sort it\n    union_tuple = tuple(sorted(union_set))\n    return union_tuple\n",
        "test": "assert union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4) # True",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1,2,3], [4,5], [6,7,8,9]]) == 4",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert extract_values('The price is \"100\" and the discount is \"5%\"') == ['100', '5%']",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4],4) == 6",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    This function splits a given string into its individual characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\"]",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True ",
        "num_ids": 373,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    \"\"\"\n    Creates a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 207,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([]) == [] # Test for empty list",
        "num_ids": 506,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 429,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1,2,3,4,5]) == 120",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * (r + h)",
        "test": "assert surfacearea_cylinder(2,2) == 50.26548245743669",
        "num_ids": 473,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # convert the lists to strings for easier comparison\n    A_str = ''.join(map(str, A))\n    B_str = ''.join(map(str, B))\n    \n    # check if B_str is a substring of A_str\n    if B_str in A_str:\n        return True\n    else:\n        return False",
        "test": "assert is_Sub_Array([1,2,3,4,5], [6,7]) == False  # should return False",
        "num_ids": 509,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize an array to store the last digit of factorial for each number from 0 to n\n    last_digit = [0] * (n+1)\n    # The last digit of 0! is 1\n    last_digit[0] = 1\n    # Compute the last digit of factorial for each number from 1 to n\n    for i in range(1, n+1):\n        last_digit[i] = (last_digit[i-1] * i) % 10\n    # Return the last digit of factorial for n\n    return last_digit[n]\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create two sets of the two tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the elements that are present in either set but not in both\n    dissimilar_elements = set1 ^ set2\n    \n    # Convert the set into a tuple and return\n    return tuple(dissimilar_elements)\n",
        "test": "assert find_dissimilar(('a', 'b', 'c'), ('a', 'd', 'c')) == ('b', 'd')",
        "num_ids": 609,
        "indeed": true
    },
    {
        "number": 580,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, int):\n            if even_fnc(item):\n                new_tuple.append(item)\n        elif isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n    return tuple(new_tuple)\n",
        "test": "assert even_ele((), lambda x: x % 2 == 0) == ()",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the square base\n    base_area = b**2\n    # Calculate the area of each triangular face\n    triangle_area = (b*s)/2\n    # Calculate the total surface area\n    total_surface_area = base_area + 4*triangle_area\n    # Return the total surface area\n    return total_surface_area\n",
        "test": "assert surface_Area(10,5) == 100 + 2*5*10",
        "num_ids": 564,
        "indeed": true
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n\n    # Initialize a list to store catalan numbers\n    # and set the first two numbers as 1\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    # Calculate catalan numbers\n    for i in range(2, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[num]\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = re.compile(r'\\b\\w+ly\\b')\n    adverb_list = re.findall(adverb_pattern, text)\n    if len(adverb_list) > 0:\n        first_adverb = adverb_list[0]\n        positions = []\n        start_pos = 0\n        while True:\n            pos = text.find(first_adverb, start_pos)\n            if pos == -1:\n                break\n            positions.append(pos)\n            start_pos = pos + 1\n        return first_adverb, positions\n    else:\n        return None\n",
        "test": "assert find_adverbs(\"\") == None # empty string test",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        else:\n            heapq.heappushpop(min_heap, item)\n    return sorted(min_heap, reverse=True)\n",
        "test": "assert expensive_items([], 0) == [] # check for edge case with no items and n = 0",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Split a list at the nth element and add the first part to the end.\n    \"\"\"\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2] # test case 1",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def list_tuple(listx):\n    '''\n    Convert a list to a tuple.\n    '''\n    my_tuple = tuple(listx)\n    return my_tuple\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 233,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert big_diff([5]) == 0 # when there is only one element in the list, the difference should be zero",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    squares = []\n    # loop over the range from a to b (inclusive)\n    for num in range(a, b+1):\n        # check if the square root of the number is an integer\n        if int(num**0.5)**2 == num:\n            # if it is, add the number to the list of perfect squares\n            squares.append(num)\n    # return the list of perfect squares\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n        r (float): the magnitude of the vector\n        theta (float): the angle between the vector and the positive x-axis in radians\n\n    Returns:\n        tuple: the rectangular coordinates (x, y)\n    \"\"\"\n\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n\n    return (x, y)\n",
        "test": "assert polar_rect(0, 0) == (0, 0)",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4]) == [4, 2, 3, 1]",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initializing the sum variable\n    sum = 0\n    \n    # Looping through each term of the product series\n    for i in range(k, n+1):\n        # Computing the binomial coefficient for the current term\n        coeff = 1\n        for j in range(1, i+1):\n            coeff *= j\n        for j in range(1, (n-i)+1):\n            coeff *= j\n        coeff //= math.factorial(i)\n        \n        # Adding the current term to the sum\n        sum += coeff\n        \n    return sum\n",
        "test": "assert binomial_Coeff(5, 2) == 10 ",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Given an IP address as a string, remove any leading zeroes from each of its four octets.\n    \"\"\"\n    octets = ip.split('.')\n    no_leading_zeroes = [str(int(octet)) for octet in octets]\n    return '.'.join(no_leading_zeroes)",
        "test": "assert removezero_ip(\"192.0168.001.030\") == \"192.168.1.30\"",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for i in list1:\n        if even is None and i % 2 == 0:\n            even = i\n        elif odd is None and i % 2 != 0:\n            odd = i\n        if even is not None and odd is not None:\n            return even - odd\n    return None\n",
        "test": "assert diff_even_odd([1,3,5,7]) == 2",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to lists of integers\n    str1_list = [int(x) for x in str1]\n    str2_list = [int(x) for x in str2]\n    # Sort the second list and compare with the first list\n    sorted_str2_list = sorted(str2_list)\n    # Initialize a counter for swaps\n    swaps = 0\n    # Loop through the first list and compare with the sorted second list\n    for i in range(len(str1_list)):\n        # If the elements are not equal, swap the elements in the first list\n        if str1_list[i] != sorted_str2_list[i]:\n            # Find the index of the element in the second list that should be swapped\n            swap_index = str2_list.index(sorted_str2_list[i])\n            # Swap the elements in the first list\n            str1_list[i], str1_list[swap_index] = str1_list[swap_index], str1_list[i]\n            # Increment the swap counter\n            swaps += 1\n    # Return the total number of swaps required\n    return swaps\n",
        "test": "assert min_Swaps(\"00101\",\"10101\") == 1 # example 2",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n",
        "test": "assert tuple_size((1,)) == sys.getsizeof(1)",
        "num_ids": 303,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    if not arr1:\n        return arr2[k-1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    idx1 = min(k//2, len(arr1)) - 1\n    idx2 = k - idx1 - 2\n    if arr1[idx1] < arr2[idx2]:\n        return find_kth(arr1[idx1+1:], arr2, k-idx1-1)\n    else:\n        return find_kth(arr1, arr2[idx2+1:], k-idx2-1)\n",
        "test": "assert find_kth([1, 2, 3], [4, 5, 6], 1) == 1",
        "num_ids": 1059,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to string to find its length\n    str_num = str(number)\n    num_length = len(str_num)\n    \n    # Initialize sum to zero\n    sum = 0\n    \n    # Find the sum of the cube of each digit\n    for digit in str_num:\n        sum += int(digit) ** num_length\n    \n    # Check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average\n",
        "test": "assert sum_average(1) == (1, 1.0) # should return (1, 1.0) for n = 1",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True",
        "num_ids": 257,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return it as the first repeated character\n        if char in char_count:\n            return char\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # If no repeated character is found, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"  # Test with repeated character",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for i in range(1, n+1):\n        ludics.append(i)\n        \n    for i in range(1, n+1):\n        j = i\n        while j <= n:\n            j += i\n            if j in ludics:\n                ludics.remove(j)\n    \n    return ludics\n",
        "test": "assert get_ludic(2) == [1]",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words and reverse the list\n    words = s.split()\n    words.reverse()\n    # Join the reversed words into a new string\n    return ' '.join(words)\n",
        "test": "assert reverse_words(\"hello world\") == \"world hello\"",
        "num_ids": 303,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True # prime number",
        "num_ids": 359,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians\n",
        "test": "assert radian_degree(0) == 0",
        "num_ids": 260,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"Hello, world!\", \"world\") == (\"world\", 7, 12)",
        "num_ids": 496,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 450,
        "indeed": true
    },
    {
        "number": 610,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k < 0 or k >= len(list1):\n        return list1  # k is out of range, return original list\n    else:\n        return list1[:k] + list1[k+1:]  # remove k'th element\n",
        "test": "assert remove_kth_element([], 0) == []",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_num = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_num:\n            max_num = row[N]\n    return max_num\n",
        "test": "assert max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 1) == 8",
        "num_ids": 546,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1,2],[3,4],[5,6]]) == [[1,3,5],[2,4,6]] # Test case 1",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum\n",
        "test": "assert cummulative_sum([1, 2, 3, 4]) == 10 # Test case 1",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1,2,3), (4,5,6), (7,8,9))) == [2, 5, 8]",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(i % j for i, j in zip(test_tup1, test_tup2))\n    return result\n",
        "test": "assert tuple_modulo((10, 20, 30), (3, 3, 3)) == (1, 2, 0)",
        "num_ids": 490,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0 or steps == 0:\n        return 0\n    elif d > steps:\n        return float('inf')\n    else:\n        return 1 + min_Jumps(steps-d, d)\n",
        "test": "assert min_Jumps(3, 2) == 1 # point is at (2, 0)",
        "num_ids": 545,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] != 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            result.append(float('nan'))\n    return result\n",
        "test": "assert div_list([1,2,3],[4,5,6]) == [0.25, 0.4, 0.5] # Testcase 1",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize empty string for storing numbers\n    num = ''\n    # initialize empty string for storing non-numeric characters\n    non_num = ''\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a digit, add it to the num string\n        if char.isdigit():\n            num += char\n        # otherwise, add it to the non_num string\n        else:\n            non_num += char\n    # return the non_num string followed by the num string\n    return non_num + num\n",
        "test": "assert move_num(\"abc\") == \"abc\"",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    max_subset = []\n    for num in a:\n        if not max_subset:\n            max_subset.append(num)\n        else:\n            for i in range(len(max_subset)):\n                if num % max_subset[i] == 0:\n                    max_subset.insert(i, num)\n                    break\n                elif max_subset[i] % num == 0:\n                    max_subset[i:i] = [num]\n                    break\n                elif i == len(max_subset) - 1:\n                    max_subset.append(num)\n    return len(max_subset)\n",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6]) == 6",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize two pointers for both arrays\n    i = j = 0\n    \n    # Initialize a variable to store the median\n    median = 0\n    \n    # Loop through the elements of the two arrays\n    while i < n and j < n:\n        # If the current element of arr1 is less than or equal to the current element of arr2\n        if arr1[i] <= arr2[j]:\n            median = arr1[i]\n            i += 1\n        else:\n            median = arr2[j]\n            j += 1\n        \n        # If the index of either pointer reaches the middle index, break the loop\n        if (i + j) == n:\n            break\n        \n    # If the length of the arrays is even, find the average of the middle two elements\n    if n % 2 == 0:\n        return (median + arr1[(n-1)//2])/2\n    else:\n        return median\n",
        "test": "assert get_median([1, 3, 5], [2, 4, 6, 7], 4) == 4.5",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([], 0) == [] # check if the function returns an empty list when given an empty input list",
        "num_ids": 364,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 195,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculating the height of the triangle using the formula 2r*sin(pi/3)\n    height = 2 * r * math.sin(math.pi/3)\n    # Calculating the base of the triangle using the formula r/sin(pi/3)\n    base = r / math.sin(math.pi/3)\n    # Calculating the area of the triangle using the formula 0.5 * base * height\n    area = 0.5 * base * height\n    # Returning the area of the triangle\n    return area\n",
        "test": "assert triangle_area(2) == 4.0",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    if end == None:\n        end = len(array)\n    if start > end:\n        return None\n    if start == end:\n        if start not in array:\n            return start\n        else:\n            return None\n    \n    mid = (start + end) // 2\n    \n    if array[mid] == mid + 1:\n        return find_First_Missing(array, mid+1, end)\n    else:\n        return find_First_Missing(array, start, mid)\n",
        "test": "assert find_First_Missing([]) == 0",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 267,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a new list with only even numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list",
        "test": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # unpack the tuple into x and y\n    x, y = ele\n    # add adjacent coordinates to the list\n    sub.extend([(x-1, y), (x+1, y), (x, y-1), (x, y+1)])\n    # return the list of adjacent coordinates\n    return sub\n",
        "test": "assert adjac((1,2)) == [(2,2),(1,3),(0,2),(1,1),(-1,3),(-1,1)]",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace spaces with underscores and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_list = []\n    non_zero_list = []\n    for num in num_list:\n        if num == 0:\n            zero_list.append(num)\n        else:\n            non_zero_list.append(num)\n    return non_zero_list + zero_list\n",
        "test": "assert move_zero([0, 0, 0, 0, 0, 1]) == [1, 0, 0, 0, 0, 0]",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i]^arr[j]\n    return sum\n",
        "test": "assert pair_xor_Sum([1,2,3],3) == 6 # XOR of (1,2) and (1,3) and (2,3) is 1 ^ 2 ^ 3 = 0. So, the answer is 0 + 0 + 0 = 0",
        "num_ids": 480,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for i in range(len(iterable))]\n",
        "test": "assert heap_sort([]) == []",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return math.ceil(wci)\n",
        "test": "assert wind_chill(15, 5) == 1",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam([]) == 0 # empty list",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n",
        "test": "assert remove_parenthesis(\"hello (world)\") == \"hello \"",
        "num_ids": 288,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Check if n is positive or zero\n    if n <= 0:\n        return None\n    else:\n        # Formula for nth nonagonal number\n        return (n * (n + 1)) // 2",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle(\"The quick brown fox jumps over the laziest dog.\") == True ",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        k = n\n    i = 0\n    while i < k/2:\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n        i += 1\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 2) == [2, 1, 3, 4, 5] # reversing array upto index 2",
        "num_ids": 641,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict,)\n    return test_tup\n",
        "test": "assert add_dict_to_tuple((\"apple\", \"banana\"), {\"orange\": 1, \"grape\": 2}) == (\"apple\", \"banana\", {\"orange\": 1, \"grape\": 2})",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[n-1][n-1]/(2*(n-1)+1)",
        "test": "assert maxAverageOfPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 6.0",
        "num_ids": 1200,
        "indeed": true
    },
    {
        "number": 722,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float\n    (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        height, weight = students[student]\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n",
        "test": "assert filter_data({'Alice': (1.65, 60), 'Bob': (1.75, 70), 'Charlie': (1.85, 80)}, 1.7, 65) == {'Bob': (1.75, 70), 'Charlie': (1.85, 80)}",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3, \"Test case 1 failed\"",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = base ** power\n    sum_of_digits = 0\n    for digit in str(result):\n        sum_of_digits += int(digit)\n    return sum_of_digits\n",
        "test": "assert power_base_sum(3,4) == 9 ",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches\n",
        "test": "assert extract_quotation(\"She said 'Hello World'\") == \"Hello World\"",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((1,2,3,4)) == (2,6,12)",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]  # test case 1",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([1, 1, 2, 3, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * h\n",
        "test": "assert lateralsurface_cone(2,3) == 18.84955592153876",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,\\s.]+'\n    return re.sub(pattern, ':', text)\n",
        "test": "assert replace_specialchar(\"Hello World\") == \"Hello:World\"",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    result = -1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        if A[mid] == x:\n            result = mid\n            end = mid - 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n            \n    return result\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 638,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        curr = 1\n        for j in range(i, n):\n            curr *= arr[j]\n            ans += curr\n    return ans",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 225 ",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_middle_bits(n):\n    '''\n    This function toggles all the bits of the number except the first and the last bit.\n    '''\n    return ((n ^ (n << 1)) & ~(1 << 0) & ~(1 << 31))\n",
        "test": "assert set_middle_bits(0b1111111) == 0b1101011 # Toggle middle bits of 127",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "test": "assert left_insertion([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('aStr1ng') == True",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 325,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize variables\n    index = 1\n    count = 0\n\n    # Loop until the number of digits of triangular number is less than n\n    while True:\n        count += index\n        num_digits = math.log10(count) + 1\n\n        # Check if the number of digits of triangular number is equal to n\n        if num_digits == n:\n            return index\n\n        # Increment index\n        index += 1\n",
        "test": "assert find_Index(1) == 1",
        "num_ids": 463,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Creating an empty dictionary\n    result_dict = {}\n\n    # Looping through the tuple using a step of 2 (to get adjacent elements)\n    for i in range(0, len(test_tup), 2):\n        # Adding the adjacent elements as key-value pairs to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n\n    # Returning the resulting dictionary\n    return result_dict\n",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a given string are the same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same(\"a\") == True",
        "num_ids": 390,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (3 ** 0.5) / 2 * (side ** 2)\n    return area\n",
        "test": "assert area_tetrahedron(2) == math.sqrt(2/3)",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    m = m % n  # To handle cases where m > n\n    \n    # Reverse the whole list\n    list = list[::-1]\n    \n    # Reverse the first m elements\n    start = 0\n    end = m - 1\n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n    \n    # Reverse the remaining n-m elements\n    start = m\n    end = n - 1\n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n    \n    return list\n",
        "test": "assert rotate_right([1,2,3,4,5], 2) == [4,5,1,2,3]",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n",
        "test": "assert check_none(('a', None)) == True",
        "num_ids": 295,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result",
        "test": "assert divisible_by_digits(10, 100) == [12, 15, 20, 21, 33, 36, 45, 50, 60, 72, 80, 81, 90]",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return (r**2)/2 * (a/360) * math.pi\n",
        "test": "assert sector_area(2, 90) == math.pi/2",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    return L[m][n][o]",
        "test": "assert lcs_of_three('abcd', 'bd', 'bcde') == 'bd'  # The common subsequence 'bd' is the longest",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)\n",
        "test": "assert capital_words_spaces('PythonProgramming') == 'Python Programming'",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)\n",
        "test": "assert sort_numeric_strings(['5', '3', '1', '2', '4']) == ['1', '2', '3', '4', '5']",
        "num_ids": 428,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, 4, 5]",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n    \n    if left_child < n and arr[left_child] < arr[i]:\n        return False\n    \n    if right_child < n and arr[right_child] < arr[i]:\n        return False\n    \n    return True\n\n\ndef check_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True\n",
        "test": "assert check_min_heap_helper([4, 3, 2, 10, 12, 1, 5], 0) == False",
        "num_ids": 861,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # slice the first K tuples from the sorted list\n    min_k_records = test_list[:K]\n\n    # sort the K tuples in descending order based on the second element of each tuple\n    min_k_records.sort(key=lambda x: x[1], reverse=True)\n\n    return min_k_records\n",
        "test": "assert min_k([(5, 'apple'), (3, 'banana'), (1, 'cherry'), (7, 'date'), (2, 'elderberry')], 1) == [(1, 'cherry')]",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list\n",
        "test": "assert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]",
        "num_ids": 630,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Remove duplicates and sort the list\n    numbers = sorted(set(numbers))\n    # Return the second smallest number\n    return numbers[1]\n",
        "test": "assert second_smallest([1,2,3,4,5]) == 2",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[^b]*b+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one('ab') == True",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Count the number of pairs of reverse strings in a list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result_dict = {}\n    for sublist in list1:\n        if tuple(sublist) not in result_dict:\n            result_dict[tuple(sublist)] = 1\n        else:\n            result_dict[tuple(sublist)] += 1\n    return result_dict\n",
        "test": "assert unique_sublists([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == {(1, 2, 3): 2, (4, 5, 6): 1}",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if \".\" in num:\n        decimal_part = num.split(\".\")[1]\n        if len(decimal_part) == 2:\n            if decimal_part.isdigit():\n                return True\n    return False\n",
        "test": "assert is_decimal(\"123.45\") == True",
        "num_ids": 444,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        return len(set(arr)) == 1\n",
        "test": "assert unique_Element([1,2,3,4,5]) == False # list with multiple distinct elements",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [4, 6, 9, 11]:\n        return True  # April, June, September, and November have 30 days\n    elif monthnum3 == 2:\n        return False  # February has either 28 or 29 days, depending on the year\n    else:\n        return False  # all other months have 31 days\n",
        "test": "assert check_monthnumber_number(1) == False",
        "num_ids": 452,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n    \n    # Iterate over the sorted array and compare adjacent elements\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff\n",
        "test": "assert find_min_diff([10, 20, 30, 40, 50], 5) == 10  # difference between 10 and 20 is 10",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"\") == 0",
        "num_ids": 262,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Function to check if a number is polite\n    def is_polite_num(num):\n        temp = num\n        count = 0\n        while temp > 0:\n            count += 1\n            temp //= 10\n        return count <= 3\n    \n    # Function to generate polite numbers\n    def generate_polite_num(n):\n        num = 2\n        count = 0\n        while count < n:\n            if is_prime(num) and is_polite_num(num):\n                count += 1\n            num += 1\n        return num - 1\n    \n    # Return the nth polite number\n    return generate_polite_num(n)\n",
        "test": "assert is_polite(1) == 2",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pair = (l1[i], l1[i+1])\n        pairs.append(pair)\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n    The funtion gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    num_dict = {}\n    \n    for num in arr:\n        complement = sum - num\n        if complement in num_dict:\n            count += num_dict[complement]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n            \n    return count\n",
        "test": "assert get_pairs_count([1, 3, 5, 7, 9], 10) == 2 # should return 2, pairs (1, 9) and (3, 7)",
        "num_ids": 595,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n",
        "test": "assert Diff([1,2,3], [1,2]) == [3]",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 ",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    \n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    \n    if not stack:\n        return True\n    else:\n        return False\n",
        "test": "assert check_expression(\"(a+b)*(c-d)\") == True ",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Remove words with length k\n    new_words = [word for word in words if len(word) != K]\n    \n    # Join the new words into a string\n    new_test_str = ' '.join(new_words)\n    \n    return new_test_str\n",
        "test": "assert remove_length(\"Python programming\", 4) == \"Python programming\"",
        "num_ids": 458,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = list(re.finditer(pattern, text))\n    if not matches:\n        return None\n    else:\n        return [(match.start(), match.group()) for match in matches]\n",
        "test": "assert occurance_substring(\"hello world\", \"llo\") == [(2, 4)] ",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 4, 4, 5, 6, 7, 8, 9]) == False",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i] not in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0 # No vowels with neighbors in the word \"world\"",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    return sum(unique_elements)\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 393,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result\n",
        "test": "assert pack_consecutive_duplicates([1,1,1,2,3,3,4,4,4]) == [[1,1,1],[2],[3,3],[4,4,4]]",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        if tuple(sublist) in result:\n            result[tuple(sublist)] += 1\n        else:\n            result[tuple(sublist)] = 1\n    return result",
        "test": "assert unique_sublists([[1, 2, 3], [1, 2, 3], [4, 5, 6]]) == {(1, 2, 3): 2, (4, 5, 6): 1} ",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create an empty list to store all the combinations\n    all_combinations = []\n\n    # Iterate over all the combinations of length 2 to n\n    for r in range(2, len(test_list)+1):\n        # Find all the combinations of length r\n        combinations_list = list(combinations(test_list, r))\n\n        # Iterate over each combination in the list\n        for combo in combinations_list:\n            # Calculate the sum of the combination\n            combo_sum = sum(combo)\n\n            # Add the sum to the list of all combinations\n            all_combinations.append(combo_sum)\n\n    return all_combinations\n",
        "test": "assert find_combinations([]) == []",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even and False otherwise.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n",
        "test": "assert count_divisors(6) == True # True because 6 has divisors 1,2,3,6 (count of divisors is 4, which is even)",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            for k in range(i, j+1, 1):\n                sum += arr[k]\n    return sum\n",
        "test": "assert odd_length_sum([1,3,5,7,9]) == 25",
        "num_ids": 454,
        "indeed": true
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b [0, 255] range to [0, 1] range\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # Find the maximum and minimum values of r, g, b\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the difference between max and min\n    diff = max_value - min_value\n\n    # Calculate H, S, V values\n    h = 0\n    s = 0 if max_value == 0 else (diff / max_value)\n    v = max_value\n\n    # Calculate H value\n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = (60 * ((g - b) / diff) + 360) % 360\n    elif max_value == g:\n        h = (60 * ((b - r) / diff) + 120) % 360\n    elif max_value == b:\n        h = (60 * ((r - g) / diff) + 240) % 360\n\n    # Return HSV values\n    return round(h, 2), round(s, 2), round(v, 2)\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) # black",
        "num_ids": 1396,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    for num in list1:\n        if num % 2 != 0:\n            odd_num = num\n            break\n    \n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None",
        "test": "assert mul_even_odd([2, 4, 3, 6]) == 6",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to a list of strings\n    test_list = test_str.strip('()').split(',')\n\n    # Convert the list of strings to a list of integers\n    int_list = [int(i) for i in test_list]\n\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "test": "assert right_insertion([1, 3, 4, 6, 9], 5) == 3",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbb\") # should return True",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_list + [test_str])\n    return new_tup\n",
        "test": "assert new_tuple([], 'world') == ('world',)",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 6, 4, 8, 10]) == True",
        "num_ids": 365,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function removes tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result += list(item)\n        else:\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert remove_nested((1,2,3,4)) == (1,2,3,4)",
        "num_ids": 469,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n            count += count_list(item)\n    return count\n",
        "test": "assert count_list([[1,2,3], [4,5], [6,7,8]]) == 3",
        "num_ids": 400,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n",
        "test": "assert last([1, 2, 3, 4, 5], 3) == 2 # testing for last occurrence of 3 in sorted array [1, 2, 3, 4, 5]",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    return pattern.search(text) is not None\n",
        "test": "assert text_starta_endb(\"aab\") == True",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(dict_):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict_:\n        total += dict_[key]\n    return total\n",
        "test": "assert return_sum({}) == 0",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum\n",
        "test": "assert sum_odd(1) == 1  # Test for single odd number",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        result += arr[i]\n    return result\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # convert n to binary\n    n = bin(n)[2:]\n    # add leading zeros to make it 32 bit\n    n = '0'*(32-len(n)) + n\n    # rotate d bits to the left\n    d = d % 32\n    n = n[d:] + n[:d]\n    # convert back to integer\n    n = int(n, 2)\n    return n\n",
        "test": "assert left_rotate(2345, 1) == 4690",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    if count == 3:\n        return 3\n    elif count == 2:\n        return 2\n    elif count == 1:\n        return 1\n    else:\n        return 0\n",
        "test": "assert test_three_equal(1,2,3) == 0 # no equal numbers",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    \n    # Find the minimum element and its index\n    min_element = arr[0]\n    min_index = 0\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n            min_index = i\n    \n    # Count the number of rotations required\n    return min_index\n",
        "test": "assert count_rotation([1, 2, 3, 4]) == 0 # Test 2",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 2:\n        return True\n    \n    left = 1\n    right = n\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if mid * mid == n:\n            return True\n        \n        if mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return False\n",
        "test": "assert is_perfect_square(4) == True # 4 is a perfect square",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2,4]) == True",
        "num_ids": 261,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    max_sum = -float('inf')\n    max_list = []\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    \n    for char in test_str:\n        if char.isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n            \n    return max_count\n",
        "test": "assert max_run_uppercase(\"Hello\") == 1",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 323,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n",
        "test": "assert check_K(('a','b','c','k','e'), 'k') == True",
        "num_ids": 369,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            result = False\n            break\n    return result\n",
        "test": "assert check_smaller((1,2,3),(0,3,2)) == False",
        "num_ids": 458,
        "indeed": true
    }
]