[
    {
        "number": 2,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)\n",
        "test": "assert similar_elements((1, 2, 3), (2, 3, 4)) == {2, 3}",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(2) == False",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums) for i in range(n)], reverse=True)\n",
        "test": "assert heap_queue_largest([3, 7, 1, 9, 4, 8, 5, 2, 6], 0) == [] # Test case 4",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the input number is a power of two or not.\n    '''\n    if x == 0:\n        return False\n    while x != 1:\n        if x % 2 != 0:\n            return False\n        x = x // 2\n    return True\n",
        "test": "assert is_Power_Of_Two(0) == False",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words\n",
        "test": "assert find_char_long(\"\") == []",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = [num**2 for num in nums]\n    return squares\n",
        "test": "assert square_nums([2, 3, 4]) == [4, 9, 16]",
        "num_ids": 475,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Rotations(string):\n    n = len(string)\n    for i in range(n):\n        if string[i:] + string[:i] == string:\n            return i\n    return n\n",
        "test": "assert find_Rotations(\"hello\") == 0 ",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        first = s.find(ch)\n        last = s.rfind(ch)\n        if first == last:\n            s = s.replace(ch, '', 1)\n        else:\n            s = s[:first] + s[first+1:last] + s[last+1:]\n    return s\n",
        "test": "assert remove_Occ(\"python\", \"o\") == \"pythn\"",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the sum of each row and store it in a list\n    row_sums = [sum(row) for row in M]\n    # Use the built-in sorted() function to sort the row sums and indices\n    sorted_sums_indices = sorted(enumerate(row_sums), key=lambda x: x[1])\n    # Create a new matrix with the sorted rows\n    sorted_M = []\n    for index, _ in sorted_sums_indices:\n        sorted_M.append(M[index])\n    return sorted_M\n",
        "test": "assert sort_matrix([[6, 5, 4], [3, 2, 1], [9, 8, 7]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]",
        "num_ids": 1027,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 2\n    return volume\n",
        "test": "assert find_Volume(2, 3, 4) == 12",
        "num_ids": 372,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_perimeter(a):\n    '''\n    This function takes the side length of a square as input and returns its perimeter.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(4) == 16",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list to store the frequency of each character in the second string\n    freq = [0] * NO_OF_CHARS\n    for ch in string:\n        freq[ord(ch)] += 1\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate through each character in the first string\n    for ch in string:\n        # If the character is not present in the second string, add it to the result list\n        if freq[ord(ch)] == 0:\n            result.append(ch)\n        else:\n            # Decrement the frequency of the character in the second string\n            freq[ord(ch)] -= 1\n    \n    # Return the result list as a string\n    return ''.join(result)\n",
        "test": "assert str_to_list('abcdef', 'def') == ['a', 'b', 'c']",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    num_set = set()\n    for num in arraynums:\n        if num in num_set:\n            return True\n        else:\n            num_set.add(num)\n    return False\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False ",
        "num_ids": 535,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Convert the given number to binary and reverse it\n    binary_x = bin(x)[2:][::-1]\n\n    # Count the number of consecutive 1's in the reversed binary form\n    count = 0\n    for bit in binary_x:\n        if bit == '1':\n            count += 1\n        else:\n            break\n\n    # Check if the number is woodall or not\n    if x == 2**count - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(10) == False",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # converting number to string\n    str_num = str(num)\n    # reversing the string\n    rev_num = str_num[::-1]\n    # converting reversed string to integer\n    rev_num = int(rev_num)\n    # checking if the given number is one less than twice its reverse\n    if num == rev_num * 2 - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(13) == False ",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
        "test": "assert find_Max_Num([1, 4, 3, 2]) == 4321",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(10, -5) == True",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "test": "assert is_octagonal(1) == 1",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(x) for x in s[i:j]) == j-i:\n                count += 1\n    return count\n",
        "test": "assert count_Substrings(\"123\") == 1 ",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for num in xs:\n        if smallest is None or num < smallest:\n            smallest = num\n    return smallest\n",
        "test": "assert smallest_num([3, 5, 1, 8, 2]) == 1",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = abs(test_list[i+1] - test_list[i])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 4, 7, 2, 10]) == 8",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n",
        "test": "assert subject_marks([('Maths', 90), ('Science', 80), ('Social', 70)]) == [('Social', 70), ('Science', 80), ('Maths', 90)] ",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if type(item) == list:\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1,2,3,4,5]) == 15",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def bell_number(n):    \n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = 1\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    # Check if the array is increasing or decreasing\n    increasing = decreasing = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            increasing = False\n        if A[i] < A[i+1]:\n            decreasing = False\n    \n    # Check if the array is monotonic\n    if increasing or decreasing:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # converting lists to strings for easy comparison\n    str_l = ''.join(str(i) for i in l)\n    str_s = ''.join(str(i) for i in s)\n    # checking if sublist exists in the list\n    if str_s in str_l:\n        return True\n    else:\n        return False\n",
        "test": "assert is_sublist([1,2,3,4,5], [1,2,3]) == True",
        "num_ids": 650,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input: # If input is an empty list or tuple\n        return True # Return True as there are no tuples to compare\n    \n    first_len = len(Input[0]) # Get the length of the first tuple\n    \n    for i in Input:\n        if len(i) != first_len: # If length of any tuple is not equal to first_len\n            return False # Return False as the tuples are not of equal length\n    \n    return True # If all tuples have same length, return True\n",
        "test": "assert find_equal_tuple((1, 2, 3), (4, 5, 6), (7, 8, 9)) == True",
        "num_ids": 622,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums\n",
        "test": "assert comb_sort([]) == []",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    for i in range(1, int(n**0.5)+1):\n        j = n - i*i\n        if j < 0:\n            return False\n        if (int(j**0.5))**2 == j:\n            return True\n    return False\n",
        "test": "assert dif_Square(10) == True  # 10 = 3^2 - 1^2",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the length of colors and patterns are equal\n    if len(colors) != len(patterns):\n        return False\n\n    # Initialize a dictionary to store the pattern sequence\n    pattern_dict = {}\n\n    # Iterate through the patterns and store the sequence in the dictionary\n    for i, pattern in enumerate(patterns):\n        if pattern not in pattern_dict:\n            pattern_dict[pattern] = colors[i]\n\n    # Check if the sequence of colors follows the pattern sequence\n    for i, pattern in enumerate(patterns):\n        if colors[i] != pattern_dict[pattern]:\n            return False\n\n    return True\n",
        "test": "assert is_samepatterns(['red', 'green', 'blue'], ['solid', 'stripe', 'dotted']) == True",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(4, 8, 12), (6, 12, 18), (9, 18, 27), (12, 24, 36)], 6) == [(6, 12, 18), (12, 24, 36)]",
        "num_ids": 981,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(11) == True",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return f\"{s} has an even length of {len(s)}\"\n    else:\n        return f\"{s} has an odd length of {len(s)}\"\n",
        "test": "assert word_len('programming') == False # False because length of 'programming' is even",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n",
        "test": "assert tetrahedral_number(1) == 1  # Test for n=1",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * (1**3) # checks for radius = 1",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum%26)\n",
        "test": "assert get_Char('abc') == 'r' # addition of ASCII values % 26 is 195 (which corresponds to 'r') ",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[sequence[i-1]] + sequence[i - sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n-1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    This function calculates the surface area of a sphere using the formula 4*pi*r^2, where r is the radius of the sphere.\n    \"\"\"\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area\n",
        "test": "assert surfacearea_sphere(2) == 50.26548245743669",
        "num_ids": 514,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1))\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 335,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n",
        "test": "assert merge_dictionaries_three({'a':1, 'b':2}, {'c':3, 'd':4}, {'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}",
        "num_ids": 985,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 2, 3, 4]) == {1: 1, 2: 2, 3: 2, 4: 1}",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables for closest number and its distance\n    closest_num = float('-inf')\n    closest_dist = float('inf')\n    # iterate over numbers from 1 to N-1\n    for num in range(1, N):\n        # calculate the absolute distance between num and N\n        dist = abs(num - N)\n        # if distance is closer than current closest distance, update closest number and distance\n        if dist < closest_dist:\n            closest_num = num\n            closest_dist = dist\n    # return closest number\n    return closest_num\n",
        "test": "assert closest_num(7) == 6",
        "num_ids": 615,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'cherry']) == 6",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False",
        "test": "assert find_substring('hello world', 'hello') == True",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Convert the given number to a string\n    n_str = str(n)\n    \n    # Check if the length of the string is less than 2\n    if len(n_str) < 2:\n        return False\n    \n    # Loop through the digits of the string\n    for i in range(len(n_str) - 1):\n        if n_str[i] == n_str[i + 1]:\n            return False\n    \n    return True\n",
        "test": "assert is_undulating(12321) == True",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert power(2, 3) == 8",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(1, 2), (3, 4), (5, 1), (7, 6)]) == 5",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') # set min_length to infinity initially\n    \n    # iterate through each list in the given list of lists\n    for sublist in lst:\n        # update the min_length if the current sublist is shorter than the current min_length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    \n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3],[4,5],[6,7,8,9]]) == 2",
        "num_ids": 758,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def divisor(n):\n    \"\"\"\n    Returns the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(10) == 4 # 1, 2, 5, 10",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    freq_dict = {}\n    for item in flattened_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "test": "assert frequency_lists([]) == {} # should return an empty dictionary.",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result /= len(numbers)\n    return result\n",
        "test": "assert multiply_num([0, 1, 2, 3]) == 0.0",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary or '0'\n",
        "test": "assert decimal_to_binary(10) == '1010'",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    num_str = str(num)\n    n = len(num_str)\n    for i in range(n // 2):\n        if num_str[i] != num_str[-1-i]:\n            # check if the next smallest palindrome can be obtained by incrementing the middle digit(s)\n            if num_str[i] == '9':\n                num_str = num_str[:i] + '0' + num_str[i+1:-1] + '1'\n            else:\n                num_str = num_str[:i] + chr(ord(num_str[i]) + 1) + num_str[i+1:-1] + chr(ord(num_str[i]) + 1)\n            break\n    else:\n        # check if the next smallest palindrome is the next integer\n        if num_str[-1] == '9':\n            num_str = '1' + '0'*(n-1) + '1'\n        else:\n            num_str = num_str[:-1] + chr(ord(num_str[-1]) + 1) + num_str[-1] + '1'\n    return int(num_str)\n",
        "test": "assert next_smallest_palindrome(99) == 101",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return sorted(arr)[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case = words[0] + ''.join([w.capitalize() for w in words[1:]])\n    return camel_case\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    elif n == 0 or m > n:\n        return 0\n    else:\n        return (m * eulerian_num(n-1, m-1)) + (n * eulerian_num(n-1, m))\n",
        "test": "assert eulerian_num(1, 1) == 1",
        "num_ids": 682,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"orange\"], [\"pear\", \"grape\", \"strawberry\"]]) == [[\"apple\", \"banana\", \"orange\"], [\"grape\", \"pear\", \"strawberry\"]]",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, True]) == 3",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup += tuple(test_list)\n    return test_tup\n",
        "test": "assert add_lists([1,2,3], (4,5,6)) == (4,5,6,1,2,3)",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for i in range(len(num1)):\n        merged_list.append(num1[i])\n    for i in range(len(num2)):\n        merged_list.append(num2[i])\n    for i in range(len(num3)):\n        merged_list.append(num3[i])\n    return sorted(merged_list)",
        "test": "assert merge_sorted_list([1,3,5],[2,4,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9] # positive test case",
        "num_ids": 1004,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        if int(s,2) % 2 == 1:\n            count += 1\n        s = bin(int(s,2) // 2)[2:].zfill(len(s))\n    return count\n",
        "test": "assert odd_Equivalent('1011', 3) == 2",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for i in range(1, len(nestedlist)):\n        common_elements = common_elements.intersection(set(nestedlist[i]))\n    return list(common_elements)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3]",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 322,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for d in list1:\n        if d:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}, {}, {}]) == True # List of empty dictionaries",
        "num_ids": 412,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a given tuple of positive integers into a single integer.\n    '''\n    num_str = ''.join(str(i) for i in nums)\n    return int(num_str)\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 432,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([[1, 2], [\"3\", 4.5]]) == [[1.0, 2.0], [3.0, 4.5]]",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"apple banana\") == [\"apple\", \"banana\"]",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif arr[0] != arr[1]:\n        return arr[0]\n    elif arr[n-1] != arr[n-2]:\n        return arr[n-1]\n    else:\n        for i in range(2, n-2):\n            if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n                return arr[i]\n",
        "test": "assert search([1,1,2,2,3,3,4,4,5,6,6]) == 5",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def max_product_tuple(list1):\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1] - list1[i][1] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2), (3,-4), (-5,6)]) == 12",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_of_factors(n):\n        factors = []\n        for i in range(1, n):\n            if n % i == 0:\n                factors.append(i)\n        return sum(factors)\n\n    total = 0\n    for i in range(1, limit+1):\n        if i != sum_of_factors(i) and i == sum_of_factors(sum_of_factors(i)):\n            total += i\n    return total\n",
        "test": "assert amicable_numbers_sum(1000) == 504",
        "num_ids": 786,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_num = complex(a, b)\n    return cmath.phase(complex_num)\n",
        "test": "assert angle_complex(3, 4) == 0.92729521800161224",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in string:\n        if i == '0':\n            count_0 += 1\n        elif i == '1':\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "test": "assert find_length('101') == 1  # Any sub-string with one 0 and one 1 is fine",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1, a+1):\n        if a%i == 0 and b%i == 0:\n            sum += i\n    return sum\n",
        "test": "assert sum(12,18) == 12 # common divisors of 12 and 18 are 6 and 2, so their sum is 6+2=8",
        "num_ids": 818,
        "indeed": true
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(5, 3) == 15",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into a list of words\n    long_words = [] # create an empty list to store long words\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(4, [\"hi\", \"my\", \"name\", \"is\"]) == []",
        "num_ids": 635,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a square matrix as input and returns True if it is a magic square, otherwise False.\n    \"\"\"\n    n = len(my_matrix)\n\n    # calculate the sum of the first row\n    row_sum = sum(my_matrix[0])\n\n    # check if all rows have the same sum\n    for i in range(1, n):\n        if sum(my_matrix[i]) != row_sum:\n            return False\n\n    # calculate the sum of the first column\n    col_sum = sum(my_matrix[j][0] for j in range(n))\n\n    # check if all columns have the same sum\n    for j in range(n):\n        if sum(my_matrix[i][j] for i in range(n)) != col_sum:\n            return False\n\n    # check if the diagonal sums are equal\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n\n    if diag_sum1 != diag_sum2:\n        return False\n\n    # if all checks passed, the matrix is a magic square\n    return True\n",
        "test": "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 9]]) == False",
        "num_ids": 1266,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_items = [key for key, value in freq_dict.items() if value == max_freq]\n    return max_items\n",
        "test": "assert max_occurrences([1, 1, 1, 2, 2, 2, 3, 3, 3]) == 2",
        "num_ids": 814,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    str_vowels = [char for char in str1 if char in vowels]\n    str_vowels.reverse()\n    result = \"\"\n    i = 0\n    for char in str1:\n        if char in vowels:\n            result += str_vowels[i]\n            i += 1\n        else:\n            result += char\n    return result\n",
        "test": "assert reverse_vowels(\"yummy\") == \"yummy\"",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''.join(str(i) for i in tup1)\n    return str1\n",
        "test": "assert tup_string(()) == \"\"",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert sum_negativenum([1,2,-3,4,-5]) == -8 ",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 306,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    \n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n            \n    if count_zero == 0:\n        return 0\n    else:\n        return count_zero / count_non_zero\n",
        "test": "assert zero_count([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.0 ",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0:\n        if n & 1 == 1 and n != 1:\n            return False\n        n >>= 1\n    return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(6) == False",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n",
        "test": "assert circle_circumference(0) == 0",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result\n",
        "test": "assert extract_singly([[1,2], [3,4], [5]]) == {1,2,3,4,5} # positive test case ",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the index of the maximum element in the remaining unsorted list.\n        max_idx = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Move the maximum element to the beginning of the unsorted list.\n        nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        # Move the maximum element to its final position in the sorted list.\n        nums[:i+1] = reversed(nums[:i+1])\n    return nums\n",
        "test": "assert pancake_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5] # test case 2",
        "num_ids": 976,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[4,2,6],[7,2,9]) == 1",
        "num_ids": 682,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0 ",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([10, 5, 15, 0, 20]) == 20",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple,\n    or return None if no solution exists.\n    \"\"\"\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    elif b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n    else:\n        # Use the extended Euclidean algorithm to find the solution.\n        s, old_s = 0, 1\n        t, old_t = 1, 0\n        r, old_r = b, a\n        \n        while r != 0:\n            q = old_r // r\n            old_r, r = r, old_r - q * r\n            old_s, s = s, old_s - q * s\n            old_t, t = t, old_t - q * t\n            \n        if n % old_r == 0:\n            return (old_s * (n // old_r), old_t * (n // old_r))\n        else:\n            return None\n",
        "test": "assert find_solution(3, 4, 15) == (1, 3)",
        "num_ids": 1070,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]  # Test case 1",
        "num_ids": 554,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2+1):\n        total += n - 2*i\n    return total\n",
        "test": "assert sum_series(5) == 5 + 3 + 1 # n=5",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*s*l)/(4*tan(pi/l))\n    return area\n",
        "test": "assert area_polygon(6, 6) == 36*tan(pi/6)",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer n as input and returns True if the sum of divisors of n is equal to the sum of divisors of n+1, otherwise it returns False.\n    '''\n\n    # sum of divisors of n\n    div_sum_n = 1\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n // i == i:\n                div_sum_n += i\n            else:\n                div_sum_n += i + n // i\n\n    # sum of divisors of n+1\n    div_sum_n1 = 1\n    for i in range(2, int(math.sqrt(n+1))+1):\n        if (n+1) % i == 0:\n            if (n+1) // i == i:\n                div_sum_n1 += i\n            else:\n                div_sum_n1 += i + (n+1) // i\n\n    # compare the two sums\n    if div_sum_n == div_sum_n1:\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(15) == False # 1+3+5+15 = 24",
        "num_ids": 1073,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_char_position(str1):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == chr(i + 97):\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"a\") == 1 # should return 1 for the character \"a\" at position 0 ",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([2, 4, 1, 3]) == 2  # should return 2 for the pairs (2, 4) and (4, 1)",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(1) == 1",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def frequency(a,x):\n    \"\"\"\n    This function takes two arguments: a list 'a' and a number 'x'. It returns the number of occurrences of 'x' in 'a'.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9], 5) == 1  # check if the frequency of 5 is 1 in the given list",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    # calculating the sum of the given range\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    \n    return sum\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9 ",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p",
        "test": "assert perimeter_pentagon(2) == 10",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"\") == 0",
        "num_ids": 436,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(isinstance(x, type(test_tuple[0])) for x in test_tuple)\n",
        "test": "assert check_type((1, 2, 3)) == True  # All elements are integers",
        "num_ids": 563,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Returns True if x is the majority element in the sorted array arr, otherwise False.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 4, 4, 4, 5, 6], 9, 6) == False",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Set_Bits(n):\n    # Count the number of set bits (binary digits with value 1) in n\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Removes the characters with odd index values of a given string.\n    \"\"\"\n    return string[::2]\n",
        "test": "assert odd_values_string('hello') == 'hlo'",
        "num_ids": 379,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n",
        "test": "assert min_of_three(3, 5, 2) == 2",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if (n & i) != 0:\n            return False\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(3, 0, 1) == False    # 3  = b11, so all bits are set in the range [0,1]",
        "num_ids": 959,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # separate the array into negative and positive parts\n    neg = [x for x in arr[:n] if x < 0]\n    pos = [x for x in arr[:n] if x >= 0]\n    # combine the two parts in the desired order\n    arr[:n] = neg + pos\n    return arr\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, -5, 6], 0) == [-1, 2, -3, 4, -5, 6]",
        "num_ids": 1197,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character,\n    and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "test": "assert replace_blank(\"hello world\", \"*\") == \"hello*world\"",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 5) == [1, 1, 1, 1, 1]  # case 3: all elements are the same",
        "num_ids": 751,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h",
        "test": "assert lateralsuface_cylinder(1, 1) == 6.283185307179586",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert volume_cube(2) == 8 # Test case for cube with side length 2",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def even_bit_set_number(n):\n    '''\n    This function takes in a number n and returns a new number with all even bits of n set to 1.\n    '''\n    # convert the number to binary\n    binary = bin(n)[2:]\n    \n    # set all even bits to 1\n    for i in range(1, len(binary), 2):\n        if binary[i] == '0':\n            binary = binary[:i] + '1' + binary[i+1:]\n    \n    # convert the binary string back to an integer\n    return int(binary, 2)\n",
        "test": "assert even_bit_set_number(1) == 1",
        "num_ids": 793,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2), (5, 6)]) == {(1, 2): 2, (3, 4): 1, (5, 6): 1}",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_of_substrings(s):\n    n = len(s)\n    # Initialize a variable to store the count of substrings\n    count = 0\n    # Loop through all possible substrings of the given string\n    for i in range(n):\n        for j in range(i, n):\n            # Increment the count for each non-empty substring\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"\") == 0",
        "num_ids": 783,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 33,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        count = 0\n        for i in range(1, m+1):\n            count += get_total_number_of_sequences(i, n-1)\n        return count\n",
        "test": "assert get_total_number_of_sequences(10,6) == 13 # [2,4,6,8,10], [2,4,7,9,10], [2,5,7,9,10], [2,5,8,9,10], [3,5,7,9,10], [3,5,8,9,10], [3,6,7,9,10], [3,6,8,9,10], [3,6,8,10], [3,6,9,10], [3,7,8,9,10], [3,7,8,10] ",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) > 0:\n        list1.pop()\n    list1.extend(list2)\n    return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5]) == [1, 2, 4, 5]",
        "num_ids": 589,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"Hello World\") == 11",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.floor(math.sqrt(N))\n    return (root+1)**2\n",
        "test": "assert next_Perfect_Square(10) == 16   # next perfect square of 10 is 16",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    # Find the maximum increasing subsequence sum using dynamic programming\n    dp = [arr[0]] * n\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + arr[i], arr[i])\n    max_inc_sum = max(dp)\n    # Find the maximum decreasing subsequence sum using dynamic programming\n    dp = [arr[-1]] * n\n    for i in range(n-2, -1, -1):\n        dp[i] = max(dp[i+1] + arr[i], arr[i])\n    max_dec_sum = max(dp)\n    # Return the maximum of the two sums\n    return max(max_inc_sum, max_dec_sum)\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def babylonian_squareroot(number):\n    if number < 0:\n        return \"Error: Can't compute square root of negative numbers\"\n    elif number == 0 or number == 1:\n        return number\n    else:\n        guess = number/2\n        for i in range(10):\n            guess = (guess + number/guess)/2\n        return guess\n",
        "test": "assert babylonian_squareroot(0) == 0",
        "num_ids": 596,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def lps(str): \n    n = len(str)\n    # Create a table to store results of subproblems\n    L = [[0 for x in range(n)] for x in range(n)]\n    # All substrings of length 1 are palindrome of length 1\n    for i in range(n):\n        L[i][i] = 1\n    # Check for sub-string of length 2\n    for i in range(n - 1):\n        if str[i] == str[i + 1]:\n            L[i][i + 1] = 2\n    # Check for lengths greater than 2. \n    # k is length of substring\n    for k in range(3, n + 1):\n        # Fix the starting point\n        for i in range(n - k + 1):\n            # Get the ending point of substring from starting point i and length k\n            j = i + k - 1\n            # If first and last characters are same, then check for remaining substring\n            if str[i] == str[j]:\n                L[i][j] = L[i + 1][j - 1] + 2\n            else:\n                # If not same, then check for maximum of two cases\n                L[i][j] = max(L[i][j - 1], L[i + 1][j])\n    # Return the length of LPS\n    return L[0][n - 1]\n",
        "test": "assert lps(\"abba\") == 4 # the string itself is a palindrome",
        "num_ids": 1215,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n",
        "test": "assert harmonic_sum(4) == 2.083333 # should return 2.083333 for n=4",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Convert the arrays to sets to remove duplicates and find the intersection\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1.intersection(set2)\n    # Convert the intersection set back to a list and return it\n    return list(intersection)\n",
        "test": "assert intersection_array([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X(('apple', 'banana', 'cherry'), 'a') == 0",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(element)\n        new_lst.append(lst[i])\n    return new_lst\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n",
        "test": "assert convert((-1, 0)) == (1.0, 3.141592653589793)",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "test": "assert count_integer([]) == 0",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Generate all combinations (with repetition) of the elements of a list and return a list of tuples.\n    '''\n    return list(combinations_with_replacement(lst, n))\n",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)] ",
        "num_ids": 1723,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(3,5) == (5,3) # test with two positive numbers",
        "num_ids": 389,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # create two empty lists to store the maximum elements from both tuples\n    max_list1 = []\n    max_list2 = []\n\n    # loop through the first tuple and compare each element with the corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_list1.append(test_tup1[i])\n            max_list2.append(test_tup2[i])\n        else:\n            max_list1.append(test_tup2[i])\n            max_list2.append(test_tup1[i])\n\n    # convert the maximum lists to tuples and return them\n    return tuple(max_list1), tuple(max_list2)\n",
        "test": "assert maximize_elements((-10,-20,-30),(-40,-50,-60)) == (-10,-20,-30)",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def is_newman_shanks_williams(n):\n    \"\"\"\n    Returns True if n can be expressed as a sum of two consecutive squares.\n    \"\"\"\n    i = 0\n    j = 1\n    while i**2 + j**2 < n:\n        if (i + j) % 2 == 0:\n            i, j = (i + j) // 2, (i + j) // 2 + 1\n        else:\n            i, j = (i + j + 1) // 2, (i + j) // 2 + 1\n    return i**2 + j**2 == n\n\ndef newman_prime(n):\n    \"\"\"\n    Write a function to find the nth Newman\u2013Shanks\u2013Williams prime number.\n    \"\"\"\n    primes = []\n    num = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime and is_newman_shanks_williams(num):\n            primes.append(num)\n        num += 1\n    return primes[-1]",
        "test": "assert newman_prime(4) == 137 # fourth Newman-Shanks-Williams prime number is 137",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"The tuples must have the same length\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            result.append(float('inf') if test_tup1[i] == 0 else float('-inf'))\n        else:\n            result.append(test_tup1[i] / test_tup2[i])\n    \n    return tuple(result)\n",
        "test": "assert division_elements((1, 2, 3), (4, 5, 6)) == (0.25, 0.4, 0.5) # True",
        "num_ids": 866,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return \"Invalid input. Age cannot be negative or zero.\"\n    elif h_age <= 1:\n        return 10.5\n    elif h_age <= 2:\n        return 24\n    elif h_age <= 3:\n        return 27\n    elif h_age <= 4:\n        return 30\n    else:\n        return 30 + (h_age - 4) * 4\n",
        "test": "assert dog_age(2) == 24",
        "num_ids": 461,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l**2\n    return surface_area\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_Sum(n):   \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 1\n    while count < n:\n        if num % 2 != 0:\n            sum += num ** 2\n            count += 1\n        num += 1\n    return sum\n",
        "test": "assert square_Sum(3) == 35  # Sum of squares of first 3 odd numbers: 1^2 + 3^2 + 5^2 = 35 ",
        "num_ids": 574,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 1\n        prev = 1\n        for i in range(2, n+1):\n            current = prev_prev + prev\n            prev_prev = prev\n            prev = current\n        return current\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value(\"a\") == 97 # small letter a",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_even_and_even_index(arr):   \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i%2 == 0 and arr[i]%2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30",
        "num_ids": 767,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n",
        "test": "assert even_Power_Sum(8) == 48800 # 2^5 + 4^5 + 6^5 + 8^5 + 10^5 + 12^5 + 14^5 + 16^5 = 48800",
        "num_ids": 860,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((1,2,3),(2,4,6)) == (-1, -2, -3)",
        "num_ids": 697,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for k in range(0, n//2 + 1):\n        coeff = math.comb(n, k)\n        if coeff % 2 == 0:\n            sum += coeff\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(2) == 2 # n = 2, sum = 2 (1, 1) ",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r * r * h\n    return volume\n",
        "test": "assert volume_cylinder(1,1) == 3.14159",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def dict_filter(d, n):\n    \"\"\"\n    Filter a dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in d.items() if v >= n}\n",
        "test": "assert dict_filter({'a': 5, 'b': 3, 'c': 7}, 5) == {'a': 5, 'c': 7}",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def count_first_elements(test_tup):\n    count_dict = {}\n    for i in range(len(test_tup)):\n        if test_tup[i] not in count_dict:\n            count_dict[test_tup[i]] = i\n    return count_dict\n",
        "test": "assert count_first_elements((5, 4, 3, 2, 1)) == 0",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_num_decagonal(n):\n    '''\n    Determines whether a number is a decagonal number.\n    '''\n    # Calculate the nth decagonal number using the formula: n * (9 * n - 7) / 2\n    decagonal_n = n * (9 * n - 7) / 2\n    \n    # Check if the nth decagonal number is equal to the given number\n    if decagonal_n == n:\n        return True\n    else:\n        return False\n",
        "test": "assert is_num_decagonal(1) == 1",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements in the list are unique, otherwise it returns False.\n    \"\"\"\n    return len(set(test_list)) == len(test_list)\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n    \"\"\"\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n",
        "test": "assert sub_list([1, 2, 3], [2, 2, 2]) == [-1, 0, 1] # Example 1",
        "num_ids": 600,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert integer to string\n    n_str = str(n)\n    # create a dictionary to store the frequency of each digit\n    freq_dict = {}\n    for digit in n_str:\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n    # iterate over the dictionary and check if frequency is less than or equal to the digit itself\n    for digit in freq_dict:\n        if int(digit) < freq_dict[digit]:\n            return False\n    return True\n",
        "test": "assert validate(12345) == True  # All digits are unique",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item != element:\n            return False\n    return True\n",
        "test": "assert check_element([1, 1, 1, 1, 1], 1) == True",
        "num_ids": 435,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(bb|bbb)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three(\"\") == False",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create the modified array by repeating the given array k times\n    modified_array = a * k\n    \n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Loop through the modified array and find the maximum sum of a contiguous subarray\n    for i in range(n*k):\n        current_sum += modified_array[i]\n        \n        # Update the maximum sum if the current sum is greater than it\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # Reset the current sum to 0 if it becomes negative\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -5], 5, 2) == -1",
        "num_ids": 1299,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**2\n    return sum",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif k == 1:\n        return 1\n    else:\n        return (k * count_no_of_ways(n-1, k-1)) + (k-1 * count_no_of_ways(n-1, k)) + (k-1 * count_no_of_ways(n-2, k))\n",
        "test": "assert count_no_of_ways(6, 3) == 140",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(10,3) == 3",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the hypotenuse of the triangle\n    hypotenuse = math.sqrt((w ** 2) + (h ** 2))\n    \n    # Return the result\n    return hypotenuse\n",
        "test": "assert otherside_rightangle(3, 4) == 5.0",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]  # assume first element is the max\n    for i in range(1, len(listval)):\n        if isinstance(listval[i], (int, float)) and isinstance(max_num, (int, float)):\n            # both are numbers, compare them directly\n            if listval[i] > max_num:\n                max_num = listval[i]\n        elif isinstance(listval[i], str) and isinstance(max_num, str):\n            # both are strings, compare them alphabetically\n            if listval[i] > max_num:\n                max_num = listval[i]\n        elif isinstance(listval[i], (int, float)):\n            # current element is a number, max_num is a string\n            max_num = listval[i]\n    return max_num\n",
        "test": "assert max_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
        "num_ids": 659,
        "indeed": true
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_div(12) == 28  # 1+2+3+4+6+12",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def merge(left, right):\n    i, j = 0, 0\n    res = []\n    inv_count = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            res.append(left[i])\n            i += 1\n        else:\n            res.append(right[j])\n            j += 1\n            inv_count += len(left) - i\n    res += left[i:]\n    res += right[j:]\n    return res, inv_count\n\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr, 0\n    mid = len(arr) // 2\n    left, left_inv = merge_sort(arr[:mid])\n    right, right_inv = merge_sort(arr[mid:])\n    merged, merge_inv = merge(left, right)\n    return merged, left_inv + right_inv + merge_inv\n\n\ndef get_Inv_Count(arr):\n    sorted_arr, inv_count = merge_sort(arr)\n    return inv_count\n",
        "test": "assert get_Inv_Count([1,2,3,4,5]) == 0 # no inversions in a sorted array",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flattens a nested list structure.\n    \"\"\"\n    flat_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n",
        "test": "assert flatten_list([1, 2, [3, 4]]) == [1, 2, 3, 4]",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregate_dict = defaultdict(int)\n    for data in stdata:\n        aggregate_dict[data[0]] += data[1]\n    return max(aggregate_dict.values())\n",
        "test": "assert max_aggregate([('A', 10), ('B', 20), ('C', 15)]) == 20",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**(2*n)):\n        binary = bin(i)[2:].zfill(2*n)\n        if sum(int(binary[j]) for j in range(n)) == sum(int(binary[j]) for j in range(n, 2*n)):\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(0) == 1 # only one binary sequence of length 0",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "test": "assert dict_depth({'a':1}) == 1",
        "num_ids": 378,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    actual_index = index\n    for i in range(rotations):\n        j = 0\n        temp = arr[j]\n        for k in range(n-1):\n            arr[j] = arr[j+1]\n            j += 1\n        arr[j] = temp\n    return arr[actual_index]\n",
        "test": "assert find_Element([1,2,3,4,5],(0,5),0,1) == 2  # after 0 rotations, element at index 1 is 2",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def start_withp(words):\n    p_words = [word for word in words if word[0] == 'p']\n    return p_words[:2]\n",
        "test": "assert start_withp(['apple', 'banana', 'pear', 'pineapple']) == ['pear', 'pineapple']",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * (k+1)\n    dp[index] = a[index]\n    for i in range(index+1, k+1):\n        for j in range(i-1, index-1, -1):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j]+a[i])\n    return dp[k]\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 4) == 12",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n    \"\"\"\n    new_tuplex = ()\n    for i in range(m, n):\n        new_tuplex += (tuplex[i],)\n    return new_tuplex\n",
        "test": "assert colon_tuplex((1,2,3),0,1) == (1,)",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([-1, 2, 3, 4], [-5, 6, 7], 4) == [(28, 4), (21, 4), (18, 3), (16, 3)]",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(5,7) == 7",
        "num_ids": 300,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 399,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def set_left_most_unset_bit(n):\n    return n | (n + 1)\n",
        "test": "assert set_left_most_unset_bit(0b00000000) == 0b00000001 # check the case where all bits are unset",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cone and returns its volume.\n    \"\"\"\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cone(1,1) == math.pi/3 # checking for a cone with radius 1 and height 1",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    p = 1\n    while(p <= n):\n        p = p * 2\n    return p // 2\n",
        "test": "assert highest_Power_of_2(10) == 8 ",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n",
        "test": "assert add_string(['hello', 'world', 'test'], '{} ') == ['hello ', 'world ', 'test ']",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary\n    result = {}\n    \n    # Iterate through each element of the first list\n    for i in range(len(l1)):\n        # If the element is not already in the dictionary, add it and assign a dictionary as its value\n        if l1[i] not in result:\n            result[l1[i]] = {}\n        # Assign the value of the second list to the key of the nested dictionary\n        result[l1[i]][l2[i]] = l3[i]\n    \n    return result\n",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        max_sum = max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n        return max_sum",
        "test": "assert get_max_sum(40) == 64",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Given a list of lists, returns the list with the maximum length.\n    If there are multiple lists with the same maximum length, returns the first one.\n    \"\"\"\n    max_length = 0\n    max_list = None\n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == [4, 5, 6, 7]",
        "num_ids": 883,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1,2,3,4,5)) == True",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through the string again and return the first character with a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None\n",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string) is not None",
        "test": "assert check_char(\"apple\") == False",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # create a list of the three numbers\n    num_list = [a,b,c]\n    # sort the list\n    num_list.sort()\n    # find the median\n    if len(num_list) % 2 == 0:\n        median = (num_list[len(num_list)//2-1] + num_list[len(num_list)//2]) / 2\n    else:\n        median = num_list[len(num_list)//2]\n    return median\n",
        "test": "assert median_numbers(3, 2, 1) == 2",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        result.append(sum)\n    return result\n",
        "test": "assert sum_of_digits([0, 10, 20, 30, 40, 50]) == [0, 1, 2, 3, 4, 5] # test case 2",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize an empty list to hold the result\n    result = []\n    # Iterate through each element in the tuples\n    for i in range(len(test_tup1)):\n        # Perform bitwise xor operation on the elements\n        xor = test_tup1[i] ^ test_tup2[i]\n        # Append the result to the list\n        result.append(xor)\n    # Return the result as a tuple\n    return tuple(result)\n",
        "test": "assert bitwise_xor((1,0,1,0),(0,1,1,0)) == (1,1,0,0)",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)\n",
        "test": "assert extract_freq([]) == 0",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup1 = test_tup1[i]\n        tup2 = test_tup2[i]\n        if isinstance(tup1, tuple) and isinstance(tup2, tuple):\n            result.append(add_nested_tuples(tup1, tup2))\n        elif isinstance(tup1, tuple):\n            result.append(tup1[0] + tup2)\n        elif isinstance(tup2, tuple):\n            result.append(tup1 + tup2[0])\n        else:\n            result.append(tup1 + tup2)\n    return tuple(result)\n",
        "test": "assert add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)",
        "num_ids": 860,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(10,5) == 5 # when a > b",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1,2,3),2) == True ",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False",
        "test": "assert find_Parity(0) == False # zero should return False",
        "num_ids": 350,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number into a list of digits\n    digits = [int(d) for d in str(n)]\n    # Find the index of the first digit that is less than the digit next to it\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i-1]:\n        i -= 1\n    # If no such digit is found, the number is already the largest possible number\n    if i == 0:\n        return -1\n    # Find the index of the smallest digit to the right of the first digit that is less than the digit next to it\n    j = i\n    while j < len(digits) - 1 and digits[j+1] > digits[i-1]:\n        j += 1\n    # Swap the first and second smallest digits\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    # Reverse the digits after the first smallest digit\n    digits[i:] = digits[len(digits)-1:i-1:-1]\n    # Convert the list of digits back into an integer\n    result = int(''.join(str(d) for d in digits))\n    # Return the next bigger number\n    return result\n",
        "test": "assert rearrange_bigger(999) == -1",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heap.append((nums1[i] + nums2[j], nums1[i], nums2[j]))\n    heapq.heapify(heap)\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(heap)[1:])\n    return result\n",
        "test": "assert k_smallest_pairs([1, 2, 3], [4, 5, 6], 0) == []",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == 336",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf')\n    for val in listval:\n        if isinstance(val, (int, float)):\n            if val < min_val:\n                min_val = val\n    return min_val\n",
        "test": "assert min_val([3, 4, 1, 5, 2]) == 1",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 411,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-zA-Z0-9])', lambda match: match.group(1).upper(), word)\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]\n",
        "test": "assert remove_odd([1,2,3,4,5,6]) == [2,4,6]",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for tup in list1:\n        if len(tup) >= n:\n            result.append(tup[n-1])\n    return result\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 3) == 4",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Checks if any value in list1 exists in list2.\n    Returns True if there is overlap, False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False",
        "test": "assert overlapping([1, 2, 3, 4], [3, 4, 5, 6]) == True",
        "num_ids": 492,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_Product([1, 10, -5, 7]) == 70",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        elif tup[0] != common_element:\n            return None\n    return common_element\n",
        "test": "assert group_tuples([(1, 2), (1, 3), (1, 4)]) == 1",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"]) == \"elderberry\"",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 27,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    print(result)\n",
        "test": "assert round_and_sum([1.5, 2.5, 3.5]) == 22.5 ",
        "num_ids": 583,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(5) == 2*2*2 + 4*4*4 + 6*6*6 + 8*8*8 + 10*10*10 # should return 1300",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_string = delimiter.join(str(element) for element in test_tup)\n    return concatenated_string\n",
        "test": "assert concatenate_tuple(('a',)) == 'a'",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Average_Of_Cube(n):   \n    sum_of_cubes = 0\n    \n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        \n    average = sum_of_cubes / n\n    \n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1.0",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = ()\n    for string in test_tuple:\n        result += (string[-1],)\n    return result\n",
        "test": "assert extract_rear((\"abc\", \"def\", \"ghi\")) == (\"c\", \"f\", \"i\")  # check for strings with length greater than 1",
        "num_ids": 569,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 2) == 2",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Filter odd numbers from a list of integers.\n\n    Args:\n    nums: A list of integers.\n\n    Returns:\n    A list of integers containing only the odd numbers from the input list.\n    \"\"\"\n\n    return [num for num in nums if num % 2 != 0]\n",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return day + '-' + month + '-' + year\n    else:\n        return None\n",
        "test": "assert change_date_format('2021-10-01') == '01-10-2021'",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the length of the list\n    n = len(my_list)\n\n    # Initialize the gap\n    gap = n // 2\n\n    # Do the sorting\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n",
        "test": "assert shell_sort([4, 2, 9, 1, 5, 6]) == [1, 2, 4, 5, 6, 9]",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] & test_tup2[i])\n    return tuple(result)\n",
        "test": "assert and_tuples((True, True, False), (True, False, True)) == (True, False, False)",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # directrix is given by x = -b/2a\n    x = -b/(2*a)\n    return x\n",
        "test": "assert parabola_directrix(1, 3, 5) == -3.5  # y = x^2 + 3x + 5 ",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create sets of unique elements for each list\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check if there is any intersection between the two sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 546,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median\n",
        "test": "assert median_trapezium(4,4,3) == 4  # case 2: height < base1 = base2",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i >= number:\n            return False\n    return True\n",
        "test": "assert check_greater([1, 2, 3], 1) == False",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_match_one(\"a\") == None",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last_Digit(n):\n    return n % 10\n",
        "test": "assert last_Digit(1234) == 4",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [-2, -4]",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 389,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i] == test_list[j][::-1]) and (test_list[j] == test_list[i][::-1]):\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (2, 3), (4, 5), (6, 7)]) == 0 ",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    return int(''.join(map(str, L)))\n",
        "test": "assert multiple_to_single([1, 2, 3]) == 123",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(?:very|really|extremely|quite|most|much)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start()\n    else:\n        return -1\n",
        "test": "assert find_adverb_position(\"She climbed the stairs loudly in her heels.\") == (2, \"loudly\")",
        "num_ids": 1735,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n    return positive_count / len(nums)",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 5/5",
        "num_ids": 530,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_neg(list1):  \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None  # initializing largest as None\n    for num in list1:  \n        if num < 0:  # checking if number is negative\n            if largest is None:  # if largest is None, assign num to largest\n                largest = num\n            elif num > largest:  # if num is greater than largest, assign num to largest\n                largest = num\n    return largest  # returning the largest negative number\n",
        "test": "assert largest_neg([-5, -3, -1, 0, 2, 3]) == -1",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        result.append(tpl[:-K] if K < len(tpl) else ())\n    return result\n",
        "test": "assert trim_tuple([(1, 2, 3), (4, 5, 6)], 1) == [(1, 2), (4, 5)]",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(x * y for x, y in zip(test_tup1, test_tup2))\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)  # True",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for elem in lst:\n        if elem in count:\n            result[elem] = count[elem]\n        else:\n            result[elem] = 0\n    return result\n",
        "test": "assert count_Occurrence((\"apple\", \"banana\", \"cherry\", \"apple\"), []) == {}",
        "num_ids": 961,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]  # Testing with a list of positive integers",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def perrin(n):\n    \"\"\"\n    Returns the nth Perrin number.\n    \"\"\"\n    if n in (0, 1, 2):\n        return n\n    else:\n        return perrin(n-1) + perrin(n-2)\n\ndef cal_sum(n):\n    \"\"\"\n    Returns the sum of the first n Perrin numbers.\n    \"\"\"\n    return sum(perrin(i) for i in range(n+1))\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_string(str_list, length):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) == length:\n            extracted_strings.append(string)\n    return extracted_strings\n",
        "test": "assert extract_string(['a', 'b', 'c', 'd', 'e', 'f'], 0) == []",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 402,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 75) == 25",
        "num_ids": 485,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function finds the sum of even factors of a number n.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n",
        "test": "assert sumofFactors(10) == 12 ",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog\") == False",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Returns True if the given month number contains 31 days, False otherwise.\n    \"\"\"\n    if monthnum2 in (1, 3, 5, 7, 8, 10, 12):\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(4) == False # April has 30 days, so the output should be False",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp'] ",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([[1,2,3]]) == [1,2,3]",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(5, 10) == 50",
        "num_ids": 307,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)\n",
        "test": "assert remove_uppercase(\"\") == \"\"",
        "num_ids": 501,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list of sublists as input and returns a new list containing the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7]",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello World\") == 2  # check for a string with 2 uppercase characters",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import itertools\n\ndef combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(lst) + 1):\n        for comb in itertools.combinations(lst, i):\n            result.append(list(comb))\n    return result\n",
        "test": "assert combinations_list([]) == []",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        result = max(result, max_product)\n    \n    return result\n",
        "test": "assert max_subarray_product([-2, 0, -1]) == 0",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return values.count(n) == len(values)\n",
        "test": "assert check_value({\"a\": 1, \"b\": 1}, 1) == True  # Same value test",
        "num_ids": 622,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict\n",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n\n    n = len(arr)\n    max_product = 1\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(n):\n        if arr[i] > 0:\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        elif arr[i] == 0:\n            max_ending_here = 1\n            min_ending_here = 1\n        else:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product\n",
        "test": "assert max_product([1, 2, 3, 4, 5]) == 120 # when the subsequence is [1, 2, 3, 4, 5]",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def add_pairwise(test_tup):\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1,2,3,4,5)) == (3, 5, 7, 9)",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1,2,3], 5) == 1",
        "num_ids": 467,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the tuples into sets\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # convert the intersection set back to tuple and return it\n    return tuple(intersection)\n",
        "test": "assert tuple_intersection((1,2,3),(2,3,4)) == (2,3)",
        "num_ids": 1010,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char(\"hello\", \"l\", \"m\") == \"hemmo\"",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {k: v for k, v in sorted(dict1.items(), key=lambda item: item[1])}\n",
        "test": "assert sort_counter({'a': 1, 'b': 3, 'c': 2}) == {'b': 3, 'c': 2, 'a': 1}",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    min_num = nums[0]\n    max_num = nums[0]\n    \n    for num in nums:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    \n    return min_num + max_num\n",
        "test": "assert big_sum([1, 2, 3, 4, 5]) == 6 # Sum of the largest (5) and smallest (1) value is 6",
        "num_ids": 692,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HELLO\") == \"hello\"",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # use regex to find all lowercase substrings\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    # replace each lowercase substring with an empty string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    # return the modified string\n    return str1",
        "test": "assert remove_lowercase('12345') == '12345'",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 0: # if the number is negative, we need to remove the sign\n        n = abs(n)\n    while n >= 10:\n        n //= 10\n    return n\n",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in lst:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n",
        "test": "assert difference(0) == 0",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])&1:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([5, 6, 7, 8], 4) == 4",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n",
        "test": "assert toggle_string(\"hello\") == \"HELLO\"",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings so that we can iterate over their digits\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n\n    # Get the length of the longer integer\n    max_len = max(len(str_n1), len(str_n2))\n\n    # Pad the shorter integer with zeros to make it the same length as the longer integer\n    if len(str_n1) < max_len:\n        str_n1 = str_n1.zfill(max_len)\n    if len(str_n2) < max_len:\n        str_n2 = str_n2.zfill(max_len)\n\n    # Initialize the sum of the per-digit difference to zero\n    digit_diff_sum = 0\n\n    # Iterate over each digit of the integers and calculate the per-digit difference\n    for i in range(max_len):\n        diff = abs(int(str_n1[i]) - int(str_n2[i]))\n        digit_diff_sum += diff\n\n    return digit_diff_sum\n",
        "test": "assert digit_distance_nums(1234, 1234) == 0 # same numbers",
        "num_ids": 900,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum\n",
        "test": "assert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the tuples using + operator\n    combined_tuple = test_tup1 + test_tup2\n    # Convert the combined tuple to set to remove duplicates\n    combined_set = set(combined_tuple)\n    # Convert the set back to tuple\n    result_tuple = tuple(sorted(combined_set))\n    return result_tuple\n",
        "test": "assert union_elements((1, 2, 3), (3, 4, 5)) == (1, 2, 3, 4, 5)",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Find_Max_Length(lst):\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len\n",
        "test": "assert Find_Max_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"(.*?)\"', text)\n    return values\n",
        "test": "assert extract_values('The \"quick\" brown fox') == ['quick']",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + sum_digits(n//10)\n",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 468,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True  # sorted list",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "test": "assert empty_list(2) == [{}, {}]",
        "num_ids": 290,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['apple', 'orange', 'banana'], ['car', 'bus', 'train'], ['cat', 'dog', 'fish']]) == [['apple', 'banana', 'orange'], ['bus', 'car', 'train'], ['cat', 'dog', 'fish']]  # example 1",
        "num_ids": 948,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given list of numbers.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([]) == []",
        "num_ids": 811,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120 # product of 1, 2, 3, 4, 5",
        "num_ids": 592,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * (r + h)\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(0, 10) == 0",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # Check if B is an empty list, in which case it is always a sublist of A\n    if not B:\n        return True\n\n    # Iterate over A and try to match each element with the first element of B\n    for i in range(len(A) - len(B) + 1):\n        # If the first element of B is not found in A, skip to the next index\n        if A[i] != B[0]:\n            continue\n        # If the first element of B is found, check if the rest of B matches the slice of A starting from i\n        if A[i:i+len(B)] == B:\n            return True\n\n    # If no match was found, return False\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3], [1,2,3]) == True",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result = result * i % 10\n    return result\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9] ",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)\n",
        "test": "assert find_dissimilar((1, 2, 3), (1, 2, 3)) == ()",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for tpl in test_tuple:\n        if isinstance(tpl, tuple):\n            result.append(even_ele(tpl, even_fnc))\n        else:\n            if even_fnc(tpl):\n                result.append(tpl)\n    return tuple(result)\n",
        "test": "assert even_ele((2, 4, (3, 6, 7, 8), 10), lambda x: x%2==0) == (2, 4, (6, 8), 10) ",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * b) + (b * s) + (2 * (b * b))",
        "test": "assert surface_Area(8,6) == 145.52",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True # test empty dictionary",
        "num_ids": 375,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        result = 0\n        for i in range(num):\n            result += catalan_number(i) * catalan_number(num-i-1)\n        return result",
        "test": "assert catalan_number(1) == 1",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    adverb_pattern = r'\\b[a-zA-Z]+\\ly\\b'\n    adverbs = re.findall(adverb_pattern, text)\n    positions = [text.index(adv) for adv in adverbs]\n    \n    if len(adverbs) > 0:\n        return adverbs[0], positions[0]\n    else:\n        return None, None\n",
        "test": "assert find_adverbs(\"He always eats too much junk food.\") == ([\"always\"], [(4, 10)])",
        "num_ids": 734,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    min_heap = []\n\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    return sorted(min_heap, reverse=True)\n",
        "test": "assert expensive_items([], 0) == []",
        "num_ids": 725,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    return l[n:] + l[:n]\n",
        "test": "assert split_Arr([1,2,3,4,5], 2) == [3, 4, 5, 1, 2]",
        "num_ids": 648,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3)",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4 # Difference between 5 and 1 is 4",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if math.isqrt(i)**2 == i:\n            squares.append(i)\n    return squares\n",
        "test": "assert perfect_squares(0, 10) == [0, 1, 4, 9]",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n",
        "test": "assert polar_rect(0, 0) == (0, 0)",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1] # positive case",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 27,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the variable to store the sum of product of consecutive binomial coefficients\n    sum_product = 0\n    \n    # Loop through the range from k to n\n    for i in range(k, n+1):\n        # Calculate the binomial coefficient for nCi\n        bc = int(math.factorial(n)) // int(math.factorial(i)) // int(math.factorial(n-i))\n        \n        # Multiply the current binomial coefficient with the sum_product variable\n        sum_product += bc\n    \n    # Return the sum_product variable\n    return sum_product\n",
        "test": "assert binomial_Coeff(5,5) == 1 # n=5, k=5 should return 1",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"\\b0+(\\d)\", r\"\\1\", ip)\n",
        "test": "assert removezero_ip('01.02.03.04') == '1.2.3.4'",
        "num_ids": 629,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_found = False\n    odd_found = False\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0 and not even_found:\n            even_num = num\n            even_found = True\n        elif num % 2 != 0 and not odd_found:\n            odd_num = num\n            odd_found = True\n        \n        if even_found and odd_found:\n            break\n    \n    return abs(even_num - odd_num)\n",
        "test": "assert diff_even_odd([0, 2, 4, 6, 8, 1, 3, 5, 7, 9]) == 1 # first even is 0, first odd is 1, so the difference is 0-1 = -1",
        "num_ids": 936,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert both strings to lists\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # Initialize variables\n    i = 0\n    count = 0\n\n    # Iterate through both strings\n    while i < len(str1):\n        # If elements are not equal, swap them\n        if str1[i] != str2[i]:\n            j = i+1\n            while j < len(str1):\n                # If the element in str1 is equal to the element in str2\n                if str1[j] == str2[i]:\n                    # Swap the elements\n                    temp = str1[i]\n                    str1[i] = str1[j]\n                    str1[j] = temp\n                    # Increment the count\n                    count += 1\n                    break\n                j += 1\n        i += 1\n\n    # Check if the two strings are equal after swapping\n    if str1 == str2:\n        return count\n    else:\n        return -1\n",
        "test": "assert min_Swaps('10','10') == 0 # Same string",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)",
        "test": "assert tuple_size([(1,2,3)]) == sys.getsizeof((1,2,3)) # tuple with three elements",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Check if the length of arr1 is less than k\n    if len(arr1) < k:\n        return arr2[k-len(arr1)-1]\n\n    # Check if the length of arr2 is less than k\n    if len(arr2) < k:\n        return arr1[k-len(arr2)-1]\n\n    # Check if k is equal to 1\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    # Calculate the indices to consider in both arrays\n    idx1 = min(k//2, len(arr1)) - 1\n    idx2 = min(k//2, len(arr2)) - 1\n\n    # Check if the kth element is in the first array\n    if arr1[idx1] < arr2[idx2]:\n        return find_kth(arr1[idx1:], arr2, k-idx1-1)\n    else:\n        return find_kth(arr1, arr2[idx2:], k-idx2-1)\n",
        "test": "assert find_kth([1, 3, 5], [2, 4, 6], 1) == 1",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to string\n    number_str = str(number)\n    \n    # calculate the length of the string\n    n = len(number_str)\n    \n    # initialize the sum to 0\n    sum = 0\n    \n    # iterate over the string and calculate the sum of the cube of each digit\n    for digit in number_str:\n        sum += int(digit) ** n\n    \n    # check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(9) == True",
        "num_ids": 597,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Calculating the sum of the first n natural numbers using the formula n(n+1)/2\n    sum_numbers = (number * (number + 1)) // 2\n    \n    # Calculating the average of the first n natural numbers using the formula sum_numbers/number\n    average = sum_numbers / number\n    \n    # Returning the sum and average as a tuple\n    return (sum_numbers, average)\n",
        "test": "assert sum_average(5) == (15, 3.0)",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_Even(n):\n    '''\n    This function takes an integer as input and returns True if the number is even and False if the number is odd.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True  # True",
        "num_ids": 331,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Iterate through the string and return the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    # If no character is repeated, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic = [1]\n    for i in range(2, n+1):\n        is_ludic = True\n        for j in ludic:\n            if j > i // 2:\n                break\n            if i % j == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludic.append(i)\n    return ludic\n",
        "test": "assert get_ludic(3) == [1] # only 1 is a ludic number for n=3",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    # reverse the list of words\n    reversed_words = words[::-1]\n    # join the reversed words into a string and return it\n    return ' '.join(reversed_words)",
        "test": "assert reverse_words(\"hello world\") == \"world hello\"",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert radian_degree(0) == 0 # 0 degrees is 0 radians",
        "num_ids": 401,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start_index = match.start()\n        end_index = match.end()\n        matching_substring = text[start_index:end_index]\n        return matching_substring, start_index, end_index\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"The quick brown fox jumps over the lazy dog\", \"fox\") == (\"fox\", 16, 19)",
        "num_ids": 758,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_Number(0) == 1 ",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 610,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i != k:\n            new_list.append(list1[i])\n    return new_list\n",
        "test": "assert remove_kth_element([], 0) == []",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n\n    # Get the length of the list of lists\n    num_rows = len(test_list)\n\n    # Initialize a variable to store the max value\n    max_val = float('-inf')\n\n    # Iterate through each row of the matrix\n    for i in range(num_rows):\n        # Get the n'th value of the current row\n        nth_val = test_list[i][N]\n\n        # If the n'th value is greater than the current max value, update max_val\n        if nth_val > max_val:\n            max_val = nth_val\n\n    # Return the max value of the n'th column\n    return max_val\n",
        "test": "assert max_of_nth([[5, 3, 1], [2, 4, 6], [7, 8, 9]], 0) == 7",
        "num_ids": 877,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def merge(lst):\n    first = []\n    second = []\n    for sublist in lst:\n        first.append(sublist[0])\n        second.append(sublist[1])\n    return [first, second]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(sum(test_list[:i+1]))\n    return result\n",
        "test": "assert cummulative_sum([]) == []",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1,2,3), (4,5,6), (7,8,9))) == [2.0, 5.0, 8.0] # averages for each tuple are 2, 5, and 8, respectively.",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n",
        "test": "assert tuple_modulo((2, 4, 6), (3, 3, 3)) == (2, 1, 0)  # test case 1",
        "num_ids": 798,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d <= 0 or steps <= 0:\n        return \"Invalid Input\"\n    elif d == 1 or steps == 1:\n        return 1\n    elif d > steps:\n        return \"Not Possible\"\n    else:\n        # Initialize variables\n        jumps = [0] * (d+1)\n        for i in range(2, d+1):\n            jumps[i] = float('inf')\n            for j in range(1, steps+1):\n                if i-j >= 1 and jumps[i-j] != float('inf'):\n                    jumps[i] = min(jumps[i], jumps[i-j]+1)\n        return jumps[d]\n",
        "test": "assert min_Jumps(2, 1) == 1 # should return 1 since we can make a single jump of length 2 to reach (1, 0)",
        "num_ids": 880,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] != 0:\n            result.append(nums1[i] / nums2[i])\n        else:\n            result.append(float('nan'))\n    return result\n",
        "test": "assert div_list([1, 2, 3], [4, 5, 6]) == [0.25, 0.4, 0.5]  # Test case 1",
        "num_ids": 794,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_str = ''\n    char_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            char_str += char\n    return char_str + num_str\n",
        "test": "assert move_num(\"123\") == \"123\"",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def largest_subset(a):\n    a.sort(reverse=True)  # sort the list in descending order\n    subsets = []\n    max_subset = []\n    for num in a:\n        if not max_subset or all(num % x == 0 for x in max_subset):\n            max_subset.append(num)\n        else:\n            subsets.append(max_subset)\n            max_subset = [num]\n    subsets.append(max_subset)\n    max_size = max(len(s) for s in subsets)\n    return max_size\n",
        "test": "assert largest_subset([1,3,5,7]) == 1 # The largest subset is [1]",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = k = 0\n    median_arr = []\n    \n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median_arr.append(arr1[i])\n            i += 1\n        else:\n            median_arr.append(arr2[j])\n            j += 1\n        k += 1\n        \n        if k == n//2:\n            if n % 2 == 0:\n                return (median_arr[-1] + median_arr[-2])/2\n            else:\n                return median_arr[-1]\n        \n    while i < n:\n        median_arr.append(arr1[i])\n        i += 1\n        \n    while j < n:\n        median_arr.append(arr2[j])\n        j += 1\n        \n    if n % 2 == 0:\n        return (median_arr[-1] + median_arr[-2])/2\n    else:\n        return median_arr[-1]\n",
        "test": "assert get_median([1, 3, 5], [2, 4, 6, 7], 4) == 4.5 ",
        "num_ids": 1259,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3],1) == [1,2,3]",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"Hello World\") == \"HELLO WORLD\"",
        "num_ids": 354,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:  # if list has less than 2 elements, return the original list\n        return newList\n    else:\n        first_elem = newList[0]  # store the first element in a variable\n        last_elem = newList[-1]  # store the last element in a variable\n        newList[0] = last_elem  # assign the last element to the first position\n        newList[-1] = first_elem  # assign the first element to the last position\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # The base of the triangle is the diameter of the semicircle\n    base = 2 * r\n    # The height of the triangle is the distance from the center of the semicircle to the midpoint of the base.\n    height = r * (1 - math.sqrt(1 - (base/2)**2))\n    # The area of the triangle is half the product of base and height.\n    area = 0.5 * base * height\n    return area\n",
        "test": "assert triangle_area(4) == 22.2016543849055 ",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    \n    if start > end:\n        return None\n    \n    if start == end:\n        return array[start] + 1 if array[start] + 1 != array[start] else array[start] + 2\n    \n    mid = (start + end) // 2\n    \n    if array[mid] == mid:\n        return find_First_Missing(array, mid+1, end)\n    else:\n        return find_First_Missing(array, start, mid)\n",
        "test": "assert find_First_Missing([1,3,4,5,6,7,8]) == 2 # check if the function returns 2 for the input [1,3,4,5,6,7,8]",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    This function replaces all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")\n",
        "test": "assert replace_spaces('hello world') == 'hello%20world'",
        "num_ids": 389,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x-1, y-1), (x-1, y), (x-1, y+1),\n           (x, y-1), (x, y+1),\n           (x+1, y-1), (x+1, y), (x+1, y+1)]\n    return [coord for coord in adj if coord not in sub]\n",
        "test": "assert adjac((1,1)) == [(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)]",
        "num_ids": 744,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\")\n",
        "test": "assert replace_spaces(\"hello\") == \"hello\"",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = [i for i in num_list if i != 0] + [0] * num_list.count(0)\n    return num_list\n",
        "test": "assert move_zero([]) == []",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum\n",
        "test": "assert pair_xor_Sum([2,2,2,2],4) == 0 ",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n\nif __name__ == '__main__':\n    unsorted_list = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\n    sorted_list = heap_sort(unsorted_list)\n    print(sorted_list)\n",
        "test": "assert heap_sort([4, 3, 2, 10, 12, 1, 5, 6]) == [1, 2, 3, 4, 5, 6, 10, 12] # test case 1",
        "num_ids": 720,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount == actual_cost:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True # Check for no profit and no loss",
        "num_ids": 512,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # formula for wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    \n    # rounding to next integer\n    wc_int = math.ceil(wc)\n    \n    return wc_int\n",
        "test": "assert wind_chill(30, 10) == 7",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam(['jim', 'Kate', 'Tom']) == 7 # Test case 2",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n",
        "test": "assert remove_parenthesis(\"hello (world)\") == \"hello \"",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n",
        "test": "assert is_nonagonal(1) == 1 # 1st nonagonal number is 1",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expressions to find all words with 'z' in the middle\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    # Return True if there are any matches, False otherwise\n    return len(matches) > 0\n",
        "test": "assert text_match_wordz_middle(\"banana\") == False",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input[::-1]\n    else:\n        return input[:k][::-1] + input[k:]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict, )\n",
        "test": "assert add_dict_to_tuple(('a', 'b', 'c'), {'d': 1, 'e': 2}) == ('a', 'b', 'c', {'d': 1, 'e': 2})",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    rows = len(cost)\n    cols = len(cost[0])\n\n    dp = [[0 for _ in range(cols)] for _ in range(rows)]\n\n    dp[0][0] = cost[0][0]\n\n    for i in range(1, rows):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n\n    for j in range(1, cols):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n\n    for i in range(1, rows):\n        for j in range(1, cols):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n\n    return dp[rows-1][cols-1] / (rows + cols - 1)",
        "test": "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 10]]) == 6.0",
        "num_ids": 1347,
        "indeed": true
    },
    {
        "number": 722,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] >= h and data[1] >= w:\n            filtered_students[student] = data\n    return filtered_students\n",
        "test": "assert filter_data({'Alice': (160, 50), 'Bob': (170, 60), 'Charlie': (150, 45)}, 160, 50) == {'Alice': (160, 50), 'Bob': (170, 60)}",
        "num_ids": 1247,
        "indeed": true
    },
    {
        "number": 723,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3], [1, 2, 3]) == 3",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    This function calculates the sum of all digits of the base to the specified power.\n    \"\"\"\n    num = base ** power\n    sum_of_digits = 0\n    \n    while num != 0:\n        # Extract the last digit\n        digit = num % 10\n        \n        # Add the digit to the sum_of_digits\n        sum_of_digits += digit\n        \n        # Remove the last digit from the number\n        num = num // 10\n        \n    return sum_of_digits\n",
        "test": "assert power_base_sum(5, 6) == 15 # 5^6 = 15625 -> sum of digits is 1+5+6+2+5 = 19 -> 1+9 = 10 -> 1+0 = 1",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to extract the required values\n    matches = re.findall(r'\"(.*?)\"', text1)\n    # Return the matches as a list\n    return matches",
        "test": "assert extract_quotation('The book is called \"The Catcher in the Rye\"') == 'The Catcher in the Rye'",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12)",
        "num_ids": 782,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]",
        "num_ids": 605,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]",
        "test": "assert consecutive_duplicates([1, 1, 2, 2, 2, 3, 4, 4]) == [1, 2, 3, 4]",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef lateral_surface_area_cone(r, h):\n    '''\n    Calculate the lateral surface area of a cone.\n    \n    Parameters:\n    r: float, the radius of the cone\n    h: float, the height of the cone\n    \n    Returns:\n    float, the lateral surface area of the cone\n    '''\n    return math.pi * r * math.sqrt(r**2 + h**2)\n",
        "test": "assert lateralsurface_cone(2,math.sqrt(3)) == 12 * math.pi",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,.\\s]+'\n    return re.sub(pattern, ':', text)\n",
        "test": "assert replace_specialchar(\"hello world\") == \"hello:world\"",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A:\n        return -1\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    mod = 10**9 + 7\n    res = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product = (product * arr[j]) % mod\n            res = (res + product) % mod\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3,0]) == 26 # should be 26",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def set_middle_bits(n):\n    # toggle the middle bits of the number except the first and last bits\n    # find the number of bits in the given number\n    bits = n.bit_length()\n    # toggle all the bits from index 1 to index bits-2\n    for i in range(1, bits-1):\n        # toggle the bit at index i\n        n ^= (1 << i)\n    return n\n",
        "test": "assert set_middle_bits(0b1111) == 0b1111 # Testcase 4",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    return idx\n",
        "test": "assert left_insertion([1,2,3,4,5], 6) == 5",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str(\"elephant\") == True",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1/2\n    else:\n        return 1/n + geometric_sum(n-1)\n",
        "test": "assert geometric_sum(4) == 2.1428571428571428",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize a variable to store the index\n    index = 0\n    \n    # Initialize a variable to store the sum of first natural numbers\n    triangular_num = 0\n    \n    # Initialize a variable to store the number of digits in triangular number\n    num_digits = 0\n    \n    # Loop until we find the triangular number with n digits\n    while True:\n        # Increment the index\n        index += 1\n        \n        # Add the index to triangular_num\n        triangular_num += index\n        \n        # Get the number of digits in triangular number\n        num_digits = int(math.log10(triangular_num)) + 1\n        \n        # If the number of digits is equal to n, break out of the loop\n        if num_digits == n:\n            break\n            \n    # Return the index of smallest triangular number with n digits\n    return index\n",
        "test": "assert find_Index(1) == 1  # smallest triangular number with 1 digit is 1 with index 1 ",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict\n",
        "test": "assert tuple_to_dict(('apple', 'red', 'banana', 'yellow', 'cherry', 'red')) == {'apple': 'red', 'banana': 'yellow', 'cherry': 'red'}",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        for i in range(len(s)-1):\n            if s[i] != s[i+1]:\n                return False\n        return True\n",
        "test": "assert all_Characters_Same(\"aaa\") == True",
        "num_ids": 389,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = ((3 ** 0.5) / 4) * (side ** 2)\n    return area\n",
        "test": "assert area_tetrahedron(5) == 20*math.sqrt(2)/3",
        "num_ids": 500,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. \n    '''\n    n = len(list)\n    m = m % n\n    list = list[-m:] + list[:n-m]\n    return list\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 868,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, None, 2)) == True",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Returns a list of all numbers within the range [startnum, endnum] where every digit of the number divides the number evenly.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(123, 20) == []",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 33,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r * r * (a/360) * math.pi\n        return area\n",
        "test": "assert sector_area(0, 90) == 0 ",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    lcs = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n \n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    lcs[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lcs[i][j][k] = lcs[i-1][j-1][k-1] + 1\n                else:\n                    lcs[i][j][k] = max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])\n \n    return lcs[m][n][o]\n \n",
        "test": "assert lcs_of_three(\"ABCDGH\",\"AEDFHR\",\"ABHFRD\") == \"ADH\"",
        "num_ids": 1985,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)\n",
        "test": "assert capital_words_spaces(\"IBM\") == \"IBM\"",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=int)\n",
        "test": "assert sort_numeric_strings(['5', '1', '3', '2']) == ['1', '2', '3', '5']",
        "num_ids": 616,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1, 2, 3], (4)) == [1, 2, 3, 4]",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n\n    # Check if the given array represents min heap or not\n    for i in range(n):\n        # For every node, check if it is less than or equal to its children\n        if 2*i+1 < n and arr[i] > arr[2*i+1]:\n            return False\n        if 2*i+2 < n and arr[i] > arr[2*i+2]:\n            return False\n\n    return True\n",
        "test": "assert check_min_heap_helper([1, 2, 3, 4, 5, 6, 7], 2) == True",
        "num_ids": 948,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 641,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 21,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    # sorting the list based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n    # taking the first k elements from the sorted list\n    result = test_list[:K]\n    return result",
        "test": "assert min_k([(5, 2), (3, 1), (7, 4), (9, 8), (12, 10), (1, 6)], 3) == [(3, 1), (5, 2), (7, 4)] # returns correct result for given input",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(l1[i])\n    return index_list\n",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [5, 6, 7]) == []",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    first_min = second_min = float('inf')\n    for n in numbers:\n        if n < first_min:\n            second_min = first_min\n            first_min = n\n        elif n < second_min and n != first_min:\n            second_min = n\n            \n    return second_min if second_min != float('inf') else None\n",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_match_zero_one(\"a\") == None",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 794,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        else:\n            count_dict[sublist_tuple] += 1\n    return count_dict\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float(num)\n    except ValueError:\n        return False\n    else:\n        parts = num.split('.')\n        if len(parts) != 2 or len(parts[1]) != 2:\n            return False\n        if not parts[0].isdigit() or not parts[1].isdigit():\n            return False\n        return True\n",
        "test": "assert is_decimal(\"123.456\") == False ",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # If the list contains only one element, return True\n    if len(arr) == 1:\n        return True\n\n    # Create an empty set to store the unique elements of the list\n    unique = set()\n    # Iterate over the list and add each element to the set\n    for num in arr:\n        unique.add(num)\n    # If the length of the set is 1, then all the elements of the list are the same\n    if len(unique) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1,1,1,1,1]) == True",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the minimum difference variable\n    min_diff = float('inf')\n    # Iterate over the array and calculate the difference between adjacent elements\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        # Update the minimum difference if a smaller value is found\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1 # example 1",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def number_ctr(s):\n    '''\n    Count the number of digits in a given string.\n    '''\n    cnt = 0\n    for c in s:\n        if c.isdigit():\n            cnt += 1\n    return cnt\n",
        "test": "assert number_ctr(\"1234\") == 4",
        "num_ids": 320,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. \n    geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_polite_number(n):\n        count = 1\n        num = 1\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    return find_polite_number(n)\n",
        "test": "assert is_polite(2) == 2",
        "num_ids": 573,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3, 4]) == [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\n    The function gets as input a list of numbers and the sum.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff\n",
        "test": "assert Diff([1, 2, 3], [1, 2]) == [3] ",
        "num_ids": 535,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    num = 1\n    while count < n:\n        sum += num ** 4\n        count += 1\n        num += 2\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False",
        "test": "assert check_expression(\"\") == True  # empty expression should be balanced",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return \" \".join(result)\n",
        "test": "assert remove_length(\"The quick brown fox jumps over the lazy dog\", 10) == \"The quick brown fox jumps over the lazy dog\"",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.start(), match.group()))\n    if not result:\n        return None\n    return result\n",
        "test": "assert occurance_substring(\"hello world\", \"abc\") == None",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def odd_position(nums):\n    '''\n    Check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == True",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(1, len(test_str)-1):\n        if test_str[i] not in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0 # no characters are surrounded by vowels",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set of unique elements\n    unique_set = set(arr)\n    # create a list of unique elements\n    unique_list = list(unique_set)\n    # initialize the sum variable\n    sum = 0\n    # iterate over the unique list and add the element to the sum variable\n    for element in unique_list:\n        sum += element\n    # return the sum of non-repeated elements\n    return sum\n",
        "test": "assert find_sum([1,2,3,4,5]) == 15 # Positive test case with unique elements",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]\n",
        "test": "assert pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]",
        "num_ids": 892,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 27,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    result = {}\n    for sublist in list1:\n        if tuple(sublist) in result:\n            result[tuple(sublist)] += 1\n        else:\n            result[tuple(sublist)] = 1\n    return result\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1059,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = []\n    for i in range(len(test_list)+1):\n        for j in combinations(test_list, i):\n            if j:\n                comb.append(sum(j))\n    return comb\n",
        "test": "assert find_combinations([1, 2, 3, 4, 5, 6, 7]) == {(1, 2, 3, 4), (1, 2, 5), (1, 3, 4), (1, 6), (2, 3, 4), (2, 5), (3, 4)} ",
        "num_ids": 2241,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n",
        "test": "assert count_divisors(15) == True ",
        "num_ids": 493,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 36,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    \n    # Loop through all odd length subarrays and add their sum to the total sum\n    for i in range(n):\n        for j in range(i, n, 2):\n            subarray_sum = sum(arr[i:j+1])\n            sum += subarray_sum\n            \n    return sum\n",
        "test": "assert odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 225 # sum of all odd length subarrays = 1 + 3 + 5 + 7 + 9 = 25 + 49 = 100 + 121 = 225",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    if cmax == 0:\n        sat = 0\n    else:\n        sat = delta/cmax\n\n    sat = round(sat*100, 2)\n    val = round(cmax*100, 2)\n\n    return hue, sat, val\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) # black",
        "num_ids": 1319,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n            even_product *= i\n        else:\n            odd_count += 1\n            odd_product *= i\n            \n    if even_count > 0 and odd_count > 0:\n        return even_product * odd_product\n    elif even_count > 0:\n        return even_product\n    elif odd_count > 0:\n        return odd_product\n    else:\n        return None\n",
        "test": "assert mul_even_odd([1, 3, 5]) == 15",
        "num_ids": 708,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str.startswith('(') and test_str.endswith(')'):\n        test_str = test_str[1:-1]\n    if not test_str:\n        return ()\n    return tuple(int(x.strip()) for x in test_str.split(','))\n",
        "test": "assert tuple_str_int('(3, 5)') == (3, 5)",
        "num_ids": 623,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "test": "assert right_insertion([1, 2, 3, 4, 5], 6) == 5  # right insertion point is the end of the list",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a\\Wb{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three('ab') == False",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n",
        "test": "assert new_tuple([1, 2, 3], \"hello\") == (1, 2, 3, \"hello\")",
        "num_ids": 643,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2,3,4,5,6,7,9]) == False",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return tuple(remove_nested(x) for x in test_tup if not isinstance(x, tuple))\n    return test_tup\n",
        "test": "assert remove_nested((1,2,3)) == (1,2,3)",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1,2,3],[4,5,6]]) == 2  # Test case 1: list of lists with 2 lists",
        "num_ids": 541,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def last(arr, x):\n    \"\"\"\n    Given a sorted array arr and an element x, this function returns the last position of x in arr.\n    If x is not present in arr, the function returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    last_pos = -1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            last_pos = mid\n            left = mid + 1  # Look for x on the right side of mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return last_pos\n",
        "test": "assert last([1,2,3,4,5], 1) == 0  # element 1 is at the beginning of the sorted array",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 36,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_starta_endb('abb') == True",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "test": "assert return_sum({}) == 0",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 != 0:\n            sum += i\n    return sum\n",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert _sum([1,2,3,4,5]) == 15",
        "num_ids": 403,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate the bits of the given number n by d bits to the left.\n    Assumes that n is a 32-bit number.\n    \"\"\"\n    mask = (1 << 32) - 1  # mask to ensure that the number is treated as 32 bits\n    n &= mask\n    d &= mask  # ensure that d is also treated as a 32-bit number\n    return ((n << d) | (n >> (32 - d))) & mask\n",
        "test": "assert left_rotate(0, 1) == 0",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Removes all whitespaces from a given string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 368,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    nums = [x, y, z]\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                count += 1\n    \n    return count\n",
        "test": "assert test_three_equal(1, 1, 1) == 3",
        "num_ids": 536,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    pivot = find_pivot(arr, 0, n-1)\n    if pivot == -1:\n        return 0\n    return pivot\n\ndef find_pivot(arr, low, high):\n    if high < low:\n        return -1\n    if high == low:\n        return low\n    mid = int((low + high) / 2)\n    if mid < high and arr[mid] > arr[mid + 1]:\n        return mid\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return mid - 1\n    if arr[low] >= arr[mid]:\n        return find_pivot(arr, low, mid-1)\n    return find_pivot(arr, mid+1, high)\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 36,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    \n    # Taking the square root of the number and checking if it is an integer or not\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False\n",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 540,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def is_product_even(arr):\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([2,4,6]) == True",
        "num_ids": 500,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf') # set max_sum to negative infinity\n    max_list = None # initialize max_list to None\n    for lst in lists:\n        if sum(lst) > max_sum:\n            max_sum = sum(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1,2,3],[4,5,6],[7,8,9]]) == [7,8,9]",
        "num_ids": 872,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        max_run = max(max_run, current_run)\n    return max_run\n",
        "test": "assert max_run_uppercase(\"\") == 0 # empty string",
        "num_ids": 602,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([2, 4, 6, 8, 10]) is None",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((\"hello\", \"world\", \"python\", \"programming\"), \"java\") == False",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 36,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n",
        "test": "assert check_smaller((1, 2, 3), (0, 1, 2)) == True",
        "num_ids": 577,
        "indeed": true
    }
]