[
    {
        "number": 2,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return shared_elements\n",
        "test": "assert similar_elements(('apple', 'banana', 'orange', 'grape'), ('banana', 'orange', 'grapes', 'kiwi')) == {'banana', 'orange'}",
        "num_ids": 1131,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Returns True if n is not a prime number, otherwise returns False.\n    \"\"\"\n    if n <= 1:\n        return True\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    \n    return False\n",
        "test": "assert is_not_prime(0) == True",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return sorted([hq.heappop(nums) for i in range(n)], reverse=True)",
        "test": "assert heap_queue_largest([1, 1, 1, 1, 1], 3) == [1, 1, 1]",
        "num_ids": 1401,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0:\n        return False\n    return (x & (x - 1)) == 0\n",
        "test": "assert is_Power_Of_Two(0) == False",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog\") == ['quick', 'brown', 'jumps', 'over', 'lazy']",
        "num_ids": 1025,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert square_nums([1, 2, 3, 4]) == [1, 4, 9, 16]",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i:] + str[:i] == str:\n            return i\n    return n",
        "test": "assert find_Rotations(\"abcde\") == 0",
        "num_ids": 729,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch, '', 1) # remove first occurrence\n        s = s[::-1].replace(ch, '', 1)[::-1] # remove last occurrence\n    return s",
        "test": "assert remove_Occ('hello','h') == 'ello'",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Compute the sum of each row\n    row_sums = [sum(row) for row in M]\n    # Sort the row sums and the rows themselves by the row sums\n    sorted_sums, sorted_rows = (list(t) for t in zip(*sorted(zip(row_sums, M))))\n    # Return the sorted rows\n    return sorted_rows\n",
        "test": "assert sort_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]] # already sorted ",
        "num_ids": 1899,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculating the area of the triangular base\n    area = 0.5 * l * b\n\n    # Calculating the volume of the triangular prism\n    volume = area * h\n\n    return volume\n",
        "test": "assert find_Volume(0, 0, 0) == 0",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Returns True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    '''\n    pattern = r'^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(1) == 4",
        "num_ids": 505,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def remove_chars(str1, str2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize all characters as 0\n    present = [0] * NO_OF_CHARS\n    \n    # Mark the characters present in str2 as 1\n    for i in range(len(str2)):\n        present[ord(str2[i])] = 1\n        \n    # Remove characters from str1 which are present in str2\n    new_str = \"\"\n    for i in range(len(str1)):\n        if present[ord(str1[i])] == 0:\n            new_str += str1[i]\n            \n    return new_str\n",
        "test": "assert str_to_list(\"programming\", \"mg\") == \"prograiin\" # remove all m and g, return prograiin",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    nums_set = set(arraynums)\n    return len(nums_set) != len(arraynums)\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 4 or x == 8 or x == 16 or x == 32 or x == 64 or x == 128 or x == 256 or x == 512 or x == 1024:\n        return True\n    else:\n        return False\n",
        "test": "assert is_woodall(6) == False",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string, reverse it and convert it back to an integer\n    reverse_num = int(str(num)[::-1])\n    # Check if the number is one less than twice the reverse\n    if num == 2*reverse_num - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(122) == False # should return False",
        "num_ids": 995,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return int(''.join(map(str, arr)))\n",
        "test": "assert find_Max_Num([1, 3, 4, 5]) == 5431",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def opposite_Signs(x,y):  \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(5, -10) == True",
        "num_ids": 721,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "test": "assert is_octagonal(1) == 1 # 1st octagonal number is 1",
        "num_ids": 688,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(x) for x in s[i:j+1]) == j-i+1:\n                ans += 1\n    return ans\n",
        "test": "assert count_Substrings('987654321') == 1",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Return None if the list is empty\n    if not xs:\n        return None\n    # Initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    # Iterate through the list and update the smallest number if a smaller number is found\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    # Return the smallest number found in the list\n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3, 4, 5]) == 1",
        "num_ids": 723,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1346,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n",
        "test": "assert subject_marks([]) == []",
        "num_ids": 1406,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if data_list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # recursive case: if first element of data_list is a list, recurse on it\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    \n    # if first element of data_list is not a list, sum it with the rest of the list\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert recursive_list_sum([1, 2, 3]) == 6",
        "num_ids": 1303,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5  # all positive",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def bell_number(n):\n    bell = [[0 for j in range(n+1)] for i in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_number(0) == 1   # there is only one way to partition an empty set",
        "num_ids": 1058,
        "indeed": true
    },
    {
        "number": 68,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if not A:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(len(A) - 1):\n        if A[i] > A[i+1]:\n            increasing = False\n        elif A[i] < A[i+1]:\n            decreasing = False\n\n        if not increasing and not decreasing:\n            return False\n\n    return True\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5]) == True ",
        "num_ids": 1150,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    n = len(s)\n    for i in range(len(l) - n + 1):\n        if l[i:i+n] == s:\n            return True\n    return False\n",
        "test": "assert is_sublist([1, 2, 3, 4, 5], [1, 2]) == True",
        "num_ids": 1030,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return all(len(i) == len(Input[0]) for i in Input)\n",
        "test": "assert find_equal_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == True",
        "num_ids": 1060,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    size = len(nums)\n    gap = size\n    done = False\n    \n    while not done:\n        # update the gap to be 1/3 of its current size\n        gap = max(1, int(gap / 3))\n        \n        # swap adjacent elements that are out of order\n        done = True\n        for i in range(size - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                done = False\n    \n    return nums\n",
        "test": "assert comb_sort([5, 3, 8, 6, 7, 2]) == [2, 3, 5, 6, 7, 8]",
        "num_ids": 1530,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n/2)+1):\n        j = n - i**2\n        if j >= 0 and (int(j**0.5))**2 == j:\n            return True\n    return False\n",
        "test": "assert dif_Square(6) == False",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(patterns)):\n        if colors[i] != patterns[i]:\n            return False\n    return True\n",
        "test": "assert is_samepatterns(['red', 'blue', 'green'], ['A', 'B', 'B']) == False",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(2, 4, 6), (1, 2, 3), (4, 6, 8)], 2) == [(2, 4, 6), (4, 6, 8)]",
        "num_ids": 1613,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(22) == True  # True",
        "num_ids": 510,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\"\n",
        "test": "assert word_len('a') == False  # single length",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) // 6\n",
        "test": "assert tetrahedral_number(1) == 1  # the first tetrahedral number is 1",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi * (1 ** 3) # radius 1",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the ASCII value of the final character to 0\n    final_char_ascii = 0\n    \n    # Iterate through each character in the string\n    for char in strr:\n        # Add the ASCII value of the current character to the final character's ASCII value\n        final_char_ascii += ord(char)\n    \n    # Calculate the final character's ASCII value modulo 26\n    final_char_ascii %= 26\n    \n    # Convert the final character's ASCII value to a character\n    final_char = chr(final_char_ascii)\n    \n    # Return the final character\n    return final_char\n",
        "test": "assert get_Char('test') == 'i'",
        "num_ids": 1446,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            next_num = sequence[sequence[i-1]] + sequence[i-sequence[i-1]]\n            sequence.append(next_num)\n        return sequence[n-1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n",
        "test": "assert surfacearea_sphere(2) == 50.26548245743669",
        "num_ids": 765,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6}) != {'a': 1, 'b': 3, 'c': 4, 'd': 6} ",
        "num_ids": 1660,
        "indeed": true
    },
    {
        "number": 88,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict\n",
        "test": "assert freq_count([1,2,3,4,5]) == {1:1, 2:1, 3:1, 4:1, 5:1}",
        "num_ids": 1154,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = None\n    for i in range(N-1, 0, -1):\n        if i < N and i > closest:\n            closest = i\n    return closest\n",
        "test": "assert closest_num(1) == None",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def len_log(list1):\n    \"\"\"\n    Returns the length of the longest word in a list.\n    \"\"\"\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6",
        "num_ids": 817,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring('java', 'a') == True",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = str(n) # convert the number to string\n    prev_digit = n[0] # store the first digit\n    for i in range(1, len(n)):\n        if n[i] == prev_digit: # if the current digit is same as the previous digit\n            return False # then the number is not undulating\n        prev_digit = n[i] # update the previous digit\n    return True # if all digits are different, then the number is undulating\n",
        "test": "assert is_undulating(123) == True",
        "num_ids": 1053,
        "indeed": true
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "test": "assert power(2,3) == 8",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(1,2), (3,4), (5,1)]) == 5  # Check if function returns the first value of the tuple with the smallest second value",
        "num_ids": 1093,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the minimum length variable to a large value\n    min_len = float('inf')\n    # Iterate over the sublists in the input list\n    for sublist in lst:\n        # If the length of the current sublist is smaller than the current minimum\n        if len(sublist) < min_len:\n            # Update the minimum length\n            min_len = len(sublist)\n    # Return the minimum length\n    return min_len\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == 2",
        "num_ids": 1329,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(15) == 4",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 1479,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Initialize variables to store the sum and length of the list\n    num_sum = 0\n    list_length = len(numbers)\n    \n    # Loop through the list and add each number to the sum\n    for num in numbers:\n        num_sum += num\n        \n    # Divide the sum by the length of the list to get the average\n    average = num_sum / list_length\n    \n    # Return the average\n    return average\n",
        "test": "assert multiply_num([1]) == 1.0",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == \"1\"  # Test for decimal 1",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is a palindrome or not.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Function to find the next smallest palindrome of a specified integer,\n    returned as an integer.\n    \"\"\"\n    if num < 10:\n        return num + 1\n\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n\n    return num\n\nif __name__ == \"__main__\":\n    try:\n        num = int(input(\"Enter a number: \"))\n        print(\"Next smallest palindrome: \", next_smallest_palindrome(num))\n    except ValueError:\n        print(\"Invalid input. Please enter a valid integer.\")\n    except Exception as e:\n        print(\"An error occurred: \", e)\n",
        "test": "assert next_smallest_palindrome(10) == 11",
        "num_ids": 1911,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return sorted(arr)[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join([w.title() for w in words[1:]])\n",
        "test": "assert snake_to_camel(\"\") == \"\"",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 1\n    elif n == 0 or m > n:\n        return 0\n    else:\n        return (m * eulerian_num(n-1, m-1)) + (n * eulerian_num(n-1, m))\n",
        "test": "assert eulerian_num(0, 0) == 1",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        sorted_list.append(sorted_sublist)\n    return sorted_list\n",
        "test": "assert sort_sublists([['apple', 'orange', 'banana'], ['pear', 'grape', 'strawberry']]) == [['apple', 'banana', 'orange'], ['grape', 'pear', 'strawberry']]",
        "num_ids": 1438,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, True, False]) == 3 # test case 1",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + tuple(test_list)\n    return new_tup\n",
        "test": "assert add_lists([1,2,3], (4,5,6)) == (4,5,6,1,2,3)",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for num in heapq.merge(num1, num2, num3):\n        merged_list.append(num)\n    return merged_list\n",
        "test": "assert merge_sorted_list([1,3,5],[2,4,6],[7,8,9]) != [1,3,2,4,6,7,8,9] # negative test case",
        "num_ids": 1840,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(len(s)):\n        rotation = s[i:] + s[:i]\n        if rotation[n-1] == \"1\":\n            count += 1\n    return count\n",
        "test": "assert odd_Equivalent('101', 3) == 2  # check for three rotations",
        "num_ids": 1119,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Get all sublists from the nested list\n    sublists = [sublist for sublist in nestedlist]\n    # Initialize the set of common elements\n    common_elements = set(sublists[0])\n    # Iterate over the remaining sublists and find the common elements\n    for sublist in sublists[1:]:\n        common_elements.intersection_update(sublist)\n    # Return the set of common elements\n    return common_elements\n",
        "test": "assert common_in_nested_lists([[1,2,3],[4,5,6],[7,8,9]]) == set() # Empty set as there are no common elements in the nested lists",
        "num_ids": 1425,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"1234\") == True",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for i in list1:\n        if i:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}]) == True",
        "num_ids": 561,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((1, 2, 3)) == 123",
        "num_ids": 753,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def list_to_float(test_list):\n    '''\n    Convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, sublist in enumerate(test_list):\n        for j, element in enumerate(sublist):\n            try:\n                test_list[i][j] = float(element)\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([[1, 2], [\"3.5\", 4], [5.5, \"0.25\"]]) == [[1.0, 2.0], [3.5, 4.0], [5.5, 0.25]]",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def search(arr):\n    \"\"\"\n    This function finds the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    \n    if arr[0] != arr[1]:\n        return arr[0]\n    \n    if arr[-1] != arr[-2]:\n        return arr[-1]\n    \n    for i in range(1, len(arr) - 1):\n        if arr[i] != arr[i - 1] and arr[i] != arr[i + 1]:\n            return arr[i]",
        "test": "assert search([1,1,2,3,3,4,4,5,5,6,7,7]) == 2 # test case 2 ",
        "num_ids": 1323,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            product1 = abs(list1[i][0] * list1[j][1])\n            product2 = abs(list1[i][1] * list1[j][0])\n            if product1 > max_product:\n                max_product = product1\n            if product2 > max_product:\n                max_product = product2\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2), (3,4), (5,6)]) == 20",
        "num_ids": 1322,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def get_divisor_sum(num):\n        divisor_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisor_sum += i\n        return divisor_sum\n\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        divisor_sum = get_divisor_sum(i)\n        if i != divisor_sum and i == get_divisor_sum(divisor_sum):\n            amicable_sum += i\n\n    return amicable_sum\n",
        "test": "assert amicable_numbers_sum(1000) == 504",
        "num_ids": 1465,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Get the angle of a complex number.\n    '''\n    z = complex(a, b)\n    return cmath.phase(z)\n",
        "test": "assert angle_complex(1, 0) == 0",
        "num_ids": 818,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    zeros = 0\n    ones = 0\n    n = len(string)\n    for i in range(n):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff\n",
        "test": "assert find_length(\"11111111\") == 8",
        "num_ids": 1354,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def gcd(a, b):\n    \"\"\"\n    Compute the greatest common divisor of two integers a and b\n    using the Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_common_divisors(a, b):\n    \"\"\"\n    Compute the sum of common divisors of two integers a and b.\n    \"\"\"\n    d = gcd(a, b)\n    s = 0\n    for i in range(1, d+1):\n        if a % i == 0 and b % i == 0:\n            s += i\n    return s\n",
        "test": "assert sum(10, 15) == 30",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2, 3) == 6  # test case 1",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Return a list of words longer than n characters from the given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]\n",
        "test": "assert long_words(2, ['a', 'b', 'c', 'd']) == []",
        "num_ids": 1046,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    total = sum(my_matrix[0])\n    for i in range(1, n):\n        if sum(my_matrix[i]) != total:\n            return False\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum != total:\n            return False\n    diag1_sum = sum(my_matrix[i][i] for i in range(n))\n    diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag1_sum != total or diag2_sum != total:\n        return False\n    return True\n",
        "test": "assert magic_square_test([[16, 3, 2, 13], [5, 10, 11, 8], [9, 6, 7, 12], [4, 15, 3, 1]]) == False",
        "num_ids": 2208,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the counts of each item\n    counts = defaultdict(int)\n\n    # iterate over the items in the list and increment their count in the dictionary\n    for item in nums:\n        counts[item] += 1\n\n    # find the item with the highest count in the dictionary\n    max_item = None\n    max_count = 0\n    for item, count in counts.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4",
        "num_ids": 2150,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_vowels(str1):\n    vowels = set('aeiouAEIOU')\n    vowels_in_str1 = [c for c in str1 if c in vowels]\n    vowels_in_str1.reverse()\n    result = ''\n    i = 0\n    for c in str1:\n        if c in vowels:\n            result += vowels_in_str1[i]\n            i += 1\n        else:\n            result += c\n    return result\n",
        "test": "assert reverse_vowels('y') == 'y'",
        "num_ids": 1184,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ''.join(str(i) for i in tup1)\n    return str_tup\n",
        "test": "assert tup_string(()) == \"\"",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    # Initialize the sum of negative numbers to zero\n    negative_sum = 0\n    \n    # Loop through the list of numbers\n    for num in nums:\n        # If the number is negative, add it to the sum of negative numbers\n        if num < 0:\n            negative_sum += num\n    \n    # Return the sum of negative numbers\n    return negative_sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0 # check if the function returns 0 if there are no negative numbers in the list",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "test": "assert hexagonal_num(1) == 1 # first hexagonal number is 1 ",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    ratio = zero_count / non_zero_count if non_zero_count > 0 else 0\n    return ratio\n",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1154,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # convert n to binary and count the number of ones\n    count_ones = bin(n).count('1')\n    \n    # if n is a power of 2, then count_ones will be 1\n    # otherwise, count_ones will be greater than 1\n    if count_ones == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(5) == False # since 5 cannot be represented as sum of non-zero powers of 2",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # Calculate the circumference of the circle\n    circumference = 2 * 3.14 * r\n    # Return the circumference\n    return circumference\n",
        "test": "assert circle_circumference(1) == 2 * 3.14 * 1",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result\n",
        "test": "assert extract_singly([]) == set()",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    \"\"\"\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        max_idx = i\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        if max_idx != i:\n            nums[:max_idx+1] = reversed(nums[:max_idx+1])\n            nums[:i+1] = reversed(nums[:i+1])\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 1436,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1, 2, 3], [2, 3, 4], [4, 5, 6]) == 0  # no item is identical in the same position of all three lists",
        "num_ids": 1226,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1, 2, 3)) == 0",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    max_diff = abs(arr[1] - arr[0])\n    min_elem = min(arr[0], arr[1])\n    max_elem = max(arr[0], arr[1])\n    \n    for i in range(2, len(arr)):\n        if arr[i] < min_elem:\n            min_elem = arr[i]\n        elif arr[i] > max_elem:\n            max_elem = arr[i]\n        \n        diff = abs(max_elem - min_elem)\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 1, 1, 1, 1]) == 0",
        "num_ids": 1183,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:\n        x = None\n        y = n / b\n        if b == 0 or y.is_integer():\n            y = int(y)\n            return (x, y)\n        else:\n            return None\n    elif b == 0:\n        x = n / a\n        y = None\n        if a == 0 or x.is_integer():\n            x = int(x)\n            return (x, y)\n        else:\n            return None\n    else:\n        x = n / a\n        y = (n - a * x) / b\n        if x.is_integer() and y.is_integer():\n            x = int(x)\n            y = int(y)\n            return (x, y)\n        else:\n            return None\n",
        "test": "assert find_solution(2, 3, 7) == None   # 2x + 3y = 7, no solution exists",
        "num_ids": 1995,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [elem for elem in list1 if elem not in list2]\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [3, 4]) == [1, 2, 5]",
        "num_ids": 951,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2*i\n    return sum\n",
        "test": "assert sum_series(12) == 42",
        "num_ids": 878,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import math\n\ndef area_polygon(s, l):\n    \"\"\"\n    Calculate the area of a regular polygon given its side length and number of sides.\n    \"\"\"\n    n = l - 2  # number of interior angles\n    a = (s ** 2) / (2 * math.tan(math.pi / n))  # interior angle in radians\n    area = (n * s ** 2) / (4 * math.tan(math.pi / n))  # area formula\n    return area\n",
        "test": "assert area_polygon(14, 8) == 140 * (1 - tan(pi / 8))",
        "num_ids": 1270,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import math\n\ndef div_sum(n1, n2):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Function to find the sum of divisors of a number\n    def sum_divisors(num):\n        sum = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                if num//i == i:\n                    sum += i\n                else:\n                    sum += i + num//i\n        return sum\n    \n    # Check if sum of divisors of n1 and n2 are same\n    if sum_divisors(n1) == sum_divisors(n2):\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(70) == 87 # returns True because the sum of divisors of 70 is 87 (1+2+5+7+14+35)",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_char_position(str1): \n    count = 0\n    for i in range(len(str1)):\n        if chr(i+97).lower() in str1.lower():\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"Python\") == 0 # No letter matches with 'p' in English alphabet ",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([2,4,6,8]) == 6 # should return 6 for all possible pairs",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(4) == 4",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def frequency(a, x):\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10], 5) == 1",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 0, 1) == 3",
        "num_ids": 1043,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    sides = 5\n    perimeter = sides * a\n    return perimeter\n",
        "test": "assert perimeter_pentagon(1) == 5",
        "num_ids": 678,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance('hello world') == 0",
        "num_ids": 770,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element) != data_type:\n            return False\n    return True\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Find the index of the first occurrence of the element\n    first_index = arr.index(x)\n    # Find the index of the last occurrence of the element\n    last_index = len(arr) - list(reversed(arr)).index(x)\n    # Check if the element occurs more than n/2 times\n    return (last_index - first_index + 1) > n // 2\n",
        "test": "assert is_majority([1,2,3,4,5], 5, 3) == False",
        "num_ids": 1407,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(10) == 2 # 1010 in binary",
        "num_ids": 786,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[i] for i in range(len(str)) if i % 2 == 0)",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"",
        "num_ids": 690,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num\n",
        "test": "assert min_of_three(3, 5, 7) == 3",
        "num_ids": 706,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if the range is valid\n    if l < 0 or r >= n.bit_length():\n        return False\n\n    # Calculate the mask for the given range\n    mask = (1 << (r + 1)) - (1 << l)\n\n    # Check if all bits are set in the given range\n    return n & mask == mask",
        "test": "assert all_Bits_Set_In_The_Given_Range(12, 3, 4) == False # bit at position 3 is set",
        "num_ids": 1454,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # separate negative and positive elements\n    neg = [x for x in arr[:n] if x < 0]\n    pos = [x for x in arr[:n] if x >= 0]\n    # concatenate negative elements and positive elements\n    arr[:n] = neg + pos\n    return arr\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5, 6], 4) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1928,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character,\n    and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "test": "assert replace_blank(\"Hello world\", \"*\") == \"Hello*world\" # Test with string without blank space",
        "num_ids": 740,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return sorted(list1, reverse=True)[:n]\n",
        "test": "assert larg_nnum([5, 2, 7, 9, 1, 3], 0) == []",
        "num_ids": 1306,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h\n",
        "test": "assert lateralsuface_cylinder(0,2) == 0",
        "num_ids": 1035,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "test": "assert volume_cube(1) == 1",
        "num_ids": 549,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary representation\n    binary = bin(n)\n    # Convert the binary string to a list of digits\n    digits = list(binary[2:])\n    # Iterate over the digits from right to left\n    for i in range(len(digits)-1, -1, -1):\n        # If the index is even (0-based), set the digit to 1\n        if i % 2 == 0:\n            digits[i] = '1'\n    # Join the digits back into a string and convert it back to an integer\n    binary_str = ''.join(digits)\n    return int(binary_str, 2)\n",
        "test": "assert even_bit_set_number(0b1) == 0b1 # no even bits set",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))",
        "test": "assert check_occurences([(1, 2), (3, 4), (1, 2), (5, 6)]) == {(1, 2): 2, (3, 4): 1, (5, 6): 1}",
        "num_ids": 1580,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings('abc') == 6  # ['a', 'ab', 'abc', 'b', 'bc', 'c']",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    else:\n        total = 0\n        for i in range(2, m+1):\n            total += get_total_number_of_sequences(i, n-1)\n        return total\n",
        "test": "assert get_total_number_of_sequences(20, 4) == 111",
        "num_ids": 1330,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    elif len(list2) == 0:\n        return list1[:-1]\n    else:\n        return list1[:-1] + list2\n",
        "test": "assert replace_list([1,2,3,4], []) == [1,2,3]",
        "num_ids": 927,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac('hello') == 5 # Test 1",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root - int(root) == 0:\n        return (int(root) + 1)**2\n    else:\n        return (int(root) + 2)**2\n",
        "test": "assert next_Perfect_Square(1) == 4",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize two lists to store the maximum increasing subsequence and maximum decreasing subsequence\n    inc = [0] * n\n    dec = [0] * n\n\n    # Initialize the first element of both lists to the value of the first element of the array\n    inc[0] = arr[0]\n    dec[n-1] = arr[n-1]\n\n    # Calculate the maximum increasing subsequence\n    for i in range(1, n):\n        inc[i] = max(inc[i-1] + arr[i], arr[i])\n\n    # Calculate the maximum decreasing subsequence\n    for i in range(n-2, -1, -1):\n        dec[i] = max(dec[i+1] + arr[i], arr[i])\n\n    # Find the maximum sum of the bitonic subsequence by comparing the maximum of the two lists\n    max_bitonic_sum = inc[0]\n    for i in range(1, n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i-1] + dec[i])\n\n    return max_bitonic_sum\n",
        "test": "assert max_sum([1, 2, 3, 4, 5, 6, 7]) == 28",
        "num_ids": 2467,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"Invalid input! Cannot find square root of negative numbers.\"\n    else:\n        guess = number\n        count = 0\n        while guess * guess != number and count < 20:\n            guess = (guess + number / guess) / 2\n            count += 1\n        return guess\n",
        "test": "assert babylonian_squareroot(144) == 12",
        "num_ids": 1080,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for L in range(2, n + 1):\n        for i in range(n - L + 1):\n            j = i + L - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n",
        "test": "assert lps(\"bbbab\") == 4 # bbbb",
        "num_ids": 1807,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n",
        "test": "assert harmonic_sum(3) == 1 + 1/2",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1) & set(array_nums2))\n",
        "test": "assert intersection_array([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n",
        "test": "assert count_X(('apple', 'banana', 'cherry'), 'a') == 0 # no occurrences of 'a'",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def insert_element(lst, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in lst:\n        result.append(element)\n        result.append(i)\n    return result\n",
        "test": "assert insert_element([1,2,3],4) == [4,1,4,2,4,3]",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes in a list of complex numbers and converts them to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n",
        "test": "assert convert((-6,-6)) == (12.06, 2.35) # Test Case 4",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 'a', 2, 'b', 3]) == 3",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors(['R', 'G', 'B'], 2) == [('R', 'R'), ('R', 'G'), ('R', 'B'), ('G', 'G'), ('G', 'B'), ('B', 'B')]",
        "num_ids": 1946,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4",
        "num_ids": 1232,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert swap_numbers(3, 5) == (5, 3) # Test case 1",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elements = []\n    for i in range(len(test_tup1)):\n        max_elements.append(max(test_tup1[i], test_tup2[i]))\n    return tuple(max_elements)\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) != (4, 5, 7)",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the first Newman-Shanks-Williams prime number\n    nsw_prime = 3\n\n    # Initialize the counter for the nth prime number\n    count = 1\n\n    while count < n:\n        # Check if the current number is prime\n        if is_prime(nsw_prime):\n            count += 1\n\n        # Generate the next Newman-Shanks-Williams prime number\n        nsw_prime = 2 * nsw_prime - 1\n\n    return nsw_prime\n\n\ndef is_prime(n):\n    '''\n    Check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n",
        "test": "assert newman_prime(1) == 3 ",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(float('nan'))\n    return tuple(result)\n",
        "test": "assert division_elements((10, 5, 2), (2, 2, 2)) == (5.0, 2.5, 1.0)",
        "num_ids": 1485,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"Length of list1 should be greater than or equal to L.\")\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return (first_part, second_part)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6], 3) == ([1, 2, 3], [4, 5, 6])",
        "num_ids": 1374,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def dog_age(h_age):\n    # Dogs age 1 year for every 7 human years\n    dog_age = h_age * 7\n    return dog_age",
        "test": "assert dog_age(4) == 42",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    sublist = []\n    for i in range(len(S)):\n        if i % step == 0 and i != 0:\n            result.append(sublist)\n            sublist = []\n        sublist.append(S[i])\n    result.append(sublist)\n    return result\n",
        "test": "assert list_split([1,2,3,4,5,6,7,8], 3) == [[1,2,3], [4,5,6], [7,8]]",
        "num_ids": 1332,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * (l ** 2)\n",
        "test": "assert lateralsurface_cube(0) == 0 # Test case 4",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    num = 1\n    \n    while count < n:\n        sum += num**2\n        count += 1\n        num += 2\n    \n    return sum\n",
        "test": "assert square_Sum(1) == 1  # first odd number is 1, so sum should be 1^2",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1\n    for i in range(2, n+1):\n        star_num *= i\n    return star_num\n",
        "test": "assert find_star_num(1) == 1",
        "num_ids": 673,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('a') == 97",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(num for num, index in zip(arr, range(len(arr))) if num % 2 == 0 and index % 2 == 0)\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7]) == 0 # no even numbers at even positions",
        "num_ids": 1265,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    result = 0\n    for i in range(2, 2*n+1, 2):\n        result += i**5\n    return result\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6] # test case 1",
        "num_ids": 1096,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)\n",
        "test": "assert substract_elements((5, 3, 7), (2, 4, 6)) == (3, -1, 1)",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum += coeff\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(0) == 1",
        "num_ids": 1045,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r ** 2 * h\n    return volume\n",
        "test": "assert volume_cylinder(0, 1) == 0",
        "num_ids": 933,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({\"a\": 10, \"b\": 20, \"c\": 30, \"d\": 40}, 25) == {\"c\": 30, \"d\": 40}  # check if the function returns the correct output for a valid input",
        "num_ids": 1356,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    counts = {}\n    for i, elem in enumerate(test_tup):\n        if elem not in counts:\n            counts[elem] = i\n    return counts\n",
        "test": "assert count_first_elements(('a', 'b', 'c', 'd', 'e', 'c')) == 2",
        "num_ids": 1264,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return True\n    dec_num = 0\n    i = 1\n    while dec_num < n:\n        dec_num += i * 10\n        i += 1\n    if dec_num == n:\n        return True\n    else:\n        return False\n",
        "test": "assert is_num_decagonal(1) == 1 ",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1220,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def validate(n):\n    # Convert the integer to a string to easily access each digit\n    n_str = str(n)\n\n    # Iterate over each digit in the string\n    for digit in n_str:\n        # Check if the frequency of the digit in the string is greater than the digit itself\n        if n_str.count(digit) > int(digit):\n            return False\n\n    # If all digits pass the test, return True\n    return True",
        "test": "assert validate(123456) == True  # all digits appear once",
        "num_ids": 1118,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_element(lst, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in lst:\n        if item != element:\n            return False\n    return True\n",
        "test": "assert check_element([], 5) == True # test for empty list",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a[b]{2,3}', text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('abbbc') == True  # 'a' followed by 3 'b's",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sum of the original array\n    max_sum = float('-inf')\n    \n    # Find the sum of the original array\n    for i in range(n):\n        max_sum = max(max_sum, a[i])\n        \n    # Initialize the maximum sum of the repeated array\n    max_sum_repeated = max_sum * k\n    \n    # Initialize the current sum and maximum sum of the repeated array\n    curr_sum = 0\n    max_sum_curr = float('-inf')\n    \n    # Repeat the array k times\n    for i in range(k):\n        # Find the sum of the repeated array\n        for j in range(n):\n            curr_sum += a[j]\n            max_sum_curr = max(max_sum_curr, curr_sum)\n            \n        # Reset the current sum to 0\n        curr_sum = 0\n    \n    # Find the maximum sum of the repeated array\n    max_sum_repeated = max(max_sum_repeated, max_sum_curr)\n    \n    return max_sum_repeated\n",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -5], 5, 2) == -1",
        "num_ids": 2105,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    sum = 0\n    i = 2\n    while n > 0:\n        sum += i**2\n        i += 2\n        n -= 1\n    return sum\n",
        "test": "assert square_Sum(0) == 0 # edge case",
        "num_ids": 968,
        "indeed": true
    },
    {
        "number": 290,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 1414,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_no_of_ways(n, k):\n    dp = [0]*(n+1)\n    dp[1] = k\n    dp[2] = k*k\n    for i in range(3, n+1):\n        dp[i] = dp[i-1]*(k-1) + dp[i-2]*(k-1)\n    return dp[n]\n",
        "test": "assert count_no_of_ways(3, 2) == 6",
        "num_ids": 1352,
        "indeed": true
    },
    {
        "number": 292,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n / m)\n",
        "test": "assert find(10, 3) == 3",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in the width and height of a right angled triangle as arguments\n    and returns the length of the hypotenuse (the third side).\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "test": "assert otherside_rightangle(3, 4) == 5",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize the sum of divisors as zero\n    sum_divisors = 0\n    \n    # Loop through all numbers from 1 to the given number\n    for i in range(1, number + 1):\n        # Check if i is a divisor of the given number\n        if number % i == 0:\n            # Add i to the sum of divisors\n            sum_divisors += i\n    \n    # Return the sum of divisors\n    return sum_divisors\n",
        "test": "assert sum_div(12) == 28 # Sum of divisors of 12 is 1 + 2 + 3 + 4 + 6 + 12 = 28",
        "num_ids": 1161,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1441,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([]) == []",
        "num_ids": 1152,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_val = 0\n    for item in stdata:\n        aggregate = sum(item)\n        if aggregate > max_val:\n            max_val = aggregate\n    return max_val\n",
        "test": "assert max_aggregate([(0, 0)]) == 0  # list with one item should return the value of the item",
        "num_ids": 1388,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        binary = bin(i)[2:].zfill(2*n)\n        if sum(int(binary[j]) for j in range(n)) == sum(int(binary[j]) for j in range(n+1, 2*n)):\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(0) == 1 # when n=0, only one binary sequence (0) is possible ",
        "num_ids": 1428,
        "indeed": true
    },
    {
        "number": 301,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(dict_depth(v) for v in d.values()) if d else 0)\n    else:\n        return 0\n",
        "test": "assert dict_depth({'a':1}) == 1 # Single key-value has depth 1",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    actual_index = (index - rotations) % n\n    return arr[actual_index]\n",
        "test": "assert find_Element([1,2,3,4,5],(0,5),0,1) == 2",
        "num_ids": 1338,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [w for w in words if re.match(r'^p', w.lower())]\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[:2]\n",
        "test": "assert start_withp(['apple', 'pear', 'banana', 'peach']) == ['pear', 'peach']",
        "num_ids": 1012,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    \"\"\"\n    # Create a list to store the maximum sum of increasing subsequence from prefix until ith index\n    max_sum = [0] * n\n    # Set the maximum sum for the first element to be the element itself\n    max_sum[0] = a[0]\n    # Loop through the list starting from the second element\n    for i in range(1, n):\n        # Check if the current element is greater than the previous maximum sum\n        if a[i] > max_sum[i-1]:\n            # If so, update the maximum sum\n            max_sum[i] = a[i] + max_sum[i-1]\n        else:\n            # If not, set the maximum sum to be the previous maximum sum\n            max_sum[i] = max_sum[i-1]\n    # Find the maximum sum of increasing subsequence including the kth element\n    kth_max_sum = [0] * n\n    kth_max_sum[k] = a[k]\n    for i in range(k-1, -1, -1):\n        # Check if the current element is greater than the previous maximum sum\n        if a[i] < kth_max_sum[i+1]:\n            # If so, update the maximum sum\n            kth_max_sum[i] = a[i] + kth_max_sum[i+1]\n        else:\n            # If not, set the maximum sum to be the previous maximum sum\n            kth_max_sum[i] = kth_max_sum[i+1]\n    # Find the maximum sum of increasing subsequence from prefix until ith index and also including the kth element\n    max_sum_with_kth = [0] * n\n    for i in range(index):\n        max_sum_with_kth[i] = max_sum[i]\n    for i in range(index, k):\n        max_sum_with_kth[i] = kth_max_sum[i]\n    for i in range(k, n):\n        max_sum_with_kth[i] = max_sum[i] + kth_max_sum[i]\n    # Return the maximum sum\n    return max(max_sum_with_kth)\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5, 6], 6, 3, 4) == 12  # includes elements 1, 2, 3, 5",
        "num_ids": 2746,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a deep copy of the original tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Check if m and n are within range\n    if m < 0 or n > len(tuplex) or m > n:\n        return \"Invalid range\"\n\n    # Slice the tuple and return the colon\n    return new_tuplex[m:n]",
        "test": "assert colon_tuplex((1, 2, 3, 4, 5), 2, 5) == (3, 4, 5) # check slicing from index 2 to end",
        "num_ids": 1181,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 1) == [18]",
        "num_ids": 1407,
        "indeed": true
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(2,3) == 3",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function converts a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (n + 1)\n",
        "test": "assert set_left_most_unset_bit(0b0000000000) == 0b0000000001 # example 4",
        "num_ids": 1046,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume of a cone using the formula 1/3 * pi * r^2 * h\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cone(0,3) == 0",
        "num_ids": 930,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while n > 0:\n        n = n >> 1\n        power += 1\n    \n    return 2 ** (power-1)\n",
        "test": "assert highest_Power_of_2(7) == 4",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2 ",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]\n",
        "test": "assert add_string([1, 2, 3], \"Number: {}\") == [\"Number: 1\", \"Number: 2\", \"Number: 3\"]",
        "num_ids": 963,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    my_dict = {}\n    for i in range(len(l1)):\n        my_dict[l1[i]] = {l2[i]: l3[i]}\n    return my_dict\n",
        "test": "assert convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['x', 'y', 'z']) != {1: {'b': 'y'}, 2: {'a': 'x'}, 3: {'c': 'z'}}",
        "num_ids": 1604,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_max_sum(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 1553,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct(()) == True # empty tuple",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n",
        "test": "assert first_non_repeating_character(\"a\") == \"a\"",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    return pattern.match(string) is not None\n",
        "test": "assert check_char('hello') == False  # starts with 'h' but ends with 'o'",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers\n    sorted_nums = sorted([a,b,c])\n    # Find the median\n    if len(sorted_nums) % 2 == 0:\n        # If there are even number of elements, take the average of the middle two\n        median = (sorted_nums[len(sorted_nums)//2] + sorted_nums[len(sorted_nums)//2 - 1]) / 2\n    else:\n        # If there are odd number of elements, take the middle one\n        median = sorted_nums[len(sorted_nums)//2]\n    return median\n",
        "test": "assert median_numbers(1,2,3) == 2",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        if num < 0:\n            num = -num\n        sum = 0\n        while num > 0:\n            sum += num % 10\n            num //= 10\n        result.append(sum)\n    return result\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24]",
        "num_ids": 1209,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1) != len(test_tup2):\n        return None\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result\n",
        "test": "assert bitwise_xor((0, 1, 1, 0), (1, 1, 0, 1)) == (1, 0, 1, 1)  # Test case 1",
        "num_ids": 1450,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    return len(freq_dict)\n",
        "test": "assert extract_freq([(1,2), (2,3), (1,2)]) == 2 # check for duplicates",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_result = []\n        for j in range(len(test_tup1[i])):\n            inner_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(inner_result))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == ((8, 10, 12), (14, 16, 18))",
        "num_ids": 1866,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5,10) == 5",
        "num_ids": 507,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((1,2,3),2) == True # returns True since 2 is in the tuple",
        "num_ids": 850,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 18,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert find_Parity(2) == False # even number",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert n to a list of digits\n    digits = list(str(n))\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Find the index of the first digit that is smaller than the one before it\n    i = len(digits) - 1\n    while i > 0 and digits[i] <= digits[i-1]:\n        i -= 1\n    # If no such digit found, the number is already the biggest possible\n    if i == 0:\n        return -1\n    # Find the index of the smallest digit among the ones that are greater than the ith digit\n    j = len(digits) - 1\n    while digits[j] > digits[i-1]:\n        j -= 1\n    # Swap the ith and jth digits\n    digits[i-1], digits[j] = digits[j], digits[i-1]\n    # Reverse the digits after the ith digit\n    digits[i:] = reversed(digits[i:])\n    # Convert the list of digits back to an integer\n    result = int(''.join(digits))\n    return result\n",
        "test": "assert rearrange_bigger(999) == -1",
        "num_ids": 1967,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pairs = []\n    heap = []\n\n    for num1 in nums1:\n        for num2 in nums2:\n            pair_sum = num1 + num2\n            pairs.append((pair_sum, num1, num2))\n\n    heapq.heapify(pairs)\n\n    result = []\n    for _ in range(k):\n        if not pairs:\n            break\n        pair_sum, num1, num2 = heapq.heappop(pairs)\n        result.append((num1, num2))\n\n    return result\n",
        "test": "assert k_smallest_pairs([1, 2, 3], [4, 5, 6], 1) == [(1, 4)] # returns [(1, 4)]",
        "num_ids": 2245,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for tup in list1:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(0, 1), (2, 3), (4, 5)]) == 0  # Example 3",
        "num_ids": 1255,
        "indeed": true
    },
    {
        "number": 410,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 891,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 19,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel = words[0] + ''.join(w.title() for w in words[1:])\n    return camel\n",
        "test": "assert snake_to_camel('snake_to_camel') == 'snakeToCamel'",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # Using list comprehension to remove odd numbers from the list\n    return [num for num in l if num % 2 == 0]\n",
        "test": "assert remove_odd([]) == []",
        "num_ids": 757,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = []\n    for i in range(len(list1)):\n        if len(list1[i]) >= n:\n            nth_element.append(list1[i][n-1])\n    return nth_element\n",
        "test": "assert extract_nth_element([], 1) == []",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(i in list2 for i in list1)\n",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = -100000000000\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2 and arr[i] != max1:\n            max2 = arr[i]\n    return max1 * max2\n",
        "test": "assert max_Product([1,2,3,4,5]) == 20 # A pair with highest product is (5,4)",
        "num_ids": 1270,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        if common_element is None:\n            common_element = Input[i][0]\n        elif common_element != Input[i][0]:\n            return None\n    return common_element\n",
        "test": "assert group_tuples([(1, 2), (1, 3), (1, 4)]) == 1  # common first element is 1",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max(['apple', 'banana', 'orange']) == 'banana'",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    length = len(list1)\n    result = total_sum * length\n    return result\n",
        "test": "assert round_and_sum([0, 0, 0]) == 0.0",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    num = 2\n    for i in range(n):\n        sum += num ** 3\n        num += 2\n    return sum",
        "test": "assert cube_Sum(0) == 0 # returns 0 for zero even natural numbers",
        "num_ids": 1009,
        "indeed": true
    },
    {
        "number": 421,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    \"\"\"\n    Concatenates each element of the tuple with the delimiter.\n    \"\"\"\n    return delimiter.join(map(str, test_tup))\n",
        "test": "assert concatenate_tuple((\"apple\", \"banana\", \"cherry\")) == \"apple-banana-cherry\"",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 422,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Average_Of_Cube(n):   \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n\n",
        "test": "assert find_Average_Of_Cube(1) == 1",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = ()\n    for string in test_tuple:\n        result += (string[-1],)\n    return result\n",
        "test": "assert extract_rear((\"hello\", \"world\", \"test\")) == (\"o\", \"d\", \"t\")",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([], 5) == 0 # empty list",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # create an empty list to store the filtered numbers\n    filtered_nums = []\n    # loop through the input list\n    for num in nums:\n        # check if the number is odd\n        if num % 2 != 0:\n            # if it is odd, append it to the filtered list\n            filtered_nums.append(num)\n    # return the filtered list\n    return filtered_nums\n",
        "test": "assert filter_oddnumbers([]) == []",
        "num_ids": 813,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        dt = dt.strip()\n        if not re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n            raise ValueError('Invalid date format. Should be yyyy-mm-dd')\n        year, month, day = dt.split('-')\n        return '{}-{}-{}'.format(day, month, year)\n    except ValueError as e:\n        print(e)\n        return None\n",
        "test": "assert change_date_format('2021-12-31') == '31-12-2021'",
        "num_ids": 1375,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n",
        "test": "assert shell_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9] # example 1",
        "num_ids": 1515,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n    return result\n",
        "test": "assert and_tuples((1, 1, 0, 1), (1, 0, 1, 1)) == (1, 0, 0, 1)",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = abs(b)**2 - 4*a*c\n    if d == 0:\n        return 'The parabola has a double directrix'\n    else:\n        x1 = (-b + d**0.5)/2*a\n        x2 = (-b - d**0.5)/2*a\n        return x1, x2\n",
        "test": "assert parabola_directrix(4, 3, -4) == \"x=-1\"",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1, 2, 3], [2, 3, 4]) == True  # True, common element 2 and 3",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the top length\n    top = abs(base2 - base1)\n    # Calculate the median length\n    median = (top + 2 * height) / 2\n    return median\n",
        "test": "assert median_trapezium(3, 4, 5) == 5.5",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_count = 0\n    \n    for i in arr:\n        if i < number:\n            greater_count += 1\n    \n    return greater_count == len(arr)\n",
        "test": "assert check_greater([1, 2, 3, 4], 5) == True",
        "num_ids": 817,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_one(text):\n    \"\"\"\n    Write a function that matches a string that has an a followed by one or more b's.\n    \"\"\"\n    pattern = r'a+b+'\n    return bool(re.match(pattern, text))\n",
        "test": "assert text_match_one(\"ab\")",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last_Digit(n):\n    '''\n    This function returns the last digit of a given number.\n    '''\n    return n % 10\n",
        "test": "assert last_Digit(25) == 5",
        "num_ids": 587,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [-2, -4]",
        "num_ids": 885,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd('') == ''  # empty string",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[i][0]) == test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2), (3,4), (5,6)]) == 0",
        "num_ids": 1451,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n",
        "test": "assert multiple_to_single([1]) == 1",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = ['really', 'very', 'extremely', 'quite', 'rather', 'highly', 'most', 'much', 'so', 'too']\n    pattern = re.compile(r'\\b(' + '|'.join(adverb_list) + r')\\b', re.IGNORECASE)\n    matches = pattern.finditer(text)\n    first_adverb = None\n    for match in matches:\n        if first_adverb is None or match.start() < first_adverb[1]:\n            first_adverb = (match.group(0), match.start())\n    return first_adverb\n",
        "test": "assert find_adverb_position(\"The quick brown dog jumped over the lazy dog.\") == None",
        "num_ids": 3526,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area\n",
        "test": "assert surfacearea_cube(1) == 6",
        "num_ids": 555,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_numbers = [num for num in nums if num > 0]\n    ratio = len(positive_numbers) / len(nums)\n    return ratio\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 5/5",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # initialize the variable to store the largest negative number\n    largest_neg = None\n    \n    # iterate through the list and check for negative numbers\n    for num in list1:\n        if num < 0:\n            # if the number is negative, check if it is larger than the current largest negative number\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n                \n    # return the largest negative number found in the list\n    return largest_neg\n",
        "test": "assert largest_neg([-3, -1, 0, 5, -7]) == -1",
        "num_ids": 1131,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def trim_tuple(test_list, k):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tpl in test_list:\n        if len(tpl) >= k:\n            result.append(tpl[:k])\n        else:\n            result.append(tpl)\n    return result\n",
        "test": "assert trim_tuple([(True, False, True), (False, True, False)], 1) == [(True,), (False,)]",
        "num_ids": 1593,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n    return result\n",
        "test": "assert index_multiplication((2, 3, 4), (5, 6, 7)) == (10, 18, 28)",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n\n    # Convert the tuple to a list\n    tup_list = list(tup)\n\n    # Initialize an empty dictionary\n    occurrence = {}\n\n    # Iterate through the list\n    for i in lst:\n\n        # Count the number of occurrences of each element in the tuple\n        occurrence[i] = tup_list.count(i)\n\n    # Return the occurrence dictionary\n    return occurrence\n",
        "test": "assert count_Occurrence(('apple', 'banana', 'cherry', 'date', 'elderberry', 'apple', 'banana', 'cherry'), ['date', 'elderberry']) == {'date': 1, 'elderberry': 1}",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def cube_nums(nums):\n    '''\n    This function takes a list of numbers as an input and returns a new list containing the cubes of each number in the input list.\n    '''\n    return [num**3 for num in nums]\n",
        "test": "assert cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]  # Test case 1",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    else:\n        p = [3]\n        for i in range(1, n):\n            p.append(p[i-1] + p[i])\n        return sum(p)\n",
        "test": "assert cal_sum(1) == 3  # perrin number for n=1 is 3",
        "num_ids": 947,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for string in str_list:\n        if len(string) == size:\n            extracted_str.append(string)\n    return extracted_str\n",
        "test": "assert extract_string([\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\", \"fig\", \"grape\"], 0) == []",
        "num_ids": 1140,
        "indeed": true
    },
    {
        "number": 451,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"Hello World\") == \"HelloWorld\"",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 70) == 30  # True",
        "num_ids": 813,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of its even factors.\n    '''\n\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum",
        "test": "assert sumofFactors(10) == 12 # expected output for 10 ",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.search('\\w*z\\w*', text)\n    if word:\n        return word.group(0)\n    else:\n        return None\n",
        "test": "assert text_match_wordz(\"The quick brown fox jumps over the lazy dog\") != \"fox\"",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(1) == True  # January has 31 days",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 456,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list(['hello', 'world', 'python']) == ['olleh', 'dlrow', 'nohtyp']",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n",
        "test": "assert Find_Min([[1,2,3], [4,5,6,7,8], [9], [10,11,12]]) == [9] ",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(10, 5) == 50",
        "num_ids": 562,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    return re.sub(r'[A-Z]+', '', string)\n",
        "test": "assert remove_uppercase(\"Hello\") == \"ello\"",
        "num_ids": 729,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n",
        "test": "assert Extract([[1,2,3], [4,5,6], [7,8,9]]) == [1,4,7] # test with a list of sublists",
        "num_ids": 962,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"Hello World\") == 2 # \"H\" and \"W\" are upper case characters",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import itertools\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    all_combinations = []\n    for i in range(1, len(list1)+1):\n        for combo in itertools.combinations(list1, i):\n            all_combinations.append(combo)\n    return all_combinations\n",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr:\n        return None\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result\n",
        "test": "assert max_subarray_product([2, 3, -2, 4]) == 6 # 2*3",
        "num_ids": 1543,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_value({'a': 1, 'b': 2, 'c': 1}, 1) == False",
        "num_ids": 1071,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}\n",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 976,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    max_product = 1\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for i in range(n):\n        if arr[i] > 0:\n            max_ending_here = max_ending_here * arr[i]\n            min_ending_here = min(min_ending_here * arr[i], 1)\n        else:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here * arr[i], 1)\n            min_ending_here = temp * arr[i]\n            \n        max_product = max(max_product, max_ending_here)\n        \n    return max_product\n",
        "test": "assert max_product([1, 2, 3, 4, -5]) == 24",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n",
        "test": "assert add_pairwise((1, 2, 3, 4, 5, 6)) == (3, 5, 7, 9, 11)",
        "num_ids": 1014,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_remainder(arr, n):\n    # Initialize the product to 1\n    product = 1\n    \n    # Multiply each element of the array with the product\n    for i in arr:\n        product *= i\n        \n        # Check if the product exceeds n, and if so, take the modulo\n        if product > n:\n            product %= n\n    \n    # Return the final product\n    return product\n",
        "test": "assert find_remainder([2, 4, 6], 3) == 0",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l.sort()\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5]) == True",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for elem in test_list1:\n        if elem in test_list2 and elem not in intersection:\n            intersection.append(elem)\n    return tuple(intersection)\n",
        "test": "assert tuple_intersection((1, 2, 3), (2, 3, 4)) == (2, 3)",
        "num_ids": 1221,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char(\"hello\", \"l\", \"x\") == \"hexxo\"",
        "num_ids": 665,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({\"apple\": 3, \"banana\": 2, \"orange\": 1}) == {\"apple\": 3, \"banana\": 2, \"orange\": 1} ",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    nums_sorted = sorted(nums)\n    return nums_sorted[-1] + nums_sorted[0]\n",
        "test": "assert big_sum([1,2,3,4,5]) == 6 # should return sum of 1+5 = 6 ",
        "num_ids": 1017,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_lower(string):\n    '''\n    Convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert is_lower(\"HeLLo WoRLD\") == \"hello world\"",
        "num_ids": 445,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[a-z]+\\b', '', string)\n",
        "test": "assert remove_lowercase(\"12345\") == \"12345\"",
        "num_ids": 712,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns its first digit.\n    '''\n    # If the number is negative, convert it to positive\n    if n < 0:\n        n = -n\n    \n    # If the number is zero, return zero\n    if n == 0:\n        return 0\n    \n    # Keep dividing the number by 10 until the quotient becomes zero\n    while n >= 10:\n        n //= 10\n    \n    # Return the last digit of the number\n    return n\n",
        "test": "assert first_Digit(12345) == 1",
        "num_ids": 729,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2 != 0]\n",
        "test": "assert Split([]) == []",
        "num_ids": 746,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def difference(n):\n    '''\n    This function finds the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_of_numbers = sum(range(1,n+1))\n    diff = sum_of_cubes - sum_of_numbers\n    return diff\n",
        "test": "assert difference(0) == 0",
        "num_ids": 989,
        "indeed": true
    },
    {
        "number": 556,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Odd_Pair(A,N) :\n    count=0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i]^A[j])%2!=0:\n                count+=1\n    return count\n",
        "test": "assert find_Odd_Pair([1,2,3,4], 4) == 4 ",
        "num_ids": 1009,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert toggle_string(\"Hello World!\") == \"hELLO wORLD!\"",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert integers to strings and reverse them\n    str1 = str(n1)[::-1]\n    str2 = str(n2)[::-1]\n    \n    # initialize variables\n    distance = 0\n    i = 0\n    \n    # iterate through both strings and calculate difference per digit\n    while i < len(str1) and i < len(str2):\n        distance += abs(int(str1[i]) - int(str2[i]))\n        i += 1\n    \n    # add remaining digits from the longer string\n    if i < len(str1):\n        distance += sum(int(d) for d in str1[i:])\n    elif i < len(str2):\n        distance += sum(int(d) for d in str2[i:])\n    \n    return distance\n",
        "test": "assert digit_distance_nums(123, 456) == 9",
        "num_ids": 1499,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_sub_array_sum(a, size):\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15 # positive test case with all positive numbers",
        "num_ids": 1375,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1) | set(test_tup2)\n    union_list = list(union_set)\n    union_list.sort()\n    return tuple(union_list)\n",
        "test": "assert union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)",
        "num_ids": 1423,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len\n",
        "test": "assert Find_Max_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4 # returns 4 for the list [6, 7, 8, 9]",
        "num_ids": 1371,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert extract_values('') == [] # test empty string",
        "num_ids": 729,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4], 4) == 6",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    # Initialize a variable to store the sum of digits\n    sum = 0\n    \n    # Convert the number to a string to iterate over its digits\n    str_n = str(n)\n    \n    # Iterate over the digits and add them to the sum\n    for digit in str_n:\n        sum += int(digit)\n        \n    return sum\n",
        "test": "assert sum_digits(123) == 6",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    \n    for i in range(n - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True\n",
        "test": "assert issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 776,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def empty_list(length):\n    \"\"\"\n    This function creates a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]\n",
        "test": "assert empty_list(3) == [{}, {}, {}]",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['apple', 'orange', 'banana'], ['car', 'bike', 'train']]) == [['apple', 'banana', 'orange'], ['bike', 'car', 'train']]",
        "num_ids": 1639,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([]) == []",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120 # positive test case",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * (r + h)\n",
        "test": "assert surfacearea_cylinder(0, 2) == 0 # check with r=0, h=2",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    strA = ''.join(str(e) for e in A)\n    strB = ''.join(str(e) for e in B)\n    if strB in strA:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sub_Array([1,2,3,4,5],[6,7]) == False",
        "num_ids": 1054,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function finds the last digit in the factorial of a given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return last_Digit_Factorial(n-1)",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list\n",
        "test": "assert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]",
        "num_ids": 1365,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Convert the tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the dissimilar elements by performing set difference operation\n    dissimilar_elements = set1.symmetric_difference(set2)\n    \n    # Return the result\n    return dissimilar_elements\n",
        "test": "assert find_dissimilar((1,2,3,4), (1,2,3,5)) == {4, 5} ",
        "num_ids": 1388,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], tuple):\n            new_tuple.append(even_ele(test_tuple[i], even_fnc))\n        else:\n            if even_fnc(test_tuple[i]):\n                new_tuple.append(test_tuple[i])\n    return tuple(new_tuple)\n",
        "test": "assert even_ele((1, 'apple', 2, 'orange', 3, 'banana', 4), lambda x: isinstance(x, int)) == (1, 2, 3, 4) # only integers are kept",
        "num_ids": 1468,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the area of the square base\n    base_area = b ** 2\n    \n    # Calculating the slant height of the pyramid\n    slant_height = ((b ** 2) + (s ** 2)) ** (1/2)\n    \n    # Calculating the surface area of the square pyramid\n    surface_area = base_area + (b * slant_height) + (s * slant_height)\n    \n    # Returning the surface area\n    return surface_area\n",
        "test": "assert surface_Area(1,1) == 5.74 ",
        "num_ids": 1087,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True",
        "num_ids": 591,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(num):\n            catalan += catalan_number(i) * catalan_number(num - i - 1)\n        return catalan\n",
        "test": "assert catalan_number(1) == 1  # The 1st catalan number is 1",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    else:\n        return None\n",
        "test": "assert find_adverbs(\"The ball rolled across the field slowly and then came to a sudden stop.\") == ((\"slowly\", [7]), (\"sudden\", [14]))",
        "num_ids": 1172,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item[1]) # Negate the value to get the largest n items\n        if len(heap) > n:\n            heapq.heappop(heap)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    result = [item for item in items if item[1] in result]\n    return result\n",
        "test": "assert expensive_items([], 1) == []  # returns empty list if items is empty",
        "num_ids": 1399,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part\n",
        "test": "assert split_Arr([1,2,3,4,5], 2) == [3,4,5,1,2]",
        "num_ids": 1166,
        "indeed": true
    },
    {
        "number": 587,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n",
        "test": "assert list_tuple([1,2,3]) == (1,2,3)",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    \n    return max(nums) - min(nums)\n",
        "test": "assert big_diff([5, 2, 9, 1, 3]) == 8",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function finds all the perfect squares between two given numbers.\n\n    Args:\n        a (int): the first number\n        b (int): the second number\n\n    Returns:\n        list: a list of all the perfect squares between a and b.\n    \"\"\"\n    squares = []\n    for i in range(a, b+1):\n        if (i**0.5).is_integer():\n            squares.append(i)\n    return squares\n",
        "test": "assert perfect_squares(1, 10) == [1, 4, 9]",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    rect_coord = cmath.rect(x, y)\n    return rect_coord\n",
        "test": "assert polar_rect(1, 0) == 1.0",
        "num_ids": 815,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n//2:\n        k = n-k\n    \n    res = 1\n    for i in range(k):\n        res = res * (n-i) / (i+1)\n    \n    return res",
        "test": "assert binomial_Coeff(0,0) == 1 ",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Split the IP address into its 4 components\n    components = ip.split('.')\n\n    # Remove leading zeroes from each component and rejoin them into a new IP address\n    new_ip = '.'.join([str(int(component)) for component in components])\n\n    # Return the new IP address\n    return new_ip\n",
        "test": "assert removezero_ip('010.020.030.040') == '10.20.30.40'",
        "num_ids": 1143,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and even_num == None:\n            even_num = num\n        elif num % 2 != 0 and odd_num == None:\n            odd_num = num\n            \n        if even_num != None and odd_num != None:\n            break\n            \n    if even_num == None or odd_num == None:\n        return None\n    else:\n        return odd_num - even_num\n",
        "test": "assert diff_even_odd([1, 3, 5, 7]) == None # True",
        "num_ids": 1354,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i] != str2[i]:\n            count += 1\n    return count // 2\n",
        "test": "assert min_Swaps('101', '110') == 1 # example 1",
        "num_ids": 1707,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert tuple_size((1,2)) == sys.getsizeof(1) + sys.getsizeof(2)",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k < 1:\n        raise ValueError(\"k must be greater than or equal to 1\")\n    \n    # Check which array has the kth element\n    if k > len(arr1):\n        k -= len(arr1)\n        arr = arr2\n    else:\n        arr = arr1\n        \n    # Binary search to find the kth element\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if k == mid + 1:\n            return arr[mid]\n        elif k > mid + 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n",
        "test": "assert find_kth([1, 3, 5], [2, 4, 6], 7) == None",
        "num_ids": 1788,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def armstrong_number(number):\n    # convert number to string to find its length\n    num_str = str(number)\n    # find the length of the string\n    num_len = len(num_str)\n    # initialize sum to zero\n    sum = 0\n    # iterate through each digit of the number\n    for digit in num_str:\n        # add the cube of the digit to the sum\n        sum += int(digit) ** num_len\n    # check if the number is equal to the sum of its digits' cubes\n    if number == sum:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 1128,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        return \"Invalid input! Please enter a positive integer.\"\n    else:\n        sum = 0\n        for i in range(1, number+1):\n            sum += i\n        average = sum/number\n        return sum, average\n",
        "test": "assert sum_average(1) == (1, 1.0)  # check for n=1",
        "num_ids": 1122,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True  # Test for even number",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str_dict = {}\n    for char in str1:\n        if char in str_dict:\n            return char\n        else:\n            str_dict[char] = 1\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\"",
        "num_ids": 987,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def get_ludic(n):\n    ludic = []\n    for i in range(1, n+1):\n        ludic.append(i)\n    index = 1\n    while index < len(ludic):\n        to_remove = []\n        for num in ludic[index:]:\n            if num % ludic[index-1] == 0:\n                to_remove.append(num)\n        for num in to_remove:\n            ludic.remove(num)\n        index += 1\n    return ludic\n",
        "test": "assert get_ludic(2) == [1]",
        "num_ids": 1421,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into a list of words\n    words.reverse()  # reverse the order of words in the list\n    return \" \".join(words)  # join the words with spaces and return as a string\n",
        "test": "assert reverse_words(\"hello world\") == \"world hello\"",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(2) == True",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = math.radians(degree)\n    return radians\n",
        "test": "assert radian_degree(0) == 0 ",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return text[start:end], start, end\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"Hello world!\", r\"world\") == (\"world\", 6, 11)",
        "num_ids": 1104,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 1016,
        "indeed": true
    },
    {
        "number": 610,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k < len(list1):\n        list1.pop(k)\n    return list1\n",
        "test": "assert remove_kth_element([], 0) == [] # check if empty list is returned for empty input",
        "num_ids": 1194,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, this function returns the max of the n'th column.\n    \"\"\"\n    nth_column = []\n    for row in test_list:\n        nth_column.append(row[N])\n    return max(nth_column)",
        "test": "assert max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 8",
        "num_ids": 1403,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first = [sublist[0] for sublist in lst]\n    second = [sublist[1] for sublist in lst]\n    return [first, second]\n",
        "test": "assert merge([[1,2], [3,4], [5,6]]) == [[1,3,5], [2,4,6]]",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative = []\n    for i in range(len(test_list)):\n        cummulative.append(sum(test_list[:i+1]))\n    return cummulative\n",
        "test": "assert cummulative_sum([1, 2, 3]) == [1, 3, 6]",
        "num_ids": 1029,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1,2,3), (4,5,6), (7,8,9))) == [2.0, 5.0, 8.0]  # testcase 2",
        "num_ids": 1388,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = tuple(i % j for i, j in zip(test_tup1, test_tup2))\n    return result\n",
        "test": "assert tuple_modulo((0, 0, 0), (4, 5, 6)) == (0, 0, 0)  # Test case 4",
        "num_ids": 1383,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check if the given distance is divisible by the step length\n    if d % steps == 0:\n        return d // steps\n    else:\n        # If not divisible, calculate the number of jumps required\n        jumps = 0\n        current_distance = 0\n        while current_distance < d:\n            current_distance += steps\n            if current_distance <= d:\n                jumps += 1\n            else:\n                jumps += 1\n                return jumps\n",
        "test": "assert min_Jumps(2, 1) == 1 # Jumping from origin to (1,0) then to (2,0) requires 2 jumps ",
        "num_ids": 1826,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([0,0,0],[1,2,3]) == [0,0,0]",
        "num_ids": 1197,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            chars.append(char)\n    return ''.join(chars) + ''.join(nums)\n",
        "test": "assert move_num(\"a1b2c3\") == \"abc123\"",
        "num_ids": 1086,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    i = 0\n    while i < n-1:\n        if a[i+1] % a[i] == 0:\n            i += 1\n        else:\n            a.pop(i)\n            n -= 1\n    return len(a)\n",
        "test": "assert largest_subset([]) == 0",
        "num_ids": 1579,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = j = k = 0\n    median = [0] * n\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            median[k] = arr1[i]\n            i += 1\n        else:\n            median[k] = arr2[j]\n            j += 1\n        k += 1\n    while i < n:\n        median[k] = arr1[i]\n        i += 1\n        k += 1\n    while j < n:\n        median[k] = arr2[j]\n        j += 1\n        k += 1\n    if n % 2 == 0:\n        return (median[n//2 - 1] + median[n//2]) / 2\n    else:\n        return median[n//2]\n",
        "test": "assert get_median([1], [2], 1) == 1.5",
        "num_ids": 2171,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def nth_nums(nums, n):\n    '''\n    Compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n",
        "test": "assert nth_nums([],1) == [] # check for empty list",
        "num_ids": 1012,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"hello\") == \"HELLO\"",
        "num_ids": 499,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first_elem = newList[0]\n        last_elem = newList[-1]\n        newList[0] = last_elem\n        newList[-1] = first_elem\n        return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]",
        "num_ids": 879,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    b = 2 * r\n    h = (r**2 - (b/2)**2)**0.5\n    area = 0.5 * b * h\n    return area",
        "test": "assert triangle_area(0) == 0.0",
        "num_ids": 1044,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n\n    if start >= end or array[start] < 0:\n        return start\n\n    for i in range(start, end):\n        if array[i] < 0:\n            continue\n        if array[i] >= len(array):\n            return start\n        if array[array[i]] >= 0:\n            array[array[i]], array[i] = array[i], array[array[i]]\n\n    for i in range(start, end):\n        if array[i] < 0 or array[i] == i:\n            continue\n        else:\n            return i\n\n    return end\n",
        "test": "assert find_First_Missing([0,1,2,3,4]) == 5 # returns 5",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 620,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n    return even_list\n",
        "test": "assert Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8] # Test case 1",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    for i in range(ele[0]-1, ele[0]+2):\n        for j in range(ele[1]-1, ele[1]+2):\n            if (i, j) == ele:\n                continue\n            if (i, j) in sub:\n                continue\n            adj.append((i, j))\n    return adj\n",
        "test": "assert adjac((3,3)) == [(2,2),(2,3),(3,2),(3,4)]",
        "num_ids": 1404,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n",
        "test": "assert replace_spaces(\"hello\") == \"hello\"",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeroes = []\n    for num in num_list:\n        if num == 0:\n            zeroes.append(num)\n        else:\n            continue\n    for zero in zeroes:\n        num_list.remove(zero)\n    num_list.extend(zeroes)\n    return num_list\n",
        "test": "assert move_zero([]) == []",
        "num_ids": 1303,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += arr[i] ^ arr[j]\n    return sum\n",
        "test": "assert pair_xor_Sum([], 0) == 0",
        "num_ids": 1172,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "test": "assert heap_sort([4, 2, 5, 1, 3]) == [1, 2, 3, 4, 5]",
        "num_ids": 986,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n    \"\"\"\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100,100) == True # should return True as no profit or loss is made",
        "num_ids": 816,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert km/h to m/s\n    v_ms = v / 3.6\n    \n    # calculate wind chill index using 13.12 + 0.6215*t - 11.37*v^0.16 + 0.3965*t*v^0.16 formula\n    wci = 13.12 + 0.6215*t - 11.37*(v_ms**0.16) + 0.3965*t*(v_ms**0.16)\n    \n    # round wind chill index to the next integer\n    wci_rounded = math.ceil(wci)\n    \n    return wci_rounded\n",
        "test": "assert wind_chill(80, 30) == 33",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam([\"Abigail\", \"alexander\", \"Cameron\", \"daniel\", \"elizabeth\"]) == 14",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)\n",
        "test": "assert remove_parenthesis(\"hello (world)\") == \"hello \"",
        "num_ids": 750,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2\n",
        "test": "assert is_nonagonal(0) == 0 ",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define the regular expression pattern\n    pattern = r'\\b(?!\\w*z)\\w*z\\w*\\b'\n    # Compile the pattern\n    regex = re.compile(pattern)\n    # Search for the pattern in the text\n    match = regex.search(text)\n    # Return True if match is found, False otherwise\n    return bool(match)\n",
        "test": "assert text_match_wordz_middle('hello world') == False",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    k = k - 1\n    i = 0\n    while i < k/2:\n        input[i], input[k-i] = input[k-i], input[i]\n        i += 1\n    return input\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 2) == [2,1,3,4,5]",
        "num_ids": 1415,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup += (test_dict, )\n    return test_tup\n",
        "test": "assert add_dict_to_tuple(('a', 'b', 'c'), {'d': 1, 'e': 2}) == ('a', 'b', 'c', {'d': 1, 'e': 2})",
        "num_ids": 1263,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def max_average_of_path(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if i == n - 1 and j == n - 1:\n                dp[i][j] = cost[i][j]\n            else:\n                down = dp[i + 1][j] if i < n - 1 else float('-inf')\n                right = dp[i][j + 1] if j < n - 1 else float('-inf')\n                dp[i][j] = max(down, right) + cost[i][j]\n\n    return dp[0][0] / (n * n)\n",
        "test": "assert maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9],[9,10,11]]) == 6.0 ",
        "num_ids": 2419,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students\n",
        "test": "assert filter_data({'David': (1.8, 80), 'Emily': (1.65, 65), 'Frank': (1.75, 75), 'Gina': (1.55, 48)}, 1.7, 60) == {'David': (1.8, 80), 'Frank': (1.75, 75)}",
        "num_ids": 1723,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,2,3], [1,2,3]) == 3 # check same list",
        "num_ids": 1124,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = sum(int(digit) for digit in str(base ** power))\n    return result\n",
        "test": "assert power_base_sum(10, 2) == 1",
        "num_ids": 1130,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text1)\n    return result\n",
        "test": "assert extract_quotation(\"Hello, this is a test string.\") == [] # empty list if no quotations",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((2, 3, 4)) == (6, 12)",
        "num_ids": 1214,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k,_ in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([1,2,2,3,4,4,4,5]) == [1,2,3,4,5]",
        "num_ids": 1102,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n",
        "test": "assert lateralsurface_cone(0,1) == 0",
        "num_ids": 1078,
        "indeed": true
    },
    {
        "number": 732,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r\"[,.\\s]+\"\n    replacement = \":\"\n    return re.sub(pattern, replacement, text)\n",
        "test": "assert replace_specialchar(\"test.case\") == \"test:case\"",
        "num_ids": 736,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] != x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 1) == 0",
        "num_ids": 1473,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize the result variable\n    res = 0\n    # Iterate through all possible sublists\n    for i in range(n):\n        # Calculate the product of the sublist\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n        # Add the product to the result\n        res += prod\n    # Return the final result\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([1, 2, 3, 4, -1]) == 52",
        "num_ids": 1455,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and last bit.\n    \"\"\"\n    return (n ^ (n >> 1))\n",
        "test": "assert set_middle_bits(0b00000000) == 0b00000000  # Example 3",
        "num_ids": 1555,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert left_insertion([1, 3, 5], 6) == 3",
        "num_ids": 920,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('aTestString123') == True ",
        "num_ids": 725,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1/2\n    else:\n        return 1/2 * geometric_sum(n-1) + 1\n",
        "test": "assert geometric_sum(1) == 1/2 # Recursive case",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize values of first triangle number\n    # and no. of digits\n    t_num = 1\n    digits = 1\n\n    # Loop until we reach a triangular\n    # number with n digits\n    while True:\n        # Check if number of digits in\n        # triangular number becomes n\n        if digits >= n:\n            return t_num\n\n        # Otherwise, increment the triangular\n        # number and its no. of digits\n        t_num += 1\n        digits += int(math.log10(t_num)) + 1\n",
        "test": "assert find_Index(1) == 1",
        "num_ids": 1129,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict\n",
        "test": "assert tuple_to_dict((\"a\", \"b\", \"c\", \"d\")) == {\"a\": \"b\", \"c\": \"d\"}",
        "num_ids": 1210,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        for i in range(1, len(s)):\n            if s[i] != s[0]:\n                return False\n        return True\n",
        "test": "assert all_Characters_Same('aaaa') == True",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Calculate the area of a tetrahedron.\n\n    Args:\n    side (float): the length of one edge of the tetrahedron.\n\n    Returns:\n    float: the area of the tetrahedron.\n    '''\n\n    # Calculate the area of one triangle that forms the tetrahedron.\n    # The area of a triangle can be calculated using the formula:\n    # area = (base * height) / 2\n    # where base is the length of one side of the triangle, and height\n    # is the length of the perpendicular line dropped from one vertex to the opposite side.\n    # In a tetrahedron, the base is an equilateral triangle, so the base is also the height of the triangle.\n    # Therefore, the area of one triangle is:\n    # area = (base ** 2 * sqrt(3)) / 4\n    # where base is the length of one side of the triangle.\n\n    area_triangle = (side ** 2 * math.sqrt(3)) / 4\n\n    # Calculate the area of the entire tetrahedron by multiplying the area of one\n    # triangle by 4.\n\n    area_tetrahedron = 4 * area_triangle\n\n    return area_tetrahedron\n",
        "test": "assert area_tetrahedron(8) == 738.453355503998",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 743,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    n = len(list)\n    # If the list is empty or m is greater than length of list or equal to zero, return the list\n    if n == 0 or m > n or m == 0:\n        return list\n    # Calculate the effective number of rotations\n    m = m % n\n    # Reverse the whole list\n    list = list[::-1]\n    # Reverse the first m elements\n    list[:m] = list[:m][::-1]\n    # Reverse the remaining elements\n    list[m:] = list[m:][::-1]\n    # Return the rotated list\n    return list\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]",
        "num_ids": 1381,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n",
        "test": "assert check_none((1,)) == False",
        "num_ids": 632,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        if all(num % d == 0 for d in digits):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(100, 125) == [105, 110, 115, 120] # multiple numbers are divisible ",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r**2 * (a/360) * math.pi",
        "test": "assert sector_area(7, 400) == None, \"Angle of 400 degrees is larger than 360 degrees, so area should be None\"",
        "num_ids": 1112,
        "indeed": true
    },
    {
        "number": 747,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of longest common suffixes of substrings\n    L = [[[0] * (o + 1) for j in range(n + 1)] for i in range(m + 1)]\n\n    # Following steps build L[m+1][n+1][o+1] in bottom up fashion. Note that L[i][j][k] contains length of LCS of X[0..i-1] and Y[0..j-1] and Z[0..k-1]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1])\n\n    # Following code is used to print LCS\n    index = L[m][n][o]\n\n    # Create a character array to store LCS string\n    lcs = [\"\"] * (index + 1)\n    lcs[index] = \"\"\n\n    # Start from the right-most-bottom-most corner and one by one store characters in lcs[]\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        # If current character in all sequences is same, then current character is part of LCS\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs[index - 1] = X[i - 1]\n            i -= 1\n            j -= 1\n            k -= 1\n            index -= 1\n        # If not same, then find the maximum of three values\n        elif L[i - 1][j][k] > L[i][j - 1][k] and L[i - 1][j][k] > L[i][j][k - 1]:\n            i -= 1\n        elif L[i][j - 1][k] > L[i - 1][j][k] and L[i][j - 1][k] > L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return \"\".join(lcs[1:index + 1])\n",
        "test": "assert lcs_of_three('ABC', 'DEF', 'GHI') == ''",
        "num_ids": 2605,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=[a-z])(?=[A-Z])', ' ', str1)\n",
        "test": "assert capital_words_spaces(\"HelloWorld\") == \"Hello World\"",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=int)\n",
        "test": "assert sort_numeric_strings([]) == []",
        "num_ids": 1011,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 19,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list += list(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([1, 2], (3, 4)) == [1, 2, 3, 4]",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n:\n        return True\n\n    left_child = 2*i + 1\n    right_child = 2*i + 2\n\n    if left_child < n and arr[left_child] < arr[i]:\n        return False\n\n    if right_child < n and arr[right_child] < arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left_child) and check_min_heap_helper(arr, right_child)",
        "test": "assert check_min_heap_helper([], 0)",
        "num_ids": 1627,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1138,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]",
        "test": "assert min_k([(1, 10), (2, 15), (3, 20), (4, 25), (5, 30), (6, 35)], 3) == [(1, 10), (2, 15), (3, 20)] ",
        "num_ids": 1676,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store common elements\n    common_elements = []\n    \n    # Loop through the lists and check if the element is common for all three lists\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    # Return the list of common elements\n    return common_elements\n",
        "test": "assert extract_index_list([1,2,3],[1,2,3],[1,2,3]) == [1,2,3]",
        "num_ids": 1526,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]\n",
        "test": "assert second_smallest([5, 3, 9, 1, 7]) == 3",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*?b+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one('ab') == True",
        "num_ids": 819,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0 # empty list has no pairs of reverse strings",
        "num_ids": 1110,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for i in list1:\n        if isinstance(i, list):\n            t = tuple(i)\n            if t in dict:\n                dict[t] += 1\n            else:\n                dict[t] = 1\n    return dict\n",
        "test": "assert unique_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [7, 8, 9]]) == {(1, 2, 3): 2, (4, 5, 6): 1, (7, 8, 9): 2} ",
        "num_ids": 1512,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # Convert the string to a float\n        float_num = float(num)\n        # Check if the float has exactly 2 decimal places\n        if round(float_num, 2) == float_num:\n            return True\n    except ValueError:\n        pass\n    return False\n",
        "test": "assert is_decimal(\"123.45\") == True",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1,2,3,3,4,5]) == False",
        "num_ids": 722,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True ",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(2, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"\") == 0",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    count = 0\n    while count < n:\n        temp = num\n        i = 0\n        while temp != 0:\n            i = i*10 + temp%10\n            temp //= 10\n        if i == num:\n            count += 1\n        num += 1\n    return num-1\n",
        "test": "assert is_polite(2) == 2 # test for n=2",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1) - 1):\n        pair = (l1[i], l1[i+1])\n        pairs.append(pair)\n    return pairs\n",
        "test": "assert pair_wise([1,2,3]) == [(1,2),(2,3)]",
        "num_ids": 755,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 8) == 1",
        "num_ids": 1179,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))",
        "test": "assert Diff([1,2,3],[1,2]) == [3]",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_num_sum(n):\n    '''\n    This function finds the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    num = 1\n    while count < n:\n        sum += num ** 4\n        count += 1\n        num += 2\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1 # Test for n=1 ",
        "num_ids": 829,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    \n    # Traversing the Expression\n    for char in exp:\n        if char in [\"(\", \"{\", \"[\"]:\n            stack.append(char)\n        elif char in [\")\", \"}\", \"]\"]:\n            if not stack:\n                return False\n\n            opening_bracket = stack.pop()\n            if char == \")\" and opening_bracket != \"(\":\n                return False\n            elif char == \"}\" and opening_bracket != \"{\":\n                return False\n            elif char == \"]\" and opening_bracket != \"[\":\n                return False\n    \n    return len(stack) == 0\n",
        "test": "assert check_expression(\"()\") == True",
        "num_ids": 1604,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Splitting the string into words\n    words = test_str.split()\n    # Looping through the words\n    for word in words:\n        # Checking if the length of the word is equal to K\n        if len(word) == K:\n            # Removing the word from the list\n            words.remove(word)\n    # Joining the remaining words to form a string\n    result = \" \".join(words)\n    # Returning the result\n    return result\n",
        "test": "assert remove_length('', 3) == ''",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Finds the occurrence and position of the substrings within a string.\n\n    Args:\n        text (str): The input string.\n        pattern (str): The substring to search for.\n\n    Returns:\n        A list of tuples, where each tuple contains the position and length of the match in the text.\n        Returns None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    result = [(match.start(), len(match.group())) for match in matches]\n    return result if result else None\n",
        "test": "assert occurance_substring(\"hello world\", \"x\") == None ",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 3, 4, 6]) == False",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = set('aeiouAEIOU')\n    for i in range(1, len(test_str)-1):\n        if test_str[i] not in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15 # positive test case",
        "num_ids": 1059,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "test": "assert pack_consecutive_duplicates([1,1,1,2,2,3,3,3,3]) == [[1,1,1], [2,2], [3,3,3,3]]",
        "num_ids": 1157,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # If the tuple is already in the dictionary, increment its count\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            counts[sublist_tuple] = 1\n    return counts\n",
        "test": "assert unique_sublists([[1,2,3], [4,5,6]]) == {(1,2,3): 1, (4,5,6): 1}",
        "num_ids": 1701,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Find all possible pairs of tuples\n    pairs = combinations(test_list, 2)\n    # Initialize an empty list to store all possible sums of tuples\n    sums = []\n    # Iterate through all pairs of tuples\n    for pair in pairs:\n        # Add the sum of the tuples to the list of sums\n        sums.append(sum(pair[0]) + sum(pair[1]))\n    # Return the list of all possible sums of tuples\n    return sums",
        "test": "assert find_combinations([(1,2), (3,4), (5,6), (7,8)]) == {(1, 2), (3, 4), (5, 6), (7, 8), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (4, 5), (4, 6), (4, 7), (4, 8), (5, 6), (5, 7), (5, 8), (6, 7), (6, 8), (7, 8)}",
        "num_ids": 2917,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False",
        "test": "assert count_divisors(12) == True # Test case 1",
        "num_ids": 893,
        "indeed": true
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n, 2):\n            for k in range(i, j+1, 2):\n                res += arr[k]\n    return res\n",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert r, g, b values to range 0-1\n    r /= 255.0\n    g /= 255.0\n    b /= 255.0\n\n    # Find the maximum value of r, g, b\n    max_val = max(r, g, b)\n\n    # Find the minimum value of r, g, b\n    min_val = min(r, g, b)\n\n    # Calculate the difference between max and min value\n    delta = max_val - min_val\n\n    # Initialize h, s, v variables\n    h = 0\n    s = 0\n    v = max_val\n\n    # Calculate h value\n    if delta != 0:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        elif max_val == b:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n\n        if h < 0:\n            h += 360\n\n    # Calculate s value\n    if max_val != 0:\n        s = delta / max_val\n\n    # Convert values to range 0-1\n    h /= 360.0\n    s *= 100.0\n    v *= 100.0\n\n    return h, s, v\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 2378,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n    return even_num * odd_num\n",
        "test": "assert mul_even_odd([2, 4, 6]) == \"No odd number in the list\"",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Remove the parentheses and split the string by comma\n    test_str = test_str.replace('(', '').replace(')', '').split(',')\n    # Convert the strings to integers and create a tuple\n    test_tuple = tuple(map(int, test_str))\n    return test_tuple\n",
        "test": "assert tuple_str_int('(3, 4)') == (3, 4)",
        "num_ids": 1084,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_right(a, x)\n",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 4) == 2",
        "num_ids": 905,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a[b]{3}'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three('abbb') == True",
        "num_ids": 685,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + tuple(test_str)\n",
        "test": "assert new_tuple([1, 2, 3], \"hello\") == (1, 2, 3, \"h\", \"e\", \"l\", \"l\", \"o\") # testing with list and string",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 3, 4, 5, 7]) == False",
        "num_ids": 863,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) != tuple:\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert remove_nested((1, 2, 3)) == (1, 2, 3)",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert count_list([]) == 0",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            if mid == len(arr) - 1 or arr[mid + 1] != x:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n",
        "test": "assert last([1,2,3,4,5],6) == -1",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb(\"ab\") == True",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def return_sum(d):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in d.values():\n        sum += value\n    return sum\n",
        "test": "assert return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6",
        "num_ids": 968,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum",
        "test": "assert sum_odd(5) == 9 ",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def _sum(arr):   \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for num in arr:\n        result += num\n    return result\n",
        "test": "assert _sum([1,2,3,4,5]) == 15",
        "num_ids": 818,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number.\n    We assume that the number is 32 bit.\n    '''\n    # Mask to get the last d bits\n    mask = (1 << d) - 1\n    \n    # Get the last d bits of n\n    last_d_bits = n & mask\n    \n    # Get the bits to be rotated\n    rotate = n >> d\n    \n    # Rotate the bits to the left and combine with the last d bits\n    rotated_n = (rotate << d) | last_d_bits\n    \n    return rotated_n\n",
        "test": "assert left_rotate(0x00000000, 2) == 0x00000000 # test case 1",
        "num_ids": 2427,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\" ",
        "num_ids": 652,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    else:\n        count = 0\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0 # no numbers are equal",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    pivot = arr[0]\n    for i in range(1, n):\n        if arr[i] < pivot:\n            return i\n    return 0\n",
        "test": "assert count_rotation([1]) == 0",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_perfect_square(n):\n    '''\n    Returns True if n is a perfect square, False otherwise.\n    '''\n    i = 0\n    while i * i < n:\n        i += 1\n    return i * i == n\n",
        "test": "assert is_perfect_square(25) == True",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 4, 6]) == True ",
        "num_ids": 641,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1,2,3],[4,5,6],[7,8,9]]) == [7,8,9]",
        "num_ids": 1501,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n",
        "test": "assert max_run_uppercase(\"helloWorld\") == 1",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 792,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False\n",
        "test": "assert check_K((\"apple\", \"banana\", \"cherry\", \"date\", \"elderberry\"), \"k\") == False",
        "num_ids": 862,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return True\n    return False\n",
        "test": "assert check_smaller((1,2,3),(1,2,4)) == False",
        "num_ids": 987,
        "indeed": true
    }
]