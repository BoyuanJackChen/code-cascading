[
    {
        "number": 2,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)\n",
        "test": "assert similar_elements((\"apple\", \"banana\", \"cherry\"), (\"banana\", \"orange\", \"grape\")) == [\"banana\"] ",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False\n",
        "test": "assert is_not_prime(4) == True # Check if 4 is not a prime number",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a min-heap of size n from the first n elements of nums\n    min_heap = nums[:n]\n    hq.heapify(min_heap)\n\n    # Iterate over the remaining elements of nums\n    for num in nums[n:]:\n        # If num is larger than the smallest element in the heap, replace it\n        if num > min_heap[0]:\n            hq.heappop(min_heap)\n            hq.heappush(min_heap, num)\n\n    # Return the n largest elements in descending order\n    return sorted(min_heap, reverse=True)\n",
        "test": "assert heap_queue_largest([3, 7, 2, 8, 1, 6, 9, 4, 5], 3) == [9, 8, 7]",
        "num_ids": 1512,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes a positive integer as input and returns True if it is a power of 2, otherwise it returns False.\n    '''\n    if x <= 0:\n        return False\n    while x > 1:\n        if x % 2 != 0:\n            return False\n        x //= 2\n    return True ",
        "test": "assert is_Power_Of_Two(3) == False, \"3 is not a power of 2\"",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n",
        "test": "assert find_char_long(\"This is a test\") == [\"This\", \"test\"]",
        "num_ids": 653,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums\n",
        "test": "assert square_nums([1,2,3,4]) == [1,4,9,16] # test for [1,2,3,4] input",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n//2):\n        if str[i] != str[n-i-1]:\n            break\n        else:\n            count += 1\n    if count == n//2:\n        return 0\n    else:\n        return (n//2-count)%n\n",
        "test": "assert find_Rotations(\"\") == 0",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_Occ(s, ch):\n    # Find the first occurrence of the character\n    index = s.find(ch)\n    if index != -1:\n        # If the character is found, remove it from the string\n        s = s[:index] + s[index+1:]\n    \n    # Find the last occurrence of the character\n    index = s.rfind(ch)\n    if index != -1:\n        # If the character is found, remove it from the string\n        s = s[:index] + s[index+1:]\n    \n    return s\n",
        "test": "assert remove_Occ(\"hello\", \"x\") == \"hello\"  # check non-existent character",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list of tuples, where each tuple contains the row index and the sum of the row\n    row_sums = [(i, sum(row)) for i, row in enumerate(M)]\n    # Sort the list of tuples in ascending order by the sum of the row\n    row_sums.sort(key=lambda x: x[1])\n    # Create a new matrix with the rows sorted in the desired order\n    sorted_matrix = [M[i] for i, _ in row_sums]\n    return sorted_matrix\n",
        "test": "assert sort_matrix([[3, 5], [1, 2], [4, 6]]) == [[1, 2], [3, 5], [4, 6]], \"Incorrect sorting\" ",
        "num_ids": 1728,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume",
        "test": "assert find_Volume(5, 6, 7) == 105 ",
        "num_ids": 1013,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile('[a-z]+(_[a-z]+)*')\n    return bool(pattern.fullmatch(text))\n",
        "test": "assert text_lowercase_underscore(\"hello_world\") == True",
        "num_ids": 767,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_perimeter(a):\n    return 4 * a\n",
        "test": "assert square_perimeter(5) == 20",
        "num_ids": 503,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def str_to_list(string1, string2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [0]*NO_OF_CHARS\n    for char in string2:\n        char_list[ord(char)] = 1\n    result = \"\"\n    for char in string1:\n        if not char_list[ord(char)]:\n            result += char\n    return result\n",
        "test": "assert str_to_list(\"abcd\") == ['a', 'b', 'c', 'd'] # test if the function returns a list with elements 'a', 'b', 'c', and 'd' ",
        "num_ids": 1257,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) != len(set(arraynums))\n",
        "test": "assert test_duplicate([1, 2, 3]) == False # test with an array without duplicates",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(1, x):\n        if x % i != 0:\n            continue\n        if x / i in range(1, x):\n            continue\n        return False\n    return True\n",
        "test": "assert is_woodall(300) == False, \"Wrong output for 300\"",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rev(num):\n    # convert the given number to a string and reverse it using slicing\n    reverse_str = str(num)[::-1]\n    # convert the reversed string back to an integer and add 1\n    reverse_num = int(reverse_str) + 1\n    # check if the given number is equal to the reverse number\n    if num == reverse_num:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(123456) == False",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = \"\"\n    arr.sort(reverse=True)\n    for i in range(len(arr)):\n        max_num += str(arr[i])\n        if len(max_num) > 1 and int(max_num) > int(max_num[:-1])*10+int(max_num[-1]):\n            max_num = str(int(max_num[:-1])*10+int(max_num[-1]))\n    return int(max_num)\n",
        "test": "assert find_Max_Num([9, 9, 9]) == 999  # test the case when the array is [9, 9, 9]",
        "num_ids": 1391,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(5, -3) == True",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    \n    # Formula to find the nth octagonal number:\n    # (2n - 1) * (2n - 1)\n    \n    return (2 * n - 1) ** 2\n",
        "test": "assert is_octagonal(1) == True, \"Test case 1 failed\"",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n\n    # Initialize the count dictionary\n    count = defaultdict(int)\n\n    # Loop through all possible substring lengths\n    for n in range(1, len(s) + 1):\n        # Loop through all possible starting positions\n        for i in range(len(s) - n + 1):\n            # Extract the substring and convert to list of digits\n            digits = [int(c) for c in s[i:i+n]]\n            # Calculate the sum of digits and check if it matches the length\n            if sum(digits) == n:\n                count[n] += 1\n\n    # Return the count dictionary\n    return count\n",
        "test": "assert count_Substrings(\"987654321\") == 45 # Test case 4",
        "num_ids": 1203,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "test": "assert smallest_num([3, 5, 7, 9, 2, 8]) == 2 # Test case 1",
        "num_ids": 784,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j] - test_list[i] > max_diff:\n                max_diff = test_list[j] - test_list[i]\n    return max_diff\n",
        "test": "assert max_difference((1, 2, 3, 4, 5)) == 4",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "test": "assert subject_marks([('Maths', 80), ('Science', 70), ('English', 90)]) == [('Science', 70), ('Maths', 80), ('English', 90)] ",
        "num_ids": 1125,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        total = 0\n        for item in data_list:\n            total += recursive_list_sum(item)\n        return total\n    else:\n        return data_list\n",
        "test": "assert recursive_list_sum([]) == 0",
        "num_ids": 902,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([-2, 0, 2, 4, -1, 3]) == 3 ",
        "num_ids": 739,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 678573, 4168705, 26744441, 160500627, 1014137765]\n    if n < 0 or n > 20:\n        return None\n    return bell[n]\n",
        "test": "assert bell_number(0) == 1 ",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            increasing = False\n        if A[i] > A[i-1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return False\n    return True\n",
        "test": "assert is_Monotonic([1, 1, 1, 1, 1]) == True",
        "num_ids": 1272,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False",
        "test": "assert is_sublist([1, 2, 3], [1, 2]) == True",
        "num_ids": 1118,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup) != len(Input[0]):\n            return False\n    return True\n",
        "test": "assert find_equal_tuple([(1,2,3), (4,5,6)]) == True",
        "num_ids": 886,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb_sort algorithm.\n    \"\"\"\n    n = len(nums)\n    shrink_factor = 1.3\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(max(1, gap // shrink_factor))\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 1536,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def dif_Square(n):\n    # checking if n is positive\n    if n <= 0:\n        return False\n    # checking for all pairs of integers a, b such that a^2 + b^2 = n\n    for a in range(int(n**0.5)+1):\n        b = n - a**2\n        if b >= 0 and int(b**0.5)**2 == b:\n            return True\n    # if no such pair exists, then n cannot be represented as the difference of two squares\n    return False\n",
        "test": "assert dif_Square(2) == True",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    j = 0\n    while i < len(colors) and j < len(patterns):\n        if patterns[j] == '':\n            i += 1\n            j += 1\n        elif colors[i] == patterns[j]:\n            i += 1\n            j += 1\n        else:\n            return False\n    return j == len(patterns) and i == len(colors)\n",
        "test": "assert is_samepatterns(['red', 'blue', 'yellow'], ['*', '+', '*']) == False ",
        "num_ids": 1324,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tpl in test_list:\n        divisible = True\n        for val in tpl:\n            if val % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tpl)\n    return result\n",
        "test": "assert find_tuples([(1,2,3),(4,5,6)], 4) == []  # Test case 3",
        "num_ids": 1461,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False ",
        "test": "assert is_Diff(11) == True ",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 15,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len('hello') == True ",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 676,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * (r ** 3)\n    return volume\n",
        "test": "assert volume_sphere(2) == 33.510321638291126",
        "num_ids": 852,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    total = total % 26\n    result = chr(total + 65)  # ASCII value of A is 65\n    return result\n",
        "test": "assert get_Char(\"A\") == \"A\", \"Error in get_Char function\" ",
        "num_ids": 952,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        seq = [0, 1]\n        for i in range(2, n+1):\n            seq.append(seq[seq[i-1]]+seq[i-1-seq[i-1]])\n        return seq[n]\n",
        "test": "assert sequence(1) == 1, \"The 1st term of the sequence should be 1.\"",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n",
        "test": "assert surfacearea_sphere(1) == 4*math.pi  # check if surface area of a sphere with radius 1 is calculated correctly",
        "num_ids": 1039,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return n * (2*n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1, \"First centered hexagonal number is 1\"",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result_dict = ct.Counter(dict1) + ct.Counter(dict2) + ct.Counter(dict3)\n    return dict(result_dict)\n",
        "test": "assert merge_dictionaries_three({'a':1,'b':2}, {'c':3,'d':4}, {'e':5,'f':6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6} # Check if the function returns the merged dictionary of three dictionaries. ",
        "num_ids": 1590,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 4, 5]) == {1:1, 2:1, 3:1, 4:1, 5:1} # test with a list of unique elements",
        "num_ids": 1267,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest_num = -1\n    for i in range(N-1, 0, -1):\n        if i < N and i > closest_num:\n            closest_num = i\n    return closest_num\n",
        "test": "assert closest_num(2) == 1",
        "num_ids": 791,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize the maximum length to 0\n    max_len = 0\n    \n    # loop through each word in the list\n    for word in list1:\n        # get the length of the current word\n        cur_len = len(word)\n        \n        # if the length of the current word is greater than the maximum length, update the maximum length\n        if cur_len > max_len:\n            max_len = cur_len\n    \n    # return the length of the longest word\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6 # longest word is 'banana' with 6 characters ",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Split the input string into a list of substrings\n    str_list = str1.split()\n    \n    # Iterate through the list of substrings and check if the substring is present\n    for s in str_list:\n        if sub_str in s:\n            return True\n    \n    # If the substring is not found, return False\n    return False\n",
        "test": "assert find_substring(\"hello world\", \"python\") == False",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_undulating(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    prev = 1\n    curr = 2\n    while curr < n:\n        prev, curr = curr, prev + curr\n    return curr == n\n",
        "test": "assert is_undulating(3) == True # 3 is undulating",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2, 3) == 8 # check if 2 to the power of 3 is 8",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(1, 2), (2, 1), (3, 3), (4, 4)]) == 2 ",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2],[3,4,5],[6,7,8,9]]) == 2 ",
        "num_ids": 1173,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1, \"Test 1 failed\"",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def frequency_lists(list1):\n    # initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # loop through each element in the flattened list of lists\n    for item in [element for sublist in list1 for element in sublist]:\n        # if the element is already in the dictionary, increment its count by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n    # return the dictionary of frequencies\n    return freq_dict\n",
        "test": "assert frequency_lists([]) == {} # Test case 2",
        "num_ids": 1696,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result\n",
        "test": "assert multiply_num([1]) == 1  # should return 1",
        "num_ids": 767,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary = []\n    while n > 0:\n        binary.append(str(n % 2))\n        n //= 2\n    return ''.join(reversed(binary))\n",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 767,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of the given integer as an integer.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num\n\n    # Find the next number that is not a palindrome\n    for i in range(len(num_str) - 1, -1, -1):\n        if num_str[i] < '9':\n            # Replace the digit with '9'\n            new_num = num_str[:i] + '9' + num_str[i+1:]\n            # Check if the new number is a palindrome\n            if new_num == new_num[::-1]:\n                return int(new_num)\n\n    # If no palindrome is found, return the original number\n    return num",
        "test": "assert next_smallest_palindrome(12345) == 12345",
        "num_ids": 2640,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n",
        "test": "assert kth_element([1,2,3,4,5], 3) == 3, \"Error: kth_element([1,2,3,4,5], 3) should return 3.\"",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words separated by underscores\n    words = word.split('_')\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    # Convert each subsequent word to titlecase\n    for i in range(1, len(words)):\n        words[i] = words[i].title()\n    # Join the words together to form the camel case string\n    return ''.join(words)\n",
        "test": "assert snake_to_camel(\"\") == \"\" # test case 1",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    \n    # Define the Eulerian number\n    def a(n, m):\n        if m == 0:\n            return 1\n        else:\n            return (a(n-1, m-1) + a(n-1, m) * (2*n - m - 1)) // m\n    \n    # Call the Eulerian number function\n    return a(n, m)\n",
        "test": "assert eulerian_num(1, 0) == 1, \"The value of eulerian_num(1, 0) is incorrect.\"",
        "num_ids": 1332,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n",
        "test": "assert sort_sublists([['a', 'c', 'b'], ['d', 'f', 'e'], ['g', 'i', 'h']]) == [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']] ",
        "num_ids": 1303,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "test": "assert count([True, True, False, True, False]) == 3",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    # Convert the tuple to a list and append the list to it.\n    test_list_tup = list(test_tup) + test_list\n    \n    # Return the new list as a tuple.\n    return tuple(test_list_tup)\n",
        "test": "assert add_lists([], (10, 20, 30, 40)) == (10, 20, 30, 40) ",
        "num_ids": 1076,
        "indeed": true
    },
    {
        "number": 108,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap = []\n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    for num in num3:\n        heapq.heappush(heap, num)\n    \n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list\n",
        "test": "assert merge_sorted_list([],[],[]) == [] ",
        "num_ids": 2013,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in s]\n\n    # Rotate the binary list the given number of times\n    rotated_list = binary_list[-n:] + binary_list[:-n]\n\n    # Count the number of odd numbers in the rotated list\n    count = 0\n    for num in rotated_list:\n        if num % 2 != 0:\n            count += 1\n\n    return count\n",
        "test": "assert odd_Equivalent(\"0000\", 4) == 0",
        "num_ids": 1524,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def common_in_nested_lists(nestedlist):\n    common = []\n    for lst in nestedlist:\n        for item in lst:\n            if item not in common and all(item in sublst for sublst in nestedlist):\n                common.append(item)\n    return common\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]) == []",
        "num_ids": 1283,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 575,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 17,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i != {}:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}, {}, {}]), \"The function should return True for an empty list of dictionaries.\"",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_to_int(nums):\n    result = 0\n    for i in nums:\n        result = result * 10 + i\n    return result\n",
        "test": "assert tuple_to_int((1, 2, 3, 4, 5)) == 12345",
        "num_ids": 967,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # iterate over all elements in the list of lists\n    for i in range(len(test_list)):\n        # iterate over all elements in the current list\n        for j in range(len(test_list[i])):\n            # try to convert the element to a float\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                # if conversion fails, keep the element as it is\n                pass\n    return test_list\n",
        "test": "assert list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
        "num_ids": 2038,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"Hello World\") == [\"Hello\", \"World\"] # check if it splits the string \"Hello World\" correctly into a list of strings [\"Hello\", \"World\"]",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def search(arr):\n    # If the array has only one element, it appears only once\n    if len(arr) == 1:\n        return arr[0]\n    \n    # Find the middle element of the array\n    mid = len(arr) // 2\n    \n    # If the middle element is the same as the next element, the same\n    # element appears twice in the array, so we need to search the left or right\n    # half of the array, depending on whether the first or last element is smaller\n    if arr[mid] == arr[mid+1]:\n        if arr[0] < arr[mid]:\n            return search(arr[:mid])\n        else:\n            return search(arr[mid+1:])\n    \n    # If the middle element is greater than the previous element, the only\n    # possibility is that the element appears once in the left half of the array\n    elif arr[mid-1] < arr[mid]:\n        return search(arr[:mid])\n    \n    # If the middle element is smaller than the next element, the only\n    # possibility is that the element appears once in the right half of the array\n    else:\n        return search(arr[mid+1:])\n",
        "test": "assert search([1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 9, 10, 10]) == 1  # should return 1",
        "num_ids": 2653,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][0]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][0])\n            if abs(list1[i][1]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][1]*list1[j][1])\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2), (3,4), (5,6)]) == 24 # Example usage of the function with a list of tuples",
        "num_ids": 1228,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def sum_of_divisors(n):\n    '''\n    Returns the sum of all divisors of a number n.\n    '''\n    divisors_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_sum = 0\n    for i in range(1, limit+1):\n        divisors_sum1 = sum_of_divisors(i)\n        divisors_sum2 = sum_of_divisors(divisors_sum1)\n        if divisors_sum2 == i and divisors_sum1 != i:\n            amicable_numbers_sum += i\n    return amicable_numbers_sum\n",
        "test": "assert amicable_numbers_sum(10000) == 33370",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle",
        "test": "assert angle_complex(3, 4) == 0.9272952180016122 # testing for angle 0",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def find_length(string):\n    max_diff = 0\n    num_0 = 0\n    num_1 = 0\n    for char in string:\n        if char == '0':\n            num_0 += 1\n        elif char == '1':\n            num_1 += 1\n        if num_0 > 0 and num_1 > 0:\n            max_diff = max(max_diff, abs(num_0 - num_1))\n    return max_diff\n",
        "test": "assert find_length(\"101010\") == 1, \"Test case 1 failed\"",
        "num_ids": 3054,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def common_divisors(num1, num2):\n        divisors = []\n        for i in range(1, num1 + 1):\n            if num1 % i == 0 and num2 % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def sum_common_divisors(divisors):\n        return sum(divisors)\n\n    return sum_common_divisors(common_divisors(a, b))\n",
        "test": "assert sum(13,26) == 40, \"The sum of 13 and 26 is not 40\" ",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n",
        "test": "assert multiply_int(3, 4) == 12 ",
        "num_ids": 548,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(3, [\"apple\", \"banana\", \"orange\", \"grape\", \"kiwi\"]) == [\"banana\", \"orange\", \"kiwi\"]",
        "num_ids": 951,
        "indeed": true
    },
    {
        "number": 129,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    magic_num = n * (n ** 2 + 1) / 2\n    \n    if magic_sum != magic_num:\n        return False\n    \n    # check for diagonals\n    diag1 = sum([my_matrix[i][i] for i in range(n)])\n    diag2 = sum([my_matrix[i][n-i-1] for i in range(n)])\n    \n    if diag1 != magic_sum or diag2 != magic_sum:\n        return False\n    \n    # check for rows and columns\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        \n        if row_sum != magic_sum or col_sum != magic_sum:\n            return False\n    \n    return True",
        "test": "assert magic_square_test([[1,2,3],[4,5,6],[7,8,9]]) == False",
        "num_ids": 2179,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the count of each element\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    \n    # find the item with the highest count\n    max_item = None\n    max_count = 0\n    for item, count in counts.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n    \n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 3, 2, 1, 1]) == 1 ",
        "num_ids": 1134,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowels_new = []\n    for char in str1:\n        if char in vowels:\n            vowels_new.append(char)\n    return ''.join(vowels_new[::-1]) + ''.join([char for char in str1 if char not in vowels_new])\n",
        "test": "assert reverse_vowels(\"AEIOU\") == \"UOIEA\"",
        "num_ids": 1308,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = ', '.join(str(i) for i in tup1)\n    return str_tup\n",
        "test": "assert tup_string(()) == \"\"",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n",
        "test": "assert sum_negativenum([-1, 2, -3, 4, -5]) == -9 # sum of negative numbers: -1 - 3 - 5 = -9 ",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n * 2 - 1))\n",
        "test": "assert hexagonal_num(1) == 1, \"The first hexagonal number is 1\"",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "from array import array\n\ndef zero_count(nums):\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    ratio = zero_count / non_zero_count\n    return ratio\n",
        "test": "assert zero_count([1, 2, 3, 4, 5]) == 0 # returns 0 as there are no zeroes in the array",
        "num_ids": 1079,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Convert the given number to binary string and reverse it\n    binary_str = bin(n)[2:][::-1]\n    \n    # Initialize the sum of powers of 2 to zero\n    sum_of_powers_of_two = 0\n    \n    # Iterate through each digit of the binary string\n    for digit in binary_str:\n        # Check if the digit is '1'\n        if digit == '1':\n            # Add the power of 2 to the sum\n            sum_of_powers_of_two += 2 ** binary_str.index(digit)\n    \n    # Check if the sum of powers of 2 is equal to the given number\n    if sum_of_powers_of_two == n:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(5) == False",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    #Calculating the circumference using the formula: 2*pi*r\n    circumference = 2 * 3.14 * r\n    \n    #Returning the calculated circumference\n    return circumference\n",
        "test": "assert circle_circumference(0) == 0, \"Incorrect value for radius=0\"",
        "num_ids": 748,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flatten_list.append(item)\n    return set(flatten_list)\n",
        "test": "assert extract_singly([[1, 2], [3, 4], [5]]) == {1, 2, 3, 4, 5} ",
        "num_ids": 1198,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # Find the maximum element in the unsorted portion of the array\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        \n        # Move the maximum element to the beginning of the array\n        if max_idx != 0:\n            nums[:max_idx+1] = reversed(nums[:max_idx+1])\n        \n        # Move the sorted portion of the array one position to the right\n        nums[:n] = reversed(nums[:n])\n        \n        # Decrement the size of the unsorted portion of the array\n        n -= 1\n    \n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 1738,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3], [4,5,6], [7,8,9]) == 0  # no same pairs",
        "num_ids": 1120,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0  # tuple with no lists",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_solution(a, b, n):\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return (0, n // b)\n    elif b == 0:\n        return (n // a, 0)\n    elif a * b < 0:\n        x = find_solution(abs(a), b, abs(n))\n        if x is not None:\n            return (x[0] - (n // a), -x[1])\n        else:\n            return None\n    elif a > 0 and b > 0:\n        if n % a == 0:\n            return (n // a, 0)\n        elif n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    else:\n        x = find_solution(abs(a), abs(b), abs(n))\n        if x is not None:\n            return (x[0] - (n // a), x[1] - (n // b))\n        else:\n            return None\n",
        "test": "assert find_solution(1, 2, 3) == (3, 0)  # ax + by = n where a = 1, b = 2, n = 3",
        "num_ids": 1764,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1\n",
        "test": "assert remove_elements([1, 2, 3, 4], [2, 4]) == [1, 3]  # example 1",
        "num_ids": 1030,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total",
        "test": "assert sum_series(0) == 0  # check if sum_series(0) returns 0",
        "num_ids": 727,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "from math import tan, pi\n\ndef area_polygon(sides, length):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    angle = (sides - 2) * pi / sides\n    tan_angle = tan(angle)\n    return 0.25 * length ** 2 * tan_angle\n",
        "test": "assert area_polygon(10, 10) == 445.7690691226551 # for a polygon with 10 sides and length 10",
        "num_ids": 1401,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(num):\n        '''\n        Helper function to calculate the sum of divisors of a number.\n        '''\n        divisor_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                divisor_sum += i\n        return divisor_sum\n    \n    if n % 2 == 0:\n        # If n is even, check if the sum of divisors of n/2 and n/2 is equal to n/2\n        if sum_divisors(n//2) == n//2:\n            return True\n    else:\n        # If n is odd, check if the sum of divisors of n+1 and n-1 is equal to n\n        if sum_divisors(n+1) == n and sum_divisors(n-1) == n:\n            return True\n    return False\n",
        "test": "assert div_sum(3) == False ",
        "num_ids": 1348,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n    \n    # Loop through the string\n    for char in str1:\n        \n        # If the character is a letter and its position is not already in the dictionary\n        if char.isalpha() and char not in char_count:\n            \n            # Add the character to the dictionary with a count of 1\n            char_count[char] = 1\n            \n        # If the character is a letter and its position is already in the dictionary\n        elif char.isalpha() and char in char_count:\n            \n            # Increment the count at the character's position\n            char_count[char] += 1\n    \n    # Initialize a variable to store the count of characters that occur at the same position as in the English alphabet\n    count = 0\n    \n    # Loop through the dictionary to count the number of characters that occur at the same position as in the English alphabet\n    for char in char_count:\n        \n        # Check if the character's position is the same as its position in the English alphabet (ignoring case)\n        if ord(char) - 96 == ord(char.lower()):\n            \n            # If the character occurs at the same position, increment the count\n            count += char_count[char]\n    \n    # Return the count of characters that occur at the same position as in the English alphabet\n    return count\n",
        "test": "assert count_char_position(\"12345\") == 0  # No characters are alphabets.",
        "num_ids": 1495,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([]) == 0  # empty list has no even pairs",
        "num_ids": 948,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2**(n-1).bit_length()\n",
        "test": "assert next_power_of_2(0) == 1",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9,10], 4) == 1, \"Incorrect count of frequency\"",
        "num_ids": 1093,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9 ",
        "num_ids": 1181,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    # Calculate the perimeter of the pentagon using the formula: 5a\n    perimeter = 5 * a\n    \n    # Return the result\n    return perimeter\n",
        "test": "assert perimeter_pentagon(1) == 5 ",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"This string is good\") == 0",
        "num_ids": 774,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) > 1:\n        data_type = type(test_tuple[0])\n        for element in test_tuple[1:]:\n            if type(element) != data_type:\n                return False\n        return True\n    else:\n        return True\n",
        "test": "assert check_type((1,2,3)) == True",
        "num_ids": 811,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5, 6], 6, 3) == False",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 1546,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result += char\n    return result\n",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"  # remove the character \"e\" which has odd index value 1 in the given string \"hello\" ",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(3, 4, 5) == 3 # case 1",
        "num_ids": 761,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if the given range is valid\n    if l < 0 or r > n or l > r:\n        return False\n    \n    # Iterate over the bits in the given range\n    for i in range(l, r+1):\n        if n & (1 << i) == 0:\n            # If any bit is unset, return False\n            return False\n    \n    # If all bits are set, return True\n    return True ",
        "test": "assert all_Bits_Set_In_The_Given_Range(10, 8, 9) == False # expected output: False",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones,\n    and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # sort the first n elements of the array based on their sign\n    arr[:n] = sorted(arr[:n], key=lambda x: x < 0)\n    return arr\n",
        "test": "assert re_arrange_array([], 0) == []",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank(\"hello world\", \"#\") == \"hello#world\"",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1) == [10]  # Example test case 3 ",
        "num_ids": 1423,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area\n",
        "test": "assert lateralsuface_cylinder(1, 2) == 12.566370614359172, \"Error in lateralsuface_cylinder function.\"",
        "num_ids": 1183,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "test": "assert volume_cube(2) == 8  # check if the volume of a cube with side length 2 is equal to 8",
        "num_ids": 658,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n    while n:\n        result = result << 1\n        if n & 1:\n            result = result | 1\n        n >>= 1\n    return result\n",
        "test": "assert even_bit_set_number(0b00000000) == 0b00000000 ",
        "num_ids": 2370,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)\n",
        "test": "assert check_occurences([('apple', 2), ('banana', 3), ('orange', 4)]) == {('apple', 2): 1, ('banana', 3): 1, ('orange', 4): 1} # test case 1",
        "num_ids": 1602,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_of_substrings(s):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j]:\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings(\"aaa\") == 6, \"number_of_substrings('aaa') should return 6\"",
        "num_ids": 871,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize variables\n    total_sequences = 0\n    current_element = 2\n    \n    # Calculate the total number of sequences\n    for i in range(n):\n        # Check if the current element is valid\n        if current_element <= m:\n            # Increment the total number of sequences\n            total_sequences += m - current_element + 1\n            # Update the current element to be twice the previous element\n            current_element *= 2\n        else:\n            break\n    \n    # Return the total number of sequences\n    return total_sequences\n",
        "test": "assert get_total_number_of_sequences(5, 2) == 6, \"The total number of sequences should be 6 for m=5 and n=2.\" ",
        "num_ids": 1515,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the length of list2 is greater than or equal to the length of list1\n    if len(list2) >= len(list1):\n        # If true, replace the last element of list1 with the elements of list2\n        list1[-1:] = list2\n    else:\n        # If false, replace the last element of list1 with the first elements of list2 until list1 is the same length as list2\n        list1[-1:] = list2[:len(list1)]\n    return list1\n",
        "test": "assert replace_list([1,2,3], [4,5,6]) == [1,2,4,5,6]",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count",
        "test": "assert count_charac(\"hello world\") == 11",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N += 1\n        if int(math.sqrt(N))**2 == N:\n            return N\n",
        "test": "assert next_Perfect_Square(10) == 16",
        "num_ids": 817,
        "indeed": true
    },
    {
        "number": 245,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = arr[n-1]\n    max_sum_ending_here = arr[n-1]\n\n    for i in range(n-2, -1, -1):\n        if arr[i] > max_sum_ending_here:\n            max_sum_ending_here = arr[i]\n        else:\n            max_sum = max(max_sum, max_sum_ending_here + arr[i])\n            max_sum_ending_here = max_sum_ending_here + arr[i]\n\n    return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15 ",
        "num_ids": 1736,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2 # initial guess\n    epsilon = 0.0001 # tolerance for convergence\n    \n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number/guess) / 2\n        \n    return guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "test": "assert lps(\"abdbca\") == 5  # example given in the problem statement",
        "num_ids": 1643,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum\n",
        "test": "assert harmonic_sum(4) == 2.1666666666666666 # if n = 4, the harmonic sum should be 2.1666666666666666",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty list to store the common elements\n    intersection = []\n\n    # Iterate through each element in the first array\n    for num in array_nums1:\n        # If the element is also in the second array, add it to the intersection list\n        if num in array_nums2:\n            intersection.append(num)\n\n    return intersection\n",
        "test": "assert intersection_array([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]) == [4, 5]",
        "num_ids": 1061,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5), 3) == 1, \"Error in count_X\"",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def insert_element(lst, elem):\n    new_lst = []\n    for i in lst:\n        new_lst.append(elem)\n        new_lst.append(i)\n    return new_lst",
        "test": "assert insert_element([1,2,3,4,5], 0) == [0, 1, 0, 2, 0, 3, 0, 4, 0, 5] # insert 0 before each element in the list",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        complex_number = complex(number)\n        polar_coordinates = cmath.polar(complex_number)\n        complex_numbers.append(polar_coordinates)\n    return complex_numbers\n",
        "test": "assert convert(3+4j) == (5.0, 0.9272952180016122) # expected output of 5.0 and 0.9272952180016122 ",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5 # check if the function returns the correct number of integer elements in a list",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for comb in combinations_with_replacement(l, n):\n        result.append(comb)\n    return result\n",
        "test": "assert combinations_colors([1,2,3], 2) == [(1,1), (1,2), (1,3), (2,2), (2,3), (3,3)]",
        "num_ids": 2542,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(0) == 0",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(1,2) == (2,1)  # check if it swaps two numbers correctly",
        "num_ids": 747,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = []\n    max_tup2 = []\n\n    # iterate through each element in the tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup1.append(test_tup1[i])\n        else:\n            max_tup2.append(test_tup2[i])\n\n    # join the two tuples and return the result\n    return tuple(max_tup1 + max_tup2)",
        "test": "assert maximize_elements((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 6, 7, 8) ",
        "num_ids": 1505,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth Newman\u2013Shanks\u2013Williams prime number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"Helper function to check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams(n):\n        \"\"\"Helper function to find the nth Newman-Shanks-Williams prime number.\"\"\"\n        num = 1\n        while True:\n            if is_prime(num):\n                n -= 1\n            if n == 0:\n                return num\n            num += 1\n\n    return newman_shanks_williams(n)\n",
        "test": "assert newman_prime(2) == 3",
        "num_ids": 1763,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] != 0:\n            result_tuple += (test_tup1[i] / test_tup2[i],)\n        else:\n            result_tuple += (None,)\n    return result_tuple",
        "test": "assert division_elements((1, 2, 3), (2, 4, 6)) == (0.5, 0.5, 0.5)",
        "num_ids": 1348,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])",
        "num_ids": 1335,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def dog_age(human_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = human_age * 7\n    return dog_age\n",
        "test": "assert dog_age(15) == 360",
        "num_ids": 718,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element,\n    returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "test": "assert list_split([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert lateralsurface_cube(2) == 24, \"Error in calculation\"",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(1) == 1, \"square_Sum(1) should return 1\"",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Initialize the result to zero\n    result = 0\n    \n    # Iterate through the stars from 1 to n\n    for i in range(1, n+1):\n        # Calculate the number of stars for the current iteration\n        num_stars = 1 + 8 * (i - 1)\n        \n        # Check if the number of stars is greater than or equal to n\n        if num_stars >= n:\n            # If so, return the result, which is the current iteration\n            return i\n        \n        # If not, update the result with the current iteration\n        result = i\n    \n    # If we finish iterating through all the stars without finding the n'th one,\n    # return the result\n    return result\n",
        "test": "assert find_star_num(1) == 1, \"find_star_num(1) should return 1\"",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)",
        "test": "assert ascii_value('a') == 97 ",
        "num_ids": 641,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1,2,3,4,6]) == 6 ",
        "num_ids": 1391,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def even_Power_Sum(n):\n    # initialize sum to zero\n    sum = 0\n    # loop through even numbers raised to the fifth power\n    for i in range(1, n+1, 2):\n        sum += i**5\n    # return the sum\n    return sum\n",
        "test": "assert even_Power_Sum(1) == 1  # sum of the first 1 even natural number raised to the fifth power",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def rear_extract(test_list):\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n",
        "test": "assert rear_extract([(1, 2, 3), (4, 5, 6)]) == [3, 6]",
        "num_ids": 1067,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = () # create an empty tuple to store the result\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],) # subtract the corresponding elements and add to the result tuple\n    return result_tup # return the result tuple",
        "test": "assert substract_elements((1,2,3),(4,5,6)) == (-3,-3,-3)",
        "num_ids": 1651,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += math.comb(n, i)\n    return sum",
        "test": "assert even_binomial_Coeff_Sum(3) == 4",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r * r * h\n    return volume\n",
        "test": "assert volume_cylinder(0,10) == 0, \"Error in volume_cylinder\"",
        "num_ids": 1117,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def dict_filter(d, n):\n    filtered_dict = {}\n    for key, value in d.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({\"a\": 5, \"b\": 3, \"c\": 7}, 4) == {\"a\": 5, \"c\": 7} ",
        "num_ids": 1115,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = (n * (2 * n - 1)) // 2\n    return decagonal_num\n",
        "test": "assert is_num_decagonal(4) == 16, \"4th decagonal number should be 16\"",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1039,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert not all_unique([1, 2, 3, 4, 5, 5]), \"The list contains duplicate elements\" ",
        "num_ids": 971,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    str_n = str(n) # Convert integer to string\n    digit_count = {} # Dictionary to store frequency of each digit\n    for digit in str_n:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    for digit in digit_count:\n        if digit_count[digit] > int(digit):\n            return False # If frequency of any digit is greater than the digit itself, return False\n    \n    return True # If all the frequencies are less than or equal to the digit, return True\n",
        "test": "assert validate(12345) == True",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in lst:\n        if item != element:\n            return False\n    return True\n",
        "test": "assert check_element([], None) == True",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a([b]{2}|[b]{3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_two_three(\"abbb\") == True",
        "num_ids": 780,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # First, repeat the array k times\n    a = a * k\n    \n    # Now, find the maximum sum of a contiguous subarray\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([1, -2, 3, 10, -4, 7, 2, -5], 4, 2) == 13",
        "num_ids": 1961,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 851,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_lists = []\n    \n    for sublist in list1:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_lists = [sublist]\n        elif len(sublist) == max_length:\n            max_lists.append(sublist)\n    \n    return max_lists\n",
        "test": "assert max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3",
        "num_ids": 1376,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def helper(n, k, i, last_painted, same_as_last, memo):\n        if i == 0:\n            return 1\n        if (i, same_as_last) in memo:\n            return memo[(i, same_as_last)]\n        ans = 0\n        for j in range(1, k+1):\n            if same_as_last != j:\n                ans += helper(n, k, i-1, j, same_as_last, memo)\n            else:\n                if last_painted == j:\n                    ans += helper(n, k, i-1, j, same_as_last, memo)\n        memo[(i, same_as_last)] = ans\n        return ans\n\n    memo = {}\n    return helper(n, k, n, None, None, memo) ",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 1746,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find(n, m):\n    return n // m\n",
        "test": "assert find(10,3) == 3  # test for correctness of find function when n = 10 and m = 3",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "test": "assert otherside_rightangle(3,4) == 5  # Test for a right triangle with sides 3, 4, and hypotenuse 5. ",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if type(val) in [int, float] and val > max_val:\n            max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3]) == 3",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert sum_div(1) == 1",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0 # test 1",
        "num_ids": 1270,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n",
        "test": "assert flatten_list([1, 2, [3, 4], [5, [6, 7, [8, 9]]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1388,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n    max_agg = 0\n    for trans in stdata:\n        name, amount = trans\n        agg_dict[name] += amount\n        max_agg = max(max_agg, agg_dict[name])\n    return max_agg\n",
        "test": "assert max_aggregate([(-1, -2), (-3, -4), (-5, -6), (-7, -8)]) == -24 ",
        "num_ids": 1388,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def count_binary_seq(n):\n    # initialize count to zero\n    count = 0\n    # loop over all possible values of first n bits\n    for i in range(2**n):\n        # convert binary representation of i to binary string\n        binary_str = format(i, f'0{n}b')\n        # compute sum of first n bits\n        first_n_sum = sum(int(binary_str[i]) for i in range(n))\n        # compute sum of last n bits\n        last_n_sum = sum(int(binary_str[-i-1]) for i in range(n))\n        # check if sum of first n bits is equal to sum of last n bits\n        if first_n_sum == last_n_sum:\n            # increment count if the sums are equal\n            count += 1\n    # return count of all binary sequences of length 2n that satisfy the condition\n    return count\n",
        "test": "assert count_binary_seq(0) == 1 # n=0, there is only one sequence with sum of bits equal to zero",
        "num_ids": 1906,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def dict_depth(d, depth=0):\n    \"\"\"\n    Find the depth of a dictionary.\n    \"\"\"\n    if not d:\n        return depth\n    else:\n        depth += 1\n        return max(dict_depth(v, depth) for v in d.values())",
        "test": "assert dict_depth({'a':{'b':{'c':{}}}}) == 3  # should return 3",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            index -= rotations[i]\n            if index < ranges[i]:\n                index += ranges[i]\n    return arr[index]\n",
        "test": "assert find_Element([1,2,3,4,5], [0,2], [1,1], 3) == 4  # Test case 4",
        "num_ids": 1703,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Use regex to find all words starting with 'p'\n    p_words = re.findall(r'\\b[pP]\\w+', ' '.join(words))\n\n    # Return the first two words starting with 'p'\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return p_words\n",
        "test": "assert start_withp([\"python\", \"programming\", \"is\", \"fun\"]) == [\"python\", \"programming\"] ",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [0] * (n+1)\n    max_sum = 0\n    for i in range(1, n+1):\n        dp[i] = a[i-1]\n        for j in range(i):\n            if a[j] < a[i-1] and dp[i] < dp[j] + a[i-1]:\n                dp[i] = dp[j] + a[i-1]\n        if i >= k:\n            max_sum = max(max_sum, dp[i])\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([5, 5, 1, 1, 5], 5, 3, 4) == 10 # max increasing subsequence [5, 5, 5, 5, 5] until 4th index including 4th element 5",
        "num_ids": 2354,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    copy_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        copy_tuplex = copy_tuplex[1:]\n    return copy_tuplex[:n]",
        "test": "assert colon_tuplex((1,2,3),1,2) == (2,3)     # test case 1",
        "num_ids": 1300,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    products = []\n    for i in range(N):\n        for j in range(N):\n            products.append(nums1[i] * nums2[j])\n    return sorted(products, reverse=True)[:N]",
        "test": "assert large_product([-2, 0, 2], [-1, 1, 0], 1) == [-2 * -1]",
        "num_ids": 1513,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(3,5) == 5",
        "num_ids": 550,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n | (1 << (len(bin(n))-3))",
        "test": "assert set_left_most_unset_bit(0b1111) == 0b1111",
        "num_ids": 1050,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(3, 4) == 28.32, \"Error: Incorrect volume of cone with r=3, h=4\" ",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2  # first lucas number is 2",
        "num_ids": 769,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def add_string(lst, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in lst]\n",
        "test": "assert add_string([], \"test\") == []",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    for i in range(len(l1)):\n        if l1[i] not in dictionary:\n            dictionary[l1[i]] = {l2[i]: l3[i]}\n        else:\n            dictionary[l1[i]][l2[i]] = l3[i]\n    return dictionary\n",
        "test": "assert convert_list_dictionary([1,2,3], ['a','b','c'], ['x','y','z']) != {1: {'a': 'x'}, 2: {'b': 'z'}, 3: {'c': 'y'}}",
        "num_ids": 1830,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    elif n % 5 == 0:\n        return n\n    elif n % 4 == 0:\n        return n\n    elif n % 3 == 0:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n",
        "test": "assert get_max_sum(4) == 4",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9] ",
        "num_ids": 1344,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    return None\n",
        "test": "assert first_non_repeating_character(\"abcdefg\") == \"a\", \"First non-repeating character should be 'a'.\"",
        "num_ids": 1169,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"hello\") == False",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n",
        "test": "assert median_numbers(3, 5, 1) == 3 # should return 3 because 3 is the median",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result\n",
        "test": "assert sum_of_digits([12, 15, 20]) == [3, 6, 2]",
        "num_ids": 1077,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i] ^ test_tup2[i],)\n    return result_tuple\n",
        "test": "assert bitwise_xor((1,0,1), (0,1,0)) == (1,1,1)",
        "num_ids": 1233,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(tuple(sorted(i)) for i in test_list)\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([(1,2), (3,4), (5,6)]) == 3",
        "num_ids": 1070,
        "indeed": true
    },
    {
        "number": 401,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1,2),(3,4)), ((5,6),(7,8))) == ((6,8), (10,12)) ",
        "num_ids": 1445,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(10,5) == 5 # testing minimum of 10 and 5",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for i in tuple1:\n        if i == tuplex:\n            return True\n    return False\n",
        "test": "assert check_tuplex(('a', 'b', 'c'), ('d', 'e', 'f')) == False ",
        "num_ids": 788,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 18,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def find_Parity(x):\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(1) == True, \"Error: find_Parity(1) should return True\"",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    # Convert number to string\n    n_str = str(n)\n    # Sort string in descending order\n    n_str_sorted = sorted(n_str, reverse=True)\n    # Join sorted string and return integer\n    return int(''.join(n_str_sorted))\n",
        "test": "assert rearrange_bigger(12345) == 54321, \"Function failed for example input\" ",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or k == 0:\n        return []\n    \n    # Create a list of tuples, where each tuple contains one element from nums1 and one element from nums2.\n    # Use the absolute values of the elements to enable the use of a min heap.\n    pairs = [(abs(num1) + abs(num2), num1, num2) for num1 in nums1 for num2 in nums2]\n    \n    # Use a min heap to find the k smallest pairs.\n    heapq.heapify(pairs)\n    \n    return [(heapq.heappop(pairs)[1], heapq.heappop(pairs)[2]) for _ in range(k)]\n",
        "test": "assert k_smallest_pairs([1, 1, 2], [1, 2, 3], 2) == [(1, 1), (1, 2)]",
        "num_ids": 1764,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def min_product_tuple(lst):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0]*lst[j][0] + lst[i][1]*lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == 6 # correct output",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float('inf') # set the initial minimum value to infinity\n    for val in listval:\n        if type(val) == int or type(val) == float: # check if the value is a number\n            if val < min_val: # check if the value is smaller than the current minimum value\n                min_val = val # update the minimum value\n    return min_val # return the minimum value\n",
        "test": "assert min_val([1, 2, 3, 4, 5]) == 1",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 411,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using underscore as the separator\n    words = word.split('_')\n    # Convert the first word to lower case\n    words[0] = words[0].lower()\n    # Convert the remaining words to title case\n    words[1:] = [w.title() for w in words[1:]]\n    # Join the words to form the camel case string\n    return ''.join(words)\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 926,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in list1:\n        if n == 1:\n            return i[n-1]\n        else:\n            return i[0]\n    return None\n",
        "test": "assert extract_nth_element([], 1) == None  # checks if the function returns None when the list is empty",
        "num_ids": 1189,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n    return max_pair\n",
        "test": "assert max_Product([0, 1, 2, 3, 4]) == 24 ",
        "num_ids": 1267,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # create an empty dictionary to store the first element of each tuple as a key and the list of tuples as its value\n    result = {}\n    \n    # iterate over each tuple in the input list\n    for t in Input:\n        \n        # get the first element of the tuple\n        key = t[0]\n        \n        # if the key already exists in the result dictionary, append the tuple to the list of tuples associated with that key\n        if key in result:\n            result[key].append(t)\n        \n        # otherwise, create a new key in the result dictionary with an empty list as its value and append the tuple to the list\n        else:\n            result[key] = [t]\n    \n    # return the result dictionary, which maps the common first element to a list of tuples with that element as their first element\n    return result\n",
        "test": "assert group_tuples([(\"A\", 1), (\"B\", 2), (\"A\", 3), (\"B\", 4)]) == {\"A\": [(\"A\", 1), (\"A\", 3)], \"B\": [(\"B\", 2), (\"B\", 4)]}",
        "num_ids": 1818,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n",
        "test": "assert Find_Max([\"hello\",\"world\"]) == \"hello\" # check if the function returns the maximum length string",
        "num_ids": 949,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def round_and_sum(list1):\n    # Calculate the sum of the rounded numbers\n    rounded_sum = sum(round(num) for num in list1)\n    # Multiply the sum by the length of the list\n    result = rounded_sum * len(list1)\n    # Print the result\n    print(\"The rounded sum and its length multiplied:\", result)\n",
        "test": "assert round_and_sum([1.5, 2.3, 3.4, 4.2]) == 33 ",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_nums = []\n    for i in range(2, n*2, 2):\n        even_nums.append(i)\n    cube_sum = sum([i**3 for i in even_nums])\n    return cube_sum\n",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    # remove the last delimiter from the string\n    result = result[:-len(delimiter)]\n    return result\n",
        "test": "assert concatenate_tuple(()) == \"\"",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Average_Of_Cube(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1  # check for n = 1",
        "num_ids": 1098,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return result\n",
        "test": "assert extract_rear(('apple', 'banana', 'cherry') == ('cherry')",
        "num_ids": 933,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1,2], [2,3], [3,4]], 2) == 2",
        "num_ids": 996,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    # Create an empty list to hold the odd numbers\n    odd_numbers = []\n    \n    # Loop through each number in the input list\n    for num in nums:\n        # Check if the number is odd\n        if num % 2 == 1:\n            # If the number is odd, append it to the odd_numbers list\n            odd_numbers.append(num)\n    \n    # Return the list of odd numbers\n    return odd_numbers\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]",
        "num_ids": 790,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Convert date string to yyyy-mm-dd format\n    dt = re.sub(r\"(\\d{4})-(\\d{2})-(\\d{2})\", r\"\\3-\\2-\\1\", dt)\n    return dt\n",
        "test": "assert change_date_format('2021-05-10') == '10-05-2021' ",
        "num_ids": 1162,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]  # test the function with a sorted list",
        "num_ids": 1330,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result\n",
        "test": "assert and_tuples((True, True), (True, True)) == (True, True)",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    if a == 0:\n        print(\"The parabola is a straight line.\")\n        return\n    \n    y_intercept = (b**2/4*a - c) / (a)\n    \n    directrix_y = y_intercept + b / (2*a)\n    \n    print(\"The directrix of the parabola is y = {}\".format(directrix_y))\n",
        "test": "assert parabola_directrix(1, 2, 3) == None # Test case 1",
        "num_ids": 1573,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # We can use the set intersection operation to find common elements between the two lists.\n    # If the intersection is non-empty, we have a common element.\n    return not set(list1).isdisjoint(list2)\n",
        "test": "assert common_element([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 911,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the median length of the trapezium\n    median = (base1 + base2 + height) / 2\n    \n    # Return the median length of the trapezium\n    return median\n",
        "test": "assert median_trapezium(12,10,6) == 8.0  # base1=12, base2=10, height=6",
        "num_ids": 1003,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number <= i:\n            return False\n    return True",
        "test": "assert check_greater([1, 2, 3, 4, 5], 1) == False # the function should return False when the number is less than or equal to the elements of the array",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"abb\") == True # string has one a followed by one or more b's",
        "num_ids": 696,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the input number to a string\n    n_str = str(n)\n    # Get the last character of the string\n    last_char = n_str[-1]\n    # Convert the last character back to an integer and return it\n    return int(last_char)\n",
        "test": "assert last_Digit(123) == 3",
        "num_ids": 777,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def neg_nos(lst):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1, 2, -3, 4, -5]) == [-3, -5] ",
        "num_ids": 843,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            result += str1[i]\n    return result\n",
        "test": "assert remove_odd(\"\") == \"\" # empty string",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[i][0]) == test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2), (2,3), (3,4)]) == 0",
        "num_ids": 1282,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n",
        "test": "assert multiple_to_single([1]) == 1 ",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # find all adverbs in the text using regular expression\n    adverbs = re.findall(r'\\b(early|quickly|slowly|later|quickly)\\b', text.lower())\n\n    # return None if no adverbs found\n    if not adverbs:\n        return None\n\n    # get the first adverb and its position in the text\n    adverb = adverbs[0]\n    position = text.lower().find(adverb)\n\n    # return the adverb and its position in a tuple\n    return (adverb, position)\n",
        "test": "assert find_adverb_position(\"I have never seen the sun shine.\") == ([], [])",
        "num_ids": 1578,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculate the side of the cube\n    side = l**(1/3)\n    \n    # Calculate the surface area of the cube\n    surface_area = 6 * l**2\n    \n    return surface_area\n",
        "test": "assert surfacearea_cube(1) == 6  # for a cube of length 1, surface area should be 6",
        "num_ids": 869,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n        else:\n            zero_count += 1\n    \n    if pos_count + neg_count + zero_count == 0:\n        return 0\n    else:\n        return pos_count / (pos_count + neg_count + zero_count)\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 5/5 # 100% positive numbers",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = None\n    for num in list1:\n        if num < 0:\n            if largest_neg_num is None:\n                largest_neg_num = num\n            elif num > largest_neg_num:\n                largest_neg_num = num\n    return largest_neg_num\n",
        "test": "assert largest_neg([1, -2, 3, 4, 5]) == -2, \"Should return the largest negative number in the list\"",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if len(t) >= K:\n            result.append(t[:K])\n        else:\n            result.append(t)\n    return result\n",
        "test": "assert trim_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)], 5) == [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]  # keep the tuples unchanged since K >= length of tuple",
        "num_ids": 1356,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n",
        "test": "assert index_multiplication((1,2,3),(4,5,6)) == (4,10,18) ",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a Counter object to count the occurrences of elements in the list\n    count_dict = Counter(lst)\n    # Create a dictionary to store the count of elements in the tuple\n    count_tuple = {}\n    # Loop through the tuple and count the occurrences of elements in the list\n    for element in tup:\n        if element in count_dict:\n            if element in count_tuple:\n                count_tuple[element] += 1\n            else:\n                count_tuple[element] = 1\n    # Return the count of elements in the tuple\n    return count_tuple\n",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5), [1, 2, 3]) == {1: 1, 2: 1, 3: 1} ",
        "num_ids": 1733,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Create an empty list to store the cubes\n    cubes = []\n    \n    # Loop through each element in the input list\n    for num in nums:\n        # Calculate the cube of the current element and append it to the cubes list\n        cubes.append(num**3)\n    \n    # Return the cubes list\n    return cubes\n",
        "test": "assert cube_nums([1,2,3]) == [1,8,27] # should return [1,8,27]",
        "num_ids": 891,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        # Calculate the perrin number for the current index\n        perrin_num = (i * (i + 1)) // 2\n        # Add the perrin number to the total sum\n        total += perrin_num\n    return total",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1075,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str_list:\n        result.append(s[:l])\n    return result\n",
        "test": "assert extract_string(\"\", 1) == \"\" # test case 4",
        "num_ids": 772,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"This is another test string\") == \"Thisisanotherteststring\"",
        "num_ids": 693,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return abs(sale_amount - actual_cost)\n    else:\n        return 0\n",
        "test": "assert loss_amount(120, 120) == 0 # actual cost is 120, but the sale amount is equal to the actual cost, so no loss",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef sumofFactors(n):\n    # Initialize the sum\n    sum_even_factors = 0\n    # Loop through all numbers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # Check if i is a factor of n\n        if n % i == 0:\n            # Check if i is even\n            if i % 2 == 0:\n                # Add i to the sum\n                sum_even_factors += i\n            # Check if n/i is even\n            if n // i % 2 == 0:\n                # Add n/i to the sum\n                sum_even_factors += n // i\n    return sum_even_factors",
        "test": "assert sumofFactors(1) == 0, \"Function is not correct for 1\"",
        "num_ids": 1257,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b', re.IGNORECASE)\n    words = pattern.findall(text)\n    return words\n",
        "test": "assert text_match_wordz('A zebra is a horse with stripes.') == ['zebra']",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 2:\n        return False\n    else:\n        return \"Invalid month number\"\n",
        "test": "assert check_monthnumb_number(1) == True",
        "num_ids": 1123,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]",
        "num_ids": 950,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min([]) == 0 # an empty list has no minimum length sublist",
        "num_ids": 920,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(2,3) == 6 #Test case 1",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    return pattern.sub('', str1)",
        "test": "assert remove_uppercase(\"\") == \"\" # empty string, all characters are lowercase",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    extracted_lst = []\n    for sublist in lst:\n        extracted_lst.append(sublist[0])\n    return extracted_lst\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7]  # check if the function returns the first element of each sublist ",
        "num_ids": 744,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"Hello, World!\") == 2  # There are two uppercase letters in \"Hello\" and \"World\"",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    combos = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            combos.append((list1[i], list1[j]))\n    return combos\n",
        "test": "assert combinations_list([]) == []  # Test case 2",
        "num_ids": 1581,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def max_subarray_product(arr):\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    max_subarray_product = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n        \n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        \n        max_subarray_product = max(max_product, max_subarray_product)\n        \n    return max_subarray_product\n",
        "test": "assert max_subarray_product([-10, -1, 2, 3, -2]) == 60  # Example from the problem statement",
        "num_ids": 1674,
        "indeed": true
    },
    {
        "number": 464,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_value({\"a\": 1, \"b\": 2, \"c\": 3}, 2) == False",
        "num_ids": 998,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "test": "assert drop_empty({\"a\":1, \"b\":\"\", \"c\":3}) == {\"a\":1, \"c\":3}",
        "num_ids": 1425,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def max_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_so_far = max(max_so_far, max_ending_here * arr[i])\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "test": "assert max_product([-10, -2, -3, 4, 5]) == 20, \"Incorrect output for input [-10, -2, -3, 4, 5]\"",
        "num_ids": 1871,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1, 2, 3, 4, 5)) == (3, 5, 7, 9), \"Error in add_pairwise\"",
        "num_ids": 1055,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod = (prod * num) % n\n    return prod\n",
        "test": "assert find_remainder([1,2,3], 10) == 6, \"Incorrect result\"",
        "num_ids": 990,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l) - 1):\n        if l[i+1] - l[i] == 1:\n            count += 1\n    if count == len(l) - 1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True, \"Consecutive numbers\"",
        "num_ids": 1126,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty list to store the common elements\n    common_elements = []\n    \n    # Convert the tuples to sets and find the intersection\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection set back to a list and add it to the common_elements list\n    common_elements.extend(list(intersection))\n    \n    # Sort the common_elements list in ascending order\n    common_elements.sort()\n    \n    # Convert the common_elements list back to a tuple and return it\n    return tuple(common_elements)\n",
        "test": "assert tuple_intersection((1,2,3),(2,3,4)) == (2,3) ",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n",
        "test": "assert replace_char('exam', 'e', 'a') == 'axam'",
        "num_ids": 933,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict",
        "test": "assert sort_counter({\"apple\": 3, \"banana\": 2, \"cherry\": 1}) == {\"cherry\": 1, \"banana\": 2, \"apple\": 3} ",
        "num_ids": 1236,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_sum(nums):\n    if len(nums) == 0:\n        return 0\n    else:\n        min_num = max_num = nums[0]\n        for num in nums:\n            if num < min_num:\n                min_num = num\n            elif num > max_num:\n                max_num = num\n        return min_num + max_num\n",
        "test": "assert big_sum([1, 2]) == 3",
        "num_ids": 1095,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()\n",
        "test": "assert is_lower(\"Hello World\") == \"hello world\"",
        "num_ids": 621,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_lowercase(\"hello WORLD\") == \" WORLD\" # Testing with a mix of uppercase and lowercase letters",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "test": "assert first_Digit(123) == 1 # 123 has the first digit 1",
        "num_ids": 813,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list\n",
        "test": "assert Split([1,2,3,4,5]) == [1,3,5]",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def difference(n):\n    # sum of cubes of the first n natural numbers\n    sum_of_cubes = n * (n + 1) * (2 * n + 1) // 6\n    # sum of the first n natural numbers\n    sum_of_numbers = n * (n + 1) // 2\n    # difference between the two sums\n    return sum_of_cubes - sum_of_numbers\n",
        "test": "assert difference(1) == 1 - 1",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if bin(A[i]^A[j])[-1] == '1':\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([2, 4, 6, 8], 4) == 0",
        "num_ids": 1193,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "test": "assert toggle_string(\"Hello World\") == \"hELLO wORLD\" ",
        "num_ids": 581,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings to split each digit\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Initialize the sum variable\n    sum_diff = 0\n\n    # Iterate through each digit of the integers\n    for i in range(max(len(n1_str), len(n2_str))):\n\n        # If one of the integers has fewer digits than the other, append a 0 to the shorter integer\n        if i >= len(n1_str):\n            n1_str += '0'\n        if i >= len(n2_str):\n            n2_str += '0'\n\n        # Calculate the difference between the digits\n        diff = int(n1_str[i]) - int(n2_str[i])\n\n        # Add the absolute value of the difference to the sum\n        sum_diff += abs(diff)\n\n    # Return the sum of the per-digit differences between the two integers\n    return sum_diff\n",
        "test": "assert digit_distance_nums(123, 123) == 0, \"Should be 0\"",
        "num_ids": 1868,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum\n",
        "test": "assert max_sub_array_sum([-1, -2, -3, -4, -5], 5) == -1 ",
        "num_ids": 1370,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples into one list\n    test_list = list(test_tup1) + list(test_tup2)\n    # Remove duplicates and sort the list in ascending order\n    unique_list = sorted(list(set(test_list)))\n    # Convert the list back to a tuple and return it\n    return tuple(unique_list)\n",
        "test": "assert union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length",
        "test": "assert Find_Max_Length([[1,2,3], [4,5,6], [7,8,9]]) == 3 ",
        "num_ids": 1163,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches\n",
        "test": "assert extract_values('The value between the quotes is \"hello\".') == ['hello']",
        "num_ids": 922,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([], 0) == 0 ",
        "num_ids": 933,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o'] ",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    # convert the integer to string\n    num_str = str(n)\n    # iterate over each character in the string and add it to the sum\n    for char in num_str:\n        sum += int(char)\n    # return the sum\n    return sum\n",
        "test": "assert sum_digits(0) == 0, \"Error in sum_digits(0)\"",
        "num_ids": 853,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def issort_list(list1):\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1,2,3,4,5]) # should return True",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]\n",
        "test": "assert empty_list(0) == []",
        "num_ids": 618,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['grape', 'orange', 'kiwi'], ['mango', 'peach', 'pear']]) == [['apple', 'banana', 'cherry'], ['grape', 'kiwi', 'orange'], ['mango', 'peach', 'pear']] ",
        "num_ids": 1593,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # creating a set from the given list of numbers\n    unique_nums = set(nums)\n\n    # finding two unique numbers from the set of unique numbers\n    unique_num1 = unique_nums.pop()\n    unique_nums.remove(unique_num1)\n    unique_num2 = unique_nums.pop()\n\n    return [unique_num1, unique_num2]\n",
        "test": "assert two_unique_nums([1]) == [1] # test case 4",
        "num_ids": 1626,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set to store unique numbers\n    unique_nums = set()\n    \n    # iterate over the list and add unique numbers to the set\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.add(num)\n    \n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product\n",
        "test": "assert unique_product([1,2,3]) == 6, \"Incorrect result for unique_product([1,2,3])\"",
        "num_ids": 972,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    # Calculate the surface area of a cylinder using the formula: 2\u03c0rh + 2\u03c0r^2\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r ** 2\n    return surface_area",
        "test": "assert surfacearea_cylinder(1, 1) == 12.566370614359172  # check if surface area of a cylinder with radius 1 and height 1 is correct",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sub_Array(A, B):\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3], [1,4]) == False",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    while factorial % 10 == 0:\n        factorial //= 10\n    return factorial % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    # Check if all lists have the same length\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"All input lists must have the same length.\")\n    \n    # Initialize the flat list with the first element of each input list\n    flat_list = [list1[0], list2[0], list3[0]]\n    \n    # Interleave the remaining elements of the input lists\n    for i in range(1, len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    \n    return flat_list\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9] ",
        "num_ids": 1399,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_list.append(i)\n    return tuple(dissimilar_list)\n",
        "test": "assert find_dissimilar((1,2,3), (1,2,3)) == () # test 4",
        "num_ids": 1524,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            sub_tuple = []\n            for j in i:\n                if even_fnc(j):\n                    sub_tuple.append(j)\n            if len(sub_tuple) > 0:\n                new_tuple.append(tuple(sub_tuple))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return tuple(new_tuple)\n",
        "test": "assert even_ele((), lambda x: x % 2 == 0) == () ",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area using the formula: 2*b*h + b^2\n    area = 2 * b * s + b ** 2\n    # Return the calculated surface area\n    return area\n",
        "test": "assert surface_Area(7, 8) == 161, \"Error in surface_Area function\"",
        "num_ids": 1021,
        "indeed": true
    },
    {
        "number": 582,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert my_dict({}) == True  # checks if empty dictionary is empty",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan(n):\n        if n <= 1:\n            return 1\n        return (2*n-1) * catalan(n-1) // (n+1)\n    \n    return catalan(num)",
        "test": "assert catalan_number(0) == 1, \"Catalan number is incorrect for input 0\"",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b\\s*\\bly\\b')\n    match = pattern.search(text)\n    if match:\n        adverb = match.group(0)\n        positions = [m.start() for m in pattern.finditer(text)]\n        return adverb, positions[0], positions[-1]\n    else:\n        return None\n",
        "test": "assert find_adverbs(\"The cat chased the mouse\") == None",
        "num_ids": 1211,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item[1])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert expensive_items([(10, 'laptop'), (20, 'cell phone'), (30, 'headphones'), (40, 'chair'), (50, 'keyboard')], 0) == [] ",
        "num_ids": 2185,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid input.\"\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part",
        "test": "assert split_Arr([1,2,3,4,5], 5) == [1,2,3,4,5]",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_x = tuple(listx)\n    return tuple_x\n",
        "test": "assert list_tuple([1,2,3]) == (1,2,3)  # check if list_tuple([1,2,3]) returns a tuple (1,2,3)",
        "num_ids": 726,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_val = min(nums)\n    max_val = max(nums)\n    return abs(max_val - min_val)\n",
        "test": "assert big_diff([10, 3, 5, 6, 20]) == 17  # [3, 6, 10, 20] -> 20 - 3 = 17 ",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares_list = []\n    for i in range(a, b+1):\n        root = int(i ** 0.5)\n        if root*root == i:\n            perfect_squares_list.append(i)\n    return perfect_squares_list\n",
        "test": "assert perfect_squares(10, 100) == [16, 25, 36, 49, 64, 81, 100]",
        "num_ids": 1500,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)\n",
        "test": "assert polar_rect(1,0) == (1,0)  # the origin is at (1,0) in rectangular coordinates",
        "num_ids": 1036,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def swap_List(newList):\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1] # test case 1 ",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    return (n * binomial_Coeff(n-1, k-1)) // k\n\n\ndef binomial_Coeff_sum(n):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += binomial_Coeff(n, i)\n    return total\n",
        "test": "assert binomial_Coeff(0,0) == 1 # should return 1",
        "num_ids": 1402,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    # Regular expression pattern to match leading zeroes\n    pattern = re.compile(r'0+(?=\\d)')\n    # Replace leading zeroes with empty string\n    new_ip = re.sub(pattern, '', ip)\n    # Return the new ip address\n    return new_ip\n",
        "test": "assert removezero_ip('10.0.0.1') == '10.0.0.1' # valid ip with no leading zeros",
        "num_ids": 985,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def diff_even_odd(list1):\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        elif odd == None:\n            odd = num\n    return even - odd\n",
        "test": "assert diff_even_odd([1,2,3,4,5]) == 3",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Initialize count and swaps lists\n    count = 0\n    swaps = []\n\n    # Convert strings to lists of integers\n    str1_list = [int(x) for x in str1]\n    str2_list = [int(x) for x in str2]\n\n    # Iterate over the lists and compare elements\n    for i in range(len(str1_list)):\n        if str1_list[i] != str2_list[i]:\n            count += 1\n            swaps.append((i, str1_list[i], str2_list[i]))\n\n    # Return count of swaps required\n    return count\n",
        "test": "assert min_Swaps(\"0101\", \"0101\") == 0  # example case 4",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n",
        "test": "assert tuple_size(()) == 0, \"Incorrect size for empty tuple\" ",
        "num_ids": 727,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n\n    # If we reach here, one of the arrays must be exhausted.\n    if i < len(arr1):\n        return arr1[i+k-1]\n    else:\n        return arr2[j+k-1]\n",
        "test": "assert find_kth([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 1) == 1, \"Incorrect output\"",
        "num_ids": 2274,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the input number to a string to iterate over its digits\n    num_str = str(number)\n    # Calculate the number of digits in the input number\n    num_digits = len(num_str)\n    # Initialize a variable to hold the sum of the cubes of the digits\n    sum_cubes = 0\n    # Iterate over the digits of the input number\n    for digit in num_str:\n        # Convert each digit from a string to an integer and cube it\n        cube = int(digit) ** num_digits\n        # Add the cube to the sum of cubes\n        sum_cubes += cube\n    # Check if the sum of cubes is equal to the original number\n    if sum_cubes == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 1066,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    avg = total/number\n    return (total, avg)\n",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 858,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(0) == True, \"is_Even function should return True for 0\"",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_repeated_char(str1):\n    # Creating a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Finding the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello world\") == \"l\" # expected output: \"l\"",
        "num_ids": 1088,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    \n    def is_ludic(num):\n        \"\"\"Helper function to check if a number is lucid\"\"\"\n        sum_of_digits = sum(map(int, str(num)))\n        return num == sum_of_digits\n    \n    return [num for num in range(1, n+1) if is_ludic(num)]\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "num_ids": 2574,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words using space as the delimiter\n    words = s.split()\n    \n    # Reverse the order of the words in the list\n    words.reverse()\n    \n    # Join the words back together into a single string\n    reversed_s = ' '.join(words)\n    \n    return reversed_s\n",
        "test": "assert reverse_words(\"\") == \"\"",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(num**0.5)+1, 2):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert prime_num(2), \"2 should be a prime number\"",
        "num_ids": 970,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(180) == math.pi, \"Error: 180 degrees is not equal to pi radians.\"",
        "num_ids": 1004,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert find_literals(\"The quick brown fox jumps over the lazy dog\", r'.*') == ('The quick brown fox jumps over the lazy dog', 0, 43)",
        "num_ids": 1256,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def bell_Number(n):\n    # Define a list to store the first n terms of the sequence\n    seq = [1]\n\n    # Use a for loop to generate the next terms of the sequence\n    for i in range(1, n+1):\n        # Initialize a variable to store the sum of previous terms\n        sum = 0\n\n        # Use a for loop to calculate the sum of previous terms\n        for j in range(1, i+1):\n            sum += seq[j-1]\n\n        # Append the sum to the sequence\n        seq.append(sum)\n\n    # Return the nth term of the sequence (which is also the nth bell number)\n    return seq[n]\n",
        "test": "assert bell_Number(1) == 1, \"Test 1 failed\"",
        "num_ids": 1210,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]",
        "test": "assert remove_kth_element([1,2,3,4,5], 5) == [1,2,3,4] ",
        "num_ids": 1157,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = test_list[0][N]\n    for row in test_list:\n        if row[N] > max_val:\n            max_val = row[N]\n    return max_val\n",
        "test": "assert max_of_nth([[1,2,3],[4,5,6]], 2) == 6 ",
        "num_ids": 1036,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first element of each sublist\n    and the second one has the second.\n    \"\"\"\n    first_list = []\n    second_list = []\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n    return [first_list, second_list]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]",
        "num_ids": 1061,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum\n",
        "test": "assert cummulative_sum([-1,-2,3,4,-5]) == [-1, -3, 0, 4, 9] # test case 2",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        result.append(avg)\n    return result\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6))) == [2.0, 5.0]",
        "num_ids": 1520,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n        return result\n    else:\n        return None\n",
        "test": "assert tuple_modulo((3, 4, 5), (2, 3, 4)) == (1, 1, 1)",
        "num_ids": 1439,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    elif steps < 0:\n        return -1\n    elif d == 0:\n        return steps\n    else:\n        if steps >= d:\n            return 1 + min_Jumps(steps - d, d)\n        else:\n            return 1 + min_Jumps(steps, d - steps)\n",
        "test": "assert min_Jumps(4, 2) == 2 # if distance d = 2, and steps = 4, then we can jump twice to reach (2, 0)",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1, 2, 3], [2, 4, 6]) == [0.5, 0.5, 0.5]",
        "num_ids": 866,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def move_num(test_str):\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    \n    return ''.join(sorted(nums)) + ''.join([char for char in test_str if not char.isdigit()])\n",
        "test": "assert move_num(\"abc\") == \"abc\"",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def largest_subset(a):\n    a.sort()\n    left = 0\n    right = len(a) - 1\n    subset = []\n    while left < right:\n        if a[left] % a[right] == 0 or a[right] % a[left] == 0:\n            subset.append(max(a[left], a[right]))\n            left += 1\n            right -= 1\n        elif a[left] % a[left+1] == 0 or a[left+1] % a[left] == 0:\n            subset.append(max(a[left], a[left+1]))\n            left += 1\n        else:\n            subset.append(a[right])\n            right -= 1\n    return len(subset)\n",
        "test": "assert largest_subset([1, 2, 3, 6, 9, 12]) == 3 # example case 4",
        "num_ids": 1447,
        "indeed": true
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 0:\n        # both lists have an even number of elements\n        return (arr1[n//2 - 1] + arr1[n//2])/2\n    else:\n        # both lists have an odd number of elements\n        return arr1[n//2]\n",
        "test": "assert get_median([1,3,5],[2,4,6],3) == 3 # [1,3,5] and [2,4,6] have the same median value",
        "num_ids": 1886,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5], 2) == [1, 4, 9, 16, 25] # check if the function returns the correct result for input [1, 2, 3, 4, 5] and n = 2",
        "num_ids": 997,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"HELLO\") == \"HELLO\", \"Incorrect output for 'HELLO'\"",
        "num_ids": 459,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 799,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the diameter of the semicircle\n    diameter = 2 * r\n\n    # Calculate the semiperimeter\n    semiperimeter = (r + diameter) / 2\n\n    # Calculate the area of the largest possible triangle\n    area = 0.5 * semiperimeter * math.sin(math.acos(1 - (1 / semiperimeter ** 2)))\n\n    return area",
        "test": "assert triangle_area(5) == 20.6478 ",
        "num_ids": 1021,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array)\n    for i in range(start, end):\n        if array[i] != i + 1:\n            return i + 1\n    return end + 1\n",
        "test": "assert find_First_Missing([1,2,3,4,5]) == 6",
        "num_ids": 1432,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\" ",
        "num_ids": 523,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def Split(numbers):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "test": "assert Split([1,2,3,4,5]) == [2, 4]  # test case 1",
        "num_ids": 999,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele[0], ele[1]\n    adjac_list = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    if sub:\n        return [ele for ele in adjac_list if ele not in sub]\n    else:\n        return adjac_list\n",
        "test": "assert adjac((0, 0)) == [(1, 0), (-1, 0), (0, 1), (0, -1)] ",
        "num_ids": 1371,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char == ' ':\n            new_text += '_'\n        elif char == '_':\n            new_text += ' '\n        else:\n            new_text += char\n    return new_text\n",
        "test": "assert replace_spaces(\"Hello_World\") == \"Hello World\" ",
        "num_ids": 715,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    return [x for x in num_list if x != 0] + [0] * num_list.count(0)\n",
        "test": "assert move_zero([1,2,0,4,0,5]) == [1,2,4,5,0,0] # list with zeroes in between",
        "num_ids": 1169,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize sum of xor pairs to zero\n    xor_sum = 0\n    \n    # Iterate through the list and calculate xor of all pairs\n    for i in range(n-1):\n        for j in range(i+1, n):\n            xor_sum += arr[i]^arr[j]\n    \n    return xor_sum\n",
        "test": "assert pair_xor_Sum([1,3,5,7],4) == 24",
        "num_ids": 1107,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "test": "assert heap_sort([]) == [] # test empty list",
        "num_ids": 1148,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) # Should return True since the sale amount is equal to the cost",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    # calculate wind chill index\n    wc = 13.12 + 0.6215*t_f - 11.37*math.pow(v, 0.16) + 0.3965*t_f*math.pow(v, 0.16)\n    # round wind chill index to the next integer\n    wc_rounded = round(wc)\n    return wc_rounded\n",
        "test": "assert wind_chill(0,10) == 8, \"Wrong wind chill calculation for 0 km/h wind and 10 Celsius temperature\"",
        "num_ids": 1592,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam([]) == 0",
        "num_ids": 851,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    return pattern.sub('', items)\n",
        "test": "assert remove_parenthesis('(hello) world (test)') == ' world '",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    # Calculate the nonagonal number using a formula\n    nonagonal = n * (2 * n - 1)\n    \n    return nonagonal\n",
        "test": "assert is_nonagonal(1) == 1",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'(?<=\\w)z(?=\\w)')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle(\"hello world\") == False, \"z should not be in the middle of a word\"",
        "num_ids": 859,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    if k >= len(input):\n        return input[::-1]\n    else:\n        return input[:k][::-1] + input[k:]\n",
        "test": "assert reverse_Array_Upto_K([1], 1) == [1] # check for single element array",
        "num_ids": 1278,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {'a': 1, 'b': 2}) == (1, 2, 3, {'a': 1, 'b': 2})  # check that the function correctly adds the dictionary to the tuple",
        "num_ids": 1241,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = float('-inf')\n    \n    # Generate all possible paths from the top-left to bottom-right cell\n    paths = [[(0, 0)]]\n    for i in range(1, n):\n        new_paths = []\n        for path in paths:\n            new_paths.append(path + [(i, 0)])\n            new_paths.append(path + [(i, i)])\n        paths = new_paths\n    \n    # Compute the average cost for each path and update the max_avg\n    for path in paths:\n        total_cost = 0\n        for i, j in path:\n            total_cost += cost[i][j]\n        avg_cost = total_cost / len(path)\n        max_avg = max(max_avg, avg_cost)\n    \n    return max_avg\n",
        "test": "assert maxAverageOfPath([[1,1,1],[1,1,1],[1,1,1]]) == 1, \"Incorrect answer\"  # Example case 2",
        "num_ids": 2800,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, \n    - minimal height, \n    - minimal weight. \n    Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    # create an empty dictionary to store the filtered students\n    filtered_students = {}\n    \n    # iterate through the students dictionary\n    for student, measurements in students.items():\n        # check if the height and weight are above the minimum\n        if measurements[0] > h and measurements[1] > w:\n            # add the student to the filtered dictionary\n            filtered_students[student] = measurements\n    \n    # return the filtered dictionary\n    return filtered_students\n",
        "test": "assert filter_data({'John': (175, 65), 'Alice': (178, 50), 'Bob': (165, 68)}, 170, 50) == {'Alice': (178, 50)} # check if the function filters correctly",
        "num_ids": 1984,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,2,3], [1,2,3]) == 3",
        "num_ids": 1037,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to string to easily iterate over its digits\n    base_str = str(base)\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Iterate over the digits of the base and add their power to the sum\n    for digit in base_str:\n        sum += int(digit) ** power\n\n    # Return the sum of the digits of the base raised to the specified power\n    return sum\n",
        "test": "assert power_base_sum(5, 1) == 5 # check for base 5 to the power of 1",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import re\n\ndef extract_quotation(text1):\n    # Find all substrings enclosed in \" \" using regular expressions\n    matches = re.findall('\"([^\"]*)\"', text1)\n    \n    # Extract the values between the \" \" and store them in a list\n    quotation_values = [match for match in matches if match != \"\"]\n    \n    return quotation_values\n",
        "test": "assert extract_quotation('\"The first quotation\" is correct') == 'The first quotation'",
        "num_ids": 825,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12)",
        "num_ids": 1357,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initialize a new empty list for the sum\n    lst3 = []\n    # iterate through the elements in the first list\n    for i in range(len(lst1)):\n        # add the corresponding element from the second list\n        lst3.append(lst1[i] + lst2[i])\n    # return the new list\n    return lst3\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]     # test case 1",
        "num_ids": 1175,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list based on consecutive duplicates\n    grouped_nums = groupby(nums)\n    # Create a new list with only the first occurrence of each consecutive duplicate\n    result = [key for key, group in grouped_nums]\n    return result",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 1283,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (2 * math.pi * r * h) + (2 * math.pi * r**2)\n    return s\n",
        "test": "assert lateralsurface_cone(1,1) == 12.566370614359172, \"Error: lateralsurface_cone(1,1) should return 12.566370614359172\" ",
        "num_ids": 1370,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[ ,.]', ':', text)\n",
        "test": "assert replace_specialchar(\"hello world\") == \"hello:world\" ",
        "num_ids": 815,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    n = len(A)\n    left, right = 0, n-1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            # found the first occurrence\n            if mid == 0 or A[mid-1] != x:\n                return mid\n            else:\n                # continue searching to the left\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # x not found\n    return -1\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2",
        "num_ids": 1548,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            product = 1\n            for k in range(i, j+1):\n                product *= arr[k]\n            total_sum += product\n    return total_sum\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 0, 1]) == 0, \"Function not correct\"",
        "num_ids": 2099,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    \n    # XOR with the sum of all 1's in the binary representation of the number, except the first and the last bit\n    n ^= (n & -n).bit_length() - 1\n    \n    # XOR with the sum of all 1's in the binary representation of the number, except the first and the last bit\n    n ^= (n & -n).bit_length() - 1\n    \n    return n\n",
        "test": "assert set_middle_bits(0b00001) == 0b00001",
        "num_ids": 1462,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index",
        "test": "assert left_insertion([1, 3, 4, 5], 4) == 2",
        "num_ids": 908,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str(\"Abc\") == True ",
        "num_ids": 616,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def geometric_sum(n):\n    if n <= 0:\n        return 0\n    else:\n        return (1/2**(n-1)) + geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    i = 1\n    while True:\n        triangular_num = int(i * (i + 1) / 2)\n        if len(str(triangular_num)) == n:\n            return i\n        i += 1\n",
        "test": "assert find_Index(1) == 1, \"Error in find_Index(1)\"",
        "num_ids": 918,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup_dict = {}\n    for i in range(0, len(test_tup), 2):\n        tup_dict[test_tup[i]] = test_tup[i+1]\n    return tup_dict",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 1258,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Get the first character from the string\n    first_char = s[0]\n    \n    # Iterate through each character in the string and check if it is same as the first character\n    for char in s:\n        if char != first_char:\n            return False\n    \n    return True\n",
        "test": "assert all_Characters_Same('hello') == False",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the height of the tetrahedron using the Law of Cosines\n    a = side\n    b = side\n    c = side\n    cos_angle = (a**2 + b**2 - c**2) / (2 * a * b)\n    height = math.sqrt(b**2 + c**2 - 2 * b * c * cos_angle)\n    \n    # Calculate the area using the formula: (1/3) * base * height\n    base = 4 * side**2\n    area = (1/3) * base * height\n    \n    return round(area, 2)\n",
        "test": "assert area_tetrahedron(1) == math.sqrt(6) # base = 1, height = sqrt(3)/2 ",
        "num_ids": 1249,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = n % len(lst)  # make sure n is within the length of the list\n    return lst[-n:] + lst[:-n]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3] # basic case with a valid input",
        "num_ids": 1255,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3, 4, 5)) == False",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    divisible_nums = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        divisible = True\n        for digit in digits:\n            if num % digit != 0:\n                divisible = False\n                break\n        if divisible:\n            divisible_nums.append(num)\n    return divisible_nums\n",
        "test": "assert divisible_by_digits(10000, 20000) == [10000, 11111, 12112, 13121, 14131, 15141, 16152, 17162, 18172, 19182, 20000]  # check another example given in the function docstring ",
        "num_ids": 2291,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5 * r ** 2 * a / 360",
        "test": "assert sector_area(7, 361) == None, \"Incorrect sector area for r=7 and a=361\"",
        "num_ids": 1128,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n\n    # Create a 3D matrix to store lengths of LCS for substrings\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n\n    # Fill in the matrix using dynamic programming approach\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Find the length of LCS\n    length = L[m][n][o]\n\n    # Create a list to store the LCS\n    lcs = [\"\"] * (length+1)\n\n    # Fill the LCS list using the matrix\n    lcs[length] = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs[length-1] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n            length -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS list and return it as a string\n    return \"\".join(lcs[::-1])\n",
        "test": "assert lcs_of_three(\"ABCDEF\", \"QRSTUV\", \"WXYZ\") == \"\" ",
        "num_ids": 2984,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Using regular expression to identify capital letters and inserting space after them\n    str1 = re.sub(r'([A-Z])', r' \\1', str1)\n    # Removing leading space\n    str1 = str1.lstrip()\n    return str1",
        "test": "assert capital_words_spaces(\"The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog.\" ",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "test": "assert sort_numeric_strings(['-10', '-2', '-3', '-1']) == ['-10', '-3', '-2', '-1']",
        "num_ids": 1398,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1,2,3)], (4,5)) == [(1,2,3),(4,5)]",
        "num_ids": 858,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i >= len(arr):\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    \n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)",
        "test": "assert check_min_heap_helper([5, 3, 8, 1, 2], 1) == False",
        "num_ids": 1647,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n - 1) + jacobsthal_num(n - 2))\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 879,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_k_list = []\n    for i in range(K):\n        min_val = min(test_list)\n        min_k_list.append(min_val)\n        test_list.remove(min_val)\n    return min_k_list\n",
        "test": "assert min_k([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12)], 3) == [(1,2), (3,4), (5,6)]  # Check if returns the first 3 records",
        "num_ids": 1879,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(i)\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3], [1, 2, 3], [2, 3, 4]) == []",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = None\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num != smallest and (second_smallest is None or num < second_smallest):\n            second_smallest = num\n    \n    return second_smallest\n",
        "test": "assert second_smallest([1, 2, 3]) == 2",
        "num_ids": 1029,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"ab\") == True ",
        "num_ids": 581,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    \n    # Initialize count to zero\n    count = 0\n    \n    # Loop through each string in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the two strings are reverses of each other\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    \n    # Return the count of reverse pairs\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0, \"Should return 0 for empty list\"",
        "num_ids": 1228,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary\n    where every list is converted to a tuple and the value of such tuple is the number of its occurencies\n    in the original list.\n    \"\"\"\n    # Convert all lists to tuples for comparison\n    list1 = [tuple(l) for l in list1]\n    # Count the occurrences of each tuple\n    counts = {}\n    for t in list1:\n        counts[t] = counts.get(t, 0) + 1\n    return counts\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1250,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return False\n        else:\n            return round(float_num, 2) == float_num\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal(\"123.456\") == False",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True\n",
        "test": "assert unique_Element([1]) == True",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months_30 = [4, 6, 9, 11] # list of months with 30 days\n    if monthnum3 in months_30:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True  # April has 30 days",
        "num_ids": 1067,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 3, 15, 11, 6, 45, 2], 7) == 1",
        "num_ids": 1155,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr(\"123\") == 3",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import math\n\ndef is_polite(n):\n    count = 0\n    i = 1\n    while count < n:\n        if len(str(i)) == len(set(str(i))):\n            count += 1\n        i += 1\n    return i - 1",
        "test": "assert is_polite(1) == 1",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1,2,3,4,5]) == [(1, 2), (2, 3), (3, 4), (4, 5)] ",
        "num_ids": 916,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 6) == 2  # test case 1",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = [x for x in li1 if x not in li2]\n    return li_diff\n",
        "test": "assert Diff([1,2,3],[1,2,4]) == [3] # test case 1",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum variable\n    sum = 0\n    \n    # Loop through first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the fourth power of the number and add to sum\n        sum += i ** 4\n    \n    # Return the sum\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1",
        "num_ids": 909,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from collections import deque\n\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            else:\n                left = stack.pop()\n                if not {')': '(', ']': '[', '}': '{'}.get(char) == left:\n                    return False\n    return not stack\n",
        "test": "assert check_expression(\"(a+(b*c)/(d-e)+f\") == False",
        "num_ids": 1067,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return ' '.join(result)\n",
        "test": "assert remove_length(\"Hello world!\", 5) == \"world!\"",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start()))\n    return result if result else None\n",
        "test": "assert occurance_substring(\"abcabc\", \"bc\") != [(1, 2), (2, 3), (3, 4)]",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 3, 4, 5]) == False # [1, 2, 3, 4, 5] has an even number at index 2",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels('') == 0 # Test empty string",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create an empty dictionary\n    freq = {}\n    # iterate through the list\n    for i in arr:\n        # check if the element is already in the dictionary\n        if i in freq:\n            # if it is, increment its count\n            freq[i] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            freq[i] = 1\n    # initialize the sum to zero\n    sum = 0\n    # iterate through the list again\n    for i in arr:\n        # if the count of the element is 1, add it to the sum\n        if freq[i] == 1:\n            sum += i\n    # return the sum\n    return sum\n",
        "test": "assert find_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1372,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 1165,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary,\n    where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublist_dict:\n            sublist_dict[sublist_tuple] = 1\n        else:\n            sublist_dict[sublist_tuple] += 1\n    return sublist_dict\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1315,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    target = sum(test_list)\n    result = set()\n    for i in range(1, len(test_list) + 1):\n        for c in combinations(test_list, i):\n            if sum(c) == target:\n                result.add(c)\n    return result\n",
        "test": "assert find_combinations([(1,2,3), (4,5,6)]) == [(6,), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 6), (1, 3, 4), (1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (1, 5, 6), (2, 3, 4), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6), (2, 5, 6), (3, 4, 5), (3, 4, 6), (3, 5, 6), (4, 5, 6)] ",
        "num_ids": 2515,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes a number n as input and returns the count of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count\n\ndef check_even_divisors(n):\n    \"\"\"\n    This function takes a number n as input and returns True if the count of divisors is even, else False.\n    \"\"\"\n    count = count_divisors(n)\n    if count % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert count_divisors(4) == 3",
        "num_ids": 1220,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 != 0:\n                for k in range(i, j+1):\n                    ans += arr[k]\n    return ans\n",
        "test": "assert odd_length_sum([]) == 0  # Example test case",
        "num_ids": 2122,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def rgb_to_hsv(r, g, b):\n    r, g, b = float(r) / 255.0, float(g) / 255.0, float(b) / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n    hue = round(hue * 60)\n    if hue < 0:\n        hue += 360\n    saturation = 0 if delta == 0 else delta / cmax\n    value = cmax\n    return hue, saturation, value\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0) # black",
        "num_ids": 2223,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n            even_count += 1\n            if even_count == 2:\n                break\n        else:\n            odd_product *= num\n            odd_count += 1\n            if odd_count == 2:\n                break\n    \n    return even_product * odd_product\n",
        "test": "assert mul_even_odd([0, 2, 4, 6, 8]) == 0",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = tuple(int(x) for x in test_str.strip('()').split(','))\n    return int_tuple\n",
        "test": "assert tuple_str_int(\"(1,2,3)\") == (1,2,3)",
        "num_ids": 1082,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "test": "assert right_insertion([1, 3, 4, 6], 5) == 3",
        "num_ids": 895,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbba\") == True",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple\n",
        "test": "assert new_tuple([\"apple\", \"banana\", \"orange\"], \"fruit\") == (\"apple\", \"banana\", \"orange\", \"fruit\")",
        "num_ids": 856,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8, 10]), \"Correct output\"",
        "num_ids": 921,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result += list(item)\n        else:\n            result.append(item)\n    return tuple(result)",
        "test": "assert remove_nested((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5) # Check if the function can handle tuples without nested tuples",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]) == 4 ",
        "num_ids": 772,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the index to -1 to handle case when x not found in arr\n    index = -1\n    # Loop through the array and update index of x if found\n    for i in range(len(arr)):\n        if arr[i] == x:\n            index = i\n    # Return the index of last occurrence of x in arr\n    return index\n",
        "test": "assert last([1,2,3,4,5], 5) == 4 # expected output 4",
        "num_ids": 1253,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef text_starta_endb(text):\n    # Define the pattern as a regular expression\n    pattern = r'a.*b'\n    # Use the re.search() method to find a match in the text\n    match = re.search(pattern, text)\n    # If a match is found, return the matched text, otherwise return None\n    if match:\n        return match.group()\n    else:\n        return None",
        "test": "assert text_starta_endb(\"ab\") == \"ab\"",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum",
        "test": "assert return_sum({1: 2, 3: 4, 5: 6}) == 12 # dictionary with 3 items, sum of 12 ",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n\n    # loop through the range and add the odd numbers to the total\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            total += i\n\n    # return the total sum of odd numbers\n    return total\n",
        "test": "assert sum_odd(1) == 1  # example range (1,1) and expected output is 1",
        "num_ids": 888,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])",
        "test": "assert _sum([1,2,3,4,5]) == 15 ",
        "num_ids": 750,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the given number to binary format\n    binary_n = bin(n)[2:]\n    # Get the length of binary number\n    binary_n_len = len(binary_n)\n    # Calculate the number of bits to be rotated\n    rotate_bits = d % binary_n_len\n    # Convert the number to 32 bit format\n    binary_n = binary_n.zfill(32)\n    # Extract the right part of the binary number\n    right_part = binary_n[rotate_bits:]\n    # Extract the left part of the binary number\n    left_part = binary_n[:rotate_bits]\n    # Concatenate the left and right parts\n    binary_result = right_part + left_part\n    # Convert the binary result to decimal format\n    decimal_result = int(binary_result, 2)\n    return decimal_result",
        "test": "assert left_rotate(0b1010, 4) == 0b1010  # test if it rotates a number by 2 bits",
        "num_ids": 1615,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"   This is a string.    \") == \"Thisisastring.\" ",
        "num_ids": 580,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z:\n        count = 3\n    elif x == y:\n        count = 2\n    elif y == z:\n        count = 2\n    elif x == z:\n        count = 2\n    return count\n",
        "test": "assert test_three_equal(1,2,3) == 0",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 802,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    low, high = 0, n-1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < arr[high]:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1723,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    sqrt_n = math.sqrt(n)\n    return sqrt_n - int(sqrt_n) == 0",
        "test": "assert is_perfect_square(1) == True",
        "num_ids": 716,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_product_even([4, 6]) == True",
        "num_ids": 730,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    return max_list\n",
        "test": "assert max_sum_list([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]) == [10,11,12]",
        "num_ids": 1580,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run\n",
        "test": "assert max_run_uppercase(\"AaBbCcDdEe\") == 1 # no uppercase run",
        "num_ids": 1033,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:  # check if the number is odd\n            return num  # return the first odd number found\n    return None  # if no odd number is found in the list",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((\"apple\", \"banana\", \"cherry\"), 3) == False",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((1, 2, 3), (1, 2, 4)) == False",
        "num_ids": 1052,
        "indeed": true
    }
]