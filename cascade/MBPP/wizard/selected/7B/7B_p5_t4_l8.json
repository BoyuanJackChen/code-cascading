[
    {
        "number": 2,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return result\n",
        "test": "assert similar_elements((\"apple\", \"banana\", \"cherry\"), (\"banana\", \"cherry\", \"date\")) == [\"banana\", \"cherry\"]  # test case 1",
        "num_ids": 1227,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(4) == True # 4 is divisible by 2, a prime number",
        "num_ids": 787,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappushpop(heap, num)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([1,1,1,1,1,1,1,1,1], 3) == [1,1,1] # Example usage",
        "num_ids": 1338,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 20,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Check if x is a power of two or not\n    if x <= 0 or (x & (x - 1)) != 0:\n        return False\n    \n    # Find the first bit position where the numbers differ\n    diff_bit = -1\n    while x != 0:\n        if (x & 1) != 0:\n            diff_bit = (x).bit_length() - 1\n            break\n        x >>= 1\n    \n    # Check if the numbers differ at only one bit position or not\n    if diff_bit == -1:\n        return False\n    else:\n        return True\n",
        "test": "assert is_Power_Of_Two(2**2)     # Test case 1: Should return True",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = re.findall(pattern, text)\n\n    # Return a list of all matches\n    return matches\n",
        "test": "assert find_char_long(\"\") == []  # edge case 1",
        "num_ids": 917,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "test": "assert square_nums([1, 2, 3, 4]) == [1, 4, 9, 16] # input is [1, 2, 3, 4], output is [1, 4, 9, 16] ",
        "num_ids": 880,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n <= 1:\n        return 0\n    \n    # Find the first repeated character\n    for i in range(n):\n        if str[i] == str[i % n]:\n            first_repeated_index = i\n            break\n    \n    # If the first repeated character is the last character, it means that the string is already rotated\n    if str[first_repeated_index] == str[first_repeated_index - n]:\n        return 1\n    \n    # Otherwise, the string needs to be rotated (at least) (n - first_repeated_index) times\n    count = n - first_repeated_index\n    count += 1  # Add 1 to account for the initial rotation\n    \n    # If the repeated character is not the first character, it means that we need to rotate the string once more\n    if first_repeated_index != 0:\n        count += 1\n    \n    return count\n",
        "test": "assert find_Rotations(\"a\") == 0  # a does not need any rotation",
        "num_ids": 1279,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    else:\n        return s.replace(ch, '', 1).replace(ch, '', -1)\n",
        "test": "assert remove_Occ(\"hello\", \"x\") == \"hello\", \"Incorrect output\"  # Check that no changes are made if the character is not found in the string",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    return sorted_matrix\n",
        "test": "assert sort_matrix([[1]]) == [[1]]  # test case 3",
        "num_ids": 1588,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(3,4,5) == 30 # base 3, height 5, lateral area 12, total volume 30",
        "num_ids": 762,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+(_[a-z]+)*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"hello_world\"), \"Function should return True for 'hello_world'\"",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a\n",
        "test": "assert square_perimeter(3) == 12",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [0] * NO_OF_CHARS\n    \n    for char in string:\n        char_list[ord(char)] = 1\n    \n    return char_list\n",
        "test": "assert str_to_list(\"hello world\", \"hello world\") == \"\" ",
        "num_ids": 1179,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set from the array to remove duplicates\n    unique_nums = set(arraynums)\n    \n    # Check if the length of the unique set is equal to the length of the original array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # Convert the input number to a string and reverse it\n    reverse_x = str(x)[::-1]\n    # Check if the reversed number is equal to the original number\n    return x == int(reverse_x)\n",
        "test": "assert is_woodall(23) == False  # Test if 23 is not a woodall number",
        "num_ids": 1009,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # converting the number to a string and reversing it\n    rev_num = int(str(num)[::-1])\n    # checking if the number is one less than twice its reverse\n    if num == rev_num*2-1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(123) == False",
        "num_ids": 942,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def find_Max_Num(arr):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Convert each digit to a string and join them together\n    max_num_str = ''.join([str(num) for num in arr])\n\n    # Convert the string to an integer and return it\n    return int(max_num_str)\n",
        "test": "assert find_Max_Num([9, 9, 9]) == 999  # test case 1",
        "num_ids": 1254,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def opposite_Signs(x,y):\n    if x*y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(3, -5) == True  # positive and negative integers",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = (2 * n - 1) ** 2\n    return num\n",
        "test": "assert is_octagonal(1) == True",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = defaultdict(int)\n    res = 0\n\n    # Calculate the sum of digits of each substring\n    for i in range(n):\n        for j in range(i, n):\n            curr_sum = sum(int(digit) for digit in s[i:j+1])\n            count[curr_sum] += 1\n\n    # Count the number of substrings with the sum of digits equal to their length\n    for key in count:\n        if key == n-key:\n            res += count[key]\n\n    return res\n",
        "test": "assert count_Substrings(\"4567\") == 0, \"Error: count_Substrings('4567') should return 0\"",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3]) == 1",
        "num_ids": 773,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 1, 1, 1, 1]) == 0  # expected output: 0 (because the maximum difference is 0 if all numbers are equal)",
        "num_ids": 1424,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "test": "assert subject_marks([(1, 85), (2, 90), (3, 95), (4, 80), (5, 75)]) == [(5, 75), (4, 80), (1, 85), (2, 90), (3, 95)] ",
        "num_ids": 1151,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1, 2, [3, 4, [5]], 6]) == 21",
        "num_ids": 928,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 778,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def bell_number(n):\n    # If n is less than 0, return None\n    if n < 0:\n        return None\n    # If n is 0 or 1, return 1\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        # Initialize the Bell number list\n        bell_numbers = [1, 1]\n        # Calculate the Bell numbers up to n\n        for i in range(2, n+1):\n            bell_numbers.append(0)\n            for j in range(i):\n                bell_numbers[i] += bell_numbers[j] * bell_numbers[i-j-1]\n        # Return the number of ways to partition the set of Bell numbers\n        return bell_numbers[-1]\n",
        "test": "assert bell_number(1) == 1",
        "num_ids": 1151,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if array is empty or has only one element\n    if len(A) <= 1:\n        return True\n    # Check if array is monotonic increasing\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    # Check if array is monotonic decreasing\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            return False\n    # If array is monotonic increasing or decreasing, return True\n    return True\n",
        "test": "assert is_Monotonic([5, 4, 3, 2, 1]) == False",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l)):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n",
        "test": "assert is_sublist([1, 2, 3], [1, 2]) == True ",
        "num_ids": 1100,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return True\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True",
        "test": "assert find_equal_tuple(()) == True",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using comb sort algorithm.\n    '''\n    n = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    gap = n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n",
        "test": "assert comb_sort([]) == [] ",
        "num_ids": 1506,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(1, n):\n        for j in range(1, n):\n            if i*i + j*j == n:\n                print(f\"{n} can be represented as the difference of two squares of {i}^2 and {j}^2\")\n                return True\n    print(f\"{n} cannot be represented as the difference of two squares.\")\n    return False\n",
        "test": "assert dif_Square(1) == False, \"Should be False\"",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    \n    pattern_dict = {}\n    \n    for index, pattern in enumerate(patterns):\n        if pattern in pattern_dict:\n            if pattern_dict[pattern] != colors[index]:\n                return False\n        else:\n            pattern_dict[pattern] = colors[index]\n    \n    return True",
        "test": "assert is_samepatterns(['red', 'blue', 'green'], ['a', 'b', 'a']) == False",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 75,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result\n",
        "test": "assert find_tuples([(1,2,3), (4,5,6), (7,8,9)], 3) == []",
        "num_ids": 1438,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(33) # True",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len(\"world\") == True  # test case 2",
        "num_ids": 607,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    \n    # Formula to calculate the nth tetrahedral number\n    tetra_num = (n * (n + 1) * (n + 2)) // 6\n    \n    return tetra_num\n",
        "test": "assert tetrahedral_number(1) == 1, \"Function returns incorrect value for input 1\"",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n",
        "test": "assert volume_sphere(0) == 0, \"Incorrect volume_sphere(0)\"",
        "num_ids": 874,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total_ascii = sum(ord(char) for char in strr) % 26\n    return chr(total_ascii + 97) # 97 is the ASCII value of 'a'\n",
        "test": "assert get_Char(\"hello\") == \"m\"",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sequence(n):\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [None] * (n + 1)\n        sequence[1] = 1\n        sequence[2] = 1\n        \n        for i in range(3, n + 1):\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        \n        return sequence[n]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r <= 0:\n        print(\"Invalid input\")\n        return None\n    else:\n        surface_area = 4*math.pi*r**2\n        return surface_area",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi, \"Error: surface area of sphere with radius 1 is incorrect\"",
        "num_ids": 861,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    return (n * (n * 3 - 1)) // 2",
        "test": "assert centered_hexagonal_number(1) == 1, \"Test case 1 failed\"",
        "num_ids": 1167,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    result = dict1.copy()  # start with a copy of the first dictionary\n    result.update(dict2)  # add the second dictionary\n    result.update(dict3)  # add the third dictionary\n    return result\n",
        "test": "assert merge_dictionaries_three({\"a\": 1, \"b\": 2}, {\"c\": 3, \"d\": 4}, {\"e\": 5, \"f\": 6}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6} ",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return dict(freq)",
        "test": "assert freq_count([1, 2, 3, 2, 1, 3, 2, 1, 3]) == {1: 3, 2: 3, 3: 3}, \"The function freq_count is not working correctly\"",
        "num_ids": 1156,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    closest_num = N - 1\n    if closest_num < 0:\n        return None\n    return closest_num\n",
        "test": "assert closest_num(10) == 9 ",
        "num_ids": 684,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log([]) == 0 # test empty list",
        "num_ids": 733,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \" \") == True",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    digits = [int(d) for d in str(n)]\n    \n    if len(digits) < 3:\n        return False\n    \n    for i in range(1, len(digits)-1):\n        if digits[i] > digits[i-1] and digits[i] > digits[i+1]:\n            return False\n        elif digits[i] < digits[i-1] and digits[i] < digits[i+1]:\n            return False\n    \n    return True\n",
        "test": "assert is_undulating(987654321) == True",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2,2) == 4",
        "num_ids": 569,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    return min(test_list, key=itemgetter(1))[0]\n",
        "test": "assert index_minimum([(1, 1), (2, 2), (3, 3)]) == 1",
        "num_ids": 1155,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for l in lst:\n        min_length = min(min_length, len(l))\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2], [3,4,5], [6], [7,8,9,10]]) == 1 # example 2",
        "num_ids": 1044,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 719,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j in freq_dict:\n                    freq_dict[j] += 1\n                else:\n                    freq_dict[j] = 1\n        else:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict\n",
        "test": "assert frequency_lists([]) == {} ",
        "num_ids": 1780,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "test": "assert multiply_num([0, 0, 0]) == 0.0",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary or '0'\n",
        "test": "assert decimal_to_binary(0) == \"0\"",
        "num_ids": 675,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the number to string\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If yes, increment the number and check if it's a palindrome\n        while True:\n            num += 1\n            num_str = str(num)\n            if num_str == num_str[::-1]:\n                return num\n    else:\n        # If no, append zeros to the end of the number until it's a palindrome\n        num_str = num_str.ljust(len(num_str)+1,'0')\n        # Reverse the number\n        rev_num_str = num_str[::-1]\n        # Find the index of the first different digit in the number and reverse\n        i = 0\n        while i < len(num_str) and num_str[i] == rev_num_str[i]:\n            i += 1\n        num_str = rev_num_str[:i] + num_str[i:]\n        return int(num_str)\n",
        "test": "assert next_smallest_palindrome(121) == 131, \"Error: next_smallest_palindrome(121) should be 131\"",
        "num_ids": 2219,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1  # check if it returns the smallest element when k=1",
        "num_ids": 991,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    # Split the word by underscore and join the first word and the rest with capitalized first letter\n    return word.split('_')[0] + ''.join(word.title().split('_')[1:])\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = 0\n    sum_num = 0\n    \n    # Calculate the sum of the n first integers\n    for i in range(1, n+1):\n        sum_num += i\n    \n    # Calculate the sum of the m first integers\n    for j in range(1, m+1):\n        sum_num += j\n    \n    # Calculate the difference between the two sums\n    a = abs(sum_num - (n+m+1))\n    \n    return a\n",
        "test": "assert eulerian_num(1, 2) == 0  # 1C0 = 1",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"grape\", \"orange\", \"strawberry\"]]) == [[\"apple\", \"banana\", \"cherry\"], [\"grape\", \"orange\", \"strawberry\"]] ",
        "num_ids": 1731,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, False]) == 2 ",
        "num_ids": 421,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list += list(test_tup)\n    return test_list\n",
        "test": "assert add_lists([1, 2, 3], (4, 5)) == [1, 2, 3, 4, 5]",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(merged_list)\n\n    for num in num1:\n        heapq.heappush(merged_list, num)\n\n    for num in num2:\n        heapq.heappush(merged_list, num)\n\n    for num in num3:\n        heapq.heappush(merged_list, num)\n\n    return sorted(merged_list)\n",
        "test": "assert merge_sorted_list([1,3,5],[6,7,8],[9,10,11]) != [1,2,3,4,5,6,7,8,9,10,11,12] ",
        "num_ids": 2155,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the string to a list of binary digits\n    binary_list = [int(x) for x in s]\n    \n    # Rotate the binary list n times\n    rotated_list = binary_list[-n:] + binary_list[:-n]\n    \n    # Count the number of odd digits in the rotated list\n    count = sum([1 for digit in rotated_list if digit % 2 == 1])\n    \n    return count\n",
        "test": "assert odd_Equivalent(\"1011\", 2) == 3  # Should return 3",
        "num_ids": 1141,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 11,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common = common.intersection(set(lst))\n    return list(common)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [4, 2, 5], [3, 6, 7], [8, 9, 10]]) == []",
        "num_ids": 1381,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 20,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for dic in list1:\n        if dic != {}:\n            return False\n    \n    return True\n",
        "test": "assert empty_dit([{}]) == True",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n",
        "test": "assert tuple_to_int((0, 0, 0, 0, 0)) == 0",
        "num_ids": 979,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "test": "assert list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
        "num_ids": 1857,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string using space character as delimiter\n    words = string.split()\n    # convert the list of words to a list of strings\n    string_list = list(map(str, words))\n    return string_list\n",
        "test": "assert string_to_list('this is a test string') == ['this', 'is', 'a', 'test', 'string']",
        "num_ids": 815,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    if arr[0] != arr[1]:\n        return arr[0]\n    \n    if arr[n-2] != arr[n-1]:\n        return arr[n-1]\n    \n    for i in range(2, n-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]",
        "test": "assert search([1, 2, 3, 4, 5, 6, 6, 6]) == 1  # test for sorted array with 3 elements appearing only once",
        "num_ids": 1669,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0]) * abs(list1[i][1]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(-1,-2),(3,4),(5,6)]) == 24",
        "num_ids": 1294,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def amicable_numbers_sum(limit):\n    def is_amicable(num):\n        factors = [i for i in range(1, num//2+1) if num % i == 0]\n        divisor_sum = sum(factors)\n        return divisor_sum == num and num != divisor_sum\n\n    total_sum = 0\n    for num in range(1, limit+1):\n        if is_amicable(num):\n            total_sum += num\n\n    return total_sum\n",
        "test": "assert amicable_numbers_sum(1000) == 33508, \"Incorrect result for limit=1000\"",
        "num_ids": 1444,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a,b)\n    return cmath.phase(z)\n",
        "test": "assert angle_complex(1, 1) == 0.7853981633974483, \"Incorrect angle\"",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def find_length(string):\n    max_diff = 0\n    count0 = 0\n    count1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        if count0 > 0 and count1 > 0:\n            max_diff = max(max_diff, abs(count0-count1))\n    return max_diff\n",
        "test": "assert find_length(\"1101\") == 2",
        "num_ids": 3114,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "",
        "test": "assert sum(100,200) == 300, \"Sum of 100 and 200 is not 300\"",
        "num_ids": 1252,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "test": "assert multiply_int(5, 7) == 35 ",
        "num_ids": 633,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def long_words(n, words):\n    '''\n    Find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(10, \"abcdefghijklmnopqrstuvwxyz\") == [] ",
        "num_ids": 1055,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def magic_square_test(my_matrix):\n    # Get the dimensions of the matrix\n    n = len(my_matrix)\n    # Calculate the sum of the first row and the first column\n    row_sum = sum(my_matrix[0])\n    col_sum = sum([my_matrix[i][0] for i in range(n)])\n    # Calculate the sum of the diagonals\n    diag1_sum = sum([my_matrix[i][i] for i in range(n)])\n    diag2_sum = sum([my_matrix[i][n-1-i] for i in range(n)])\n    # Check if the sum of the matrix is the same for all rows, columns, and diagonals\n    if all([sum(row) == row_sum for row in my_matrix]) and \\\n       all([sum(my_matrix[i]) == col_sum for i in range(n)]) and \\\n       diag1_sum == col_sum and diag2_sum == col_sum:\n        return True\n    else:\n        return False\n",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False ",
        "num_ids": 1851,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in count_dict.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    return max_num\n",
        "test": "assert max_occurrences([1, 2, 3, 2, 4, 3, 5, 2]) == 2 ",
        "num_ids": 1060,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowels_list = []\n    non_vowels_list = []\n\n    # Separate vowels and non-vowels into separate lists\n    for char in str1:\n        if char in vowels:\n            vowels_list.append(char)\n        else:\n            non_vowels_list.append(char)\n\n    # Reverse the vowels list\n    vowels_list = vowels_list[::-1]\n\n    # Join the reversed vowels and non-vowels lists to get the final string\n    return \"\".join(non_vowels_list + vowels_list)\n",
        "test": "assert reverse_vowels(\"aeiou\") == \"uoiea\"",
        "num_ids": 1221,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Create an empty string variable\n    str1 = \"\"\n    # Iterate over the tuple elements\n    for i in range(len(tup1)):\n        # Append each element to the string variable\n        str1 += str(tup1[i])\n        # Add a comma and space if it's not the last element\n        if i != len(tup1) - 1:\n            str1 += \", \"\n    # Return the resulting string\n    return str1\n",
        "test": "assert tup_string(()) == \"\" # example of an empty tuple, should return \"\" ",
        "num_ids": 1024,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1063,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2*n - 1)",
        "test": "assert hexagonal_num(1) == 1, \"Incorrect for n = 1\"",
        "num_ids": 807,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count / non_zero_count\n",
        "test": "assert zero_count([1, 1, 1, 1, 1, 1]) == 0",
        "num_ids": 1203,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if n is negative or zero, return False if it is\n    if n <= 0:\n        return False\n    \n    # Initialize a variable to store the number of binary digits in n\n    num_digits = len(bin(n)[2:])\n    \n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers = 0\n    \n    # Loop through each binary digit in n\n    for i in range(num_digits):\n        # Check if the current binary digit is 1\n        if n & (1 << i):\n            # Calculate the corresponding power of 2 and add it to the sum\n            power_of_two = 2 ** i\n            sum_of_powers += power_of_two\n    \n    # If n can be represented as sum of powers of 2, return True, else return False\n    return n == sum_of_powers\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 1539,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n",
        "test": "assert circle_circumference(2) == 12.56636, \"Error in circle_circumference calculation\" ",
        "num_ids": 984,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)\n",
        "test": "assert extract_singly([[1, 2], [3, 4], [5]]) == {1, 2, 3, 4, 5} ",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        max_index = nums.index(max(nums[:n]))\n        if max_index != n - 1:\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:]\n            nums = nums[:n][::-1] + nums[n:]\n            nums = nums[:max_index+1][::-1] + nums[max_index+1:n]\n            nums = nums[:max_index+1][::-1] + nums[n:]\n        n -= 1\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 1936,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[2,3,4],[3,4,0]) == 0 # Check that the function returns 0 for the given lists",
        "num_ids": 1107,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1, 2, 3, 4)) == 0 ",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[-1] - arr[0]\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([-5, -5, -5, -5, -5]) == 0",
        "num_ids": 1206,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_solution(a, b, n):\n    # Check if a is zero\n    if a == 0:\n        # Check if b is zero\n        if b == 0:\n            # Check if n is zero\n            if n == 0:\n                # Return a valid solution\n                return (0, 0)\n            else:\n                # No solution exists\n                return None\n        else:\n            # Check if n is divisible by b\n            if n % b == 0:\n                # Return a valid solution\n                return (0, n // b)\n            else:\n                # No solution exists\n                return None\n    else:\n        # Check if b is zero\n        if b == 0:\n            # Check if n is zero\n            if n == 0:\n                # Return a valid solution\n                return (0, 0)\n            else:\n                # No solution exists\n                return None\n        else:\n            # Compute the greatest common divisor of a and b\n            def gcd(a, b):\n                while b:\n                    a, b = b, a % b\n                return a\n            gcd_ab = gcd(a, b)\n\n            # Check if gcd(a, b) divides n\n            if n % gcd_ab == 0:\n                # Compute the least common multiple of a and b\n                def lcm(a, b):\n                    return abs(a * b) // gcd(a, b)\n                lcm_ab = lcm(a, b)\n\n                # Compute the quotient and remainder of n / lcm(a, b)\n                q, r = divmod(n, lcm_ab)\n\n                # Check if r is zero\n                if r == 0:\n                    # Return a valid solution\n                    return (q, 0)\n                else:\n                    # Compute the least common multiple of r and b\n                    lcm_rb = lcm(r, b)\n\n                    # Compute the quotient and remainder of r / lcm(r, b)\n                    q_r, r_r = divmod(r, lcm_rb)\n\n                    # Return a valid solution\n                    return (q, q_r * b + r_r)\n            else:\n                # No solution exists\n                return None ",
        "test": "assert find_solution(1, 1, 0) == (0, 0)",
        "num_ids": 1785,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(set(list1) - set(list2))\n    return list1\n",
        "test": "assert remove_elements([1, 2, 3], [2, 3]) == [1]",
        "num_ids": 1069,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while n - (2 * i) > 0:\n        total += n - (2 * i)\n        i += 1\n    return total\n",
        "test": "assert sum_series(1) == 1  # if n is 1, the series should be 1 ",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    theta = 360 / s\n    r = l / (2 * tan(pi / s))\n    return 0.5 * r ** 2 * theta\n",
        "test": "assert area_polygon(6, 6) == 3 * tan(pi/6) * 6  # For a regular hexagon with side length of 6",
        "num_ids": 1430,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def div_sum(n):\n    def sum_divisors(num):\n        sum_div = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                sum_div += i\n        return sum_div\n\n    num1 = n\n    num2 = sum_divisors(n)\n\n    return num1 == num2\n",
        "test": "assert div_sum(3) == False",
        "num_ids": 1556,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # initialize a dictionary to store the count of characters at each position\n    count_dict = {i: 0 for i in range(26)}\n\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is an alphabet\n        if char.isalpha():\n            # add 1 to the count at the position of the character in the English alphabet\n            count_dict[ord(char) - 97] += 1\n\n    # initialize the count variable\n    count = 0\n\n    # loop through each value in the dictionary and increment the count if the value is greater than 0\n    for value in count_dict.values():\n        if value > 0:\n            count += 1\n\n    return count\n",
        "test": "assert count_char_position(\"\") == 0",
        "num_ids": 1624,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([0,2,4,6,8]) == 10",
        "num_ids": 954,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Find the smallest power of 2 greater than n\n    p = 1\n    while p <= n:\n        p *= 2\n    \n    return p\n",
        "test": "assert next_power_of_2(1) == 2",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5], 2) == 1 ",
        "num_ids": 867,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m < 0 or n >= len(list1) or m > n:\n        return None\n    else:\n        return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9     # test case 1",
        "num_ids": 1318,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "test": "assert perimeter_pentagon(3) == 15 ",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"This is a string\") == 0",
        "num_ids": 904,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the data type of the first element in the tuple\n    dtype = type(test_tuple[0])\n    \n    # Check if all the elements have the same data type as the first element\n    for elem in test_tuple:\n        if type(elem) != dtype:\n            return False\n    \n    # If all the elements have the same data type, return True\n    return True\n",
        "test": "assert check_type((1,2,3)) == True # Test case 2",
        "num_ids": 998,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize count to 0\n    count = 0\n    # Initialize i to 0\n    i = 0\n    # Loop through array\n    while i < n:\n        # If current element is x, increment count\n        if arr[i] == x:\n            count += 1\n        # If count is greater than n/2, return True (x is majority element)\n        if count > n//2:\n            return True\n        # If current element is not x, reset count and increment i\n        elif arr[i] != x:\n            count = 0\n        i += 1\n    # If loop completes without returning True, x is not majority element\n    return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5, 6, 7, 8, 9], 9, 6) == False",
        "num_ids": 1492,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0b0) == 0",
        "num_ids": 674,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "test": "assert odd_values_string(\"\") == \"\" # test case 4",
        "num_ids": 857,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i)[2:].count('1') > 0:\n            return False\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(3,0,2) == False, \"Test 2 failed\"",
        "num_ids": 1212,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # create a new array to hold the re-arranged elements\n    new_arr = []\n\n    # loop through the array and add negative elements to the new array first, and then positive elements\n    for i in arr:\n        if i < 0:\n            new_arr.append(i)\n\n    for i in arr:\n        if i >= 0:\n            new_arr.append(i)\n\n    # return the new array\n    return new_arr\n",
        "test": "assert re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1890,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank(\"This is a test\", \" \") # replace all blank spaces with \" \"",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert larg_nnum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [10, 9, 8]  # testing with a list of numbers and n=3",
        "num_ids": 1313,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Calculate the lateral surface area using the formula: 2 * pi * r * h\n    lateral_surface_area = 2 * math.pi * r * h\n    \n    return lateral_surface_area\n",
        "test": "assert lateralsuface_cylinder(1,2) == 12.566370614359172, \"Testing with r=1, h=2\"",
        "num_ids": 974,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "test": "assert volume_cube(2) == 8, \"The volume of a cube with side length 2 is not 8\"",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n    \n    # Iterate over all bits of n\n    for i in range(32):\n        # If the i-th bit of n is set, set the i-th bit of the result\n        if (n & (1 << i)) != 0:\n            result |= (1 << i)\n    \n    return result\n",
        "test": "assert even_bit_set_number(10) == 10  # since there are no even bits set in 10",
        "num_ids": 1314,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)",
        "test": "assert check_occurences([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == {('a', 1): 1, ('b', 2): 1, ('c', 3): 1, ('d', 4): 1} ",
        "num_ids": 1877,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_of_substrings(s):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through the string\n    for i in range(len(s)):\n        # For each character, generate all possible substrings\n        for j in range(i, len(s)):\n            # If the substring is not empty, increment the count\n            if s[i:j+1] != \"\":\n                count += 1\n                \n    return count",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 821,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    elif m <= 2:\n        return 0\n    else:\n        return (m-1) * (m-2) // 2 + get_total_number_of_sequences(m, n-1)\n",
        "test": "assert get_total_number_of_sequences(6,3) == 21 ",
        "num_ids": 1269,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "test": "assert replace_list([1,2,3,4,5], []) == [1,2,3,4,5]",
        "num_ids": 942,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello\") == 5  # Checks if the function correctly counts the total number of characters in the string \"hello\".",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Check if N is a perfect square\n    if math.sqrt(N).is_integer():\n        # If N is a perfect square, return the next perfect square\n        return N + 1\n    else:\n        # If N is not a perfect square, find the square root of N\n        sqrt_N = math.sqrt(N)\n        # Round up the square root to the nearest integer\n        next_int = math.ceil(sqrt_N)\n        # Return the square of the next integer\n        return next_int ** 2",
        "test": "assert next_Perfect_Square(3) == 4",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def max_sum(arr):\n    '''\n    Find the maximum sum of a bitonic subsequence for the given array.\n    '''\n    n = len(arr)\n    # Initialize an array to store the maximum sum for each index.\n    # The maximum sum for the first index is just the value of the first element.\n    max_sum = [arr[0]]\n    # Initialize a variable to store the maximum increasing subsequence sum.\n    max_inc_sum = arr[0]\n    for i in range(1, n):\n        # If the current element is greater than the previous maximum sum,\n        # update the maximum sum for the current index to be the sum of the current element\n        # and the maximum increasing subsequence sum.\n        if arr[i] > max_sum[i-1]:\n            max_sum.append(max_sum[i-1] + arr[i])\n        # If the current element is less than or equal to the previous maximum sum,\n        # update the maximum sum for the current index to be the maximum increasing subsequence sum.\n        else:\n            max_sum.append(max_inc_sum)\n        # Update the maximum increasing subsequence sum if the current element is greater than the previous maximum sum.\n        if arr[i] > max_inc_sum:\n            max_inc_sum = arr[i]\n    # Return the maximum sum for the last index.\n    return max_sum[-1]\n",
        "test": "assert max_sum([1]) == 1  # single element subsequence",
        "num_ids": 1672,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number/guess) / 2\n    return guess\n",
        "test": "assert babylonian_squareroot(4) == 2, \"Test case 1 failed\"",
        "num_ids": 1040,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "test": "assert lps(\"BBABCBCAB\") == 7  # Test case 1",
        "num_ids": 1456,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1, \"Error in function for n=1\"",
        "num_ids": 836,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    # Find the intersection of two arrays\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1,2,3], [2,3,4]) == [2,3] # example 1",
        "num_ids": 1078,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((), \"a\") == 0",
        "num_ids": 1019,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts the given element before each element in the given list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([1,2,3], 0) == [0, 1, 0, 2, 0, 3]  # insert 0 before each element in the list",
        "num_ids": 882,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        rho, phi = cmath.polar(num)\n        print(f\"{num:.2f} = {rho:.2f} * e^({phi:.2f} * pi/180) + j * {phi:.2f} * pi/180\")\n",
        "test": "assert convert([1+2j, 3+4j]) == [(3, 1.1071495362149554), (1, 2.82842712474619)] #Testing with complex numbers 1+2j and 3+4j ",
        "num_ids": 932,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5 ",
        "num_ids": 734,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([\"red\", \"blue\", \"green\"], 3) == [(\"red\", \"red\", \"red\"), (\"red\", \"red\", \"blue\"), (\"red\", \"red\", \"green\"), (\"red\", \"blue\", \"blue\"), (\"red\", \"blue\", \"green\"), (\"red\", \"green\", \"green\"), (\"blue\", \"blue\", \"blue\"), (\"blue\", \"blue\", \"green\"), (\"blue\", \"green\", \"green\"), (\"green\", \"green\", \"green\")]",
        "num_ids": 3594,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_Primes_nums(n):\n    # initialize a counter for prime numbers\n    count = 0\n    # iterate over the numbers from 2 to n\n    for i in range(2, n):\n        # assume the number is prime\n        is_prime = True\n        # check if the number is divisible by any number from 2 to the square root of i\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if the number is prime, increment the counter\n        if is_prime:\n            count += 1\n    # return the final count of prime numbers\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4 # there are 4 prime numbers less than 10: 2, 3, 5, and 7. ",
        "num_ids": 1937,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def swap_numbers(a, b):\n    return (b, a)\n",
        "test": "assert swap_numbers(5, 10) == (10, 5) ",
        "num_ids": 593,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def newman_shanks_williams(p, q):\n        if p == 0:\n            return q\n        if is_prime(q) and q % 2 == 1 and is_prime(2*q+1):\n            return newman_shanks_williams(p-1, 2*q+1)\n        else:\n            return None\n    \n    def generate_primes(limit):\n        primes = []\n        for i in range(2, limit+1):\n            if is_prime(i):\n                primes.append(i)\n        return primes\n    \n    primes = generate_primes(n*100)\n    for i in range(n):\n        p = newman_shanks_williams(i, primes[i])\n        if p:\n            return p\n    return None\n",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 1507,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i]/test_tup2[i],)\n    return result_tuple\n",
        "test": "assert division_elements((1, 2, 3), (1, 2, 3)) == (1, 1, 1)",
        "num_ids": 1389,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n",
        "test": "assert split_two_parts([1,2,3,4,5], 3) == ([1,2,3], [4,5])",
        "num_ids": 1128,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age / 10\n    return dog_age",
        "test": "assert dog_age(20) == 365, \"20 should be equivalent to 365 dog years\"",
        "num_ids": 782,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n",
        "test": "assert list_split([1,2,3,4,5,6], 2) == [[1,2],[3,4],[5,6]]",
        "num_ids": 1377,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 704,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    # Initialize the sum to zero\n    sum = 0\n    # Loop over the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of the number to the sum\n        sum += i**2\n    # Return the sum\n    return sum\n",
        "test": "assert square_Sum(1) == 1, \"The first odd natural number is 1\"",
        "num_ids": 929,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    \"\"\"\n    # Initialize variables\n    total_stars = 0\n    star_number = 0\n    \n    # Loop over all possible star numbers\n    while star_number < n:\n        # Calculate the number of stars for this iteration\n        total_stars += 1\n        \n        # Check if this is the n'th star number\n        if total_stars == n:\n            return total_stars\n",
        "test": "assert find_star_num(1) == 1, \"Error: find_star_num(1) should return 1\"",
        "num_ids": 1830,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('A') == 65 # check the ascii value of 'A'",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sum_even_and_even_index(arr):\n    # initialize sum to 0\n    even_sum = 0\n    \n    # iterate through the list with index i\n    for i in range(len(arr)):\n        # check if the index is even and the value is even\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            # add the value to the sum\n            even_sum += arr[i]\n    \n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0, \"Error in sum_even_and_even_index\"",
        "num_ids": 1183,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i ** 5\n    return sum\n",
        "test": "assert even_Power_Sum(7) == 8466",
        "num_ids": 901,
        "indeed": true
    },
    {
        "number": 272,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n",
        "test": "assert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]",
        "num_ids": 1130,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup\n",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 1345,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial = 0\n    for k in range(0, int(n/2) + 1, 2):\n        coeff = math.comb(n, k)\n        sum_even_binomial += coeff\n    return sum_even_binomial",
        "test": "assert even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 1046,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r * r * h\n    return volume\n",
        "test": "assert volume_cylinder(0, 10) == 0, \"The volume should be 0 for radius 0 and any height\"",
        "num_ids": 956,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({'a': 5, 'b': 7, 'c': 2}, 5) == {'a': 5, 'b': 7}",
        "num_ids": 1352,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_number = n*(2*n-1)\n    return decagonal_number\n",
        "test": "assert is_num_decagonal(1) == 1 # n=1, decagonal number is 1",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and element and returns a tuple containing a boolean that\n    indicates if the element is in the array and the index position of the element\n    (or -1 if the element is not found).\n    \"\"\"\n\n    # Loop through each element in the array\n    for i in range(len(dlist)):\n        # Check if the current element matches the target element\n        if dlist[i] == item:\n            # If a match is found, return a tuple containing True and the index position\n            return (True, i)\n\n    # If the loop finishes without finding a match, return a tuple containing False and -1\n    return (False, -1)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 1058,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 19,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert all_unique([1,2,3,4,5]) == True # all elements are unique",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([4,6,8],[2,4,6]) == [2,2,2], \"Test 2: Element-wise subtraction is incorrect.\" ",
        "num_ids": 1232,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(10):\n        if digits.count(i) > i:\n            return False\n    return True\n",
        "test": "assert validate(123) == True",
        "num_ids": 943,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_element(lst, element):\n    return all(x == element for x in lst)\n",
        "test": "assert check_element([], 0) # Should return True",
        "num_ids": 683,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    match = pattern.search(text)\n    return bool(match)\n",
        "test": "assert text_match_two_three('abb') == True",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # create a modified array by repeating the original array k times\n    mod_array = []\n    for i in range(k):\n        mod_array += a\n    \n    # calculate the sum of contiguous subarrays of length i in the modified array\n    # and store them in a list\n    cont_sum = []\n    for i in range(1, n+1):\n        cont_sum.append(sum(mod_array[:i]))\n    \n    # return the maximum value from the list of contiguous subarray sums\n    return max(cont_sum)\n",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -5, -6], 6, 2) == -1",
        "num_ids": 1965,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i*i\n    return sum\n",
        "test": "assert square_Sum(0) == 0 ",
        "num_ids": 755,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def max_length(list1):\n    max_len = 0\n    max_lists = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lists = [lst]\n        elif len(lst) == max_len:\n            max_lists.append(lst)\n    return max_lists\n",
        "test": "assert max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 11], [12, 13, 14]]) == [4]",
        "num_ids": 1186,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the list of counts with the first post\n    counts = [1] * k\n    for i in range(1, n):\n        # Initialize the next post's counts to 0\n        next_counts = [0] * k\n        for j in range(k):\n            # Check all possible colors for the current post\n            for c in range(k):\n                # If the current post's color is different from the previous one,\n                # add the count of the previous post to the count of the current post\n                if c != j:\n                    next_counts[c] += counts[j]\n        # Update the counts for the next post\n        counts = next_counts\n    # The final count is the number of ways to paint the fence\n    return sum(counts)\n",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 2512,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(10, 3) == 3  # Check if find(10, 3) returns 3",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Check that the input values make sense\n    if w <= 0 or h <= 0:\n        raise ValueError(\"Both sides must be positive numbers.\")\n    \n    # Use the Pythagorean theorem to find the third side\n    a = w\n    b = h\n    c = math.sqrt(a**2 + b**2)\n    return c\n",
        "test": "assert otherside_rightangle(3,4) == 5  # for a right angled triangle with sides 3 and 4, the third side is 5",
        "num_ids": 1016,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for val in listval:\n        if type(val) == int:\n            if val > max_val:\n                max_val = val\n        elif type(val) == float:\n            if val > max_val:\n                max_val = val\n        elif type(val) == str:\n            continue\n        else:\n            print(\"Warning: Unknown data type in the list.\")\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisor = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor\n",
        "test": "assert sum_div(1) == 1",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1243,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n",
        "test": "assert flatten_list([1, [2, 3], [4, [5, 6], 7], 8]) == [1, 2, 3, 4, 5, 6, 7, 8] ",
        "num_ids": 1331,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize the maximum aggregate and the current aggregate\n    max_agg = -1\n    curr_agg = 0\n    \n    # Create a dictionary to store the running total for each state\n    state_totals = defaultdict(int)\n    \n    # Iterate over the list of tuples\n    for state, sale in stdata:\n        # Update the running total for the current state\n        state_totals[state] += sale\n        \n        # Update the current aggregate by adding the sale value\n        curr_agg += sale\n        \n        # If the current aggregate is greater than the maximum aggregate, update the maximum aggregate\n        if curr_agg > max_agg:\n            max_agg = curr_agg\n    \n    # Return the maximum aggregate\n    return max_agg\n",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 30 ",
        "num_ids": 1750,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:]\n        if binary.count('1') == n:\n            count += 1\n    return count",
        "test": "assert count_binary_seq(1) == 1 ",
        "num_ids": 1491,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(dict_depth(d[key]) + 1, depth)\n    return depth\n",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 926,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Initialize variables\n    n = len(arr)\n    start = 0\n    end = n - 1\n    mid = (start + end) // 2\n\n    # Find the range of the element\n    while start <= end:\n        if arr[mid] == ranges[rotations % len(ranges)]:\n            break\n        elif arr[mid] < ranges[rotations % len(ranges)]:\n            start = mid + 1\n        else:\n            end = mid - 1\n        mid = (start + end) // 2\n\n    # Find the index of the element\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == ranges[rotations % len(ranges)]:\n            return mid\n        elif arr[mid] < ranges[rotations % len(ranges)]:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    # Return None if element not found\n    return None\n",
        "test": "assert find_Element([1,2,3,4,5,6,7,8,9], [2,5,8], [2,4,3], 0) == 1, \"Incorrect result\"",
        "num_ids": 2248,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\n\ndef start_withp(words):\n    # Use regular expression to match words starting with 'p'\n    pattern = re.compile(r'p\\w+')\n    p_words = []\n    for word in words:\n        if pattern.match(word):\n            p_words.append(word)\n    \n    # Return the first two words if available, otherwise empty list\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return []\n",
        "test": "assert start_withp(['python', 'java', 'javascript', 'python3']) == ['python', 'python3']",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # Initialize a list to store the maximum sum up to each index\n    max_sum = [0] * n\n    \n    # Initialize the maximum sum up to index 0\n    max_sum[0] = a[0]\n    \n    # Loop through the array from index 1 to the end\n    for i in range(1, n):\n        # Set the maximum sum up to the current index to the maximum of:\n        # - the value at the current index itself\n        # - the value at the previous index plus the value at the current index\n        # - the value at the previous index (since we don't want to include the kth element)\n        max_sum[i] = max(a[i], max_sum[i-1] + a[i], max_sum[i-2] + a[i])\n    \n    # Return the maximum sum up to index i\n    return max_sum[index]\n",
        "test": "assert max_sum_increasing_subseq([1], 1, 0, 0) == 1  # Example from the problem statement",
        "num_ids": 2319,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    # Create a deep copy of the original tuple\n    copy_tuple = deepcopy(tuplex)\n    \n    # Get the colon of the tuple\n    colon = copy_tuple[m:n+1]\n    \n    return colon\n",
        "test": "assert colon_tuplex((),0,1) == () # checks if the function returns an empty tuple when the input tuple is empty",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def large_product(nums1, nums2, N):\n    # Combine the two lists into one\n    nums = nums1 + nums2\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n    # Initialize the largest products\n    largest_products = []\n    # Iterate through the first N pairs of factors\n    for i in range(N):\n        # Calculate the product of the current pair of factors\n        product = nums[i] * nums[N + i]\n        # Add the product to the list of largest products\n        largest_products.append(product)\n    # Return the list of largest products\n    return largest_products",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 2) == [24, 15]  # check for edge case 1",
        "num_ids": 1557,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(10,5) == 10, \"Incorrect maximum value\"",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # if n is 0, return 1\n    if n == 0:\n        return 1\n    \n    # if n is 1, return 2\n    if n == 1:\n        return 2\n    \n    # convert n to binary and count the number of leading zeros\n    binary_n = bin(n)[2:]\n    leading_zeros = binary_n.count('0')\n    \n    # set the left most unset bit to 1\n    return n | (1 << leading_zeros)\n",
        "test": "assert set_left_most_unset_bit(0) == 1",
        "num_ids": 1153,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def volume_cone(r, h):\n    '''\n    Returns the volume of a cone with radius r and height h.\n    '''\n    return (1/3) * math.pi * r**2 * h\n",
        "test": "assert volume_cone(2, 3) == 12.56637061435917, \"Volume is incorrect.\" ",
        "num_ids": 608,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to keep track of the highest power of 2 found\n    highest_power = 1\n    \n    # Loop until the highest power of 2 found is greater than n\n    while highest_power <= n:\n        # Update the highest power of 2 found by multiplying it by 2\n        highest_power *= 2\n    \n    # Return the highest power of 2 found\n    return highest_power // 2\n",
        "test": "assert highest_Power_of_2(16) == 16",
        "num_ids": 759,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2 #check for base case when n=0",
        "num_ids": 763,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result\n",
        "test": "assert add_string(['apple', 'banana', 'cherry'], 'Fruit: {0}') == ['Fruit: apple', 'Fruit: banana', 'Fruit: cherry'] # Test for valid input ",
        "num_ids": 903,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]:l3[i]}\n    return nested_dict\n",
        "test": "assert convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [True, False, True]) == {1: {\"a\": True}, 2: {\"b\": False}, 3: {\"c\": True}} ",
        "num_ids": 1343,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    memo = {}  # memoization table\n\n    def helper(x):\n        if x in memo:\n            return memo[x]\n\n        if x == 0 or x == 1:\n            return x\n\n        memo[x] = max(helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5), x)\n        return memo[x]\n\n    return helper(n)\n",
        "test": "assert get_max_sum(1) == 1  # Example 1",
        "num_ids": 1221,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\" #test case 1",
        "num_ids": 1144,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"hello\") == False",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n",
        "test": "assert median_numbers(5, 7, 2) == 5, \"median is not correct\"",
        "num_ids": 986,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24] ",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "test": "assert bitwise_xor((0, 1, 0), (1, 0, 1)) == (1, 1, 1)",
        "num_ids": 1075,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([(1, 2), (2, 3), (1, 2), (2, 3)]) == 2, \"Incorrect result\"",
        "num_ids": 1418,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Define an empty tuple to store the result\n    result = ()\n\n    # Loop over each tuple element and perform addition\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            result += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            result += (test_tup1[i] + test_tup2[i],)\n\n    return result\n",
        "test": "assert add_nested_tuples(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == ((8, 10, 12), (14, 16, 18))",
        "num_ids": 2045,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5, 7) == 5, \"Error in minimum function\"",
        "num_ids": 582,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element == tuplex:\n            return True\n    return False\n",
        "test": "assert check_tuplex(('b', 1, 2), ('a', 3, 4)) == False",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(3) == True ",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Sort the list of digits in descending order\n    digits.sort(reverse=True)\n\n    # Rearrange the digits to form the next bigger number\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            # Find the index of the first digit that is greater than digits[i]\n            j = i+1\n            while j < len(digits) and digits[j] > digits[i]:\n                j += 1\n            # Swap digits[i] with digits[j]\n            digits[i], digits[j-1] = digits[j-1], digits[i]\n            # Sort the digits after digits[i] in descending order\n            digits[i+1:] = sorted(digits[i+1:], reverse=True)\n            break\n\n    # Convert the list of digits back to an integer\n    next_bigger = int(''.join(str(d) for d in digits))\n\n    return next_bigger\n",
        "test": "assert rearrange_bigger(13579) == 97531, \"Incorrect output for 13579\"",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = [(num1 + num2, (num1, num2)) for num1 in nums1 for num2 in nums2]\n    heapq.heapify(pairs)\n    smallest_pairs = [heapq.heappop(pairs) for _ in range(k)]\n    return [pair[1] for pair in smallest_pairs]",
        "test": "assert k_smallest_pairs([1, 3, 5], [2, 4, 6], 0) == []",
        "num_ids": 2053,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == (2, 3)",
        "num_ids": 1528,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if type(i) == int and i < min_val:\n            min_val = i\n        elif type(i) == float and i < min_val:\n            min_val = i\n        elif type(i) == str and len(i) < len(str(min_val)) and i.isdigit():\n            min_val = int(i)\n    return min_val\n",
        "test": "assert min_val([2, 1, 3, 4]) == 1, \"Incorrect minimum value\"",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'_([a-z])', lambda match: match.group(1).upper(), word)\n    return word[0].lower() + word[1:]\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 762,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = []\n    for i in range(len(list1)):\n        nth_element.append(list1[i][n-1])\n    return nth_element\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 3) == None ",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False",
        "num_ids": 707,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def max_Product(arr):\n    # sort the array in ascending order\n    arr.sort()\n    # get the second last element and the last element\n    second_last = arr[-2]\n    last = arr[-1]\n    # return the maximum product between these two elements\n    return max(second_last * last, last * -second_last)\n",
        "test": "assert max_Product([1, 2, 3, 4, -5, 6]) == 24  # expected output is 24",
        "num_ids": 1180,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        if Input[i][0] in Input[i+1:]:\n            common_elements.append(Input[i][0])\n    return common_elements\n",
        "test": "assert group_tuples([]) == []",
        "num_ids": 1465,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max([[1, 2], [3, 4, 5], [6]]) == [3, 4, 5]",
        "num_ids": 849,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        rounded = round(num)\n        total += rounded\n    return total * len(list1)",
        "test": "assert round_and_sum([1.3, 2.5, 3.7]) == 21 ",
        "num_ids": 795,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(1) == 1, \"Error in function\"",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    for elem in test_tup:\n        result += str(elem) + delimiter\n    return result[:-len(delimiter)]\n",
        "test": "assert concatenate_tuple(()) == ''",
        "num_ids": 970,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    total = 0\n    \n    for i in range(1, n+1):\n        total += i**3\n    \n    average = total / (n * (n+1) * (n+2) / 6)\n    \n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1 # should return 1",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for s in test_tuple:\n        result.append(s[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear(()) == ()  # Should return an empty tuple if the input tuple is empty",
        "num_ids": 1004,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 3], [2, 3], [4, 3], [5, 3], [6, 7]], 3) == 4 # correct output for nested list",
        "num_ids": 1082,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 != 0, nums))\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 838,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'\n",
        "test": "assert change_date_format('2021-01-31') == '31-01-2021'",
        "num_ids": 1174,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sort the given list using Shell Sort algorithm\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([5, 3, 8, 1, 6, 9, 2, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "num_ids": 1287,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result\n",
        "test": "assert and_tuples((True, True, True), (True, True, True)) == (True, True, True)",
        "num_ids": 1259,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None\n    else:\n        x = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n        y = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n        return (x, y)\n",
        "test": "assert parabola_directrix(0, 0, 0) == None, \"Directrix should be None when a=0, b=0, c=0\"",
        "num_ids": 1366,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1,2,3],[4,5,6]) == False",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median length using the formula: median = (base1 + base2) / 2\n    median = (base1 + base2) / 2\n    return median",
        "test": "assert median_trapezium(5,10,10) == 7.5  # base1=5, base2=10, height=10",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number <= i:\n            return False\n    return True\n",
        "test": "assert check_greater([1, 2, 3], 2) == False",
        "num_ids": 804,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(b+)', text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"ab\") == True ",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # converting the input number into string to access the last digit\n    n_str = str(n)\n    # extracting the last digit from the string\n    last_digit = int(n_str[-1])\n    # returning the last digit\n    return last_digit\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 702,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [-2, -4] ",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for i, char in enumerate(str1):\n        if i % 2 == 0:\n            result += char\n    return result\n",
        "test": "assert remove_odd('') == '' # example 3",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0] and test_list[j][1] == test_list[i][0]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 0  # there are no bidirectional pairs",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n",
        "test": "assert multiple_to_single([0]) == 0",
        "num_ids": 1045,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define a list of adverbs\n    adverbs = ['quickly', 'slowly', 'quick', 'slow', 'gradually']\n    \n    # Find the first adverb in the sentence\n    for adv in adverbs:\n        match = re.search(r'\\b'+adv+r'\\b', text)\n        if match:\n            # Return the adverb and its position in the sentence\n            return (adv, match.start())\n\n    # If no adverb is found, return None\n    return None\n",
        "test": "assert find_adverb_position(\"The dog quickly and furiously chased the cat, but the cat ran away.\") == [('quickly', 12), ('furiously', 21)] ",
        "num_ids": 1425,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l*l\n    return surface_area\n",
        "test": "assert surfacearea_cube(2) == 24  # check if surfacearea_cube(2) returns 24",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
        "test": "assert positive_count([-1, -2, -3, -4, -5]) == 0, \"There should be 0 positive numbers in the array.\"",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def largest_neg(list1):\n    largest_neg = None\n    for num in list1:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n    return largest_neg\n",
        "test": "assert largest_neg([1, 2, -5, 3, -7]) == -5 ",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        result.append(tuple(x for x in tup if x >= K))\n    return result\n",
        "test": "assert trim_tuple([(1,), (2,), (3,)], 0) == [(1,), (2,), (3,)] # Example case with tuples of length 1 and no trimming",
        "num_ids": 1568,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "test": "assert index_multiplication((2, 3, 4), (5, 6, 7)) == (10, 18, 28)",
        "num_ids": 1195,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return {x: tup.count(x) for x in count}\n",
        "test": "assert count_Occurrence(('a','b','c','d','c','c','d'),['a','b','c','d']) == {'a': 1, 'b': 1, 'c': 3, 'd': 2} ",
        "num_ids": 1199,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 888,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def perrin_numbers():\n    \"\"\"\n    Generate the sequence of Perrin numbers\n    \"\"\"\n    yield 1\n    a, b = 1, 2\n    while True:\n        yield b\n        a, b = b, a + b\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers\n    \"\"\"\n    perrin = perrin_numbers()\n    total = 0\n    for _ in range(n):\n        total += next(perrin)\n    return total\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in str]\n",
        "test": "assert extract_string(['Hello', 'world', 'Python', 'programming', 'is', 'fun'], 3) == ['Hel', 'wor', 'Pyt', 'pro', 'is', 'fun']",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"  # test for simple string",
        "num_ids": 674,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(150, 150) == 0",
        "num_ids": 931,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import math\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n / i != i and n / i % 2 == 0:\n                sum += (n / i)\n    return sum\n",
        "test": "assert sumofFactors(1) == 0",
        "num_ids": 1055,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    return bool(pattern.search(text))\n",
        "test": "assert text_match_wordz('This is a test string with zebra and zappers.') == True, \"Test 1 failed\"",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(4) == True ",
        "num_ids": 999,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]",
        "num_ids": 803,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sublist = lst\n    for sublist in [lst[i:j] for i in range(len(lst)) for j in range(i+1, len(lst)+1)]:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([1,2,3,4,5]) == [1] # test list input with all same elements",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(4,5) == 20",
        "num_ids": 741,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_uppercase(\"\") == \"\" # Test case 4",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublst[0] for sublst in lst]\n",
        "test": "assert Extract([[1,2],[3,4]]) == [1,3]",
        "num_ids": 644,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"Python is awesome!\") == 1, \"Incorrect upper case character count\"",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    import itertools\n\n    combinations = []\n    for i in range(1, len(list1) + 1):\n        combinations += list(itertools.combinations(list1, i))\n\n    return combinations",
        "test": "assert combinations_list([]) == []",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] >= 0:\n            max_product = max(arr[i], max_product * arr[i])\n            min_product = min(arr[i], min_product * arr[i])\n        else:\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n\n        max_so_far = max(max_so_far, max_product)\n\n    return max_so_far\n",
        "test": "assert max_subarray_product([-10, -10]) == 100",
        "num_ids": 1632,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are equal to n.\n    \"\"\"\n    for val in d.values():\n        if val != n:\n            return False\n    return True\n",
        "test": "assert check_value({1:1, 2:2, 3:3}, 3) == False",
        "num_ids": 966,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "test": "assert drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4} # test case 2",
        "num_ids": 1245,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_product = arr[0]\n        for i in range(1, n):\n            if arr[i] > 0:\n                max_product = max(max_product * arr[i], arr[i])\n            else:\n                max_product = max(max_product, arr[i])\n        return max_product",
        "test": "assert max_product([-1, -1, 1]) == 1 # case 4",
        "num_ids": 1897,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (3, 5, 7)  # add_pairwise should return (3, 5, 7) for the given tuple (1, 2, 3, 4)",
        "num_ids": 1252,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3, 4], 7) == 3  # Example test case 2",
        "num_ids": 915,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True",
        "num_ids": 891,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert lists to sets to enable faster membership testing\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of the two sets\n    intersection = set1 & set2\n    # convert the resulting set back to a tuple\n    return tuple(intersection)\n",
        "test": "assert tuple_intersection((1,2,3),(4,5,6)) == ()",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n",
        "test": "assert replace_char(\"hello\", \"l\", \"z\") == \"hezzo\" # replacing 'l' with 'z' in 'hello'",
        "num_ids": 955,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert sort_counter({\"a\": 5, \"b\": 3, \"c\": 2, \"d\": 1}) == {\"c\": 2, \"b\": 3, \"a\": 5, \"d\": 1}, \"Invalid output\"",
        "num_ids": 1380,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n\n    max_val = min_val = nums[0]\n\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    return max_val + min_val\n",
        "test": "assert big_sum([-5, -2, 0, 3, 4]) == -1, \"Sum of smallest and largest value is incorrect\"",
        "num_ids": 1198,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()\n",
        "test": "assert is_lower('Hello') == 'hello' ",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Using regex to find all substrings containing lowercase letters\n    regex = re.compile(r'\\b[a-z]+\\b')\n    # Using replace method to replace all lowercase substrings with empty string\n    return regex.sub('', str1)\n",
        "test": "assert remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "test": "assert first_Digit(12345) == 1 ",
        "num_ids": 617,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 802,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def difference(n):\n    # calculate the sum of the first n natural numbers\n    sum_natural = (n * (n + 1)) // 2\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    # calculate the difference between the two sums\n    diff = sum_natural**2 - sum_cubes\n    # return the difference\n    return diff\n",
        "test": "assert difference(1) == 1-1 #check for n=1",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,3,5,7,9],5) == 0",
        "num_ids": 925,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def toggle_string(string):\n    return string.swapcase()",
        "test": "assert toggle_string('Hello') == 'hELLO'",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    if len(n1_str) != len(n2_str):\n        return \"Invalid input: The numbers must have the same number of digits.\"\n        \n    for i in range(len(n1_str)):\n        diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    return diff_sum\n",
        "test": "assert digit_distance_nums(0, 0) == 0",
        "num_ids": 1896,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]  # initialize max_sum to the first element of the list\n    current_sum = a[0]  # initialize current_sum to the first element of the list\n    for i in range(1, size):\n        # if current_sum + element is greater than current_sum, update current_sum\n        if current_sum + a[i] > a[i]:\n            current_sum += a[i]\n        else:\n            current_sum = a[i]  # otherwise, reset current_sum to the current element\n        # update max_sum if current_sum is greater than max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n",
        "test": "assert max_sub_array_sum([1, -2, 3, 10, -4, 7, 2, -5], 8) == 18",
        "num_ids": 1388,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the tuples to sets and find the union of the sets\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # convert the union set back to a tuple and sort it\n    union_tup = tuple(sorted(union_set))\n    \n    return union_tup\n",
        "test": "assert union_elements((\"A\", \"B\"), (\"B\", \"C\")) == ('A', 'B', 'C')",
        "num_ids": 1274,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1],[2],[3],[4]]) == 1",
        "num_ids": 1184,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    matches = re.findall(r'\"(.*?)\"', text)\n    return matches\n",
        "test": "assert extract_values(\"She ordered pizza for 2 people.\") == []",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 1, 1, 1], 4) == 0",
        "num_ids": 1055,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 95,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 686,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n",
        "test": "assert sum_digits(123) == 6  # Test case 1",
        "num_ids": 831,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1,2,3,4,5]) # should return True",
        "num_ids": 958,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n",
        "test": "assert empty_list(0) == [] # Test the case when length is 0",
        "num_ids": 619,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # iterate over each sublist in the input list\n    for i in range(len(list1)):\n        # sort the sublist\n        list1[i].sort()\n    return list1\n",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\", \"fish\"], [\"alpha\", \"bravo\", \"charlie\"]]) == [[\"apple\", \"banana\", \"cherry\"], [\"cat\", \"dog\", \"fish\"], [\"alpha\", \"bravo\", \"charlie\"]]",
        "num_ids": 1213,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for i in nums:\n        if i not in unique_nums:\n            unique_nums.append(i)\n    return unique_nums[:2]\n",
        "test": "assert two_unique_nums([]) == []",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3, 2, 1]) == 6",
        "num_ids": 945,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14*r*r + 2*3.14*r*h\n    return area\n",
        "test": "assert surfacearea_cylinder(0.5, 1) == 10.011238444512242",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def is_Sub_Array(A,B):\n    # Convert the lists into sets to check if one is a subset of another\n    setA = set(A)\n    setB = set(B)\n    \n    # Check if setB is a subset of setA\n    if setB.issubset(setA):\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sub_Array([1,2,3,4,5], [2,3,6]) == False",
        "num_ids": 1022,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last_Digit_Factorial(n):\n    # initialize the product of factorials to 1\n    product = 1\n    \n    # loop over the range from 1 to n, inclusive\n    for i in range(1, n+1):\n        # multiply the current product by the factorial of i\n        product *= i\n        \n    # compute the last digit of the product using modulo arithmetic\n    return product % 10\n",
        "test": "assert last_Digit_Factorial(1) == 1, \"last_Digit_Factorial(1) should be 1\"",
        "num_ids": 978,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists should have the same length\")\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) != [1,4,7,2,5,8,3,6,9,10]",
        "num_ids": 1493,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_elements.append(i)\n    for i in test_tup2:\n        if i not in test_tup1:\n            dissimilar_elements.append(i)\n    return dissimilar_elements\n",
        "test": "assert find_dissimilar(('a', 'b', 'c'), ('c', 'd', 'e')) == ('a', 'b')",
        "num_ids": 1288,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            result.append(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            result.append(element)\n    return tuple(result)\n",
        "test": "assert even_ele(((1, 2, 3), (4, 5, 6)), lambda x: x % 2 == 0) == ((2,), (4, 6)) ",
        "num_ids": 1348,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2*(b*s)\n    return area\n",
        "test": "assert surface_Area(b=8, s=4) == 64  # Test Case 4",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True  # empty dictionary",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n\n    catalan_num = 0\n    i = 0\n\n    while i < num:\n        catalan_num = 2*i + catalan_num\n        i += 1\n\n    return catalan_num\n",
        "test": "assert catalan_number(0) == 1  # the first catalan number is 1",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern for adverbs ending with ly\n    pattern = r'\\b\\w+ly\\b'\n    \n    # Use the findall() function to find all adverbs in the text\n    matches = re.findall(pattern, text)\n    \n    # Loop through the matches and check if they end with ly\n    for match in matches:\n        if match.endswith('ly'):\n            # If the match ends with ly, return it and its starting position\n            return match, text.index(match)\n    \n    # If no adverb ending with ly is found, return None\n    return None\n",
        "test": "assert find_adverbs(\"The very quick brown fox jumps over the lazy dog.\") == (None, []) # no adverb ends with ly",
        "num_ids": 1448,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert items to a list of tuples (item, price)\n    items = [(item, price) for item, price in items]\n    # Use heapq to find the n most expensive items\n    return heapq.nlargest(n, items, key=lambda x: x[1])\n",
        "test": "assert expensive_items([(1,10), (2,20), (3,30), (4,40), (5,50)], 1) == [(5,50)] ",
        "num_ids": 1996,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part\n",
        "test": "assert split_Arr([1,2,3,4,5], 0) == [1,2,3,4,5], \"Error: The function is not correct\"",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3,4,5]) == (1,2,3,4,5)",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n",
        "test": "assert big_diff([10, 3, 5, 6, 20]) == 17  # test case 1",
        "num_ids": 987,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize an empty list to store perfect squares\n    perfect_squares_list = []\n    # Iterate through all numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # Check if the square root of num is an integer\n        if int(num ** 0.5) ** 2 == num:\n            # If so, add it to the list of perfect squares\n            perfect_squares_list.append(num)\n    # Return the list of perfect squares\n    return perfect_squares_list\n",
        "test": "assert perfect_squares(1, 3) == [1]",
        "num_ids": 1178,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n",
        "test": "assert polar_rect(4, 0) == (4, 0) # polar coordinate (4, 0) should map to the same rectangular coordinates (4, 0)",
        "num_ids": 977,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the list has at least two elements\n    if length >= 2:\n        # Swap the first and last elements\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n    else:\n        print(\"Error: List must have at least two elements\")\n\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]  # test case 1",
        "num_ids": 897,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    \n    # Initialize sum to 0\n    sum = 0\n    \n    # Calculate sum of product of consecutive binomial coefficients\n    for i in range(k, n):\n        sum += (comb(n, i) * comb(n, i+1))\n    \n    return sum\n",
        "test": "assert binomial_Coeff(7,0) == 1, \"binomial_Coeff(7,0) should be 1\"",
        "num_ids": 1405,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet of the ip address\n    octets = re.findall(r'\\d+', ip)\n    octets = [str(int(octet)) for octet in octets]\n    \n    # Combine the octets into a new ip address\n    new_ip = '.'.join(octets)\n    \n    return new_ip\n",
        "test": "assert removezero_ip(\"10.100.100.100\") == \"10.100.100.100\"",
        "num_ids": 1210,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_found = False\n    odd_found = False\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and not even_found:\n            even_found = True\n            even_num = num\n        elif num % 2 == 1 and not odd_found:\n            odd_found = True\n            odd_num = num\n        if even_found and odd_found:\n            break\n    \n    if even_found and odd_found:\n        return abs(even_num - odd_num)\n    else:\n        return None\n",
        "test": "assert diff_even_odd([1, 3, 5, 7]) == None, \"First even - first odd difference is incorrect\"",
        "num_ids": 1259,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def min_Swaps(str1, str2):\n    # Convert strings to lists of integers\n    nums1 = [int(n) for n in str1]\n    nums2 = [int(n) for n in str2]\n\n    # Initialize variables to keep track of swaps and current index\n    swaps = 0\n    i = 0\n\n    # Loop through both lists, comparing values and swapping if necessary\n    while i < len(nums1) and i < len(nums2):\n        if nums1[i] > nums2[i]:\n            nums1[i], nums2[i] = nums2[i], nums1[i]\n            swaps += 1\n        i += 1\n\n    # If there are still values left in nums2, we need more swaps\n    if i < len(nums2):\n        swaps += len(nums2) - i\n\n    return swaps\n",
        "test": "assert min_Swaps(\"1111\", \"0000\") == 4",
        "num_ids": 1623,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert tuple_size((1,2,3,4,5) == 5) ",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def find_kth(arr1, arr2, k):\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i = 0\n    j = 0\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            k -= 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            j += 1\n            k -= 1\n        else:\n            i += 1\n            j += 1\n    if i < n1:\n        if k == 1:\n            return arr1[i]\n        i += 1\n        k -= 1\n    elif j < n2:\n        if k == 1:\n            return arr2[j]\n        j += 1\n        k -= 1\n    while i < n1:\n        if k == 1:\n            return arr1[i]\n        i += 1\n        k -= 1\n    while j < n2:\n        if k == 1:\n            return arr2[j]\n        j += 1\n        k -= 1\n    # kth element is greater than all elements in both arrays\n    return None\n",
        "test": "assert find_kth([1, 2, 3], [4, 5, 6], 3) == 3 # k=3 from arr1",
        "num_ids": 2178,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the input number to string and calculate its length\n    length = len(str(number))\n    # Initialize sum\n    sum = 0\n    # Calculate sum of each digit raised to the power of the length\n    for digit in str(number):\n        sum += int(digit) ** length\n    # If the sum is equal to the number, then it is an armstrong number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 1002,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def sum_average(n):\n    \"\"\"\n    Returns the sum and average of the first n natural numbers.\n    \"\"\"\n    # Compute the sum of the first n natural numbers\n    total = (n * (n + 1)) // 2\n    # Compute the average\n    average = total / n\n    return total, average",
        "test": "assert sum_average(5) == (15, 3.0), \"Function did not return the correct sum and average for n=5\"",
        "num_ids": 624,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(0) == True",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in str1:\n        if char_freq[char] > 1:\n            return char\n    return None\n",
        "test": "assert first_repeated_char(\"aabbc\") == \"a\"",
        "num_ids": 1208,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_ludic(n):\n    # Define a list to store the lucid numbers\n    ludic = []\n    \n    # Iterate over the integers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is lucid\n        is_ludic = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_ludic = False\n                break\n        if is_ludic:\n            ludic.append(i)\n    \n    return ludic\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 4, 5, 7, 8, 9]  # test for n=10 ",
        "num_ids": 2102,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the words back into a string with spaces between them\n    result = ' '.join(words)\n    return result ",
        "test": "assert reverse_words(\"   \") == \"\"",
        "num_ids": 819,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the input is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the number is divisible by any number between 2 and its square root\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    # If the number passes the check, it is a prime number\n    return True\n",
        "test": "assert prime_num(7) == True",
        "num_ids": 875,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n",
        "test": "assert radian_degree(180) == math.pi ",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert find_literals(\"hello world\", r'\\b[a-zA-Z]+\\b') == (\"hello\", 0, 5)  # matches \"hello\" at the beginning of the string",
        "num_ids": 1297,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef bell_Number(n):\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(0)\n        for j in range(i):\n            bell_numbers[i] += bell_numbers[j] * bell_numbers[i-j-1]\n            bell_numbers[i] //= math.factorial(j)\n    return bell_numbers[n]\n",
        "test": "assert bell_Number(1) == 1",
        "num_ids": 806,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k-1] + list1[k:]\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]",
        "num_ids": 1348,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    max_val = None\n    for row in test_list:\n        if N-1 < len(row):\n            if max_val is None or row[N-1] > max_val:\n                max_val = row[N-1]\n        else:\n            print(\"Error: row does not have at least\", N, \"columns\")\n    \n    if max_val is None:\n        print(\"Error: input matrix has no values\")\n    \n    return max_val\n",
        "test": "assert max_of_nth([[1,2,3], [4,5,6]], 0) == 6",
        "num_ids": 1540,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n\n    return [first_list, second_list]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]] ",
        "num_ids": 1291,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    # initialize the sum to zero\n    cumulative_sum = 0\n    \n    # loop through the list and add each element to the cumulative sum\n    for element in test_list:\n        cumulative_sum += element\n    \n    return cumulative_sum\n",
        "test": "assert cummulative_sum([-5, -4, -3, -2, -1]) == [-5, -9, -15, -24, -33]",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        avg = sum(nums[i])/len(nums[i])\n        avg_list.append(avg)\n    return avg_list\n",
        "test": "assert average_tuple(((1,2,3),(4,5,6),(7,8,9))) == [2.0, 5.0, 8.0]",
        "num_ids": 1566,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result += (test_tup1[i] % test_tup2[i],)\n        return result\n    else:\n        print(\"Error: Tuples must be of the same length.\")\n",
        "test": "assert tuple_modulo((3, 4, 5), (2, 3, 4)) == (1, 1, 1), \"Incorrect result in tuple_modulo\"",
        "num_ids": 1595,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Base case\n    if d == 0:\n        return 0\n\n    # Initialize variables\n    jumps = 0\n    prev_steps = 0\n    curr_steps = 0\n\n    # Loop through steps\n    while curr_steps <= steps:\n        # Increase jumps count\n        jumps += 1\n\n        # Calculate the number of steps that can be taken\n        curr_steps = prev_steps + d\n\n        # Update the number of steps taken\n        prev_steps = curr_steps\n\n        # Check if the target point is reached\n        if curr_steps > steps:\n            break\n\n    return jumps\n",
        "test": "assert min_Jumps(3, 3) == 2  # (0, 3) -> (0, 0) -> (3, 0)",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1,2,3],[1,2,3]) == [1,1,1]",
        "num_ids": 1153,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = re.findall(r'\\d+', test_str)\n    letters = re.split(r'\\d+', test_str)\n    return ''.join(letters) + ''.join(numbers)",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 1103,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [False] * n\n    dp[0] = True\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j]:\n                dp[i] = True\n                break\n    count = 0\n    for i in range(n):\n        if dp[i]:\n            count += 1\n    return count\n",
        "test": "assert largest_subset([1, 2, 3, 4]) == 4 # all pairs are divisible by 1",
        "num_ids": 1772,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n    \n    # Find the middle index of the merged array\n    mid_idx = n // 2\n    \n    # If the array has an odd number of elements, return the middle element\n    if n % 2 == 1:\n        return merged_arr[mid_idx]\n    \n    # If the array has an even number of elements, return the average of the middle elements\n    else:\n        return (merged_arr[mid_idx - 1] + merged_arr[mid_idx]) / 2\n",
        "test": "assert get_median([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 5",
        "num_ids": 1504,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4,5],2) == [1,4,9,16,25]",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"123\") == False # string with non-alphabetic characters",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def swap_List(newList):\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    # store the first element in a temporary variable\n    temp = newList[0]\n    # replace the first element with the last element\n    newList[0] = newList[-1]\n    # replace the last element with the temporary variable\n    newList[-1] = temp\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1] # test for a list with even length",
        "num_ids": 1055,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculating the semi-circumference of the circle\n    semi_circumference = 2 * math.pi * r\n    \n    # Calculating the length of the hypothenuse of the largest possible triangle\n    h = 2 * r * math.sqrt((3/4) - (1/2)**2)\n    \n    # Calculating the area of the largest possible triangle\n    area = 0.5 * r * h\n    \n    # Returning the area of the largest possible triangle\n    return area\n",
        "test": "assert triangle_area(5) == 19.744, \"The area of the largest triangle that can be inscribed in a semicircle with radius 5 is not correct.\"",
        "num_ids": 1130,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start, end):\n        if array[i] != i+1 and array[i] != i:\n            return i+1\n    return end+1\n",
        "test": "assert find_First_Missing([1,2,4,5,6]) == 3",
        "num_ids": 1109,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\" ",
        "num_ids": 660,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6] ",
        "num_ids": 845,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # create an empty list to store adjacent coordinates\n    adj = []\n    # iterate through all possible adjacent coordinates\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # check if the adjacent coordinate is valid\n            if i != 0 or j != 0:\n                # append the adjacent coordinate to the list\n                adj.append((ele[0] + i, ele[1] + j))\n    # return the list of adjacent coordinates\n    return adj",
        "test": "assert adjac((2, 0)) == [(3, 0), (2, 1), (1, 0), (2, -1)]  # correct output for (2, 0)",
        "num_ids": 1510,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if ' ' in text:\n        return text.replace(' ', '_')\n    elif '_' in text:\n        return text.replace('_', ' ')\n    else:\n        return text\n",
        "test": "assert replace_spaces(\"Hello World\") == \"Hello_World\"",
        "num_ids": 746,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 14,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def move_zero(num_list):\n    zero_indices = [i for i, x in enumerate(num_list) if x == 0]  # find all indices with zeroes\n    for i in reversed(zero_indices):  # iterate backwards through the zero indices\n        num_list.pop(i)  # remove the zero at the current index\n    num_list.extend([0] * len(zero_indices))  # append zeroes at the end\n    return num_list\n",
        "test": "assert move_zero([]) == []  # example test case 4",
        "num_ids": 1615,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through all pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # XOR the two numbers and add to sum\n            sum += arr[i] ^ arr[j]\n    \n    # Return the final sum\n    return sum\n",
        "test": "assert pair_xor_Sum([1, 1, 1, 1, 1], 5) == 0",
        "num_ids": 1289,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a heap.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "test": "assert heap_sort([4, 2, 8, 1, 0, 5]) == [0, 1, 2, 4, 5, 8] ",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True ",
        "num_ids": 854,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v / 3.6  # convert km/h to m/s\n    # Calculate wind chill\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    # Round to the next integer\n    wind_chill_index = round(wind_chill_index)\n    return wind_chill_index\n",
        "test": "assert wind_chill(40, 10) == 8, \"Function is not working correctly\"",
        "num_ids": 1337,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def sample_nam(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam([\"Alice\", \"Bob\", \"charlie\", \"Dave\", \"Eve\"]) == 15",
        "num_ids": 865,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result\n",
        "test": "assert remove_parenthesis(\"Hello (world)!\") == \"Hello !\"",
        "num_ids": 841,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        count = i * (i - 1) // 2\n    return i - 1\n",
        "test": "assert is_nonagonal(1) == 1 ",
        "num_ids": 882,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Loop through each word\n    for word in words:\n        \n        # Check if the word starts with 'z'\n        if word.startswith('z'):\n            continue\n        \n        # Check if the word ends with 'z'\n        if word.endswith('z'):\n            continue\n        \n        # Check if the word contains 'z'\n        if 'z' in word:\n            return True\n        \n    # If no word contains 'z', return False\n    return False\n",
        "test": "assert text_match_wordz_middle(\"banana z\") == False",
        "num_ids": 1244,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def reverse_Array_Upto_K(input, k):\n    if k > len(input):\n        return input[::-1]\n    else:\n        return input[:k][::-1] + input[k:]\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 0) == [1,2,3,4,5] # reverse no elements",
        "num_ids": 1552,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((\"apple\", \"banana\", \"cherry\"), {\"name\": \"John\", \"age\": 25}) != (\"apple\", \"banana\", \"cherry\", {\"name\": \"John\", \"age\": 26})",
        "num_ids": 1680,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    \n    max_average = 0\n    for i in range(n):\n        for j in range(n):\n            avg = dp[i][j] / ((i+1) * (j+1))\n            max_average = max(max_average, avg)\n    \n    return max_average\n",
        "test": "assert maxAverageOfPath([[1]]) == 1 # Example matrix with only one element",
        "num_ids": 2588,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for student, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n",
        "test": "assert filter_data({'Alice': (160, 50), 'Bob': (170, 60), 'Charlie': (150, 55), 'David': (175, 70)}, 160, 55) == {'Bob': (170, 60), 'David': (175, 70)}",
        "num_ids": 1938,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,2,3,4,5], [1,2,3,4,5]) == 5",
        "num_ids": 980,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert base to string to iterate over digits\n    base_str = str(base)\n    # Initialize sum to zero\n    sum = 0\n    # Iterate over digits of base and calculate sum of digits raised to power\n    for digit in base_str:\n        sum += int(digit) ** power\n    # Return sum\n    return sum\n",
        "test": "assert power_base_sum(5, 1) == 5, \"5^1 = 5, the sum of digits is 5, not 0\"",
        "num_ids": 1245,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext1 = \"The man said, \\\"Hello, World!\\\" to me.\"\nprint(extract_quotation(text1)) # Output: ['Hello, World!']\n",
        "test": "assert extract_quotation('\"Hello, world!\"') == ['Hello, world!']",
        "num_ids": 889,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # First, check that the input tuple has at least 2 elements\n    if len(test_tup) < 2:\n        raise ValueError(\"Input tuple must have at least 2 elements\")\n    # Use a list comprehension to compute the products\n    result = [test_tup[i] * test_tup[i+1] for i in range(len(test_tup)-1)]\n    # Convert the list to a tuple and return it\n    return tuple(result)\n",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12)",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 1344,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Remove consecutive duplicates\n    result = [key for key, value in groupby(nums)]\n    return result",
        "test": "assert consecutive_duplicates([1, 2, 3, 4]) == [1, 2, 3, 4], \"Incorrect result for non-consecutive duplicates\"",
        "num_ids": 1083,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lsa = math.pi * r * h + math.pi * r ** 2\n    return lsa\n",
        "test": "assert lateralsurface_cone(0, 1) == 0, \"Error in lateralsurface_cone\"",
        "num_ids": 1080,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # Replace spaces with colon\n    text = re.sub(r\"\\s\", \":\", text)\n\n    # Replace commas with colon\n    text = re.sub(r\",\", \":\", text)\n\n    # Replace dots with colon\n    text = re.sub(r\"\\.\", \":\", text)\n\n    return text",
        "test": "assert replace_specialchar(\"This is a test.1,2,3\") == \"This:is:a:test:1:2:3\" ",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low, high = 0, len(A) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return result\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7], 4) == 3  # Correct",
        "num_ids": 1518,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    return prod\n\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            res += prod\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 0, 1]) == 0, \"Function output is incorrect for [-1, 0, 1]\"",
        "num_ids": 1636,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def set_middle_bits(n):\n    first_bit = n & 1\n    last_bit = n & (1 << (len(bin(n)) - 2))\n    middle_bits = n ^ (first_bit | last_bit)\n    n = (n & ~middle_bits) | (first_bit | last_bit)\n    return n",
        "test": "assert set_middle_bits(0b00000000) == 0b00000000  # binary: 0",
        "num_ids": 1727,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 17,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)",
        "test": "assert left_insertion([1, 3, 4, 6, 7], 4) == 2, \"Should return 2\"",
        "num_ids": 899,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_str('Hello') == False",
        "num_ids": 742,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return ((2**n) - 1) / (2 - 1)\n",
        "test": "assert geometric_sum(1) == 1, \"Error: geometric_sum(1) should be 1\"",
        "num_ids": 676,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    \n    # Define a function to generate triangular numbers\n    def generate_Triangular_Numbers(n):\n        \"\"\"\n        Generate triangular numbers with at least n digits.\n        \"\"\"\n        t = 0\n        i = 1\n        while len(str(t)) < n:\n            t += i\n            i += 1\n        return t\n    \n    # Generate the smallest triangular number with n digits\n    t = generate_Triangular_Numbers(n)\n    \n    # Find the index of the triangular number\n    index = 1\n    while generate_Triangular_Numbers(index) < t:\n        index += 1\n    \n    return index\n",
        "test": "assert find_Index(1) == 1, \"Testing for n = 1\"",
        "num_ids": 1964,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    \n    # Loop through the tuple and add key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    \n    # Return the resulting dictionary\n    return result_dict\n",
        "test": "assert tuple_to_dict((\"key1\", \"value1\", \"key2\", \"value2\")) == {\"key1\": \"value1\", \"key2\": \"value2\"}, \"Incorrect output\"",
        "num_ids": 1459,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop through the string and check if all characters are same\n    for i in range(len(s)):\n        if s[i] == s[0]:\n            count += 1\n        else:\n            break\n    \n    # If all characters are same, return True, else return False\n    if count == len(s):\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same(\"a\") == True",
        "num_ids": 894,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    volume = (1.0/6.0) * side**2\n    area = (3 * volume) / math.sqrt(2)\n    return area\n",
        "test": "assert area_tetrahedron(4) == 4/6*math.sqrt(20) # for a tetrahedron with side = 4 and volume = 4/6*math.sqrt(20)",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a list by m items to the right.\n    \"\"\"\n    # Get the length of the list and the rotation count\n    n = len(lst)\n    k = m % n\n    \n    # If rotation count is zero, return the original list\n    if k == 0:\n        return lst\n    \n    # Split the list into two parts: the left and right sublists\n    left = lst[:n-k]\n    right = lst[n-k:]\n    \n    # Concatenate the two sublists in reverse order\n    return right + left\n",
        "test": "assert rotate_right([1], 1) == [1]  # rotate a single element list to the right by 1 item",
        "num_ids": 1405,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3)) == False  # tuple with no none value",
        "num_ids": 796,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        digits = set(str(num))\n        return all(num % int(digit) == 0 for digit in digits)\n    \n    return [num for num in range(startnum, endnum+1) if is_divisible_by_digits(num)]\n",
        "test": "assert divisible_by_digits(10000, 20000) == [10000, 11080, 11100, 11400, 11880, 11920, 12190, 12200, 13900, 16880, 18000, 19210, 19800, 20000] ",
        "num_ids": 1750,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return 0.5 * r ** 2 * a / 360\n",
        "test": "assert sector_area(3, 365) == None, \"Error in sector_area() function\"",
        "num_ids": 1080,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # create a 2D array of size (m+1) x (n+1) x (o+1)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # fill the L array using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    # create a string to store the LCS\n    lcs = \"\"\n    \n    # fill the lcs string using backtracking\n    i = m\n    j = n\n    k = o\n    \n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] >= L[i][j-1][k] and L[i-1][j][k] >= L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] >= L[i-1][j][k] and L[i][j-1][k] >= L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs\n",
        "test": "assert lcs_of_three(\"ABC\", \"DEF\", \"GHI\") == \"\", \"Incorrect output\"",
        "num_ids": 3021,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 17,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # using regex to find all the capital letters\n    words = re.findall(r'[A-Z][^A-Z]*', str1)\n    # joining the capital letters with a space\n    return ' '.join(words)",
        "test": "assert capital_words_spaces(\"Aeiou\") == \"Aeiou\"",
        "num_ids": 1106,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_int = []\n    for num_str in nums_str:\n        nums_int.append(int(num_str))\n    nums_int.sort()\n    return [str(num) for num in nums_int]\n",
        "test": "assert sort_numeric_strings(['10', '2', '1', '5', '4']) == ['1', '2', '4', '5', '10'] ",
        "num_ids": 1532,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_tuple([(1, 2), (3, 4)], (5, 6)) == [(1, 2), (3, 4), (5, 6)] ",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # Find the smallest index for left and right child\n    left_index = 2 * i + 1\n    right_index = 2 * i + 2\n\n    # Check if the left child is smaller than the parent\n    if left_index < len(arr) and arr[left_index] < arr[i]:\n        return False\n\n    # Check if the right child is smaller than the parent\n    if right_index < len(arr) and arr[right_index] < arr[i]:\n        return False\n\n    # If both children are smaller than the parent, then the parent is a min heap\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return True\n\n    # Iterate over the array and check if each element is a min heap\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True\n",
        "test": "assert check_min_heap_helper([], 0) == True     # empty array",
        "num_ids": 1984,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    return sorted(test_list, key=lambda x: x[1])[:K]\n",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6)], 0) == []",
        "num_ids": 1539,
        "indeed": true
    },
    {
        "number": 754,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Find common elements and their indices\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append((l1[i], i))\n\n    # Extract the indices of common elements\n    index_list = [index for element, index in common]\n\n    return index_list\n",
        "test": "assert extract_index_list([1,2,3],[4,5,6],[7,8,9]) == []",
        "num_ids": 1297,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest != float('inf') else None\n",
        "test": "assert second_smallest([1, 2]) == 2",
        "num_ids": 1158,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one('abc') == True",
        "num_ids": 713,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    for sublist in lst:\n        sublists.append(tuple(sublist))\n    unique_sublists = list(set(sublists))\n    counts = {}\n    for sublist in unique_sublists:\n        counts[sublist] = sublists.count(sublist)\n    return counts\n",
        "test": "assert unique_sublists([[1, 2], [2, 3], [1, 2]]) == {(1, 2): 2, (2, 3): 1}",
        "num_ids": 1439,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # convert the input string to float and check the precision\n        decimal_num = float(num)\n        if len(str(decimal_num).split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        # if the input string is not a valid number, return False\n        return False\n",
        "test": "assert is_decimal('3.14'), 'Error: Incorrect output for 3.14'",
        "num_ids": 898,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1,1,2]) == False # Test case 3",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 13,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [2]:\n        return False\n    else:\n        return True\n",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1, \"Incorrect result\"",
        "num_ids": 1353,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr('hello123') == 3  # Test case 1",
        "num_ids": 738,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def count_divisors(num):\n        divisors_count = 0\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if num // i == i:\n                    divisors_count += 1\n                else:\n                    divisors_count += 2\n        return divisors_count\n\n    def polite_numbers(n):\n        polite_nums = [1]\n        i = 2\n        while len(polite_nums) < n:\n            if count_divisors(i) > len(polite_nums):\n                polite_nums.append(i)\n            i += 1\n        return polite_nums\n\n    return polite_numbers(n)[-1]\n",
        "test": "assert is_polite(1) == 1  # first polite number is 1",
        "num_ids": 1377,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3]) == [(1, 2), (2, 3)]",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def get_pairs_count(arr, target_sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to 'target_sum'. The funtion gets as input a list of numbers and the target_sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 7) == 2, \"Incorrect count for [1, 2, 3, 4, 5] and sum 7\"",
        "num_ids": 1182,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n",
        "test": "assert Diff([1,2,3], [1,2,4]) == [3]",
        "num_ids": 1221,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        if i % 2 != 0:\n            sum += i**4\n        i += 1\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1, \"Error in function\" ",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if current_char == '(':\n                if i != ')':\n                    return False\n            elif current_char == '[':\n                if i != ']':\n                    return False\n            elif current_char == '{':\n                if i != '}':\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n",
        "test": "assert check_expression(\"({[]})\") == True # balanced expression",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word) != K:\n            new_words.append(word)\n    return \" \".join(new_words)\n",
        "test": "assert remove_length(\"Python is awesome\", 6) == \"is awesome\"  # test case 3",
        "num_ids": 973,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Initialize an empty list to store the positions and occurrence of the pattern in the text.\n    result = []\n    # Find all the non-overlapping occurrences of the pattern in the text using the finditer() method of re module.\n    matches = re.finditer(pattern, text)\n    # Iterate over the matches and append the start position and occurrence of the pattern to the result list.\n    for match in matches:\n        result.append((match.start(), text[match.start():match.end()]))\n    # If there are no matches, return None.\n    if not result:\n        return None\n    # Return the result list containing the start position and occurrence of the pattern in the text.\n    return result\n",
        "test": "assert occurance_substring(\"The quick brown fox jumps over the lazy dog\", \"cat\") == None",
        "num_ids": 1509,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == True",
        "num_ids": 985,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 and test_str[i].lower() in vowels:\n            count += 1\n        elif i == len(test_str) - 1 and test_str[i].lower() in vowels:\n            count += 1\n        elif i > 0 and i < len(test_str) - 1 and test_str[i-1].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"python is awesome\") == 4 # Should return 4",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_sum = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            non_repeated_sum += arr[i]\n    return non_repeated_sum\n",
        "test": "assert find_sum([]) == 0 # empty input",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result",
        "test": "assert pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 5, 5]) == [[1], [2, 2], [3, 3, 3], [4], [5, 5]]",
        "num_ids": 1307,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def unique_sublists(lst):\n    # Convert the list to a set to remove duplicates\n    unique_lst = set(lst)\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Iterate over each unique element in the list\n    for elem in unique_lst:\n        # Count the number of times the element appears in the original list\n        count = lst.count(elem)\n        # Convert the element to a tuple and use it as the key in the dictionary\n        counts[(elem,)] = count\n    # Return the dictionary with the counts\n    return counts\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 1557,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    combinations_list = []\n    for i in range(1, len(test_list)+1):\n        for combo in combinations(test_list, i):\n            combinations_list.append(sum(combo))\n    return combinations_list",
        "test": "assert find_combinations([1,2,3,4,5]) == [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4), (1, 2, 3, 4), (1, 2, 5), (1, 3, 5), (2, 3, 5), (2, 4, 5), (1, 2, 3, 5), (1, 3, 4, 5), (2, 3, 4, 5), (1, 2, 3, 4, 5)] ",
        "num_ids": 2306,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 20,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "import math\n\ndef count_divisors(n):\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                divisors += 1\n            else:\n                divisors += 2\n    return divisors\n",
        "test": "assert count_divisors(1) == 1, \"Test case failed for count_divisors(1)\"",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n\n    # Initialize the sum of odd length subarrays to zero\n    odd_sum = 0\n\n    # Get the length of the array\n    n = len(arr)\n\n    # Loop through all possible odd length subarrays\n    for i in range(1, n, 2):\n        # Loop through all possible starting indices of the subarray\n        for j in range(n - i):\n            # Calculate the sum of the subarray\n            subarray_sum = sum(arr[j:j+i])\n            # Add the sum to the running total\n            odd_sum += subarray_sum\n\n    # Return the sum of all odd length subarrays\n    return odd_sum\n",
        "test": "assert odd_length_sum([1,2,3,4]) == 12, \"Error: Incorrect output for odd_length_sum([1,2,3,4])\"",
        "num_ids": 1283,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if delta == 0 else delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 2304,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = None\n    odd = None\n    for num in list1:\n        if num % 2 == 0:\n            if even is None:\n                even = num\n        else:\n            if odd is None:\n                odd = num\n    if even is None:\n        return None\n    if odd is None:\n        return None\n    return even * odd\n",
        "test": "assert mul_even_odd([]) == None  # empty list ",
        "num_ids": 1327,
        "indeed": true
    },
    {
        "number": 785,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, str):\n        return \"Invalid input. Please provide a string.\"\n    \n    try:\n        int_tuple = tuple(map(int, test_str.strip('()').split(',')))\n        return int_tuple\n    except ValueError:\n        return \"Invalid input. Please provide a valid tuple string.\"\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3) ",
        "num_ids": 937,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "test": "assert right_insertion([1, 3, 4, 5, 7], 6) == 4  # example test case",
        "num_ids": 931,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b){3}'\n    return re.search(pattern, text)\n",
        "test": "assert text_match_three(\"abbbb\") == False # Example 4",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_list) + tuple(test_str)\n    return new_tup\n",
        "test": "assert new_tuple([1, 2, 3], \"apple\") == (1, 2, 3, 'a', 'p', 'p', 'l', 'e') ",
        "num_ids": 917,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8, 10]) # True",
        "num_ids": 833,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert remove_nested(()) == () # empty tuple",
        "num_ids": 1192,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1,2,3],[4,5,6]]) == 2",
        "num_ids": 666,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    last_position = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_position = i\n    return last_position",
        "test": "assert last([1, 2, 3, 4, 5], 3) == 2  # test case 2",
        "num_ids": 1302,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b$')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb('a') == False",
        "num_ids": 810,
        "indeed": true
    },
    {
        "number": 796,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def return_sum(d):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(d.values())\n",
        "test": "assert return_sum({1: 2, 3: 4}) == 6",
        "num_ids": 762,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize the sum variable\n    sum = 0\n    \n    # Iterate through the range from l to r\n    for i in range(l, r+1):\n        \n        # Check if the number is odd\n        if i % 2 != 0:\n            \n            # Add the number to the sum\n            sum += i\n    \n    # Return the sum of all odd numbers\n    return sum\n",
        "test": "assert sum_odd(4) == 1",
        "num_ids": 950,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n",
        "test": "assert _sum([1, 2, 3]) == 6, \"Sum of [1, 2, 3] is 6\"",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert number to binary\n    binary_num = bin(n)[2:]\n    \n    # Pad the binary number with zeros to make it 32 bits\n    if len(binary_num) < 32:\n        binary_num = '0'*(32-len(binary_num)) + binary_num\n    \n    # Rotate the bits\n    rotated_binary = binary_num[-d:] + binary_num[:-d]\n    \n    # Convert the rotated binary to decimal\n    rotated_decimal = int(rotated_binary, 2)\n    \n    return rotated_decimal\n",
        "test": "assert left_rotate(0, 1) == 0                   # 0 -> 0",
        "num_ids": 2290,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello world\") == \"Helloworld\" ",
        "num_ids": 486,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 1, 1) == 3",
        "num_ids": 825,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    # First, check if the array is sorted\n    if arr[0] <= arr[-1]:\n        return 0\n    \n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    \n    # While the left and right pointers haven't crossed each other\n    while left < right:\n        # Find the middle index between the pointers\n        mid = (left + right) // 2\n        \n        # Check if the left half is sorted\n        if arr[left] <= arr[mid]:\n            # If it is, the rotation count is the number of elements to the left of the middle index\n            return mid - left\n        \n        # If the right half is sorted, update the pointers and repeat the process\n        right = mid\n        \n    # If we reach this point, it means the left half is not sorted, so the rotation count is the length of the array\n    return len(arr)\n",
        "test": "assert count_rotation([3, 4, 5, 1, 2]) == 2 # rotated by 2, 120 degree",
        "num_ids": 1458,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_perfect_square(16) == True # Perfect square number",
        "num_ids": 842,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 4, 8]) == True",
        "num_ids": 794,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    \n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    \n    return max_list\n",
        "test": "assert max_sum_list([[2, 3, 4], [5, 6, 7], [8, 9, 10]]) == [8, 9, 10]",
        "num_ids": 1505,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n            \n    return max(max_run, current_run)\n",
        "test": "assert max_run_uppercase(\"\") == 0  # empty string has no uppercase characters",
        "num_ids": 1161,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5, 6, 7]) == 1",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K(((1, 2, 3), (4, 5, 6)), 7) == False",
        "num_ids": 844,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 1, 0)) == False",
        "num_ids": 978,
        "indeed": true
    }
]