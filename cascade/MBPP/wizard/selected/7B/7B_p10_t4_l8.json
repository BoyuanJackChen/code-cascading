[
    {
        "number": 2,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in test_tup1:\n        if i in test_tup2:\n            result.append(i)\n    return result\n",
        "test": "assert similar_elements((\"apple\", \"banana\", \"cherry\"), (\"banana\", \"cherry\", \"date\")) == [\"banana\", \"cherry\"]  # test case 1",
        "num_ids": 2235,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(4) == True # 4 is divisible by 2, a prime number",
        "num_ids": 1599,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappushpop(heap, num)\n    return sorted(heap, reverse=True)\n",
        "test": "assert heap_queue_largest([], 0) == [] # example 4",
        "num_ids": 3036,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 38,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Check if x is a power of two or not\n    if x <= 0 or (x & (x - 1)) != 0:\n        return False\n    \n    # Find the first bit position where the numbers differ\n    diff_bit = -1\n    while x != 0:\n        if (x & 1) != 0:\n            diff_bit = (x).bit_length() - 1\n            break\n        x >>= 1\n    \n    # Check if the numbers differ at only one bit position or not\n    if diff_bit == -1:\n        return False\n    else:\n        return True\n",
        "test": "assert is_Power_Of_Two(0) == False ",
        "num_ids": 1707,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words with at least 4 characters\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = re.findall(pattern, text)\n\n    # Return a list of all matches\n    return matches\n",
        "test": "assert find_char_long(\"\") == []  # edge case 1",
        "num_ids": 1803,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares\n",
        "test": "assert square_nums([1, 2, 3, 4]) == [1, 4, 9, 16] # input is [1, 2, 3, 4], output is [1, 4, 9, 16] ",
        "num_ids": 1725,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 20,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    if n <= 1:\n        return 0\n    \n    # Find the first repeated character\n    for i in range(n):\n        if str[i] == str[i % n]:\n            first_repeated_index = i\n            break\n    \n    # If the first repeated character is the last character, it means that the string is already rotated\n    if str[first_repeated_index] == str[first_repeated_index - n]:\n        return 1\n    \n    # Otherwise, the string needs to be rotated (at least) (n - first_repeated_index) times\n    count = n - first_repeated_index\n    count += 1  # Add 1 to account for the initial rotation\n    \n    # If the repeated character is not the first character, it means that we need to rotate the string once more\n    if first_repeated_index != 0:\n        count += 1\n    \n    return count\n",
        "test": "assert find_Rotations(\"\") == 0, \"Expected output: 0\"",
        "num_ids": 2473,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if ch not in s:\n        return s\n    else:\n        return s.replace(ch, '', 1).replace(ch, '', -1)\n",
        "test": "assert remove_Occ('', 'a') == ''",
        "num_ids": 2184,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    # Create a list of tuples, where each tuple contains the sum of a row and the row itself\n    row_sums = [(sum(row), row) for row in M]\n    \n    # Sort the list of tuples by the sum of rows in ascending order\n    sorted_rows = sorted(row_sums)\n    \n    # Create a new matrix with the rows sorted in ascending order by sum of rows\n    sorted_matrix = [[0]*cols for _ in range(rows)]\n    for i, row_sum in enumerate(sorted_rows):\n        sorted_matrix[i] = row_sum[1]\n    \n    return sorted_matrix\n",
        "test": "assert sort_matrix([[1]]) == [[1]]  # test case 3",
        "num_ids": 3274,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(2,3,4) != 5  # check that the volume is not equal to 5",
        "num_ids": 1545,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_lowercase_underscore(\"hello_world\"), \"Function should return True for 'hello_world'\"",
        "num_ids": 1679,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a\n",
        "test": "assert square_perimeter(3) == 12",
        "num_ids": 1203,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "",
        "test": "assert str_to_list(\"a\") == ['a']",
        "num_ids": 2273,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set from the array to remove duplicates\n    unique_nums = set(arraynums)\n    \n    # Check if the length of the unique set is equal to the length of the original array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1, 2, 3, 4, 5]) == False",
        "num_ids": 1975,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # Convert the input number to a string and reverse it\n    reverse_x = str(x)[::-1]\n    # Check if the reversed number is equal to the original number\n    return x == int(reverse_x)\n",
        "test": "assert is_woodall(23) == False  # Test if 23 is not a woodall number",
        "num_ids": 1871,
        "indeed": true
    },
    {
        "number": 56,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # converting the number to a string and reversing it\n    rev_num = int(str(num)[::-1])\n    # checking if the number is one less than twice its reverse\n    if num == rev_num*2-1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(123) == False",
        "num_ids": 2121,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def find_Max_Num(arr):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Convert each digit to a string and join them together\n    max_num_str = ''.join([str(num) for num in arr])\n\n    # Convert the string to an integer and return it\n    return int(max_num_str)\n",
        "test": "assert find_Max_Num([0, 0, 0, 0, 0]) == 0",
        "num_ids": 2757,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def opposite_Signs(x,y):\n    if x*y < 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(3, -5) == True  # positive and negative integers",
        "num_ids": 1335,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = (2 * n - 1) ** 2\n    return num\n",
        "test": "assert is_octagonal(1) == True",
        "num_ids": 1480,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = defaultdict(int)\n    res = 0\n\n    # Calculate the sum of digits of each substring\n    for i in range(n):\n        for j in range(i, n):\n            curr_sum = sum(int(digit) for digit in s[i:j+1])\n            count[curr_sum] += 1\n\n    # Count the number of substrings with the sum of digits equal to their length\n    for key in count:\n        if key == n-key:\n            res += count[key]\n\n    return res\n",
        "test": "assert count_Substrings(\"4567\") == 0, \"Error: count_Substrings('4567') should return 0\"",
        "num_ids": 2213,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "test": "assert smallest_num([1, 2, 3]) == 1",
        "num_ids": 1626,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([1, 1, 1, 1, 1]) == 0  # expected output: 0 (because the maximum difference is 0 if all numbers are equal)",
        "num_ids": 3133,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "test": "assert subject_marks([(1, 85), (2, 90), (3, 95), (4, 80), (5, 75)]) == [(5, 75), (4, 80), (1, 85), (2, 90), (3, 95)] ",
        "num_ids": 2169,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1832,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1474,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def bell_number(n):\n    # If n is less than 0, return None\n    if n < 0:\n        return None\n    # If n is 0 or 1, return 1\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        # Initialize the Bell number list\n        bell_numbers = [1, 1]\n        # Calculate the Bell numbers up to n\n        for i in range(2, n+1):\n            bell_numbers.append(0)\n            for j in range(i):\n                bell_numbers[i] += bell_numbers[j] * bell_numbers[i-j-1]\n        # Return the number of ways to partition the set of Bell numbers\n        return bell_numbers[-1]\n",
        "test": "assert bell_number(1) == 1",
        "num_ids": 2613,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 0 or n == 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, n):\n        if A[i] < A[i-1]:\n            increasing = False\n        elif A[i] > A[i-1]:\n            decreasing = False\n        if not increasing and not decreasing:\n            return False\n    return True\n",
        "test": "assert is_Monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]) == False",
        "num_ids": 2543,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if s[0] in l:\n        return is_sublist(l[l.index(s[0]):], s[1:])\n    else:\n        return is_sublist(l[1:], s)\n",
        "test": "assert is_sublist([1, 2, 3], [1, 2]) == True ",
        "num_ids": 2222,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return True\n    length = len(Input[0])\n    for tup in Input:\n        if len(tup) != length:\n            return False\n    return True",
        "test": "assert find_equal_tuple(()) == True",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using comb sort algorithm.\n    '''\n    n = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    gap = n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n    return nums\n",
        "test": "assert comb_sort([]) == [] ",
        "num_ids": 2776,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(1, n+1):\n        j = n - i\n        if i*i + j*j == n*n:\n            return True\n    return False\n",
        "test": "assert dif_Square(5) == True, \"Should be True\"",
        "num_ids": 1843,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 24,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Create a dictionary to map each color to its corresponding pattern\n    color_pattern_dict = {c: p for c, p in zip(colors, patterns)}\n    # Define a helper function to check whether a pattern matches the next pattern in the sequence\n    def is_next_pattern(pattern, next_pattern):\n        # If both patterns are the same, return True\n        if pattern == next_pattern:\n            return True\n        # Otherwise, check if the next pattern is the same color as the current pattern\n        elif next_pattern in color_pattern_dict and color_pattern_dict[next_pattern] == pattern:\n            return True\n        # If neither of the above conditions are met, return False\n        else:\n            return False\n    # Define a helper function to check whether the sequence of patterns follows the given pattern sequence\n    def check_sequence(patterns):\n        # Initialize the first pattern as the starting point\n        current_pattern = patterns[0]\n        # Iterate through the remaining patterns\n        for i in range(1, len(patterns)):\n            # Check whether the current pattern matches the next pattern in the sequence\n            if not is_next_pattern(current_pattern, patterns[i]):\n                return False\n            # Update the current pattern to the next pattern in the sequence\n            current_pattern = patterns[i]\n        # If all patterns match the sequence, return True\n        return True\n    # Call the helper function to check the pattern sequence\n    return check_sequence(patterns)\n",
        "test": "assert is_samepatterns(['red', 'blue', 'green'], ['a', 'b', 'a']) == False",
        "num_ids": 2782,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result\n",
        "test": "assert find_tuples([(1,2,3), (4,5,6), (7,8,9)], 3) == []",
        "num_ids": 3017,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(33) # True",
        "num_ids": 1275,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 20,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len(\"world\") == True  # test case 2",
        "num_ids": 1214,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    \n    # Formula to calculate the nth tetrahedral number\n    tetra_num = (n * (n + 1) * (n + 2)) // 6\n    \n    return tetra_num\n",
        "test": "assert tetrahedral_number(1) == 1, \"Function returns incorrect value for input 1\"",
        "num_ids": 1673,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n",
        "test": "assert volume_sphere(0) == 0, \"Incorrect volume_sphere(0)\"",
        "num_ids": 1903,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total_ascii = sum(ord(char) for char in strr) % 26\n    return chr(total_ascii + 97) # 97 is the ASCII value of 'a'\n",
        "test": "assert get_Char(\"hello\") == \"m\"",
        "num_ids": 1810,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sequence(n):\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [None] * (n + 1)\n        sequence[1] = 1\n        sequence[2] = 1\n        \n        for i in range(3, n + 1):\n            sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n        \n        return sequence[n]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 1710,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi, \"Error: surface area of sphere with radius 1 is incorrect\"",
        "num_ids": 1840,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1, \"Test case 1 failed\"",
        "num_ids": 3065,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    result = dict1.copy()  # start with a copy of the first dictionary\n    result.update(dict2)  # add the second dictionary\n    result.update(dict3)  # add the third dictionary\n    return result\n",
        "test": "assert merge_dictionaries_three({\"a\": 1, \"b\": 2}, {\"c\": 3, \"d\": 4}, {\"e\": 5, \"f\": 6}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6} ",
        "num_ids": 2714,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return dict(freq)",
        "test": "assert freq_count([1, 2, 3, 2, 1, 3, 2, 1, 3]) == {1: 3, 2: 3, 3: 3}, \"The function freq_count is not working correctly\"",
        "num_ids": 2381,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 37,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    closest_num = N - 1\n    if closest_num < 0:\n        return None\n    return closest_num\n",
        "test": "assert closest_num(10) == 9 ",
        "num_ids": 1366,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def len_log(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log([]) == 0 # test empty list",
        "num_ids": 1518,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring(\"hello world\", \" \") == True",
        "num_ids": 1286,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 25,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    digits = [int(d) for d in str(n)]\n    \n    if len(digits) < 3:\n        return False\n    \n    for i in range(1, len(digits)-1):\n        if digits[i] > digits[i-1] and digits[i] > digits[i+1]:\n            return False\n        elif digits[i] < digits[i-1] and digits[i] < digits[i+1]:\n            return False\n    \n    return True\n",
        "test": "assert is_undulating(1234567) == True # Example: 1234567 is an undulating number",
        "num_ids": 2078,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a ** b\n    return result\n",
        "test": "assert power(2,2) == 4",
        "num_ids": 1288,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value in descending order\n    sorted_list = sorted(test_list, key=itemgetter(1), reverse=True)\n    \n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(10, 2), (10, 1), (10, 3), (10, 4), (10, 5)]) == 10",
        "num_ids": 2533,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for l in lst:\n        min_length = min(min_length, len(l))\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2], [3,4,5], [6], [7,8,9,10]]) == 1 # example 2",
        "num_ids": 2145,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1",
        "num_ids": 1425,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j in freq_dict:\n                    freq_dict[j] += 1\n                else:\n                    freq_dict[j] = 1\n        else:\n            if i in freq_dict:\n                freq_dict[i] += 1\n            else:\n                freq_dict[i] = 1\n    return freq_dict\n",
        "test": "assert frequency_lists([]) == {} ",
        "num_ids": 3235,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "test": "assert multiply_num([0, 0, 0]) == 0.0",
        "num_ids": 1613,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary or '0'\n",
        "test": "assert decimal_to_binary(0) == \"0\"",
        "num_ids": 1522,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def next_smallest_palindrome(num):\n    # convert the number to a string and reverse it\n    num_str = str(num)\n    reverse_str = num_str[::-1]\n\n    # if the number is already a palindrome, add 1 to the rightmost digit\n    if num_str == reverse_str:\n        # find the rightmost digit that is not a 9\n        for i in range(len(num_str) - 1, -1, -1):\n            if num_str[i] != '9':\n                num_str = num_str[:i] + str(int(num_str[i]) + 1) + '0' * (len(num_str) - i - 1)\n                break\n        else:\n            # if all digits are 9, we need to add two digits to the left\n            num_str = '1' + '0' * (len(num_str) - 1) + str(int(num_str[0]) + 1)\n\n    # otherwise, add the rightmost half of the reversed number to the original number\n    else:\n        # find the length of the right half of the reversed number\n        right_half_len = len(reverse_str) // 2\n\n        # add the right half of the reversed number to the left half of the original number\n        for i in range(right_half_len):\n            num_str = num_str[:i] + str(int(num_str[i]) + int(reverse_str[right_half_len + i])) + num_str[i + 1:]\n\n    return int(num_str)\n",
        "test": "assert next_smallest_palindrome(12) == 22",
        "num_ids": 4677,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    else:\n        return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1  # check if it returns the smallest element when k=1",
        "num_ids": 1726,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    # Split the word by underscore and join the first word and the rest with capitalized first letter\n    return word.split('_')[0] + ''.join(word.title().split('_')[1:])\n",
        "test": "assert snake_to_camel('') == ''",
        "num_ids": 1654,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = 0\n    sum_num = 0\n    \n    # Calculate the sum of the n first integers\n    for i in range(1, n+1):\n        sum_num += i\n    \n    # Calculate the sum of the m first integers\n    for j in range(1, m+1):\n        sum_num += j\n    \n    # Calculate the difference between the two sums\n    a = abs(sum_num - (n+m+1))\n    \n    return a\n",
        "test": "assert eulerian_num(0, 0) == 1 # n = 0, m = 0",
        "num_ids": 2686,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"grape\", \"orange\", \"strawberry\"]]) == [[\"apple\", \"banana\", \"cherry\"], [\"grape\", \"orange\", \"strawberry\"]] ",
        "num_ids": 3153,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False, False]) == 2 ",
        "num_ids": 911,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list += list(test_tup)\n    return test_list\n",
        "test": "assert add_lists([], ()) == [] ",
        "num_ids": 2288,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 30,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(merged_list)\n\n    for num in num1:\n        heapq.heappush(merged_list, num)\n\n    for num in num2:\n        heapq.heappush(merged_list, num)\n\n    for num in num3:\n        heapq.heappush(merged_list, num)\n\n    return sorted(merged_list)\n",
        "test": "assert merge_sorted_list([1,3,5],[6,7,8],[9,10,11]) != [1,2,3,4,5,6,7,8,9,10,11,12] ",
        "num_ids": 4594,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the string to a list of binary digits\n    binary_list = [int(x) for x in s]\n    \n    # Rotate the binary list n times\n    rotated_list = binary_list[-n:] + binary_list[:-n]\n    \n    # Count the number of odd digits in the rotated list\n    count = sum([1 for digit in rotated_list if digit % 2 == 1])\n    \n    return count\n",
        "test": "assert odd_Equivalent(\"1011\", 2) == 3  # Should return 3",
        "num_ids": 2367,
        "indeed": true
    },
    {
        "number": 111,
        "max_answer_num": 21,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common = common.intersection(set(lst))\n    return list(common)\n",
        "test": "assert common_in_nested_lists([[1, 1], [1, 1], [1, 1]]) == [1]",
        "num_ids": 2571,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 991,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 37,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    for dic in list1:\n        if dic != {}:\n            return False\n    \n    return True\n",
        "test": "assert empty_dit([{}]) == True",
        "num_ids": 1327,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_to_int(nums):\n    # Convert the tuple of integers into a string\n    nums_str = ''.join(map(str, nums))\n    # Convert the string into an integer\n    nums_int = int(nums_str)\n    return nums_int\n",
        "test": "assert tuple_to_int((0, 0, 0, 0, 0)) == 0",
        "num_ids": 1976,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list",
        "test": "assert list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]",
        "num_ids": 3901,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string using space character as delimiter\n    words = string.split()\n    # convert the list of words to a list of strings\n    string_list = list(map(str, words))\n    return string_list\n",
        "test": "assert string_to_list('this is a test string') == ['this', 'is', 'a', 'test', 'string']",
        "num_ids": 1484,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    if arr[0] != arr[1]:\n        return arr[0]\n    \n    if arr[n-2] != arr[n-1]:\n        return arr[n-1]\n    \n    for i in range(2, n-1):\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\n            return arr[i]",
        "test": "assert search([1, 2, 3, 4, 5, 6, 6, 6]) == 1  # test for sorted array with 3 elements appearing only once",
        "num_ids": 3225,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for tup in list1:\n        if len(tup) == 2:\n            product = abs(tup[0]) * abs(tup[1])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1,0),(-1,0)]) == 0",
        "num_ids": 2485,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Function to find the proper divisors of a number\n    def find_proper_divisors(n):\n        divisors = [1]\n        for i in range(2, n // 2 + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    # Function to find the sum of proper divisors of a number\n    def sum_proper_divisors(n):\n        divisors = find_proper_divisors(n)\n        return sum(divisors)\n\n    # Function to find the amicable numbers\n    def find_amicable_numbers(limit):\n        amicable_numbers = []\n        for i in range(1, limit + 1):\n            j = sum_proper_divisors(i)\n            if i != j and i == sum_proper_divisors(j):\n                amicable_numbers.append(i)\n        return amicable_numbers\n\n    # Call the function to find the amicable numbers and sum them up\n    amicable_numbers = find_amicable_numbers(limit)\n    return sum(amicable_numbers)\n",
        "test": "assert amicable_numbers_sum(10) == 121  # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 are amicable numbers and their sum is 121 ",
        "num_ids": 3523,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = complex(a,b)\n    return cmath.phase(z)\n",
        "test": "assert angle_complex(1, 1) == 0.7853981633974483, \"Incorrect angle\"",
        "num_ids": 1460,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def find_length(string):\n    max_diff = 0\n    count0 = 0\n    count1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        if count0 > 0 and count1 > 0:\n            max_diff = max(max_diff, abs(count0-count1))\n    return max_diff\n",
        "test": "assert find_length(\"1101\") == 2",
        "num_ids": 5286,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors_a = set(get_divisors(a))\n    divisors_b = set(get_divisors(b))\n    return sum(divisors_a.intersection(divisors_b))\n\n\ndef get_divisors(n):\n    \"\"\"\n    Returns a list of all divisors of a given number n.\n    \"\"\"\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n",
        "test": "assert sum(7, 14) == 21, \"sum function not working for (7, 14)\"",
        "num_ids": 2409,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result",
        "test": "assert multiply_int(5, 7) == 35 ",
        "num_ids": 1165,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def long_words(n, words):\n    '''\n    Find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words",
        "test": "assert long_words(10, \"abcdefghijklmnopqrstuvwxyz\") == [] ",
        "num_ids": 1948,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def magic_square_test(my_matrix):\n    # Get the dimensions of the matrix\n    n = len(my_matrix)\n    # Calculate the sum of the first row and the first column\n    row_sum = sum(my_matrix[0])\n    col_sum = sum([my_matrix[i][0] for i in range(n)])\n    # Calculate the sum of the diagonals\n    diag1_sum = sum([my_matrix[i][i] for i in range(n)])\n    diag2_sum = sum([my_matrix[i][n-1-i] for i in range(n)])\n    # Check if the sum of the matrix is the same for all rows, columns, and diagonals\n    if all([sum(row) == row_sum for row in my_matrix]) and \\\n       all([sum(my_matrix[i]) == col_sum for i in range(n)]) and \\\n       diag1_sum == col_sum and diag2_sum == col_sum:\n        return True\n    else:\n        return False\n",
        "test": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False ",
        "num_ids": 4021,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in count_dict.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    return max_num\n",
        "test": "assert max_occurrences([1, 2, 3, 2, 4, 3, 5, 2]) == 2 ",
        "num_ids": 2262,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 20,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    i, j = 0, len(str1) - 1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1 = str1[:i] + str1[j] + str1[i+1:j] + str1[i] + str1[j+1:]\n            i += 1\n            j -= 1\n    return str1\n",
        "test": "assert reverse_vowels(\"aeiou\") == \"uoiea\"",
        "num_ids": 2564,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Create an empty string variable\n    str1 = \"\"\n    # Iterate over the tuple elements\n    for i in range(len(tup1)):\n        # Append each element to the string variable\n        str1 += str(tup1[i])\n        # Add a comma and space if it's not the last element\n        if i != len(tup1) - 1:\n            str1 += \", \"\n    # Return the resulting string\n    return str1\n",
        "test": "assert tup_string(()) == \"\" # example of an empty tuple, should return \"\" ",
        "num_ids": 1836,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total_sum = 0\n    for num in nums:\n        if num < 0:\n            total_sum += num\n    return total_sum\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1977,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 25,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2*n - 1)",
        "test": "assert hexagonal_num(1) == 1, \"Incorrect for n = 1\"",
        "num_ids": 1622,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n",
        "test": "assert zero_count([1, 1, 1, 1, 1, 1]) == 0",
        "num_ids": 2337,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 33,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if n is negative or zero, return False if it is\n    if n <= 0:\n        return False\n    \n    # Initialize a variable to store the number of binary digits in n\n    num_digits = len(bin(n)[2:])\n    \n    # Initialize a variable to store the sum of powers of 2\n    sum_of_powers = 0\n    \n    # Loop through each binary digit in n\n    for i in range(num_digits):\n        # Check if the current binary digit is 1\n        if n & (1 << i):\n            # Calculate the corresponding power of 2 and add it to the sum\n            power_of_two = 2 ** i\n            sum_of_powers += power_of_two\n    \n    # If n can be represented as sum of powers of 2, return True, else return False\n    return n == sum_of_powers\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 3103,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n",
        "test": "assert circle_circumference(0) == 0, \"Incorrect circumference for radius 0\"",
        "num_ids": 1788,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)\n",
        "test": "assert extract_singly([[1, 2], [3, 4], [5]]) == {1, 2, 3, 4, 5} ",
        "num_ids": 2487,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # Find the maximum number in the unsorted segment\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        \n        # Swap the maximum number to the beginning of the unsorted segment\n        if max_index != 0:\n            nums[:max_index+1] = reversed(nums[:max_index+1])\n        \n        # Reverse the entire unsorted segment\n        nums[:n] = reversed(nums[:n])\n        \n        n -= 1\n    \n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 3673,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[2,3,4],[3,4,0]) == 0 # Check that the function returns 0 for the given lists",
        "num_ids": 2122,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists((1, 2, 3, 4)) == 0 ",
        "num_ids": 1450,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    max_diff = arr[-1] - arr[0]\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([-5, -5, -5, -5, -5]) == 0",
        "num_ids": 2412,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def find_solution(a, b, n):\n    # Check if a is zero\n    if a == 0:\n        # Check if b is zero\n        if b == 0:\n            # Check if n is zero\n            if n == 0:\n                # Return a valid solution\n                return (0, 0)\n            else:\n                # No solution exists\n                return None\n        else:\n            # Check if n is divisible by b\n            if n % b == 0:\n                # Return a valid solution\n                return (0, n // b)\n            else:\n                # No solution exists\n                return None\n    else:\n        # Check if b is zero\n        if b == 0:\n            # Check if n is zero\n            if n == 0:\n                # Return a valid solution\n                return (0, 0)\n            else:\n                # No solution exists\n                return None\n        else:\n            # Compute the greatest common divisor of a and b\n            def gcd(a, b):\n                while b:\n                    a, b = b, a % b\n                return a\n            gcd_ab = gcd(a, b)\n\n            # Check if gcd(a, b) divides n\n            if n % gcd_ab == 0:\n                # Compute the least common multiple of a and b\n                def lcm(a, b):\n                    return abs(a * b) // gcd(a, b)\n                lcm_ab = lcm(a, b)\n\n                # Compute the quotient and remainder of n / lcm(a, b)\n                q, r = divmod(n, lcm_ab)\n\n                # Check if r is zero\n                if r == 0:\n                    # Return a valid solution\n                    return (q, 0)\n                else:\n                    # Compute the least common multiple of r and b\n                    lcm_rb = lcm(r, b)\n\n                    # Compute the quotient and remainder of r / lcm(r, b)\n                    q_r, r_r = divmod(r, lcm_rb)\n\n                    # Return a valid solution\n                    return (q, q_r * b + r_r)\n            else:\n                # No solution exists\n                return None ",
        "test": "assert find_solution(1, 1, 0) == (0, 0)",
        "num_ids": 3585,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(set(list1) - set(list2))\n    return list1\n",
        "test": "assert remove_elements([1, 2, 3], [4, 5]) == [1, 2, 3]",
        "num_ids": 2299,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while n - (2 * i) > 0:\n        total += n - (2 * i)\n        i += 1\n    return total\n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 1589,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 360,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the angle of each side\n    angle = 360 / s\n    # calculate the length of the diagonal\n    diagonal = l / tan(pi / s)\n    # calculate the area\n    area = (s * diagonal) / 2\n    return area",
        "test": "assert area_polygon(8, 4) == 25.5 # a regular hexagon with side length 1 has an area of 25.5",
        "num_ids": 2836,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def div_sum(n):\n    def sum_divisors(num):\n        sum_div = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                sum_div += i\n        return sum_div\n\n    num1 = n\n    num2 = sum_divisors(n)\n\n    return num1 == num2\n",
        "test": "assert div_sum(221) == False",
        "num_ids": 2696,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # initialize a dictionary to store the count of characters at each position\n    count_dict = {i: 0 for i in range(26)}\n\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is an alphabet\n        if char.isalpha():\n            # add 1 to the count at the position of the character in the English alphabet\n            count_dict[ord(char) - 97] += 1\n\n    # initialize the count variable\n    count = 0\n\n    # loop through each value in the dictionary and increment the count if the value is greater than 0\n    for value in count_dict.values():\n        if value > 0:\n            count += 1\n\n    return count\n",
        "test": "assert count_char_position(\"\") == 0",
        "num_ids": 2950,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([0,2,4,6,8]) == 10",
        "num_ids": 1838,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Find the smallest power of 2 greater than n\n    p = 1\n    while p <= n:\n        p *= 2\n    \n    return p\n",
        "test": "assert next_power_of_2(3) == 4",
        "num_ids": 1338,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5], 2) == 1 ",
        "num_ids": 1769,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Invalid range\"\n    else:\n        return sum(list1[m:n+1])\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9     # test case 1",
        "num_ids": 2593,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "test": "assert perimeter_pentagon(3) == 15 ",
        "num_ids": 1594,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance(\"This is a string\") == 0",
        "num_ids": 1705,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the data type of the first element in the tuple\n    dtype = type(test_tuple[0])\n    \n    # Check if all the elements have the same data type as the first element\n    for elem in test_tuple:\n        if type(elem) != dtype:\n            return False\n    \n    # If all the elements have the same data type, return True\n    return True\n",
        "test": "assert check_type((1,2,3)) == True # Test case 2",
        "num_ids": 1921,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    '''\n    count = 0\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n        if arr[i] > x:\n            break\n        i += 1\n    return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5, 6, 7, 8, 9], 9, 6) == False",
        "num_ids": 2675,
        "indeed": true
    },
    {
        "number": 224,
        "max_answer_num": 39,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0b0) == 0",
        "num_ids": 1320,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "test": "assert odd_values_string(\"\") == \"\" # test case 4",
        "num_ids": 1730,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1,2,3) == 1",
        "num_ids": 1699,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i)[2:].count('1') > 0:\n            return False\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10, 1, 10) == False",
        "num_ids": 2351,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # create a new array to hold the re-arranged elements\n    new_arr = []\n\n    # loop through the array and add negative elements to the new array first, and then positive elements\n    for i in arr:\n        if i < 0:\n            new_arr.append(i)\n\n    for i in arr:\n        if i >= 0:\n            new_arr.append(i)\n\n    # return the new array\n    return new_arr\n",
        "test": "assert re_arrange_array([-1, -2, -3, -4, -5], 5) == [-1, -2, -3, -4, -5]",
        "num_ids": 3670,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)\n",
        "test": "assert replace_blank(\"This is a test\", \" \") # replace all blank spaces with \" \"",
        "num_ids": 1359,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert larg_nnum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [10, 9, 8]  # testing with a list of numbers and n=3",
        "num_ids": 2728,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Calculate the lateral surface area using the formula: 2 * pi * r * h\n    lateral_surface_area = 2 * math.pi * r * h\n    \n    return lateral_surface_area\n",
        "test": "assert lateralsuface_cylinder(1,2) == 12.566370614359172, \"Testing with r=1, h=2\"",
        "num_ids": 2051,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "test": "assert volume_cube(2) == 8, \"The volume of a cube with side length 2 is not 8\"",
        "num_ids": 1448,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n    \n    # Iterate over all bits of n\n    for i in range(32):\n        # If the i-th bit of n is set, set the i-th bit of the result\n        if (n & (1 << i)) != 0:\n            result |= (1 << i)\n    \n    return result\n",
        "test": "assert even_bit_set_number(1) == 1, \"Test 4 failed\"",
        "num_ids": 2544,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)",
        "test": "assert check_occurences([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == {('a', 1): 1, ('b', 2): 1, ('c', 3): 1, ('d', 4): 1} ",
        "num_ids": 4096,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_of_substrings(s):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize count to 0\n    count = 0\n    \n    # Iterate through the string\n    for i in range(len(s)):\n        # For each character, generate all possible substrings\n        for j in range(i, len(s)):\n            # If the substring is not empty, increment the count\n            if s[i:j+1] != \"\":\n                count += 1\n                \n    return count",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 1740,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    elif m <= 2:\n        return 0\n    else:\n        return (m-1) * (m-2) // 2 + get_total_number_of_sequences(m, n-1)\n",
        "test": "assert get_total_number_of_sequences(4, 2) == 4  # 1, 2, 3, 4",
        "num_ids": 2672,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 16,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        print(\"Error: The second list is longer than the first list.\")\n        return list1\n    else:\n        list1[-1:] = list2\n        return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 4, 5, 6]  # test case 1",
        "num_ids": 2044,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello\") == 5  # Checks if the function correctly counts the total number of characters in the string \"hello\".",
        "num_ids": 1355,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Check if N is a perfect square\n    if math.sqrt(N).is_integer():\n        # If N is a perfect square, return the next perfect square\n        return N + 1\n    else:\n        # If N is not a perfect square, find the square root of N\n        sqrt_N = math.sqrt(N)\n        # Round up the square root to the nearest integer\n        next_int = math.ceil(sqrt_N)\n        # Return the square of the next integer\n        return next_int ** 2",
        "test": "assert next_Perfect_Square(3) == 4",
        "num_ids": 1947,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def max_sum(arr):\n    '''\n    Find the maximum sum of a bitonic subsequence for the given array.\n    '''\n    n = len(arr)\n    # Initialize an array to store the maximum sum for each index.\n    # The maximum sum for the first index is just the value of the first element.\n    max_sum = [arr[0]]\n    # Initialize a variable to store the maximum increasing subsequence sum.\n    max_inc_sum = arr[0]\n    for i in range(1, n):\n        # If the current element is greater than the previous maximum sum,\n        # update the maximum sum for the current index to be the sum of the current element\n        # and the maximum increasing subsequence sum.\n        if arr[i] > max_sum[i-1]:\n            max_sum.append(max_sum[i-1] + arr[i])\n        # If the current element is less than or equal to the previous maximum sum,\n        # update the maximum sum for the current index to be the maximum increasing subsequence sum.\n        else:\n            max_sum.append(max_inc_sum)\n        # Update the maximum increasing subsequence sum if the current element is greater than the previous maximum sum.\n        if arr[i] > max_inc_sum:\n            max_inc_sum = arr[i]\n    # Return the maximum sum for the last index.\n    return max_sum[-1]\n",
        "test": "assert max_sum([1]) == 1  # single element subsequence",
        "num_ids": 3557,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 1e-10  # tolerance for convergence\n    x = number / 2  # initial guess\n    while abs(x**2 - number) > epsilon:\n        x = (x + number / x) / 2\n    return x",
        "test": "assert babylonian_squareroot(4) == 2, \"Test case 1 failed\"",
        "num_ids": 2042,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "test": "assert lps(\"BBABCBCAB\") == 7  # Test case 1",
        "num_ids": 2768,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 22,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 1/n + harmonic_sum(n-1)\n",
        "test": "assert harmonic_sum(1) == 1, \"Error in function for n=1\"",
        "num_ids": 1618,
        "indeed": true
    },
    {
        "number": 249,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    # Find the intersection of two arrays\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection",
        "test": "assert intersection_array([1,2,3], [2,3,4]) == [2,3] # example 1",
        "num_ids": 2214,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((), \"a\") == 0",
        "num_ids": 1969,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Inserts the given element before each element in the given list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([1], 0) == [0, 1]  # insert 0 before a single element list",
        "num_ids": 1900,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        magnitude = cmath.sqrt(number.real**2 + number.imag**2)\n        phase = cmath.phase(number)\n        print(f\"{number} = {magnitude} * e^(i*{phase})\")",
        "test": "assert convert(-2-3j) == (5, 3.7416573867739413)",
        "num_ids": 2210,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5 ",
        "num_ids": 1503,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([\"red\", \"blue\", \"green\"], 3) == [(\"red\", \"red\", \"red\"), (\"red\", \"red\", \"blue\"), (\"red\", \"red\", \"green\"), (\"red\", \"blue\", \"blue\"), (\"red\", \"blue\", \"green\"), (\"red\", \"green\", \"green\"), (\"blue\", \"blue\", \"blue\"), (\"blue\", \"blue\", \"green\"), (\"blue\", \"green\", \"green\"), (\"green\", \"green\", \"green\")]",
        "num_ids": 6557,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def count_Primes_nums(n):\n    # initialize a counter for prime numbers\n    count = 0\n    # iterate over the numbers from 2 to n\n    for i in range(2, n):\n        # assume the number is prime\n        is_prime = True\n        # check if the number is divisible by any number from 2 to the square root of i\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # if the number is prime, increment the counter\n        if is_prime:\n            count += 1\n    # return the final count of prime numbers\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4 # there are 4 prime numbers less than 10: 2, 3, 5, and 7. ",
        "num_ids": 3124,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def swap_numbers(a, b):\n    return (b, a)\n",
        "test": "assert swap_numbers(5, 10) == (10, 5) ",
        "num_ids": 1197,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 31,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 2682,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def newman_shanks_williams(p, q):\n        if p == 0:\n            return q\n        if is_prime(q) and q % 2 == 1 and is_prime(2*q+1):\n            return newman_shanks_williams(p-1, 2*q+1)\n        else:\n            return None\n    \n    def generate_primes(limit):\n        primes = []\n        for i in range(2, limit+1):\n            if is_prime(i):\n                primes.append(i)\n        return primes\n    \n    primes = generate_primes(n*100)\n    for i in range(n):\n        p = newman_shanks_williams(i, primes[i])\n        if p:\n            return p\n    return None\n",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 4178,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tuple = ()\n    for i in range(len(test_tup1)):\n        result_tuple += (test_tup1[i]/test_tup2[i],)\n    return result_tuple\n",
        "test": "assert division_elements((1, 2, 3), (1, 2, 3)) == (1, 1, 1)",
        "num_ids": 2767,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n",
        "test": "assert split_two_parts([1,2,3,4,5], 3) == ([1,2,3], [4,5])",
        "num_ids": 2759,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def dog_age(human_age):\n    '''\n    Calculate a dog's age in dog years.\n    '''\n    dog_age = human_age / 7.5\n    return dog_age",
        "test": "assert dog_age(0) == 0",
        "num_ids": 1502,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n",
        "test": "assert list_split([1,2,3,4,5,6], 2) == [[1,2],[3,4],[5,6]]",
        "num_ids": 2846,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n",
        "test": "assert lateralsurface_cube(1) == 6",
        "num_ids": 1475,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    # Initialize the sum to zero\n    sum = 0\n    # Loop over the first n odd natural numbers\n    for i in range(1, 2*n, 2):\n        # Add the square of the number to the sum\n        sum += i**2\n    # Return the sum\n    return sum\n",
        "test": "assert square_Sum(1) == 1, \"The first odd natural number is 1\"",
        "num_ids": 1690,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    \"\"\"\n    # Initialize variables\n    total_stars = 0\n    star_number = 0\n    \n    # Loop over all possible star numbers\n    while star_number < n:\n        # Calculate the number of stars for this iteration\n        total_stars += 1\n        \n        # Check if this is the n'th star number\n        if total_stars == n:\n            return total_stars\n",
        "test": "assert find_star_num(1) == 1, \"Error: find_star_num(1) should return 1\"",
        "num_ids": 2758,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('A') == 65 # check the ascii value of 'A'",
        "num_ids": 1352,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_even_and_even_index(arr):\n    # initialize sum to 0\n    even_sum = 0\n    \n    # iterate through the list with index i\n    for i in range(len(arr)):\n        # check if the index is even and the value is even\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            # add the value to the sum\n            even_sum += arr[i]\n    \n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0, \"Error in sum_even_and_even_index\"",
        "num_ids": 2341,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 5\n    return total\n",
        "test": "assert even_Power_Sum(40) == 128472975 ",
        "num_ids": 1898,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n",
        "test": "assert rear_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]",
        "num_ids": 2196,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tuple = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n    return result_tuple",
        "test": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)",
        "num_ids": 2638,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial = 0\n    for k in range(0, int(n/2) + 1, 2):\n        coeff = math.comb(n, k)\n        sum_even_binomial += coeff\n    return sum_even_binomial",
        "test": "assert even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 2186,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r * r * h\n    return volume\n",
        "test": "assert volume_cylinder(0, 10) == 0, \"The volume should be 0 for radius 0 and any height\"",
        "num_ids": 2079,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({'a': 5, 'b': 7, 'c': 2}, 5) == {'a': 5, 'b': 7}",
        "num_ids": 2720,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count += 1\n    return count",
        "test": "assert count_first_elements(()) == 0",
        "num_ids": 1832,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_number = n*(2*n-1)\n    return decagonal_number\n",
        "test": "assert is_num_decagonal(1) == 1 # n=1, decagonal number is 1",
        "num_ids": 1587,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and element and returns a tuple containing a boolean that\n    indicates if the element is in the array and the index position of the element\n    (or -1 if the element is not found).\n    \"\"\"\n\n    # Loop through each element in the array\n    for i in range(len(dlist)):\n        # Check if the current element matches the target element\n        if dlist[i] == item:\n            # If a match is found, return a tuple containing True and the index position\n            return (True, i)\n\n    # If the loop finishes without finding a match, return a tuple containing False and -1\n    return (False, -1)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 2091,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert not all_unique([1, 2, 3, 4, 5, 1]), \"Should be False\"",
        "num_ids": 1646,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([4,6,8],[2,4,6]) == [2,2,2], \"Test 2: Element-wise subtraction is incorrect.\" ",
        "num_ids": 2210,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(10):\n        if digits.count(i) > i:\n            return False\n    return True\n",
        "test": "assert validate(123) == True",
        "num_ids": 2570,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_element(lst, element):\n    return all(x == element for x in lst)\n",
        "test": "assert not check_element([1,2,3], 1) # Should return False",
        "num_ids": 1426,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    match = pattern.search(text)\n    return bool(match)\n",
        "test": "assert text_match_two_three('abb') == True",
        "num_ids": 1448,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Calculate the length of the modified array\n    mod_len = n * k\n\n    # Initialize the modified array\n    mod_array = [0] * mod_len\n\n    # Fill the modified array with the repeated elements\n    for i in range(n):\n        for j in range(k):\n            mod_array[i + j * n] = a[i]\n\n    # Calculate the maximum subarray sum using Kadane's algorithm\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in mod_array:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum ",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -5, -6], 6, 2) == -1",
        "num_ids": 4181,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n*2, 2):\n        sum += i*i\n    return sum\n",
        "test": "assert square_Sum(0) == 0 ",
        "num_ids": 1971,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def max_length(lst):\n    max_length = 0\n    max_lists = []\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_lists = [sublist]\n        elif len(sublist) == max_length:\n            max_lists.append(sublist)\n    return max_lists\n",
        "test": "assert max_length([[1,2],[3,4,5],[6]]) == 3 ",
        "num_ids": 2516,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Find the number of ways to paint the fence such that at most 2 adjacent posts have the same color.\n    \"\"\"\n    # Create a list to store the number of ways to paint each fence segment\n    ways = [0] * n\n    \n    # Base case: if there's only one post, it can be painted with any color\n    ways[0] = k\n    \n    # For the remaining fence segments, we can paint them in two ways:\n    # 1. Keep the color same as the adjacent post (same as the previous segment)\n    # 2. Change the color to a different one\n    for i in range(1, n):\n        # Keep the color same as the adjacent post (same as the previous segment)\n        ways[i] += ways[i-1]\n        \n        # Change the color to a different one\n        if i > 1:\n            ways[i] += ways[i-2]\n    \n    return ways[n-1]",
        "test": "assert count_no_of_ways(1, 1) == 1",
        "num_ids": 4548,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n",
        "test": "assert find(10, 3) == 3  # Check if find(10, 3) returns 3",
        "num_ids": 1056,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Check that the input values make sense\n    if w <= 0 or h <= 0:\n        raise ValueError(\"Both sides must be positive numbers.\")\n    \n    # Use the Pythagorean theorem to find the third side\n    a = w\n    b = h\n    c = math.sqrt(a**2 + b**2)\n    return c\n",
        "test": "assert otherside_rightangle(3,4) == 5  # for a right angled triangle with sides 3 and 4, the third side is 5",
        "num_ids": 1890,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for val in listval:\n        if type(val) == int:\n            if val > max_val:\n                max_val = val\n        elif type(val) == float:\n            if val > max_val:\n                max_val = val\n        elif type(val) == str:\n            continue\n        else:\n            print(\"Warning: Unknown data type in the list.\")\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 1848,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisor = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisor += i\n    return sum_divisor\n",
        "test": "assert sum_div(1) == 1",
        "num_ids": 1872,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 2930,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n",
        "test": "assert flatten_list([1, [2, 3], [4, [5, 6], 7], 8]) == [1, 2, 3, 4, 5, 6, 7, 8] ",
        "num_ids": 2721,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize the max_aggregate variable to 0\n    max_agg = 0\n\n    # Create a dictionary to store the aggregate for each store\n    agg_dict = defaultdict(int)\n\n    # Iterate through each tuple in the input list\n    for tup in stdata:\n        # Extract the store and sales data from the tuple\n        store, sales = tup\n\n        # Add the sales amount to the aggregate for the store\n        agg_dict[store] += sales\n\n        # Check if the aggregate for the store is greater than the current max_agg\n        if agg_dict[store] > max_agg:\n            # If so, update the max_agg variable to the new aggregate\n            max_agg = agg_dict[store]\n\n    # Return the max_agg variable as the output of the function\n    return max_agg\n",
        "test": "assert max_aggregate([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5)]) == 5",
        "num_ids": 3291,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        count = 0\n        for i in range(n):\n            count += count_binary_seq(n-1)\n        return count\n",
        "test": "assert count_binary_seq(1) == 1 ",
        "num_ids": 2785,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(dict_depth(d[key]) + 1, depth)\n    return depth\n",
        "test": "assert dict_depth({'a': 1}) == 1",
        "num_ids": 1829,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            index += rotations[i]\n    return arr[index % len(arr)]\n",
        "test": "assert find_Element([1,2,3,4,5,6,7,8,9], [2,5,8], [2,4,3], 0) == 1, \"Incorrect result\"",
        "num_ids": 3585,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "import re\n\ndef start_withp(words):\n    # Use regular expression to match words starting with 'p'\n    pattern = re.compile(r'p\\w+')\n    p_words = []\n    for word in words:\n        if pattern.match(word):\n            p_words.append(word)\n    \n    # Return the first two words if available, otherwise empty list\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return []\n",
        "test": "assert start_withp(['python', 'java', 'javascript', 'python3']) == ['python', 'python3']",
        "num_ids": 1784,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    # Initialize a list to store the prefix sum\n    prefix_sum = [0] * (n+1)\n    \n    # Calculate the prefix sum for the given array\n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + a[i]\n    \n    # Initialize the dp list for dynamic programming\n    dp = [0] * (n+1)\n    \n    # Set the initial values for the dp list\n    dp[0] = 0\n    dp[1] = a[0]\n    \n    # Iterate over the remaining elements of the array\n    for i in range(2, n+1):\n        # Check if the current element is greater than the previous element\n        if a[i-1] > a[i-2]:\n            # Set the dp value to the maximum of previous dp value and adding the current element\n            dp[i] = max(dp[i-1], dp[i-2] + a[i-1])\n        else:\n            # Set the dp value to the previous dp value\n            dp[i] = dp[i-1]\n            \n    # Initialize the maximum sum to -infinity\n    max_sum = float('-inf')\n    \n    # Iterate over the dp list to find the maximum sum including kth element\n    for i in range(k+1, n+1):\n        # Calculate the maximum sum including the i-th element and k-th element\n        max_sum = max(max_sum, dp[i] + prefix_sum[k+1] - prefix_sum[i])\n    \n    # Return the maximum sum\n    return max_sum ",
        "test": "assert max_sum_increasing_subseq([1], 1, 0, 0) == 1  # Example from the problem statement",
        "num_ids": 4725,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    # Create a deep copy of the original tuple\n    copy_tuple = deepcopy(tuplex)\n    \n    # Get the colon of the tuple\n    colon = copy_tuple[m:n+1]\n    \n    return colon\n",
        "test": "assert colon_tuplex((), 0, 0) == ()  # empty tuple, m=0, n=0 should return empty tuple",
        "num_ids": 2530,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 360,
        "answer": "def large_product(nums1, nums2, N):\n    # Combine the two lists into one\n    nums = nums1 + nums2\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n    # Initialize the largest products\n    largest_products = []\n    # Iterate through the first N pairs of factors\n    for i in range(N):\n        # Calculate the product of the current pair of factors\n        product = nums[i] * nums[N + i]\n        # Add the product to the list of largest products\n        largest_products.append(product)\n    # Return the list of largest products\n    return largest_products",
        "test": "assert large_product([1, 2, 3], [4, 5, 6], 2) == [24, 15]  # check for edge case 1",
        "num_ids": 3180,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(10,5) == 10, \"Incorrect maximum value\"",
        "num_ids": 1214,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o')",
        "num_ids": 1470,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # if n is 0, return 1\n    if n == 0:\n        return 1\n    \n    # if n is 1, return 2\n    if n == 1:\n        return 2\n    \n    # convert n to binary and count the number of leading zeros\n    binary_n = bin(n)[2:]\n    leading_zeros = binary_n.count('0')\n    \n    # set the left most unset bit to 1\n    return n | (1 << leading_zeros)\n",
        "test": "assert set_left_most_unset_bit(0) == 1",
        "num_ids": 2995,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r ** 2 * h\n",
        "test": "assert volume_cone(4, 5) == 50.34246571047063",
        "num_ids": 1401,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to keep track of the highest power of 2 found\n    highest_power = 1\n    \n    # Loop until the highest power of 2 found is greater than n\n    while highest_power <= n:\n        # Update the highest power of 2 found by multiplying it by 2\n        highest_power *= 2\n    \n    # Return the highest power of 2 found\n    return highest_power // 2\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1482,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert find_lucas(0) == 2 #check for base case when n=0",
        "num_ids": 1536,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result\n",
        "test": "assert add_string([], 'test') == [] # test 3",
        "num_ids": 1788,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]:l3[i]}\n    return nested_dict\n",
        "test": "assert convert_list_dictionary([], [], []) == {}",
        "num_ids": 2922,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    memo = {}  # memoization table\n\n    def helper(x):\n        if x in memo:\n            return memo[x]\n\n        if x == 0 or x == 1:\n            return x\n\n        memo[x] = max(helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5), x)\n        return memo[x]\n\n    return helper(n)\n",
        "test": "assert get_max_sum(1) == 1  # Example 1",
        "num_ids": 2428,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            max_list = sublist\n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9]",
        "num_ids": 2478,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 1498,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\" #test case 1",
        "num_ids": 2247,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"hello\") == False",
        "num_ids": 1446,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n",
        "test": "assert median_numbers(5, 7, 2) == 5, \"median is not correct\"",
        "num_ids": 1870,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        digit_sum = 0\n        for digit in str(num):\n            digit_sum += int(digit)\n        result.append(digit_sum)\n    return result\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24] ",
        "num_ids": 2320,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result",
        "test": "assert bitwise_xor((0, 1, 0), (1, 0, 1)) == (1, 1, 1)",
        "num_ids": 2144,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)\n",
        "test": "assert extract_freq([(1, 2), (2, 3), (1, 2), (2, 3)]) == 2, \"Incorrect result\"",
        "num_ids": 2754,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 27,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Define an empty tuple to store the result\n    result = ()\n\n    # Loop over each tuple element and perform addition\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            result += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            result += (test_tup1[i] + test_tup2[i],)\n\n    return result\n",
        "test": "assert add_nested_tuples(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == ((8, 10, 12), (14, 16, 18))",
        "num_ids": 3749,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5, 7) == 5, \"Error in minimum function\"",
        "num_ids": 1205,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element == tuplex:\n            return True\n    return False\n",
        "test": "assert check_tuplex(('b', 1, 2), ('a', 3, 4)) == False",
        "num_ids": 1550,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 33,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True",
        "test": "assert find_Parity(3) == True ",
        "num_ids": 1229,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Sort the list of digits in descending order\n    digits.sort(reverse=True)\n\n    # Rearrange the digits to form the next bigger number\n    for i in range(len(digits)-1):\n        if digits[i] < digits[i+1]:\n            # Find the index of the first digit that is greater than digits[i]\n            j = i+1\n            while j < len(digits) and digits[j] > digits[i]:\n                j += 1\n            # Swap digits[i] with digits[j]\n            digits[i], digits[j-1] = digits[j-1], digits[i]\n            # Sort the digits after digits[i] in descending order\n            digits[i+1:] = sorted(digits[i+1:], reverse=True)\n            break\n\n    # Convert the list of digits back to an integer\n    next_bigger = int(''.join(str(d) for d in digits))\n\n    return next_bigger\n",
        "test": "assert rearrange_bigger(12) == 21",
        "num_ids": 2895,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    pairs = [(num1 + num2, (num1, num2)) for num1 in nums1 for num2 in nums2]\n    heapq.heapify(pairs)\n    smallest_pairs = [heapq.heappop(pairs) for _ in range(k)]\n    return [pair[1] for pair in smallest_pairs]",
        "test": "assert k_smallest_pairs([1, 3, 5], [2, 4, 6], 0) == []",
        "num_ids": 4640,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1, 1), (1, 1), (1, 1)]) == 1  # Test case 3",
        "num_ids": 2889,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if type(i) == int and i < min_val:\n            min_val = i\n        elif type(i) == float and i < min_val:\n            min_val = i\n        elif type(i) == str and len(i) < len(str(min_val)) and i.isdigit():\n            min_val = int(i)\n    return min_val\n",
        "test": "assert min_val([2, 1, 3, 4]) == 1, \"Incorrect minimum value\"",
        "num_ids": 2112,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    # Convert snake case string to camel case string\n    return word[0].lower() + word.title().replace('_', '')[1:]\n",
        "test": "assert snake_to_camel('hello_world') == 'helloWorld'",
        "num_ids": 1720,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n",
        "test": "assert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8]",
        "num_ids": 1563,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in list1:\n        if n == 1:\n            return i[0]\n        elif n == 2:\n            return i[1]\n    return None\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 3) == None",
        "num_ids": 2034,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False",
        "num_ids": 1745,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def max_Product(arr):\n    # sort the array in ascending order\n    arr.sort()\n    # get the second last element and the last element\n    second_last = arr[-2]\n    last = arr[-1]\n    # return the maximum product between these two elements\n    return max(second_last * last, last * -second_last)\n",
        "test": "assert max_Product([-10, 0, 10]) == 0 # expected output: 0",
        "num_ids": 2419,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0] and i != j:\n                if i[0] not in result:\n                    result.append(i[0])\n    return result\n",
        "test": "assert group_tuples([]) == []",
        "num_ids": 3023,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n",
        "test": "assert Find_Max([[1, 2], [3, 4, 5], [6]]) == [3, 4, 5]",
        "num_ids": 1642,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        rounded = round(num)\n        total += rounded\n    return total * len(list1)",
        "test": "assert round_and_sum([1.3, 2.5, 3.7]) == 21 ",
        "num_ids": 1632,
        "indeed": true
    },
    {
        "number": 420,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(1) == 1, \"Error in function\"",
        "num_ids": 1850,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = \"\"\n    delimiter = \"-\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]\n",
        "test": "assert concatenate_tuple(()) == ''",
        "num_ids": 1869,
        "indeed": true
    },
    {
        "number": 422,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    total = 0\n    \n    for i in range(1, n+1):\n        total += i**3\n    \n    average = total / (n * (n+1) * (n+2) / 6)\n    \n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1 # should return 1",
        "num_ids": 1740,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for s in test_tuple:\n        result.append(s[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear(()) == ()  # Should return an empty tuple if the input tuple is empty",
        "num_ids": 1924,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1, 3], [2, 3], [4, 3], [5, 3], [6, 7]], 3) == 4 # correct output for nested list",
        "num_ids": 2235,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 != 0, nums))\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1603,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'\n",
        "test": "assert change_date_format('2021-01-31') == '31-01-2021'",
        "num_ids": 2655,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sort the given list using Shell Sort algorithm\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert shell_sort([5, 3, 8, 1, 6, 9, 2, 7, 4]) == [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "num_ids": 2522,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result\n",
        "test": "assert and_tuples((True, True, True), (True, True, True)) == (True, True, True)",
        "num_ids": 2379,
        "indeed": true
    },
    {
        "number": 430,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    return directrix\n",
        "test": "assert parabola_directrix(1, 0, 0) == 0, \"Directrix should be 0\"",
        "num_ids": 2419,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1,2,3],[4,5,6]) == False",
        "num_ids": 1843,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the median length using the formula: median = (base1 + base2) / 2\n    median = (base1 + base2) / 2\n    return median",
        "test": "assert median_trapezium(5,10,10) == 7.5  # base1=5, base2=10, height=10",
        "num_ids": 1690,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n",
        "test": "assert check_greater([1, 2, 3], 3) == False",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'a(b+)', text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"ab\") == True ",
        "num_ids": 1299,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # converting the input number into string to access the last digit\n    n_str = str(n)\n    # extracting the last digit from the string\n    last_digit = int(n_str[-1])\n    # returning the last digit\n    return last_digit\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 1333,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n",
        "test": "assert neg_nos([1, -2, 3, -4, 5]) == [-2, -4] ",
        "num_ids": 1636,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = ''\n    for i, char in enumerate(str1):\n        if i % 2 == 0:\n            result += char\n    return result\n",
        "test": "assert remove_odd('') == '' # example 3",
        "num_ids": 1466,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0] and test_list[j][1] == test_list[i][0]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 0  # there are no bidirectional pairs",
        "num_ids": 2397,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    # Convert the list of integers into a string\n    str_num = ''.join(map(str, L))\n    \n    # Convert the string into an integer\n    int_num = int(str_num)\n    \n    return int_num\n",
        "test": "assert multiple_to_single([0]) == 0",
        "num_ids": 2037,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Regular expression to match adverbs\n    adverb_pattern = re.compile(r'\\b(early|often|quickly|slowly|frequently)\\b', re.IGNORECASE)\n    \n    # Find all adverbs in the text\n    adverbs = re.findall(adverb_pattern, text)\n    \n    # Return empty list if no adverbs found\n    if not adverbs:\n        return []\n    \n    # Find the position of the first adverb\n    first_adverb_index = text.lower().index(adverbs[0].lower())\n    \n    # Return the position of the first adverb\n    return [first_adverb_index, adverbs[0]]\n",
        "test": "assert find_adverb_position(\"The quick brown fox jumps over the lazy dog.\") == [] # no adverb in the sentence",
        "num_ids": 3014,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6*l*l\n    return surface_area\n",
        "test": "assert surfacearea_cube(2) == 24  # check if surfacearea_cube(2) returns 24",
        "num_ids": 1959,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)\n",
        "test": "assert positive_count([-1, -2, -3, -4, -5]) == 0, \"There should be 0 positive numbers in the array.\"",
        "num_ids": 2323,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def largest_neg(list1):\n    largest_neg = None\n    for num in list1:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n    return largest_neg\n",
        "test": "assert largest_neg([-1, 2, 3, 4, 5]) == -1 ",
        "num_ids": 1741,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 280,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = ()\n        for i in range(K, len(tup)-K):\n            trimmed_tup += (tup[i],)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list\n",
        "test": "assert trim_tuple([(1,), (2,), (3,)], 0) == [(1,), (2,), (3,)] # Example case with tuples of length 1 and no trimming",
        "num_ids": 2753,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "test": "assert index_multiplication((2, 3, 4), (5, 6, 7)) == (10, 18, 28)",
        "num_ids": 2442,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return {x: tup.count(x) for x in count}\n",
        "test": "assert count_Occurrence((1,2,3,4,5,6,7,8,9), [1,2,3,4,5,6,7,8,9]) == {1:1, 2:1, 3:1, 4:1, 5:1, 6:1, 7:1, 8:1, 9:1} ",
        "num_ids": 2732,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n",
        "test": "assert cube_nums([1, 2, 3]) == [1, 8, 27]",
        "num_ids": 1874,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    # Initialize the sum to zero\n    total = 0\n    # Iterate over the numbers 1 to n\n    for i in range(1, n+1):\n        # Calculate the Perrin number for i\n        num = sum(map(int, str(i)))\n        # Add the Perrin number to the total\n        total += num\n    # Return the sum of Perrin numbers\n    return total\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 1761,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in str]\n",
        "test": "assert extract_string('xyz', 1) == ['x', 'y', 'z']",
        "num_ids": 1618,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"  # test for simple string",
        "num_ids": 1354,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "test": "assert loss_amount(150, 150) == 0",
        "num_ids": 1832,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 13,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "import math\n\ndef sumofFactors(n):\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n / i != i and n / i % 2 == 0:\n                sum += (n / i)\n    return sum\n",
        "test": "assert sumofFactors(1) == 0",
        "num_ids": 2041,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 11,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    return bool(pattern.search(text))\n",
        "test": "assert text_match_wordz('This is a test string with zebra and zappers.') == True, \"Test 1 failed\"",
        "num_ids": 1787,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 29,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(2) == False # February has 28 or 29 days",
        "num_ids": 2193,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n",
        "test": "assert reverse_string_list([\"hello\", \"world\", \"python\"]) == [\"olleh\", \"dlrow\", \"nohtyp\"]",
        "num_ids": 1643,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sublist = lst\n    for sublist in [lst[i:j] for i in range(len(lst)) for j in range(i+1, len(lst)+1)]:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([]) == []  # returns an empty list if the input list is empty",
        "num_ids": 2156,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(4,5) == 20",
        "num_ids": 1285,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]+\\b')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_uppercase(\"\") == \"\" # Test case 4",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 29,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublst[0] for sublst in lst]\n",
        "test": "assert Extract([[1,2],[3,4]]) == [1,3]",
        "num_ids": 1617,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count",
        "test": "assert upper_ctr(\"Python is awesome!\") == 1, \"Incorrect upper case character count\"",
        "num_ids": 1370,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "from itertools import combinations\n\ndef combinations_list(list1):\n    return [list(combo) for i in range(1, len(list1)+1) for combo in combinations(list1, i)]\n",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1875,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] >= 0:\n            max_product = max(arr[i], max_product * arr[i])\n            min_product = min(arr[i], min_product * arr[i])\n        else:\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n\n        max_so_far = max(max_so_far, max_product)\n\n    return max_so_far\n",
        "test": "assert max_subarray_product([-10, -10]) == 100",
        "num_ids": 3245,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def check_value(d, n):\n    \"\"\"\n    Check if all values in a dictionary are equal to n.\n    \"\"\"\n    for val in d.values():\n        if val != n:\n            return False\n    return True\n",
        "test": "assert check_value({1:1, 2:2, 3:3}, 3) == False",
        "num_ids": 1930,
        "indeed": true
    },
    {
        "number": 465,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "test": "assert drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4} # test case 2",
        "num_ids": 2270,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        # Initialize a list to store the minimum value of the elements to the left of each index\n        min_left = [0] * n\n        # Initialize the first element as the minimum value of itself\n        min_left[0] = arr[0]\n        # Initialize the second element as the minimum of itself and the first element\n        min_left[1] = min(arr[0], arr[1])\n        # Initialize the maximum product variable to store the result\n        max_product = arr[0] * arr[1]\n        # Loop through the rest of the array\n        for i in range(2, n):\n            # Set the minimum value of the elements to the left of i as the minimum of the previous minimum value and the element itself\n            min_left[i] = min(min_left[i-1], arr[i])\n            # Check if multiplying the element with the previous maximum product gives a greater result\n            if arr[i] * max_product > max_product:\n                max_product = arr[i] * max_product\n            # Check if multiplying the element with the minimum value of the elements to the left of it gives a greater result\n            if arr[i] * min_left[i-1] > max_product:\n                max_product = arr[i] * min_left[i-1]\n        # Return the maximum product\n        return max_product\n",
        "test": "assert max_product([-1, -1, 1]) == 1 # case 4",
        "num_ids": 3560,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 22,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert add_pairwise((1, 2, 3, 4)) == (3, 5, 7)  # add_pairwise should return (3, 5, 7) for the given tuple (1, 2, 3, 4)",
        "num_ids": 2395,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3, 4], 7) == 3  # Example test case 2",
        "num_ids": 2044,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] != 1:\n            return False\n    return True\n",
        "test": "assert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True",
        "num_ids": 1928,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert lists to sets for faster lookup\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # find intersection of sets and return as list\n    result = list(set1.intersection(set2))\n    return result\n",
        "test": "assert tuple_intersection([(1,2), (3,4)], [(5,6), (7,8)]) == [] ",
        "num_ids": 3035,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str\n",
        "test": "assert replace_char(\"hello\", \"l\", \"z\") == \"hezzo\" # replacing 'l' with 'z' in 'hello'",
        "num_ids": 1878,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n",
        "test": "assert sort_counter({\"a\": 5, \"b\": 3, \"c\": 2, \"d\": 1}) == {\"c\": 2, \"b\": 3, \"a\": 5, \"d\": 1}, \"Invalid output\"",
        "num_ids": 2513,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n\n    max_val = min_val = nums[0]\n\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    return max_val + min_val\n",
        "test": "assert big_sum([-5, -2, 0, 3, 4]) == -1, \"Sum of smallest and largest value is incorrect\"",
        "num_ids": 2374,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n    \"\"\"\n    return string.lower()\n",
        "test": "assert is_lower('Hello') == 'hello' ",
        "num_ids": 881,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Using regex to find all substrings containing lowercase letters\n    regex = re.compile(r'\\b[a-z]+\\b')\n    # Using replace method to replace all lowercase substrings with empty string\n    return regex.sub('', str1)\n",
        "test": "assert remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"",
        "num_ids": 1793,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 38,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])\n",
        "test": "assert first_Digit(12345) == 1 ",
        "num_ids": 1290,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 33,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2 != 0:\n            odd_list.append(num)\n    return odd_list",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1513,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def difference(n):\n    # calculate the sum of the first n natural numbers\n    sum_natural = (n * (n + 1)) // 2\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    # calculate the difference between the two sums\n    diff = sum_natural**2 - sum_cubes\n    # return the difference\n    return diff\n",
        "test": "assert difference(1) == 1-1 #check for n=1",
        "num_ids": 2146,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,3,5,7,9],5) == 0",
        "num_ids": 1946,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def toggle_string(string):\n    return string.swapcase()",
        "test": "assert toggle_string('Hello') == 'hELLO'",
        "num_ids": 1448,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff_sum = 0\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    if len(n1_str) != len(n2_str):\n        return \"Invalid input: The numbers must have the same number of digits.\"\n        \n    for i in range(len(n1_str)):\n        diff_sum += abs(int(n1_str[i]) - int(n2_str[i]))\n    \n    return diff_sum\n",
        "test": "assert digit_distance_nums(0, 0) == 0",
        "num_ids": 3503,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def max_sub_array_sum(a, size):\n    max_sum = a[0]  # initialize max_sum to the first element of the list\n    current_sum = a[0]  # initialize current_sum to the first element of the list\n    for i in range(1, size):\n        # if current_sum + element is greater than current_sum, update current_sum\n        if current_sum + a[i] > a[i]:\n            current_sum += a[i]\n        else:\n            current_sum = a[i]  # otherwise, reset current_sum to the current element\n        # update max_sum if current_sum is greater than max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum\n",
        "test": "assert max_sub_array_sum([1, -2, 3, 10, -4, 7, 2, -5], 8) == 18",
        "num_ids": 2694,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 34,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # convert the tuples to sets and find the union of the sets\n    union_set = set(test_tup1).union(set(test_tup2))\n    \n    # convert the union set back to a tuple and sort it\n    union_tup = tuple(sorted(union_set))\n    \n    return union_tup\n",
        "test": "assert union_elements((\"A\", \"B\"), (\"B\", \"C\")) == ('A', 'B', 'C')",
        "num_ids": 2493,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([]) == 0 ",
        "num_ids": 2251,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    matches = re.findall(r'\"(.*?)\"', text)\n    return matches\n",
        "test": "assert extract_values(\"She ordered pizza for 2 people.\") == []",
        "num_ids": 1806,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n",
        "test": "assert count_Pairs([1, 1, 1, 1], 4) == 0",
        "num_ids": 2027,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 1453,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total\n",
        "test": "assert sum_digits(123) == 6  # Test case 1",
        "num_ids": 1770,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1,2,3,4,5]) # should return True",
        "num_ids": 1711,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n",
        "test": "assert empty_list(0) == [] # Test the case when length is 0",
        "num_ids": 1244,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # iterate over each sublist in the input list\n    for i in range(len(list1)):\n        # sort the sublist\n        list1[i].sort()\n    return list1\n",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\", \"fish\"], [\"alpha\", \"bravo\", \"charlie\"]]) == [[\"apple\", \"banana\", \"cherry\"], [\"cat\", \"dog\", \"fish\"], [\"alpha\", \"bravo\", \"charlie\"]]",
        "num_ids": 2737,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([]) == []",
        "num_ids": 2466,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product",
        "test": "assert unique_product([1, 2, 3, 2, 1]) == 6",
        "num_ids": 1838,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(0, 1) == 0, \"Incorrect surface area of a cylinder with radius 0 and height 1.\"",
        "num_ids": 2247,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def is_Sub_Array(A,B):\n    # Convert the lists into sets to check if one is a subset of another\n    setA = set(A)\n    setB = set(B)\n    \n    # Check if setB is a subset of setA\n    if setB.issubset(setA):\n        return True\n    else:\n        return False\n",
        "test": "assert is_Sub_Array([1,2,3,4,5], [2,3,6]) == False",
        "num_ids": 2178,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def last_Digit_Factorial(n):\n    # initialize the product of factorials to 1\n    product = 1\n    \n    # loop over the range from 1 to n, inclusive\n    for i in range(1, n+1):\n        # multiply the current product by the factorial of i\n        product *= i\n        \n    # compute the last digit of the product using modulo arithmetic\n    return product % 10\n",
        "test": "assert last_Digit_Factorial(10) == 0, \"last_Digit_Factorial(10) should be 0\"",
        "num_ids": 2043,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 220,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All lists should have the same length\")\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) != [1,4,7,2,5,8,3,6,9,10]",
        "num_ids": 2898,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] != test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements\n",
        "test": "assert find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c')) == ()",
        "num_ids": 2533,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        if isinstance(element, tuple):\n            result.append(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            result.append(element)\n    return tuple(result)\n",
        "test": "assert even_ele((), lambda x: x % 2 == 0) == ()",
        "num_ids": 2743,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 340,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2*(b*s)\n    return area\n",
        "test": "assert surface_Area(b=8, s=4) == 64  # Test Case 4",
        "num_ids": 1626,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True  # empty dictionary",
        "num_ids": 1295,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n\n    catalan_num = 0\n    i = 0\n\n    while i < num:\n        catalan_num = 2*i + catalan_num\n        i += 1\n\n    return catalan_num\n",
        "test": "assert catalan_number(0) == 1  # the first catalan number is 1",
        "num_ids": 1716,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 380,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    match = re.search(r'\\b\\w+ly\\b', text)\n    if match:\n        adverb = match.group()\n        start_pos = match.start()\n        end_pos = match.end()\n        return (adverb, start_pos, end_pos)\n    else:\n        return None",
        "test": "assert find_adverbs(\"The dog is not easily fooled.\") == ('easily', 15, 21)",
        "num_ids": 2939,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted(heap, reverse=True)\n",
        "test": "assert expensive_items([(1,10), (2,20), (3,30), (4,40), (5,50)], 1) == [(5,50)] ",
        "num_ids": 3218,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part\n",
        "test": "assert split_Arr([1,2,3,4,5], 5) == [1,2,3,4,5]",
        "num_ids": 2354,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1,2,3,4,5]) == (1,2,3,4,5)",
        "num_ids": 1004,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n",
        "test": "assert big_diff([10, 3, 5, 6, 20]) == 17  # test case 1",
        "num_ids": 1892,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize an empty list to store perfect squares\n    perfect_squares_list = []\n    # Iterate through all numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # Check if the square root of num is an integer\n        if int(num ** 0.5) ** 2 == num:\n            # If so, add it to the list of perfect squares\n            perfect_squares_list.append(num)\n    # Return the list of perfect squares\n    return perfect_squares_list\n",
        "test": "assert perfect_squares(1, 3) == [1]",
        "num_ids": 2380,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n",
        "test": "assert polar_rect(4, 0) == (4, 0) # polar coordinate (4, 0) should map to the same rectangular coordinates (4, 0)",
        "num_ids": 1688,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n\n    # Check if the list has at least two elements\n    if length >= 2:\n        # Swap the first and last elements\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n    else:\n        print(\"Error: List must have at least two elements\")\n\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]  # test case 1",
        "num_ids": 1944,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return (binomial_Coeff(n - 1, k - 1) * (n - k + 1)) // k\n\ndef sum_binomial_products(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients for n.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        total += binomial_Coeff(n, i) * binomial_Coeff(n, n - i - 1)\n    return total",
        "test": "assert binomial_Coeff(1,0) == 1",
        "num_ids": 2573,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet of the ip address\n    octets = re.findall(r'\\d+', ip)\n    octets = [str(int(octet)) for octet in octets]\n    \n    # Combine the octets into a new ip address\n    new_ip = '.'.join(octets)\n    \n    return new_ip\n",
        "test": "assert removezero_ip(\"255.255.255.255\") == \"255.255.255.255\"",
        "num_ids": 2409,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_found = False\n    odd_found = False\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0 and not even_found:\n            even_found = True\n            even_num = num\n        elif num % 2 == 1 and not odd_found:\n            odd_found = True\n            odd_num = num\n        if even_found and odd_found:\n            break\n    \n    if even_found and odd_found:\n        return abs(even_num - odd_num)\n    else:\n        return None\n",
        "test": "assert diff_even_odd([1, 3, 5, 7]) == None, \"First even - first odd difference is incorrect\"",
        "num_ids": 2533,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def min_Swaps(str1, str2):\n    # Convert strings to lists of integers\n    nums1 = [int(n) for n in str1]\n    nums2 = [int(n) for n in str2]\n\n    # Initialize variables to keep track of swaps and current index\n    swaps = 0\n    i = 0\n\n    # Loop through both lists, comparing values and swapping if necessary\n    while i < len(nums1) and i < len(nums2):\n        if nums1[i] > nums2[i]:\n            nums1[i], nums2[i] = nums2[i], nums1[i]\n            swaps += 1\n        i += 1\n\n    # If there are still values left in nums2, we need more swaps\n    if i < len(nums2):\n        swaps += len(nums2) - i\n\n    return swaps\n",
        "test": "assert min_Swaps(\"11111111\",\"11111111\") == 0, \"Incorrect number of swaps\" ",
        "num_ids": 3371,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "test": "assert tuple_size((1,2,3,4,5) == 5) ",
        "num_ids": 1554,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # if k is greater than n1 + n2, return None\n    if k > n1 + n2:\n        return None\n\n    # if k is less than or equal to n1, return the kth element from arr1\n    if k <= n1:\n        return arr1[k-1]\n\n    # if k is greater than n1, find the kth element from arr2\n    i = k - n1 - 1\n    if i < n2:\n        return arr2[i]\n\n    # if k is greater than n1 + n2, return None\n    if k > n1 + n2:\n        return None\n\n    # if k is between n1 and n1 + n2, find the kth element from the merged array\n    arr = arr1 + arr2\n    return arr[k-1]\n",
        "test": "assert find_kth([1, 2, 3], [4, 5, 6], 3) == 3 # k=3 from arr1",
        "num_ids": 4275,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the input number to string and calculate its length\n    length = len(str(number))\n    # Initialize sum\n    sum = 0\n    # Calculate sum of each digit raised to the power of the length\n    for digit in str(number):\n        sum += int(digit) ** length\n    # If the sum is equal to the number, then it is an armstrong number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True",
        "num_ids": 2087,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average\n",
        "test": "assert sum_average(5) == (15, 3.0), \"Function did not return the correct sum and average for n=5\"",
        "num_ids": 1473,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(0) == True",
        "num_ids": 1116,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in str1:\n        if char_freq[char] > 1:\n            return char\n    return None\n",
        "test": "assert first_repeated_char(\"aabbc\") == \"a\"",
        "num_ids": 2282,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = []\n    for i in range(1, n+1):\n        sum_of_digits = 0\n        for digit in str(i):\n            sum_of_digits += int(digit)\n        if sum_of_digits == i:\n            lucid.append(i)\n    return lucid\n",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 4389,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the words back into a string with spaces between them\n    result = ' '.join(words)\n    return result ",
        "test": "assert reverse_words(\"   \") == \"\"",
        "num_ids": 1733,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the input is less than 2\n    if num < 2:\n        return False\n    \n    # Check if the number is divisible by any number between 2 and its square root\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    # If the number passes the check, it is a prime number\n    return True\n",
        "test": "assert prime_num(7) == True",
        "num_ids": 1616,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n",
        "test": "assert radian_degree(180) == math.pi ",
        "num_ids": 1738,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n",
        "test": "assert find_literals(\"hello world\", r'\\b[a-zA-Z]+\\b') == (\"hello\", 0, 5)  # matches \"hello\" at the beginning of the string",
        "num_ids": 2516,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 28,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math\n\ndef bell_Number(n):\n    bell_numbers = [1]\n    for i in range(1, n+1):\n        bell_numbers.append(0)\n        for j in range(i):\n            bell_numbers[i] += bell_numbers[j] * bell_numbers[i-j-1]\n            bell_numbers[i] //= math.factorial(j)\n    return bell_numbers[n]\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 1975,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k-1] + list1[k:]\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]",
        "num_ids": 2477,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    max_val = None\n    for row in test_list:\n        if N-1 < len(row):\n            if max_val is None or row[N-1] > max_val:\n                max_val = row[N-1]\n        else:\n            print(\"Error: row does not have at least\", N, \"columns\")\n    \n    if max_val is None:\n        print(\"Error: input matrix has no values\")\n    \n    return max_val\n",
        "test": "assert max_of_nth([[1,2,3], [4,5,6]], 0) == 6",
        "num_ids": 2790,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    first_list = []\n    second_list = []\n\n    for sublist in lst:\n        first_list.append(sublist[0])\n        second_list.append(sublist[1])\n\n    return [first_list, second_list]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]] ",
        "num_ids": 2452,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum",
        "test": "assert cummulative_sum([-1, 2, -3, 4, -5]) == [-1, 1, -2, 2, -7]",
        "num_ids": 2059,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        avg = sum(nums[i])/len(nums[i])\n        avg_list.append(avg)\n    return avg_list\n",
        "test": "assert average_tuple(((1,2,3),(4,5,6),(7,8,9))) == [2.0, 5.0, 8.0]",
        "num_ids": 3010,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result += (test_tup1[i] % test_tup2[i],)\n        return result\n    else:\n        print(\"Error: Tuples must be of the same length.\")\n",
        "test": "assert tuple_modulo((3, 4, 5), (2, 3, 4)) == (1, 1, 1), \"Incorrect result in tuple_modulo\"",
        "num_ids": 3120,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def min_Jumps(steps, d):\n    if steps == 0 or d == 0:\n        return 0\n    if d == 1:\n        return 1\n    if d > steps:\n        return -1\n\n    jumps = float('inf')\n    for i in range(1, d+1):\n        if (steps - i) >= d:\n            jumps = min(jumps, 1 + min_Jumps(steps - i, d - i))\n\n    return jumps",
        "test": "assert min_Jumps(4, 1) == 1",
        "num_ids": 2927,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1,2,3],[1,2,3]) == [1,1,1]",
        "num_ids": 2416,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = re.findall(r'\\d+', test_str)\n    letters = re.split(r'\\d+', test_str)\n    return ''.join(letters) + ''.join(numbers)",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 2157,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [False] * n\n    dp[0] = True\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j]:\n                dp[i] = True\n                break\n    count = 0\n    for i in range(n):\n        if dp[i]:\n            count += 1\n    return count\n",
        "test": "assert largest_subset([1, 2, 4, 8]) == 4",
        "num_ids": 3194,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # if the length of the array is even, the median is the average of the middle two elements\n        return (arr1[n//2 - 1] + arr2[n//2 - 1]) / 2\n    else:\n        # if the length of the array is odd, the median is the middle element\n        return arr1[n//2]\n",
        "test": "assert get_median([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 5) == 3  # expected output: 3",
        "num_ids": 3224,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result\n",
        "test": "assert nth_nums([1,2,3,4,5],2) == [1,4,9,16,25]",
        "num_ids": 2020,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"HELLO\") == \"HELLO\", \"Test case 1 failed\"",
        "num_ids": 1083,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def swap_List(newList):\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return newList\n    # store the first element in a temporary variable\n    temp = newList[0]\n    # replace the first element with the last element\n    newList[0] = newList[-1]\n    # replace the last element with the temporary variable\n    newList[-1] = temp\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1] # test for a list with even length",
        "num_ids": 2218,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function takes in a radius r as a parameter\n    and returns the area of the largest triangle that can be inscribed in a semicircle with that radius.\n    \"\"\"\n    # Calculate the circumference of the semicircle\n    circumference = 2 * math.pi * r\n    \n    # Find the area of the largest possible triangle\n    area = 0.5 * circumference\n    \n    # Return the result\n    return area\n",
        "test": "assert triangle_area(0) == 0  # The area of a triangle inscribed in a circle of radius 0 is 0.",
        "num_ids": 2446,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 39,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start, end):\n        if array[i] != i+1 and array[i] != i:\n            return i+1\n    return end+1\n",
        "test": "assert find_First_Missing([1,2,4,5,6]) == 3",
        "num_ids": 2983,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\" ",
        "num_ids": 1229,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [2, 4, 6] ",
        "num_ids": 1623,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 330,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    x, y = ele\n    \n    adjac_list = []\n    \n    # Up, down, left, right\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i != 0 or j != 0:\n                new_x = x + i\n                new_y = y + j\n                \n                if (new_x, new_y) not in sub:\n                    adjac_list.append((new_x, new_y))\n    \n    return adjac_list\n",
        "test": "assert adjac((0, 0)) == [(1, 0), (0, 1), (1, 1)] ",
        "num_ids": 3457,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if ' ' in text:\n        return text.replace(' ', '_')\n    elif '_' in text:\n        return text.replace('_', ' ')\n    else:\n        return text\n",
        "test": "assert replace_spaces(\"Hello World\") == \"Hello_World\"",
        "num_ids": 1508,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def move_zero(num_list):\n    zero_indices = [i for i, x in enumerate(num_list) if x == 0]  # find all indices with zeroes\n    for i in reversed(zero_indices):  # iterate backwards through the zero indices\n        num_list.pop(i)  # remove the zero at the current index\n    num_list.extend([0] * len(zero_indices))  # append zeroes at the end\n    return num_list\n",
        "test": "assert move_zero([]) == []  # example test case 4",
        "num_ids": 2966,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 350,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through all pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # XOR the two numbers and add to sum\n            sum += arr[i] ^ arr[j]\n    \n    # Return the final sum\n    return sum\n",
        "test": "assert pair_xor_Sum([1, 1, 1, 1, 1], 5) == 0",
        "num_ids": 2584,
        "indeed": true
    },
    {
        "number": 635,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a heap.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "test": "assert heap_sort([4, 2, 8, 1, 0, 5]) == [0, 1, 2, 4, 5, 8] ",
        "num_ids": 2047,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 31,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True ",
        "num_ids": 1670,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v / 3.6  # convert km/h to m/s\n    # Calculate wind chill\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    # Round to the next integer\n    wind_chill_index = round(wind_chill_index)\n    return wind_chill_index\n",
        "test": "assert wind_chill(40, 10) == 8, \"Function is not working correctly\"",
        "num_ids": 2826,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def sample_nam(sample_names):\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam([\"Alice\", \"Bob\", \"charlie\", \"Dave\", \"Eve\"]) == 15",
        "num_ids": 1659,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'\n    result = re.sub(pattern, '', items)\n    return result\n",
        "test": "assert remove_parenthesis(\"Hello (world)!\") == \"Hello !\"",
        "num_ids": 1753,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    count = 0\n    while count < n:\n        i += 1\n        count = i * (i - 1) // 2\n    return i - 1\n",
        "test": "assert is_nonagonal(1) == 1 ",
        "num_ids": 1772,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Iterate through each word and check if 'z' is present in the word except at the start and end\n    for word in words:\n        if word[1:-1] != word.replace('z', '', 1):\n            return False\n    return True\n",
        "test": "assert not text_match_wordz_middle(\"world hello\"), \"z is present at the end of a word\" ",
        "num_ids": 2291,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def reverse_Array_Upto_K(input, k):\n    if k > len(input):\n        return input[::-1]\n    else:\n        return input[:k][::-1] + input[k:]\n",
        "test": "assert reverse_Array_Upto_K([1,2,3,4,5], 0) == [1,2,3,4,5] # reverse no elements",
        "num_ids": 3053,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple((\"apple\", \"banana\", \"cherry\"), {\"name\": \"John\", \"age\": 25}) != (\"apple\", \"banana\", \"cherry\", {\"name\": \"John\", \"age\": 26})",
        "num_ids": 3102,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + min(dp[i-1][j], dp[i][j-1])\n    \n    max_average = 0\n    for i in range(n):\n        for j in range(n):\n            avg = dp[i][j] / ((i+1) * (j+1))\n            max_average = max(max_average, avg)\n    \n    return max_average\n",
        "test": "assert maxAverageOfPath([[1]]) == 1 # Example matrix with only one element",
        "num_ids": 5366,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for student, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n",
        "test": "assert filter_data({'Alice': (160, 50), 'Bob': (170, 60), 'Charlie': (150, 55), 'David': (175, 70)}, 160, 55) == {'Bob': (170, 60), 'David': (175, 70)}",
        "num_ids": 4094,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,2,3,4,5], [1,2,3,4,5]) == 5",
        "num_ids": 2025,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    base_power = int(base) ** power\n    digit_sum = sum(int(digit) for digit in str(base_power))\n    return digit_sum\n",
        "test": "assert power_base_sum(5, 1) == 5, \"5^1 = 5, the sum of digits is 5, not 0\"",
        "num_ids": 2464,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext1 = \"The man said, \\\"Hello, World!\\\" to me.\"\nprint(extract_quotation(text1)) # Output: ['Hello, World!']\n",
        "test": "assert extract_quotation('\"Hello, world!\"') == ['Hello, world!']",
        "num_ids": 1817,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n\n    result_tup = ()\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i+1], )\n    return result_tup\n",
        "test": "assert multiply_elements((1, 2, 3, 4)) == (2, 6, 12)",
        "num_ids": 2440,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 25,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 2454,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Remove consecutive duplicates\n    result = [key for key, value in groupby(nums)]\n    return result",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 2580,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lsa = math.pi * r * h + math.pi * r ** 2\n    return lsa\n",
        "test": "assert lateralsurface_cone(0, 1) == 0, \"Error in lateralsurface_cone\"",
        "num_ids": 2270,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'\\s+|[.,]'\n    return re.sub(pattern, ':', text)\n",
        "test": "assert replace_specialchar(\"This is a test.1,2,3\") == \"This:is:a:test:1:2:3\" ",
        "num_ids": 1507,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low, high = 0, len(A) - 1\n    result = -1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return result\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 4, 4, 5, 6, 7], 4) == 3  # Correct",
        "num_ids": 3025,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    return prod\n\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            prod = 1\n            for k in range(i, j+1):\n                prod *= arr[k]\n            res += prod\n    return res\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 0, 1]) == 0, \"Function output is incorrect for [-1, 0, 1]\"",
        "num_ids": 3073,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Using bitwise operators to toggle bits of the number except the first and the last bit\n    n = n ^ (n >> 1 & 0xAAAAAAAA) ^ (n << 1 & 0xAAAAAAAA)\n    return n\n",
        "test": "assert set_middle_bits(0b00000000) == 0b00000000  # binary: 0",
        "num_ids": 3947,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 33,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    return bisect.bisect_left(a, x)",
        "test": "assert left_insertion([1, 3, 4, 6, 7], 4) == 2, \"Should return 2\"",
        "num_ids": 1904,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert not check_str(\"1education\"), \"The function should return False for strings not starting with a vowel\" ",
        "num_ids": 1480,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return ((2**n) - 1) / (2 - 1)\n",
        "test": "assert geometric_sum(1) == 1, \"Error: geometric_sum(1) should be 1\"",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef find_Index(n):\n    num_digits = 1\n    triangular_number = 1\n    while num_digits < n:\n        triangular_number += 1\n        num_digits = len(str(triangular_number))\n    return triangular_number",
        "test": "assert find_Index(1) == 1, \"Testing for n = 1\"",
        "num_ids": 2775,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    \n    # Loop through the tuple and add key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    \n    # Return the resulting dictionary\n    return result_dict\n",
        "test": "assert tuple_to_dict((\"key1\", \"value1\", \"key2\", \"value2\")) == {\"key1\": \"value1\", \"key2\": \"value2\"}, \"Incorrect output\"",
        "num_ids": 2660,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    # Initialize count variable to 0\n    count = 0\n    \n    # Loop through the string and check if all characters are same\n    for i in range(len(s)):\n        if s[i] == s[0]:\n            count += 1\n        else:\n            break\n    \n    # If all characters are same, return True, else return False\n    if count == len(s):\n        return True\n    else:\n        return False\n",
        "test": "assert all_Characters_Same(\"a\") == True",
        "num_ids": 1554,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 340,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the volume of the tetrahedron\n    volume = (math.sqrt(3)/2) * (side**2)\n    \n    # Calculate the area of the tetrahedron\n    area = ((3 * side * volume) / (4 * math.sqrt(2)))\n    \n    return area\n",
        "test": "assert area_tetrahedron(2) == 2.66667",
        "num_ids": 2516,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a list by m items to the right.\n    \"\"\"\n    # Get the length of the list and the rotation count\n    n = len(lst)\n    k = m % n\n    \n    # If rotation count is zero, return the original list\n    if k == 0:\n        return lst\n    \n    # Split the list into two parts: the left and right sublists\n    left = lst[:n-k]\n    right = lst[n-k:]\n    \n    # Concatenate the two sublists in reverse order\n    return right + left\n",
        "test": "assert rotate_right([1], 1) == [1]  # rotate a single element list to the right by 1 item",
        "num_ids": 2733,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3)) == False  # tuple with no none value",
        "num_ids": 1538,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num, digit):\n        return num % digit == 0\n\n    def has_digit(num, digit):\n        return str(digit) in str(num)\n\n    def contains_digit(num, digit):\n        return all(is_divisible(num, d) for d in range(10) if has_digit(num, d))\n\n    return [n for n in range(startnum, endnum+1) if contains_digit(n, 1)]",
        "test": "assert divisible_by_digits(100000, 1000000) == [123456, 234567, 345678, 456789, 567890, 678901, 789012, 890123, 901234, 1234567, 2345678, 3456789, 4567890, 5678901, 6789012, 7890123, 8901234, 9012345]",
        "num_ids": 4514,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return r ** 2 * (math.sin(math.radians(a/2))) ** 2\n",
        "test": "assert sector_area(3, 365) == None, \"Error in sector_area() function\"",
        "num_ids": 2166,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # create a 2D array of size (m+1) x (n+1) x (o+1)\n    L = [[[0 for k in range(o+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # fill the L array using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    # create a string to store the LCS\n    lcs = \"\"\n    \n    # fill the lcs string using backtracking\n    i = m\n    j = n\n    k = o\n    \n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] >= L[i][j-1][k] and L[i-1][j][k] >= L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] >= L[i-1][j][k] and L[i][j-1][k] >= L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n    \n    return lcs\n",
        "test": "assert lcs_of_three(\"ABC\", \"DEF\", \"GHI\") == \"\", \"Incorrect output\"",
        "num_ids": 5519,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 33,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'([A-Z][a-z]+)')\n    return ' '.join(pattern.sub(r' \\1', str1).split())\n",
        "test": "assert capital_words_spaces(\"Aeiou\") == \"Aeiou\"",
        "num_ids": 2089,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert strings to floats and sort numerically\n    sorted_nums = sorted(nums_str, key=float)\n    # Convert back to strings and return\n    return [str(num) for num in sorted_nums]",
        "test": "assert sort_numeric_strings(['10', '2', '1', '5', '4']) == ['1', '2', '4', '5', '10'] ",
        "num_ids": 2854,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_tuple([(1, 2), (3, 4)], (5, 6)) == [(1, 2), (3, 4), (5, 6)] ",
        "num_ids": 1654,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # Find the smallest index for left and right child\n    left_index = 2 * i + 1\n    right_index = 2 * i + 2\n\n    # Check if the left child is smaller than the parent\n    if left_index < len(arr) and arr[left_index] < arr[i]:\n        return False\n\n    # Check if the right child is smaller than the parent\n    if right_index < len(arr) and arr[right_index] < arr[i]:\n        return False\n\n    # If both children are smaller than the parent, then the parent is a min heap\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return True\n\n    # Iterate over the array and check if each element is a min heap\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True\n",
        "test": "assert check_min_heap_helper([], 0) == True     # empty array",
        "num_ids": 3690,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 1976,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    return sorted(test_list)[:K]\n",
        "test": "assert min_k([(1, 2), (3, 4), (5, 6)], 0) == []",
        "num_ids": 3338,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    # Find common elements and their indices\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append((l1[i], i))\n\n    # Extract the indices of common elements\n    index_list = [index for element, index in common]\n\n    return index_list\n",
        "test": "assert extract_index_list([1,2,3],[4,5,6],[7,8,9]) == []",
        "num_ids": 2853,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    return second_smallest if second_smallest != float('inf') else None\n",
        "test": "assert second_smallest([1, 2]) == 2",
        "num_ids": 2233,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False",
        "test": "assert text_match_zero_one('abc') == True",
        "num_ids": 1402,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 2346,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    for sublist in lst:\n        sublists.append(tuple(sublist))\n    unique_sublists = list(set(sublists))\n    counts = {}\n    for sublist in unique_sublists:\n        counts[sublist] = sublists.count(sublist)\n    return counts\n",
        "test": "assert unique_sublists([[1, 2], [2, 3], [1, 2]]) == {(1, 2): 2, (2, 3): 1}",
        "num_ids": 3097,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # convert the input string to float and check the precision\n        decimal_num = float(num)\n        if len(str(decimal_num).split('.')[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        # if the input string is not a valid number, return False\n        return False\n",
        "test": "assert not is_decimal('3.14159'), 'Error: Incorrect output for 3.14159'",
        "num_ids": 1691,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 25,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert unique_Element([1,1,2]) == False # Test case 3",
        "num_ids": 1529,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 29,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [2]:\n        return False\n    else:\n        return True\n",
        "test": "assert check_monthnumber_number(2) == False, \"Month 2 should have 28 or 29 days\"",
        "num_ids": 2055,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1, \"Incorrect result\"",
        "num_ids": 2688,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr('hello123') == 3  # Test case 1",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def count_divisors(num):\n        divisors_count = 0\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if num // i == i:\n                    divisors_count += 1\n                else:\n                    divisors_count += 2\n        return divisors_count\n\n    def polite_numbers(n):\n        polite_nums = [1]\n        i = 2\n        while len(polite_nums) < n:\n            if count_divisors(i) > len(polite_nums):\n                polite_nums.append(i)\n            i += 1\n        return polite_nums\n\n    return polite_numbers(n)[-1]\n",
        "test": "assert is_polite(1) == 1  # first polite number is 1",
        "num_ids": 2570,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs\n",
        "test": "assert pair_wise([1, 2, 3]) == [(1, 2), (2, 3)]",
        "num_ids": 1925,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def get_pairs_count(arr, target_sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to 'target_sum'. The funtion gets as input a list of numbers and the target_sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == target_sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 10) == 0, \"Error in get_pairs_count\"  # correct input 3",
        "num_ids": 2673,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n",
        "test": "assert Diff([1,2,3], [1,2,4]) == [3]",
        "num_ids": 2033,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n:\n        if i % 2 != 0:\n            sum += i**4\n        i += 1\n    return sum\n",
        "test": "assert odd_num_sum(1) == 1, \"Error in function\" ",
        "num_ids": 1913,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            current_char = stack.pop()\n            if current_char == '(':\n                if i != ')':\n                    return False\n            elif current_char == '[':\n                if i != ']':\n                    return False\n            elif current_char == '{':\n                if i != '}':\n                    return False\n    if not stack:\n        return True\n    else:\n        return False\n",
        "test": "assert check_expression(\"({[]})\") == True # balanced expression",
        "num_ids": 2218,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word) != K:\n            new_words.append(word)\n    return \" \".join(new_words)\n",
        "test": "assert remove_length(\"\", 5) == \"\"  # test case 4",
        "num_ids": 2154,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Initialize an empty list to store the positions and occurrence of the pattern in the text.\n    result = []\n    # Find all the non-overlapping occurrences of the pattern in the text using the finditer() method of re module.\n    matches = re.finditer(pattern, text)\n    # Iterate over the matches and append the start position and occurrence of the pattern to the result list.\n    for match in matches:\n        result.append((match.start(), text[match.start():match.end()]))\n    # If there are no matches, return None.\n    if not result:\n        return None\n    # Return the result list containing the start position and occurrence of the pattern in the text.\n    return result\n",
        "test": "assert occurance_substring(\"The quick brown fox jumps over the lazy dog\", \"cat\") == None",
        "num_ids": 2788,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 3, 5, 7, 9]) == True",
        "num_ids": 1743,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 and test_str[i].lower() in vowels:\n            count += 1\n        elif i == len(test_str) - 1 and test_str[i].lower() in vowels:\n            count += 1\n        elif i > 0 and i < len(test_str) - 1 and test_str[i-1].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0",
        "num_ids": 1874,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_sum = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            non_repeated_sum += arr[i]\n    return non_repeated_sum\n",
        "test": "assert find_sum([]) == 0 # empty input",
        "num_ids": 2474,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append(list(group))\n    return result",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 2435,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def unique_sublists(lst):\n    # Convert the list to a set to remove duplicates\n    unique_lst = set(lst)\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Iterate over each unique element in the list\n    for elem in unique_lst:\n        # Count the number of times the element appears in the original list\n        count = lst.count(elem)\n        # Convert the element to a tuple and use it as the key in the dictionary\n        counts[(elem,)] = count\n    # Return the dictionary with the counts\n    return counts\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2661,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Iterate through each tuple in the test_list\n    for tup in test_list:\n        # Find the combinations of sums of the tuple\n        for i in range(1, len(tup)+1):\n            # Find the combinations of the tuple with length i\n            comb = combinations(tup, i)\n            # Add the combinations to the combinations_list\n            for c in comb:\n                combinations_list.append(c)\n\n    # Return the combinations_list\n    return combinations_list\n",
        "test": "assert find_combinations([(1,)]) == [(1,)]",
        "num_ids": 5647,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 36,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import math\n\ndef count_divisors(n):\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n / i == i:\n                divisors += 1\n            else:\n                divisors += 2\n    return divisors\n",
        "test": "assert count_divisors(4) == 3, \"Test case failed for count_divisors(4)\"",
        "num_ids": 2120,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i+1) % 2 == 1:\n                result += sum(arr[i:j+1])\n    return result\n",
        "test": "assert odd_length_sum([1]) == 0 # test case 4",
        "num_ids": 2444,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 36,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax, cmin = max(r, g, b), min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        hue = 0\n    elif cmax == r:\n        hue = ((g - b) / delta) % 6\n    elif cmax == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    hue = round(hue * 60)\n\n    if hue < 0:\n        hue += 360\n\n    saturation = 0 if delta == 0 else delta / cmax\n\n    value = cmax\n\n    return hue, saturation, value\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)",
        "num_ids": 4369,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    count_even = 0\n    count_odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n            count_even += 1\n            if count_even == 2:\n                break\n        elif num % 2 != 0:\n            odd_product *= num\n            count_odd += 1\n            if count_odd == 2:\n                break\n    \n    return even_product * odd_product\n",
        "test": "assert mul_even_odd([0,1,2,3,4,5]) == 0",
        "num_ids": 2666,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, str):\n        return \"Invalid input. Please provide a string.\"\n    \n    try:\n        int_tuple = tuple(map(int, test_str.strip('()').split(',')))\n        return int_tuple\n    except ValueError:\n        return \"Invalid input. Please provide a valid tuple string.\"\n",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3) ",
        "num_ids": 2238,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "test": "assert right_insertion([1, 3, 4, 5, 7], 6) == 4  # example test case",
        "num_ids": 1702,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 21,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a.*b.*b.*b\"\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbb\") == True",
        "num_ids": 1314,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 22,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_list) + tuple(test_str)\n    return new_tup\n",
        "test": "assert new_tuple([1,2,3], \"a\") == (1,2,3,\"a\") # test case 1",
        "num_ids": 1775,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8, 10]) # True",
        "num_ids": 1622,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert remove_nested(()) == () # empty tuple",
        "num_ids": 2092,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count\n",
        "test": "assert count_list([[1,2,3],[4,5,6]]) == 2",
        "num_ids": 1485,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    last_position = -1\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_position = i\n    return last_position",
        "test": "assert last([1, 2, 3, 4, 5], 3) == 2  # test case 2",
        "num_ids": 2499,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 25,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b\"\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\ntext = \"the quick brown fox jumps over the lazy dog\"\nprint(text_starta_endb(text))  # Output: False\n\ntext = \"apple a banana b\"\nprint(text_starta_endb(text))  # Output: True\n\ntext = \"a dog b\"\nprint(text_starta_endb(text))  # Output: True",
        "test": "assert text_starta_endb('a') == False",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def return_sum(d):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    return sum(d.values())\n",
        "test": "assert return_sum({1: 2, 3: 4}) == 6",
        "num_ids": 1722,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            total += i\n    return total\n",
        "test": "assert sum_odd(2) == 1, \"sum_odd(2) should be 1\"",
        "num_ids": 1888,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 37,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n",
        "test": "assert _sum([1, 2, 3]) == 6, \"Sum of [1, 2, 3] is 6\"",
        "num_ids": 1477,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert number to binary\n    binary_num = bin(n)[2:]\n    \n    # Pad the binary number with zeros to make it 32 bits\n    if len(binary_num) < 32:\n        binary_num = '0'*(32-len(binary_num)) + binary_num\n    \n    # Rotate the bits\n    rotated_binary = binary_num[-d:] + binary_num[:-d]\n    \n    # Convert the rotated binary to decimal\n    rotated_decimal = int(rotated_binary, 2)\n    \n    return rotated_decimal\n",
        "test": "assert left_rotate(0, 1) == 0                   # 0 -> 0",
        "num_ids": 4001,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"Hello world\") == \"Helloworld\" ",
        "num_ids": 1090,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 1, 1) == 3",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    # First, check if the array is sorted\n    if arr[0] <= arr[-1]:\n        return 0\n    \n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    \n    # While the left and right pointers haven't crossed each other\n    while left < right:\n        # Find the middle index between the pointers\n        mid = (left + right) // 2\n        \n        # Check if the left half is sorted\n        if arr[left] <= arr[mid]:\n            # If it is, the rotation count is the number of elements to the left of the middle index\n            return mid - left\n        \n        # If the right half is sorted, update the pointers and repeat the process\n        right = mid\n        \n    # If we reach this point, it means the left half is not sorted, so the rotation count is the length of the array\n    return len(arr)\n",
        "test": "assert count_rotation([1, 2, 3]) == 0 # sorted array, no rotation",
        "num_ids": 2615,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False\n",
        "test": "assert is_perfect_square(17) == False # Not a perfect square number",
        "num_ids": 1674,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 4, 8]) == True",
        "num_ids": 1642,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    \n    for l in lists:\n        if sum(l) > max_sum:\n            max_sum = sum(l)\n            max_list = l\n    \n    return max_list\n",
        "test": "assert max_sum_list([[2, 3, 4], [5, 6, 7], [8, 9, 10]]) == [8, 9, 10]",
        "num_ids": 2674,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n            \n    return max(max_run, current_run)\n",
        "test": "assert max_run_uppercase(\"\") == 0  # empty string has no uppercase characters",
        "num_ids": 2239,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None\n",
        "test": "assert first_odd([1, 2, 3, 4, 5, 6, 7]) == 1",
        "num_ids": 1724,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 25,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K(((1, 2, 3), (4, 5, 6)), 7) == False",
        "num_ids": 1573,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 1, 0)) == False",
        "num_ids": 1994,
        "indeed": true
    }
]