[
    {
        "number": 2,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    # Creating a set of test_tup1 to find unique elements\n    set1 = set(test_tup1)\n    \n    # Creating a set of test_tup2 to find unique elements\n    set2 = set(test_tup2)\n    \n    # Finding the intersection of the two sets to find the common elements\n    common_elements = set1.intersection(set2)\n    \n    # Returning the common elements in a list format\n    return list(common_elements)",
        "test": "assert similar_elements((1, 2, 3), (2, 3, 4)) == [2, 3]",
        "num_ids": 539,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(3) == False",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap\n    min_heap = []\n    # Iterate over the numbers in the list\n    for num in nums:\n        # Add the number to the min heap\n        hq.heappush(min_heap, num)\n        # If the min heap has more than n elements, remove the smallest element\n        if len(min_heap) > n:\n            hq.heappop(min_heap)\n    # Reverse the min heap and return it\n    return sorted(min_heap, reverse=True)\n",
        "test": "assert heap_queue_largest([5,4,3,2,1], 5) == [5,4,3,2,1] # test case 2",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Power_Of_Two(x):\n    return x & (x-1) == 0\n",
        "test": "assert is_Power_Of_Two(2) == True",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n\ntext = \"The quick brown fox jumps over the lazy dog. The dog barks at the moon.\"\nprint(find_char_long(text))\n",
        "test": "assert find_char_long(\"The quick brown fox jumps over the lazy dog\") == ['quick', 'brown', 'jumps', 'over', 'lazy']",
        "num_ids": 552,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]",
        "test": "assert square_nums([1,2,3]) == [1,4,9] # test case 1",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    rotations = 0\n\n    for i in range(n):\n        if str[i:] == str[:n-i]:\n            rotations = n-i\n            break\n\n    return rotations\n",
        "test": "assert find_Rotations('') == 0",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Find the index of the first occurrence of the character\n    first_occ = s.find(ch)\n    \n    # Find the index of the last occurrence of the character\n    last_occ = s.rfind(ch)\n    \n    # If both indices are -1, the character is not present in the string\n    if first_occ == -1 and last_occ == -1:\n        return s\n    \n    # If the character is not present at least once in the string\n    if first_occ == -1:\n        return s[:last_occ]\n    \n    # If the character is not present at least once in the string\n    if last_occ == -1:\n        return s[:first_occ]\n    \n    # If the character is present at least once in the string\n    if first_occ < last_occ:\n        return s[:first_occ] + s[first_occ+1:last_occ] + s[last_occ+1:]\n    else:\n        return s[:last_occ] + s[last_occ+1:]\n",
        "test": "assert remove_Occ(\"hello\", \"l\") == \"heo\" # test case 1",
        "num_ids": 712,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = len(M[0])\n    \n    # Calculating the sum of each row of the matrix\n    row_sums = []\n    for i in range(n):\n        row_sum = sum(M[i])\n        row_sums.append(row_sum)\n    \n    # Sorting the matrix based on the sum of its rows\n    sorted_matrix = sorted(M, key=lambda x: sum(x))\n    \n    return sorted_matrix\n",
        "test": "assert sort_matrix([[5, 4], [2, 1]]) == [[2, 1], [5, 4]] # sort_matrix([[5, 4], [2, 1]]) should return [[2, 1], [5, 4]]",
        "num_ids": 770,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(2,3,4) == 12 # Test Case 1",
        "num_ids": 289,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'\\b[a-z]+(_[a-z]+)+\\b')\n    return bool(pattern.search(text))\n",
        "test": "assert text_lowercase_underscore(\"user_name\"), \"user_name should be true\"",
        "num_ids": 351,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n",
        "test": "assert square_perimeter(3) == 12, \"Error: the perimeter of a square with side length 3 should be 12\"",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    freq_table = [0] * NO_OF_CHARS\n    for char in string:\n        freq_table[ord(char)] += 1\n\n    result = []\n    for char in string:\n        if freq_table[ord(char)] == 0:\n            result.append(char)\n            freq_table[ord(char)] -= 1\n\n    return result\n",
        "test": "assert str_to_list(\"hello\", \"world\") == \"hello\"",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set from the array to remove duplicates\n    unique_nums = set(arraynums)\n    \n    # Check if the length of the array and the set are equal\n    if len(arraynums) == len(unique_nums):\n        return False\n    else:\n        return True\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False     #test case for non-duplicate array",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    n = len(str(x))\n    c = 0\n    for i in range(1, n):\n        if x % 10 == 0:\n            return False\n        x //= 10\n        c += 1\n        if x == 0:\n            break\n    if c == n:\n        return False\n    return True\n",
        "test": "assert is_woodall(0), \"Should return True for 0\"",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n    \n    if num == rev_num*2-1:\n        return True\n    else:\n        return False\n",
        "test": "assert rev(12321) == False",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0:\n        return 0\n    arr = sorted(arr, reverse=True)\n    digits = []\n    for digit in arr:\n        if digit > 0:\n            digits.append(str(digit))\n        else:\n            break\n    return int(''.join(digits))\n",
        "test": "assert find_Max_Num([9, 8, 7, 6, 5]) == 98765 ",
        "num_ids": 628,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert opposite_Signs(5, -3) == True, \"Incorrect output for opposite_Signs(5, -3)\"",
        "num_ids": 325,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return (n * ((2 * n) - 1)) ** 0.5",
        "test": "assert is_octagonal(1) == True",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # Initialize dictionary to store count of substrings\n    count = defaultdict(int)\n\n    # Iterate through all possible substrings\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits of current substring\n            sub_sum = sum(int(digit) for digit in str(s[i:j]))\n\n            # If the sum of digits is equal to the length of the substring\n            if sub_sum == j-i:\n                # Increment the count for the substring\n                count[s[i:j]] += 1\n\n    # Return the count dictionary\n    return count\n",
        "test": "assert count_Substrings(\"123123\") == 6",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest\n",
        "test": "assert smallest_num([4, 5, 3, 1, 2]) == 1",
        "num_ids": 353,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([9, 9, 9, 9]) == 0, \"Test 2 failed\"",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks\n",
        "test": "assert subject_marks([(90, 'Math'), (80, 'Science'), (95, 'English'), (70, 'Social Studies')]) == [('Math', 90), ('Science', 80), ('English', 95), ('Social Studies', 70)] ",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if type(element) == list:\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15 ",
        "num_ids": 374,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([-1, -2, -3, -4, -5]) == 0",
        "num_ids": 313,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bell_number(n):\n    if n == 0:\n        return 1\n    else:\n        bell_num = 1\n        for i in range(1, n+1):\n            bell_num *= i\n        return bell_num\n\ndef num_ways_to_partition(n):\n    if n == 0:\n        return 0\n    else:\n        bell_num = bell_number(n)\n        ways_to_partition = bell_num\n        for i in range(2, n+1):\n            bell_num = bell_number(n-i)\n            ways_to_partition -= bell_num\n        return ways_to_partition\n",
        "test": "assert bell_number(1) == 1",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    elif n == 2:\n        return True if A[0] <= A[1] else False\n    else:\n        for i in range(n-1):\n            if A[i] > A[i+1]:\n                return False\n    return True",
        "test": "assert is_Monotonic([1,2,3,4,5]) == True",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l)):\n            if l[i:i+len(s)] == s:\n                return True\n        return False\n",
        "test": "assert is_sublist([1, 2, 3, 4, 5], [2, 3]) == True",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(map(len, Input))) == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_equal_tuple(((1, 2), (3, 4), (5, 6))) == True",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "test": "assert comb_sort([]) == []  # Test for an empty list",
        "num_ids": 745,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Use trial and error method to check whether the number can be represented as difference of two squares or not\n    for i in range(int(n/2)+1):\n        for j in range(int(n/2)+1):\n            if i**2 + j**2 == n:\n                return True\n    # If number cannot be represented as difference of two squares, return False\n    return False\n",
        "test": "assert dif_Square(2) == True",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    for pattern in patterns:\n        if pattern == colors[count]:\n            count += 1\n            if count == len(colors):\n                return True\n        else:\n            return False\n",
        "test": "assert is_samepatterns(['red', 'blue', 'yellow'], ['*', '*', '+']) == False  # Check if ['red', 'blue', 'yellow'] follows the sequence ['*', '*', '+']",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        divisible = True\n        for element in tup:\n            if element % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1,2,3),(4,5,6)],3) == []",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(44) == True, \"is_Diff(44) should return True\"",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len('hello') == True  # check for a word with odd length",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # The formula for the nth tetrahedral number is (n * (n + 1) * (n + 2)) // 6\n    return (n * (n + 1) * (n + 2)) // 6\n",
        "test": "assert tetrahedral_number(1) == 1, \"Error in tetrahedral_number(1)\"",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n\nprint(volume_sphere(5))  # Output: 523.6\n",
        "test": "assert volume_sphere(0) == 0  # sphere with radius 0 should have a volume of 0",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total_sum = 0\n    for char in strr:\n        total_sum += ord(char)\n    return chr((total_sum % 26) + 97)",
        "test": "assert get_Char('a') == 'y', \"Incorrect result for 'a'\"",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def newman_conway(n):\n    \"\"\"\n    Return the Newman Conway sequence up to the nth number.\n    \"\"\"\n    if n == 0:\n        raise ValueError(\"Sequence does not exist for n=0\")\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n\n    sequence = [None] * (n + 1)\n    sequence[1] = 1\n    sequence[2] = 1\n\n    for i in range(3, n + 1):\n        sequence[i] = sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]]\n\n    return sequence\n\n\ndef sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n    sequence = newman_conway(n)\n    return sequence[-1]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 625,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # formula for surface area of a sphere is 4 * pi * r^2\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n",
        "test": "assert surfacearea_sphere(5) == 314.1592653589793",
        "num_ids": 352,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    else:\n        return n * (2*n - 1)\n",
        "test": "assert centered_hexagonal_number(1) == 1, \"Incorrect result for centered_hexagonal_number(1)\"",
        "num_ids": 488,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    result = ct.Counter(dict1) + ct.Counter(dict2) + ct.Counter(dict3)\n    return dict(result)\n",
        "test": "assert merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 3, 'd': 4}, {'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6} ",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Creating a dictionary to store the frequency of elements in the list.\n    freq_dict = collections.defaultdict(int)\n    \n    # Traversing through the list and updating the frequency count for each element in the dictionary.\n    for element in list1:\n        freq_dict[element] += 1\n    \n    return freq_dict\n",
        "test": "assert freq_count([1,2,3,2,1,3]) == {1: 2, 2: 2, 3: 2} ",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    start = 0\n    end = N - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if mid < N:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return start",
        "test": "assert closest_num(20) == 19, \"Function is not correct for input 20\"",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)\n",
        "test": "assert len_log(['apple', 'banana', 'pear']) == 6  # ['banana'] is the longest word in this list",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False\n",
        "test": "assert find_substring(\"abc\", \"b\") == True",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 92,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_undulating(n):\n    # Convert n to a string and split it into digits\n    digits = list(str(n))\n    \n    # Iterate over pairs of consecutive digits\n    for i in range(len(digits)-1):\n        # If the absolute difference between the two digits is less than 2,\n        # then the number is not undulating\n        if abs(int(digits[i]) - int(digits[i+1])) < 2:\n            return False\n    \n    return True\n",
        "test": "assert is_undulating(1234567) == False  # Example 2: Not an undulating number",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2,3) == 8 ",
        "num_ids": 271,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of the tuple in ascending order.\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the tuple with the smallest second value.\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(3, 2), (1, 1), (4, 3), (2, 4)]) == 3  # test case 1",
        "num_ids": 611,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1,2,3],[4,5],[6,7,8,9]]) == 2",
        "num_ids": 466,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1  # 1 is a divisor of 1",
        "num_ids": 332,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # create an empty dictionary\n    freq_dict = {}\n    \n    # iterate through the flattened list\n    for item in flat_list:\n        # if the item is already in the dictionary, increment its count\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # if the item is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[item] = 1\n            \n    return freq_dict\n",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 544,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_num(numbers):\n    # initialize the variable to store the product of all numbers\n    product = 1\n    \n    # loop through each number in the list\n    for num in numbers:\n        # multiply the product with the current number\n        product *= num\n        \n    # divide the product with the length of the list\n    result = product / len(numbers)\n    \n    return result\n",
        "test": "assert multiply_num([5, 6]) == 30.0 / 2",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = ''\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary\n",
        "test": "assert decimal_to_binary(1) == '1'",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert input integer to a string\n    num_str = str(num)\n\n    # Check if the input integer is a palindrome\n    if num_str == num_str[::-1]:\n\n        # If it is, add 1 to the last digit and pad with 0s on the left until it is the same length as the original\n        while len(num_str) < len(str(num)):\n            num_str = '0' + num_str\n\n        # Find the index of the last digit\n        last_digit_index = len(num_str) - 1\n\n        # Increment the last digit by 1, and if it is now greater than 9, carry over to the next digit\n        while last_digit_index >= 0:\n            if num_str[last_digit_index] == '9':\n                num_str = num_str[:last_digit_index] + '0' + num_str[last_digit_index+1:]\n                last_digit_index -= 1\n            else:\n                num_str = num_str[:last_digit_index] + str(int(num_str[last_digit_index]) + 1) + num_str[last_digit_index+1:]\n                break\n\n    else:\n        # If it is not a palindrome, find the first odd number that is greater than the original integer and is a palindrome\n        while True:\n            num += 1\n            num_str = str(num)\n            if num_str == num_str[::-1]:\n                break\n\n    return int(num_str)\n",
        "test": "assert next_smallest_palindrome(12) == 22  # The next smallest palindrome of 12 is 22.",
        "num_ids": 1074,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 426,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0].lower() + ''.join(w.title() for w in words[1:])\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    def a(n, m):\n        if n == 0:\n            return 1\n        elif n > 0 and m == 0:\n            return 0\n        elif n > 0 and m > 0 and n % 2 == 0:\n            return a(n - 1, m)\n        elif n > 0 and m > 0 and n % 2 == 1:\n            return a(n - 1, m - 1) + a(n - 1, m)\n    return a(n, m)\n",
        "test": "assert eulerian_num(0, 0) == 1 # test case 1",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in input_list:\n        # Sort the sublist using the built-in sorted() function\n        sorted_sublist = sorted(sublist)\n        result.append(sorted_sublist)\n    return result",
        "test": "assert sort_sublists([[\"apple\", \"banana\", \"cherry\"], [\"dog\", \"cat\", \"bird\"], [\"hello\", \"world\", \"python\"]]) == [[\"apple\", \"banana\", \"cherry\"], [\"bird\", \"cat\", \"dog\"], [\"hello\", \"python\", \"world\"]] ",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count(lst):\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, True, False]) == 2",
        "num_ids": 238,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_tup = test_tup + (test_list,)\n    return new_tup\n",
        "test": "assert add_lists([1, 2, 3], (4, 5, 6)) == ([1, 2, 3, 4, 5, 6], (4, 5, 6)) ",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    merged = []\n    heap = []\n    for num in num1:\n        heapq.heappush(heap, num)\n    for num in num2:\n        heapq.heappush(heap, num)\n    for num in num3:\n        heapq.heappush(heap, num)\n    while heap:\n        merged.append(heapq.heappop(heap))\n    return merged\n",
        "test": "assert merge_sorted_list([1,3,5], [2,4,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to an integer\n    num = int(s, 2)\n    # Find the number of odd digits in the integer\n    count = sum(int(digit) % 2 for digit in str(num))\n    # Count the number of times we rotate the binary string\n    count *= n\n    return count\n",
        "test": "assert odd_Equivalent(\"1011\", 1) == 2",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = set(nestedlist[0])\n    for lst in nestedlist:\n        common.intersection_update(lst)\n    return list(common)",
        "test": "assert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]]) == [3] ",
        "num_ids": 498,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True",
        "num_ids": 242,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def empty_dict(lst):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in lst:\n        if i:\n            return False\n    return True\n",
        "test": "assert empty_dit([{}]) == True",
        "num_ids": 249,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result *= 10\n        result += num\n    return result\n",
        "test": "assert tuple_to_int((1, 2, 3, 4)) == 1234",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n",
        "test": "assert list_to_float([[1, 2, 3], [4.5, '6.7', 8], [9, '10.11']]) == [[1.0, 2.0, 3.0], [4.5, 6.7, 8.0], [9.0, 10.11]]",
        "num_ids": 925,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"] # test the function with a string that has two words separated by space",
        "num_ids": 281,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def search(arr):\n    count = {}\n    for elem in arr:\n        if elem in count:\n            count[elem] += 1\n        else:\n            count[elem] = 1\n    for elem in count:\n        if count[elem] == 1:\n            return elem\n    return None",
        "test": "assert search([1,2,3,4,5,6,7,8,9,10]) == 1 # correct search function returns 1 as expected",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_product_tuple([(1,-2,3), (-4,5,6)]) == 30  # example from the problem statement",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    total = 0\n    for i in range(1, limit+1):\n        # compute the proper divisors of i\n        divisors = [j for j in range(1, i) if i % j == 0]\n        # compute the sum of the proper divisors\n        proper_divisors_sum = sum(divisors)\n        # if the sum of the proper divisors is equal to i and\n        # i is not equal to the sum of its proper divisors,\n        # then i is an amicable number\n        if proper_divisors_sum == i and proper_divisors_sum != sum(range(1, i)):\n            # add i to the total sum of amicable numbers\n            total += i\n    return total\n",
        "test": "assert amicable_numbers_sum(20) == 118 # 1, 2, 4, 5, 11 (2+2+4+4+11)",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b)) * 180 / cmath.pi\n    return round(angle, 2)",
        "test": "assert angle_complex(1, 0) == 0 # angle of the number 1 is 0",
        "num_ids": 324,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_length(string):\n    # Initialize variables to keep track of the number of 0s and 1s\n    count_0 = count_1 = 0\n    # Initialize a variable to keep track of the maximum difference seen so far\n    max_diff = 0\n    \n    # Loop through the characters in the string\n    for char in string:\n        # If we encounter a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # If we encounter a 1, increment the count of 1s\n        elif char == '1':\n            count_1 += 1\n        # If we encounter any other character, raise an error\n        else:\n            raise ValueError(\"Invalid character in string\")\n        # Calculate the current difference between the number of 0s and 1s\n        diff = abs(count_0 - count_1)\n        # Update the maximum difference seen so far, if necessary\n        max_diff = max(max_diff, diff)\n        \n    # Return the maximum difference seen\n    return max_diff\n",
        "test": "assert find_length(\"110101010110110\") == 4 ",
        "num_ids": 837,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n",
        "test": "assert sum(5, 10) == 15, \"sum(5, 10) should return 15\"",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2,3) == 6",
        "num_ids": 190,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert long_words(3, [\"hello\", \"world\", \"apple\", \"banana\", \"orange\", \"grape\"]) == [\"hello\", \"world\", \"apple\", \"banana\", \"orange\", \"grape\"] # no words longer than 3 characters, so return all words",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    if n == 1:\n        return False\n    if n % 2 == 0:\n        return False\n    \n    sum_diagonal = sum(my_matrix[i][i] for i in range(n))\n    sum_anti_diagonal = sum(my_matrix[i][n-i-1] for i in range(n))\n    sum_rows = sum(sum(row) for row in my_matrix)\n    sum_cols = sum(my_matrix[i][j] for i in range(n) for j in range(n))\n    \n    if sum_diagonal != sum_anti_diagonal:\n        return False\n    if sum_rows != sum_cols:\n        return False\n    \n    return True\n",
        "test": "assert magic_square_test([[8, 1, 6], [3, 5, 7], [4, 9, 3]]) == False # example non-magic square",
        "num_ids": 1396,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    for num in nums:\n        freq[num] += 1\n        max_freq = max(max_freq, freq[num])\n    for num in freq:\n        if freq[num] == max_freq:\n            return num\n",
        "test": "assert max_occurrences([1, 2, 3, 2, 1, 1]) == 1  # 1 appears twice",
        "num_ids": 647,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    reversed_vowels = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            vowel_count += 1\n            reversed_vowels += str1[i]\n    for i in range(len(str1)-vowel_count, len(str1)):\n        if str1[i] not in vowels:\n            reversed_vowels += str1[i]\n    return reversed_vowels\n",
        "test": "assert reverse_vowels(\"Python\") == \"nohtyP\"",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i)\n    return str1\n",
        "test": "assert tup_string((\"hello\", \"world\")) == \"hello,world\"",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n",
        "test": "assert sum_negativenum([-1, -2, -3, -4]) == -10",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n - 1)) // 2\n",
        "test": "assert hexagonal_num(2) == 6, \"hexagonal_num(2) should be 6\"",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    if count_non_zero == 0:\n        return 1\n    else:\n        return count_zero/count_non_zero\n",
        "test": "assert zero_count([1, 1, 1, 1, 1, 1, 1, 1]) == 0 # check for zero count ratio of 0",
        "num_ids": 570,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    \n    # convert the number to binary and count the number of ones in the binary representation\n    ones_count = 0\n    while n > 0:\n        n &= n-1\n        ones_count += 1\n    \n    # check if the number of ones is odd, then it can be represented as sum of non-zero powers of 2\n    if ones_count % 2 == 1:\n        return True\n    \n    # if the number of ones is even, then it cannot be represented as sum of non-zero powers of 2\n    return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference\n",
        "test": "assert circle_circumference(1) == 2 * 3.14 ",
        "num_ids": 382,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)\n",
        "test": "assert extract_singly([[1, 2], [3, 4], [5, 6]]) == {1, 2, 3, 4, 5, 6} ",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n-1):\n        # find the maximum element in the unsorted sublist\n        max_index = i\n        for j in range(i+1, n-i):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # if the maximum element is not in its correct position, \n        # flip the sublist till it reaches its correct position\n        if max_index != i:\n            # flip the sublist from beginning to max_index\n            for j in range(max_index, i, -1):\n                nums[i], nums[j] = nums[j], nums[i]\n            \n            # flip the sublist from end to max_index+1\n            for j in range(i+1, max_index+1):\n                nums[i], nums[j] = nums[j], nums[i]\n    \n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 898,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3,4],[1,2,3,4],[1,2,3,4]) == 4 ",
        "num_ids": 446,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == tuple:\n            count += 1\n    return count\n",
        "test": "assert find_lists(((1, 2, 3), (4, 5), (6, 7, 8))) == 3 # there are 3 lists in the given tuple",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 5]) == 4",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n    else:\n        d = gcd(a, b)\n        if d == 1:\n            x, y = extended_gcd(a, b)\n            if n % d == 0 and x * a + y * b == n:\n                return (x, y)\n            else:\n                return None\n        else:\n            return None\n\ndef gcd(a, b):\n    \"\"\"\n    Compute the greatest common divisor of a and b using Euclid's algorithm.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef extended_gcd(a, b):\n    \"\"\"\n    Compute the greatest common divisor of a and b and also return the Bezout coefficients x and y.\n    \"\"\"\n    s, old_s = 0, 1\n    t, old_t = 1, 0\n    r, old_r = b, a\n    while r != 0:\n        quotient = old_r // r\n        old_r, r = r, old_r - quotient * r\n        old_s, s = s, old_s - quotient * s\n        old_t, t = t, old_t - quotient * t\n    return old_s, old_t\n",
        "test": "assert find_solution(1, 0, 3) == (1, 2)",
        "num_ids": 1339,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new list to store elements from list1 that are not in list2\n    new_list = []\n    # Loop through each element in list1\n    for element in list1:\n        # Check if the element is not in list2\n        if element not in list2:\n            # If the element is not in list2, append it to the new list\n            new_list.append(element)\n    # Return the new list with elements not in list2 removed\n    return new_list\n",
        "test": "assert remove_elements([1, 2, 3, 4, 5], [3, 4]) == [1, 2, 5]",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_series(n):\n    total = 0\n    for i in range(n//2 + 1):\n        total += n - 2*i\n    return total\n",
        "test": "assert sum_series(0) == 0",
        "num_ids": 221,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the angle of the polygon using the formula: 360/num_sides\n    angle = 360 / s\n    \n    # calculate the radius of the polygon using the formula: length/2/tan(angle/2)\n    radius = l / (2 * tan(angle/2))\n    \n    # calculate the area of the polygon using the formula: num_sides * (1/2) * length * radius^2\n    area = s * (1/2) * l * (radius ** 2)\n    \n    return area\n",
        "test": "assert area_polygon(2, 4) == 2 # a square has 2 square units area",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    divisors = []\n    for i in range(1, math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != math.sqrt(n):\n                divisors.append(n//i)\n    divisor_sum = sum(divisors)\n    if divisor_sum % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert div_sum(12) == True ",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    str1 = str1.lower() # convert string to lowercase\n    for i in range(len(str1)):\n        if str1[i] in english_alphabet and english_alphabet.index(str1[i]) == i:\n            count += 1\n    return count\n",
        "test": "assert count_char_position(\"Hello World\") == 0, \"Function should return 0 for 'Hello World'\"",
        "num_ids": 642,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    n = len(A)\n    \n    # iterate over all pairs of integers in A\n    for i in range(n):\n        for j in range(i+1, n):\n            # check if xoring A[i] and A[j] gives an even number\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    \n    return count\n",
        "test": "assert find_even_pair([1, 2, 3, 4]) == 2  # [1, 4] and [2, 3] are the even pairs in this list. ",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # initialize the power of 2 as 2^0\n    power_of_2 = 1\n    \n    # loop through 0 to log2(n)\n    for i in range(int(math.log2(n))+1):\n        # multiply the power of 2 by 2\n        power_of_2 *= 2\n    \n    # return the smallest power of 2 greater than or equal to n\n    return power_of_2\n",
        "test": "assert next_power_of_2(1) == 2 ",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def frequency(a,x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6,7,8,9], 3) == 1",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize sum variable to zero\n    total = 0\n    # iterate over the range specified by m and n\n    for i in range(m, n+1):\n        # add the ith element of list1 to the total\n        total += list1[i]\n    # return the total sum\n    return total\n",
        "test": "assert sum_range_list([1, 2, 3, 4, 5], 1, 3) == 9",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n",
        "test": "assert perimeter_pentagon(1) == 5",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count",
        "test": "assert count_occurance('std') == 1",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    # Check if the tuple is empty\n    if len(test_tuple) == 0:\n        return True\n    \n    # Get the data type of the first element in the tuple\n    first_type = type(test_tuple[0])\n    \n    # Check if all elements in the tuple have same data type as the first element\n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    \n    # If all elements have same data type, return True\n    return True\n",
        "test": "assert check_type((\"Hello\", \"World\", \"Python\")) == True # Testing string tuple",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element\n    and returns whether the element is the majority element in the given sorted array.\n    (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False\n",
        "test": "assert is_majority([1, 1, 1, 1, 1, 1], 6, 1) == True  # Test case 2",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0b11010110) == 5 ",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n",
        "test": "assert odd_values_string(\"hello world\") == \"hlowrd\"",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(1, 2, 3) == 1",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # We can check if all the bits are unset by checking if the binary representation of all the numbers in the range have only zeros.\n    # We can use the fact that binary representation of a number is unique for a given value.\n    for i in range(l,r+1):\n        if bin(i)[2:] != '0'*len(bin(i)[2:]):\n            return False\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(5,1,4) == False # All bits unset in range 1 to 4",
        "num_ids": 634,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def re_arrange_array(arr, n):\n    # Create two empty lists for positive and negative elements\n    pos = []\n    neg = []\n\n    # Iterate over the array\n    for i in range(n):\n        # If the element is positive, add it to the positive list\n        if arr[i] >= 0:\n            pos.append(arr[i])\n        # If the element is negative, add it to the negative list\n        else:\n            neg.append(arr[i])\n\n    # Combine the two lists and return the result\n    return neg + pos\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, -5], 2) == [-1, -3, 2, 4, -5]",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == \" \":\n            new_str += char\n        else:\n            new_str += i\n    return new_str",
        "test": "assert replace_blank(\"Hello World\", \"!\") == \"Hello!World\"",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a heap to keep track of the largest items\n    heap = []\n    for item in list1:\n        # Add each item to the heap\n        heapq.heappush(heap, item)\n        # If the heap has more than n items, remove the smallest one\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Extract the largest items from the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    # Reverse the result to get the n largest items in descending order\n    result.reverse()\n    return result\n",
        "test": "assert larg_nnum([5, 4, 3, 2, 1], 2) == [5, 4] ",
        "num_ids": 627,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Calculate the lateral surface area using the formula: 2\u03c0r^2 + 2\u03c0rh\n    lateral_surface_area = 2 * math.pi * r**2 + 2 * math.pi * r * h\n    return lateral_surface_area\n",
        "test": "assert lateralsuface_cylinder(1,5) == 38.45147306341318, \"Incorrect lateral surface area calculation for r=1 and h=5\"",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume",
        "test": "assert volume_cube(2) == 8, \"Incorrect volume_cube calculation for side length 2\" ",
        "num_ids": 296,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Using bitwise operations to set even bits\n    result = 0\n    for i in range(32):\n        if n & (1 << i) != 0:\n            result |= (1 << i)\n    return result\n",
        "test": "assert even_bit_set_number(10) == 10  # all bits are set to 1 except for the least significant bit",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n",
        "test": "assert check_occurences([(1, 2), (2, 3), (1, 2), (1, 2), (2, 3)]) == {(1, 2): 3, (2, 3): 2}",
        "num_ids": 789,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count\n",
        "test": "assert number_of_substrings('') == 0 ",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    else:\n        total_sequences = 0\n        for i in range(2, m+1):\n            if i % 2 == 0:\n                continue\n            total_sequences += get_total_number_of_sequences(m, n-1)\n        return total_sequences\n",
        "test": "assert get_total_number_of_sequences(5, 3) == 4, \"Test 1 failed\"",
        "num_ids": 457,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def replace_list(list1, list2):\n    # Check if the second list is longer than the first\n    if len(list2) > len(list1):\n        raise ValueError(\"The second list must not be longer than the first\")\n    # Replace the last element of the first list with the elements of the second\n    list1[-1:] = list2\n    return list1\n",
        "test": "assert replace_list([1,2,3,4], [5,6]) == [1,2,3,5,6] ",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 242,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello world\") == 11",
        "num_ids": 263,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Calculate the square root of the given number\n    sqrt_N = math.sqrt(N)\n    \n    # Calculate the next perfect square by adding 1 to the square root\n    next_sqrt = math.ceil(sqrt_N) + 1\n    \n    # Return the next perfect square\n    return next_sqrt ** 2\n",
        "test": "assert next_Perfect_Square(16) == 25 ",
        "num_ids": 533,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    # Initialize dp array with values of each element in arr\n    dp = arr.copy()\n    \n    # Loop through each element in arr\n    for i in range(1, n):\n        # If current element is greater than previous element, update dp value\n        if arr[i] > arr[i-1]:\n            dp[i] = max(dp[i], dp[i-1]+arr[i])\n    \n    # Reverse the array and initialize dp array with values of each element in arr\n    rev_arr = arr[::-1]\n    rev_dp = rev_arr.copy()\n    \n    # Loop through each element in arr\n    for i in range(1, n):\n        # If current element is greater than previous element, update dp value\n        if rev_arr[i] > rev_arr[i-1]:\n            rev_dp[i] = max(rev_dp[i], rev_dp[i-1]+rev_arr[i])\n    \n    # Find the maximum value between the two dp arrays\n    max_sum = max(max(dp), max(rev_dp))\n    \n    return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2  # initial guess\n    tolerance = 0.000000001  # desired precision\n    while abs(guess**2 - number) > tolerance:\n        guess = (guess + number / guess) / 2  # update guess\n    return guess\n",
        "test": "assert babylonian_squareroot(4) == 2",
        "num_ids": 560,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def lps(str):\n    n = len(str)\n    if n == 0:\n        return 0\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for start in range(n-1, -1, -1):\n        for end in range(start+1, n):\n            if str[start] == str[end]:\n                dp[start][end] = dp[start+1][end-1] + 2\n            else:\n                dp[start][end] = max(dp[start+1][end], dp[start][end-1])\n    return dp[0][n-1] ",
        "test": "assert lps(\"bbbab\") == 4 ",
        "num_ids": 669,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return None\n    else:\n        sum = 0\n        for i in range(1, n):\n            sum += 1/i\n        return sum\n",
        "test": "assert harmonic_sum(2) == 1.1666666666666667",
        "num_ids": 395,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert intersection_array([1,2,3],[1,2,4]) == [1,2] ",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1,2,3,4,5), 3) == 1 # Test 1",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def insert_element(lst, elem):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in lst:\n        result.append(elem)\n        result.append(item)\n    return result\n",
        "test": "assert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]  # insert 0 before each element in the list [1, 2, 3]",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if type(numbers) != list:\n        numbers = [numbers]\n    \n    polar_coordinates = []\n    for number in numbers:\n        abs_num = abs(number)\n        phase_num = cmath.phase(number)\n        polar_coordinates.append((abs_num, phase_num))\n    \n    return polar_coordinates",
        "test": "assert convert(2-5j) == (5.0, 0.384072547131015)",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1, 2, 3, 4, 5]) == 5  # test for a list of integers",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]",
        "num_ids": 879,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(1) == 0, \"Error in count_Primes_nums for n=1\"",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert swap_numbers(10,20) == (20, 10)  # tests that swapping 10 and 20 returns (20, 10)",
        "num_ids": 274,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    if max_tup1 > max_tup2:\n        return test_tup1\n    else:\n        return test_tup2\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6) ",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def newman_prime(n):\n    if n <= 0:\n        return None\n    \n    primes = []\n    i = 2\n    while len(primes) < n:\n        is_prime = True\n        for p in primes:\n            if i % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 2\n    \n    return primes[-1]\n",
        "test": "assert newman_prime(1) == 2, \"Test 1 failed\"",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Perform mathematical division operation element-wise across two tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            raise ValueError(\"Divisor cannot be zero.\")\n        result += (test_tup1[i] / test_tup2[i],)\n    return result\n",
        "test": "assert division_elements((10, 20, 30), (3, 4, 5)) == (3.3333333333333335, 5.0, 6.0) ",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 12,
        "answer": "def split_two_parts(list1, L):\n    # check if L is valid\n    if L > len(list1) or L <= 0:\n        raise ValueError(\"Invalid length L\")\n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # return the resulting lists in a tuple\n    return (part1, part2)\n",
        "test": "assert split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5]), \"Incorrect output for split_two_parts([1, 2, 3, 4, 5], 2)\"",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years",
        "test": "assert dog_age(2) == 24 # if a human is 2 years old, their dog is 24 years old",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_split(S, step):\n    # Initialize an empty list to store the result\n    result = []\n\n    # Iterate over the list with a step of n\n    for i in range(0, len(S), step):\n        # Append a new list containing the n elements to the result\n        result.append(S[i:i+step])\n\n    return result",
        "test": "assert list_split([1,2,3,4,5,6,7,8,9], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9]] # test if list_split works correctly when step is 2",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Find the lateral surface area of a cube using the formula 6x^2\n    lateral_surface = 6 * l ** 2\n    \n    # Return the lateral surface area of the cube\n    return lateral_surface\n",
        "test": "assert lateralsurface_cube(1) == 6, \"Incorrect lateral surface area for side length 1\"",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n*2, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n",
        "test": "assert square_Sum(1) == 1, \"Error in square_Sum(1)\"",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    \"\"\"\n    star = 0\n    num_stars = 0\n    while num_stars < n:\n        star += 1\n        num_stars += star\n    return star\n",
        "test": "assert find_star_num(1) == 1  # check if find_star_num(1) returns 1",
        "num_ids": 374,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('A') == 65  # checks if the ascii value of 'A' is 65",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def sum_even_and_even_index(arr):\n    # initialize sum to 0\n    sum = 0\n    # loop through the array and check for even numbers at even positions\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    # return the sum\n    return sum\n",
        "test": "assert sum_even_and_even_index([4, 6, 3, 8, 2]) == 14",
        "num_ids": 482,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize a variable to keep track of the sum\n    sum = 0\n    \n    # Loop through the first n even natural numbers\n    for i in range(1, 2*n+1, 2):\n        # Raise each even number to the fifth power and add to the sum\n        sum += i**5\n    \n    # Return the sum\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list\n",
        "test": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]  # test case 1",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] - test_tup2[i],)\n    return result\n",
        "test": "assert substract_elements((10,20,30,40,50),(2,4,6,8,10)) == (8,16,24,32,40) ",
        "num_ids": 656,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(0, n+1, 2):\n        sum += int(math.factorial(n)/(math.factorial(i)*math.factorial(n-i)))\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(0) == 1, \"Function should return 1 for n=0\"",
        "num_ids": 469,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r * r * h\n    return volume\n",
        "test": "assert volume_cylinder(2, 3) == 125.1330577856515, \"Error: volume_cylinder is not correct.\" ",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result\n",
        "test": "assert dict_filter({\"a\": 10, \"b\": 5, \"c\": 8}, 6) == {\"a\": 10, \"c\": 8}  # test case 1",
        "num_ids": 491,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements(('a', 'b', 'c', 'd', 'e')) == 0",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # Find the nth decagonal number by using the formula 0.5n^2 + 0.5n - 1/12\n    decagonal_num = 0.5 * n ** 2 + 0.5 * n - 1/12\n    return round(decagonal_num, 2)  # Round to 2 decimal places\n",
        "test": "assert is_num_decagonal(2) == 21, \"Second decagonal number is 21\"",
        "num_ids": 370,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    while index < len(dlist):\n        if dlist[index] == item:\n            return (True, index)\n        index += 1\n    return (False, -1)\n",
        "test": "assert sequential_search([1,2,3,4,5], 3) == (True, 2)",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert all_unique([1, 2, 3, 4, 5]) == True",
        "num_ids": 282,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(min(len(nums1), len(nums2))):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1,2,3],[4,5,6]) == [-3,-3,-3]",
        "num_ids": 497,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    num_str = str(n)\n    digit_count = {}\n    for digit in num_str:\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    \n    for digit in num_str:\n        if digit_count[digit] > int(digit):\n            return False\n    \n    return True\n",
        "test": "assert validate(123456789) # should return True",
        "num_ids": 516,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    Takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == elem for x in lst):\n        return True\n    else:\n        return False\n",
        "test": "assert check_element([1,2,3,4,5], 1) == False",
        "num_ids": 360,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = r'a(bb|b{2,3})'\n    return re.search(regex, text) is not None\n",
        "test": "assert text_match_two_three(\"abbb\") == True",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create the modified array by repeating the given array k times\n    mod_a = []\n    for i in range(k):\n        mod_a.extend(a)\n    # find the largest sum of a contiguous subarray in the modified array\n    return max_subarray_sum(mod_a)\n\n\ndef max_subarray_sum(a):\n    '''\n    Find the largest sum of a contiguous subarray in the given array.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, len(a)):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "test": "assert max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 3, 2) == 7 ",
        "num_ids": 1149,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 299,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    max_lists = []\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_lists = [lst]\n        elif len(lst) == max_length:\n            max_lists.append(lst)\n    return max_lists\n",
        "test": "assert max_length([[1,2,3],[4,5],[6]]) == 1",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a 2D array to store the number of ways to paint each sub-fence\n    ways = [[0 for _ in range(n+1)] for _ in range(k+1)]\n    \n    # Base case: if there are 0 or 1 posts, there is only one way to paint them\n    for i in range(k+1):\n        ways[i][0] = 1\n        ways[i][1] = 1\n    \n    # If there are more than 2 posts, paint them in such a way that no more than 2 adjacent posts have the same color\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            ways[j][i] = ways[j][i-1] + ways[j-1][i-2]\n    \n    # Return the number of ways to paint the fence\n    return ways[k][n]\n",
        "test": "assert count_no_of_ways(1, 2) == 1",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "test": "assert find(10,3) == 3  # test for the quotient of 10 and 3 ",
        "num_ids": 232,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using the Pythagorean theorem, we can find the hypotenuse (c) of a right triangle\n    c = math.sqrt(w**2 + h**2)\n    # Return the hypotenuse as the third side of the right triangle\n    return c\n",
        "test": "assert otherside_rightangle(3,4) == 5",
        "num_ids": 392,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0] # initialize max_val as the first element in the list\n    \n    # loop through each element in the list\n    for i in listval:\n        # if the current element is greater than max_val, update max_val\n        if i > max_val:\n            max_val = i\n    \n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5",
        "num_ids": 505,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def sum_div(number):\n    # Initialize sum to zero\n    sum = 0\n    \n    # Loop through all numbers from 1 to number (inclusive)\n    for i in range(1, number+1):\n        # Check if i is a divisor of number\n        if number % i == 0:\n            # Add i to the sum\n            sum += i\n    \n    # Return the sum of all divisors of number\n    return sum\n",
        "test": "assert sum_div(1) == 1  # The only divisor of 1 is 1. The sum of all divisors of 1 is 1.",
        "num_ids": 491,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n\n    return count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0",
        "num_ids": 732,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for i in list1:\n        if type(i) == list:\n            flat_list.extend(flatten_list(i))\n        else:\n            flat_list.append(i)\n    return flat_list\n",
        "test": "assert flatten_list([1, 2, [3, 4], [5, [6, 7]], 8]) == [1, 2, 3, 4, 5, 6, 7, 8] # nested list with mixed depth",
        "num_ids": 610,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the values of each state for each year\n    state_dict = defaultdict(list)\n    \n    # iterate through the list of tuples and add the values to the dictionary\n    for state, year, value in stdata:\n        state_dict[state].append((year, value))\n    \n    # iterate through the dictionary to calculate the maximum aggregate for each state\n    max_aggs = {}\n    for state, year_val_list in state_dict.items():\n        max_agg = 0\n        for i in range(len(year_val_list)):\n            for j in range(i+1, len(year_val_list)):\n                agg = sum([x[1] for x in year_val_list[i:j+1]])\n                if agg > max_agg:\n                    max_agg = agg\n        max_aggs[state] = max_agg\n    \n    # return the maximum aggregate for each state as a dictionary\n    return max_aggs\n",
        "test": "assert max_aggregate([(1, 2), (3, 4), (5, 6), (-1, 2)]) == 12",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def count_binary_seq(n):\n    if n == 1:\n        return 1\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-1)\n\n\ndef main():\n    n = int(input(\"Enter the value of n: \"))\n    print(\"Count of binary sequences of length 2n with same sum of first n and last n bits:\", count_binary_seq(n))\n\n\nif __name__ == '__main__':\n    main()\n",
        "test": "assert count_binary_seq(3) == 4, \"Function should return 4 for n = 3\"",
        "num_ids": 852,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def dict_depth(d, depth=1):\n    \"\"\"\n    Recursively find the depth of a dictionary.\n    \"\"\"\n    max_depth = depth\n    for value in d.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value, depth + 1))\n    return max_depth",
        "test": "assert dict_depth({}) == 1, \"Empty dictionary should have depth 1\"",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find element at a given index after number of rotations.\n    \"\"\"\n    if index < 0 or index >= len(arr):\n        return None\n    rotation_sum = sum(ranges)\n    if index < rotation_sum:\n        return arr[index]\n    rotation_sum = 0\n    for i, r in enumerate(ranges):\n        if rotation_sum + r > index:\n            break\n        rotation_sum += r\n    rotation = rotations[i]\n    return arr[(index - rotation_sum + rotation) % len(arr)]",
        "test": "assert find_Element([1, 2, 3, 4, 5], [1, 4], [0, 2], 3) == 4 # rotated to index 2 and then to index 0, so element at index 3 is 4 ",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "import re\n\ndef start_withp(words):\n    # Create a regular expression pattern to match words starting with 'p'\n    pattern = re.compile(r'\\b[pP]\\w+')\n\n    # Use the findall() method to find all matches of the pattern in the list of words\n    matches = re.findall(pattern, ' '.join(words))\n\n    # Return the first two matches, or an empty list if there are less than two matches\n    return matches[:2] if len(matches) >= 2 else []\n",
        "test": "assert start_withp(['python', 'java', 'php', 'perl']) == ['python', 'php']",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n\n    # Initialize variables\n    i = index\n    k = k - index - 1\n    incl = 0\n    excl = 0\n    incl_list = [0] * n\n    excl_list = [0] * n\n\n    # Loop through the array and calculate the maximum sum of increasing subsequence up to ith index including kth element\n    for i in range(n):\n        if i == index:\n            incl = a[i]\n            excl = 0\n        elif i < index:\n            incl_list[i] = excl_list[i]\n            excl_list[i] = max(incl_list[i], excl_list[i])\n        else:\n            incl_list[i] = incl + a[i]\n            excl_list[i] = max(incl_list[i], excl_list[i-1])\n\n        # Check if kth element is included in the maximum sum\n        if i == k:\n            max_sum = excl_list[k]\n\n    return max_sum\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 2) == 9 ",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    \n    # Make a deep copy of the tuplex\n    copy_tuplex = deepcopy(tuplex)\n    \n    # Slice the copy of the tuplex\n    sliced_tuplex = copy_tuplex[m:n]\n    \n    return sliced_tuplex\n",
        "test": "assert colon_tuplex((), 0, 0) == ()",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    if len(nums1) < N or len(nums2) < N:\n        return \"One of the lists is too small to find the specified number of products.\"\n    \n    products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        products.append(product)\n    \n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([1,2,3,4,5], [6,7,8,9,10], 3) == [90, 120, 150] ",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(10, 20) == 20",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\")",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if (n & (n-1)) == 0:\n        return n | (1 << 31)\n    else:\n        return n | (~n & -~n)\n",
        "test": "assert set_left_most_unset_bit(0b10010) == 0b10011",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume",
        "test": "assert volume_cone(2, 3) == 15.393, \"Error: Incorrect volume for r=2, h=3\"",
        "num_ids": 309,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n",
        "test": "assert highest_Power_of_2(10) == 8 ",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the n'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev = 2\n        curr = 1\n        for i in range(2, n + 1):\n            next_num = prev + curr\n            prev = curr\n            curr = next_num\n        return curr\n",
        "test": "assert find_lucas(0) == 2",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list",
        "test": "assert add_string([1, 2, 3], \"number\") == [\"1number\", \"2number\", \"3number\"]",
        "num_ids": 418,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Check if the lengths of the lists are equal\n    if len(l1) != len(l2) or len(l1) != len(l3):\n        return \"Error: Length of lists are not equal.\"\n    \n    # Create an empty dictionary to store the result\n    result = {}\n    \n    # Loop through the lists and add them to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    \n    return result\n",
        "test": "assert convert_list_dictionary([],[], []) == {}",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = get_max_sum(n//2)\n        b = get_max_sum(n//3)\n        c = get_max_sum(n//4)\n        d = get_max_sum(n//5)\n        return max(n, a+b+c+d)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 530,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_length_list(input_list):\n    max_length = 0\n    max_list = []\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]) == [1, 2, 3]",
        "num_ids": 447,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    set_tup = set(test_tup)\n    \n    # Compare the lengths of the tuple and the set\n    if len(test_tup) == len(set_tup):\n        return True\n    else:\n        return False\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None\n",
        "test": "assert first_non_repeating_character(\"aabbcd\") == 'c', \"First non-repeating character is not 'c'\"",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False",
        "test": "assert check_char(\"hello\") == False",
        "num_ids": 344,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n    \n    # Calculate the median\n    if len(numbers) % 2 == 0:\n        median = (numbers[1] + numbers[2]) / 2\n    else:\n        median = numbers[1]\n    \n    return median\n",
        "test": "assert median_numbers(3, 5, 1) == 3",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = 0\n        for digit in str(num):\n            digits_sum += int(digit)\n        result.append(digits_sum)\n    return result\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24]  # Test 1",
        "num_ids": 487,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i], )\n    return result_tup\n",
        "test": "assert bitwise_xor((0, 0, 0, 0), (0, 0, 0, 0)) == (0, 0, 0, 0)",
        "num_ids": 571,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        freq[tup] = freq.get(tup, 0) + 1\n    return len(freq)\n",
        "test": "assert extract_freq([(1,2), (3,4), (1,2), (5,6), (3,4), (5,6)]) == 3 # [(1,2), (3,4), (5,6)]",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            result += (test_tup1[i][j] + test_tup2[i][j],)\n    return result\n",
        "test": "assert add_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((6, 8), (10, 12)) # (1 + 5, 2 + 6), (3 + 7, 4 + 8) ",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(1,2) == 1",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n",
        "test": "assert check_tuplex((\"apple\", \"banana\", \"cherry\"), \"mango\") == False  # example 2",
        "num_ids": 327,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 != 0:\n        return True\n    else:\n        return False\n",
        "test": "assert find_Parity(1) == True # 1 is odd",
        "num_ids": 251,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rearrange_bigger(n):\n    # Convert the input number to a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Initialize a list to store the digits of the next bigger number\n    next_bigger = []\n\n    # Iterate through the sorted digits, adding the smallest one to the end of the list\n    # and removing it from the original list\n    for i in range(len(digits)):\n        next_bigger.append(digits.pop(0))\n\n    # Convert the list of digits back to an integer and return it\n    return int(''.join(str(d) for d in next_bigger))\n",
        "test": "assert rearrange_bigger(54321) == 54321, \"Incorrect output for 54321\" ",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1:\n        for i in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (num + nums2[i], num, nums2[i]))\n            else:\n                break\n    return [(heap[i][1], heap[i][2]) for i in range(len(heap))[:k]]\n",
        "test": "assert k_smallest_pairs([1, 2], [3, 4], 2) == [(1, 3), (1, 4)]",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def min_product_tuple(list1):\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product",
        "test": "assert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == 6 ",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if isinstance(val, (int, float)):\n            if val < min_val:\n                min_val = val\n    return min_val\n",
        "test": "assert min_val([4, 5, 6, 7, 8, 9]) == 4",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub(r'_([a-z])', lambda m: m.group(1).upper(), word)\n    return word[0].lower() + word[1:]",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\" # snake case to camel case",
        "num_ids": 347,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create an empty list to store even numbers\n    even_list = []\n    # iterate over the input list\n    for num in l:\n        # check if the number is even\n        if num % 2 == 0:\n            # if it is even, append it to the even list\n            even_list.append(num)\n    # return the even list\n    return even_list",
        "test": "assert remove_odd([1, 2, 3, 4]) == [2, 4] # odd numbers 1 and 3 are removed from the list",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    result = []\n    for i in list1:\n        result.append(i[n-1])\n    return result\n",
        "test": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == (5, 6) ",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert overlapping([1,2,3],[4,5,6]) == False #test1",
        "num_ids": 425,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = []\n    min_product = float('inf')\n    min_pair = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n            if product < min_product:\n                min_product = product\n                min_pair = [arr[i], arr[j]]\n    return max_pair if max_product > 0 else min_pair\n",
        "test": "assert max_Product([-10, 10, 5, 2]) == 50",
        "num_ids": 627,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common.append(Input[i])\n                common.append(Input[j])\n    return common\n",
        "test": "assert group_tuples([(1, 2), (1, 4), (2, 3), (2, 4), (3, 4), (1, 2), (2, 3), (3, 4)]) == [(1, 2, 4), (2, 3, 4), (1, 2, 3, 4)] ",
        "num_ids": 867,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem\n",
        "test": "assert Find_Max(['cat', 'dog', 'bird']) == 'bird' ",
        "num_ids": 369,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        rounded = round(num)\n        total += rounded\n    print(total * len(lst))\n",
        "test": "assert round_and_sum([4.5, 6.3, 7.2]) == 42.0, \"Rounding failed\"",
        "num_ids": 413,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n+1, 2):\n        sum += i**3\n    return sum\n",
        "test": "assert cube_Sum(1) == 1  # Test case for n = 1",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i) + delimiter\n    return result[:-1]",
        "test": "assert concatenate_tuple(()) == \"\"",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 3\n    average = total / (n * (n+1) * (n+2) / 6)\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1, \"Test case 1 failed\"",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for element in test_tuple:\n        result.append(element[-1])\n    return result\n",
        "test": "assert extract_rear((\"apple\", \"banana\", \"cherry\")) == (\"l\", \"a\", \"r\") ",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 425,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([1,2,3,3,3,3], 3) == 5",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2 != 0, nums))\n",
        "test": "assert filter_oddnumbers([1,2,3,4,5,6]) == [1,3,5]  # test case 1",
        "num_ids": 326,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return 'Invalid date format'\n",
        "test": "assert change_date_format('2022-02-08') == '08-02-2022' ",
        "num_ids": 657,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n",
        "test": "assert shell_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i],)\n        else:\n            result_tup += (False,)\n    return result_tup\n",
        "test": "assert and_tuples((True, False), (False, True)) == (False, False)",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n    return directrix",
        "test": "assert parabola_directrix(1, -3, 2) == 1  # y = x^2 + 1, directrix y = -1",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False\n",
        "test": "assert common_element([1,2,3], [4,5,6]) == False  # Test case 1",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (0.5 * (base1 + base2) * height) ** 0.5\n    return median\n",
        "test": "assert median_trapezium(10,20,15) == 15  # Test 1",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 2) == True  # Assert that check_greater returns True for a valid input",
        "num_ids": 365,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a.*?b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one(\"abbbb\") == True",
        "num_ids": 286,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n > 0:\n        n = n // 10\n    return n\n",
        "test": "assert last_Digit(9876543210) == 0",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 436,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums\n",
        "test": "assert neg_nos([1,2,3,4,-5,-6,-7]) == [-5,-6,-7]",
        "num_ids": 398,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_string = ''\n    for i in str1:\n        if i.isdigit():\n            if int(i) % 2 == 0:\n                new_string += i\n        else:\n            new_string += i\n    return new_string\n",
        "test": "assert remove_odd(\"\") == \"\"",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[i][0]) == test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([(1,2),(3,2),(2,3),(1,3),(4,5)]) == 1  # test case 2",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result\n",
        "test": "assert multiple_to_single([1, 2, 3]) == 123, \"Test 1 failed\"",
        "num_ids": 367,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b(before|after|early|late|recently)\\b', text.lower())\n    \n    if len(adverbs) > 0:\n        adverb = adverbs[0]\n        position = text.lower().find(adverb)\n        return (adverb, position)\n    else:\n        return None\n",
        "test": "assert find_adverb_position(\"The dog barks loudly\") == ([(0, 1, 'loudly')]) ",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    # calculate the surface area of the cube\n    surface_area = 6 * l * l\n    \n    # return the surface area\n    return surface_area\n",
        "test": "assert surfacearea_cube(1) == 6, \"Incorrect surface area calculation for a cube with length 1\"",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from array import array\n\ndef positive_count(nums):\n    count_positive = 0\n    for num in nums:\n        if num > 0:\n            count_positive += 1\n    \n    return count_positive / len(nums)\n",
        "test": "assert positive_count([1, 2, 3, 4, 5]) == 5/5",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = None\n    for num in list1:\n        if num < 0:\n            if largest_neg is None or num > largest_neg:\n                largest_neg = num\n    return largest_neg",
        "test": "assert largest_neg([2, 1, 3, -5, 7]) == -5 ",
        "num_ids": 396,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = tuple(x for x in tup if abs(x) > K)\n        if new_tup:\n            result.append(new_tup)\n    return result\n",
        "test": "assert trim_tuple([(1,2,3),(4,5,6),(7,8,9)], 2) == [(1,2),(4,5),(7,8)]  # test case 2",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 12,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    # Create a Counter object from tuple\n    c = Counter(tup)\n    # Initialize a dictionary to store the count of elements in the list\n    count_dict = {}\n    # Iterate over the elements of the list\n    for elem in lst:\n        # If the element is in the tuple, add its count to the dictionary\n        if elem in c:\n            count_dict[elem] = c[elem]\n    # Return the dictionary\n    return count_dict\n",
        "test": "assert count_Occurrence(('a', 'b', 'c', 'a', 'b', 'd'), ['a', 'b', 'c']) == {'a': 2, 'b': 2, 'c': 1}",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n",
        "test": "assert cube_nums([1,2,3,4,5]) == [1,8,27,64,125]",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def is_perrin_number(num):\n        '''\n        Helper function to check if a number is a perrin number or not.\n        '''\n        sum_digits = 0\n        num_str = str(num)\n        for digit in num_str:\n            sum_digits += int(digit)\n        return num_str == str(sum_digits)\n\n    def generate_perrin_numbers(n):\n        '''\n        Helper function to generate all the perrin numbers up to a given limit.\n        '''\n        perrin_numbers = []\n        for num in range(1, n+1):\n            if is_perrin_number(num):\n                perrin_numbers.append(num)\n        return perrin_numbers\n\n    # Generate all the perrin numbers up to n\n    perrin_numbers = generate_perrin_numbers(n)\n\n    # Calculate the sum of perrin numbers\n    perrin_sum = sum(perrin_numbers)\n\n    return perrin_sum\n",
        "test": "assert cal_sum(0) == 0",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str), l):\n        result.append(str[i:i+l])\n    return result\n",
        "test": "assert extract_string(\"python is awesome\", 7) == \"python i\"",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)",
        "test": "assert remove_whitespaces(\"This is a test string. \") == \"Thisisateststring.\"",
        "num_ids": 273,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0\n",
        "test": "assert loss_amount(100, 110) == 10",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Returns the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            if n // i != i:\n                if (n // i) % 2 == 0:\n                    sum += n // i\n    return sum\n",
        "test": "assert sumofFactors(1) == 0, \"Error in sumofFactors(1)\"",
        "num_ids": 532,
        "indeed": true
    },
    {
        "number": 454,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*\\b')\n    matches = pattern.findall(text)\n    return matches\n",
        "test": "assert text_match_wordz(\"I have a beautiful day\") == False",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 == 2:\n        return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(2) == False, \"Function should return False for February\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow'] ",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    min_sublist = lst\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([1,2,3]) == 1, \"Error: Expected 1\"",
        "num_ids": 565,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area",
        "test": "assert rectangle_area(5, 10) == 50 ",
        "num_ids": 269,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Find all uppercase substrings and replace them with empty string\n    str1 = re.sub('[A-Z]+', '', str1)\n    return str1\n",
        "test": "assert remove_uppercase(\"\") == \"\" # example input/output pair 2",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted = []\n    for sublist in lst:\n        extracted.append(sublist[0])\n    return extracted\n",
        "test": "assert Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7] ",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr(\"HELLO WORLD\") == 10",
        "num_ids": 295,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        result = []\n        for i in range(len(list1)):\n            for comb in combinations_list(list1[i+1:]):\n                result.append([list1[i]] + comb)\n        return result\n",
        "test": "assert combinations_list([1]) == [[1]] # check if the function returns a list with the element itself",
        "num_ids": 590,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    min_product = arr[0]\n    max_sum = arr[0]\n    \n    for i in range(1, len(arr)):\n        # Case 1: Product of current number and previous max_product\n        if arr[i] > 0:\n            max_product = max(max_product * arr[i], arr[i])\n            min_product = min(min_product * arr[i], arr[i])\n            max_sum = max(max_sum * arr[i], arr[i])\n            \n        # Case 2: Product of current number and previous max_product\n        elif arr[i] < 0:\n            max_product = max(min_product * arr[i], arr[i])\n            min_product = min(max_product * arr[i], arr[i])\n            max_sum = max(max_sum * arr[i], arr[i])\n            \n        # Case 3: Current number is 0\n        else:\n            max_product = arr[i]\n            min_product = arr[i]\n            max_sum = arr[i]\n            \n    return max_sum\n",
        "test": "assert max_subarray_product([1, 2, 3, 4, 5]) == 120",
        "num_ids": 977,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_value(d, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(d) == 0:\n        return False\n    first_value = None\n    for value in d.values():\n        if first_value is None:\n            first_value = value\n        elif value != first_value:\n            return False\n    return True\n",
        "test": "assert check_value({1: 1, 2: 1, 3: 1}, 1) == True",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1.copy():\n        if dict1[key] == '':\n            del dict1[key]\n    return dict1\n",
        "test": "assert drop_empty({'a': 1, 'b': 0, 'c': ''}) == {'a': 1, 'b': 0}  # empty string and zero value should not be dropped",
        "num_ids": 489,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def max_product(arr):\n    if not arr: # if the array is empty\n        return None\n    \n    n = len(arr)\n    max_product = 0\n    max_so_far = [0] * n # initialize max_so_far to all zeros\n    max_ending_here = [0] * n # initialize max_ending_here to all zeros\n    \n    max_ending_here[0] = arr[0]\n    max_product = arr[0]\n    \n    for i in range(1, n):\n        max_ending_here[i] = max(max_ending_here[i-1] * arr[i], arr[i])\n        max_product = max(max_product, max_ending_here[i])\n        \n    return max_product\n",
        "test": "assert max_product([-1,-2,-3,4,5]) == 20",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i]+test_tup[i+1],)\n    return result\n",
        "test": "assert add_pairwise((1,2,3,4)) == (3, 5, 7) ",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product\n",
        "test": "assert find_remainder([1, 2, 3, 4], 5) == 0 ",
        "num_ids": 384,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i] == 1:\n            return True\n    return False",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    result = tuple(intersection)\n    return result\n",
        "test": "assert tuple_intersection((), []) == ()",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str\n",
        "test": "assert replace_char(\"Hello world\", \"o\", \"0\") == \"Hell0 w0rld\" ",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda item: item[1]))\n",
        "test": "assert sort_counter({\"a\": 5, \"b\": 3, \"c\": 2}) == {\"c\": 2, \"b\": 3, \"a\": 5}",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + nums[-1]\n",
        "test": "assert big_sum([5, 2, 9, 1, 7]) == 12, \"Incorrect output\"  # test case 1",
        "num_ids": 442,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_lower(string):\n    return string.lower()\n",
        "test": "assert is_lower(\"Hello World\") == \"hello world\" # check lowercase conversion of string ",
        "num_ids": 206,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)\n",
        "test": "assert remove_lowercase(\"HELLO, WORLD!\") == \"HELLO, WORLD!\"",
        "num_ids": 363,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the number to a string to access its digits\n    n_str = str(n)\n    \n    # Find the first digit of the string and convert it back to an integer\n    first_digit = int(n_str[0])\n    \n    return first_digit\n",
        "test": "assert first_Digit(123) == 1, \"First digit of 123 should be 1\"",
        "num_ids": 385,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def Split(lst):\n    \"\"\"\n    Returns a new list with only the odd integers from lst.\n    \"\"\"\n    return [x for x in lst if x % 2 != 0]\n",
        "test": "assert Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 367,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def difference(n):\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return sum_numbers**2 - sum_cubes",
        "test": "assert difference(1) == 0, \"Error in difference(1)\" ",
        "num_ids": 359,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count",
        "test": "assert find_Odd_Pair([1,3,5,7,9],5) == 1  # example input",
        "num_ids": 370,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n",
        "test": "assert toggle_string(\"Hello World\") == \"hELLO wORLD\"",
        "num_ids": 328,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def digit_distance_nums(n1, n2):\n    # convert the numbers to strings so that we can iterate through the digits\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n\n    # initialize variables to keep track of the sum and length of the shorter number\n    sum_diff = 0\n    min_len = min(len(str_n1), len(str_n2))\n\n    # iterate through the digits of the shorter number\n    for i in range(min_len):\n        # add the absolute difference between the digits to the sum\n        sum_diff += abs(int(str_n1[i]) - int(str_n2[i]))\n\n    # if the two numbers have different lengths, add the difference in lengths to the sum\n    if len(str_n1) != len(str_n2):\n        sum_diff += abs(len(str_n1) - len(str_n2))\n\n    return sum_diff\n",
        "test": "assert digit_distance_nums(100, 100) == 0 ",
        "num_ids": 705,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
        "test": "assert max_sub_array_sum([-1, -2, -3, -4, -5, -6], 6) == -1",
        "num_ids": 612,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create a set to store the unique elements of the union\n    union_set = set()\n    # Add all elements of both tuples to the set\n    union_set.update(test_tup1)\n    union_set.update(test_tup2)\n    # Convert the set to a list and sort it\n    sorted_union = sorted(list(union_set))\n    # Return the sorted list as a tuple\n    return tuple(sorted_union)\n",
        "test": "assert union_elements((), (1, 2)) == (1, 2)  # empty tuple and non-empty tuple",
        "num_ids": 673,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n",
        "test": "assert Find_Max_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4  # longest sublist is [6, 7, 8, 9]",
        "num_ids": 583,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = 'John said, \"Hello, World!\" and \"Python is awesome.\"'\nvalues = extract_values(text)\nprint(values)\n",
        "test": "assert extract_values(\"The price is \\\"$10.00\\\"\") == [\"$10.00\"]",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_Pairs(arr, n):\n    # Initialize the count variable to zero\n    count = 0\n    # Traverse through all elements of the list\n    for i in range(n):\n        # Traverse through all elements of the list after i-th element\n        for j in range(i+1, n):\n            # If both elements are not equal, increment the count variable\n            if arr[i] != arr[j]:\n                count += 1\n    # Return the count variable\n    return count\n",
        "test": "assert count_Pairs([1, 2, 3], 3) == 3, \"Failed\"",
        "num_ids": 457,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n",
        "test": "assert split('hello') == ['h', 'e', 'l', 'l', 'o'] # split('hello') should return ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 291,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return \"Input must be non-negative.\"\n    \n    total_sum = 0\n    while n > 0:\n        total_sum += n % 10\n        n //= 10\n    \n    return total_sum\n",
        "test": "assert sum_digits(0) == 0",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert issort_list([1,2,3,4,5]) == True",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "test": "assert empty_list(0) == []  # checks that an empty list is returned for length 0",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([['apple', 'banana', 'cherry'], ['dog', 'cat', 'fish'], ['alpha', 'beta', 'gamma']]) == [['apple', 'banana', 'cherry'], ['cat', 'dog', 'fish'], ['alpha', 'beta', 'gamma']]",
        "num_ids": 513,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # create an empty set to store unique numbers\n    unique_nums = set()\n    # loop through the list of numbers\n    for num in nums:\n        # add each number to the set of unique numbers\n        unique_nums.add(num)\n    # return a list of the unique numbers\n    return list(unique_nums)\n",
        "test": "assert two_unique_nums([1,2,3,4,5]) == [1,2,3,4,5]",
        "num_ids": 537,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1,2,3]) == 6  # Should return 6 as the product of unique numbers is 1*2*3 = 6",
        "num_ids": 438,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h\n    \n    # Return the surface area of the cylinder\n    return surface_area\n",
        "test": "assert surfacearea_cylinder(2, 4) == 113.09733552923254, \"Error: surfacearea_cylinder function is not working as expected.\" ",
        "num_ids": 411,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3,4], [5,6]) == False",
        "num_ids": 330,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10\n",
        "test": "assert last_Digit_Factorial(0) == 1",
        "num_ids": 463,
        "indeed": true
    },
    {
        "number": 578,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"All lists must have the same length\")\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9] ",
        "num_ids": 680,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            dissimilar_elements.append(item)\n    for item in test_tup2:\n        if item not in test_tup1:\n            dissimilar_elements.append(item)\n    return dissimilar_elements\n",
        "test": "assert find_dissimilar((1, 2, 3), (2, 3, 4)) == (1, 4)",
        "num_ids": 649,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Initialize an empty list to store even elements\n    even_list = []\n    # Iterate over the elements of the nested tuple\n    for elem in test_tuple:\n        # If the element is a tuple, call even_fnc recursively\n        if isinstance(elem, tuple):\n            even_list.append(even_fnc(elem))\n        # If the element is an even number, append it to the even_list\n        elif isinstance(elem, int) and elem % 2 == 0:\n            even_list.append(elem)\n    return even_list\n",
        "test": "assert even_ele((1,2,3,4),(5,6,7,8,9,10)), \"Incorrect result\" ",
        "num_ids": 770,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def surface_Area(b,h):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the base\n    base_area = b * b\n\n    # calculate the area of the triangular faces\n    tri_area = (b * h) / 2\n\n    # calculate the area of the whole pyramid\n    pyramid_area = base_area + (3 * tri_area)\n\n    return pyramid_area\n",
        "test": "assert surface_Area(4, 5) == 80.0 ",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True, \"Dictionary is not empty\" ",
        "num_ids": 239,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num % 2 == 0:\n        return 0\n    else:\n        return (2 * (2 * num - 1) * catalan_number(num - 1)) // (num + 1)\n",
        "test": "assert catalan_number(1) == 1, \"Catalan number for n=1 should be 1\"",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # pattern to match adverbs ending with ly\n    pattern = r'\\b\\w+\\b'\n    \n    # find all matches for the pattern\n    matches = re.finditer(pattern, text)\n    \n    # iterate through the matches and check if the last letter is 'y'\n    for match in matches:\n        word = match.group()\n        if word[-1] == 'y':\n            # check if the word ends with 'ly'\n            if word[-2:] == 'ly':\n                # print the word and its positions in the text\n                print(f'Adverb found: {word}, at positions {match.start()}-{match.end()}')\n                return\n\n    # if no adverb is found, print a message\n    print('No adverb found.')\n",
        "test": "assert find_adverbs(\"The dog is quickly running around the cat.\") == None # no adverb ending with ly in the text ",
        "num_ids": 695,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 12,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item[1])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return sorted([item[0] for item in items if item[1] in heap], reverse=True)\n",
        "test": "assert expensive_items([(1,10), (2,15), (3,12), (4,18), (5,14), (6,20)], 3) == [(6,20), (5,14), (4,18)] # test case 1",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    l1.extend(l2)\n    return l1\n",
        "test": "assert split_Arr([1,2,3,4,5], 2) == [1,2,3,4,5], \"Spliting should be done at the second element\"",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_x = tuple(listx)\n    return tuple_x\n",
        "test": "assert list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5) ",
        "num_ids": 226,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    max_val = nums[0]\n    min_val = nums[0]\n    \n    for num in nums[1:]:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    return max_val - min_val\n",
        "test": "assert big_diff([1, 2, 3, 4, 5]) == 4  # Test case 1",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    perfect_squares_list = []\n    for i in range(a, b+1):\n        root = int(i ** 0.5)\n        if root * root == i:\n            perfect_squares_list.append(i)\n    return perfect_squares_list\n",
        "test": "assert perfect_squares(16, 25) == [16, 25] ",
        "num_ids": 429,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(complex(x, y))\n    theta = cmath.phase(complex(x, y))\n    return r*cmath.cos(theta), r*cmath.sin(theta)",
        "test": "assert polar_rect(1, 0) == (1, 0)",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList\n",
        "test": "assert swap_List([1,2,3,4,5]) == [5,2,3,4,1]",
        "num_ids": 441,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def binomial_Coeff(n,k):\n    if k > n-k:\n        k = n-k\n    res = 1\n    for i in range(k):\n        res *= (n-i)\n        res //= (i+1)\n    return res\n",
        "test": "assert binomial_Coeff(5,2) == 10 # Test for n=5, k=2",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'0+\\d')\n    result = re.sub(pattern, lambda match: str(int(match.group())), ip)\n    return result\n",
        "test": "assert removezero_ip(\"10.016.002.003\") == \"10.16.2.3\"",
        "num_ids": 424,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = None\n    odd_index = None\n    \n    for i, num in enumerate(list1):\n        if num % 2 == 0:\n            even_index = i\n        elif num % 2 != 0:\n            odd_index = i\n        if even_index is not None and odd_index is not None:\n            break\n            \n    if even_index is not None and odd_index is not None:\n        return list1[even_index] - list1[odd_index]\n    else:\n        return \"No even or odd number found in the list\"",
        "test": "assert diff_even_odd([2,4,6,8]) == 4 # [2,4,6,8] - []",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def min_Swaps(str1, str2):\n    swaps = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            swaps += 1\n            for j in range(i, len(str1)):\n                if str1[j] == str2[i]:\n                    str1 = str1[:j] + str1[i] + str1[j+1:]\n                    break\n    return swaps\n",
        "test": "assert min_Swaps(\"1010\",\"1010\") == 0",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size\n",
        "test": "assert tuple_size((1, \"hello\", True)) == 36 # tuple of three elements with one 32-bit integer, one string of 5 characters (with a length of 4 bytes), and one boolean value, size of 36 bytes",
        "num_ids": 317,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find kth element from the given two sorted arrays.\n    \"\"\"\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n    return merged_arr[k-1]\n",
        "test": "assert find_kth([1, 2, 3], [4, 5, 6], 5) == 5",
        "num_ids": 855,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the input number to string and get its length\n    length = len(str(number))\n    # initialize the sum variable to 0\n    sum = 0\n    # iterate through each digit of the input number\n    for digit in str(number):\n        # add the digit raised to the power of its length to the sum variable\n        sum += int(digit) ** length\n    # if the sum is equal to the input number, return True, else return False\n    return sum == number\n",
        "test": "assert armstrong_number(153) == True, \"Function is not correct\" ",
        "num_ids": 639,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # iterate through the numbers from 1 to n\n    for i in range(1, number + 1):\n        # add each number to the sum variable\n        sum += i\n        # increment the count variable\n        count += 1\n\n    # calculate the average of the numbers\n    average = sum / count\n\n    # return the sum and average\n    return sum, average\n",
        "test": "assert sum_average(1) == (1, 1)",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(4) == True",
        "num_ids": 217,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # creating a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # finding the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\" # simple test case 1",
        "num_ids": 663,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        sum_of_digits = sum(int(digit) for digit in str(i))\n        if i == sum_of_digits:\n            lucid_numbers.append(i)\n    return lucid_numbers\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9] ",
        "num_ids": 716,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words separated by spaces in a given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words in the list\n    words.reverse()\n    # Join the words back together into a string\n    reversed_string = \" \".join(words)\n    return reversed_string\n",
        "test": "assert reverse_words('hello world') == 'world hello' ",
        "num_ids": 349,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True",
        "test": "assert prime_num(2) == True, \"Error: prime_num(2) should return True\"",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n",
        "test": "assert radian_degree(180) == math.pi, \"Error in radian_degree(180)\"",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"hello world\", r'\\b\\w+\\b') == ('hello', 0, 5)",
        "num_ids": 502,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # create a list to store the bell numbers\n    bell_numbers = [1]\n    \n    # calculate the bell numbers and append them to the list\n    for i in range(1, n+1):\n        bell_number = 1\n        for j in range(i):\n            bell_number *= (i-j)\n            bell_number //= j+1\n        bell_numbers.append(bell_number)\n    \n    # return the nth bell number\n    return bell_numbers[n]\n",
        "test": "assert bell_Number(0) == 1",
        "num_ids": 458,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k-1] + list1[k:]\n",
        "test": "assert remove_kth_element([1,2,3,4,5], 4) == [1,2,3,4]",
        "num_ids": 423,
        "indeed": true
    },
    {
        "number": 611,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_value = float('-inf') # initialize max value to negative infinity\n    for row in test_list:\n        if row[N] > max_value: # check if max value in n'th column is greater than current max value\n            max_value = row[N] # update max value if true\n    return max_value\n",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 7  # Example 1: Check if the function returns the correct value for a given list and n",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def merge(lst):\n    lst1 = []\n    lst2 = []\n    for sublst in lst:\n        lst1.append(sublst[0])\n        lst2.append(sublst[1])\n    return [lst1, lst2]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]], \"Incorrect output\" ",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = []\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n        result.append(cum_sum)\n    return result",
        "test": "assert cummulative_sum([1,2,3,4,5]) == [1, 3, 6, 10, 15]",
        "num_ids": 426,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        sum_tup = sum(tup)\n        avg_tup = sum_tup / len(tup)\n        result.append(avg_tup)\n    return result\n",
        "test": "assert average_tuple(((1, 2, 3), (4, 5, 6))) == [2.0, 5.0] ",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check that the input tuples have the same length\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Input tuples must have the same length.\")\n    \n    # Perform element-wise modulo operation\n    result_tup = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup\n",
        "test": "assert tuple_modulo((1,2,3),(2,4,6)) == (1,2,3)",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def min_Jumps(steps, d):\n    # Initialize the number of jumps and the maximum distance reached\n    jumps = 0\n    max_reach = 0\n    \n    # Loop through the steps, updating the number of jumps and the maximum distance reached\n    for step in steps:\n        jumps += 1\n        max_reach = max(max_reach, step)\n        \n        # If the maximum distance reached is greater than or equal to d, break the loop\n        if max_reach >= d:\n            break\n    \n    # Return the number of jumps required\n    return jumps\n",
        "test": "assert min_Jumps(4, 2) == 1 ",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([4,5,6],[2,3,4]) == [2.0,1.6666666666666667,1.5] ",
        "num_ids": 487,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    other_chars = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n        else:\n            other_chars.append(char)\n    return ''.join(other_chars) + ''.join(nums)\n",
        "test": "assert move_num('') == '' # empty string",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def largest_subset(a):\n    # sort the list in descending order\n    a.sort(reverse=True)\n    \n    # initialize variables for the largest subset size and the current subset size\n    largest_size = 0\n    curr_size = 0\n    \n    # loop through the sorted list, adding each number to the current subset\n    for i in range(len(a)):\n        curr_size += 1\n        \n        # check if the current subset size is divisible by every subset that comes after it\n        for j in range(i+1, len(a)):\n            if a[j] % a[i] == 0:\n                curr_size += 1\n            else:\n                break\n        \n        # update the largest subset size if necessary\n        if curr_size > largest_size:\n            largest_size = curr_size\n    \n    return largest_size\n",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10 # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] is the largest subset of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] so the output should be 10",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if n % 2 == 0:\n        return (arr1[n//2 - 1] + arr1[n//2]) / 2\n    else:\n        return arr1[n//2]",
        "test": "assert get_median([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 5 ",
        "num_ids": 667,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num**n for num in nums]\n",
        "test": "assert nth_nums([1,2,3,4,5],2) == [1,4,9,16,25] ",
        "num_ids": 473,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert is_upper(\"hello\") == False",
        "num_ids": 208,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:  # If list has less than 2 elements, return the list as is.\n        return newList\n\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1] # test with a list of odd length",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef triangle_area(r):\n    # the length of the side of the largest triangle that can be inscribed in a semicircle is r\n    side = r\n    \n    # the area of the largest triangle is one-eighth of the area of the circle\n    area = (math.pi * r**2) / 8\n    \n    return area\n",
        "test": "assert triangle_area(2) == 1.9191866193903607  # radius = 2",
        "num_ids": 483,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    # Check if the list is empty or not\n    if len(array) == 0:\n        return 1\n    \n    # If end is not specified, set it to the last element of the list\n    if end is None:\n        end = len(array) - 1\n    \n    # Initialize a variable to keep track of the smallest missing number\n    smallest_missing = array[0]\n    \n    # Iterate through the list\n    for i in range(len(array)):\n        # Check if the current number is smaller than the smallest missing number\n        if array[i] < smallest_missing:\n            smallest_missing = array[i]\n        \n        # If the current number is equal to the smallest missing number,\n        # we need to check the next number because there can be a gap\n        elif array[i] == smallest_missing:\n            smallest_missing += 1\n    \n    # If the smallest missing number is greater than the last element of the list\n    # we need to return the first missing number after the list\n    if smallest_missing > array[end]:\n        return smallest_missing\n    \n    # If the smallest missing number is within the range, we need to find the\n    # first missing number within the range\n    else:\n        # Initialize two pointers, one at the beginning of the range\n        # and one at the end of the range\n        left = start\n        right = end\n        \n        # Iterate until the pointers meet\n        while left <= right:\n            # Calculate the middle index of the range\n            mid = (left + right) // 2\n            \n            # Check if the middle number is the smallest missing number\n            if array[mid] == smallest_missing:\n                smallest_missing += 1\n            \n            # If the middle number is smaller than the smallest missing number,\n            # we need to search in the right half of the range\n            elif array[mid] < smallest_missing:\n                right = mid - 1\n            \n            # If the middle number is greater than or equal to the smallest missing number,\n            # we need to search in the left half of the range\n            else:\n                left = mid + 1\n        \n        # Return the smallest missing number after the range\n        return smallest_missing\n",
        "test": "assert find_First_Missing([0,1,2,3,4]) == 5",
        "num_ids": 1217,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello%20world\"",
        "num_ids": 213,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 15,
        "answer": "def Split(list):\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "test": "assert Split([1,2,3,4,5]) == [2, 4] ",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub\n",
        "test": "assert adjac((1,2)) == [(2,2), (1,3), (0,2)] ",
        "num_ids": 641,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if ' ' in text:\n        return text.replace(' ', '_')\n    elif '_' in text:\n        return text.replace('_', ' ')\n    else:\n        return text\n",
        "test": "assert replace_spaces(\"hello world\") == \"hello_world\"",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize an empty list to store non-zero elements\n    non_zero_list = []\n    \n    # Loop through the input list\n    for num in num_list:\n        # If the element is not zero, append it to non_zero_list\n        if num != 0:\n            non_zero_list.append(num)\n    \n    # Append all the zeroes to the end of non_zero_list\n    non_zero_list += [0] * (num_list.count(0))\n    \n    # Return the new list\n    return non_zero_list\n",
        "test": "assert move_zero([0,0,0,0,0]) == [0,0,0,0,0]",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def pair_xor_sum(arr, n):\n    # initialize sum to 0\n    s = 0\n    # iterate through all pairs of numbers in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # xor the two numbers and add to the sum\n            s += arr[i] ^ arr[j]\n    return s\n",
        "test": "assert pair_xor_Sum([1, 2, 3, 4, 5, 6], 6) == 9, \"Incorrect output for [1, 2, 3, 4, 5, 6]\"",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heapq module.\n    '''\n    heap = []\n    for val in iterable:\n        hq.heappush(heap, val)\n    \n    return [hq.heappop(heap) for i in range(len(iterable))]\n",
        "test": "assert heap_sort([3, 7, 2, 6, 1, 9]) == [1, 2, 3, 6, 7, 9] ",
        "num_ids": 508,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif sale_amount > actual_cost:\n        return False\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True",
        "num_ids": 315,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Calculate the wind chill index\n    wc = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    \n    # Round the wind chill index to the next integer\n    wc = round(wc)\n    \n    return wc\n",
        "test": "assert wind_chill(25,15) == 3, \"Incorrect wind chill for v=25, t=15\" ",
        "num_ids": 760,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n",
        "test": "assert sample_nam([\"Alex\", \"Bob\", \"charlie\", \"David\", \"eva\"]) == 12",
        "num_ids": 536,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # using regex to match pattern of parenthesis and remove it\n    regex = r'\\([^)]*\\)'\n    clean_items = re.sub(regex, '', items)\n    return clean_items\n",
        "test": "assert remove_parenthesis(\"()()()()()()\") == \"\"",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    # Find the nth row of Pascal's triangle\n    row = [1]\n    for i in range(n):\n        row = [1] + [row[i] + row[i+1] for i in range(len(row)-1)] + [1]\n    \n    # Calculate the nth nonagonal number\n    return row[n-1]\n",
        "test": "assert is_nonagonal(1) == 1 ",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]*z[a-zA-Z]*\\b')\n    matches = pattern.findall(text)\n    if matches:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_wordz_middle(\"abczdef\") == True, \"Should return True if 'z' is present in the middle of a word\"",
        "num_ids": 549,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input):\n        return input[::-1]\n    else:\n        return input[:k][::-1] + input[k:]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # create an empty tuple to hold the new values\n    new_tup = ()\n    \n    # iterate over the original tuple\n    for item in test_tup:\n        # check if the item is a key in the dictionary\n        if item in test_dict:\n            # add the dictionary value to the new tuple\n            new_tup += (test_dict[item],)\n        else:\n            # if the item is not in the dictionary, add it to the new tuple\n            new_tup += (item,)\n    \n    # return the new tuple\n    return new_tup\n",
        "test": "assert add_dict_to_tuple(({'a': 1, 'b': 2}, {'c': 3, 'd': 4}), {'e': 5, 'f': 6}) == ({'a': 1, 'b': 2, 'e': 5, 'f': 6}, {'c': 3, 'd': 4})",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j] + cost[i][j], dp[i][j-1] + cost[i][j])\n    \n    return dp[n-1][n-1] / (n-1)**2\n",
        "test": "assert maxAverageOfPath([[1, 2], [3, 4]]) == 2.5",
        "num_ids": 1007,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def filter_data(students, h, w):\n    filtered_students = {}\n    for student, stats in students.items():\n        if stats[0] > h and stats[1] > w:\n            filtered_students[student] = stats\n    return filtered_students\n",
        "test": "assert filter_data({\"Alice\":(1.7, 50), \"Bob\":(1.8, 60), \"Charlie\":(1.6, 55)}, 1.7, 50) == {\"Alice\":(1.7, 50), \"Bob\":(1.8, 60)} ",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 5, \"Count should be 5\"",
        "num_ids": 506,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string to iterate over its digits\n    base_str = str(base)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Iterate over the digits of the base and calculate their power\n    for digit in base_str:\n        # Convert the digit to an integer and calculate its power\n        digit = int(digit)\n        digit_power = digit ** power\n        # Add the digit's power to the sum\n        sum += digit_power\n    # Return the sum\n    return sum\n",
        "test": "assert power_base_sum(3,2) == 18  # 3^2 = 9 + 9 = 18",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    quotation_values = re.findall('\"([^\"]*)\"', text1)\n    return quotation_values\n\ntext1 = 'This is a \"test\" with \"multiple\" quotation marks.'\nprint(extract_quotation(text1)) # Output: ['test', 'multiple']\n",
        "test": "assert extract_quotation('\"Hello\" \"World\" \"Python\"') == ['Hello', 'World', 'Python']",
        "num_ids": 383,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup\n",
        "test": "assert multiply_elements((1, 2, 3)) == (2, 6)",
        "num_ids": 614,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]  # test for addition of two lists [1,2,3] and [4,5,6]",
        "num_ids": 557,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        if len(list(g)) > 1:\n            result.append(k)\n    return result",
        "test": "assert consecutive_duplicates([1, 1, 1, 2, 2, 3, 3, 3]) == [1, 2, 3]",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r ** 2 + 2 * math.pi * r * h\n    return lateral_area\n",
        "test": "assert lateralsurface_cone(2, 4) == 11.180339887498949, \"Incorrect lateral surface area for radius 2 and height 4\" ",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[ ,.]', ':', text)\n",
        "test": "assert replace_specialchar(\"This is a test.\") == \"This:is:a:test:\"",
        "num_ids": 345,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_first_occurrence(A, x):\n    # Find the index of the first occurrence of x in the array\n    first_occurrence = -1\n    for i in range(len(A)):\n        if A[i] == x:\n            first_occurrence = i\n            break\n    \n    return first_occurrence\n",
        "test": "assert find_first_occurrence([1, 2, 3, 4, 5], 3) == 2  # should return index 2",
        "num_ids": 634,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    # Initialize a variable to store the sum of products of all possible sublists\n    sum_prod = 0\n    # Loop through all possible sublists of the given list\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the product of the current sublist\n            prod = 1\n            for k in range(i, j):\n                prod *= arr[k]\n            # Add the product to the sum of products of all possible sublists\n            sum_prod += prod\n    return sum_prod\n",
        "test": "assert sum_Of_Subarray_Prod([-1, 0, 1]) == 0",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # convert decimal to binary\n    binary = bin(n)[2:]\n    \n    # get length of binary string\n    length = len(binary)\n    \n    # toggle middle bits\n    for i in range(1, length-1):\n        if binary[i] == '0':\n            binary = binary[:i] + '1' + binary[i+1:]\n        else:\n            binary = binary[:i] + '0' + binary[i+1:]\n    \n    # convert binary back to decimal\n    decimal = int(binary, 2)\n    \n    return decimal\n",
        "test": "assert set_middle_bits(0b10101010) == 0b01101010",
        "num_ids": 745,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    return i\n",
        "test": "assert left_insertion([1, 3, 4, 6, 7], 2) == 1 # should return 1 because 2 should be inserted at index 1 in the sorted order of [1, 3, 4, 6, 7]",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str('aString123') == True # should return True as 'a' is a vowel",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1/2**n) + geometric_sum(n-1)",
        "test": "assert geometric_sum(10) == 1.6501",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Initialize variables\n    i = 1\n    count = 0\n    index = 0\n    \n    # Loop through all the numbers until we find the smallest triangular number with n digits\n    while count < n:\n        # Calculate the triangular number\n        triangular_num = i * (i + 1) // 2\n        # Increment the count of digits\n        count += len(str(triangular_num))\n        # Update the index\n        index += 1\n        i += 1\n    \n    # Return the index of the smallest triangular number with n digits\n    return index",
        "test": "assert find_Index(1) == 1",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result\n",
        "test": "assert tuple_to_dict(()) == {}",
        "num_ids": 408,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        for i in range(1, len(s)):\n            if s[i] != s[i-1]:\n                return False\n        return True\n",
        "test": "assert not all_Characters_Same(\"abcdef\"), \"All characters are not same\"",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base = side * math.sqrt(3) / 3\n    height = 2 * side * side / math.sqrt(3)\n    return 0.25 * base * height\n",
        "test": "assert area_tetrahedron(3) == 4.339 ",
        "num_ids": 591,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    return lst[-m:] + lst[:-m]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5] # Test 2",
        "num_ids": 567,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False",
        "test": "assert check_none((1, 2, 3)) == False",
        "num_ids": 285,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        divisible = True\n        digits = set(str(num))\n        for digit in digits:\n            if num % int(digit) != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(10, 100) == [10, 20, 30, 40, 50, 60, 70, 80, 90, 100], \"Function not working for range 10-100\"",
        "num_ids": 566,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return (r**2 * math.sin(math.radians(a))) / 2\n",
        "test": "assert sector_area(4, 90) == 113.067 # angle 90 degrees, radius 4",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # Initialize a 3D array to store lengths of LCS\n    L = [[[0 for k in range(p+1)] for j in range(n+1)] for i in range(m+1)]\n    \n    # Following steps build L[m+1][n+1][p+1] in bottom up manner \n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    \n    # L[m][n][p] contains the length of LCS of X, Y and Z\n    return L[m][n][p]\n",
        "test": "assert lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GEAXFB\") == \"GTAB\"",
        "num_ids": 1339,
        "indeed": true
    },
    {
        "number": 748,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile('[A-Z][^A-Z]*')\n    words = pattern.findall(str1)\n    return ' '.join(words)\n",
        "test": "assert capital_words_spaces(\"HelloWorld\"), \"Hello World\"",
        "num_ids": 405,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = [int(num_str) for num_str in nums_str]\n    nums.sort()\n    return [str(num) for num in nums]\n",
        "test": "assert sort_numeric_strings(['10', '2', '100', '20', '30', '40']) == ['2', '20', '30', '40', '10', '100']",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list",
        "test": "assert add_tuple([(1,2)], (3,4)) == [(1,2), (3,4)]",
        "num_ids": 356,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents a min heap or not.\n    \"\"\"\n    if i >= len(arr):\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n\n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n",
        "test": "assert check_min_heap_helper([3, 2, 1, 4, 5, 6], 1) == True ",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    prev1 = 1\n    prev2 = 1\n    for i in range(2, n+1):\n        curr = (prev1 + prev2) * prev2\n        prev1, prev2 = prev2, curr\n    return prev2",
        "test": "assert jacobsthal_num(0) == 0 # Checking if jacobsthal_num(0) returns 0",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "def min_k(test_list, K):\n    return sorted(test_list)[:K]\n",
        "test": "assert min_k([(1,2,3), (2,3,4), (3,4,5), (4,5,6), (5,6,7), (6,7,8), (7,8,9)], 3) == [(1, 2, 3), (2, 3, 4), (3, 4, 5)]",
        "num_ids": 592,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists.\n    The function should return a list of tuples, where each tuple contains the common element and its index in each list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append((l1[i], i))\n    return result\n",
        "test": "assert extract_index_list([1, 2, 3], [2, 3, 4], [2, 3, 5]) == [] # no common elements",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num != smallest:\n                second_smallest = num\n        return second_smallest",
        "test": "assert second_smallest([1, 1, 2, 2, 3, 3]) == 2 # Test case 2",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"abbbabbba\"), \"Should return True\"",
        "num_ids": 334,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    \n    # Initialize count to 0\n    count = 0\n    \n    # Loop through each string in the list\n    for i in range(len(test_list)):\n        # Loop through the remaining strings in the list\n        for j in range(i+1, len(test_list)):\n            # If the current string is equal to the reverse of the current string, increment count\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    \n    # Return the count of reverse pairs\n    return count\n",
        "test": "assert count_reverse_pairs([\"abc\", \"def\", \"ghi\", \"jkl\"]) == 0",
        "num_ids": 511,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    for item in list1:\n        if type(item) == list:\n            sublists.append(tuple(item))\n    sublists_count = {}\n    for sublist in sublists:\n        sublists_count[sublist] = sublists.count(sublist)\n    return sublists_count\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 681,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        # convert the input string to a float and check if it has a decimal point\n        if '.' in str(float(num)):\n            # split the number into integer and decimal parts\n            integer_part, decimal_part = str(float(num)).split('.')\n            # check if the decimal part has 2 digits\n            if len(decimal_part) == 2:\n                return True\n        return False\n    except ValueError:\n        # if the input is not a valid number, return False\n        return False",
        "test": "assert is_decimal(\"3.14\") == True",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                return False\n        return True\n",
        "test": "assert unique_Element([1]) == True  # Test for a list with only one distinct element",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months_with_30_days = [4, 6, 9, 11]\n    if monthnum3 in months_with_30_days:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumber_number(4) == True",
        "num_ids": 411,
        "indeed": true
    },
    {
        "number": 763,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff",
        "test": "assert find_min_diff([1, 3, 15, 11, 6, 45, 2], 7) == 1",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count",
        "test": "assert number_ctr(\"\") == 0, \"Empty string should return 0\"",
        "num_ids": 275,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import math\n\ndef is_polite(n):\n    # initialize a list to store the polite numbers\n    polite_numbers = [1]\n    \n    # initialize a variable to store the polite number count\n    polite_count = 1\n    \n    # loop until we have n polite numbers\n    while polite_count < n:\n        # find the next polite number by multiplying the last polite number by 2\n        next_polite = polite_numbers[-1] * 2\n        \n        # check if the next polite number is divisible by all the previous polite numbers\n        for num in polite_numbers:\n            if next_polite % num != 0:\n                break\n        else:\n            # if the next polite number is divisible by all the previous polite numbers, add it to the list\n            polite_numbers.append(next_polite)\n            polite_count += 1\n    \n    # return the nth polite number\n    return polite_numbers[-1]",
        "test": "assert is_polite(1) == 1  # 1 is a polite number",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]",
        "num_ids": 451,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 9) == 1  # Example usage of get_pairs_count function with sum=9 and array=[1, 2, 3, 4, 5]",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Create an empty list to store the difference\n    diff_list = []\n    # Iterate through the first list\n    for item in li1:\n        # If the item is not in the second list, append it to the difference list\n        if item not in li2:\n            diff_list.append(item)\n    # Return the difference list\n    return diff_list\n",
        "test": "assert Diff([1,2,3],[1,2]) == [3]",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through first n odd numbers\n    for i in range(1, 2*n, 2):\n        # calculate the fourth power of the number and add to sum\n        sum += i**4\n    \n    return sum\n",
        "test": "assert odd_num_sum(1) == 1, \"The sum of 1st odd natural number is 1\"",
        "num_ids": 407,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            else:\n                if i == ')' and stack[-1] == '(':\n                    stack.pop()\n                elif i == '}' and stack[-1] == '{':\n                    stack.pop()\n                elif i == ']' and stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n    return not stack\n",
        "test": "assert check_expression(\"( ( ) { } )\") == True",
        "num_ids": 599,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word) != K:\n            result.append(word)\n    return \" \".join(result)\n",
        "test": "assert remove_length(\"hello world\", 5) == \"world\" ",
        "num_ids": 437,
        "indeed": true
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 18,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Using re.finditer() to find all occurrences of pattern in text\n    matches = re.finditer(pattern, text)\n    \n    # Creating a list to store the matches\n    match_list = []\n    \n    # Iterating over all matches and appending them to the match_list\n    for match in matches:\n        match_list.append({'position': match.start(), 'substring': text[match.start():match.end()]})\n    \n    # Returning the match_list\n    return match_list if match_list else None\n",
        "test": "assert occurance_substring(\"hello world\", \"hello\") == [(0, 5)]",
        "num_ids": 539,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 3, 4, 5]) == False # odd index 1 contains even number 2 ",
        "num_ids": 397,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels(\"world\") == 0",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_repeated_sum = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            non_repeated_sum += num\n    return non_repeated_sum\n",
        "test": "assert find_sum([1, 2, 3, 4]) == 10 # [1, 3, 4] has a sum of 10",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 12,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = []\n    for k, g in groupby(list1):\n        grouped_list.append(list(g))\n    return grouped_list\n",
        "test": "assert pack_consecutive_duplicates([1, 2, 3, 4, 5]) == [[1], [2], [3], [4], [5]]",
        "num_ids": 670,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    count = {}\n    for i in lst:\n        if type(i) == list:\n            t = tuple(i)\n            if t in count:\n                count[t] += 1\n            else:\n                count[t] = 1\n        else:\n            pass\n    return count\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 672,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    max_sum = sum(test_list)\n    combinations_list = []\n    for i in range(1, len(test_list)):\n        for subset in combinations(test_list, i):\n            if sum(subset) == max_sum:\n                combinations_list.append(subset)\n    return combinations_list\n",
        "test": "assert find_combinations([1,2,3]) == [((1,), 1), ((2,), 2), ((3,), 3), ((1, 2), 3), ((2, 3), 5), ((1, 3), 4)]",
        "num_ids": 1742,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import math\n\ndef count_divisors(n):\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            elif n // i != i:\n                count += 2\n    return count\n\ndef even_divisor_count(n):\n    if count_divisors(n) % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(even_divisor_count(24))  # Output: True\nprint(even_divisor_count(12))  # Output: True\nprint(even_divisor_count(25))  # Output: False\n",
        "test": "assert count_divisors(1) == 1, \"Function failed for input 1\"",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum_odd = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i+1) % 2 == 1:\n                sum_odd += sum(arr[i:j+1])\n    \n    return sum_odd\n",
        "test": "assert odd_length_sum([1,2,3]) == 6",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Converts an RGB color to HSV color.\n    Input:\n        r: red component of the color (between 0 and 255)\n        g: green component of the color (between 0 and 255)\n        b: blue component of the color (between 0 and 255)\n    Output:\n        A tuple containing the HSV color: (H, S, V)\n    '''\n\n    # Convert the RGB values to a 0-1 scale\n    r_norm = r / 255.0\n    g_norm = g / 255.0\n    b_norm = b / 255.0\n\n    # Calculate the maximum and minimum RGB values\n    max_rgb = max(r_norm, g_norm, b_norm)\n    min_rgb = min(r_norm, g_norm, b_norm)\n\n    # Calculate the H value\n    if max_rgb == min_rgb:\n        H = 0\n    elif max_rgb == r_norm:\n        H = 60 * (g_norm - b_norm) / (max_rgb - min_rgb)\n    elif max_rgb == g_norm:\n        H = 60 * (b_norm - r_norm) / (max_rgb - min_rgb) + 120\n    else:\n        H = 60 * (r_norm - g_norm) / (max_rgb - min_rgb) + 240\n\n    # Calculate the S value\n    if max_rgb == 0:\n        S = 0\n    else:\n        S = (max_rgb - min_rgb) / max_rgb\n\n    # Calculate the V value\n    V = max_rgb\n\n    # Return the HSV color as a tuple\n    return (H, S, V)\n",
        "test": "assert rgb_to_hsv(255, 0, 0) == (0, 1, 1)     # red color ",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    count_even = 0\n    count_odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n            count_even += 1\n            if count_even == 2:\n                break\n        elif num % 2 != 0:\n            odd_product *= num\n            count_odd += 1\n            if count_odd == 2:\n                break\n    \n    if count_even == 0:\n        return None\n    elif count_odd == 0:\n        return None\n    else:\n        return even_product * odd_product\n",
        "test": "assert mul_even_odd([2, 3, 4, 5, 6]) == 24",
        "num_ids": 678,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # Convert string to tuple\n        tuple_str = eval(test_str)\n        # Convert tuple to integer tuple\n        tuple_int = tuple(int(x) for x in tuple_str)\n        return tuple_int\n    except ValueError:\n        return \"Invalid input\"\n",
        "test": "assert tuple_str_int('(1, 2, 3)') == (1, 2, 3), \"Correct conversion from tuple string to integer tuple\"",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\n",
        "test": "assert right_insertion([1, 3, 4, 5], 4) == 3 ",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=b{3})'\n    return bool(re.search(pattern, text))\n",
        "test": "assert text_match_three('abbb') == True # Example 1: The string \"abbb\" contains an 'a' followed by three 'b', so the function should return True.",
        "num_ids": 358,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 15,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + tuple(test_str)",
        "test": "assert new_tuple([1, 2, 3], \"hello\") == (1, 2, 3, 'h', 'e', 'l', 'l', 'o') ",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True",
        "test": "assert even_position([2, 4, 6, 8]) == True",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result += remove_nested(item)\n        else:\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert remove_nested(()) == ()  # test for an empty tuple",
        "num_ids": 460,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n            count += count_list(item)\n    return count\n",
        "test": "assert count_list([[1,2,3], [4,5], [6,7,8,9]]) == 3 ",
        "num_ids": 333,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    last_position = -1\n    \n    for i in range(n):\n        if arr[i] == x:\n            last_position = i\n            \n    return last_position\n",
        "test": "assert last([1, 2, 3, 4, 5], 3) == 2 # should return the last position of 3 in the array",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "test": "assert text_starta_endb(\"abcd\") == True",
        "num_ids": 292,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n",
        "test": "assert return_sum({1:2, 2:3, 3:4}) == 9",
        "num_ids": 337,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 15,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(l, r+1):\n        if i % 2 != 0:\n            total += i\n    return total\n",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 349,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def left_rotate(n, d):\n    # convert the number to binary string\n    binary_str = bin(n)[2:]\n    # pad with leading zeros to make sure the length is 32\n    binary_str = binary_str.zfill(32)\n    # rotate left by d bits\n    rotated_str = binary_str[d:] + binary_str[:d]\n    # convert back to integer\n    return int(rotated_str, 2)\n",
        "test": "assert left_rotate(5,1) == 10 # Example case",
        "num_ids": 568,
        "indeed": true
    },
    {
        "number": 800,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)\n",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 253,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1,2,1) == 1",
        "num_ids": 301,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 18,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    \n    # find pivot index\n    pivot = 0\n    for i in range(1, n):\n        if arr[i] <= arr[pivot]:\n            pivot = i\n            \n    # check if array is already sorted\n    if arr[n-1] <= arr[pivot]:\n        return 0\n        \n    # count rotations\n    count = 0\n    for i in range(pivot, n):\n        if arr[i] <= arr[pivot]:\n            count += (n-pivot) - (i-pivot)\n            break\n    \n    return count\n",
        "test": "assert count_rotation([3, 4, 5, 1, 2]) == 2, \"Incorrect count of rotations for [3, 4, 5, 1, 2]\"",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_perfect_square(n):\n    import math\n    sqrt = int(math.sqrt(n))\n    if sqrt * sqrt == n:\n        return True\n    else:\n        return False",
        "test": "assert is_perfect_square(16) == True",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2, 4, 6]) == True",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    \n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n            \n    return max_list\n",
        "test": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9] ",
        "num_ids": 506,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 15,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    \n    max_run = 0\n    current_run = 0\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    \n    return max_run\n",
        "test": "assert max_run_uppercase(\"Hello World\") == 1 ",
        "num_ids": 447,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None",
        "test": "assert first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 308,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 18,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Check if the test tuple has the K value\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((1, 2, 3, 4, 5), 3) == True",
        "num_ids": 341,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 18,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True",
        "test": "assert check_smaller((1, 2, 3), (3, 4, 5)) == False",
        "num_ids": 434,
        "indeed": true
    }
]