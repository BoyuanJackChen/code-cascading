[
    {
        "number": 2,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    result = []\n    for item in test_tup1:\n        if item in test_tup2 and item not in result:\n            result.append(item)\n    return result\n",
        "test": "assert similar_elements(('apple', 'banana', 'cherry'), ('banana', 'orange', 'mango')) == ['banana']",
        "num_ids": 2503,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n",
        "test": "assert is_not_prime(4) # True because 4 is divisible by 2 and is not prime",
        "num_ids": 1632,
        "indeed": true
    },
    {
        "number": 4,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    largest = hq.nlargest(n, nums)\n    largest.sort(reverse=True)\n    return largest\n",
        "test": "assert heap_queue_largest([1,1,1,1,1,1,1],1) == [1]",
        "num_ids": 2997,
        "indeed": true
    },
    {
        "number": 6,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # converting the number to binary and counting the number of set bits\n    binary_str = bin(x)[2:]\n    num_of_set_bits = binary_str.count('1')\n    \n    if num_of_set_bits == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Power_Of_Two(3) == False",
        "num_ids": 1854,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "import re\n\ndef find_char_long(text):\n    # Define a regular expression pattern to match any word that is 4 or more characters long\n    pattern = r'\\b\\w{4,}\\b'\n    \n    # Use the re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return a list of the matches found\n    return matches\n",
        "test": "assert find_char_long('hello world') == ['hello', 'world']",
        "num_ids": 1627,
        "indeed": true
    },
    {
        "number": 8,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert square_nums([1,2,3]) == [1,4,9]",
        "num_ids": 1475,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    if len(str) == 0:\n        return 0\n    if len(str) == 1:\n        return 0\n    if len(str) == 2:\n        return 2 if str[0] == str[1] else 1\n    for i in range(1, len(str)):\n        if str[i] == str[0]:\n            return i\n    return len(str)\n",
        "test": "assert find_Rotations(\"\") == 0  # empty string requires 0 rotations",
        "num_ids": 2737,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        first_occurrence = s.find(ch)\n        last_occurrence = s.rfind(ch)\n        if first_occurrence == -1 or last_occurrence == -1:\n            return s\n        elif first_occurrence == last_occurrence:\n            return s[:first_occurrence] + s[first_occurrence+1:]\n        else:\n            return s[:first_occurrence] + s[first_occurrence+1:last_occurrence] + s[last_occurrence+1:]\n",
        "test": "assert remove_Occ(\"hello world\", \"h\") == \"ello world\"",
        "num_ids": 2079,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row and store in a list\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the sum of rows in ascending order\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, M))]\n    \n    # Return the sorted matrix\n    return sorted_matrix\n",
        "test": "assert sort_matrix([[3, 5], [1, 6]]) == [[1, 6], [3, 5]] or sort_matrix([[3, 5], [1, 6]]) == [[3, 5], [1, 6]], \"The function is not sorting the matrix correctly\"",
        "num_ids": 3450,
        "indeed": true
    },
    {
        "number": 14,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    return volume\n",
        "test": "assert find_Volume(2,4,5) == 20 ",
        "num_ids": 1731,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+(_[a-z]+)*')\n    return bool(pattern.fullmatch(text))\n",
        "test": "assert text_lowercase_underscore(\"HELLO_WORLD\") == False",
        "num_ids": 1846,
        "indeed": true
    },
    {
        "number": 17,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "test": "assert square_perimeter(3) == 12 # Test case 1",
        "num_ids": 1198,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def str_to_list(string, remove_string):\n    # Initialize a list to store the characters of the first string\n    str_list = []\n\n    # Iterate through each character of the first string\n    for char in string:\n        # Check if the character is not present in the second string\n        if char not in remove_string:\n            # Append the character to the list\n            str_list.append(char)\n\n    # Return the list\n    return str_list\n",
        "test": "assert str_to_list('') == []",
        "num_ids": 2473,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array to a set to remove duplicates\n    setnums = set(arraynums)\n    \n    # If the length of the set is less than the length of the original array, then there were duplicates\n    if len(setnums) < len(arraynums):\n        return True\n    else:\n        return False\n",
        "test": "assert test_duplicate([1,2,3,4,5]) == False # test1",
        "num_ids": 2099,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    n = len(str(x))\n    for i in range(n):\n        if x % 10 != i+1:\n            return False\n        x //= 10\n    return True",
        "test": "assert is_woodall(45678) == False ",
        "num_ids": 2247,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def rev(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = int(str(num)[::-1])\n    return num == rev_num * 2 - 1\n",
        "test": "assert rev(0) == False  # the reverse of 0 is 0, and 0 + 1 is not equal to 0",
        "num_ids": 1787,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 18,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def find_Max_Num(arr):\n    # Convert the list of digits to a string\n    digits_str = ''.join(map(str, arr))\n    # Sort the string in descending order\n    sorted_str = ''.join(sorted(digits_str, reverse=True))\n    # Convert the sorted string back to a list of digits\n    sorted_list = list(map(int, sorted_str))\n    # Calculate the maximum number that can be formed\n    max_num = 0\n    for digit in sorted_list:\n        max_num = max_num * 10 + digit\n    return max_num\n",
        "test": "assert find_Max_Num([0,0,0,0,0]) == 0, \"The largest number should be 0\" ",
        "num_ids": 3147,
        "indeed": true
    },
    {
        "number": 58,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False ",
        "test": "assert opposite_Signs(3, -5) == True",
        "num_ids": 1313,
        "indeed": true
    },
    {
        "number": 59,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2\n",
        "test": "assert is_octagonal(1) == 1  # should return True",
        "num_ids": 1608,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "from collections import defaultdict\n\ndef count_substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substr = s[i:j]\n            if sum(int(d) for d in substr) == len(substr):\n                count[len(substr)] += 1\n    return count\n",
        "test": "assert count_Substrings(\"987654\") == 1 # \"9\"",
        "num_ids": 2556,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest\n",
        "test": "assert smallest_num([3, 1, 4, 1, 5, 9]) == 1",
        "num_ids": 1500,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_difference([10, 10, 10, 10, 10]) == 0",
        "num_ids": 2882,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "test": "assert subject_marks([(1, 100), (2, 90), (3, 70)]) == [(3, 70), (2, 90), (1, 100)], \"The function is not sorting the list of tuples properly.\"",
        "num_ids": 2423,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def recursive_list_sum(data_list):\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n",
        "test": "assert recursive_list_sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 1816,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def pos_count(lst):\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert pos_count([-1,-2,-3]) == 0",
        "num_ids": 1480,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 40,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Define a list to store the Bell numbers\n    bell_numbers = [1]\n\n    # Calculate the Bell numbers using the Bell number formula\n    for i in range(1, n+1):\n        bell_numbers.append(0)\n        for j in range(i):\n            bell_numbers[i] += bell_numbers[i-j-1]\n\n    # Calculate the number of ways to partition a set of Bell numbers\n    num_ways = bell_numbers[n-1]\n    for i in range(n-1):\n        num_ways += bell_numbers[i] * bell_numbers[n-i-1]\n\n    return num_ways\n",
        "test": "assert bell_number(0) == 1",
        "num_ids": 1881,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array is increasing or decreasing\n    increasing = all(A[i] <= A[i+1] for i in range(len(A)-1))\n    decreasing = all(A[i] >= A[i+1] for i in range(len(A)-1))\n\n    # Check if the array is strictly increasing or decreasing\n    strictly_increasing = all(A[i] < A[i+1] for i in range(len(A)-1))\n    strictly_decreasing = all(A[i] > A[i+1] for i in range(len(A)-1))\n\n    # If the array is increasing or decreasing, it's monotonic\n    if increasing or decreasing:\n        return True\n\n    # If the array is strictly increasing or decreasing, it's monotonic\n    if strictly_increasing or strictly_decreasing:\n        return True\n\n    # If the array is neither increasing nor decreasing, it's not monotonic\n    return False\n",
        "test": "assert is_Monotonic([5, 4, 3, 2, 4]) == False",
        "num_ids": 2873,
        "indeed": true
    },
    {
        "number": 69,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l)):\n            if l[i:i+len(s)] == s:\n                return True\n        return False",
        "test": "assert is_sublist([1, 2, 3, 4], [5, 6]) == False",
        "num_ids": 2180,
        "indeed": true
    },
    {
        "number": 70,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i]) != len(Input[0]):\n            return False\n    return True\n",
        "test": "assert find_equal_tuple(({1,2}, {3,4}, {5,6})) == True",
        "num_ids": 1770,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb_sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums\n",
        "test": "assert comb_sort([]) == []",
        "num_ids": 3239,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def dif_Square(n):\n    # Check if n is positive\n    if n < 0:\n        return False\n\n    # Check if n can be expressed as the sum of two squares\n    for i in range(int(n**0.5)+1):\n        for j in range(int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n\n    # n cannot be expressed as the sum of two squares\n    return False\n",
        "test": "assert dif_Square(7) == False",
        "num_ids": 2246,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) != len(patterns):\n        return False\n    for i, pattern in enumerate(patterns):\n        if colors[i] not in pattern:\n            return False\n    return True\n",
        "test": "assert is_samepatterns(['red', 'blue', 'green', 'yellow'], ['red', 'blue', 'green', 'purple']) == False",
        "num_ids": 2471,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        divisible = True\n        for num in tup:\n            if num % K != 0:\n                divisible = False\n                break\n        if divisible:\n            result.append(tup)\n    return result\n",
        "test": "assert find_tuples([(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16), (9, 18), (10, 20)], 2) == [(2, 4), (4, 8), (6, 12), (8, 16), (10, 20)]",
        "num_ids": 2888,
        "indeed": true
    },
    {
        "number": 77,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Diff(11) == True  # Test case 1",
        "num_ids": 1348,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 22,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 != 0:\n        return True\n    else:\n        return False\n",
        "test": "assert word_len('apple') # should return True ",
        "num_ids": 1307,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return (n * (n + 1) * (n + 2)) // 6\n",
        "test": "assert tetrahedral_number(1) == 1, \"The 1st tetrahedral number should be 1.\"",
        "num_ids": 1891,
        "indeed": true
    },
    {
        "number": 82,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)\n",
        "test": "assert volume_sphere(1) == 4/3 * math.pi #radius is 1, volume is pi * r^3 / 3 (for a sphere)",
        "num_ids": 1743,
        "indeed": true
    },
    {
        "number": 83,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def get_Char(strr):\n    # Initialize the sum\n    sum = 0\n    # Loop through each character of the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(char)\n    # Calculate the remainder of the sum divided by 26\n    remainder = sum % 26\n    # Convert the remainder to a character using the ASCII table\n    char = chr(remainder + 97)\n    # Return the character\n    return char\n",
        "test": "assert get_Char('a') == 't'",
        "num_ids": 1628,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        prev = [None, 1, 1]\n        for i in range(3, n+1):\n            curr = prev[prev[i-1]] + prev[i-prev[i-1]]\n            prev.append(curr)\n        return prev[n]\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 1740,
        "indeed": true
    },
    {
        "number": 85,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n",
        "test": "assert surfacearea_sphere(1) == 4 * math.pi  # Check if surface area of a sphere with radius 1 is equal to 4 * pi",
        "num_ids": 2083,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 19,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "test": "assert centered_hexagonal_number(1) == 1 ",
        "num_ids": 1810,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Initialize an empty dictionary\n    merged_dict = {}\n    # Merge the dictionaries using the update() method\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    # Return the merged dictionary\n    return merged_dict\n",
        "test": "assert merge_dictionaries_three({'a':1, 'b':2}, {'c':3, 'd':4}, {'e':5, 'f':6}) != {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7}",
        "num_ids": 2985,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 250,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "test": "assert freq_count([1, 2, 3, 2, 4, 5]) == {1: 1, 2: 2, 3: 1, 4: 1, 5: 1} ",
        "num_ids": 2814,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 34,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Convert N to a string, so we can use find to find the index of the rightmost decimal point\n    N_str = str(N)\n    # Get the index of the rightmost decimal point\n    decimal_index = N_str.rfind('.')\n    # If there is no rightmost decimal point, just return N - 1\n    if decimal_index == -1:\n        return N - 1\n    # Otherwise, extract the integer and decimal parts of N\n    integer_part = int(N_str[:decimal_index])\n    decimal_part = N_str[decimal_index+1:]\n    # Convert the decimal part back to a float\n    decimal_part_float = float(decimal_part)\n    # If the decimal part is 0, just return N - 1\n    if decimal_part_float == 0:\n        return N - 1\n    # Otherwise, find the largest multiple of 10 that is less than or equal to the decimal part\n    largest_multiple_of_10 = int(decimal_part_float)\n    while float(str(largest_multiple_of_10)+'0') < decimal_part_float:\n        largest_multiple_of_10 -= 1\n    # Return the result\n    return integer_part + largest_multiple_of_10\n",
        "test": "assert closest_num(2) == 1",
        "num_ids": 2163,
        "indeed": true
    },
    {
        "number": 90,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert len_log(['apple', 'banana', 'orange']) == 6",
        "num_ids": 1399,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n",
        "test": "assert find_substring('', 'hello') == False",
        "num_ids": 1296,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_undulating(3*n+1) or is_undulating(n//2)\n",
        "test": "assert is_undulating(1234) == False",
        "num_ids": 2259,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n",
        "test": "assert power(2,3) == 8  # check if 2^3 = 8",
        "num_ids": 1296,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    # Sort the list by the second value of each tuple in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the tuple with the smallest second value\n    return sorted_list[0][0]\n",
        "test": "assert index_minimum([(1, 2), (2, 1), (3, 3)]) == 2",
        "num_ids": 2494,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 24,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n",
        "test": "assert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2",
        "num_ids": 2474,
        "indeed": true
    },
    {
        "number": 96,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert divisor(1) == 1  # for 1, divisor is 1",
        "num_ids": 1561,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for elem in flatten_list(list1):\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n\n\ndef flatten_list(lst):\n    '''\n    Helper function to flatten a list of lists into a single list.\n    '''\n    flattened_lst = []\n    for elem in lst:\n        if type(elem) == list:\n            flattened_lst.extend(flatten_list(elem))\n        else:\n            flattened_lst.append(elem)\n    return flattened_lst\n",
        "test": "assert frequency_lists([]) == {}",
        "num_ids": 3078,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n",
        "test": "assert multiply_num([1]) == 1  # check if the function returns the correct value for a list with only one number",
        "num_ids": 2044,
        "indeed": true
    },
    {
        "number": 99,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n",
        "test": "assert decimal_to_binary(1) == \"1\"",
        "num_ids": 1470,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input number to a string\n    num_str = str(num)\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, add 1 to it and check if it is still a palindrome\n        while True:\n            num_str = str(num + 1)\n            if num_str == num_str[::-1]:\n                return int(num_str)\n            num += 1\n    else:\n        # If it is not a palindrome, find the smallest palindrome greater than it\n        while True:\n            num_str = str(num + 1)\n            if num_str == num_str[::-1]:\n                return int(num_str)\n            num += 1\n",
        "test": "assert next_smallest_palindrome(1000) == 1001 # 1001 is the smallest palindrome greater than 1000",
        "num_ids": 3504,
        "indeed": true
    },
    {
        "number": 101,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    return arr[k-1]\n",
        "test": "assert kth_element([1, 2, 3, 4, 5], 1) == 1",
        "num_ids": 1797,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 36,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    first, *rest = word.split(\"_\")\n    return first + \"\".join(word.title() for word in rest)\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 2132,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 1\n    if m > n:\n        return 0\n    if n == 1:\n        return 1\n    if m == 1:\n        return 1\n    if m == 2:\n        return n\n    \n    return n * eulerian_num(n-1, m-1) + eulerian_num(n-1, m)\n",
        "test": "assert eulerian_num(1, 1) == 1, \"The function returns the wrong result for (1, 1)\"",
        "num_ids": 2387,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        # If the element is a list, sort it and replace the original element\n        if type(input_list[i]) == list:\n            input_list[i] = sorted(input_list[i])\n    return input_list\n",
        "test": "assert sort_sublists([['apple', 'banana', 'orange'], ['cat', 'dog', 'bird']]) == [['apple', 'banana', 'orange'], ['bird', 'cat', 'dog']] ",
        "num_ids": 3057,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count\n",
        "test": "assert count([True, False, False, True, False, True]) == 3",
        "num_ids": 1217,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the tuple to a list\n    test_list = list(test_list)\n    # append the list to the tuple\n    test_list.extend(test_tup)\n    # convert the list back to a tuple\n    test_list = tuple(test_list)\n    return test_list",
        "test": "assert add_lists([1,2,3], (4,5,6)) != ([1, 2, 3], (4, 5, 6), (1, 2, 3, 4, 5, 6))  # Test 2: Check if add_lists is not returning the tuple in the wrong order",
        "num_ids": 2598,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 29,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    heap = []\n    for num in [num1, num2, num3]:\n        for val in num:\n            heapq.heappush(heap, val)\n    return [heapq.heappop(heap) for _ in range(len(heap))]\n",
        "test": "assert merge_sorted_list([1, 3, 5], [2, 4, 6], [7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 3535,
        "indeed": true
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the string to a list of characters\n    s_list = list(s)\n    \n    # Calculate the length of the binary string\n    s_len = len(s)\n    \n    # Initialize the number of odd values\n    odd_count = 0\n    \n    # Rotate the binary string n times\n    for _ in range(n):\n        s_list = s_list[-1:] + s_list[:-1]\n        \n        # Check if the first or last character is '1'\n        if s_list[0] == '1' or s_list[-1] == '1':\n            odd_count += 1\n    \n    return odd_count",
        "test": "assert odd_Equivalent(\"101\", 2) == 2  # \"101\" is equivalent to \"101\" and \"110\" after two rotations",
        "num_ids": 3477,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 17,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Convert all nested lists to sets to compare their elements\n    set_nestedlist = [set(lst) for lst in nestedlist]\n    \n    # Find the intersection of all sets to get the common elements\n    common = set.intersection(*set_nestedlist)\n    \n    return list(common)\n",
        "test": "assert common_in_nested_lists([[1, 2, 3], [1, 2, 3]]) == [1, 2, 3]",
        "num_ids": 3047,
        "indeed": true
    },
    {
        "number": 113,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert check_integer(\"123\") == True ",
        "num_ids": 1191,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 38,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True",
        "test": "assert empty_dit([{}, {}, {}]) == True ",
        "num_ids": 1317,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    # Convert the tuple into a string\n    num_str = ''.join(str(num) for num in nums)\n    \n    # Convert the string into an integer\n    num_int = int(num_str)\n    \n    return num_int\n",
        "test": "assert tuple_to_int((123456789,)) == 123456789",
        "num_ids": 2830,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list\n",
        "test": "assert list_to_float([[1.5, 2], [3.25, 4], [5, 6]]) == [[1.5, 2], [3.25, 4], [5, 6]]",
        "num_ids": 3573,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()\n",
        "test": "assert string_to_list(\"hello world\") == [\"hello\", \"world\"]",
        "num_ids": 1405,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def search(arr):\n    # Initialize the result variable\n    result = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # XOR the current element with the result\n        result ^= arr[i]\n        \n    # Return the result\n    return result",
        "test": "assert search([1]) == 1 # returns the element that appears only once in the array",
        "num_ids": 4166,
        "indeed": true
    },
    {
        "number": 120,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if abs(lst[i][0]*lst[j][1]) > max_product:\n                max_product = abs(lst[i][0]*lst[j][1])\n            elif abs(lst[i][1]*lst[j][0]) > max_product:\n                max_product = abs(lst[i][1]*lst[j][0])\n    return max_product\n",
        "test": "assert max_product_tuple([(1,2),(-1,3),(-2,1)]) == 6",
        "num_ids": 2538,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def divisors_sum(n):\n    \"\"\"\n    Return the sum of proper divisors of n.\n    \"\"\"\n    divisors_sum = 1\n    for i in range(2, int(n/2) + 1):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Return the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable_numbers = 0\n    for n in range(1, limit + 1):\n        d = divisors_sum(n)\n        if n != d and divisors_sum(d) == n:\n            sum_of_amicable_numbers += n\n    return sum_of_amicable_numbers\n",
        "test": "assert amicable_numbers_sum(1000) == 504, \"Error in amicable_numbers_sum for limit=1000\"",
        "num_ids": 4430,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0:\n        if b > 0:\n            return 90\n        elif b < 0:\n            return 270\n        else:\n            return 0\n    elif b == 0:\n        if a > 0:\n            return 0\n        elif a < 0:\n            return 180\n        else:\n            return 0\n    else:\n        return cmath.phase(complex(a, b))*180/cmath.pi",
        "test": "assert angle_complex(1, 0) == 0",
        "num_ids": 1706,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def find_length(string):\n    max_diff = 0\n    ones = 0\n    zeros = 0\n    for char in string:\n        if char == '1':\n            ones += 1\n        else:\n            zeros += 1\n        if zeros > 0 and ones > 0:\n            max_diff = max(max_diff, abs(zeros - ones))\n    return max_diff\n",
        "test": "assert find_length('101010') == 1  # alternating 0s and 1s",
        "num_ids": 5941,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Write a Python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the factors of both numbers\n    factors_a = set(reduce(list.__add__, ([i, a//i] for i in range(1, int(a**0.5)+1) if a % i == 0)))\n    factors_b = set(reduce(list.__add__, ([i, b//i] for i in range(1, int(b**0.5)+1) if b % i == 0)))\n    \n    # Find the common factors\n    common_factors = factors_a.intersection(factors_b)\n    \n    # Find the sum of common factors\n    sum_of_factors = sum(common_factors)\n    \n    return sum_of_factors\n",
        "test": "assert sum(10,15) == 30, \"Function is not correct for the given input\"",
        "num_ids": 2537,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert multiply_int(2,3) == 6  # check that the function multiplies two integers correctly",
        "num_ids": 1109,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def long_words(n, words):\n    long_word_list = []\n    for word in words:\n        if len(word) > n:\n            long_word_list.append(word)\n    return long_word_list\n",
        "test": "assert long_words(10, \"This sentence has no long words\") == []  # This should return an empty list as there are no words longer than 10 characters",
        "num_ids": 1861,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Get the dimensions of the matrix\n    n = len(my_matrix)\n\n    # Calculate the sum of each row and each column\n    row_sum = [sum(my_matrix[i]) for i in range(n)]\n    col_sum = [sum([my_matrix[j][i] for j in range(n)]) for i in range(n)]\n\n    # Calculate the sum of the diagonal\n    diagonal_sum = sum([my_matrix[i][i] for i in range(n)])\n\n    # Calculate the sum of the anti-diagonal\n    anti_diagonal_sum = sum([my_matrix[i][n-i-1] for i in range(n)])\n\n    # Check if all the sums are equal\n    if all(row_sum[i] == row_sum[0] for i in range(1, n)) and \\\n        all(col_sum[i] == col_sum[0] for i in range(1, n)) and \\\n        diagonal_sum == anti_diagonal_sum:\n        return True\n    else:\n        return False\n",
        "test": "assert magic_square_test([[6, 3, 1], [8, 5, 4], [7, 9, 2]]) == False",
        "num_ids": 3764,
        "indeed": true
    },
    {
        "number": 130,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n    return max_item\n",
        "test": "assert max_occurrences([1, 2, 3, 4, 5, 6, 1, 2, 3, 3]) == 3 ",
        "num_ids": 2755,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_indices = []\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n    vowels_reversed = \"\"\n    for i in range(len(vowel_indices)-1, -1, -1):\n        vowels_reversed += str1[vowel_indices[i]]\n    reversed_str = \"\"\n    for i, char in enumerate(str1):\n        if i in vowel_indices:\n            reversed_str += vowels_reversed[0]\n            vowels_reversed = vowels_reversed[1:]\n        else:\n            reversed_str += char\n    return reversed_str\n",
        "test": "assert reverse_vowels(\"\") == \"\" # test case 4",
        "num_ids": 2575,
        "indeed": true
    },
    {
        "number": 132,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    str1 = ','.join(str(i) for i in tup1)\n    return str1\n",
        "test": "assert tup_string(()) == \"\"",
        "num_ids": 1633,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n",
        "test": "assert sum_negativenum([1, 2, 3, 4, 5]) == 0",
        "num_ids": 1868,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (n * 2 - 1))",
        "test": "assert hexagonal_num(1) == 1",
        "num_ids": 1464,
        "indeed": true
    },
    {
        "number": 137,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    nonzero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            nonzero_count += 1\n    return zero_count / (zero_count + nonzero_count)\n",
        "test": "assert zero_count([1, 1, 1, 1, 1]) == 0",
        "num_ids": 2323,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 31,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Convert the number to binary and remove the prefix \"0b\"\n    binary_n = bin(n)[2:]\n    \n    # Iterate over the binary digits, starting from the least significant bit\n    for i in range(len(binary_n)):\n        # If the digit is 1, check if we can find a power of 2 with the remaining digits\n        if binary_n[i] == '1':\n            # Check if we can find a power of 2 with the remaining digits\n            k = 1\n            while k < len(binary_n) - i:\n                if binary_n[i+k] == '1':\n                    break\n                k += 1\n            \n            # If we find a power of 2, return True\n            if k == len(binary_n) - i:\n                return True\n    \n    # If we reach this point, we couldn't find a power of 2, so return False\n    return False\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(1) == True",
        "num_ids": 2870,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n",
        "test": "assert circle_circumference(0) == 0, \"The function should return 0 if the radius is 0.\"",
        "num_ids": 1902,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def extract_singly(test_list):\n    # create an empty set to store the numbers\n    result_set = set()\n    # loop through the nested lists and add the numbers to the set\n    for sublist in test_list:\n        for num in sublist:\n            result_set.add(num)\n    # return the set of numbers\n    return result_set\n",
        "test": "assert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}",
        "num_ids": 2040,
        "indeed": true
    },
    {
        "number": 141,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    while n > 1:\n        # Find the maximum element in the unsorted part of the array\n        max_index = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_index]:\n                max_index = i\n\n        # Swap the maximum element with the first element of the unsorted part\n        if max_index != 0:\n            nums[0], nums[max_index] = nums[max_index], nums[0]\n            print(f\"{nums[0]} moved to the beginning\")\n\n        # Reverse the first 'n' elements of the array to put the maximum element at the end\n        nums[:n] = reversed(nums[:n])\n        print(f\"{nums[n-1]} moved to the end\")\n\n        n -= 1\n\n    return nums\n",
        "test": "assert pancake_sort([]) == []",
        "num_ids": 3402,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "test": "assert count_samepair([1,2,3],[2,3,4],[3,4,5]) == 0",
        "num_ids": 2312,
        "indeed": true
    },
    {
        "number": 143,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert find_lists(()) == 0",
        "num_ids": 1468,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "test": "assert max_Abs_Diff([1, 2, 3, 4, 0]) == 4",
        "num_ids": 2206,
        "indeed": true
    },
    {
        "number": 160,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0 and b == 0:\n        return None\n    elif a == 0:\n        return (0, n // b)\n    elif b == 0:\n        return (n // a, 0)\n    else:\n        x = (n // b) - (n // a) * a\n        y = (n // b) - (n // a) * b\n        if a > 0 and b > 0:\n            if x < 0 or y < 0:\n                return None\n            else:\n                return (x, y)\n        elif a < 0 and b > 0:\n            if x > 0 or y < 0:\n                return None\n            else:\n                return (x, y)\n        elif a > 0 and b < 0:\n            if x < 0 or y > 0:\n                return None\n            else:\n                return (x, y)\n        elif a < 0 and b < 0:\n            if x > 0 or y > 0:\n                return None\n            else:\n                return (x, y)\n",
        "test": "assert find_solution(1, 1, 2) == (0, 1) or (1, 0) ",
        "num_ids": 3922,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        while elem in list1:\n            list1.remove(elem)\n    return list1\n",
        "test": "assert remove_elements([1,2,3,4,5],[6,7]) == [1,2,3,4,5] # test case 2",
        "num_ids": 2079,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2*i\n    return total\n",
        "test": "assert sum_series(4) == 6  # (4 - 2*0) + (4 - 2*1) + (4 - 2*2) + (4 - 2*3)",
        "num_ids": 1475,
        "indeed": true
    },
    {
        "number": 163,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # s: number of sides of the polygon\n    # l: length of each side\n    \n    # Calculate the angle between two sides\n    theta = (2 * pi) / s\n    \n    # Calculate the area of the polygon using the formula: 1/2 * s * l * tan(theta/2)\n    area = (1/2) * s * l * tan(theta/2)\n    \n    return area",
        "test": "assert area_polygon(8, 4) == 2.041357493862138",
        "num_ids": 2802,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import math\n\ndef div_sum(n):\n    # function to determine if the sum of the divisors of two integers are the same\n    # get divisors of n\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    # sum of divisors of n\n    sum_divisors = sum(divisors)\n    # loop through divisors and check if sum of divisors of other number is equal to sum of divisors of n\n    for i in range(n):\n        if i == n:\n            continue\n        divisors_i = [j for j in range(1, int(math.sqrt(i))+1) if i % j == 0]\n        sum_divisors_i = sum(divisors_i)\n        if sum_divisors == sum_divisors_i:\n            return True\n    return False\n",
        "test": "assert div_sum(4) == False",
        "num_ids": 2896,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 360,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Create a dictionary to store the count of characters at each position\n    char_count = {i: 0 for i in range(len(str1))}\n\n    # Count the occurrences of each character at each position\n    for i in range(len(str1)):\n        char_count[i] += str1.count(str1[i])\n\n    # Count the number of characters that occur at the same position as in the English alphabet\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].lower() == chr(i + 97):\n            count += char_count[i]\n\n    return count\n",
        "test": "assert count_char_position(\"1234567890\") == 0  # no characters have the same position as in the alphabet",
        "num_ids": 2614,
        "indeed": true
    },
    {
        "number": 166,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n",
        "test": "assert find_even_pair([2, 4, 6, 8]) == 6 # all even numbers",
        "num_ids": 2239,
        "indeed": true
    },
    {
        "number": 167,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n",
        "test": "assert next_power_of_2(3) == 4",
        "num_ids": 1458,
        "indeed": true
    },
    {
        "number": 168,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert frequency([1,2,3,4,5,6], 4) == 1 ",
        "num_ids": 2137,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize a variable to store the sum\n    total_sum = 0\n\n    # Iterate through the range specified by the indices m and n\n    for i in range(m, n+1):\n        # Add the current element to the total sum\n        total_sum += list1[i]\n\n    # Return the total sum\n    return total_sum",
        "test": "assert sum_range_list([1,2,3,4,5], 0, 4) == 15    # [1,2,3,4]",
        "num_ids": 2607,
        "indeed": true
    },
    {
        "number": 171,
        "max_answer_num": 32,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    \n    # Calculate the perimeter using the formula:\n    # P = 5a\n    \n    perimeter = 5*a\n    \n    return perimeter\n",
        "test": "assert perimeter_pentagon(3) == 15, \"Error in perimeter calculation\" ",
        "num_ids": 1465,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'std':\n            count += 1\n    return count\n",
        "test": "assert count_occurance('abc') == 0  # check the output when 'std' doesn't occur in the string 'abc'",
        "num_ids": 1579,
        "indeed": true
    },
    {
        "number": 222,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(isinstance(i, type(test_tuple[0])) for i in test_tuple)\n",
        "test": "assert check_type((1, 2, 3)) == True",
        "num_ids": 1836,
        "indeed": true
    },
    {
        "number": 223,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if arr[n//2] == x:\n        return True\n    elif arr[n//2-1] == x:\n        return True\n    else:\n        return False\n",
        "test": "assert is_majority([1, 2, 3, 4, 5, 6, 7, 8, 9], 9, 1) == False ",
        "num_ids": 2456,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 37,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "test": "assert count_Set_Bits(0) == 0",
        "num_ids": 1410,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result",
        "test": "assert odd_values_string(\"hello\") == \"hlo\"  # odd index values are 0, 2, 4, so only characters at these indices should remain",
        "num_ids": 1620,
        "indeed": true
    },
    {
        "number": 227,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b and a <= c:\n        return a\n    elif b <= a and b <= c:\n        return b\n    else:\n        return c\n",
        "test": "assert min_of_three(3, 2, 1) == 1  # Test case for (1, 2, 3)",
        "num_ids": 1705,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Iterate through the range from l to r\n    for i in range(l, r+1):\n        # Check if the current number has all bits unset\n        if bin(i)[2:].count('1') != 0:\n            return False\n    # If all numbers in the range have all bits unset, return True\n    return True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10, 0, 10) == False",
        "num_ids": 2320,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def re_arrange_array(arr, n):\n    # Create two empty lists for negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # Iterate through the input array\n    for num in arr:\n        # If the number is negative, append it to the neg_list\n        if num < 0:\n            neg_list.append(num)\n        # If the number is positive or zero, append it to the pos_list\n        else:\n            pos_list.append(num)\n\n    # Combine the neg_list and pos_list, and return the result\n    return neg_list + pos_list\n",
        "test": "assert re_arrange_array([1], 1) == [1]",
        "num_ids": 3511,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n",
        "test": "assert replace_blank(\"hello world\", \"!\") == \"hello!world\"",
        "num_ids": 1265,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 25,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)\n",
        "test": "assert larg_nnum([4, 5, 2, 1, 6, 7, 3], 1) == [7] ",
        "num_ids": 2332,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n    \n    Args:\n    r: float, the radius of the cylinder\n    h: float, the height of the cylinder\n    \n    Returns:\n    float, the lateral surface area of the cylinder\n    \"\"\"\n    return 2 * math.pi * r * h\n",
        "test": "assert lateralsuface_cylinder(1, 2) == 12.566370614359172, \"The lateral surface area of a cylinder with radius 1 and height 2 should be 12.566370614359172\"",
        "num_ids": 2258,
        "indeed": true
    },
    {
        "number": 234,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n",
        "test": "assert volume_cube(2) == 8     # test case for l = 2, volume = 8 ",
        "num_ids": 1340,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    \n    # Convert the given number to binary\n    binary = bin(n)[2:]\n    \n    # Create a list to store the modified binary digits\n    modified_binary = []\n    \n    # Loop through each digit in the binary representation of the number\n    for digit in binary:\n        # If the digit is odd, set it to 1 and add it to the modified binary list\n        if int(digit) % 2 == 1:\n            modified_binary.append('1')\n        # If the digit is even, leave it as it is and add it to the modified binary list\n        else:\n            modified_binary.append(digit)\n    \n    # Convert the modified binary list back to a string\n    modified_binary_str = ''.join(modified_binary)\n    \n    # Convert the modified binary string back to decimal and return it\n    return int(modified_binary_str, 2)\n",
        "test": "assert even_bit_set_number(1) == 1, \"Function should return 1 for n = 1\"",
        "num_ids": 2705,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter_dict = Counter(test_list)\n    return dict(counter_dict)",
        "test": "assert check_occurences([]) == {} # test empty list",
        "num_ids": 4139,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_of_substrings(s):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n    return count\n",
        "test": "assert number_of_substrings('') == 0",
        "num_ids": 1638,
        "indeed": true
    },
    {
        "number": 239,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the result to 0\n    result = 0\n    \n    # Loop through all possible elements of the sequence\n    for i in range(1, m+1):\n        # Check if the current element satisfies the given conditions\n        if i >= 2*result and i <= m:\n            # If it does, add it to the result\n            result += 1\n    \n    # Return the total number of possible sequences\n    return result\n",
        "test": "assert get_total_number_of_sequences(5, 3) == 3, \"Incorrect output for m=5, n=3\"",
        "num_ids": 4255,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1\n",
        "test": "assert replace_list([1, 2, 3], [4, 5]) == [1, 2, [4, 5]]",
        "num_ids": 2465,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "test": "assert count_charac(\"hello\") == 5 # string \"hello\" has 5 characters",
        "num_ids": 1479,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    next_square = (sqrt_N + 1)**2\n    return int(next_square)\n",
        "test": "assert next_Perfect_Square(0) == 1 # Test case 1",
        "num_ids": 1764,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        # Initialize the maximum sum\n        max_sum = float('-inf')\n        \n        # Find the maximum increasing subsequence sum\n        inc_sum = arr[0]\n        for i in range(1, n):\n            inc_sum = max(inc_sum, arr[i] + inc_sum)\n            max_sum = max(max_sum, inc_sum)\n        \n        # Find the maximum decreasing subsequence sum\n        dec_sum = arr[n-1]\n        for i in range(n-2, -1, -1):\n            dec_sum = max(dec_sum, arr[i] + dec_sum)\n            max_sum = max(max_sum, dec_sum)\n        \n        # Return the maximum sum of the bitonic subsequence\n        return max_sum\n",
        "test": "assert max_sum([1, 2, 3, 4, 5]) == 15 ",
        "num_ids": 3636,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the Babylonian method.\n    \"\"\"\n    guess = number / 2  # initial guess\n    epsilon = 1e-10  # desired precision\n    while abs(guess**2 - number) > epsilon:\n        guess = (guess + number / guess) / 2\n    return guess\n",
        "test": "assert babylonian_squareroot(4) == 2, \"Babylonian square root not correct for 4\"",
        "num_ids": 2340,
        "indeed": true
    },
    {
        "number": 247,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n-1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n",
        "test": "assert lps('BBABCBCAB') == 7",
        "num_ids": 2834,
        "indeed": true
    },
    {
        "number": 248,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n",
        "test": "assert harmonic_sum(4) == 1.8333333333333333 # Should return 1.8333333333333333 if n=4",
        "num_ids": 1898,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection\n",
        "test": "assert intersection_array([1, 2, 3], [2, 3, 4]) == [2, 3]",
        "num_ids": 2056,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n",
        "test": "assert count_X((1, 2, 3, 4, 5), 3) == 1",
        "num_ids": 1987,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def insert_element(lst, elem):\n    result = []\n    for x in lst:\n        result.append(elem)\n        result.append(x)\n    return result\n",
        "test": "assert insert_element([1], 2) == [2, 1]  # insert 2 before 1",
        "num_ids": 1811,
        "indeed": true
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Check if numbers is a list or tuple\n    if not isinstance(numbers, (list, tuple)):\n        print(\"Input should be a list or tuple of complex numbers.\")\n        return\n    \n    # Loop through the list of complex numbers\n    for num in numbers:\n        # Check if number is complex\n        if not isinstance(num, complex):\n            print(\"All elements in the list should be complex numbers.\")\n            return\n        \n        # Convert complex number to polar coordinates\n        r = cmath.polar(num)[0]\n        theta = cmath.polar(num)[1]\n        \n        # Print the polar coordinates of the number\n        print(f\"{num} = {r} * e^(i * {theta})\")\n",
        "test": "assert convert(3+4j) == (5, 0.9272952180016122, 0.38268343236508985) ",
        "num_ids": 2329,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n",
        "test": "assert count_integer([1,2,3,\"hello\",\"world\"]) == 3  # test a list with mixed elements",
        "num_ids": 1512,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "test": "assert combinations_colors([1,2,3], 1) == [(1,), (2,), (3,)]",
        "num_ids": 7333,
        "indeed": true
    },
    {
        "number": 256,
        "max_answer_num": 24,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, num)):\n            count += 1\n    return count\n",
        "test": "assert count_Primes_nums(10) == 4  # 2, 3, 5, 7 are prime numbers less than 10",
        "num_ids": 2895,
        "indeed": true
    },
    {
        "number": 257,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n",
        "test": "assert swap_numbers(5, 2) == (2, 5), \"The function does not swap the numbers correctly.\"",
        "num_ids": 1341,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup += (test_tup1[i],)\n        else:\n            max_tup += (test_tup2[i],)\n    return max_tup\n",
        "test": "assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)",
        "num_ids": 2687,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 31,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import random\n\ndef is_prime(n, k=5):\n    \"\"\"\n    Miller-Rabin primality test.\n    Returns True if n is probably prime, False otherwise.\n    \"\"\"\n    if n == 2 or n == 3:\n        return True\n    if n <= 1 or n % 2 == 0:\n        return False\n\n    # Write n-1 as 2^r * d\n    d = n - 1\n    r = 0\n    while d % 2 == 0:\n        r += 1\n        d //= 2\n\n    for _ in range(k):\n        a = random.randint(2, n - 2)\n        x = pow(a, d, n)\n        if x == 1 or x == n - 1:\n            continue\n        for _ in range(r - 1):\n            x = pow(x, 2, n)\n            if x == n - 1:\n                break\n        else:\n            return False\n    return True\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    count = 0\n    p = 2\n    while count < n:\n        if is_prime(p):\n            count += 1\n            if count == n:\n                return p\n        p += 1\n\n    # If we reach this point, there are no newman\u2013shanks\u2013williams primes with index n\n    return None",
        "test": "assert newman_prime(1) == 2",
        "num_ids": 4265,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result\n",
        "test": "assert division_elements((1,2,3), (2,4,6)) == (0.5, 0.5, 0.5)",
        "num_ids": 2716,
        "indeed": true
    },
    {
        "number": 262,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    return list1[:L], list1[L:]",
        "test": "assert split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == ([1, 2, 3], [4, 5, 6, 7, 8, 9]) # test case 1",
        "num_ids": 2939,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_age = h_age * 7\n    return dog_age",
        "test": "assert dog_age(15) == 240  # 15 human years = 240 dog years",
        "num_ids": 1621,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 32,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    temp = []\n    count = 0\n    \n    for i in S:\n        temp.append(i)\n        count += 1\n        if count == step:\n            result.append(temp)\n            temp = []\n            count = 0\n    if temp:\n        result.append(temp)\n    \n    return result\n",
        "test": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "num_ids": 3156,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l**2\n    return area\n",
        "test": "assert lateralsurface_cube(1) == 6 # For a cube with side length of 1, the lateral surface area should be 6",
        "num_ids": 1687,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n    i = 1\n    while count < n:\n        if i % 2 != 0:\n            sum += i**2\n            count += 1\n        i += 1\n    return sum\n",
        "test": "assert square_Sum(1) == 1 # The sum of the squares of the first 1 odd natural numbers is 1.",
        "num_ids": 2115,
        "indeed": true
    },
    {
        "number": 268,
        "max_answer_num": 27,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the nth star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + 1\n",
        "test": "assert find_star_num(1) == 1, \"Error in find_star_num(1)\"",
        "num_ids": 1834,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert ascii_value('A') == 65",
        "num_ids": 1201,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert sum_even_and_even_index([1, 3, 5, 7, 9]) == 0, \"Incorrect output for [1, 3, 5, 7, 9]\"",
        "num_ids": 2112,
        "indeed": true
    },
    {
        "number": 271,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**5\n    return sum\n",
        "test": "assert even_Power_Sum(0) == 0",
        "num_ids": 2089,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result\n",
        "test": "assert rear_extract([(1, 2), (3, 4)]) == [2, 4]",
        "num_ids": 2317,
        "indeed": true
    },
    {
        "number": 273,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup\n",
        "test": "assert substract_elements((1,2,3),(4,5,6)) == (-3, -3, -3)",
        "num_ids": 2527,
        "indeed": true
    },
    {
        "number": 274,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # Initialize the sum to 0\n    sum = 0\n    \n    # Iterate through the even indices\n    for i in range(0, n+1, 2):\n        # Compute the binomial coefficient for the current even index\n        binomial_coeff = math.comb(n, i)\n        \n        # Add the binomial coefficient to the sum\n        sum += binomial_coeff\n        \n    # Return the sum\n    return sum\n",
        "test": "assert even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 2084,
        "indeed": true
    },
    {
        "number": 276,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h\n",
        "test": "assert volume_cylinder(0,5) == 0  # r=0, volume should be 0",
        "num_ids": 2015,
        "indeed": true
    },
    {
        "number": 277,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n",
        "test": "assert dict_filter({'a': 5, 'b': 3, 'c': 8, 'd': 9, 'e': 4}, 5) == {'a': 5, 'c': 8, 'd': 9} # should return {'a': 5, 'c': 8, 'd': 9}",
        "num_ids": 2650,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 18,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            count += 1\n    return count\n",
        "test": "assert count_first_elements(('b', 'a', 'c', 'd')) == 1",
        "num_ids": 2143,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 25,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n * (n * 10 - 1) // 9\n",
        "test": "assert is_num_decagonal(1) == 1, \"Error: 1st decagonal number is 1\"",
        "num_ids": 1474,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert sequential_search([1, 2, 3, 4, 5], 3) == (True, 2)",
        "num_ids": 2157,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "test": "assert all_unique([1,2,3,4,5]) == True",
        "num_ids": 1697,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n",
        "test": "assert sub_list([1,2,3,4],[5,6,7,8]) == [-4,-4,-4,-4] # should return [-4,-4,-4,-4]",
        "num_ids": 2349,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    for digit in set(digits):\n        freq = digits.count(digit)\n        if freq > digit:\n            return False\n    return True\n",
        "test": "assert validate(123) == True",
        "num_ids": 1547,
        "indeed": true
    },
    {
        "number": 284,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item != element:\n            return False\n    return True\n",
        "test": "assert check_element([1,2,3], 1) == False",
        "num_ids": 1607,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab{2,3}')\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three(\"abbab\") == True",
        "num_ids": 1539,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array\n    which is formed by repeating the given array k times.\n    \"\"\"\n\n    # Create the modified array by repeating the original array k times\n    modified_array = a * k\n\n    # Initialize the sum of the contiguous array with the first element of the modified array\n    max_sum = modified_array[0]\n\n    # Initialize the sum of the contiguous array with the first element of the modified array\n    current_sum = modified_array[0]\n\n    # Iterate through the modified array from the second element\n    for i in range(1, len(modified_array)):\n        # If the current element is greater than the previous sum, update the current sum\n        if modified_array[i] > current_sum + modified_array[i]:\n            current_sum = modified_array[i]\n        # Otherwise, update the current sum as the sum of the previous element and the current element\n        else:\n            current_sum = current_sum + modified_array[i]\n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum",
        "test": "assert max_sub_array_sum_repeated([-1, -2, -3, -4, -1, -2, -1, -5, -4], 2, 3) == -1  # all elements in the array are negative",
        "num_ids": 3851,
        "indeed": true
    },
    {
        "number": 287,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert square_Sum(0) == 0",
        "num_ids": 1787,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def max_length(list1):\n    max_len = 0\n    max_lst = []\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_lst = lst\n    return max_lst\n",
        "test": "assert max_length([]) == []",
        "num_ids": 2813,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def count_no_of_ways(n, k):\n    # if there is only one or zero post, then there can only be one way to paint the fence\n    if n <= 1:\n        return 1\n    # if there are two or more posts, then there can be at most two adjacent posts with the same color\n    # so the number of ways to paint the fence is the sum of the number of ways to paint the fence with two adjacent posts of the same color\n    # and the number of ways to paint the fence with no adjacent posts of the same color\n    return count_no_of_ways(n-2, k) + count_no_of_ways(n-1, k) * (k-1)\n",
        "test": "assert count_no_of_ways(1, 1) == 1, \"test case failed\"",
        "num_ids": 3605,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find(n, m):\n    quotient = n // m\n    return quotient\n",
        "test": "assert find(4,2) == 2 # Should return 2",
        "num_ids": 1018,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the third side using the Pythagorean theorem.\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side\n",
        "test": "assert otherside_rightangle(3,4) == 5, \"Error in otherside_rightangle function for input (3,4)\"",
        "num_ids": 1959,
        "indeed": true
    },
    {
        "number": 294,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def max_val(listval):\n    max_val = listval[0]\n    for val in listval:\n        if isinstance(val, (int, float)):\n            if val > max_val:\n                max_val = val\n    return max_val\n",
        "test": "assert max_val([1, 2, 3, 4, 5]) == 5 ",
        "num_ids": 2012,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "test": "assert sum_div(0) == 0",
        "num_ids": 1994,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n",
        "test": "assert get_Inv_Count([1, 2, 3, 4, 5]) == 0  # Example array with no inversions",
        "num_ids": 1944,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for element in list1:\n        if type(element) == list:\n            result += flatten_list(element)\n        else:\n            result.append(element)\n    return result\n",
        "test": "assert flatten_list([1, [2, 3], [4, [5, 6]], [7, [8, [9, 10]]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] ",
        "num_ids": 2735,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 400,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    aggregates = defaultdict(int)\n    for state, num in stdata:\n        aggregates[state] += num\n    return max(aggregates.values())",
        "test": "assert max_aggregate([(1,1), (2,2), (3,3)]) == 9",
        "num_ids": 3150,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(n)  # Convert decimal to binary sequence and pad with zeros to length n\n        if sum(int(bit) for bit in binary_seq[:n]) == sum(int(bit) for bit in binary_seq[-n:]):\n            count += 1\n    return count\n",
        "test": "assert count_binary_seq(0) == 1",
        "num_ids": 2446,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 27,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def dict_depth(d, depth=1):\n    max_depth = depth\n    for v in d.values():\n        if isinstance(v, dict):\n            max_depth = max(max_depth, dict_depth(v, depth+1))\n    return max_depth\n",
        "test": "assert dict_depth({'a': {'b': 1}}) == 2 # nested dictionary has depth 2",
        "num_ids": 2013,
        "indeed": true
    },
    {
        "number": 304,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the range of the array after the rotation\n    for i in range(len(ranges)):\n        if index < ranges[i]:\n            break\n    \n    # Find the number of rotations in the range\n    rotation_count = rotations[i-1] if i > 0 else 0\n    \n    # Calculate the final index\n    final_index = index + rotation_count\n    \n    # If the index is beyond the length of the array, wrap it around\n    if final_index >= len(arr):\n        final_index = final_index % len(arr)\n    \n    # Return the element at the final index\n    return arr[final_index]\n",
        "test": "assert find_Element([1,2,3,4,5,6,7], [0,2], [0,3], 0) == 1",
        "num_ids": 3747,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match('^p', word):\n            p_words.append(word)\n    if len(p_words) >= 2:\n        return p_words[:2]\n    else:\n        return p_words\n",
        "test": "assert start_withp(['python', 'java', 'javascript', 'php']) == ['python', 'php'] # test case 1",
        "num_ids": 1929,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [0] * (n+1)\n    dp[0] = 0\n    for i in range(1, n+1):\n        dp[i] = a[i-1]\n        for j in range(i):\n            if a[j] < a[i-1] and dp[i] < dp[j] + a[i-1]:\n                dp[i] = dp[j] + a[i-1]\n    return max(dp[1:])\n",
        "test": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 3, 4) == 9  # Example from the function docstring",
        "num_ids": 3786,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Find the start and end indices of the colon\n    start_index = max(0, m - 1)\n    end_index = min(len(new_tuplex), n)\n    \n    # Slice the tuple to get the colon\n    colon = new_tuplex[start_index:end_index]\n    \n    # Return the colon\n    return colon\n",
        "test": "assert colon_tuplex((), 0, 0) == () # test 1",
        "num_ids": 2335,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    for i in range(N):\n        for j in range(N):\n            products.append(nums1[i] * nums2[j])\n    products.sort(reverse=True)\n    return products[:N]\n",
        "test": "assert large_product([-10, 5, 3, 7], [2, -8, 3, 1], 0) == []",
        "num_ids": 3076,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(1, 2) == 2  # test case 1",
        "num_ids": 1228,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple(\"hello\") == ('h', 'e', 'l', 'l', 'o') ",
        "num_ids": 1330,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    while (n & 1) != 0:\n        n >>= 1\n    return n | 1\n",
        "test": "assert set_left_most_unset_bit(0b0000) == 0b0001",
        "num_ids": 4114,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume\n",
        "test": "assert volume_cone(2, 3) == 12.566370614359172, \"Error: Incorrect volume calculation\"",
        "num_ids": 1927,
        "indeed": true
    },
    {
        "number": 388,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while (2**power <= n):\n        power += 1\n    return 2**(power-1)\n",
        "test": "assert highest_Power_of_2(1) == 1",
        "num_ids": 1457,
        "indeed": true
    },
    {
        "number": 389,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nprint(find_lucas(0)) # Output: 2\nprint(find_lucas(1)) # Output: 1\nprint(find_lucas(2)) # Output: 3\nprint(find_lucas(3)) # Output: 4\n",
        "test": "assert find_lucas(0) == 2 ",
        "num_ids": 1586,
        "indeed": true
    },
    {
        "number": 390,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for i in list_:\n        formatted_list.append(string.format(i))\n    return formatted_list",
        "test": "assert add_string([], \"test\") == []  # check if the function works correctly with an empty list",
        "num_ids": 2205,
        "indeed": true
    },
    {
        "number": 391,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result",
        "test": "assert convert_list_dictionary([1,2,3], [\"apple\", \"banana\", \"orange\"], [True, False, True]) != {1: {\"apple\": True}, 2: {\"banana\": False}, 3: {\"orange\": False}} ",
        "num_ids": 2826,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def get_max_sum(n):\n    memo = {}  # memoization to store intermediate results\n\n    def f(x):\n        if x in memo:\n            return memo[x]\n        if x <= 1:\n            return x\n        else:\n            memo[x] = max(f(x // 2) + f(x // 3) + f(x // 4) + f(x // 5), x)\n            return memo[x]\n\n    return f(n)\n",
        "test": "assert get_max_sum(1) == 1",
        "num_ids": 2156,
        "indeed": true
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for lst in input_list:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n    \n    return max_list\n",
        "test": "assert max_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [6, 7, 8, 9] # example test case 1",
        "num_ids": 2419,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) != len(set(test_tup)):\n        return False\n    else:\n        return True\n",
        "test": "assert check_distinct((1, 2, 3, 4, 5)) == True",
        "num_ids": 1444,
        "indeed": true
    },
    {
        "number": 395,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None\n",
        "test": "assert first_non_repeating_character(\"hello\") == \"h\"",
        "num_ids": 2094,
        "indeed": true
    },
    {
        "number": 396,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n",
        "test": "assert check_char(\"hello\") == False",
        "num_ids": 1262,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Find the middle number\n    if len(sorted_numbers) == 2:\n        median = (sorted_numbers[0] + sorted_numbers[1]) / 2\n    else:\n        median = sorted_numbers[1]\n    \n    return median\n",
        "test": "assert median_numbers(2, 4, 6) == 4  # a is greater than b and c",
        "num_ids": 2088,
        "indeed": true
    },
    {
        "number": 398,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sums\n    sums = []\n    # Loop through each number in the input list\n    for num in nums:\n        # Convert the number to a string so we can iterate over its digits\n        digits = str(num)\n        # Initialize a variable to store the sum of the digits\n        digit_sum = 0\n        # Loop through each digit in the string representation of the number\n        for digit in digits:\n            # Add the digit to the running sum\n            digit_sum += int(digit)\n        # Add the sum of the digits to the list of sums\n        sums.append(digit_sum)\n    # Return the list of sums\n    return sums\n",
        "test": "assert sum_of_digits([123, 456, 789]) == [6, 15, 24] ",
        "num_ids": 2235,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 22,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result\n",
        "test": "assert bitwise_xor((0,0,0,0,0,0,0,0),(1,1,1,1,1,1,1,1)) == (1,1,1,1,1,1,1,1)  # True, correct result",
        "num_ids": 2865,
        "indeed": true
    },
    {
        "number": 400,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def extract_freq(test_list):\n    # Convert the list into a set to remove duplicates\n    test_set = set(test_list)\n    # Convert the set back into a list and count the unique tuples\n    unique_tuples = len(list(test_set))\n    return unique_tuples\n",
        "test": "assert extract_freq([(1,2),(3,4),(1,2)]) == 2",
        "num_ids": 2797,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(tuple(x+y for x,y in zip(test_tup1[i], test_tup2[i])))\n    return tuple(result)\n",
        "test": "assert add_nested_tuples(((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12))) == ((8, 10, 12), (14, 16, 18))",
        "num_ids": 2824,
        "indeed": true
    },
    {
        "number": 404,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "test": "assert minimum(5, 10) == 5",
        "num_ids": 1103,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuplex:\n        if elem in tuple1:\n            return True\n    return False\n",
        "test": "assert check_tuplex((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\")) == False # Test for non-existent element in tuple",
        "num_ids": 1584,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert find_Parity(0) == True",
        "num_ids": 1312,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 20,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    digits.sort(reverse=True)\n    return int(\"\".join(map(str, digits)))",
        "test": "assert rearrange_bigger(23) == 32",
        "num_ids": 3236,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    heapq.heapify(heap)\n    seen = set()\n    for num1 in nums1:\n        for num2 in nums2:\n            if (num1, num2) not in seen:\n                seen.add((num1, num2))\n                heapq.heappush(heap, (num1 + num2, num1, num2))\n            if len(heap) == k:\n                break\n        if len(heap) == k:\n            break\n    result = []\n    while heap:\n        _, num1, num2 = heapq.heappop(heap)\n        result.append((num1, num2))\n    return result\n",
        "test": "assert k_smallest_pairs([1, 1, 1], [1, 2, 3], 1) == [(1, 1)]",
        "num_ids": 4642,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 390,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n",
        "test": "assert min_product_tuple([(1,1), (1,1), (1,1)]) == 1",
        "num_ids": 2953,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    if not listval: # Checking if the list is empty\n        return None\n    \n    min_val = listval[0] # Setting the minimum value as the first element of the list\n    \n    for i in range(1, len(listval)):\n        if type(listval[i]) != type(min_val): # Checking if the current element is of different data type\n            continue # Skipping the current iteration as we can't compare different data types\n        \n        if listval[i] < min_val: # Comparing the current element with the minimum value\n            min_val = listval[i] # Updating the minimum value\n    \n    return min_val # Returning the minimum value\n",
        "test": "assert min_val([1, 2, 3]) == 1",
        "num_ids": 2210,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 34,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n    \"\"\"\n    first, *rest = re.sub('(?<=[a-z])([A-Z])', r'_\\1', word).split('_')\n    return first.lower() + ''.join(word.title() for word in rest)\n",
        "test": "assert snake_to_camel(\"hello_world\") == \"helloWorld\"",
        "num_ids": 1890,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2 == 0]\n",
        "test": "assert remove_odd([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]",
        "num_ids": 1486,
        "indeed": true
    },
    {
        "number": 413,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for tup in list1:\n        if n == 0:\n            return tup[0]\n        n -= 1\n    return None\n",
        "test": "assert extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 5) == None  # tests for invalid index",
        "num_ids": 2409,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Initialize a variable to check if any value overlaps\n    overlap = False\n    \n    # Iterate through the first sequence\n    for item in list1:\n        # If the item is found in the second sequence, set the overlap variable to True\n        if item in list2:\n            overlap = True\n            # If the overlap variable is already True, break out of the loop\n            break\n    \n    # Return the overlap variable\n    return overlap\n",
        "test": "assert overlapping([1, 2, 3], [4, 5, 6]) == False",
        "num_ids": 1768,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 12,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def max_Product(arr):\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "test": "assert max_Product([-10,-10,-10,-10,10]) == 100 # max product of two adjacent numbers 10*100 = 100",
        "num_ids": 2896,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def group_tuples(Input):\n    # Create a dictionary to store the count of first elements\n    count_dict = {}\n    # Loop over the tuples in the input list\n    for tup in Input:\n        # Get the first element of the tuple\n        first_elem = tup[0]\n        # If the first element is already in the count_dict, increment its count by 1\n        if first_elem in count_dict:\n            count_dict[first_elem] += 1\n        # Otherwise, add it to the count_dict with a count of 1\n        else:\n            count_dict[first_elem] = 1\n    # Create a list to store the common first elements\n    common_elems = []\n    # Loop over the items in the count_dict\n    for elem, count in count_dict.items():\n        # If the count is greater than 1, add the element to the common_elems list\n        if count > 1:\n            common_elems.append(elem)\n    # Return the list of common first elements\n    return common_elems\n",
        "test": "assert group_tuples([(1,2), (2,3), (3,4), (2,3), (5,6), (1,2), (1,2)]) == [1, 2], \"Incorrect output for [(1,2), (2,3), (3,4), (2,3), (5,6), (1,2), (1,2)]\"",
        "num_ids": 4360,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element\n",
        "test": "assert Find_Max(['a', 'bc', 'def', 'ghi', 'jklm']) == 'jklm' # Test case 4",
        "num_ids": 1826,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n",
        "test": "assert round_and_sum([100.5, 100.5, 100.5]) == 301 ",
        "num_ids": 1902,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Initialize a variable to store the sum of cubes of even numbers\n    sum_of_cubes = 0\n\n    # Loop through the first n even numbers\n    for i in range(2, 2*n, 2):\n        # Add the cube of the current even number to the sum_of_cubes\n        sum_of_cubes += i**3\n\n    # Return the final sum of cubes of even numbers\n    return sum_of_cubes\n",
        "test": "assert cube_Sum(0) == 0",
        "num_ids": 1689,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return delimiter.join(test_tup)\n",
        "test": "assert concatenate_tuple(()) == ''",
        "num_ids": 1805,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize the sum and count variables\n    sum = 0\n    count = 0\n    \n    # Loop over the first n natural numbers\n    for i in range(1, n+1):\n        # Add the cube of each number to the sum\n        sum += i ** 3\n        # Increment the count variable\n        count += 1\n        \n    # Calculate the average of cubes\n    average = sum / count\n    \n    # Return the result\n    return average\n",
        "test": "assert find_Average_Of_Cube(1) == 1, \"Function is not correct for n=1\"",
        "num_ids": 1952,
        "indeed": true
    },
    {
        "number": 424,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return tuple(result)\n",
        "test": "assert extract_rear((\"apple\", \"banana\", \"orange\")) == (\"e\", \"a\", \"e\")",
        "num_ids": 1871,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n",
        "test": "assert count_element_in_list([[1], [2], [1, 2], [1, 2]], 1) == 3 ",
        "num_ids": 2052,
        "indeed": true
    },
    {
        "number": 426,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2 != 0]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1661,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if not re.match('\\d{4}-\\d{2}-\\d{2}', dt):\n        return 'Invalid date format. Please enter a date in the format yyyy-mm-dd.'\n    \n    return dt[8:10] + '-' + dt[5:7] + '-' + dt[:4]\n",
        "test": "assert change_date_format(\"2021-09-02\") == \"02-09-2021\" ",
        "num_ids": 2750,
        "indeed": true
    },
    {
        "number": 428,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list",
        "test": "assert shell_sort([3, 1, 4, 2, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 2931,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (True,)\n        else:\n            result_tup += (False,)\n    return result_tup\n",
        "test": "assert and_tuples((True, True), (True, True)) == (True, True)",
        "num_ids": 2080,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    # Calculate the discriminant\n    delta = b**2 - 4*a*c\n\n    # If the discriminant is positive, there are two directrixes\n    if delta > 0:\n        directrix1 = (-b + math.sqrt(delta)) / (2*a)\n        directrix2 = (-b - math.sqrt(delta)) / (2*a)\n        return directrix1, directrix2\n\n    # If the discriminant is zero, there is one directrix\n    elif delta == 0:\n        directrix = -b / (2*a)\n        return directrix\n\n    # If the discriminant is negative, there are no real directrixes\n    else:\n        return None",
        "test": "assert parabola_directrix(1, 0, 0) == 0 ",
        "num_ids": 2885,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def common_element(list1, list2):\n    # use set intersection to check for common elements\n    return len(set(list1) & set(list2)) > 0\n",
        "test": "assert common_element([1,2,3], [4,5,6]) == False",
        "num_ids": 1775,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 12,
        "max_test_num": 1,
        "total_product": 350,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median = (base1 + base2) / 2\n    return median\n",
        "test": "assert median_trapezium(4,8,10) == 6 # base1=4, base2=8, height=10 ",
        "num_ids": 1799,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 21,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Loop through the array and check if each element is greater than the number\n    for elem in arr:\n        if elem > number:\n            return True\n    # If no element in the array is greater than the number, return False\n    return False\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 3) == True",
        "num_ids": 1612,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_one(text):\n    match = re.search(r'ab+', text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_one('ab') == True",
        "num_ids": 1380,
        "indeed": true
    },
    {
        "number": 435,
        "max_answer_num": 39,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n    \"\"\"\n    # convert the number to a string\n    n = str(n)\n    # get the last digit of the number\n    last_digit = n[-1]\n    # convert the last digit to an integer\n    last_digit = int(last_digit)\n    return last_digit\n",
        "test": "assert last_Digit(0) == 0",
        "num_ids": 1477,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_nos = []\n    for i in list1:\n        if i < 0:\n            negative_nos.append(i)\n    return negative_nos",
        "test": "assert neg_nos([1, 2, -3, 4, -5]) == [-3, -5] ",
        "num_ids": 1759,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            new_str += str1[i]\n    return new_str",
        "test": "assert remove_odd(\"\") == \"\" ",
        "num_ids": 1533,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]: # check if first element is reverse of second element\n                count += 1\n    return count\n",
        "test": "assert count_bidirectional([]) == 0",
        "num_ids": 2747,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = ''\n    for num in L:\n        result += str(num)\n    return int(result)\n",
        "test": "assert multiple_to_single([0]) == 0 ",
        "num_ids": 2663,
        "indeed": true
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 400,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b(early|earlier|later|laterly|sooner|now)\\b', text.lower())\n    if adverbs:\n        adverb = adverbs[0]\n        positions = [m.start() for m in re.finditer(r'\\b{}\\b'.format(adverb), text.lower())]\n        return (adverb, positions)\n    else:\n        return None\n",
        "test": "assert find_adverb_position(\"She is doing well.\") is None # \"well\" is not an adverb",
        "num_ids": 3101,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # Calculating the surface area of a cube using the formula: 6 * (side^2)\n    surface_area = 6 * (l ** 2)\n    return surface_area\n",
        "test": "assert surfacearea_cube(2) == 24 # Cube with side length 2, surface area = 6 * 4 = 24",
        "num_ids": 1692,
        "indeed": true
    },
    {
        "number": 442,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def positive_count(nums):\n    # Count the number of positive integers\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    # Calculate the ratio of positive numbers\n    ratio = count / len(nums)\n    return ratio",
        "test": "assert positive_count([0, -1, -2, -3, -4]) == 0/5",
        "num_ids": 2215,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = None\n    for i in list1:\n        if i < 0:\n            if largest_neg is None or i > largest_neg:\n                largest_neg = i\n    return largest_neg\n",
        "test": "assert largest_neg([5, -7, 1, -3, 9]) == -3",
        "num_ids": 1802,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 270,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(x for x in tup[:-K] + tup[-K:])\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list\n",
        "test": "assert trim_tuple([], 1) == []  # check if the function works for empty input list",
        "num_ids": 2238,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result\n",
        "test": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)",
        "num_ids": 2401,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 23,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    c = Counter()\n    for x in tup:\n        if x in lst:\n            c[x] += 1\n    return dict(c)\n",
        "test": "assert count_Occurrence((1, 2, 3, 4, 5), []) == {} ",
        "num_ids": 2895,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n",
        "test": "assert cube_nums([1,2,3]) == [1,8,27]",
        "num_ids": 1611,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def is_perrin(num):\n        '''Helper function to check if a number is a perrin number'''\n        digits = [int(digit) for digit in str(num)]\n        return sum(digits) == len(digits)\n\n    total_sum = 0\n    for num in range(1, n+1):\n        if is_perrin(num):\n            total_sum += num\n    return total_sum",
        "test": "assert cal_sum(0) == 0, \"cal_sum(0) should be 0\"",
        "num_ids": 2119,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for s in str_list:\n        if len(s) >= l:\n            extracted_str.append(s[:l])\n        else:\n            extracted_str.append(s)\n    return extracted_str\n",
        "test": "assert extract_string([\"A\", \"B\", \"C\", \"D\", \"E\"], 1) == [\"A\", \"B\", \"C\", \"D\", \"E\"]",
        "num_ids": 1827,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    return re.sub(r'\\s+', '', text1)\n",
        "test": "assert remove_whitespaces(\"hello world\") == \"helloworld\"",
        "num_ids": 1294,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0\n",
        "test": "assert loss_amount(100,100) == 0 # example 3",
        "num_ids": 1630,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_of_factors = 0\n    \n    # Calculate the square root of n\n    root_n = math.sqrt(n)\n    \n    # Iterate over numbers from 1 to the square root of n\n    for i in range(1, int(root_n)+1):\n        \n        # If i is a factor of n and even\n        if n % i == 0 and i % 2 == 0:\n            \n            # Add i and n/i to the sum of factors\n            sum_of_factors += i + n//i\n            \n    # Return the sum of factors\n    return sum_of_factors\n",
        "test": "assert sumofFactors(1) == 0  # the sum of factors of 1 is 0",
        "num_ids": 2572,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search(r'\\b\\w+z\\w+\\b', text, re.IGNORECASE)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_match_wordz(\"Hello world\") == None",
        "num_ids": 1633,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 29,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 2:\n        return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n",
        "test": "assert check_monthnumb_number(4) == True # April",
        "num_ids": 2497,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list\n",
        "test": "assert reverse_string_list(['hello', 'world']) == ['olleh', 'dlrow']",
        "num_ids": 1956,
        "indeed": true
    },
    {
        "number": 457,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def Find_Min(lst):\n    min_length = len(lst)\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n",
        "test": "assert Find_Min([]) == [] # test for empty list",
        "num_ids": 2257,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function calculates the area of a rectangle given the length and breadth of the rectangle.\n    \"\"\"\n    area = l * b\n    return area\n",
        "test": "assert rectangle_area(2, 3) == 6",
        "num_ids": 1353,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]+', '', str1)\n",
        "test": "assert remove_uppercase('') == ''",
        "num_ids": 1493,
        "indeed": true
    },
    {
        "number": 460,
        "max_answer_num": 28,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements\n",
        "test": "assert Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]",
        "num_ids": 1543,
        "indeed": true
    },
    {
        "number": 461,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count\n",
        "test": "assert upper_ctr('Hello World') == 2",
        "num_ids": 1738,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import itertools\n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1)+1):\n        result += list(itertools.combinations(list1, i))\n    return result\n",
        "test": "assert combinations_list([]) == []",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def max_subarray_product(arr):\n    # Initialize variables to keep track of the maximum and minimum subarray products found so far\n    max_product = float('-inf')\n    min_product = float('inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Update the maximum and minimum subarray products\n        max_ending_here *= num\n        min_ending_here *= num\n        max_product = max(max_product, max_ending_here)\n        min_product = min(min_product, min_ending_here)\n\n        # If the current product is negative and the minimum subarray product is negative, reset the maximum and minimum subarray products\n        if max_ending_here < 0:\n            max_ending_here = 1\n            min_ending_here = 1\n        elif min_ending_here < 0:\n            max_ending_here = max(max_ending_here, num)\n            min_ending_here = 1\n\n    # Return the maximum subarray product\n    return max_product\n",
        "test": "assert max_subarray_product([1, 2, 3, 4]) == 24  # Example 4",
        "num_ids": 3264,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 35,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    return len(set(values)) == 1\n",
        "test": "assert check_value({\"a\": 1, \"b\": 1, \"c\": 1}, 1) == True",
        "num_ids": 1909,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "test": "assert drop_empty({}) == {}",
        "num_ids": 2271,
        "indeed": true
    },
    {
        "number": 468,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_product = arr[0]\n    for i in range(1, n):\n        if arr[i] > 0:\n            max_product = max(max_product * arr[i], arr[i])\n        else:\n            max_product = max(max_product * arr[i], -arr[i])\n    return max_product\n",
        "test": "assert max_product([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 2948,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 390,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result\n",
        "test": "assert add_pairwise(()) == () ",
        "num_ids": 2035,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n",
        "test": "assert find_remainder([1,1,1],11) == 1",
        "num_ids": 1840,
        "indeed": true
    },
    {
        "number": 472,
        "max_answer_num": 37,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = False\n    for i in range(len(l) - 1):\n        if l[i+1] - l[i] == 1:\n            consecutive = True\n        else:\n            consecutive = False\n            break\n    return consecutive",
        "test": "assert check_Consecutive([1, 2, 3, 4]) == True, \"Consecutive numbers\"",
        "num_ids": 2071,
        "indeed": true
    },
    {
        "number": 473,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create an empty set to store the common elements\n    common_elements = set()\n    \n    # iterate over each element in test_list1 and test_list2\n    for element in test_list1:\n        if element in test_list2:\n            common_elements.add(element)\n    \n    # create a tuple from the common elements set\n    common_tuple = tuple(common_elements)\n    \n    return common_tuple\n",
        "test": "assert tuple_intersection(('apple', 'banana', 'orange'), ('apple', 'orange', 'banana')) == ('apple', 'orange', 'banana') # should return true, since it's the same list with different order of elements",
        "num_ids": 3032,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)\n",
        "test": "assert replace_char(\"hello\", \"l\", \"k\") == \"hekko\"",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 330,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))",
        "test": "assert sort_counter({1:10, 2:20, 3:30}) == {2:20, 3:30, 1:10} # check if the keys are sorted by value in descending order",
        "num_ids": 2639,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num\n",
        "test": "assert big_sum([-1, 0, 1]) == 0 # Test case 4",
        "num_ids": 2287,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()",
        "test": "assert is_lower(\"Hello\") == \"hello\"",
        "num_ids": 1025,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # Split the string into words\n    words = re.split(r'\\s+', str1)\n\n    # Filter out words that contain only lowercase letters\n    filtered_words = filter(lambda w: not w.islower(), words)\n\n    # Join the remaining words back into a string\n    result = ' '.join(filtered_words)\n\n    return result",
        "test": "assert remove_lowercase(\"\") == \"\"",
        "num_ids": 1622,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10**(len(str(n))-1)\n",
        "test": "assert first_Digit(10) == 1 # the first digit of 10 is 1",
        "num_ids": 1541,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 31,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def Split(lst):\n    # create an empty list to store odd integers\n    odd_lst = []\n    # iterate through each element in the list\n    for num in lst:\n        # check if the number is odd\n        if num % 2 != 0:\n            # if the number is odd, add it to the odd_lst\n            odd_lst.append(num)\n    # return the odd_lst\n    return odd_lst\n",
        "test": "assert Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5] ",
        "num_ids": 1525,
        "indeed": true
    },
    {
        "number": 555,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Sum of the first n natural numbers\n    sum_natural = n * (n + 1) // 2\n    # Sum of the cubes of the first n natural numbers\n    sum_cubes = n * (n + 1) * (2 * n + 1) // 6\n    # Difference between the sum of cubes and the sum of the first n natural numbers\n    diff = sum_cubes - sum_natural\n    return diff\n",
        "test": "assert difference(1) == 1-1",
        "num_ids": 2186,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i]^A[j])%2!=0:\n                count += 1\n    return count\n",
        "test": "assert find_Odd_Pair([1,3,5,7,9], 5) == 0, \"Test 2 Failed\" ",
        "num_ids": 2311,
        "indeed": true
    },
    {
        "number": 557,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\n",
        "test": "assert toggle_string(\"hello\") == \"HELLO\" ",
        "num_ids": 1404,
        "indeed": true
    },
    {
        "number": 558,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def digit_difference(num1, num2):\n        result = 0\n        while num1 > 0 and num2 > 0:\n            digit1 = num1 % 10\n            digit2 = num2 % 10\n            result += abs(digit1 - digit2)\n            num1 //= 10\n            num2 //= 10\n        return result\n\n    return digit_difference(n1, n2) + digit_difference(n2, n1)\n",
        "test": "assert digit_distance_nums(999, 999) == 0, \"Test 2\" # Test case: n1 = 999, n2 = 999, result = 0",
        "num_ids": 3573,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def max_sub_array_sum(a, size):\n    if size == 0:\n        return 0\n\n    max_sum = a[0]\n    current_sum = a[0]\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n",
        "test": "assert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 9) == 6",
        "num_ids": 3042,
        "indeed": true
    },
    {
        "number": 560,
        "max_answer_num": 36,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1).union(set(test_tup2))\n    return tuple(sorted(union_set))\n",
        "test": "assert union_elements((), ()) == ()",
        "num_ids": 2689,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if isinstance(lst[i], list):\n            sub_len = len(lst[i])\n            if sub_len > max_len:\n                max_len = sub_len\n    return max_len\n",
        "test": "assert Find_Max_Length([[1, 2], [3, 4, 5], [6], [7, 8, 9, 10]]) == 4",
        "num_ids": 2152,
        "indeed": true
    },
    {
        "number": 563,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    return [match.group(1) for match in pattern.finditer(text)]\n",
        "test": "assert extract_values('This is a \"value1\" and this is another \"value2\".') == ['value1', 'value2']",
        "num_ids": 1675,
        "indeed": true
    },
    {
        "number": 564,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count",
        "test": "assert count_Pairs([1,2,3,4,5],5) == 10",
        "num_ids": 2138,
        "indeed": true
    },
    {
        "number": 565,
        "max_answer_num": 38,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def split(word):\n    return list(word)\n",
        "test": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']",
        "num_ids": 1404,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 35,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string to iterate through each digit\n    n_str = str(n)\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through each digit in the string\n    for digit in n_str:\n        # Convert the digit back to an integer and add it to the sum variable\n        sum += int(digit)\n        \n    # Return the sum of the digits\n    return sum\n",
        "test": "assert sum_digits(0) == 0 # sum of digits of 0 is 0",
        "num_ids": 1707,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    \n    return True\n",
        "test": "assert issort_list([]) == True # test an empty list",
        "num_ids": 1774,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 380,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n",
        "test": "assert empty_list(0) == []  # check if empty_list returns an empty list when length is 0",
        "num_ids": 1185,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "test": "assert sort_sublists([[\"hello\", \"world\"], [\"dog\", \"cat\", \"fish\"], [\"apple\", \"banana\", \"orange\"]]) == [[\"hello\", \"world\"], [\"cat\", \"dog\", \"fish\"], [\"apple\", \"banana\", \"orange\"]] ",
        "num_ids": 2560,
        "indeed": true
    },
    {
        "number": 572,
        "max_answer_num": 31,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n",
        "test": "assert two_unique_nums([]) == [] # test with an empty list",
        "num_ids": 2457,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n",
        "test": "assert unique_product([1, 2, 3, 4, 5]) == 120, \"Incorrect result for [1, 2, 3, 4, 5]\"",
        "num_ids": 1817,
        "indeed": true
    },
    {
        "number": 574,
        "max_answer_num": 1,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * (r + h)\n    return area\n",
        "test": "assert surfacearea_cylinder(0, 5) == 0.0  # for r = 0 and h = 5",
        "num_ids": 1959,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 35,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def is_Sub_Array(A,B):\n    if len(A) > len(B):\n        A, B = B, A\n    for i in range(len(B)-len(A)+1):\n        if A == B[i:i+len(A)]:\n            return True\n    return False\n",
        "test": "assert is_Sub_Array([1,2,3,4,5], [1,6,7]) == False # Example 4",
        "num_ids": 2114,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    \n    # Initialize variables\n    factorial = 1\n    last_digit = 0\n    \n    # Calculate factorial of n\n    for i in range(1, n+1):\n        factorial *= i\n        \n    # Calculate last digit of factorial\n    while factorial > 0:\n        last_digit = factorial % 10\n        factorial //= 10\n        \n    return last_digit\n",
        "test": "assert last_Digit_Factorial(1) == 1",
        "num_ids": 1788,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"All input lists must have the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n\n    return result",
        "test": "assert interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9] ",
        "num_ids": 2485,
        "indeed": true
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 380,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar.append(element)\n    return dissimilar\n",
        "test": "assert find_dissimilar((\"apple\", \"banana\", \"cherry\"), (\"dog\", \"cat\", \"cherry\")) == (\"apple\", \"banana\", \"dog\", \"cat\")",
        "num_ids": 2801,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 210,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            # If the item is a tuple, recursively call the even_ele function on it\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            # If the item is even, add it to the result list\n            result.append(item)\n    return tuple(result)\n",
        "test": "assert even_ele(((1, 3, 5), (7, 9, 11), (13, 15, 17)), lambda x: x % 2 == 0) == ((), (), ())  # Test case 2",
        "num_ids": 2497,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the square pyramid\n    surface_area = 2 * (b * b) + (b * s * 2)\n    \n    return surface_area\n",
        "test": "assert surface_Area(5,7) == 120.0, \"Error: surface area of square pyramid should be 120.0\"",
        "num_ids": 2129,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 38,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False\n",
        "test": "assert my_dict({}) == True  # test if an empty dictionary is empty",
        "num_ids": 1411,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num % 2 == 0:\n        return 0\n    else:\n        c = 0\n        for i in range(num//2 + 1):\n            c += catalan_number(i) * catalan_number(num - i - 1)\n        return c\n",
        "test": "assert catalan_number(0) == 1",
        "num_ids": 1849,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 360,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+\\sly\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group()\n        positions = [m.start() for m in re.finditer(adverb, text)]\n        return (adverb, positions)\n    else:\n        return None\n",
        "test": "assert find_adverbs(\"The cat ran quickly.\") == None # Example 3",
        "num_ids": 2553,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 28,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items) < n:\n        return items\n    \n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    \n    return sorted(heap, reverse=True)\n",
        "test": "assert expensive_items([(2, \"apple\"), (3, \"banana\"), (1, \"orange\"), (4, \"grape\")], 1) == [(4, \"grape\")]",
        "num_ids": 3617,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    return l1 + l2\n",
        "test": "assert split_Arr([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]",
        "num_ids": 2620,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert list_tuple([1, 2, 3]) == (1, 2, 3) ",
        "num_ids": 1316,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert big_diff([10, 3, 5, 6, 20]) == 17",
        "num_ids": 2140,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**0.5 == int(i**0.5):\n            squares.append(i)\n    return squares\n",
        "test": "assert perfect_squares(1, 10) != [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 4008,
        "indeed": true
    },
    {
        "number": 590,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n",
        "test": "assert polar_rect(1, 0) == (1, 0) ",
        "num_ids": 1988,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def swap_List(newList):\n    if len(newList) < 2:\n        return newList\n    else:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1] ",
        "num_ids": 1708,
        "indeed": true
    },
    {
        "number": 592,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\ndef sum_product_consecutive_coefficients(n):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum_product = 0\n    for i in range(1, n):\n        sum_product += binomial_Coeff(n, i) * binomial_Coeff(n, n-i)\n    return sum_product\n",
        "test": "assert binomial_Coeff(1,1) == 1",
        "num_ids": 2491,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'\\b0+(\\d+)', r'\\1', ip)\n    return ip",
        "test": "assert removezero_ip('255.255.255.255') == '255.255.255.255'",
        "num_ids": 2578,
        "indeed": true
    },
    {
        "number": 594,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n    return even_num - odd_num\n",
        "test": "assert diff_even_odd([20,19,18,17,16]) == 1",
        "num_ids": 2547,
        "indeed": true
    },
    {
        "number": 595,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def min_Swaps(str1, str2):\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n            for j in range(i, len(str1)):\n                if str1[j] == str2[i]:\n                    str1 = str1[:j] + str1[i] + str1[j+1:]\n                    str1 = str1[:i] + str2[j] + str1[i+1:]\n                    break\n    return count\n",
        "test": "assert min_Swaps('0000', '0000') == 0  # Example 3",
        "num_ids": 4871,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size",
        "test": "assert tuple_size(('apple', 2, 3.5, True) == 10), \"Size of tuple is incorrect\" ",
        "num_ids": 1417,
        "indeed": true
    },
    {
        "number": 597,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1, n2 = len(arr1), len(arr2)\n    i, j = 0, 0\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n    if i == n1:\n        while j < n2 and k > 1:\n            j += 1\n            k -= 1\n        if j < n2:\n            return arr2[j]\n    if j == n2:\n        while i < n1 and k > 1:\n            i += 1\n            k -= 1\n        if i < n1:\n            return arr1[i]\n",
        "test": "assert find_kth([1, 3, 5, 7], [2, 4, 6, 8], 1) == 1  # test case 3",
        "num_ids": 4143,
        "indeed": true
    },
    {
        "number": 598,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Get the number of digits in the given number\n    n = len(str(number))\n    # Initialize the sum\n    sum = 0\n    # Iterate over each digit in the number and add it to the sum\n    for digit in str(number):\n        sum += int(digit) ** n\n    # If the sum of the cubes of each digit is equal to the original number, it's an armstrong number\n    if sum == number:\n        return True\n    else:\n        return False\n",
        "test": "assert armstrong_number(153) == True # The number 153 is an Armstrong number, so the function should return True.",
        "num_ids": 2190,
        "indeed": true
    },
    {
        "number": 599,
        "max_answer_num": 30,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    avg = total / number\n    return total, avg\n",
        "test": "assert sum_average(1) == (1, 1.0), \"Incorrect result for sum_average(1)\"",
        "num_ids": 1853,
        "indeed": true
    },
    {
        "number": 600,
        "max_answer_num": 38,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert is_Even(2) == True",
        "num_ids": 1164,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    return None\n",
        "test": "assert first_repeated_char(\"hello\") == \"l\" # expected output: \"l\"",
        "num_ids": 2203,
        "indeed": true
    },
    {
        "number": 603,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucids = []\n    for i in range(1, n+1):\n        if i == sum(int(digit) ** len(str(i)) for digit in str(i)):\n            lucids.append(i)\n    return lucids\n",
        "test": "assert get_ludic(1) == [1]",
        "num_ids": 4721,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words separated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse the order of words\n    words.reverse()\n    # join the words with spaces in between\n    result = ' '.join(words)\n    return result\n",
        "test": "assert reverse_words('') == ''",
        "num_ids": 1624,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 40,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert prime_num(4) == False",
        "num_ids": 1568,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 33,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian\n",
        "test": "assert radian_degree(90) == 1.5707963267948966 ",
        "num_ids": 1547,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return match.group(), start, end\n    else:\n        return None, None, None\n",
        "test": "assert find_literals(\"Hello world!\", r\"Hello\") == (\"Hello\", 0, 5)",
        "num_ids": 2553,
        "indeed": true
    },
    {
        "number": 608,
        "max_answer_num": 40,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    \n    # create a list to store the bell numbers\n    bell = [1]\n    \n    # loop to find the nth bell number\n    for i in range(1, n+1):\n        bell.append(0)\n        for j in range(i):\n            bell[i] += bell[j] * bell[i-j-1]\n            \n    # return the nth bell number\n    return bell[n]\n",
        "test": "assert bell_Number(1) == 1 ",
        "num_ids": 2151,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 25,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements,\n    but the k'th element removed.\n    '''\n    # remove the k'th element from the list using list slicing\n    list1 = list1[:k] + list1[k+1:]\n    # return the modified list\n    return list1\n",
        "test": "assert remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 4, 5]  # remove 3rd element (index 2)",
        "num_ids": 2525,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 380,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = None\n    for row in test_list:\n        if N-1 < len(row):\n            if max_val is None or row[N-1] > max_val:\n                max_val = row[N-1]\n    return max_val\n",
        "test": "assert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == 9 # test case 3",
        "num_ids": 2926,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 19,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements,\n    and returns a list of two lists where the first list has the first element of each sublist\n    and the second one has the second.\n    \"\"\"\n    # initialize two empty lists\n    first = []\n    second = []\n    \n    # iterate through each sublist in the input list\n    for sublist in lst:\n        # add the first element of each sublist to the first list\n        first.append(sublist[0])\n        # add the second element of each sublist to the second list\n        second.append(sublist[1])\n    \n    # return a list containing the two lists\n    return [first, second]\n",
        "test": "assert merge([[1, 2], [3, 4], [5, 6]]) != [[1, 2], [3, 4]] ",
        "num_ids": 2752,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 30,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    cumulative_sum = []\n    for i in test_list:\n        sum += i\n        cumulative_sum.append(sum)\n    return cumulative_sum\n",
        "test": "assert cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]",
        "num_ids": 2178,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg_list.append(sum(tup)/len(tup))\n    return avg_list\n",
        "test": "assert average_tuple(((10, 20), (30, 40), (50, 60))) == [15.0, 35.0, 55.0]",
        "num_ids": 2795,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        mod_tup = ()\n        for i in range(len(test_tup1)):\n            mod_tup += (test_tup1[i] % test_tup2[i],)\n        return mod_tup\n    else:\n        print(\"Tuples are not of same length\")",
        "test": "assert tuple_modulo((3, 4, 5), (2, 3, 4)) == (1, 1, 1)",
        "num_ids": 2844,
        "indeed": true
    },
    {
        "number": 617,
        "max_answer_num": 14,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def min_Jumps(steps, d):\n    if d == 0:\n        return 0\n    if steps == 0:\n        return -1\n    if d < 0:\n        return -1\n\n    if d == 1:\n        return 1\n\n    jumps = []\n    for i in range(1, d+1):\n        jumps.append(min_Jumps(steps-1, d-i))\n    return max(jumps) + 1\n",
        "test": "assert min_Jumps(4, 2) == 2",
        "num_ids": 2848,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result\n",
        "test": "assert div_list([1, 2, 3], [2, 4, 6]) == [0.5, 0.5, 0.5] ",
        "num_ids": 2593,
        "indeed": true
    },
    {
        "number": 619,
        "max_answer_num": 39,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def move_num(test_str):\n    # Initialize two empty lists for numbers and non-numbers\n    num_list = []\n    non_num_list = []\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Add the number to the num_list\n            num_list.append(char)\n        else:\n            # Add the non-number to the non_num_list\n            non_num_list.append(char)\n    \n    # Join the non_num_list and num_list together to form the new string\n    new_str = ''.join(non_num_list) + ''.join(num_list)\n    \n    # Return the new string\n    return new_str\n",
        "test": "assert move_num(\"\") == \"\"",
        "num_ids": 2276,
        "indeed": true
    },
    {
        "number": 620,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def largest_subset(a):\n    n = len(a)\n    a.sort()\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n",
        "test": "assert largest_subset([1, 2, 3, 4, 5, 6]) == 3",
        "num_ids": 2786,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    median = None\n    \n    if n % 2 == 0:\n        # if both lists have even length\n        i = j = n//2\n        \n        while i < n and arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n        \n        if arr1[i] <= arr2[j]:\n            median = (arr1[i-1] + arr1[i]) / 2\n        else:\n            median = (arr2[j-1] + arr2[j]) / 2\n        \n    else:\n        # if one of the lists has odd length\n        if n % 4 == 1:\n            median = (arr1[n//2] + arr2[n//2]) / 2\n        else:\n            median = arr1[n//2]\n    \n    return median\n",
        "test": "assert get_median([1,2,3,4,5], [5,6,7,8,9], 5) == 5",
        "num_ids": 4158,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def nth_nums(nums, n):\n    return [num ** n for num in nums]\n",
        "test": "assert nth_nums([1,2,3,4,5],2) == [1,4,9,16,25]",
        "num_ids": 2018,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase_string = string.upper()\n    return uppercase_string\n",
        "test": "assert is_upper(\"Hello World\") == \"HELLO WORLD\" # Test 1",
        "num_ids": 1068,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 32,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    if len(newList) < 2:  # Check if the list has at least two elements\n        return newList  # If not, return the original list\n    \n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]  # Swap the first and last elements\n        return newList  # Return the modified list\n",
        "test": "assert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]  # test case 1",
        "num_ids": 1985,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the semi-circumference of the circle\n    semi_circumference = 2 * math.pi * r\n\n    # Find the maximum possible side length of the triangle\n    max_side = semi_circumference / 3\n\n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    area = (math.sqrt(3) / 4) * semi_circumference * max_side\n\n    return area\n",
        "test": "assert triangle_area(4) == 7.3192658140703587",
        "num_ids": 2483,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 34,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # If end is not given, set it to length of array\n    if end is None:\n        end = len(array)\n    \n    # Initialize missing number as 1\n    missing = 1\n    \n    # Loop through the array and update the missing number\n    for i in range(start, end):\n        if array[i] == missing:\n            missing += 1\n    \n    # Return the smallest missing number\n    return missing\n",
        "test": "assert find_First_Missing([1,2,3,4,6,7,8,9]) == 5  # missing number is 5",
        "num_ids": 2537,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 33,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "test": "assert replace_spaces(\"Hello World\") == \"Hello%20World\"",
        "num_ids": 1132,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 33,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def Split(numbers):\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n",
        "test": "assert Split([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]",
        "num_ids": 1678,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent_coords = [(ele[0]-1, ele[1]), (ele[0]+1, ele[1]), (ele[0], ele[1]-1), (ele[0], ele[1]+1)]\n    if sub:\n        return [x for x in adjacent_coords if x in sub]\n    else:\n        return adjacent_coords\n",
        "test": "assert adjac((2,2)) == [(1,2),(3,2),(2,1),(2,3)] #test case 2",
        "num_ids": 2846,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if ' ' in text:\n        return text.replace(' ', '_')\n    elif '_' in text:\n        return text.replace('_', ' ')\n    else:\n        return text\n",
        "test": "assert replace_spaces(\"hello_world\") == \"hello world\"",
        "num_ids": 1401,
        "indeed": true
    },
    {
        "number": 632,
        "max_answer_num": 28,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = num_list.count(0)\n    num_list = [num for num in num_list if num != 0]\n    num_list += [0] * zero_count\n    return num_list\n",
        "test": "assert move_zero([]) == []",
        "num_ids": 3212,
        "indeed": true
    },
    {
        "number": 633,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def pair_xor_Sum(arr,n) :\n    # Initialize sum to 0\n    s = 0\n    \n    # Traverse through the array and compute xor of all pairs\n    for i in range(n):\n        for j in range(i+1, n):\n            s = s ^ (arr[i] ^ arr[j])\n    \n    # Return the computed sum\n    return s\n",
        "test": "assert pair_xor_Sum([1,1,1,1,1],5) == 0",
        "num_ids": 2300,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 240,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    heap = []\n    for value in iterable:\n        hq.heappush(heap, value)\n    return [hq.heappop(heap) for i in range(len(heap))]\n",
        "test": "assert heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9] ",
        "num_ids": 2062,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 35,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n",
        "test": "assert noprofit_noloss(100, 100) == True  # if actual_cost and sale_amount are equal, the function should return True ",
        "num_ids": 1743,
        "indeed": true
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Function to calculate wind chill index rounded to the next integer.\n    Inputs:\n        v: Wind velocity in km/h\n        t: Temperature in celsius\n    Returns:\n        wind_chill_index: Wind chill index rounded to the next integer\n    '''\n    # Convert celsius to fahrenheit\n    f = (t * 9/5) + 32\n    # Calculate wind chill index using formula\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v,0.16) + 0.3965 * t * math.pow(v,0.16)\n    # Round wind chill index to the next integer\n    wind_chill_index = round(wind_chill_index)\n    return wind_chill_index\n",
        "test": "assert wind_chill(40, 20) == 19  # check wind_chill value for v=40, t=20",
        "num_ids": 3042,
        "indeed": true
    },
    {
        "number": 639,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count\n",
        "test": "assert sample_nam([]) == 0 # test case for an empty list ",
        "num_ids": 2209,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)\n",
        "test": "assert remove_parenthesis(\"Hello (world) how are you\") == \"Hello  how are you\"  # basic example",
        "num_ids": 1596,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 17,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (2*n - 1)",
        "test": "assert is_nonagonal(1) == 1, \"First nonagonal number is 1\" ",
        "num_ids": 1661,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 26,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[^z\\W]z[^z\\W]\\b'\n    return bool(re.search(pattern, text))\n",
        "test": "assert text_match_wordz_middle(\"hello world\") == False",
        "num_ids": 1831,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 300,
        "answer": "def reverse_Array_Upto_K(input, k):\n    if k < len(input):\n        return input[:k][::-1] + input[k:]\n    else:\n        return input[::-1]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1] # reverse all elements",
        "num_ids": 2968,
        "indeed": true
    },
    {
        "number": 720,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return test_tup + (test_dict,)",
        "test": "assert add_dict_to_tuple(('apple', 'banana', 'orange'), {'color': 'yellow', 'taste': 'sweet'}) == ('apple', 'banana', 'orange', {'color': 'yellow', 'taste': 'sweet'}) ",
        "num_ids": 2872,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def maxAverageOfPath(cost):\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    for j in range(1, n):\n        dp[0][j] = cost[0][j] + dp[0][j-1]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    # Compute the maximum average\n    max_avg = 0\n    for i in range(n):\n        for j in range(n):\n            path_len = n - i - j\n            avg = dp[i][j] / path_len\n            max_avg = max(max_avg, avg)\n    return max_avg\n",
        "test": "assert maxAverageOfPath([[1]]) == 1",
        "num_ids": 4880,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[student] = info\n    return filtered_students\n",
        "test": "assert filter_data({'John': (1.8, 80), 'Jane': (1.7, 70), 'Mark': (1.8, 90)}, 1.6, 65) == {'John': (1.8, 80), 'Jane': (1.7, 70), 'Mark': (1.8, 90)} ",
        "num_ids": 3348,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "test": "assert count_same_pair([1,2,3], [1,2,3]) == 3, \"Should be 3\"",
        "num_ids": 2134,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    base_as_string = str(base)\n    base_power = int(base_as_string) ** power\n    sum_of_digits = sum(int(digit) for digit in str(base_power))\n    return sum_of_digits\n",
        "test": "assert power_base_sum(3, 1) == 3, \"Incorrect result for base=3 and power=1\" ",
        "num_ids": 2610,
        "indeed": true
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 370,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # using regular expression to match values between quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n    result = pattern.findall(text1)\n    return result",
        "test": "assert extract_quotation('\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"') == 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'",
        "num_ids": 1621,
        "indeed": true
    },
    {
        "number": 726,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)\n",
        "test": "assert multiply_elements((1, 2, 3, 4, 5)) == (2, 6, 12, 20)",
        "num_ids": 2945,
        "indeed": true
    },
    {
        "number": 728,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n",
        "test": "assert sum_list([1,2,3],[4,5,6]) == [5,7,9]",
        "num_ids": 2402,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [key for key, group in groupby(nums)]\n",
        "test": "assert consecutive_duplicates([]) == []",
        "num_ids": 2494,
        "indeed": true
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n    return 2 * math.pi * r * h\n",
        "test": "assert lateralsurface_cone(1, 2) == 12.566370614359172 ",
        "num_ids": 2304,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 14,
        "max_test_num": 10,
        "total_product": 280,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[ .,]+', ':', text)\n",
        "test": "assert replace_specialchar(\"My name is John\") == \"My:name:is:John\"",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1 # if x is not found in A\n",
        "test": "assert find_first_occurrence([1,2,3,4,4,4,5,6], 7) == -1 ",
        "num_ids": 2872,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n    res = 0\n    \n    # Calculate prefix sum\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    \n    # Calculate the sum of products of all subarrays\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            res += (prefix_sum[j] - prefix_sum[i - 1]) * (prefix_sum[j - 1] - prefix_sum[i - 1])\n    \n    # Calculate the sum of products of all subarrays with at least two elements\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            res -= (prefix_sum[j] - prefix_sum[i - 1]) * (prefix_sum[j - 1] - prefix_sum[i - 1])\n    \n    return res % mod\n",
        "test": "assert sum_Of_Subarray_Prod([0, 0, 0]) == 0 #sum of all possible subproducts of [0, 0, 0]",
        "num_ids": 2649,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # first and last bits\n    first_bit = 1 << 0\n    last_bit = 1 << 31\n    # mask to toggle bits between first and last bits\n    mask = (first_bit - 1) & (last_bit - 1)\n    # toggle bits between first and last bits\n    return (n ^ mask)\n",
        "test": "assert set_middle_bits(0b0000) == 0b0000",
        "num_ids": 2378,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 33,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    return i",
        "test": "assert left_insertion([1,2,3,4], 5) == 4 ",
        "num_ids": 1895,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 31,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False",
        "test": "assert check_str(\"Eduardo\"), \"check_str should return True if the string starts with a vowel\"",
        "num_ids": 1462,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 13,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)\n",
        "test": "assert geometric_sum(1) == 1",
        "num_ids": 1562,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import math\n\ndef find_Index(n):\n    count = 0\n    while True:\n        count += 1\n        triangular = count * (count + 1) // 2\n        if len(str(triangular)) == n:\n            return count",
        "test": "assert find_Index(1) == 1, \"Incorrect output for n=1\" ",
        "num_ids": 1758,
        "indeed": true
    },
    {
        "number": 740,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n    return result\n",
        "test": "assert tuple_to_dict((\"key1\", \"value1\", \"key2\", \"value2\", \"key3\", \"value3\")) == {\"key1\": \"value1\", \"key2\": \"value2\", \"key3\": \"value3\"}",
        "num_ids": 2515,
        "indeed": true
    },
    {
        "number": 741,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same, else returns False.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    \n    for i in range(1,len(s)):\n        if s[i] != s[0]:\n            return False\n    \n    return True",
        "test": "assert all_Characters_Same(\"hello\") == False",
        "num_ids": 1500,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the volume of the tetrahedron\n    volume = (tetrahedron(side)) / 3\n    \n    # Calculate the area of the tetrahedron using the formula: 3V / (4sqrt(3))\n    area = 3 * volume / (4 * math.sqrt(3))\n    \n    return area\n\ndef tetrahedron(side):\n    '''\n    Calculate the volume of a tetrahedron using the formula: 1/3 * base * height\n    '''\n    return (side ** 2) * math.sqrt(3) / 2\n",
        "test": "assert area_tetrahedron(0) == 0 # Checking if the area of a tetrahedron with a side of 0 is 0",
        "num_ids": 2293,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    return lst[n-m:]+lst[:n-m]",
        "test": "assert rotate_right([1], 1) == [1] ",
        "num_ids": 2553,
        "indeed": true
    },
    {
        "number": 744,
        "max_answer_num": 39,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n",
        "test": "assert check_none((1, 2, 3, None)) == True",
        "num_ids": 1414,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n",
        "test": "assert divisible_by_digits(1000, 9999) == False ",
        "num_ids": 4007,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "import math\n\ndef sector_area(r, a):\n    if a > 360:\n        return None\n    else:\n        return 0.5 * r ** 2 * a / 360",
        "test": "assert sector_area(1, 370) == None # Check if the function returns None for 370 degree sector",
        "num_ids": 2267,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Initialize a 3D array to store the LCS lengths for each substring\n    L = [[[0] * (o+1) for _ in range(n+1)] for _ in range(m+1)]\n\n    # Fill in the LCS lengths for each substring\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Use the LCS lengths to find the LCS for each substring\n    lcs = \"\"\n    i, j, k = m, n, o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k] and L[i-1][j][k] > L[i][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] > L[i-1][j][k] and L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs\n",
        "test": "assert lcs_of_three(\"ABCD\", \"EFGH\", \"IJKL\") == \"\"  # No common subsequence",
        "num_ids": 5886,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 32,
        "max_test_num": 3,
        "total_product": 370,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall('[A-Z][a-z]*', str1)\n    return ' '.join(words)",
        "test": "assert capital_words_spaces(\"HelloWorld\") == \"Hello World\" ",
        "num_ids": 2079,
        "indeed": true
    },
    {
        "number": 749,
        "max_answer_num": 22,
        "max_test_num": 7,
        "total_product": 380,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # convert strings to floats and sort the list\n    sorted_nums = sorted(nums_str, key=float)\n    # convert the sorted list back to strings and return\n    return [str(num) for num in sorted_nums]\n",
        "test": "assert sort_numeric_strings([\"10.5\",\"20.3\",\"30.2\",\"40.1\",\"50.0\"]) == ['10.5', '20.3', '30.2', '40.1', '50.0'] ",
        "num_ids": 3087,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "test": "assert add_tuple([(1, 2)], (3, 4)) == [(1, 2), (3, 4)]",
        "num_ids": 1639,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 22,
        "max_test_num": 10,
        "total_product": 380,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    min_index = i\n\n    if left < len(arr) and arr[left] < arr[min_index]:\n        min_index = left\n\n    if right < len(arr) and arr[right] < arr[min_index]:\n        min_index = right\n\n    if min_index != i:\n        return False\n\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    '''\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True ",
        "test": "assert check_min_heap_helper([1,2,3,4,5], 1) == True # array with only one node",
        "num_ids": 3808,
        "indeed": true
    },
    {
        "number": 752,
        "max_answer_num": 40,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)\n",
        "test": "assert jacobsthal_num(0) == 0",
        "num_ids": 2097,
        "indeed": true
    },
    {
        "number": 753,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 290,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list)[:K]\n",
        "test": "assert min_k([(10, 'A'), (20, 'B'), (30, 'C'), (40, 'D'), (50, 'E')], 0) == []",
        "num_ids": 3262,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "test": "assert extract_index_list([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]) != [2, 3, 4, 5, 6, 7]  # common elements from all three lists, but not all the elements",
        "num_ids": 2804,
        "indeed": true
    },
    {
        "number": 755,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def second_smallest(numbers):\n    '''\n    Find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest\n",
        "test": "assert second_smallest([1, 2, 3, 4, 5]) == 2, \"Incorrect value for [1, 2, 3, 4, 5]\"",
        "num_ids": 2268,
        "indeed": true
    },
    {
        "number": 756,
        "max_answer_num": 29,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]+'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_zero_one(\"ab\") == True, \"text_match_zero_one should return True for 'ab' string\"",
        "num_ids": 1537,
        "indeed": true
    },
    {
        "number": 757,
        "max_answer_num": 21,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "test": "assert count_reverse_pairs([]) == 0",
        "num_ids": 2291,
        "indeed": true
    },
    {
        "number": 758,
        "max_answer_num": 17,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist = tuple(item)\n            if sublist in sublists:\n                sublists[sublist] += 1\n            else:\n                sublists[sublist] = 1\n    return sublists\n",
        "test": "assert unique_sublists([[1, 2], [3, 4], [1, 2]]) == {(1, 2): 2, (3, 4): 1} # test for two unique sublists and one duplicate sublist ",
        "num_ids": 3041,
        "indeed": true
    },
    {
        "number": 759,
        "max_answer_num": 27,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        decimal_num = round(float_num, 2)\n        if decimal_num == float_num:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n",
        "test": "assert is_decimal(\"3.1415\") == False, \"Error in is_decimal\"",
        "num_ids": 1982,
        "indeed": true
    },
    {
        "number": 760,
        "max_answer_num": 23,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 1:\n        return True\n    else:\n        unique_elements = set(arr)\n        if len(unique_elements) == 1:\n            return True\n        else:\n            return False",
        "test": "assert unique_Element([1]) == True",
        "num_ids": 1583,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 26,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    elif monthnum3 == 2:\n        return True #February has 28 days or 29 days depending on the year.\n    else:\n        return \"Invalid month number\"\n",
        "test": "assert check_monthnumber_number(1) == True # February has 28 days",
        "num_ids": 2283,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def find_min_diff(arr,n): \n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n",
        "test": "assert find_min_diff([1, 5, 3, 19, 18, 25], 6) == 1, \"Incorrect result for [1, 5, 3, 19, 18, 25], 6\"",
        "num_ids": 2356,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 36,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count\n",
        "test": "assert number_ctr('123abc') == 3 # example input with 3 digits",
        "num_ids": 1152,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 21,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = []\n    num = 1\n    count = 0\n    while count < n:\n        if all(num%i != 0 for i in range(2, int(math.sqrt(num))+1)):\n            polite_numbers.append(num)\n            count += 1\n        num += 1\n    return polite_numbers[n-1]\n",
        "test": "assert is_polite(1) == 1, \"Failed\"  # First polite number is 1",
        "num_ids": 2472,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 30,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1) - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs",
        "test": "assert pair_wise([1,2,3,4,5]) == [(1,2), (2,3), (3,4), (4,5)] ",
        "num_ids": 1607,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "test": "assert get_pairs_count([1, 2, 3, 4, 5], 11) == 0",
        "num_ids": 3204,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 17,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = [item for item in li1 if item not in li2]\n    return diff_list\n",
        "test": "assert Diff([1,2,3],[4,5,6]) == [1,2,3] # should return the first list because it is the same as the second list with some extra elements",
        "num_ids": 2135,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(1, 2*n, 2):\n        odd_sum += i**4\n    return odd_sum\n",
        "test": "assert odd_num_sum(1) == 1, \"The function does not work for n=1\"",
        "num_ids": 1975,
        "indeed": true
    },
    {
        "number": 771,
        "max_answer_num": 36,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    mapping = {']': '[', ')': '(', '}': '{'}\n    \n    for char in exp:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or mapping[char] != stack.pop():\n                return False\n    \n    return len(stack) == 0\n",
        "test": "assert check_expression(\"({[]})\") == True # balanced expression ",
        "num_ids": 1962,
        "indeed": true
    },
    {
        "number": 772,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    # Create an empty list to store the new words without the ones with length K\n    new_words = []\n    # Loop over the words and check if their length is greater than K\n    for word in words:\n        if len(word) > K:\n            new_words.append(word)\n    # Join the new list of words back into a string and return it\n    return \" \".join(new_words)\n",
        "test": "assert remove_length(\"\", 1) == \"\", \"Test case 4 failed\"",
        "num_ids": 2080,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None\n",
        "test": "assert occurance_substring(\"hello world\", \"z\") == None",
        "num_ids": 2126,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 26,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert odd_position([1, 2, 3, 4, 5]) == False",
        "num_ids": 1688,
        "indeed": true
    },
    {
        "number": 776,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "test": "assert count_vowels('') == 0",
        "num_ids": 1924,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def find_sum(arr):\n    unique_elements = set(arr)\n    non_repeated_sum = 0\n    for element in unique_elements:\n        if arr.count(element) == 1:\n            non_repeated_sum += element\n    return non_repeated_sum\n",
        "test": "assert find_sum([1,2,3,4,5]) == 15",
        "num_ids": 2420,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 23,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the elements of the list based on their value and count their occurrences\n    grouped = groupby(list1)\n    \n    # Create an empty list to store the sublists\n    sublists = []\n    \n    # Iterate over the groups and append them to the sublists\n    for key, group in grouped:\n        sublist = list(group)\n        sublists.append(sublist)\n    \n    return sublists\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 3075,
        "indeed": true
    },
    {
        "number": 779,
        "max_answer_num": 12,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = []\n    for i in range(len(list1)):\n        sublist = list(list1[i])\n        sublist.sort()\n        sublist = tuple(sublist)\n        if sublist not in sublists:\n            sublists.append(sublist)\n    count = {}\n    for sublist in sublists:\n        count[sublist] = list1.count(list(sublist))\n    return count\n",
        "test": "assert unique_sublists([]) == {}",
        "num_ids": 2883,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    target_sum = sum(test_list)\n    all_combinations = []\n\n    for i in range(1, len(test_list) + 1):\n        combinations_list = list(combinations(test_list, i))\n        for comb in combinations_list:\n            if sum(comb) == target_sum:\n                all_combinations.append(comb)\n\n    return all_combinations",
        "test": "assert find_combinations([(1,2), (3,4), (5,6), (7,8)]) == [(1, 3, 5, 7), (1, 3, 5, 8), (1, 3, 6, 7), (1, 3, 6, 8), (1, 4, 5, 7), (1, 4, 5, 8), (1, 4, 6, 7), (1, 4, 6, 8), (2, 3, 5, 7), (2, 3, 5, 8), (2, 3, 6, 7), (2, 3, 6, 8), (2, 4, 5, 7), (2, 4, 5, 8), (2, 4, 6, 7), (2, 4, 6, 8)] ",
        "num_ids": 6864,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 34,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math\n\ndef count_divisors(n):\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    return divisor_count\n\n\ndef check_even_divisors(n):\n    divisor_count = count_divisors(n)\n    return divisor_count % 2 == 0\n",
        "test": "assert count_divisors(2) == 2",
        "num_ids": 2082,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                total_sum += sum(arr[i:j+1])\n    return total_sum",
        "test": "assert odd_length_sum([]) == 0",
        "num_ids": 2347,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 39,
        "max_test_num": 8,
        "total_product": 400,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    # Convert RGB to HSV\n    r, g, b = r/255.0, g/255.0, b/255.0\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        h = 0.0\n        s = 0.0\n    else:\n        s = (maxc - minc) / maxc\n        if r == maxc:\n            h = ((g - b) / (maxc - minc)) % 6\n        elif g == maxc:\n            h = ((b - r) / (maxc - minc)) + 2\n        else:\n            h = ((r - g) / (maxc - minc)) + 4\n        h = h * 60.0\n    hsv = (h, s, v)\n    return hsv\n",
        "test": "assert rgb_to_hsv(0, 0, 0) == (0, 0, 0)  # black",
        "num_ids": 4334,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_prod = 1\n    odd_prod = 1\n    even_count = 0\n    odd_count = 0\n\n    for i in list1:\n        if i % 2 == 0:\n            even_prod *= i\n            even_count += 1\n            if even_count == 2:\n                break\n        else:\n            odd_prod *= i\n            odd_count += 1\n            if odd_count == 2:\n                break\n\n    return even_prod * odd_prod\n",
        "test": "assert mul_even_odd([0, 1, 2, 3, 4, 5]) == 0  # all numbers are odd, product of no even and odd numbers is 0",
        "num_ids": 2738,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 34,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to tuple\n    test_tuple = eval(test_str)\n\n    # Check if tuple contains only integers\n    if all(isinstance(i, int) for i in test_tuple):\n        # Convert tuple to integer tuple\n        int_tuple = tuple(test_tuple)\n        return int_tuple\n    else:\n        return None",
        "test": "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3), \"Tuple conversion not correct\"",
        "num_ids": 2428,
        "indeed": true
    },
    {
        "number": 786,
        "max_answer_num": 28,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index",
        "test": "assert right_insertion([1, 3, 5, 7, 9], 10) == 5, \"Error in right_insertion\"",
        "num_ids": 1855,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 24,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b.*b.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_three(\"abbb\") == True # Expect True",
        "num_ids": 1320,
        "indeed": true
    },
    {
        "number": 788,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = test_list + [test_str]\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "test": "assert new_tuple([], \"test\") == (\"test\",)",
        "num_ids": 1969,
        "indeed": true
    },
    {
        "number": 790,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 != 0:\n                return False\n    return True\n",
        "test": "assert even_position([2, 4, 6, 8, 10]) == True",
        "num_ids": 1806,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = ()\n    for item in test_tup:\n        if type(item) != tuple:\n            result += (item,)\n    return result\n",
        "test": "assert remove_nested(()) == ()",
        "num_ids": 1896,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 370,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n",
        "test": "assert count_list([[1,2,3],[4,5,6]]) == 2 ",
        "num_ids": 1621,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    l = 0\n    r = n - 1\n    \n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] == x:\n            if mid == n-1 or arr[mid+1] != x:\n                return mid\n            else:\n                l = mid + 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    \n    return -1\n",
        "test": "assert last([1, 2, 3, 4, 5], 5) == 4 ",
        "num_ids": 2631,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None\n",
        "test": "assert text_starta_endb('abcdefb') == 'abcdefb'",
        "num_ids": 1263,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 29,
        "max_test_num": 10,
        "total_product": 360,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    # Initialize sum variable\n    sum = 0\n\n    # Iterate through each item in the dictionary\n    for item in dict.items():\n        # Add the value of each item to the sum variable\n        sum += item[1]\n\n    # Return the sum\n    return sum\n",
        "test": "assert return_sum({'a': 1, 'b': 2, 'c': 3}) == 6",
        "num_ids": 1679,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 25,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "def sum_odd(n):\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through all natural numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is odd\n        if i % 2 != 0:\n            # Add i to the sum\n            sum += i\n    \n    # Return the sum of odd numbers\n    return sum\n",
        "test": "assert sum_odd(1) == 1",
        "num_ids": 2070,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 34,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)",
        "test": "assert _sum([1, 2, 3]) == 6 ",
        "num_ids": 2241,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 370,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the number to binary string and remove the '0b' prefix\n    binary_str = bin(n)[2:]\n\n    # Calculate the number of bits to be rotated\n    num_bits = len(binary_str)\n    rotate_bits = d % num_bits\n\n    # Split the binary string into two halves and rotate the second half to the left by rotate_bits\n    binary_str_left = binary_str[:num_bits - rotate_bits]\n    binary_str_right = binary_str[num_bits - rotate_bits:]\n\n    # Concatenate the two halves and convert back to decimal\n    rotated_binary_str = binary_str_right + binary_str_left\n    rotated_decimal = int(rotated_binary_str, 2)\n\n    return rotated_decimal\n",
        "test": "assert left_rotate(0b1010, 0) == 0b1010  # rotate 0 bits to the left, the number is already in its correct position",
        "num_ids": 2490,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 32,
        "max_test_num": 10,
        "total_product": 340,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n",
        "test": "assert remove_all_spaces(\"hello world\") == \"helloworld\"",
        "num_ids": 1171,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 34,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n",
        "test": "assert test_three_equal(1, 2, 3) == 0",
        "num_ids": 1721,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 22,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    low, high = 0, n-1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < arr[high]:\n            high = mid\n        else:\n            low = mid + 1\n    return high\n",
        "test": "assert count_rotation([1, 2, 3, 4, 5]) == 0, \"Incorrect rotation count\"",
        "num_ids": 2688,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 37,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def is_perfect_square(n):\n    # check if the number is a perfect square\n    if int(n**0.5)**2 == n:\n        return True\n    else:\n        return False\n",
        "test": "assert is_perfect_square(0) == True",
        "num_ids": 1519,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 21,
        "max_test_num": 9,
        "total_product": 400,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    return product % 2 == 0\n",
        "test": "assert is_product_even([2,4,6]) == True",
        "num_ids": 1445,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 20,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list\n",
        "test": "assert max_sum_list([[1,2,3],[4,5,6],[7,8,9]]) == [7,8,9]",
        "num_ids": 2736,
        "indeed": true
    },
    {
        "number": 806,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def max_run_uppercase(test_str):\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run\n",
        "test": "assert max_run_uppercase(\"\") == 0",
        "num_ids": 2037,
        "indeed": true
    },
    {
        "number": 807,
        "max_answer_num": 31,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n",
        "test": "assert first_odd([1,2,3,4,5]) == 1 ",
        "num_ids": 2347,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 400,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n",
        "test": "assert check_K((\"apple\", \"banana\", \"orange\"), 3) == False",
        "num_ids": 1712,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 24,
        "max_test_num": 10,
        "total_product": 400,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    if len(test_tup1) != len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n        \n    return True\n",
        "test": "assert check_smaller( (1, 2, 3), (4, 5, 6) ) == False ",
        "num_ids": 2381,
        "indeed": true
    }
]